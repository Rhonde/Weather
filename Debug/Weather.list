
Weather.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c0  0800a390  0800a390  0001a390  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    0000015c  0800ab50  0800ab50  0001ab50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000001c0  0800acac  0800acac  0001acac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000008  0800ae6c  0800ae6c  0001ae6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0800ae74  0800ae74  0001ae74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         000001d8  20000000  0800ae78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          0000028c  200001d8  0800b050  000201d8  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000464  0800b050  00020464  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001c68c  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003ba9  00000000  00000000  0003c894  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000ae14  00000000  00000000  0004043d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001000  00000000  00000000  0004b258  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014a8  00000000  00000000  0004c258  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000098ad  00000000  00000000  0004d700  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00006856  00000000  00000000  00056fad  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0005d803  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000040c8  00000000  00000000  0005d880  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a374 	.word	0x0800a374

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800a374 	.word	0x0800a374

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_uldivmod>:
 8000c40:	b953      	cbnz	r3, 8000c58 <__aeabi_uldivmod+0x18>
 8000c42:	b94a      	cbnz	r2, 8000c58 <__aeabi_uldivmod+0x18>
 8000c44:	2900      	cmp	r1, #0
 8000c46:	bf08      	it	eq
 8000c48:	2800      	cmpeq	r0, #0
 8000c4a:	bf1c      	itt	ne
 8000c4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c50:	f04f 30ff 	movne.w	r0, #4294967295
 8000c54:	f001 b914 	b.w	8001e80 <__aeabi_idiv0>
 8000c58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c60:	f000 f824 	bl	8000cac <__udivmoddi4>
 8000c64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c6c:	b004      	add	sp, #16
 8000c6e:	4770      	bx	lr

08000c70 <__powisf2>:
 8000c70:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 8000c74:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8000c78:	eef0 7a40 	vmov.f32	s15, s0
 8000c7c:	f013 0f01 	tst.w	r3, #1
 8000c80:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000c84:	bf18      	it	ne
 8000c86:	eeb0 0a67 	vmovne.f32	s0, s15
 8000c8a:	e005      	b.n	8000c98 <__powisf2+0x28>
 8000c8c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000c90:	07da      	lsls	r2, r3, #31
 8000c92:	bf48      	it	mi
 8000c94:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 8000c98:	085b      	lsrs	r3, r3, #1
 8000c9a:	d1f7      	bne.n	8000c8c <__powisf2+0x1c>
 8000c9c:	2800      	cmp	r0, #0
 8000c9e:	bfbc      	itt	lt
 8000ca0:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8000ca4:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop

08000cac <__udivmoddi4>:
 8000cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb0:	468c      	mov	ip, r1
 8000cb2:	460d      	mov	r5, r1
 8000cb4:	4604      	mov	r4, r0
 8000cb6:	9e08      	ldr	r6, [sp, #32]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d151      	bne.n	8000d60 <__udivmoddi4+0xb4>
 8000cbc:	428a      	cmp	r2, r1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	d96d      	bls.n	8000d9e <__udivmoddi4+0xf2>
 8000cc2:	fab2 fe82 	clz	lr, r2
 8000cc6:	f1be 0f00 	cmp.w	lr, #0
 8000cca:	d00b      	beq.n	8000ce4 <__udivmoddi4+0x38>
 8000ccc:	f1ce 0c20 	rsb	ip, lr, #32
 8000cd0:	fa01 f50e 	lsl.w	r5, r1, lr
 8000cd4:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000cd8:	fa02 f70e 	lsl.w	r7, r2, lr
 8000cdc:	ea4c 0c05 	orr.w	ip, ip, r5
 8000ce0:	fa00 f40e 	lsl.w	r4, r0, lr
 8000ce4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000ce8:	0c25      	lsrs	r5, r4, #16
 8000cea:	fbbc f8fa 	udiv	r8, ip, sl
 8000cee:	fa1f f987 	uxth.w	r9, r7
 8000cf2:	fb0a cc18 	mls	ip, sl, r8, ip
 8000cf6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000cfa:	fb08 f309 	mul.w	r3, r8, r9
 8000cfe:	42ab      	cmp	r3, r5
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x6c>
 8000d02:	19ed      	adds	r5, r5, r7
 8000d04:	f108 32ff 	add.w	r2, r8, #4294967295
 8000d08:	f080 8123 	bcs.w	8000f52 <__udivmoddi4+0x2a6>
 8000d0c:	42ab      	cmp	r3, r5
 8000d0e:	f240 8120 	bls.w	8000f52 <__udivmoddi4+0x2a6>
 8000d12:	f1a8 0802 	sub.w	r8, r8, #2
 8000d16:	443d      	add	r5, r7
 8000d18:	1aed      	subs	r5, r5, r3
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000d20:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d24:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d28:	fb00 f909 	mul.w	r9, r0, r9
 8000d2c:	45a1      	cmp	r9, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x98>
 8000d30:	19e4      	adds	r4, r4, r7
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 810a 	bcs.w	8000f4e <__udivmoddi4+0x2a2>
 8000d3a:	45a1      	cmp	r9, r4
 8000d3c:	f240 8107 	bls.w	8000f4e <__udivmoddi4+0x2a2>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	eba4 0409 	sub.w	r4, r4, r9
 8000d48:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d061      	beq.n	8000e16 <__udivmoddi4+0x16a>
 8000d52:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d56:	2300      	movs	r3, #0
 8000d58:	6034      	str	r4, [r6, #0]
 8000d5a:	6073      	str	r3, [r6, #4]
 8000d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d60:	428b      	cmp	r3, r1
 8000d62:	d907      	bls.n	8000d74 <__udivmoddi4+0xc8>
 8000d64:	2e00      	cmp	r6, #0
 8000d66:	d054      	beq.n	8000e12 <__udivmoddi4+0x166>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	f040 808e 	bne.w	8000e9a <__udivmoddi4+0x1ee>
 8000d7e:	42ab      	cmp	r3, r5
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xdc>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2d0>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb65 0503 	sbc.w	r5, r5, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	46ac      	mov	ip, r5
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d03f      	beq.n	8000e16 <__udivmoddi4+0x16a>
 8000d96:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	b912      	cbnz	r2, 8000da6 <__udivmoddi4+0xfa>
 8000da0:	2701      	movs	r7, #1
 8000da2:	fbb7 f7f2 	udiv	r7, r7, r2
 8000da6:	fab7 fe87 	clz	lr, r7
 8000daa:	f1be 0f00 	cmp.w	lr, #0
 8000dae:	d134      	bne.n	8000e1a <__udivmoddi4+0x16e>
 8000db0:	1beb      	subs	r3, r5, r7
 8000db2:	0c3a      	lsrs	r2, r7, #16
 8000db4:	fa1f fc87 	uxth.w	ip, r7
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb3 f8f2 	udiv	r8, r3, r2
 8000dbe:	0c25      	lsrs	r5, r4, #16
 8000dc0:	fb02 3318 	mls	r3, r2, r8, r3
 8000dc4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dc8:	fb0c f308 	mul.w	r3, ip, r8
 8000dcc:	42ab      	cmp	r3, r5
 8000dce:	d907      	bls.n	8000de0 <__udivmoddi4+0x134>
 8000dd0:	19ed      	adds	r5, r5, r7
 8000dd2:	f108 30ff 	add.w	r0, r8, #4294967295
 8000dd6:	d202      	bcs.n	8000dde <__udivmoddi4+0x132>
 8000dd8:	42ab      	cmp	r3, r5
 8000dda:	f200 80d1 	bhi.w	8000f80 <__udivmoddi4+0x2d4>
 8000dde:	4680      	mov	r8, r0
 8000de0:	1aed      	subs	r5, r5, r3
 8000de2:	b2a3      	uxth	r3, r4
 8000de4:	fbb5 f0f2 	udiv	r0, r5, r2
 8000de8:	fb02 5510 	mls	r5, r2, r0, r5
 8000dec:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000df0:	fb0c fc00 	mul.w	ip, ip, r0
 8000df4:	45a4      	cmp	ip, r4
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0x15c>
 8000df8:	19e4      	adds	r4, r4, r7
 8000dfa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0x15a>
 8000e00:	45a4      	cmp	ip, r4
 8000e02:	f200 80b8 	bhi.w	8000f76 <__udivmoddi4+0x2ca>
 8000e06:	4618      	mov	r0, r3
 8000e08:	eba4 040c 	sub.w	r4, r4, ip
 8000e0c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e10:	e79d      	b.n	8000d4e <__udivmoddi4+0xa2>
 8000e12:	4631      	mov	r1, r6
 8000e14:	4630      	mov	r0, r6
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	f1ce 0420 	rsb	r4, lr, #32
 8000e1e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000e22:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e26:	fa20 f804 	lsr.w	r8, r0, r4
 8000e2a:	0c3a      	lsrs	r2, r7, #16
 8000e2c:	fa25 f404 	lsr.w	r4, r5, r4
 8000e30:	ea48 0803 	orr.w	r8, r8, r3
 8000e34:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e38:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e3c:	fb02 4411 	mls	r4, r2, r1, r4
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e48:	fb01 f30c 	mul.w	r3, r1, ip
 8000e4c:	42ab      	cmp	r3, r5
 8000e4e:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e52:	d909      	bls.n	8000e68 <__udivmoddi4+0x1bc>
 8000e54:	19ed      	adds	r5, r5, r7
 8000e56:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e5a:	f080 808a 	bcs.w	8000f72 <__udivmoddi4+0x2c6>
 8000e5e:	42ab      	cmp	r3, r5
 8000e60:	f240 8087 	bls.w	8000f72 <__udivmoddi4+0x2c6>
 8000e64:	3902      	subs	r1, #2
 8000e66:	443d      	add	r5, r7
 8000e68:	1aeb      	subs	r3, r5, r3
 8000e6a:	fa1f f588 	uxth.w	r5, r8
 8000e6e:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e72:	fb02 3310 	mls	r3, r2, r0, r3
 8000e76:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e7a:	fb00 f30c 	mul.w	r3, r0, ip
 8000e7e:	42ab      	cmp	r3, r5
 8000e80:	d907      	bls.n	8000e92 <__udivmoddi4+0x1e6>
 8000e82:	19ed      	adds	r5, r5, r7
 8000e84:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e88:	d26f      	bcs.n	8000f6a <__udivmoddi4+0x2be>
 8000e8a:	42ab      	cmp	r3, r5
 8000e8c:	d96d      	bls.n	8000f6a <__udivmoddi4+0x2be>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	443d      	add	r5, r7
 8000e92:	1aeb      	subs	r3, r5, r3
 8000e94:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e98:	e78f      	b.n	8000dba <__udivmoddi4+0x10e>
 8000e9a:	f1c1 0720 	rsb	r7, r1, #32
 8000e9e:	fa22 f807 	lsr.w	r8, r2, r7
 8000ea2:	408b      	lsls	r3, r1
 8000ea4:	fa05 f401 	lsl.w	r4, r5, r1
 8000ea8:	ea48 0303 	orr.w	r3, r8, r3
 8000eac:	fa20 fe07 	lsr.w	lr, r0, r7
 8000eb0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000eb4:	40fd      	lsrs	r5, r7
 8000eb6:	ea4e 0e04 	orr.w	lr, lr, r4
 8000eba:	fbb5 f9fc 	udiv	r9, r5, ip
 8000ebe:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000ec2:	fb0c 5519 	mls	r5, ip, r9, r5
 8000ec6:	fa1f f883 	uxth.w	r8, r3
 8000eca:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000ece:	fb09 f408 	mul.w	r4, r9, r8
 8000ed2:	42ac      	cmp	r4, r5
 8000ed4:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed8:	fa00 fa01 	lsl.w	sl, r0, r1
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x244>
 8000ede:	18ed      	adds	r5, r5, r3
 8000ee0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ee4:	d243      	bcs.n	8000f6e <__udivmoddi4+0x2c2>
 8000ee6:	42ac      	cmp	r4, r5
 8000ee8:	d941      	bls.n	8000f6e <__udivmoddi4+0x2c2>
 8000eea:	f1a9 0902 	sub.w	r9, r9, #2
 8000eee:	441d      	add	r5, r3
 8000ef0:	1b2d      	subs	r5, r5, r4
 8000ef2:	fa1f fe8e 	uxth.w	lr, lr
 8000ef6:	fbb5 f0fc 	udiv	r0, r5, ip
 8000efa:	fb0c 5510 	mls	r5, ip, r0, r5
 8000efe:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000f02:	fb00 f808 	mul.w	r8, r0, r8
 8000f06:	45a0      	cmp	r8, r4
 8000f08:	d907      	bls.n	8000f1a <__udivmoddi4+0x26e>
 8000f0a:	18e4      	adds	r4, r4, r3
 8000f0c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f10:	d229      	bcs.n	8000f66 <__udivmoddi4+0x2ba>
 8000f12:	45a0      	cmp	r8, r4
 8000f14:	d927      	bls.n	8000f66 <__udivmoddi4+0x2ba>
 8000f16:	3802      	subs	r0, #2
 8000f18:	441c      	add	r4, r3
 8000f1a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f1e:	eba4 0408 	sub.w	r4, r4, r8
 8000f22:	fba0 8902 	umull	r8, r9, r0, r2
 8000f26:	454c      	cmp	r4, r9
 8000f28:	46c6      	mov	lr, r8
 8000f2a:	464d      	mov	r5, r9
 8000f2c:	d315      	bcc.n	8000f5a <__udivmoddi4+0x2ae>
 8000f2e:	d012      	beq.n	8000f56 <__udivmoddi4+0x2aa>
 8000f30:	b156      	cbz	r6, 8000f48 <__udivmoddi4+0x29c>
 8000f32:	ebba 030e 	subs.w	r3, sl, lr
 8000f36:	eb64 0405 	sbc.w	r4, r4, r5
 8000f3a:	fa04 f707 	lsl.w	r7, r4, r7
 8000f3e:	40cb      	lsrs	r3, r1
 8000f40:	431f      	orrs	r7, r3
 8000f42:	40cc      	lsrs	r4, r1
 8000f44:	6037      	str	r7, [r6, #0]
 8000f46:	6074      	str	r4, [r6, #4]
 8000f48:	2100      	movs	r1, #0
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	e6f8      	b.n	8000d44 <__udivmoddi4+0x98>
 8000f52:	4690      	mov	r8, r2
 8000f54:	e6e0      	b.n	8000d18 <__udivmoddi4+0x6c>
 8000f56:	45c2      	cmp	sl, r8
 8000f58:	d2ea      	bcs.n	8000f30 <__udivmoddi4+0x284>
 8000f5a:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f5e:	eb69 0503 	sbc.w	r5, r9, r3
 8000f62:	3801      	subs	r0, #1
 8000f64:	e7e4      	b.n	8000f30 <__udivmoddi4+0x284>
 8000f66:	4628      	mov	r0, r5
 8000f68:	e7d7      	b.n	8000f1a <__udivmoddi4+0x26e>
 8000f6a:	4640      	mov	r0, r8
 8000f6c:	e791      	b.n	8000e92 <__udivmoddi4+0x1e6>
 8000f6e:	4681      	mov	r9, r0
 8000f70:	e7be      	b.n	8000ef0 <__udivmoddi4+0x244>
 8000f72:	4601      	mov	r1, r0
 8000f74:	e778      	b.n	8000e68 <__udivmoddi4+0x1bc>
 8000f76:	3802      	subs	r0, #2
 8000f78:	443c      	add	r4, r7
 8000f7a:	e745      	b.n	8000e08 <__udivmoddi4+0x15c>
 8000f7c:	4608      	mov	r0, r1
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xe6>
 8000f80:	f1a8 0802 	sub.w	r8, r8, #2
 8000f84:	443d      	add	r5, r7
 8000f86:	e72b      	b.n	8000de0 <__udivmoddi4+0x134>

08000f88 <selfrel_offset31>:
 8000f88:	6803      	ldr	r3, [r0, #0]
 8000f8a:	005a      	lsls	r2, r3, #1
 8000f8c:	bf4c      	ite	mi
 8000f8e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000f92:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8000f96:	4418      	add	r0, r3
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <search_EIT_table>:
 8000f9c:	b361      	cbz	r1, 8000ff8 <search_EIT_table+0x5c>
 8000f9e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fa2:	f101 3aff 	add.w	sl, r1, #4294967295
 8000fa6:	4690      	mov	r8, r2
 8000fa8:	4606      	mov	r6, r0
 8000faa:	46d1      	mov	r9, sl
 8000fac:	2700      	movs	r7, #0
 8000fae:	eb07 0409 	add.w	r4, r7, r9
 8000fb2:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8000fb6:	1064      	asrs	r4, r4, #1
 8000fb8:	00e5      	lsls	r5, r4, #3
 8000fba:	1971      	adds	r1, r6, r5
 8000fbc:	4608      	mov	r0, r1
 8000fbe:	f7ff ffe3 	bl	8000f88 <selfrel_offset31>
 8000fc2:	45a2      	cmp	sl, r4
 8000fc4:	4683      	mov	fp, r0
 8000fc6:	f105 0008 	add.w	r0, r5, #8
 8000fca:	4430      	add	r0, r6
 8000fcc:	d009      	beq.n	8000fe2 <search_EIT_table+0x46>
 8000fce:	f7ff ffdb 	bl	8000f88 <selfrel_offset31>
 8000fd2:	45c3      	cmp	fp, r8
 8000fd4:	f100 30ff 	add.w	r0, r0, #4294967295
 8000fd8:	d805      	bhi.n	8000fe6 <search_EIT_table+0x4a>
 8000fda:	4540      	cmp	r0, r8
 8000fdc:	d209      	bcs.n	8000ff2 <search_EIT_table+0x56>
 8000fde:	1c67      	adds	r7, r4, #1
 8000fe0:	e7e5      	b.n	8000fae <search_EIT_table+0x12>
 8000fe2:	45c3      	cmp	fp, r8
 8000fe4:	d905      	bls.n	8000ff2 <search_EIT_table+0x56>
 8000fe6:	42a7      	cmp	r7, r4
 8000fe8:	d002      	beq.n	8000ff0 <search_EIT_table+0x54>
 8000fea:	f104 39ff 	add.w	r9, r4, #4294967295
 8000fee:	e7de      	b.n	8000fae <search_EIT_table+0x12>
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	4770      	bx	lr

08000ffc <__gnu_unwind_get_pr_addr>:
 8000ffc:	2801      	cmp	r0, #1
 8000ffe:	d007      	beq.n	8001010 <__gnu_unwind_get_pr_addr+0x14>
 8001000:	2802      	cmp	r0, #2
 8001002:	d007      	beq.n	8001014 <__gnu_unwind_get_pr_addr+0x18>
 8001004:	4b04      	ldr	r3, [pc, #16]	; (8001018 <__gnu_unwind_get_pr_addr+0x1c>)
 8001006:	2800      	cmp	r0, #0
 8001008:	bf0c      	ite	eq
 800100a:	4618      	moveq	r0, r3
 800100c:	2000      	movne	r0, #0
 800100e:	4770      	bx	lr
 8001010:	4802      	ldr	r0, [pc, #8]	; (800101c <__gnu_unwind_get_pr_addr+0x20>)
 8001012:	4770      	bx	lr
 8001014:	4802      	ldr	r0, [pc, #8]	; (8001020 <__gnu_unwind_get_pr_addr+0x24>)
 8001016:	4770      	bx	lr
 8001018:	08001701 	.word	0x08001701
 800101c:	08001705 	.word	0x08001705
 8001020:	08001709 	.word	0x08001709

08001024 <get_eit_entry>:
 8001024:	b530      	push	{r4, r5, lr}
 8001026:	4b24      	ldr	r3, [pc, #144]	; (80010b8 <get_eit_entry+0x94>)
 8001028:	b083      	sub	sp, #12
 800102a:	4604      	mov	r4, r0
 800102c:	1e8d      	subs	r5, r1, #2
 800102e:	b37b      	cbz	r3, 8001090 <get_eit_entry+0x6c>
 8001030:	a901      	add	r1, sp, #4
 8001032:	4628      	mov	r0, r5
 8001034:	f3af 8000 	nop.w
 8001038:	b320      	cbz	r0, 8001084 <get_eit_entry+0x60>
 800103a:	9901      	ldr	r1, [sp, #4]
 800103c:	462a      	mov	r2, r5
 800103e:	f7ff ffad 	bl	8000f9c <search_EIT_table>
 8001042:	4601      	mov	r1, r0
 8001044:	b1f0      	cbz	r0, 8001084 <get_eit_entry+0x60>
 8001046:	f7ff ff9f 	bl	8000f88 <selfrel_offset31>
 800104a:	684b      	ldr	r3, [r1, #4]
 800104c:	64a0      	str	r0, [r4, #72]	; 0x48
 800104e:	2b01      	cmp	r3, #1
 8001050:	d012      	beq.n	8001078 <get_eit_entry+0x54>
 8001052:	2b00      	cmp	r3, #0
 8001054:	f101 0004 	add.w	r0, r1, #4
 8001058:	db20      	blt.n	800109c <get_eit_entry+0x78>
 800105a:	f7ff ff95 	bl	8000f88 <selfrel_offset31>
 800105e:	2300      	movs	r3, #0
 8001060:	64e0      	str	r0, [r4, #76]	; 0x4c
 8001062:	6523      	str	r3, [r4, #80]	; 0x50
 8001064:	6803      	ldr	r3, [r0, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	db1c      	blt.n	80010a4 <get_eit_entry+0x80>
 800106a:	f7ff ff8d 	bl	8000f88 <selfrel_offset31>
 800106e:	2300      	movs	r3, #0
 8001070:	6120      	str	r0, [r4, #16]
 8001072:	4618      	mov	r0, r3
 8001074:	b003      	add	sp, #12
 8001076:	bd30      	pop	{r4, r5, pc}
 8001078:	2300      	movs	r3, #0
 800107a:	6123      	str	r3, [r4, #16]
 800107c:	2305      	movs	r3, #5
 800107e:	4618      	mov	r0, r3
 8001080:	b003      	add	sp, #12
 8001082:	bd30      	pop	{r4, r5, pc}
 8001084:	2300      	movs	r3, #0
 8001086:	6123      	str	r3, [r4, #16]
 8001088:	2309      	movs	r3, #9
 800108a:	4618      	mov	r0, r3
 800108c:	b003      	add	sp, #12
 800108e:	bd30      	pop	{r4, r5, pc}
 8001090:	490a      	ldr	r1, [pc, #40]	; (80010bc <get_eit_entry+0x98>)
 8001092:	480b      	ldr	r0, [pc, #44]	; (80010c0 <get_eit_entry+0x9c>)
 8001094:	1a09      	subs	r1, r1, r0
 8001096:	10c9      	asrs	r1, r1, #3
 8001098:	9101      	str	r1, [sp, #4]
 800109a:	e7cf      	b.n	800103c <get_eit_entry+0x18>
 800109c:	2301      	movs	r3, #1
 800109e:	64e0      	str	r0, [r4, #76]	; 0x4c
 80010a0:	6523      	str	r3, [r4, #80]	; 0x50
 80010a2:	e7df      	b.n	8001064 <get_eit_entry+0x40>
 80010a4:	f3c3 6003 	ubfx	r0, r3, #24, #4
 80010a8:	f7ff ffa8 	bl	8000ffc <__gnu_unwind_get_pr_addr>
 80010ac:	2800      	cmp	r0, #0
 80010ae:	6120      	str	r0, [r4, #16]
 80010b0:	bf14      	ite	ne
 80010b2:	2300      	movne	r3, #0
 80010b4:	2309      	moveq	r3, #9
 80010b6:	e7dc      	b.n	8001072 <get_eit_entry+0x4e>
 80010b8:	00000000 	.word	0x00000000
 80010bc:	0800ae6c 	.word	0x0800ae6c
 80010c0:	0800acac 	.word	0x0800acac

080010c4 <restore_non_core_regs>:
 80010c4:	6803      	ldr	r3, [r0, #0]
 80010c6:	07da      	lsls	r2, r3, #31
 80010c8:	b510      	push	{r4, lr}
 80010ca:	4604      	mov	r4, r0
 80010cc:	d406      	bmi.n	80010dc <restore_non_core_regs+0x18>
 80010ce:	079b      	lsls	r3, r3, #30
 80010d0:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80010d4:	d509      	bpl.n	80010ea <restore_non_core_regs+0x26>
 80010d6:	f000 fc51 	bl	800197c <__gnu_Unwind_Restore_VFP_D>
 80010da:	6823      	ldr	r3, [r4, #0]
 80010dc:	0759      	lsls	r1, r3, #29
 80010de:	d509      	bpl.n	80010f4 <restore_non_core_regs+0x30>
 80010e0:	071a      	lsls	r2, r3, #28
 80010e2:	d50e      	bpl.n	8001102 <restore_non_core_regs+0x3e>
 80010e4:	06db      	lsls	r3, r3, #27
 80010e6:	d513      	bpl.n	8001110 <restore_non_core_regs+0x4c>
 80010e8:	bd10      	pop	{r4, pc}
 80010ea:	f000 fc3f 	bl	800196c <__gnu_Unwind_Restore_VFP>
 80010ee:	6823      	ldr	r3, [r4, #0]
 80010f0:	0759      	lsls	r1, r3, #29
 80010f2:	d4f5      	bmi.n	80010e0 <restore_non_core_regs+0x1c>
 80010f4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80010f8:	f000 fc48 	bl	800198c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80010fc:	6823      	ldr	r3, [r4, #0]
 80010fe:	071a      	lsls	r2, r3, #28
 8001100:	d4f0      	bmi.n	80010e4 <restore_non_core_regs+0x20>
 8001102:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8001106:	f000 fc49 	bl	800199c <__gnu_Unwind_Restore_WMMXD>
 800110a:	6823      	ldr	r3, [r4, #0]
 800110c:	06db      	lsls	r3, r3, #27
 800110e:	d4eb      	bmi.n	80010e8 <restore_non_core_regs+0x24>
 8001110:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8001114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001118:	f000 bc84 	b.w	8001a24 <__gnu_Unwind_Restore_WMMXC>

0800111c <_Unwind_decode_typeinfo_ptr.isra.0>:
 800111c:	6803      	ldr	r3, [r0, #0]
 800111e:	b103      	cbz	r3, 8001122 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8001120:	4403      	add	r3, r0
 8001122:	4618      	mov	r0, r3
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop

08001128 <__gnu_unwind_24bit.isra.1>:
 8001128:	2009      	movs	r0, #9
 800112a:	4770      	bx	lr

0800112c <_Unwind_DebugHook>:
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop

08001130 <unwind_phase2>:
 8001130:	b570      	push	{r4, r5, r6, lr}
 8001132:	4604      	mov	r4, r0
 8001134:	460d      	mov	r5, r1
 8001136:	e008      	b.n	800114a <unwind_phase2+0x1a>
 8001138:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800113a:	6163      	str	r3, [r4, #20]
 800113c:	462a      	mov	r2, r5
 800113e:	6923      	ldr	r3, [r4, #16]
 8001140:	4621      	mov	r1, r4
 8001142:	2001      	movs	r0, #1
 8001144:	4798      	blx	r3
 8001146:	2808      	cmp	r0, #8
 8001148:	d108      	bne.n	800115c <unwind_phase2+0x2c>
 800114a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800114c:	4620      	mov	r0, r4
 800114e:	f7ff ff69 	bl	8001024 <get_eit_entry>
 8001152:	4606      	mov	r6, r0
 8001154:	2800      	cmp	r0, #0
 8001156:	d0ef      	beq.n	8001138 <unwind_phase2+0x8>
 8001158:	f009 f8c1 	bl	800a2de <abort>
 800115c:	2807      	cmp	r0, #7
 800115e:	d1fb      	bne.n	8001158 <unwind_phase2+0x28>
 8001160:	4630      	mov	r0, r6
 8001162:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8001164:	f7ff ffe2 	bl	800112c <_Unwind_DebugHook>
 8001168:	1d28      	adds	r0, r5, #4
 800116a:	f000 fbf3 	bl	8001954 <__restore_core_regs>
 800116e:	bf00      	nop

08001170 <unwind_phase2_forced>:
 8001170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001174:	1d0c      	adds	r4, r1, #4
 8001176:	4605      	mov	r5, r0
 8001178:	4692      	mov	sl, r2
 800117a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800117c:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8001180:	ae03      	add	r6, sp, #12
 8001182:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001184:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001186:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001188:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800118a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800118c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001190:	ac02      	add	r4, sp, #8
 8001192:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8001196:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800119a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 800119e:	2300      	movs	r3, #0
 80011a0:	4628      	mov	r0, r5
 80011a2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80011a4:	6023      	str	r3, [r4, #0]
 80011a6:	f7ff ff3d 	bl	8001024 <get_eit_entry>
 80011aa:	f1ba 0f00 	cmp.w	sl, #0
 80011ae:	4607      	mov	r7, r0
 80011b0:	bf14      	ite	ne
 80011b2:	260a      	movne	r6, #10
 80011b4:	2609      	moveq	r6, #9
 80011b6:	b17f      	cbz	r7, 80011d8 <unwind_phase2_forced+0x68>
 80011b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80011ba:	f046 0110 	orr.w	r1, r6, #16
 80011be:	e88d 0210 	stmia.w	sp, {r4, r9}
 80011c2:	462a      	mov	r2, r5
 80011c4:	6463      	str	r3, [r4, #68]	; 0x44
 80011c6:	2001      	movs	r0, #1
 80011c8:	462b      	mov	r3, r5
 80011ca:	47c0      	blx	r8
 80011cc:	bb78      	cbnz	r0, 800122e <unwind_phase2_forced+0xbe>
 80011ce:	4638      	mov	r0, r7
 80011d0:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80011d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011da:	616b      	str	r3, [r5, #20]
 80011dc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80011e0:	4621      	mov	r1, r4
 80011e2:	a87a      	add	r0, sp, #488	; 0x1e8
 80011e4:	f008 fac8 	bl	8009778 <memcpy>
 80011e8:	692b      	ldr	r3, [r5, #16]
 80011ea:	aa7a      	add	r2, sp, #488	; 0x1e8
 80011ec:	4629      	mov	r1, r5
 80011ee:	4630      	mov	r0, r6
 80011f0:	4798      	blx	r3
 80011f2:	9b88      	ldr	r3, [sp, #544]	; 0x220
 80011f4:	4682      	mov	sl, r0
 80011f6:	e88d 0210 	stmia.w	sp, {r4, r9}
 80011fa:	4631      	mov	r1, r6
 80011fc:	6463      	str	r3, [r4, #68]	; 0x44
 80011fe:	462a      	mov	r2, r5
 8001200:	462b      	mov	r3, r5
 8001202:	2001      	movs	r0, #1
 8001204:	47c0      	blx	r8
 8001206:	b990      	cbnz	r0, 800122e <unwind_phase2_forced+0xbe>
 8001208:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800120c:	a97a      	add	r1, sp, #488	; 0x1e8
 800120e:	4620      	mov	r0, r4
 8001210:	f008 fab2 	bl	8009778 <memcpy>
 8001214:	f1ba 0f08 	cmp.w	sl, #8
 8001218:	d106      	bne.n	8001228 <unwind_phase2_forced+0xb8>
 800121a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800121c:	4628      	mov	r0, r5
 800121e:	f7ff ff01 	bl	8001024 <get_eit_entry>
 8001222:	2609      	movs	r6, #9
 8001224:	4607      	mov	r7, r0
 8001226:	e7c6      	b.n	80011b6 <unwind_phase2_forced+0x46>
 8001228:	f1ba 0f07 	cmp.w	sl, #7
 800122c:	d005      	beq.n	800123a <unwind_phase2_forced+0xca>
 800122e:	2709      	movs	r7, #9
 8001230:	4638      	mov	r0, r7
 8001232:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8001236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800123a:	4638      	mov	r0, r7
 800123c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800123e:	f7ff ff75 	bl	800112c <_Unwind_DebugHook>
 8001242:	a803      	add	r0, sp, #12
 8001244:	f000 fb86 	bl	8001954 <__restore_core_regs>

08001248 <_Unwind_GetCFA>:
 8001248:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800124a:	4770      	bx	lr

0800124c <__gnu_Unwind_RaiseException>:
 800124c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800124e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8001250:	640b      	str	r3, [r1, #64]	; 0x40
 8001252:	1d0e      	adds	r6, r1, #4
 8001254:	460f      	mov	r7, r1
 8001256:	4604      	mov	r4, r0
 8001258:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800125a:	b0f9      	sub	sp, #484	; 0x1e4
 800125c:	ad01      	add	r5, sp, #4
 800125e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001260:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001262:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001264:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001266:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001268:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800126c:	f04f 36ff 	mov.w	r6, #4294967295
 8001270:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001274:	9600      	str	r6, [sp, #0]
 8001276:	e006      	b.n	8001286 <__gnu_Unwind_RaiseException+0x3a>
 8001278:	6923      	ldr	r3, [r4, #16]
 800127a:	466a      	mov	r2, sp
 800127c:	4621      	mov	r1, r4
 800127e:	4798      	blx	r3
 8001280:	2808      	cmp	r0, #8
 8001282:	4605      	mov	r5, r0
 8001284:	d108      	bne.n	8001298 <__gnu_Unwind_RaiseException+0x4c>
 8001286:	9910      	ldr	r1, [sp, #64]	; 0x40
 8001288:	4620      	mov	r0, r4
 800128a:	f7ff fecb 	bl	8001024 <get_eit_entry>
 800128e:	2800      	cmp	r0, #0
 8001290:	d0f2      	beq.n	8001278 <__gnu_Unwind_RaiseException+0x2c>
 8001292:	2009      	movs	r0, #9
 8001294:	b079      	add	sp, #484	; 0x1e4
 8001296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001298:	4668      	mov	r0, sp
 800129a:	f7ff ff13 	bl	80010c4 <restore_non_core_regs>
 800129e:	2d06      	cmp	r5, #6
 80012a0:	d1f7      	bne.n	8001292 <__gnu_Unwind_RaiseException+0x46>
 80012a2:	4639      	mov	r1, r7
 80012a4:	4620      	mov	r0, r4
 80012a6:	f7ff ff43 	bl	8001130 <unwind_phase2>
 80012aa:	bf00      	nop

080012ac <__gnu_Unwind_ForcedUnwind>:
 80012ac:	b430      	push	{r4, r5}
 80012ae:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80012b0:	60c1      	str	r1, [r0, #12]
 80012b2:	6182      	str	r2, [r0, #24]
 80012b4:	4619      	mov	r1, r3
 80012b6:	641d      	str	r5, [r3, #64]	; 0x40
 80012b8:	2200      	movs	r2, #0
 80012ba:	bc30      	pop	{r4, r5}
 80012bc:	e758      	b.n	8001170 <unwind_phase2_forced>
 80012be:	bf00      	nop

080012c0 <__gnu_Unwind_Resume>:
 80012c0:	b570      	push	{r4, r5, r6, lr}
 80012c2:	68c6      	ldr	r6, [r0, #12]
 80012c4:	6943      	ldr	r3, [r0, #20]
 80012c6:	640b      	str	r3, [r1, #64]	; 0x40
 80012c8:	b126      	cbz	r6, 80012d4 <__gnu_Unwind_Resume+0x14>
 80012ca:	2201      	movs	r2, #1
 80012cc:	f7ff ff50 	bl	8001170 <unwind_phase2_forced>
 80012d0:	f009 f805 	bl	800a2de <abort>
 80012d4:	6903      	ldr	r3, [r0, #16]
 80012d6:	460a      	mov	r2, r1
 80012d8:	4604      	mov	r4, r0
 80012da:	460d      	mov	r5, r1
 80012dc:	4601      	mov	r1, r0
 80012de:	2002      	movs	r0, #2
 80012e0:	4798      	blx	r3
 80012e2:	2807      	cmp	r0, #7
 80012e4:	d007      	beq.n	80012f6 <__gnu_Unwind_Resume+0x36>
 80012e6:	2808      	cmp	r0, #8
 80012e8:	d103      	bne.n	80012f2 <__gnu_Unwind_Resume+0x32>
 80012ea:	4629      	mov	r1, r5
 80012ec:	4620      	mov	r0, r4
 80012ee:	f7ff ff1f 	bl	8001130 <unwind_phase2>
 80012f2:	f008 fff4 	bl	800a2de <abort>
 80012f6:	4630      	mov	r0, r6
 80012f8:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80012fa:	f7ff ff17 	bl	800112c <_Unwind_DebugHook>
 80012fe:	1d28      	adds	r0, r5, #4
 8001300:	f000 fb28 	bl	8001954 <__restore_core_regs>

08001304 <__gnu_Unwind_Resume_or_Rethrow>:
 8001304:	68c2      	ldr	r2, [r0, #12]
 8001306:	b11a      	cbz	r2, 8001310 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8001308:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800130a:	640a      	str	r2, [r1, #64]	; 0x40
 800130c:	2200      	movs	r2, #0
 800130e:	e72f      	b.n	8001170 <unwind_phase2_forced>
 8001310:	e79c      	b.n	800124c <__gnu_Unwind_RaiseException>
 8001312:	bf00      	nop

08001314 <_Unwind_Complete>:
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop

08001318 <_Unwind_DeleteException>:
 8001318:	6883      	ldr	r3, [r0, #8]
 800131a:	b113      	cbz	r3, 8001322 <_Unwind_DeleteException+0xa>
 800131c:	4601      	mov	r1, r0
 800131e:	2001      	movs	r0, #1
 8001320:	4718      	bx	r3
 8001322:	4770      	bx	lr

08001324 <_Unwind_VRS_Get>:
 8001324:	b500      	push	{lr}
 8001326:	2904      	cmp	r1, #4
 8001328:	d807      	bhi.n	800133a <_Unwind_VRS_Get+0x16>
 800132a:	e8df f001 	tbb	[pc, r1]
 800132e:	0903      	.short	0x0903
 8001330:	0906      	.short	0x0906
 8001332:	09          	.byte	0x09
 8001333:	00          	.byte	0x00
 8001334:	b90b      	cbnz	r3, 800133a <_Unwind_VRS_Get+0x16>
 8001336:	2a0f      	cmp	r2, #15
 8001338:	d905      	bls.n	8001346 <_Unwind_VRS_Get+0x22>
 800133a:	2002      	movs	r0, #2
 800133c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001340:	2001      	movs	r0, #1
 8001342:	f85d fb04 	ldr.w	pc, [sp], #4
 8001346:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800134a:	4618      	mov	r0, r3
 800134c:	6853      	ldr	r3, [r2, #4]
 800134e:	9a01      	ldr	r2, [sp, #4]
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	f85d fb04 	ldr.w	pc, [sp], #4
 8001356:	bf00      	nop

08001358 <_Unwind_GetGR>:
 8001358:	b510      	push	{r4, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	2300      	movs	r3, #0
 800135e:	ac03      	add	r4, sp, #12
 8001360:	460a      	mov	r2, r1
 8001362:	9400      	str	r4, [sp, #0]
 8001364:	4619      	mov	r1, r3
 8001366:	f7ff ffdd 	bl	8001324 <_Unwind_VRS_Get>
 800136a:	9803      	ldr	r0, [sp, #12]
 800136c:	b004      	add	sp, #16
 800136e:	bd10      	pop	{r4, pc}

08001370 <_Unwind_VRS_Set>:
 8001370:	b500      	push	{lr}
 8001372:	2904      	cmp	r1, #4
 8001374:	d807      	bhi.n	8001386 <_Unwind_VRS_Set+0x16>
 8001376:	e8df f001 	tbb	[pc, r1]
 800137a:	0903      	.short	0x0903
 800137c:	0906      	.short	0x0906
 800137e:	09          	.byte	0x09
 800137f:	00          	.byte	0x00
 8001380:	b90b      	cbnz	r3, 8001386 <_Unwind_VRS_Set+0x16>
 8001382:	2a0f      	cmp	r2, #15
 8001384:	d905      	bls.n	8001392 <_Unwind_VRS_Set+0x22>
 8001386:	2002      	movs	r0, #2
 8001388:	f85d fb04 	ldr.w	pc, [sp], #4
 800138c:	2001      	movs	r0, #1
 800138e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001392:	9901      	ldr	r1, [sp, #4]
 8001394:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001398:	6809      	ldr	r1, [r1, #0]
 800139a:	6051      	str	r1, [r2, #4]
 800139c:	4618      	mov	r0, r3
 800139e:	f85d fb04 	ldr.w	pc, [sp], #4
 80013a2:	bf00      	nop

080013a4 <_Unwind_SetGR>:
 80013a4:	b510      	push	{r4, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	ac04      	add	r4, sp, #16
 80013aa:	2300      	movs	r3, #0
 80013ac:	f844 2d04 	str.w	r2, [r4, #-4]!
 80013b0:	460a      	mov	r2, r1
 80013b2:	9400      	str	r4, [sp, #0]
 80013b4:	4619      	mov	r1, r3
 80013b6:	f7ff ffdb 	bl	8001370 <_Unwind_VRS_Set>
 80013ba:	b004      	add	sp, #16
 80013bc:	bd10      	pop	{r4, pc}
 80013be:	bf00      	nop

080013c0 <__gnu_Unwind_Backtrace>:
 80013c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80013c4:	6413      	str	r3, [r2, #64]	; 0x40
 80013c6:	1d15      	adds	r5, r2, #4
 80013c8:	4607      	mov	r7, r0
 80013ca:	460e      	mov	r6, r1
 80013cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013ce:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80013d2:	ac17      	add	r4, sp, #92	; 0x5c
 80013d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013de:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80013e2:	f04f 35ff 	mov.w	r5, #4294967295
 80013e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80013ea:	9516      	str	r5, [sp, #88]	; 0x58
 80013ec:	e010      	b.n	8001410 <__gnu_Unwind_Backtrace+0x50>
 80013ee:	a816      	add	r0, sp, #88	; 0x58
 80013f0:	f7ff ffd8 	bl	80013a4 <_Unwind_SetGR>
 80013f4:	4631      	mov	r1, r6
 80013f6:	a816      	add	r0, sp, #88	; 0x58
 80013f8:	47b8      	blx	r7
 80013fa:	aa16      	add	r2, sp, #88	; 0x58
 80013fc:	4669      	mov	r1, sp
 80013fe:	b978      	cbnz	r0, 8001420 <__gnu_Unwind_Backtrace+0x60>
 8001400:	9b04      	ldr	r3, [sp, #16]
 8001402:	2008      	movs	r0, #8
 8001404:	4798      	blx	r3
 8001406:	2805      	cmp	r0, #5
 8001408:	4604      	mov	r4, r0
 800140a:	d00a      	beq.n	8001422 <__gnu_Unwind_Backtrace+0x62>
 800140c:	2809      	cmp	r0, #9
 800140e:	d007      	beq.n	8001420 <__gnu_Unwind_Backtrace+0x60>
 8001410:	9926      	ldr	r1, [sp, #152]	; 0x98
 8001412:	4668      	mov	r0, sp
 8001414:	f7ff fe06 	bl	8001024 <get_eit_entry>
 8001418:	466a      	mov	r2, sp
 800141a:	210c      	movs	r1, #12
 800141c:	2800      	cmp	r0, #0
 800141e:	d0e6      	beq.n	80013ee <__gnu_Unwind_Backtrace+0x2e>
 8001420:	2409      	movs	r4, #9
 8001422:	a816      	add	r0, sp, #88	; 0x58
 8001424:	f7ff fe4e 	bl	80010c4 <restore_non_core_regs>
 8001428:	4620      	mov	r0, r4
 800142a:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 800142e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001430 <__gnu_unwind_pr_common>:
 8001430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001434:	460d      	mov	r5, r1
 8001436:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8001438:	b08b      	sub	sp, #44	; 0x2c
 800143a:	1d0c      	adds	r4, r1, #4
 800143c:	6809      	ldr	r1, [r1, #0]
 800143e:	9107      	str	r1, [sp, #28]
 8001440:	4691      	mov	r9, r2
 8001442:	9408      	str	r4, [sp, #32]
 8001444:	f000 0b03 	and.w	fp, r0, #3
 8001448:	461e      	mov	r6, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d160      	bne.n	8001510 <__gnu_unwind_pr_common+0xe0>
 800144e:	0209      	lsls	r1, r1, #8
 8001450:	2303      	movs	r3, #3
 8001452:	9107      	str	r1, [sp, #28]
 8001454:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8001458:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800145c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800145e:	f1bb 0f02 	cmp.w	fp, #2
 8001462:	bf08      	it	eq
 8001464:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8001466:	f013 0301 	ands.w	r3, r3, #1
 800146a:	d140      	bne.n	80014ee <__gnu_unwind_pr_common+0xbe>
 800146c:	9301      	str	r3, [sp, #4]
 800146e:	f000 0308 	and.w	r3, r0, #8
 8001472:	9303      	str	r3, [sp, #12]
 8001474:	f8d4 8000 	ldr.w	r8, [r4]
 8001478:	f1b8 0f00 	cmp.w	r8, #0
 800147c:	d039      	beq.n	80014f2 <__gnu_unwind_pr_common+0xc2>
 800147e:	2e02      	cmp	r6, #2
 8001480:	d043      	beq.n	800150a <__gnu_unwind_pr_common+0xda>
 8001482:	f8b4 8000 	ldrh.w	r8, [r4]
 8001486:	8867      	ldrh	r7, [r4, #2]
 8001488:	3404      	adds	r4, #4
 800148a:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800148c:	f027 0a01 	bic.w	sl, r7, #1
 8001490:	210f      	movs	r1, #15
 8001492:	4648      	mov	r0, r9
 8001494:	449a      	add	sl, r3
 8001496:	f7ff ff5f 	bl	8001358 <_Unwind_GetGR>
 800149a:	4582      	cmp	sl, r0
 800149c:	d833      	bhi.n	8001506 <__gnu_unwind_pr_common+0xd6>
 800149e:	f028 0301 	bic.w	r3, r8, #1
 80014a2:	449a      	add	sl, r3
 80014a4:	4550      	cmp	r0, sl
 80014a6:	bf2c      	ite	cs
 80014a8:	2000      	movcs	r0, #0
 80014aa:	2001      	movcc	r0, #1
 80014ac:	007f      	lsls	r7, r7, #1
 80014ae:	f007 0702 	and.w	r7, r7, #2
 80014b2:	f008 0801 	and.w	r8, r8, #1
 80014b6:	ea47 0708 	orr.w	r7, r7, r8
 80014ba:	2f01      	cmp	r7, #1
 80014bc:	d03e      	beq.n	800153c <__gnu_unwind_pr_common+0x10c>
 80014be:	d335      	bcc.n	800152c <__gnu_unwind_pr_common+0xfc>
 80014c0:	2f02      	cmp	r7, #2
 80014c2:	d11c      	bne.n	80014fe <__gnu_unwind_pr_common+0xce>
 80014c4:	6823      	ldr	r3, [r4, #0]
 80014c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80014ca:	9202      	str	r2, [sp, #8]
 80014cc:	f1bb 0f00 	cmp.w	fp, #0
 80014d0:	d176      	bne.n	80015c0 <__gnu_unwind_pr_common+0x190>
 80014d2:	b128      	cbz	r0, 80014e0 <__gnu_unwind_pr_common+0xb0>
 80014d4:	9903      	ldr	r1, [sp, #12]
 80014d6:	2900      	cmp	r1, #0
 80014d8:	d07e      	beq.n	80015d8 <__gnu_unwind_pr_common+0x1a8>
 80014da:	2a00      	cmp	r2, #0
 80014dc:	f000 80a6 	beq.w	800162c <__gnu_unwind_pr_common+0x1fc>
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	db77      	blt.n	80015d4 <__gnu_unwind_pr_common+0x1a4>
 80014e4:	9b02      	ldr	r3, [sp, #8]
 80014e6:	3301      	adds	r3, #1
 80014e8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80014ec:	e7c2      	b.n	8001474 <__gnu_unwind_pr_common+0x44>
 80014ee:	2300      	movs	r3, #0
 80014f0:	9301      	str	r3, [sp, #4]
 80014f2:	2e02      	cmp	r6, #2
 80014f4:	dd3e      	ble.n	8001574 <__gnu_unwind_pr_common+0x144>
 80014f6:	f7ff fe17 	bl	8001128 <__gnu_unwind_24bit.isra.1>
 80014fa:	2800      	cmp	r0, #0
 80014fc:	d040      	beq.n	8001580 <__gnu_unwind_pr_common+0x150>
 80014fe:	2009      	movs	r0, #9
 8001500:	b00b      	add	sp, #44	; 0x2c
 8001502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001506:	2000      	movs	r0, #0
 8001508:	e7d0      	b.n	80014ac <__gnu_unwind_pr_common+0x7c>
 800150a:	6867      	ldr	r7, [r4, #4]
 800150c:	3408      	adds	r4, #8
 800150e:	e7bc      	b.n	800148a <__gnu_unwind_pr_common+0x5a>
 8001510:	2b02      	cmp	r3, #2
 8001512:	dca3      	bgt.n	800145c <__gnu_unwind_pr_common+0x2c>
 8001514:	0c0b      	lsrs	r3, r1, #16
 8001516:	b2da      	uxtb	r2, r3
 8001518:	0409      	lsls	r1, r1, #16
 800151a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 800151e:	2302      	movs	r3, #2
 8001520:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8001524:	9107      	str	r1, [sp, #28]
 8001526:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800152a:	e797      	b.n	800145c <__gnu_unwind_pr_common+0x2c>
 800152c:	f1bb 0f00 	cmp.w	fp, #0
 8001530:	d002      	beq.n	8001538 <__gnu_unwind_pr_common+0x108>
 8001532:	2800      	cmp	r0, #0
 8001534:	f040 80bd 	bne.w	80016b2 <__gnu_unwind_pr_common+0x282>
 8001538:	3404      	adds	r4, #4
 800153a:	e79b      	b.n	8001474 <__gnu_unwind_pr_common+0x44>
 800153c:	f1bb 0f00 	cmp.w	fp, #0
 8001540:	d125      	bne.n	800158e <__gnu_unwind_pr_common+0x15e>
 8001542:	b1a8      	cbz	r0, 8001570 <__gnu_unwind_pr_common+0x140>
 8001544:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001548:	1c99      	adds	r1, r3, #2
 800154a:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 800154e:	d0d6      	beq.n	80014fe <__gnu_unwind_pr_common+0xce>
 8001550:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8001554:	3301      	adds	r3, #1
 8001556:	9106      	str	r1, [sp, #24]
 8001558:	f000 80a3 	beq.w	80016a2 <__gnu_unwind_pr_common+0x272>
 800155c:	1d20      	adds	r0, r4, #4
 800155e:	f7ff fddd 	bl	800111c <_Unwind_decode_typeinfo_ptr.isra.0>
 8001562:	ab06      	add	r3, sp, #24
 8001564:	4601      	mov	r1, r0
 8001566:	4628      	mov	r0, r5
 8001568:	f3af 8000 	nop.w
 800156c:	2800      	cmp	r0, #0
 800156e:	d177      	bne.n	8001660 <__gnu_unwind_pr_common+0x230>
 8001570:	3408      	adds	r4, #8
 8001572:	e77f      	b.n	8001474 <__gnu_unwind_pr_common+0x44>
 8001574:	a907      	add	r1, sp, #28
 8001576:	4648      	mov	r0, r9
 8001578:	f000 faee 	bl	8001b58 <__gnu_unwind_execute>
 800157c:	2800      	cmp	r0, #0
 800157e:	d1be      	bne.n	80014fe <__gnu_unwind_pr_common+0xce>
 8001580:	9b01      	ldr	r3, [sp, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d15c      	bne.n	8001640 <__gnu_unwind_pr_common+0x210>
 8001586:	2008      	movs	r0, #8
 8001588:	b00b      	add	sp, #44	; 0x2c
 800158a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800158e:	210d      	movs	r1, #13
 8001590:	4648      	mov	r0, r9
 8001592:	6a2f      	ldr	r7, [r5, #32]
 8001594:	f7ff fee0 	bl	8001358 <_Unwind_GetGR>
 8001598:	4287      	cmp	r7, r0
 800159a:	d1e9      	bne.n	8001570 <__gnu_unwind_pr_common+0x140>
 800159c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800159e:	429c      	cmp	r4, r3
 80015a0:	d1e6      	bne.n	8001570 <__gnu_unwind_pr_common+0x140>
 80015a2:	4620      	mov	r0, r4
 80015a4:	f7ff fcf0 	bl	8000f88 <selfrel_offset31>
 80015a8:	210f      	movs	r1, #15
 80015aa:	4602      	mov	r2, r0
 80015ac:	4648      	mov	r0, r9
 80015ae:	f7ff fef9 	bl	80013a4 <_Unwind_SetGR>
 80015b2:	4648      	mov	r0, r9
 80015b4:	462a      	mov	r2, r5
 80015b6:	2100      	movs	r1, #0
 80015b8:	f7ff fef4 	bl	80013a4 <_Unwind_SetGR>
 80015bc:	2007      	movs	r0, #7
 80015be:	e79f      	b.n	8001500 <__gnu_unwind_pr_common+0xd0>
 80015c0:	210d      	movs	r1, #13
 80015c2:	4648      	mov	r0, r9
 80015c4:	6a2f      	ldr	r7, [r5, #32]
 80015c6:	f7ff fec7 	bl	8001358 <_Unwind_GetGR>
 80015ca:	4287      	cmp	r7, r0
 80015cc:	d058      	beq.n	8001680 <__gnu_unwind_pr_common+0x250>
 80015ce:	6823      	ldr	r3, [r4, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	da87      	bge.n	80014e4 <__gnu_unwind_pr_common+0xb4>
 80015d4:	3404      	adds	r4, #4
 80015d6:	e785      	b.n	80014e4 <__gnu_unwind_pr_common+0xb4>
 80015d8:	9b02      	ldr	r3, [sp, #8]
 80015da:	b33b      	cbz	r3, 800162c <__gnu_unwind_pr_common+0x1fc>
 80015dc:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80015e0:	1d27      	adds	r7, r4, #4
 80015e2:	f8cd b010 	str.w	fp, [sp, #16]
 80015e6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80015ea:	f8dd a008 	ldr.w	sl, [sp, #8]
 80015ee:	9605      	str	r6, [sp, #20]
 80015f0:	46a3      	mov	fp, r4
 80015f2:	461c      	mov	r4, r3
 80015f4:	e002      	b.n	80015fc <__gnu_unwind_pr_common+0x1cc>
 80015f6:	45b2      	cmp	sl, r6
 80015f8:	46b0      	mov	r8, r6
 80015fa:	d016      	beq.n	800162a <__gnu_unwind_pr_common+0x1fa>
 80015fc:	4638      	mov	r0, r7
 80015fe:	9406      	str	r4, [sp, #24]
 8001600:	f7ff fd8c 	bl	800111c <_Unwind_decode_typeinfo_ptr.isra.0>
 8001604:	ab06      	add	r3, sp, #24
 8001606:	4601      	mov	r1, r0
 8001608:	2200      	movs	r2, #0
 800160a:	4628      	mov	r0, r5
 800160c:	f3af 8000 	nop.w
 8001610:	f108 0601 	add.w	r6, r8, #1
 8001614:	3704      	adds	r7, #4
 8001616:	2800      	cmp	r0, #0
 8001618:	d0ed      	beq.n	80015f6 <__gnu_unwind_pr_common+0x1c6>
 800161a:	9b02      	ldr	r3, [sp, #8]
 800161c:	9e05      	ldr	r6, [sp, #20]
 800161e:	4543      	cmp	r3, r8
 8001620:	465c      	mov	r4, fp
 8001622:	f8dd b010 	ldr.w	fp, [sp, #16]
 8001626:	d1d2      	bne.n	80015ce <__gnu_unwind_pr_common+0x19e>
 8001628:	e000      	b.n	800162c <__gnu_unwind_pr_common+0x1fc>
 800162a:	465c      	mov	r4, fp
 800162c:	4648      	mov	r0, r9
 800162e:	210d      	movs	r1, #13
 8001630:	f7ff fe92 	bl	8001358 <_Unwind_GetGR>
 8001634:	9b06      	ldr	r3, [sp, #24]
 8001636:	6228      	str	r0, [r5, #32]
 8001638:	62ac      	str	r4, [r5, #40]	; 0x28
 800163a:	626b      	str	r3, [r5, #36]	; 0x24
 800163c:	2006      	movs	r0, #6
 800163e:	e75f      	b.n	8001500 <__gnu_unwind_pr_common+0xd0>
 8001640:	210f      	movs	r1, #15
 8001642:	4648      	mov	r0, r9
 8001644:	f7ff fe88 	bl	8001358 <_Unwind_GetGR>
 8001648:	210e      	movs	r1, #14
 800164a:	4602      	mov	r2, r0
 800164c:	4648      	mov	r0, r9
 800164e:	f7ff fea9 	bl	80013a4 <_Unwind_SetGR>
 8001652:	4648      	mov	r0, r9
 8001654:	4a29      	ldr	r2, [pc, #164]	; (80016fc <__gnu_unwind_pr_common+0x2cc>)
 8001656:	210f      	movs	r1, #15
 8001658:	f7ff fea4 	bl	80013a4 <_Unwind_SetGR>
 800165c:	2007      	movs	r0, #7
 800165e:	e74f      	b.n	8001500 <__gnu_unwind_pr_common+0xd0>
 8001660:	4607      	mov	r7, r0
 8001662:	210d      	movs	r1, #13
 8001664:	4648      	mov	r0, r9
 8001666:	f7ff fe77 	bl	8001358 <_Unwind_GetGR>
 800166a:	2f02      	cmp	r7, #2
 800166c:	6228      	str	r0, [r5, #32]
 800166e:	d11d      	bne.n	80016ac <__gnu_unwind_pr_common+0x27c>
 8001670:	462b      	mov	r3, r5
 8001672:	9a06      	ldr	r2, [sp, #24]
 8001674:	f843 2f2c 	str.w	r2, [r3, #44]!
 8001678:	626b      	str	r3, [r5, #36]	; 0x24
 800167a:	62ac      	str	r4, [r5, #40]	; 0x28
 800167c:	2006      	movs	r0, #6
 800167e:	e73f      	b.n	8001500 <__gnu_unwind_pr_common+0xd0>
 8001680:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001682:	429c      	cmp	r4, r3
 8001684:	d1a3      	bne.n	80015ce <__gnu_unwind_pr_common+0x19e>
 8001686:	2204      	movs	r2, #4
 8001688:	2700      	movs	r7, #0
 800168a:	18a3      	adds	r3, r4, r2
 800168c:	9902      	ldr	r1, [sp, #8]
 800168e:	62a9      	str	r1, [r5, #40]	; 0x28
 8001690:	62ef      	str	r7, [r5, #44]	; 0x2c
 8001692:	632a      	str	r2, [r5, #48]	; 0x30
 8001694:	636b      	str	r3, [r5, #52]	; 0x34
 8001696:	6823      	ldr	r3, [r4, #0]
 8001698:	42bb      	cmp	r3, r7
 800169a:	db1d      	blt.n	80016d8 <__gnu_unwind_pr_common+0x2a8>
 800169c:	2301      	movs	r3, #1
 800169e:	9301      	str	r3, [sp, #4]
 80016a0:	e720      	b.n	80014e4 <__gnu_unwind_pr_common+0xb4>
 80016a2:	4648      	mov	r0, r9
 80016a4:	210d      	movs	r1, #13
 80016a6:	f7ff fe57 	bl	8001358 <_Unwind_GetGR>
 80016aa:	6228      	str	r0, [r5, #32]
 80016ac:	9b06      	ldr	r3, [sp, #24]
 80016ae:	626b      	str	r3, [r5, #36]	; 0x24
 80016b0:	e7e3      	b.n	800167a <__gnu_unwind_pr_common+0x24a>
 80016b2:	4620      	mov	r0, r4
 80016b4:	f7ff fc68 	bl	8000f88 <selfrel_offset31>
 80016b8:	3404      	adds	r4, #4
 80016ba:	4606      	mov	r6, r0
 80016bc:	63ac      	str	r4, [r5, #56]	; 0x38
 80016be:	4628      	mov	r0, r5
 80016c0:	f3af 8000 	nop.w
 80016c4:	2800      	cmp	r0, #0
 80016c6:	f43f af1a 	beq.w	80014fe <__gnu_unwind_pr_common+0xce>
 80016ca:	4648      	mov	r0, r9
 80016cc:	4632      	mov	r2, r6
 80016ce:	210f      	movs	r1, #15
 80016d0:	f7ff fe68 	bl	80013a4 <_Unwind_SetGR>
 80016d4:	2007      	movs	r0, #7
 80016d6:	e713      	b.n	8001500 <__gnu_unwind_pr_common+0xd0>
 80016d8:	4608      	mov	r0, r1
 80016da:	3001      	adds	r0, #1
 80016dc:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80016e0:	f7ff fc52 	bl	8000f88 <selfrel_offset31>
 80016e4:	210f      	movs	r1, #15
 80016e6:	4602      	mov	r2, r0
 80016e8:	4648      	mov	r0, r9
 80016ea:	f7ff fe5b 	bl	80013a4 <_Unwind_SetGR>
 80016ee:	4648      	mov	r0, r9
 80016f0:	462a      	mov	r2, r5
 80016f2:	4639      	mov	r1, r7
 80016f4:	f7ff fe56 	bl	80013a4 <_Unwind_SetGR>
 80016f8:	2007      	movs	r0, #7
 80016fa:	e701      	b.n	8001500 <__gnu_unwind_pr_common+0xd0>
 80016fc:	00000000 	.word	0x00000000

08001700 <__aeabi_unwind_cpp_pr0>:
 8001700:	2300      	movs	r3, #0
 8001702:	e695      	b.n	8001430 <__gnu_unwind_pr_common>

08001704 <__aeabi_unwind_cpp_pr1>:
 8001704:	2301      	movs	r3, #1
 8001706:	e693      	b.n	8001430 <__gnu_unwind_pr_common>

08001708 <__aeabi_unwind_cpp_pr2>:
 8001708:	2302      	movs	r3, #2
 800170a:	e691      	b.n	8001430 <__gnu_unwind_pr_common>

0800170c <_Unwind_VRS_Pop>:
 800170c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800170e:	4604      	mov	r4, r0
 8001710:	b0c5      	sub	sp, #276	; 0x114
 8001712:	2904      	cmp	r1, #4
 8001714:	d80d      	bhi.n	8001732 <_Unwind_VRS_Pop+0x26>
 8001716:	e8df f001 	tbb	[pc, r1]
 800171a:	0353      	.short	0x0353
 800171c:	310c      	.short	0x310c
 800171e:	0f          	.byte	0x0f
 800171f:	00          	.byte	0x00
 8001720:	2b01      	cmp	r3, #1
 8001722:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8001726:	b295      	uxth	r5, r2
 8001728:	d162      	bne.n	80017f0 <_Unwind_VRS_Pop+0xe4>
 800172a:	1972      	adds	r2, r6, r5
 800172c:	2a10      	cmp	r2, #16
 800172e:	f240 809b 	bls.w	8001868 <_Unwind_VRS_Pop+0x15c>
 8001732:	2002      	movs	r0, #2
 8001734:	b045      	add	sp, #276	; 0x114
 8001736:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1fa      	bne.n	8001732 <_Unwind_VRS_Pop+0x26>
 800173c:	2a10      	cmp	r2, #16
 800173e:	d8f8      	bhi.n	8001732 <_Unwind_VRS_Pop+0x26>
 8001740:	6823      	ldr	r3, [r4, #0]
 8001742:	06d8      	lsls	r0, r3, #27
 8001744:	f100 80c6 	bmi.w	80018d4 <_Unwind_VRS_Pop+0x1c8>
 8001748:	ae22      	add	r6, sp, #136	; 0x88
 800174a:	4630      	mov	r0, r6
 800174c:	9201      	str	r2, [sp, #4]
 800174e:	f000 f973 	bl	8001a38 <__gnu_Unwind_Save_WMMXC>
 8001752:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001754:	9a01      	ldr	r2, [sp, #4]
 8001756:	2300      	movs	r3, #0
 8001758:	2501      	movs	r5, #1
 800175a:	fa05 f103 	lsl.w	r1, r5, r3
 800175e:	4211      	tst	r1, r2
 8001760:	d003      	beq.n	800176a <_Unwind_VRS_Pop+0x5e>
 8001762:	6801      	ldr	r1, [r0, #0]
 8001764:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 8001768:	3004      	adds	r0, #4
 800176a:	3301      	adds	r3, #1
 800176c:	2b04      	cmp	r3, #4
 800176e:	d1f4      	bne.n	800175a <_Unwind_VRS_Pop+0x4e>
 8001770:	63a0      	str	r0, [r4, #56]	; 0x38
 8001772:	4630      	mov	r0, r6
 8001774:	f000 f956 	bl	8001a24 <__gnu_Unwind_Restore_WMMXC>
 8001778:	2000      	movs	r0, #0
 800177a:	e7db      	b.n	8001734 <_Unwind_VRS_Pop+0x28>
 800177c:	2b03      	cmp	r3, #3
 800177e:	d1d8      	bne.n	8001732 <_Unwind_VRS_Pop+0x26>
 8001780:	0c15      	lsrs	r5, r2, #16
 8001782:	b297      	uxth	r7, r2
 8001784:	19eb      	adds	r3, r5, r7
 8001786:	2b10      	cmp	r3, #16
 8001788:	d8d3      	bhi.n	8001732 <_Unwind_VRS_Pop+0x26>
 800178a:	6823      	ldr	r3, [r4, #0]
 800178c:	071e      	lsls	r6, r3, #28
 800178e:	f100 80b5 	bmi.w	80018fc <_Unwind_VRS_Pop+0x1f0>
 8001792:	ae22      	add	r6, sp, #136	; 0x88
 8001794:	4630      	mov	r0, r6
 8001796:	f000 f923 	bl	80019e0 <__gnu_Unwind_Save_WMMXD>
 800179a:	00ed      	lsls	r5, r5, #3
 800179c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800179e:	b14f      	cbz	r7, 80017b4 <_Unwind_VRS_Pop+0xa8>
 80017a0:	3d04      	subs	r5, #4
 80017a2:	1971      	adds	r1, r6, r5
 80017a4:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
 80017a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80017ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80017b0:	4283      	cmp	r3, r0
 80017b2:	d1f9      	bne.n	80017a8 <_Unwind_VRS_Pop+0x9c>
 80017b4:	4630      	mov	r0, r6
 80017b6:	63a3      	str	r3, [r4, #56]	; 0x38
 80017b8:	f000 f8f0 	bl	800199c <__gnu_Unwind_Restore_WMMXD>
 80017bc:	2000      	movs	r0, #0
 80017be:	e7b9      	b.n	8001734 <_Unwind_VRS_Pop+0x28>
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1b6      	bne.n	8001732 <_Unwind_VRS_Pop+0x26>
 80017c4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80017c6:	b297      	uxth	r7, r2
 80017c8:	1d20      	adds	r0, r4, #4
 80017ca:	2601      	movs	r6, #1
 80017cc:	fa06 f103 	lsl.w	r1, r6, r3
 80017d0:	4239      	tst	r1, r7
 80017d2:	f103 0301 	add.w	r3, r3, #1
 80017d6:	d002      	beq.n	80017de <_Unwind_VRS_Pop+0xd2>
 80017d8:	6829      	ldr	r1, [r5, #0]
 80017da:	6001      	str	r1, [r0, #0]
 80017dc:	3504      	adds	r5, #4
 80017de:	2b10      	cmp	r3, #16
 80017e0:	f100 0004 	add.w	r0, r0, #4
 80017e4:	d1f2      	bne.n	80017cc <_Unwind_VRS_Pop+0xc0>
 80017e6:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 80017ea:	d13b      	bne.n	8001864 <_Unwind_VRS_Pop+0x158>
 80017ec:	63a5      	str	r5, [r4, #56]	; 0x38
 80017ee:	e7a1      	b.n	8001734 <_Unwind_VRS_Pop+0x28>
 80017f0:	2b05      	cmp	r3, #5
 80017f2:	d19e      	bne.n	8001732 <_Unwind_VRS_Pop+0x26>
 80017f4:	1977      	adds	r7, r6, r5
 80017f6:	2f20      	cmp	r7, #32
 80017f8:	d89b      	bhi.n	8001732 <_Unwind_VRS_Pop+0x26>
 80017fa:	2e0f      	cmp	r6, #15
 80017fc:	d966      	bls.n	80018cc <_Unwind_VRS_Pop+0x1c0>
 80017fe:	462f      	mov	r7, r5
 8001800:	2d00      	cmp	r5, #0
 8001802:	d13a      	bne.n	800187a <_Unwind_VRS_Pop+0x16e>
 8001804:	462a      	mov	r2, r5
 8001806:	2700      	movs	r7, #0
 8001808:	2a00      	cmp	r2, #0
 800180a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800180c:	dd72      	ble.n	80018f4 <_Unwind_VRS_Pop+0x1e8>
 800180e:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8001812:	4601      	mov	r1, r0
 8001814:	a844      	add	r0, sp, #272	; 0x110
 8001816:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 800181a:	388c      	subs	r0, #140	; 0x8c
 800181c:	f851 5b04 	ldr.w	r5, [r1], #4
 8001820:	f840 5f04 	str.w	r5, [r0, #4]!
 8001824:	4291      	cmp	r1, r2
 8001826:	d1f9      	bne.n	800181c <_Unwind_VRS_Pop+0x110>
 8001828:	4608      	mov	r0, r1
 800182a:	b197      	cbz	r7, 8001852 <_Unwind_VRS_Pop+0x146>
 800182c:	2e10      	cmp	r6, #16
 800182e:	4632      	mov	r2, r6
 8001830:	a944      	add	r1, sp, #272	; 0x110
 8001832:	bf38      	it	cc
 8001834:	2210      	movcc	r2, #16
 8001836:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800183a:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 800183e:	0079      	lsls	r1, r7, #1
 8001840:	3a04      	subs	r2, #4
 8001842:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8001846:	f850 5b04 	ldr.w	r5, [r0], #4
 800184a:	f842 5f04 	str.w	r5, [r2, #4]!
 800184e:	4288      	cmp	r0, r1
 8001850:	d1f9      	bne.n	8001846 <_Unwind_VRS_Pop+0x13a>
 8001852:	2b01      	cmp	r3, #1
 8001854:	d048      	beq.n	80018e8 <_Unwind_VRS_Pop+0x1dc>
 8001856:	2e0f      	cmp	r6, #15
 8001858:	63a1      	str	r1, [r4, #56]	; 0x38
 800185a:	d933      	bls.n	80018c4 <_Unwind_VRS_Pop+0x1b8>
 800185c:	b117      	cbz	r7, 8001864 <_Unwind_VRS_Pop+0x158>
 800185e:	a802      	add	r0, sp, #8
 8001860:	f000 f894 	bl	800198c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8001864:	2000      	movs	r0, #0
 8001866:	e765      	b.n	8001734 <_Unwind_VRS_Pop+0x28>
 8001868:	2e0f      	cmp	r6, #15
 800186a:	f63f af62 	bhi.w	8001732 <_Unwind_VRS_Pop+0x26>
 800186e:	2700      	movs	r7, #0
 8001870:	6822      	ldr	r2, [r4, #0]
 8001872:	07d1      	lsls	r1, r2, #31
 8001874:	d417      	bmi.n	80018a6 <_Unwind_VRS_Pop+0x19a>
 8001876:	2f00      	cmp	r7, #0
 8001878:	d060      	beq.n	800193c <_Unwind_VRS_Pop+0x230>
 800187a:	6822      	ldr	r2, [r4, #0]
 800187c:	0751      	lsls	r1, r2, #29
 800187e:	d445      	bmi.n	800190c <_Unwind_VRS_Pop+0x200>
 8001880:	2b01      	cmp	r3, #1
 8001882:	d04d      	beq.n	8001920 <_Unwind_VRS_Pop+0x214>
 8001884:	2e0f      	cmp	r6, #15
 8001886:	d806      	bhi.n	8001896 <_Unwind_VRS_Pop+0x18a>
 8001888:	a822      	add	r0, sp, #136	; 0x88
 800188a:	9301      	str	r3, [sp, #4]
 800188c:	f000 f87a 	bl	8001984 <__gnu_Unwind_Save_VFP_D>
 8001890:	9b01      	ldr	r3, [sp, #4]
 8001892:	2f00      	cmp	r7, #0
 8001894:	d0b6      	beq.n	8001804 <_Unwind_VRS_Pop+0xf8>
 8001896:	a802      	add	r0, sp, #8
 8001898:	9301      	str	r3, [sp, #4]
 800189a:	f000 f87b 	bl	8001994 <__gnu_Unwind_Save_VFP_D_16_to_31>
 800189e:	9b01      	ldr	r3, [sp, #4]
 80018a0:	f1c6 0210 	rsb	r2, r6, #16
 80018a4:	e7b0      	b.n	8001808 <_Unwind_VRS_Pop+0xfc>
 80018a6:	f022 0101 	bic.w	r1, r2, #1
 80018aa:	2b05      	cmp	r3, #5
 80018ac:	6021      	str	r1, [r4, #0]
 80018ae:	9301      	str	r3, [sp, #4]
 80018b0:	4620      	mov	r0, r4
 80018b2:	d03b      	beq.n	800192c <_Unwind_VRS_Pop+0x220>
 80018b4:	f022 0203 	bic.w	r2, r2, #3
 80018b8:	f840 2b48 	str.w	r2, [r0], #72
 80018bc:	f000 f85a 	bl	8001974 <__gnu_Unwind_Save_VFP>
 80018c0:	9b01      	ldr	r3, [sp, #4]
 80018c2:	e7d8      	b.n	8001876 <_Unwind_VRS_Pop+0x16a>
 80018c4:	a822      	add	r0, sp, #136	; 0x88
 80018c6:	f000 f859 	bl	800197c <__gnu_Unwind_Restore_VFP_D>
 80018ca:	e7c7      	b.n	800185c <_Unwind_VRS_Pop+0x150>
 80018cc:	2f10      	cmp	r7, #16
 80018ce:	d9ce      	bls.n	800186e <_Unwind_VRS_Pop+0x162>
 80018d0:	3f10      	subs	r7, #16
 80018d2:	e7cd      	b.n	8001870 <_Unwind_VRS_Pop+0x164>
 80018d4:	f023 0310 	bic.w	r3, r3, #16
 80018d8:	6023      	str	r3, [r4, #0]
 80018da:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80018de:	9201      	str	r2, [sp, #4]
 80018e0:	f000 f8aa 	bl	8001a38 <__gnu_Unwind_Save_WMMXC>
 80018e4:	9a01      	ldr	r2, [sp, #4]
 80018e6:	e72f      	b.n	8001748 <_Unwind_VRS_Pop+0x3c>
 80018e8:	3104      	adds	r1, #4
 80018ea:	63a1      	str	r1, [r4, #56]	; 0x38
 80018ec:	a822      	add	r0, sp, #136	; 0x88
 80018ee:	f000 f83d 	bl	800196c <__gnu_Unwind_Restore_VFP>
 80018f2:	e7b7      	b.n	8001864 <_Unwind_VRS_Pop+0x158>
 80018f4:	2f00      	cmp	r7, #0
 80018f6:	d199      	bne.n	800182c <_Unwind_VRS_Pop+0x120>
 80018f8:	4601      	mov	r1, r0
 80018fa:	e7aa      	b.n	8001852 <_Unwind_VRS_Pop+0x146>
 80018fc:	f023 0308 	bic.w	r3, r3, #8
 8001900:	6023      	str	r3, [r4, #0]
 8001902:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8001906:	f000 f86b 	bl	80019e0 <__gnu_Unwind_Save_WMMXD>
 800190a:	e742      	b.n	8001792 <_Unwind_VRS_Pop+0x86>
 800190c:	4620      	mov	r0, r4
 800190e:	f022 0204 	bic.w	r2, r2, #4
 8001912:	f840 2bd0 	str.w	r2, [r0], #208
 8001916:	9301      	str	r3, [sp, #4]
 8001918:	f000 f83c 	bl	8001994 <__gnu_Unwind_Save_VFP_D_16_to_31>
 800191c:	9b01      	ldr	r3, [sp, #4]
 800191e:	e7af      	b.n	8001880 <_Unwind_VRS_Pop+0x174>
 8001920:	a822      	add	r0, sp, #136	; 0x88
 8001922:	9301      	str	r3, [sp, #4]
 8001924:	f000 f826 	bl	8001974 <__gnu_Unwind_Save_VFP>
 8001928:	9b01      	ldr	r3, [sp, #4]
 800192a:	e7b9      	b.n	80018a0 <_Unwind_VRS_Pop+0x194>
 800192c:	f041 0102 	orr.w	r1, r1, #2
 8001930:	f840 1b48 	str.w	r1, [r0], #72
 8001934:	f000 f826 	bl	8001984 <__gnu_Unwind_Save_VFP_D>
 8001938:	9b01      	ldr	r3, [sp, #4]
 800193a:	e79c      	b.n	8001876 <_Unwind_VRS_Pop+0x16a>
 800193c:	2b01      	cmp	r3, #1
 800193e:	d003      	beq.n	8001948 <_Unwind_VRS_Pop+0x23c>
 8001940:	2e0f      	cmp	r6, #15
 8001942:	f63f af5f 	bhi.w	8001804 <_Unwind_VRS_Pop+0xf8>
 8001946:	e79f      	b.n	8001888 <_Unwind_VRS_Pop+0x17c>
 8001948:	a822      	add	r0, sp, #136	; 0x88
 800194a:	9301      	str	r3, [sp, #4]
 800194c:	f000 f812 	bl	8001974 <__gnu_Unwind_Save_VFP>
 8001950:	9b01      	ldr	r3, [sp, #4]
 8001952:	e757      	b.n	8001804 <_Unwind_VRS_Pop+0xf8>

08001954 <__restore_core_regs>:
 8001954:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8001958:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 800195c:	469c      	mov	ip, r3
 800195e:	46a6      	mov	lr, r4
 8001960:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8001964:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8001968:	46e5      	mov	sp, ip
 800196a:	bd00      	pop	{pc}

0800196c <__gnu_Unwind_Restore_VFP>:
 800196c:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop

08001974 <__gnu_Unwind_Save_VFP>:
 8001974:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop

0800197c <__gnu_Unwind_Restore_VFP_D>:
 800197c:	ec90 0b20 	vldmia	r0, {d0-d15}
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop

08001984 <__gnu_Unwind_Save_VFP_D>:
 8001984:	ec80 0b20 	vstmia	r0, {d0-d15}
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop

0800198c <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 800198c:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop

08001994 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8001994:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop

0800199c <__gnu_Unwind_Restore_WMMXD>:
 800199c:	ecf0 0102 	ldfe	f0, [r0], #8
 80019a0:	ecf0 1102 	ldfe	f1, [r0], #8
 80019a4:	ecf0 2102 	ldfe	f2, [r0], #8
 80019a8:	ecf0 3102 	ldfe	f3, [r0], #8
 80019ac:	ecf0 4102 	ldfe	f4, [r0], #8
 80019b0:	ecf0 5102 	ldfe	f5, [r0], #8
 80019b4:	ecf0 6102 	ldfe	f6, [r0], #8
 80019b8:	ecf0 7102 	ldfe	f7, [r0], #8
 80019bc:	ecf0 8102 	ldfp	f0, [r0], #8
 80019c0:	ecf0 9102 	ldfp	f1, [r0], #8
 80019c4:	ecf0 a102 	ldfp	f2, [r0], #8
 80019c8:	ecf0 b102 	ldfp	f3, [r0], #8
 80019cc:	ecf0 c102 	ldfp	f4, [r0], #8
 80019d0:	ecf0 d102 	ldfp	f5, [r0], #8
 80019d4:	ecf0 e102 	ldfp	f6, [r0], #8
 80019d8:	ecf0 f102 	ldfp	f7, [r0], #8
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop

080019e0 <__gnu_Unwind_Save_WMMXD>:
 80019e0:	ece0 0102 	stfe	f0, [r0], #8
 80019e4:	ece0 1102 	stfe	f1, [r0], #8
 80019e8:	ece0 2102 	stfe	f2, [r0], #8
 80019ec:	ece0 3102 	stfe	f3, [r0], #8
 80019f0:	ece0 4102 	stfe	f4, [r0], #8
 80019f4:	ece0 5102 	stfe	f5, [r0], #8
 80019f8:	ece0 6102 	stfe	f6, [r0], #8
 80019fc:	ece0 7102 	stfe	f7, [r0], #8
 8001a00:	ece0 8102 	stfp	f0, [r0], #8
 8001a04:	ece0 9102 	stfp	f1, [r0], #8
 8001a08:	ece0 a102 	stfp	f2, [r0], #8
 8001a0c:	ece0 b102 	stfp	f3, [r0], #8
 8001a10:	ece0 c102 	stfp	f4, [r0], #8
 8001a14:	ece0 d102 	stfp	f5, [r0], #8
 8001a18:	ece0 e102 	stfp	f6, [r0], #8
 8001a1c:	ece0 f102 	stfp	f7, [r0], #8
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop

08001a24 <__gnu_Unwind_Restore_WMMXC>:
 8001a24:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8001a28:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001a2c:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001a30:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop

08001a38 <__gnu_Unwind_Save_WMMXC>:
 8001a38:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001a3c:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001a40:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001a44:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop

08001a4c <_Unwind_RaiseException>:
 8001a4c:	46ec      	mov	ip, sp
 8001a4e:	b500      	push	{lr}
 8001a50:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001a54:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001a58:	f04f 0300 	mov.w	r3, #0
 8001a5c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001a60:	a901      	add	r1, sp, #4
 8001a62:	f7ff fbf3 	bl	800124c <__gnu_Unwind_RaiseException>
 8001a66:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001a6a:	b012      	add	sp, #72	; 0x48
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop

08001a70 <_Unwind_Resume>:
 8001a70:	46ec      	mov	ip, sp
 8001a72:	b500      	push	{lr}
 8001a74:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001a78:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001a7c:	f04f 0300 	mov.w	r3, #0
 8001a80:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001a84:	a901      	add	r1, sp, #4
 8001a86:	f7ff fc1b 	bl	80012c0 <__gnu_Unwind_Resume>
 8001a8a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001a8e:	b012      	add	sp, #72	; 0x48
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop

08001a94 <_Unwind_Resume_or_Rethrow>:
 8001a94:	46ec      	mov	ip, sp
 8001a96:	b500      	push	{lr}
 8001a98:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001a9c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001aa0:	f04f 0300 	mov.w	r3, #0
 8001aa4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001aa8:	a901      	add	r1, sp, #4
 8001aaa:	f7ff fc2b 	bl	8001304 <__gnu_Unwind_Resume_or_Rethrow>
 8001aae:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001ab2:	b012      	add	sp, #72	; 0x48
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop

08001ab8 <_Unwind_ForcedUnwind>:
 8001ab8:	46ec      	mov	ip, sp
 8001aba:	b500      	push	{lr}
 8001abc:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001ac0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001ac4:	f04f 0300 	mov.w	r3, #0
 8001ac8:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001acc:	ab01      	add	r3, sp, #4
 8001ace:	f7ff fbed 	bl	80012ac <__gnu_Unwind_ForcedUnwind>
 8001ad2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001ad6:	b012      	add	sp, #72	; 0x48
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop

08001adc <_Unwind_Backtrace>:
 8001adc:	46ec      	mov	ip, sp
 8001ade:	b500      	push	{lr}
 8001ae0:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001ae4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001ae8:	f04f 0300 	mov.w	r3, #0
 8001aec:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001af0:	aa01      	add	r2, sp, #4
 8001af2:	f7ff fc65 	bl	80013c0 <__gnu_Unwind_Backtrace>
 8001af6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001afa:	b012      	add	sp, #72	; 0x48
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop

08001b00 <next_unwind_byte>:
 8001b00:	7a02      	ldrb	r2, [r0, #8]
 8001b02:	b91a      	cbnz	r2, 8001b0c <next_unwind_byte+0xc>
 8001b04:	7a43      	ldrb	r3, [r0, #9]
 8001b06:	b943      	cbnz	r3, 8001b1a <next_unwind_byte+0x1a>
 8001b08:	20b0      	movs	r0, #176	; 0xb0
 8001b0a:	4770      	bx	lr
 8001b0c:	6803      	ldr	r3, [r0, #0]
 8001b0e:	3a01      	subs	r2, #1
 8001b10:	7202      	strb	r2, [r0, #8]
 8001b12:	021a      	lsls	r2, r3, #8
 8001b14:	6002      	str	r2, [r0, #0]
 8001b16:	0e18      	lsrs	r0, r3, #24
 8001b18:	4770      	bx	lr
 8001b1a:	6842      	ldr	r2, [r0, #4]
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	b410      	push	{r4}
 8001b20:	7243      	strb	r3, [r0, #9]
 8001b22:	6813      	ldr	r3, [r2, #0]
 8001b24:	2103      	movs	r1, #3
 8001b26:	1d14      	adds	r4, r2, #4
 8001b28:	7201      	strb	r1, [r0, #8]
 8001b2a:	021a      	lsls	r2, r3, #8
 8001b2c:	6044      	str	r4, [r0, #4]
 8001b2e:	6002      	str	r2, [r0, #0]
 8001b30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b34:	0e18      	lsrs	r0, r3, #24
 8001b36:	4770      	bx	lr

08001b38 <_Unwind_GetGR.constprop.0>:
 8001b38:	b500      	push	{lr}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	aa03      	add	r2, sp, #12
 8001b3e:	2300      	movs	r3, #0
 8001b40:	9200      	str	r2, [sp, #0]
 8001b42:	4619      	mov	r1, r3
 8001b44:	220c      	movs	r2, #12
 8001b46:	f7ff fbed 	bl	8001324 <_Unwind_VRS_Get>
 8001b4a:	9803      	ldr	r0, [sp, #12]
 8001b4c:	b005      	add	sp, #20
 8001b4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b52:	bf00      	nop

08001b54 <unwind_UCB_from_context>:
 8001b54:	e7f0      	b.n	8001b38 <_Unwind_GetGR.constprop.0>
 8001b56:	bf00      	nop

08001b58 <__gnu_unwind_execute>:
 8001b58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b5c:	4606      	mov	r6, r0
 8001b5e:	b085      	sub	sp, #20
 8001b60:	460f      	mov	r7, r1
 8001b62:	f04f 0800 	mov.w	r8, #0
 8001b66:	4638      	mov	r0, r7
 8001b68:	f7ff ffca 	bl	8001b00 <next_unwind_byte>
 8001b6c:	28b0      	cmp	r0, #176	; 0xb0
 8001b6e:	4604      	mov	r4, r0
 8001b70:	d023      	beq.n	8001bba <__gnu_unwind_execute+0x62>
 8001b72:	0605      	lsls	r5, r0, #24
 8001b74:	d427      	bmi.n	8001bc6 <__gnu_unwind_execute+0x6e>
 8001b76:	2300      	movs	r3, #0
 8001b78:	f10d 090c 	add.w	r9, sp, #12
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	0085      	lsls	r5, r0, #2
 8001b80:	220d      	movs	r2, #13
 8001b82:	f8cd 9000 	str.w	r9, [sp]
 8001b86:	4630      	mov	r0, r6
 8001b88:	f7ff fbcc 	bl	8001324 <_Unwind_VRS_Get>
 8001b8c:	b2ed      	uxtb	r5, r5
 8001b8e:	9b03      	ldr	r3, [sp, #12]
 8001b90:	f8cd 9000 	str.w	r9, [sp]
 8001b94:	0660      	lsls	r0, r4, #25
 8001b96:	f105 0504 	add.w	r5, r5, #4
 8001b9a:	bf4c      	ite	mi
 8001b9c:	1b5d      	submi	r5, r3, r5
 8001b9e:	18ed      	addpl	r5, r5, r3
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	220d      	movs	r2, #13
 8001ba6:	4630      	mov	r0, r6
 8001ba8:	9503      	str	r5, [sp, #12]
 8001baa:	f7ff fbe1 	bl	8001370 <_Unwind_VRS_Set>
 8001bae:	4638      	mov	r0, r7
 8001bb0:	f7ff ffa6 	bl	8001b00 <next_unwind_byte>
 8001bb4:	28b0      	cmp	r0, #176	; 0xb0
 8001bb6:	4604      	mov	r4, r0
 8001bb8:	d1db      	bne.n	8001b72 <__gnu_unwind_execute+0x1a>
 8001bba:	f1b8 0f00 	cmp.w	r8, #0
 8001bbe:	f000 8095 	beq.w	8001cec <__gnu_unwind_execute+0x194>
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	e01c      	b.n	8001c00 <__gnu_unwind_execute+0xa8>
 8001bc6:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8001bca:	2b80      	cmp	r3, #128	; 0x80
 8001bcc:	d05d      	beq.n	8001c8a <__gnu_unwind_execute+0x132>
 8001bce:	2b90      	cmp	r3, #144	; 0x90
 8001bd0:	d019      	beq.n	8001c06 <__gnu_unwind_execute+0xae>
 8001bd2:	2ba0      	cmp	r3, #160	; 0xa0
 8001bd4:	d02c      	beq.n	8001c30 <__gnu_unwind_execute+0xd8>
 8001bd6:	2bb0      	cmp	r3, #176	; 0xb0
 8001bd8:	d03f      	beq.n	8001c5a <__gnu_unwind_execute+0x102>
 8001bda:	2bc0      	cmp	r3, #192	; 0xc0
 8001bdc:	d06c      	beq.n	8001cb8 <__gnu_unwind_execute+0x160>
 8001bde:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001be2:	2bd0      	cmp	r3, #208	; 0xd0
 8001be4:	d10b      	bne.n	8001bfe <__gnu_unwind_execute+0xa6>
 8001be6:	f000 0207 	and.w	r2, r0, #7
 8001bea:	3201      	adds	r2, #1
 8001bec:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001bf0:	2305      	movs	r3, #5
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	4630      	mov	r0, r6
 8001bf6:	f7ff fd89 	bl	800170c <_Unwind_VRS_Pop>
 8001bfa:	2800      	cmp	r0, #0
 8001bfc:	d0b3      	beq.n	8001b66 <__gnu_unwind_execute+0xe>
 8001bfe:	2009      	movs	r0, #9
 8001c00:	b005      	add	sp, #20
 8001c02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c06:	f000 030d 	and.w	r3, r0, #13
 8001c0a:	2b0d      	cmp	r3, #13
 8001c0c:	d0f7      	beq.n	8001bfe <__gnu_unwind_execute+0xa6>
 8001c0e:	ad03      	add	r5, sp, #12
 8001c10:	2300      	movs	r3, #0
 8001c12:	f000 020f 	and.w	r2, r0, #15
 8001c16:	4619      	mov	r1, r3
 8001c18:	9500      	str	r5, [sp, #0]
 8001c1a:	4630      	mov	r0, r6
 8001c1c:	f7ff fb82 	bl	8001324 <_Unwind_VRS_Get>
 8001c20:	2300      	movs	r3, #0
 8001c22:	9500      	str	r5, [sp, #0]
 8001c24:	4619      	mov	r1, r3
 8001c26:	220d      	movs	r2, #13
 8001c28:	4630      	mov	r0, r6
 8001c2a:	f7ff fba1 	bl	8001370 <_Unwind_VRS_Set>
 8001c2e:	e79a      	b.n	8001b66 <__gnu_unwind_execute+0xe>
 8001c30:	43c2      	mvns	r2, r0
 8001c32:	f002 0307 	and.w	r3, r2, #7
 8001c36:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8001c3a:	411a      	asrs	r2, r3
 8001c3c:	0701      	lsls	r1, r0, #28
 8001c3e:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8001c42:	f04f 0300 	mov.w	r3, #0
 8001c46:	bf48      	it	mi
 8001c48:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4630      	mov	r0, r6
 8001c50:	f7ff fd5c 	bl	800170c <_Unwind_VRS_Pop>
 8001c54:	2800      	cmp	r0, #0
 8001c56:	d1d2      	bne.n	8001bfe <__gnu_unwind_execute+0xa6>
 8001c58:	e785      	b.n	8001b66 <__gnu_unwind_execute+0xe>
 8001c5a:	28b1      	cmp	r0, #177	; 0xb1
 8001c5c:	d057      	beq.n	8001d0e <__gnu_unwind_execute+0x1b6>
 8001c5e:	28b2      	cmp	r0, #178	; 0xb2
 8001c60:	d068      	beq.n	8001d34 <__gnu_unwind_execute+0x1dc>
 8001c62:	28b3      	cmp	r0, #179	; 0xb3
 8001c64:	f000 8095 	beq.w	8001d92 <__gnu_unwind_execute+0x23a>
 8001c68:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8001c6c:	2bb4      	cmp	r3, #180	; 0xb4
 8001c6e:	d0c6      	beq.n	8001bfe <__gnu_unwind_execute+0xa6>
 8001c70:	f000 0207 	and.w	r2, r0, #7
 8001c74:	3201      	adds	r2, #1
 8001c76:	2301      	movs	r3, #1
 8001c78:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4630      	mov	r0, r6
 8001c80:	f7ff fd44 	bl	800170c <_Unwind_VRS_Pop>
 8001c84:	2800      	cmp	r0, #0
 8001c86:	d1ba      	bne.n	8001bfe <__gnu_unwind_execute+0xa6>
 8001c88:	e76d      	b.n	8001b66 <__gnu_unwind_execute+0xe>
 8001c8a:	4638      	mov	r0, r7
 8001c8c:	f7ff ff38 	bl	8001b00 <next_unwind_byte>
 8001c90:	0224      	lsls	r4, r4, #8
 8001c92:	4304      	orrs	r4, r0
 8001c94:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8001c98:	d0b1      	beq.n	8001bfe <__gnu_unwind_execute+0xa6>
 8001c9a:	0124      	lsls	r4, r4, #4
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	b2a2      	uxth	r2, r4
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4630      	mov	r0, r6
 8001ca4:	f7ff fd32 	bl	800170c <_Unwind_VRS_Pop>
 8001ca8:	2800      	cmp	r0, #0
 8001caa:	d1a8      	bne.n	8001bfe <__gnu_unwind_execute+0xa6>
 8001cac:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001cb0:	bf18      	it	ne
 8001cb2:	f04f 0801 	movne.w	r8, #1
 8001cb6:	e756      	b.n	8001b66 <__gnu_unwind_execute+0xe>
 8001cb8:	28c6      	cmp	r0, #198	; 0xc6
 8001cba:	d07d      	beq.n	8001db8 <__gnu_unwind_execute+0x260>
 8001cbc:	28c7      	cmp	r0, #199	; 0xc7
 8001cbe:	f000 8086 	beq.w	8001dce <__gnu_unwind_execute+0x276>
 8001cc2:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001cc6:	2bc0      	cmp	r3, #192	; 0xc0
 8001cc8:	f000 8094 	beq.w	8001df4 <__gnu_unwind_execute+0x29c>
 8001ccc:	28c8      	cmp	r0, #200	; 0xc8
 8001cce:	f000 809f 	beq.w	8001e10 <__gnu_unwind_execute+0x2b8>
 8001cd2:	28c9      	cmp	r0, #201	; 0xc9
 8001cd4:	d193      	bne.n	8001bfe <__gnu_unwind_execute+0xa6>
 8001cd6:	4638      	mov	r0, r7
 8001cd8:	f7ff ff12 	bl	8001b00 <next_unwind_byte>
 8001cdc:	0302      	lsls	r2, r0, #12
 8001cde:	f000 000f 	and.w	r0, r0, #15
 8001ce2:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001ce6:	3001      	adds	r0, #1
 8001ce8:	4302      	orrs	r2, r0
 8001cea:	e781      	b.n	8001bf0 <__gnu_unwind_execute+0x98>
 8001cec:	ac03      	add	r4, sp, #12
 8001cee:	4643      	mov	r3, r8
 8001cf0:	220e      	movs	r2, #14
 8001cf2:	4641      	mov	r1, r8
 8001cf4:	9400      	str	r4, [sp, #0]
 8001cf6:	4630      	mov	r0, r6
 8001cf8:	f7ff fb14 	bl	8001324 <_Unwind_VRS_Get>
 8001cfc:	9400      	str	r4, [sp, #0]
 8001cfe:	4630      	mov	r0, r6
 8001d00:	4643      	mov	r3, r8
 8001d02:	220f      	movs	r2, #15
 8001d04:	4641      	mov	r1, r8
 8001d06:	f7ff fb33 	bl	8001370 <_Unwind_VRS_Set>
 8001d0a:	4640      	mov	r0, r8
 8001d0c:	e778      	b.n	8001c00 <__gnu_unwind_execute+0xa8>
 8001d0e:	4638      	mov	r0, r7
 8001d10:	f7ff fef6 	bl	8001b00 <next_unwind_byte>
 8001d14:	2800      	cmp	r0, #0
 8001d16:	f43f af72 	beq.w	8001bfe <__gnu_unwind_execute+0xa6>
 8001d1a:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001d1e:	f47f af6e 	bne.w	8001bfe <__gnu_unwind_execute+0xa6>
 8001d22:	4602      	mov	r2, r0
 8001d24:	4619      	mov	r1, r3
 8001d26:	4630      	mov	r0, r6
 8001d28:	f7ff fcf0 	bl	800170c <_Unwind_VRS_Pop>
 8001d2c:	2800      	cmp	r0, #0
 8001d2e:	f47f af66 	bne.w	8001bfe <__gnu_unwind_execute+0xa6>
 8001d32:	e718      	b.n	8001b66 <__gnu_unwind_execute+0xe>
 8001d34:	2300      	movs	r3, #0
 8001d36:	f10d 090c 	add.w	r9, sp, #12
 8001d3a:	220d      	movs	r2, #13
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	f8cd 9000 	str.w	r9, [sp]
 8001d42:	4630      	mov	r0, r6
 8001d44:	f7ff faee 	bl	8001324 <_Unwind_VRS_Get>
 8001d48:	4638      	mov	r0, r7
 8001d4a:	f7ff fed9 	bl	8001b00 <next_unwind_byte>
 8001d4e:	0602      	lsls	r2, r0, #24
 8001d50:	f04f 0402 	mov.w	r4, #2
 8001d54:	d50c      	bpl.n	8001d70 <__gnu_unwind_execute+0x218>
 8001d56:	9b03      	ldr	r3, [sp, #12]
 8001d58:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001d5c:	40a0      	lsls	r0, r4
 8001d5e:	4403      	add	r3, r0
 8001d60:	4638      	mov	r0, r7
 8001d62:	9303      	str	r3, [sp, #12]
 8001d64:	f7ff fecc 	bl	8001b00 <next_unwind_byte>
 8001d68:	0603      	lsls	r3, r0, #24
 8001d6a:	f104 0407 	add.w	r4, r4, #7
 8001d6e:	d4f2      	bmi.n	8001d56 <__gnu_unwind_execute+0x1fe>
 8001d70:	9b03      	ldr	r3, [sp, #12]
 8001d72:	f8cd 9000 	str.w	r9, [sp]
 8001d76:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8001d7a:	40a2      	lsls	r2, r4
 8001d7c:	f503 7401 	add.w	r4, r3, #516	; 0x204
 8001d80:	2300      	movs	r3, #0
 8001d82:	4414      	add	r4, r2
 8001d84:	4619      	mov	r1, r3
 8001d86:	220d      	movs	r2, #13
 8001d88:	4630      	mov	r0, r6
 8001d8a:	9403      	str	r4, [sp, #12]
 8001d8c:	f7ff faf0 	bl	8001370 <_Unwind_VRS_Set>
 8001d90:	e6e9      	b.n	8001b66 <__gnu_unwind_execute+0xe>
 8001d92:	4638      	mov	r0, r7
 8001d94:	f7ff feb4 	bl	8001b00 <next_unwind_byte>
 8001d98:	0301      	lsls	r1, r0, #12
 8001d9a:	f000 000f 	and.w	r0, r0, #15
 8001d9e:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001da2:	1c42      	adds	r2, r0, #1
 8001da4:	2301      	movs	r3, #1
 8001da6:	430a      	orrs	r2, r1
 8001da8:	4630      	mov	r0, r6
 8001daa:	4619      	mov	r1, r3
 8001dac:	f7ff fcae 	bl	800170c <_Unwind_VRS_Pop>
 8001db0:	2800      	cmp	r0, #0
 8001db2:	f47f af24 	bne.w	8001bfe <__gnu_unwind_execute+0xa6>
 8001db6:	e6d6      	b.n	8001b66 <__gnu_unwind_execute+0xe>
 8001db8:	4638      	mov	r0, r7
 8001dba:	f7ff fea1 	bl	8001b00 <next_unwind_byte>
 8001dbe:	0301      	lsls	r1, r0, #12
 8001dc0:	f000 000f 	and.w	r0, r0, #15
 8001dc4:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001dc8:	1c42      	adds	r2, r0, #1
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e7eb      	b.n	8001da6 <__gnu_unwind_execute+0x24e>
 8001dce:	4638      	mov	r0, r7
 8001dd0:	f7ff fe96 	bl	8001b00 <next_unwind_byte>
 8001dd4:	2800      	cmp	r0, #0
 8001dd6:	f43f af12 	beq.w	8001bfe <__gnu_unwind_execute+0xa6>
 8001dda:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001dde:	f47f af0e 	bne.w	8001bfe <__gnu_unwind_execute+0xa6>
 8001de2:	4602      	mov	r2, r0
 8001de4:	2104      	movs	r1, #4
 8001de6:	4630      	mov	r0, r6
 8001de8:	f7ff fc90 	bl	800170c <_Unwind_VRS_Pop>
 8001dec:	2800      	cmp	r0, #0
 8001dee:	f47f af06 	bne.w	8001bfe <__gnu_unwind_execute+0xa6>
 8001df2:	e6b8      	b.n	8001b66 <__gnu_unwind_execute+0xe>
 8001df4:	f000 020f 	and.w	r2, r0, #15
 8001df8:	3201      	adds	r2, #1
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001e00:	4619      	mov	r1, r3
 8001e02:	4630      	mov	r0, r6
 8001e04:	f7ff fc82 	bl	800170c <_Unwind_VRS_Pop>
 8001e08:	2800      	cmp	r0, #0
 8001e0a:	f47f aef8 	bne.w	8001bfe <__gnu_unwind_execute+0xa6>
 8001e0e:	e6aa      	b.n	8001b66 <__gnu_unwind_execute+0xe>
 8001e10:	4638      	mov	r0, r7
 8001e12:	f7ff fe75 	bl	8001b00 <next_unwind_byte>
 8001e16:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001e1a:	f000 030f 	and.w	r3, r0, #15
 8001e1e:	3210      	adds	r2, #16
 8001e20:	3301      	adds	r3, #1
 8001e22:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001e26:	e6e3      	b.n	8001bf0 <__gnu_unwind_execute+0x98>

08001e28 <__gnu_unwind_frame>:
 8001e28:	b510      	push	{r4, lr}
 8001e2a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001e2c:	b084      	sub	sp, #16
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	2003      	movs	r0, #3
 8001e32:	f88d 000c 	strb.w	r0, [sp, #12]
 8001e36:	79dc      	ldrb	r4, [r3, #7]
 8001e38:	f88d 400d 	strb.w	r4, [sp, #13]
 8001e3c:	0212      	lsls	r2, r2, #8
 8001e3e:	3308      	adds	r3, #8
 8001e40:	4608      	mov	r0, r1
 8001e42:	a901      	add	r1, sp, #4
 8001e44:	9201      	str	r2, [sp, #4]
 8001e46:	9302      	str	r3, [sp, #8]
 8001e48:	f7ff fe86 	bl	8001b58 <__gnu_unwind_execute>
 8001e4c:	b004      	add	sp, #16
 8001e4e:	bd10      	pop	{r4, pc}

08001e50 <_Unwind_GetRegionStart>:
 8001e50:	b508      	push	{r3, lr}
 8001e52:	f7ff fe7f 	bl	8001b54 <unwind_UCB_from_context>
 8001e56:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001e58:	bd08      	pop	{r3, pc}
 8001e5a:	bf00      	nop

08001e5c <_Unwind_GetLanguageSpecificData>:
 8001e5c:	b508      	push	{r3, lr}
 8001e5e:	f7ff fe79 	bl	8001b54 <unwind_UCB_from_context>
 8001e62:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001e64:	79c3      	ldrb	r3, [r0, #7]
 8001e66:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001e6a:	3008      	adds	r0, #8
 8001e6c:	bd08      	pop	{r3, pc}
 8001e6e:	bf00      	nop

08001e70 <_Unwind_GetTextRelBase>:
 8001e70:	b508      	push	{r3, lr}
 8001e72:	f008 fa34 	bl	800a2de <abort>
 8001e76:	bf00      	nop

08001e78 <_Unwind_GetDataRelBase>:
 8001e78:	b508      	push	{r3, lr}
 8001e7a:	f7ff fff9 	bl	8001e70 <_Unwind_GetTextRelBase>
 8001e7e:	bf00      	nop

08001e80 <__aeabi_idiv0>:
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop

08001e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e84:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8001e86:	4b0a      	ldr	r3, [pc, #40]	; (8001eb0 <HAL_InitTick+0x2c>)
{
 8001e88:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8001e8a:	6818      	ldr	r0, [r3, #0]
 8001e8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e90:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e94:	f000 fd08 	bl	80028a8 <HAL_SYSTICK_Config>
 8001e98:	4604      	mov	r4, r0
 8001e9a:	b938      	cbnz	r0, 8001eac <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	4629      	mov	r1, r5
 8001ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea4:	f000 fccc 	bl	8002840 <HAL_NVIC_SetPriority>
 8001ea8:	4620      	mov	r0, r4
 8001eaa:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8001eac:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001eae:	bd38      	pop	{r3, r4, r5, pc}
 8001eb0:	20000000 	.word	0x20000000

08001eb4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001eb4:	4a09      	ldr	r2, [pc, #36]	; (8001edc <HAL_Init+0x28>)
 8001eb6:	6813      	ldr	r3, [r2, #0]
 8001eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8001ebc:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ebe:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ec0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ec2:	f000 fcab 	bl	800281c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	f7ff ffdc 	bl	8001e84 <HAL_InitTick>
 8001ecc:	4604      	mov	r4, r0
 8001ece:	b918      	cbnz	r0, 8001ed8 <HAL_Init+0x24>
    HAL_MspInit();
 8001ed0:	f004 fca2 	bl	8006818 <HAL_MspInit>
}
 8001ed4:	4620      	mov	r0, r4
 8001ed6:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001ed8:	2401      	movs	r4, #1
 8001eda:	e7fb      	b.n	8001ed4 <HAL_Init+0x20>
 8001edc:	40022000 	.word	0x40022000

08001ee0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8001ee0:	4a02      	ldr	r2, [pc, #8]	; (8001eec <HAL_IncTick+0xc>)
 8001ee2:	6813      	ldr	r3, [r2, #0]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	6013      	str	r3, [r2, #0]
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	20000264 	.word	0x20000264

08001ef0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001ef0:	4b01      	ldr	r3, [pc, #4]	; (8001ef8 <HAL_GetTick+0x8>)
 8001ef2:	6818      	ldr	r0, [r3, #0]
}
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	20000264 	.word	0x20000264

08001efc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001efc:	b538      	push	{r3, r4, r5, lr}
 8001efe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001f00:	f7ff fff6 	bl	8001ef0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f04:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001f06:	4605      	mov	r5, r0
  {
    wait++;
 8001f08:	bf18      	it	ne
 8001f0a:	3401      	addne	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f0c:	f7ff fff0 	bl	8001ef0 <HAL_GetTick>
 8001f10:	1b40      	subs	r0, r0, r5
 8001f12:	4284      	cmp	r4, r0
 8001f14:	d8fa      	bhi.n	8001f0c <HAL_Delay+0x10>
  {
  }
}
 8001f16:	bd38      	pop	{r3, r4, r5, pc}

08001f18 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f18:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f1a:	0dcc      	lsrs	r4, r1, #23
 8001f1c:	f004 0404 	and.w	r4, r4, #4
 8001f20:	3014      	adds	r0, #20
  
  MODIFY_REG(*preg,
 8001f22:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8001f26:	2307      	movs	r3, #7
 8001f28:	fa03 f501 	lsl.w	r5, r3, r1
 8001f2c:	5823      	ldr	r3, [r4, r0]
 8001f2e:	fa02 f101 	lsl.w	r1, r2, r1
 8001f32:	ea23 0305 	bic.w	r3, r3, r5
 8001f36:	4319      	orrs	r1, r3
 8001f38:	5021      	str	r1, [r4, r0]
 8001f3a:	bd30      	pop	{r4, r5, pc}

08001f3c <LL_ADC_IsEnabled>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f3c:	6880      	ldr	r0, [r0, #8]
}
 8001f3e:	f000 0001 	and.w	r0, r0, #1
 8001f42:	4770      	bx	lr

08001f44 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f44:	6880      	ldr	r0, [r0, #8]
}
 8001f46:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8001f4a:	4770      	bx	lr

08001f4c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f52:	4604      	mov	r4, r0
 8001f54:	2800      	cmp	r0, #0
 8001f56:	f000 8085 	beq.w	8002064 <HAL_ADC_Init+0x118>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f5a:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8001f5c:	b925      	cbnz	r5, 8001f68 <HAL_ADC_Init+0x1c>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f5e:	f004 f811 	bl	8005f84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f62:	65a5      	str	r5, [r4, #88]	; 0x58
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f64:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  }
  
  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if(LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f68:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f6a:	6883      	ldr	r3, [r0, #8]
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	d47b      	bmi.n	8002068 <HAL_ADC_Init+0x11c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f70:	6883      	ldr	r3, [r0, #8]
 8001f72:	00dd      	lsls	r5, r3, #3
 8001f74:	d57f      	bpl.n	8002076 <HAL_ADC_Init+0x12a>
 8001f76:	6883      	ldr	r3, [r0, #8]
 8001f78:	00d9      	lsls	r1, r3, #3
 8001f7a:	f140 808a 	bpl.w	8002092 <HAL_ADC_Init+0x146>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f7e:	2100      	movs	r1, #0
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f80:	f7ff ffe0 	bl	8001f44 <LL_ADC_REG_IsConversionOngoing>
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f84:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001f86:	f013 0f10 	tst.w	r3, #16
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f8a:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f8c:	d167      	bne.n	800205e <HAL_ADC_Init+0x112>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001f8e:	2800      	cmp	r0, #0
 8001f90:	d165      	bne.n	800205e <HAL_ADC_Init+0x112>
    ADC_STATE_CLR_SET(hadc->State,
 8001f92:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001f96:	f043 0302 	orr.w	r3, r3, #2
 8001f9a:	6563      	str	r3, [r4, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f9c:	6820      	ldr	r0, [r4, #0]
 8001f9e:	f7ff ffcd 	bl	8001f3c <LL_ADC_IsEnabled>
 8001fa2:	b998      	cbnz	r0, 8001fcc <HAL_ADC_Init+0x80>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fa4:	4852      	ldr	r0, [pc, #328]	; (80020f0 <HAL_ADC_Init+0x1a4>)
 8001fa6:	f7ff ffc9 	bl	8001f3c <LL_ADC_IsEnabled>
 8001faa:	4603      	mov	r3, r0
 8001fac:	4851      	ldr	r0, [pc, #324]	; (80020f4 <HAL_ADC_Init+0x1a8>)
 8001fae:	f7ff ffc5 	bl	8001f3c <LL_ADC_IsEnabled>
 8001fb2:	4303      	orrs	r3, r0
 8001fb4:	4850      	ldr	r0, [pc, #320]	; (80020f8 <HAL_ADC_Init+0x1ac>)
 8001fb6:	f7ff ffc1 	bl	8001f3c <LL_ADC_IsEnabled>
 8001fba:	4303      	orrs	r3, r0
 8001fbc:	d106      	bne.n	8001fcc <HAL_ADC_Init+0x80>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001fbe:	4a4f      	ldr	r2, [pc, #316]	; (80020fc <HAL_ADC_Init+0x1b0>)
 8001fc0:	6860      	ldr	r0, [r4, #4]
 8001fc2:	6893      	ldr	r3, [r2, #8]
 8001fc4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001fc8:	4303      	orrs	r3, r0
 8001fca:	6093      	str	r3, [r2, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8001fcc:	68e0      	ldr	r0, [r4, #12]
 8001fce:	6b63      	ldr	r3, [r4, #52]	; 0x34
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode)  );
 8001fd0:	f894 2020 	ldrb.w	r2, [r4, #32]
                hadc->Init.DataAlign                                                   |
 8001fd4:	4303      	orrs	r3, r0
 8001fd6:	68a0      	ldr	r0, [r4, #8]
 8001fd8:	4303      	orrs	r3, r0
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fda:	7e60      	ldrb	r0, [r4, #25]
    
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fdc:	2a01      	cmp	r2, #1
                hadc->Init.DataAlign                                                   |
 8001fde:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fe2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001fe6:	bf02      	ittt	eq
 8001fe8:	6a62      	ldreq	r2, [r4, #36]	; 0x24
 8001fea:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8001fee:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ff2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001ff4:	b122      	cbz	r2, 8002000 <HAL_ADC_Init+0xb4>
    {
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8001ff6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ff8:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001ffc:	4302      	orrs	r2, r0
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ffe:	4313      	orrs	r3, r2
                 );
    }
    
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR); 
 8002000:	6820      	ldr	r0, [r4, #0]
 8002002:	4a3f      	ldr	r2, [pc, #252]	; (8002100 <HAL_ADC_Init+0x1b4>)
 8002004:	68c5      	ldr	r5, [r0, #12]
 8002006:	402a      	ands	r2, r5
 8002008:	4313      	orrs	r3, r2
 800200a:	60c3      	str	r3, [r0, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800200c:	f7ff ff9a 	bl	8001f44 <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002010:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	0712      	lsls	r2, r2, #28
 8002016:	d546      	bpl.n	80020a6 <HAL_ADC_Init+0x15a>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002018:	6922      	ldr	r2, [r4, #16]
 800201a:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800201c:	bf05      	ittet	eq
 800201e:	6b18      	ldreq	r0, [r3, #48]	; 0x30
 8002020:	69e2      	ldreq	r2, [r4, #28]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002022:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002024:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8002028:	bf06      	itte	eq
 800202a:	f020 000f 	biceq.w	r0, r0, #15
 800202e:	4302      	orreq	r2, r0
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002030:	f022 020f 	bicne.w	r2, r2, #15
 8002034:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002036:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002038:	f023 0303 	bic.w	r3, r3, #3
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8002042:	4608      	mov	r0, r1
 8002044:	b003      	add	sp, #12
 8002046:	bd30      	pop	{r4, r5, pc}
      wait_loop_index--;
 8002048:	9b01      	ldr	r3, [sp, #4]
 800204a:	3b01      	subs	r3, #1
 800204c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 800204e:	9b01      	ldr	r3, [sp, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1f9      	bne.n	8002048 <HAL_ADC_Init+0xfc>
 8002054:	e78f      	b.n	8001f76 <HAL_ADC_Init+0x2a>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002056:	691a      	ldr	r2, [r3, #16]
 8002058:	f022 0201 	bic.w	r2, r2, #1
 800205c:	e045      	b.n	80020ea <HAL_ADC_Init+0x19e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800205e:	f043 0310 	orr.w	r3, r3, #16
 8002062:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 8002064:	2101      	movs	r1, #1
 8002066:	e7ec      	b.n	8002042 <HAL_ADC_Init+0xf6>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002068:	6883      	ldr	r3, [r0, #8]
 800206a:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800206e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002072:	6083      	str	r3, [r0, #8]
 8002074:	e77c      	b.n	8001f70 <HAL_ADC_Init+0x24>
  MODIFY_REG(ADCx->CR,
 8002076:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002078:	4a22      	ldr	r2, [pc, #136]	; (8002104 <HAL_ADC_Init+0x1b8>)
 800207a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800207e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002086:	6083      	str	r3, [r0, #8]
 8002088:	4b1f      	ldr	r3, [pc, #124]	; (8002108 <HAL_ADC_Init+0x1bc>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002090:	e7dc      	b.n	800204c <HAL_ADC_Init+0x100>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002092:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002094:	f043 0310 	orr.w	r3, r3, #16
 8002098:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800209a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 80020a2:	2101      	movs	r1, #1
 80020a4:	e76c      	b.n	8001f80 <HAL_ADC_Init+0x34>
    if (   (tmp_adc_is_conversion_on_going_regular == 0UL)
 80020a6:	2800      	cmp	r0, #0
 80020a8:	d1b6      	bne.n	8002018 <HAL_ADC_Init+0xcc>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80020aa:	68d8      	ldr	r0, [r3, #12]
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80020ac:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80020b0:	7e25      	ldrb	r5, [r4, #24]
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80020b2:	0052      	lsls	r2, r2, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80020b4:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                            |
 80020b8:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80020bc:	f020 0002 	bic.w	r0, r0, #2
 80020c0:	4302      	orrs	r2, r0
 80020c2:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80020c4:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80020c8:	2a01      	cmp	r2, #1
 80020ca:	d1c4      	bne.n	8002056 <HAL_ADC_Init+0x10a>
        MODIFY_REG(hadc->Instance->CFGR2,
 80020cc:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80020ce:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80020d0:	6918      	ldr	r0, [r3, #16]
 80020d2:	432a      	orrs	r2, r5
 80020d4:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80020d6:	f042 0201 	orr.w	r2, r2, #1
 80020da:	432a      	orrs	r2, r5
 80020dc:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80020de:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 80020e2:	432a      	orrs	r2, r5
 80020e4:	f020 0004 	bic.w	r0, r0, #4
 80020e8:	4302      	orrs	r2, r0
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80020ea:	611a      	str	r2, [r3, #16]
 80020ec:	e794      	b.n	8002018 <HAL_ADC_Init+0xcc>
 80020ee:	bf00      	nop
 80020f0:	50040000 	.word	0x50040000
 80020f4:	50040100 	.word	0x50040100
 80020f8:	50040200 	.word	0x50040200
 80020fc:	50040300 	.word	0x50040300
 8002100:	fff0c007 	.word	0xfff0c007
 8002104:	00030d40 	.word	0x00030d40
 8002108:	20000000 	.word	0x20000000

0800210c <HAL_ADC_PollForConversion>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800210c:	4b38      	ldr	r3, [pc, #224]	; (80021f0 <HAL_ADC_PollForConversion+0xe4>)
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800210e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002112:	6945      	ldr	r5, [r0, #20]
 8002114:	689e      	ldr	r6, [r3, #8]
 8002116:	2d08      	cmp	r5, #8
{
 8002118:	4604      	mov	r4, r0
 800211a:	460f      	mov	r7, r1
 800211c:	f006 061f 	and.w	r6, r6, #31
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002120:	d017      	beq.n	8002152 <HAL_ADC_PollForConversion+0x46>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (    (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002122:	2e09      	cmp	r6, #9
 8002124:	d810      	bhi.n	8002148 <HAL_ADC_PollForConversion+0x3c>
 8002126:	f240 2221 	movw	r2, #545	; 0x221
 800212a:	40f2      	lsrs	r2, r6
 800212c:	07d1      	lsls	r1, r2, #31
 800212e:	d50b      	bpl.n	8002148 <HAL_ADC_PollForConversion+0x3c>
         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002130:	6803      	ldr	r3, [r0, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	f013 0f01 	tst.w	r3, #1
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002138:	d00a      	beq.n	8002150 <HAL_ADC_PollForConversion+0x44>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800213a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800213c:	f043 0320 	orr.w	r3, r3, #32
 8002140:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 8002142:	2001      	movs	r0, #1
 8002144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002148:	689b      	ldr	r3, [r3, #8]
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800214a:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 800214e:	e7f3      	b.n	8002138 <HAL_ADC_PollForConversion+0x2c>
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002150:	2504      	movs	r5, #4
    }
#endif
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002152:	f7ff fecd 	bl	8001ef0 <HAL_GetTick>
 8002156:	4680      	mov	r8, r0
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002158:	6823      	ldr	r3, [r4, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	4215      	tst	r5, r2
 800215e:	d021      	beq.n	80021a4 <HAL_ADC_PollForConversion+0x98>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002160:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002166:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002168:	68da      	ldr	r2, [r3, #12]
 800216a:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800216e:	d10f      	bne.n	8002190 <HAL_ADC_PollForConversion+0x84>
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(   (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
     && (hadc->Init.ContinuousConvMode == DISABLE)
 8002170:	7e62      	ldrb	r2, [r4, #25]
 8002172:	b96a      	cbnz	r2, 8002190 <HAL_ADC_PollForConversion+0x84>
    )
  {
    /* Check whether end of sequence is reached */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	0710      	lsls	r0, r2, #28
 8002178:	d50a      	bpl.n	8002190 <HAL_ADC_PollForConversion+0x84>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800217a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800217c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002180:	6562      	str	r2, [r4, #84]	; 0x54
      
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002182:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002184:	04d1      	lsls	r1, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002186:	bf5e      	ittt	pl
 8002188:	6d62      	ldrpl	r2, [r4, #84]	; 0x54
 800218a:	f042 0201 	orrpl.w	r2, r2, #1
 800218e:	6562      	strpl	r2, [r4, #84]	; 0x54
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002190:	4a18      	ldr	r2, [pc, #96]	; (80021f4 <HAL_ADC_PollForConversion+0xe8>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d021      	beq.n	80021da <HAL_ADC_PollForConversion+0xce>
       || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
       || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002196:	68d8      	ldr	r0, [r3, #12]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif
  
  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002198:	2d08      	cmp	r5, #8
 800219a:	d117      	bne.n	80021cc <HAL_ADC_PollForConversion+0xc0>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);  
 800219c:	601d      	str	r5, [r3, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800219e:	2000      	movs	r0, #0
 80021a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 80021a4:	1c7a      	adds	r2, r7, #1
 80021a6:	d0d8      	beq.n	800215a <HAL_ADC_PollForConversion+0x4e>
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80021a8:	f7ff fea2 	bl	8001ef0 <HAL_GetTick>
 80021ac:	eba0 0008 	sub.w	r0, r0, r8
 80021b0:	4287      	cmp	r7, r0
 80021b2:	d301      	bcc.n	80021b8 <HAL_ADC_PollForConversion+0xac>
 80021b4:	2f00      	cmp	r7, #0
 80021b6:	d1cf      	bne.n	8002158 <HAL_ADC_PollForConversion+0x4c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80021ba:	f043 0304 	orr.w	r3, r3, #4
 80021be:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 80021c0:	2300      	movs	r3, #0
 80021c2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        return HAL_TIMEOUT;
 80021c6:	2003      	movs	r0, #3
 80021c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80021cc:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 80021d0:	d1e5      	bne.n	800219e <HAL_ADC_PollForConversion+0x92>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80021d2:	220c      	movs	r2, #12
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021da:	2e09      	cmp	r6, #9
 80021dc:	d805      	bhi.n	80021ea <HAL_ADC_PollForConversion+0xde>
 80021de:	f240 2221 	movw	r2, #545	; 0x221
 80021e2:	fa22 f606 	lsr.w	r6, r2, r6
 80021e6:	07f2      	lsls	r2, r6, #31
 80021e8:	d4d5      	bmi.n	8002196 <HAL_ADC_PollForConversion+0x8a>
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80021ea:	4a03      	ldr	r2, [pc, #12]	; (80021f8 <HAL_ADC_PollForConversion+0xec>)
 80021ec:	68d0      	ldr	r0, [r2, #12]
 80021ee:	e7d3      	b.n	8002198 <HAL_ADC_PollForConversion+0x8c>
 80021f0:	50040300 	.word	0x50040300
 80021f4:	50040100 	.word	0x50040100
 80021f8:	50040000 	.word	0x50040000

080021fc <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80021fc:	6803      	ldr	r3, [r0, #0]
 80021fe:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8002200:	4770      	bx	lr
	...

08002204 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002206:	2300      	movs	r3, #0
 8002208:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800220a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800220e:	2b01      	cmp	r3, #1
{
 8002210:	4605      	mov	r5, r0
 8002212:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 8002214:	f000 8187 	beq.w	8002526 <HAL_ADC_ConfigChannel+0x322>
 8002218:	2301      	movs	r3, #1
 800221a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800221e:	6800      	ldr	r0, [r0, #0]
 8002220:	f7ff fe90 	bl	8001f44 <LL_ADC_REG_IsConversionOngoing>
 8002224:	2800      	cmp	r0, #0
 8002226:	f040 8178 	bne.w	800251a <HAL_ADC_ConfigChannel+0x316>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800222a:	684b      	ldr	r3, [r1, #4]
 800222c:	2b05      	cmp	r3, #5
 800222e:	d808      	bhi.n	8002242 <HAL_ADC_ConfigChannel+0x3e>
    {
      switch (sConfig->Rank)
 8002230:	3b02      	subs	r3, #2
 8002232:	2b03      	cmp	r3, #3
 8002234:	d865      	bhi.n	8002302 <HAL_ADC_ConfigChannel+0xfe>
 8002236:	e8df f003 	tbb	[pc, r3]
 800223a:	5d02      	.short	0x5d02
 800223c:	615f      	.short	0x615f
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 800223e:	230c      	movs	r3, #12
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8002240:	6063      	str	r3, [r4, #4]
      }
    }
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002242:	6861      	ldr	r1, [r4, #4]
 8002244:	6828      	ldr	r0, [r5, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002246:	098e      	lsrs	r6, r1, #6
 8002248:	f100 0730 	add.w	r7, r0, #48	; 0x30
 800224c:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 8002250:	f001 011f 	and.w	r1, r1, #31
 8002254:	231f      	movs	r3, #31
 8002256:	fa03 f201 	lsl.w	r2, r3, r1
 800225a:	59f3      	ldr	r3, [r6, r7]
 800225c:	ea23 0302 	bic.w	r3, r3, r2
 8002260:	6822      	ldr	r2, [r4, #0]
 8002262:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8002266:	408a      	lsls	r2, r1
 8002268:	4313      	orrs	r3, r2
 800226a:	51f3      	str	r3, [r6, r7]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800226c:	f7ff fe6a 	bl	8001f44 <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002270:	682b      	ldr	r3, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	0711      	lsls	r1, r2, #28
 8002276:	f140 8158 	bpl.w	800252a <HAL_ADC_ConfigChannel+0x326>
    }
    
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800227a:	6828      	ldr	r0, [r5, #0]
 800227c:	f7ff fe5e 	bl	8001f3c <LL_ADC_IsEnabled>
 8002280:	2800      	cmp	r0, #0
 8002282:	f040 80d7 	bne.w	8002434 <HAL_ADC_ConfigChannel+0x230>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002286:	68e6      	ldr	r6, [r4, #12]
 8002288:	6828      	ldr	r0, [r5, #0]
 800228a:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->DIFSEL,
 800228c:	4ac3      	ldr	r2, [pc, #780]	; (800259c <HAL_ADC_ConfigChannel+0x398>)
 800228e:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
 8002292:	f006 0e18 	and.w	lr, r6, #24
 8002296:	f3c3 0712 	ubfx	r7, r3, #0, #19
 800229a:	fa22 f20e 	lsr.w	r2, r2, lr
 800229e:	401a      	ands	r2, r3
 80022a0:	ea21 0107 	bic.w	r1, r1, r7
 80022a4:	430a      	orrs	r2, r1
 80022a6:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      
      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80022aa:	4abd      	ldr	r2, [pc, #756]	; (80025a0 <HAL_ADC_ConfigChannel+0x39c>)
 80022ac:	4296      	cmp	r6, r2
 80022ae:	f040 80c1 	bne.w	8002434 <HAL_ADC_ConfigChannel+0x230>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1UL) & 0x1FUL), sConfig->SamplingTime);
 80022b2:	2f00      	cmp	r7, #0
 80022b4:	f040 8093 	bne.w	80023de <HAL_ADC_ConfigChannel+0x1da>
 80022b8:	0e9e      	lsrs	r6, r3, #26
 80022ba:	3601      	adds	r6, #1
 80022bc:	f006 021f 	and.w	r2, r6, #31
 80022c0:	2a09      	cmp	r2, #9
 80022c2:	f04f 0101 	mov.w	r1, #1
 80022c6:	ea4f 6686 	mov.w	r6, r6, lsl #26
 80022ca:	f240 80a2 	bls.w	8002412 <HAL_ADC_ConfigChannel+0x20e>
 80022ce:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 80022d2:	4091      	lsls	r1, r2
 80022d4:	ea41 0206 	orr.w	r2, r1, r6
 80022d8:	2f00      	cmp	r7, #0
 80022da:	f040 80cb 	bne.w	8002474 <HAL_ADC_ConfigChannel+0x270>
 80022de:	0e9b      	lsrs	r3, r3, #26
 80022e0:	3301      	adds	r3, #1
 80022e2:	f003 031f 	and.w	r3, r3, #31
 80022e6:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80022ea:	391e      	subs	r1, #30
 80022ec:	0509      	lsls	r1, r1, #20
 80022ee:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 80022f2:	e09b      	b.n	800242c <HAL_ADC_ConfigChannel+0x228>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 80022f4:	2312      	movs	r3, #18
 80022f6:	e7a3      	b.n	8002240 <HAL_ADC_ConfigChannel+0x3c>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 80022f8:	2318      	movs	r3, #24
 80022fa:	e7a1      	b.n	8002240 <HAL_ADC_ConfigChannel+0x3c>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 80022fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002300:	e79e      	b.n	8002240 <HAL_ADC_ConfigChannel+0x3c>
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8002302:	2306      	movs	r3, #6
 8002304:	e79c      	b.n	8002240 <HAL_ADC_ConfigChannel+0x3c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002306:	f8de 1060 	ldr.w	r1, [lr, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800230a:	f3c3 0012 	ubfx	r0, r3, #0, #19
 800230e:	f3c1 6784 	ubfx	r7, r1, #26, #5
 8002312:	f10e 0664 	add.w	r6, lr, #100	; 0x64
 8002316:	2800      	cmp	r0, #0
 8002318:	d13a      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x18c>
 800231a:	f3c3 6084 	ubfx	r0, r3, #26, #5
 800231e:	4287      	cmp	r7, r0
 8002320:	f040 8128 	bne.w	8002574 <HAL_ADC_ConfigChannel+0x370>
  MODIFY_REG(*preg,
 8002324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002328:	f8ce 1060 	str.w	r1, [lr, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800232c:	6823      	ldr	r3, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800232e:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
 8002332:	f3c3 0712 	ubfx	r7, r3, #0, #19
 8002336:	f3c1 6084 	ubfx	r0, r1, #26, #5
 800233a:	bb9f      	cbnz	r7, 80023a4 <HAL_ADC_ConfigChannel+0x1a0>
 800233c:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8002340:	4283      	cmp	r3, r0
 8002342:	f040 811c 	bne.w	800257e <HAL_ADC_ConfigChannel+0x37a>
  MODIFY_REG(*preg,
 8002346:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800234a:	6031      	str	r1, [r6, #0]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800234c:	6823      	ldr	r3, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800234e:	6891      	ldr	r1, [r2, #8]
 8002350:	f3c3 0712 	ubfx	r7, r3, #0, #19
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002354:	f102 0608 	add.w	r6, r2, #8
 8002358:	f3c1 6084 	ubfx	r0, r1, #26, #5
 800235c:	bb77      	cbnz	r7, 80023bc <HAL_ADC_ConfigChannel+0x1b8>
 800235e:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8002362:	4283      	cmp	r3, r0
 8002364:	f040 8112 	bne.w	800258c <HAL_ADC_ConfigChannel+0x388>
  MODIFY_REG(*preg,
 8002368:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800236c:	6031      	str	r1, [r6, #0]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800236e:	6823      	ldr	r3, [r4, #0]
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002370:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002374:	68d2      	ldr	r2, [r2, #12]
 8002376:	f3c3 0612 	ubfx	r6, r3, #0, #19
 800237a:	f3c2 6184 	ubfx	r1, r2, #26, #5
 800237e:	bb4e      	cbnz	r6, 80023d4 <HAL_ADC_ConfigChannel+0x1d0>
 8002380:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8002384:	428b      	cmp	r3, r1
  MODIFY_REG(*preg,
 8002386:	bf04      	itt	eq
 8002388:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 800238c:	6002      	streq	r2, [r0, #0]
 800238e:	e774      	b.n	800227a <HAL_ADC_ConfigChannel+0x76>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002390:	fa93 f0a3 	rbit	r0, r3
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002394:	fab0 f080 	clz	r0, r0
 8002398:	4287      	cmp	r7, r0
 800239a:	d0c3      	beq.n	8002324 <HAL_ADC_ConfigChannel+0x120>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800239c:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023a0:	f3c1 6084 	ubfx	r0, r1, #26, #5
 80023a4:	fa93 f3a3 	rbit	r3, r3
 80023a8:	fab3 f383 	clz	r3, r3
 80023ac:	4283      	cmp	r3, r0
 80023ae:	d0ca      	beq.n	8002346 <HAL_ADC_ConfigChannel+0x142>
 80023b0:	6891      	ldr	r1, [r2, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023b2:	6823      	ldr	r3, [r4, #0]
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023b4:	f102 0608 	add.w	r6, r2, #8
 80023b8:	f3c1 6084 	ubfx	r0, r1, #26, #5
 80023bc:	fa93 f3a3 	rbit	r3, r3
 80023c0:	fab3 f383 	clz	r3, r3
 80023c4:	4283      	cmp	r3, r0
 80023c6:	d0cf      	beq.n	8002368 <HAL_ADC_ConfigChannel+0x164>
 80023c8:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80023cc:	68d2      	ldr	r2, [r2, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023ce:	6823      	ldr	r3, [r4, #0]
 80023d0:	f3c2 6184 	ubfx	r1, r2, #26, #5
 80023d4:	fa93 f3a3 	rbit	r3, r3
 80023d8:	fab3 f383 	clz	r3, r3
 80023dc:	e7d2      	b.n	8002384 <HAL_ADC_ConfigChannel+0x180>
 80023de:	fa93 f2a3 	rbit	r2, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1UL) & 0x1FUL), sConfig->SamplingTime);
 80023e2:	fab2 f282 	clz	r2, r2
 80023e6:	3201      	adds	r2, #1
 80023e8:	f002 021f 	and.w	r2, r2, #31
 80023ec:	2a09      	cmp	r2, #9
 80023ee:	d830      	bhi.n	8002452 <HAL_ADC_ConfigChannel+0x24e>
 80023f0:	fa93 f6a3 	rbit	r6, r3
 80023f4:	fab6 f686 	clz	r6, r6
 80023f8:	3601      	adds	r6, #1
 80023fa:	06b6      	lsls	r6, r6, #26
 80023fc:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8002400:	fa93 f1a3 	rbit	r1, r3
 8002404:	fab1 f181 	clz	r1, r1
 8002408:	3101      	adds	r1, #1
 800240a:	f001 021f 	and.w	r2, r1, #31
 800240e:	2101      	movs	r1, #1
 8002410:	e001      	b.n	8002416 <HAL_ADC_ConfigChannel+0x212>
 8002412:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8002416:	4091      	lsls	r1, r2
 8002418:	ea41 0206 	orr.w	r2, r1, r6
 800241c:	b9a7      	cbnz	r7, 8002448 <HAL_ADC_ConfigChannel+0x244>
 800241e:	0e99      	lsrs	r1, r3, #26
 8002420:	3101      	adds	r1, #1
 8002422:	f001 011f 	and.w	r1, r1, #31
 8002426:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800242a:	0509      	lsls	r1, r1, #20
 800242c:	4311      	orrs	r1, r2
 800242e:	68a2      	ldr	r2, [r4, #8]
 8002430:	f7ff fd72 	bl	8001f18 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */
    
    if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002434:	6822      	ldr	r2, [r4, #0]
 8002436:	4b5b      	ldr	r3, [pc, #364]	; (80025a4 <HAL_ADC_ConfigChannel+0x3a0>)
 8002438:	421a      	tst	r2, r3
 800243a:	d120      	bne.n	800247e <HAL_ADC_ConfigChannel+0x27a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800243c:	2000      	movs	r0, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800243e:	2300      	movs	r3, #0
 8002440:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
  
  /* Return function status */
  return tmp_hal_status;
}
 8002444:	b003      	add	sp, #12
 8002446:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002448:	fa93 f1a3 	rbit	r1, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1UL) & 0x1FUL), sConfig->SamplingTime);
 800244c:	fab1 f181 	clz	r1, r1
 8002450:	e7e6      	b.n	8002420 <HAL_ADC_ConfigChannel+0x21c>
 8002452:	fa93 f2a3 	rbit	r2, r3
 8002456:	fab2 f282 	clz	r2, r2
 800245a:	3201      	adds	r2, #1
 800245c:	0692      	lsls	r2, r2, #26
 800245e:	f002 46f8 	and.w	r6, r2, #2080374784	; 0x7c000000
 8002462:	fa93 f1a3 	rbit	r1, r3
 8002466:	fab1 f181 	clz	r1, r1
 800246a:	3101      	adds	r1, #1
 800246c:	f001 021f 	and.w	r2, r1, #31
 8002470:	2101      	movs	r1, #1
 8002472:	e72e      	b.n	80022d2 <HAL_ADC_ConfigChannel+0xce>
 8002474:	fa93 f3a3 	rbit	r3, r3
 8002478:	fab3 f383 	clz	r3, r3
 800247c:	e730      	b.n	80022e0 <HAL_ADC_ConfigChannel+0xdc>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800247e:	494a      	ldr	r1, [pc, #296]	; (80025a8 <HAL_ADC_ConfigChannel+0x3a4>)
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002480:	4b4a      	ldr	r3, [pc, #296]	; (80025ac <HAL_ADC_ConfigChannel+0x3a8>)
 8002482:	6888      	ldr	r0, [r1, #8]
 8002484:	429a      	cmp	r2, r3
 8002486:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 800248a:	460c      	mov	r4, r1
 800248c:	d11e      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x2c8>
 800248e:	0202      	lsls	r2, r0, #8
 8002490:	d4d4      	bmi.n	800243c <HAL_ADC_ConfigChannel+0x238>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) 
 8002492:	682b      	ldr	r3, [r5, #0]
 8002494:	4a46      	ldr	r2, [pc, #280]	; (80025b0 <HAL_ADC_ConfigChannel+0x3ac>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d003      	beq.n	80024a2 <HAL_ADC_ConfigChannel+0x29e>
 800249a:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800249e:	4293      	cmp	r3, r2
 80024a0:	d1cc      	bne.n	800243c <HAL_ADC_ConfigChannel+0x238>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80024a2:	68a3      	ldr	r3, [r4, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80024a4:	4a43      	ldr	r2, [pc, #268]	; (80025b4 <HAL_ADC_ConfigChannel+0x3b0>)
 80024a6:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80024aa:	4333      	orrs	r3, r6
 80024ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024b0:	60a3      	str	r3, [r4, #8]
 80024b2:	4b41      	ldr	r3, [pc, #260]	; (80025b8 <HAL_ADC_ConfigChannel+0x3b4>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80024ba:	230c      	movs	r3, #12
 80024bc:	4353      	muls	r3, r2
            wait_loop_index--;
 80024be:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0UL)
 80024c0:	9b01      	ldr	r3, [sp, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0ba      	beq.n	800243c <HAL_ADC_ConfigChannel+0x238>
            wait_loop_index--;
 80024c6:	9b01      	ldr	r3, [sp, #4]
 80024c8:	3b01      	subs	r3, #1
 80024ca:	e7f8      	b.n	80024be <HAL_ADC_ConfigChannel+0x2ba>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024cc:	4b3b      	ldr	r3, [pc, #236]	; (80025bc <HAL_ADC_ConfigChannel+0x3b8>)
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d111      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x2f2>
 80024d2:	01c3      	lsls	r3, r0, #7
 80024d4:	d4b2      	bmi.n	800243c <HAL_ADC_ConfigChannel+0x238>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024d6:	682b      	ldr	r3, [r5, #0]
 80024d8:	4a35      	ldr	r2, [pc, #212]	; (80025b0 <HAL_ADC_ConfigChannel+0x3ac>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d003      	beq.n	80024e6 <HAL_ADC_ConfigChannel+0x2e2>
 80024de:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d1aa      	bne.n	800243c <HAL_ADC_ConfigChannel+0x238>
 80024e6:	68a3      	ldr	r3, [r4, #8]
 80024e8:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80024ec:	4333      	orrs	r3, r6
 80024ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024f2:	60a3      	str	r3, [r4, #8]
 80024f4:	e7a2      	b.n	800243c <HAL_ADC_ConfigChannel+0x238>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80024f6:	4b32      	ldr	r3, [pc, #200]	; (80025c0 <HAL_ADC_ConfigChannel+0x3bc>)
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d19f      	bne.n	800243c <HAL_ADC_ConfigChannel+0x238>
 80024fc:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8002500:	d19c      	bne.n	800243c <HAL_ADC_ConfigChannel+0x238>
        if (ADC_VREFINT_INSTANCE(hadc))
 8002502:	682a      	ldr	r2, [r5, #0]
 8002504:	4b2a      	ldr	r3, [pc, #168]	; (80025b0 <HAL_ADC_ConfigChannel+0x3ac>)
 8002506:	429a      	cmp	r2, r3
 8002508:	d198      	bne.n	800243c <HAL_ADC_ConfigChannel+0x238>
 800250a:	688b      	ldr	r3, [r1, #8]
 800250c:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8002510:	4333      	orrs	r3, r6
 8002512:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002516:	608b      	str	r3, [r1, #8]
 8002518:	e791      	b.n	800243e <HAL_ADC_ConfigChannel+0x23a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800251a:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 800251c:	f042 0220 	orr.w	r2, r2, #32
 8002520:	656a      	str	r2, [r5, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8002522:	4618      	mov	r0, r3
 8002524:	e78b      	b.n	800243e <HAL_ADC_ConfigChannel+0x23a>
  __HAL_LOCK(hadc);
 8002526:	2002      	movs	r0, #2
 8002528:	e78c      	b.n	8002444 <HAL_ADC_ConfigChannel+0x240>
    if (   (tmp_adc_is_conversion_on_going_regular == 0UL)
 800252a:	2800      	cmp	r0, #0
 800252c:	f47f aea5 	bne.w	800227a <HAL_ADC_ConfigChannel+0x76>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002530:	68a2      	ldr	r2, [r4, #8]
 8002532:	6821      	ldr	r1, [r4, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff fcef 	bl	8001f18 <LL_ADC_SetChannelSamplingTime>
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800253a:	6926      	ldr	r6, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800253c:	f8d5 e000 	ldr.w	lr, [r5]
 8002540:	6823      	ldr	r3, [r4, #0]
 8002542:	f8de 100c 	ldr.w	r1, [lr, #12]
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002546:	2e04      	cmp	r6, #4
 8002548:	f10e 0260 	add.w	r2, lr, #96	; 0x60
 800254c:	f43f aedb 	beq.w	8002306 <HAL_ADC_ConfigChannel+0x102>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002550:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8002554:	0048      	lsls	r0, r1, #1
 8002556:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(*preg,
 8002558:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 800255c:	4081      	lsls	r1, r0
 800255e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002562:	4319      	orrs	r1, r3
 8002564:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 8002568:	4b16      	ldr	r3, [pc, #88]	; (80025c4 <HAL_ADC_ConfigChannel+0x3c0>)
 800256a:	4003      	ands	r3, r0
 800256c:	4319      	orrs	r1, r3
 800256e:	f842 1026 	str.w	r1, [r2, r6, lsl #2]
 8002572:	e682      	b.n	800227a <HAL_ADC_ConfigChannel+0x76>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002574:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002578:	f3c1 6084 	ubfx	r0, r1, #26, #5
 800257c:	e6de      	b.n	800233c <HAL_ADC_ConfigChannel+0x138>
 800257e:	6891      	ldr	r1, [r2, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002580:	6823      	ldr	r3, [r4, #0]
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002582:	f102 0608 	add.w	r6, r2, #8
 8002586:	f3c1 6084 	ubfx	r0, r1, #26, #5
 800258a:	e6e8      	b.n	800235e <HAL_ADC_ConfigChannel+0x15a>
 800258c:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002590:	68d2      	ldr	r2, [r2, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002592:	6823      	ldr	r3, [r4, #0]
 8002594:	f3c2 6184 	ubfx	r1, r2, #26, #5
 8002598:	e6f2      	b.n	8002380 <HAL_ADC_ConfigChannel+0x17c>
 800259a:	bf00      	nop
 800259c:	0007ffff 	.word	0x0007ffff
 80025a0:	407f0000 	.word	0x407f0000
 80025a4:	80080000 	.word	0x80080000
 80025a8:	50040300 	.word	0x50040300
 80025ac:	c7520000 	.word	0xc7520000
 80025b0:	50040000 	.word	0x50040000
 80025b4:	00030d40 	.word	0x00030d40
 80025b8:	20000000 	.word	0x20000000
 80025bc:	cb840000 	.word	0xcb840000
 80025c0:	80000001 	.word	0x80000001
 80025c4:	03fff000 	.word	0x03fff000

080025c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80025c8:	b570      	push	{r4, r5, r6, lr}
 80025ca:	4604      	mov	r4, r0
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025cc:	6800      	ldr	r0, [r0, #0]
 80025ce:	f7ff fcb5 	bl	8001f3c <LL_ADC_IsEnabled>
 80025d2:	b108      	cbz	r0, 80025d8 <ADC_Enable+0x10>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80025d4:	2000      	movs	r0, #0
 80025d6:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80025d8:	6822      	ldr	r2, [r4, #0]
 80025da:	4b15      	ldr	r3, [pc, #84]	; (8002630 <ADC_Enable+0x68>)
 80025dc:	6891      	ldr	r1, [r2, #8]
 80025de:	4219      	tst	r1, r3
 80025e0:	d009      	beq.n	80025f6 <ADC_Enable+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025e2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80025e4:	f043 0310 	orr.w	r3, r3, #16
 80025e8:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 80025f2:	2001      	movs	r0, #1
 80025f4:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 80025f6:	6893      	ldr	r3, [r2, #8]
 80025f8:	4d0e      	ldr	r5, [pc, #56]	; (8002634 <ADC_Enable+0x6c>)
 80025fa:	402b      	ands	r3, r5
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8002602:	f7ff fc75 	bl	8001ef0 <HAL_GetTick>
 8002606:	4606      	mov	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002608:	6820      	ldr	r0, [r4, #0]
 800260a:	6803      	ldr	r3, [r0, #0]
 800260c:	07db      	lsls	r3, r3, #31
 800260e:	d4e1      	bmi.n	80025d4 <ADC_Enable+0xc>
      if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002610:	f7ff fc94 	bl	8001f3c <LL_ADC_IsEnabled>
 8002614:	b928      	cbnz	r0, 8002622 <ADC_Enable+0x5a>
        LL_ADC_Enable(hadc->Instance);
 8002616:	6822      	ldr	r2, [r4, #0]
 8002618:	6893      	ldr	r3, [r2, #8]
 800261a:	402b      	ands	r3, r5
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	6093      	str	r3, [r2, #8]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002622:	f7ff fc65 	bl	8001ef0 <HAL_GetTick>
 8002626:	1b80      	subs	r0, r0, r6
 8002628:	2802      	cmp	r0, #2
 800262a:	d9ed      	bls.n	8002608 <ADC_Enable+0x40>
 800262c:	e7d9      	b.n	80025e2 <ADC_Enable+0x1a>
 800262e:	bf00      	nop
 8002630:	8000003f 	.word	0x8000003f
 8002634:	7fffffc0 	.word	0x7fffffc0

08002638 <HAL_ADC_Start>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002638:	4b35      	ldr	r3, [pc, #212]	; (8002710 <HAL_ADC_Start+0xd8>)
{
 800263a:	b570      	push	{r4, r5, r6, lr}
 800263c:	4604      	mov	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800263e:	6800      	ldr	r0, [r0, #0]
 8002640:	689e      	ldr	r6, [r3, #8]
 8002642:	f7ff fc7f 	bl	8001f44 <LL_ADC_REG_IsConversionOngoing>
 8002646:	4605      	mov	r5, r0
 8002648:	2800      	cmp	r0, #0
 800264a:	d15a      	bne.n	8002702 <HAL_ADC_Start+0xca>
    __HAL_LOCK(hadc);
 800264c:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002650:	2b01      	cmp	r3, #1
 8002652:	d056      	beq.n	8002702 <HAL_ADC_Start+0xca>
 8002654:	2301      	movs	r3, #1
 8002656:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    tmp_hal_status = ADC_Enable(hadc);
 800265a:	4620      	mov	r0, r4
 800265c:	f7ff ffb4 	bl	80025c8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002660:	2800      	cmp	r0, #0
 8002662:	d14b      	bne.n	80026fc <HAL_ADC_Start+0xc4>
      ADC_STATE_CLR_SET(hadc->State,
 8002664:	6d63      	ldr	r3, [r4, #84]	; 0x54
      if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002666:	4a2b      	ldr	r2, [pc, #172]	; (8002714 <HAL_ADC_Start+0xdc>)
      ADC_STATE_CLR_SET(hadc->State,
 8002668:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800266c:	f023 0301 	bic.w	r3, r3, #1
 8002670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002674:	6563      	str	r3, [r4, #84]	; 0x54
      if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002676:	6823      	ldr	r3, [r4, #0]
 8002678:	4293      	cmp	r3, r2
 800267a:	f006 061f 	and.w	r6, r6, #31
 800267e:	d042      	beq.n	8002706 <HAL_ADC_Start+0xce>
 8002680:	461d      	mov	r5, r3
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002682:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002684:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002688:	6562      	str	r2, [r4, #84]	; 0x54
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800268a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800268c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002690:	bf1c      	itt	ne
 8002692:	6da2      	ldrne	r2, [r4, #88]	; 0x58
 8002694:	f022 0206 	bicne.w	r2, r2, #6
        ADC_CLEAR_ERRORCODE(hadc); 
 8002698:	65a2      	str	r2, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800269a:	221c      	movs	r2, #28
 800269c:	601a      	str	r2, [r3, #0]
      if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800269e:	42ab      	cmp	r3, r5
      __HAL_UNLOCK(hadc);
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
      if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026a8:	d008      	beq.n	80026bc <HAL_ADC_Start+0x84>
           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026aa:	2e09      	cmp	r6, #9
 80026ac:	bf9d      	ittte	ls
 80026ae:	f240 2221 	movwls	r2, #545	; 0x221
 80026b2:	40f2      	lsrls	r2, r6
 80026b4:	43d2      	mvnls	r2, r2
 80026b6:	2201      	movhi	r2, #1
 80026b8:	07d1      	lsls	r1, r2, #31
 80026ba:	d411      	bmi.n	80026e0 <HAL_ADC_Start+0xa8>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80026bc:	68da      	ldr	r2, [r3, #12]
 80026be:	0192      	lsls	r2, r2, #6
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80026c0:	bf41      	itttt	mi
 80026c2:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80026c4:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80026c8:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 80026cc:	6562      	strmi	r2, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80026d4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80026d8:	f042 0204 	orr.w	r2, r2, #4
 80026dc:	609a      	str	r2, [r3, #8]
 80026de:	bd70      	pop	{r4, r5, r6, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80026e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026e6:	6563      	str	r3, [r4, #84]	; 0x54
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80026e8:	68eb      	ldr	r3, [r5, #12]
 80026ea:	019b      	lsls	r3, r3, #6
 80026ec:	d50f      	bpl.n	800270e <HAL_ADC_Start+0xd6>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80026ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80026f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026f8:	6563      	str	r3, [r4, #84]	; 0x54
 80026fa:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UNLOCK(hadc);
 80026fc:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8002700:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = HAL_BUSY;
 8002702:	2002      	movs	r0, #2
 8002704:	bd70      	pop	{r4, r5, r6, pc}
      if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002706:	4d04      	ldr	r5, [pc, #16]	; (8002718 <HAL_ADC_Start+0xe0>)
           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002708:	2e00      	cmp	r6, #0
 800270a:	d0ba      	beq.n	8002682 <HAL_ADC_Start+0x4a>
 800270c:	e7bd      	b.n	800268a <HAL_ADC_Start+0x52>
}
 800270e:	bd70      	pop	{r4, r5, r6, pc}
 8002710:	50040300 	.word	0x50040300
 8002714:	50040100 	.word	0x50040100
 8002718:	50040000 	.word	0x50040000

0800271c <LL_ADC_IsEnabled>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800271c:	6880      	ldr	r0, [r0, #8]
}
 800271e:	f000 0001 	and.w	r0, r0, #1
 8002722:	4770      	bx	lr

08002724 <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002724:	6880      	ldr	r0, [r0, #8]
}
 8002726:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800272a:	4770      	bx	lr

0800272c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800272c:	b530      	push	{r4, r5, lr}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800272e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002732:	2b01      	cmp	r3, #1
{
 8002734:	b09b      	sub	sp, #108	; 0x6c
 8002736:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 8002738:	d066      	beq.n	8002808 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
 800273a:	2301      	movs	r3, #1
 800273c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002740:	4b32      	ldr	r3, [pc, #200]	; (800280c <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 8002742:	6800      	ldr	r0, [r0, #0]
 8002744:	4298      	cmp	r0, r3
 8002746:	bf0c      	ite	eq
 8002748:	f503 7380 	addeq.w	r3, r3, #256	; 0x100
 800274c:	2300      	movne	r3, #0
 800274e:	9301      	str	r3, [sp, #4]
  
  if (tmphadcSlave.Instance == NULL)
 8002750:	9801      	ldr	r0, [sp, #4]
 8002752:	b940      	cbnz	r0, 8002766 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002754:	6d53      	ldr	r3, [r2, #84]	; 0x54
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002756:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800275a:	f043 0320 	orr.w	r3, r3, #32
 800275e:	6553      	str	r3, [r2, #84]	; 0x54
    
    return HAL_ERROR;
 8002760:	2001      	movs	r0, #1
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return tmp_hal_status;
} 
 8002762:	b01b      	add	sp, #108	; 0x6c
 8002764:	bd30      	pop	{r4, r5, pc}
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002766:	f7ff ffdd 	bl	8002724 <LL_ADC_REG_IsConversionOngoing>
 800276a:	4603      	mov	r3, r0
  if ( (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL) 
 800276c:	6810      	ldr	r0, [r2, #0]
 800276e:	f7ff ffd9 	bl	8002724 <LL_ADC_REG_IsConversionOngoing>
 8002772:	2800      	cmp	r0, #0
 8002774:	d142      	bne.n	80027fc <HAL_ADCEx_MultiModeConfigChannel+0xd0>
    && (tmphadcSlave_conversion_on_going == 0UL) )
 8002776:	2b00      	cmp	r3, #0
 8002778:	d140      	bne.n	80027fc <HAL_ADCEx_MultiModeConfigChannel+0xd0>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800277a:	680b      	ldr	r3, [r1, #0]
 800277c:	4c24      	ldr	r4, [pc, #144]	; (8002810 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 800277e:	b333      	cbz	r3, 80027ce <HAL_ADCEx_MultiModeConfigChannel+0xa2>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG, 
 8002780:	68a3      	ldr	r3, [r4, #8]
 8002782:	6848      	ldr	r0, [r1, #4]
 8002784:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002788:	4303      	orrs	r3, r0
 800278a:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
 800278e:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
 8002792:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002794:	481d      	ldr	r0, [pc, #116]	; (800280c <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 8002796:	f7ff ffc1 	bl	800271c <LL_ADC_IsEnabled>
 800279a:	4603      	mov	r3, r0
 800279c:	481d      	ldr	r0, [pc, #116]	; (8002814 <HAL_ADCEx_MultiModeConfigChannel+0xe8>)
 800279e:	f7ff ffbd 	bl	800271c <LL_ADC_IsEnabled>
 80027a2:	4303      	orrs	r3, r0
 80027a4:	481c      	ldr	r0, [pc, #112]	; (8002818 <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 80027a6:	f7ff ffb9 	bl	800271c <LL_ADC_IsEnabled>
 80027aa:	4318      	orrs	r0, r3
 80027ac:	d004      	beq.n	80027b8 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027ae:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80027b0:	2300      	movs	r3, #0
 80027b2:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
  return tmp_hal_status;
 80027b6:	e7d4      	b.n	8002762 <HAL_ADCEx_MultiModeConfigChannel+0x36>
          MODIFY_REG(tmpADC_Common->CCR,
 80027b8:	680b      	ldr	r3, [r1, #0]
 80027ba:	68a5      	ldr	r5, [r4, #8]
 80027bc:	6889      	ldr	r1, [r1, #8]
 80027be:	430b      	orrs	r3, r1
 80027c0:	f425 6171 	bic.w	r1, r5, #3856	; 0xf10
 80027c4:	f021 010f 	bic.w	r1, r1, #15
 80027c8:	430b      	orrs	r3, r1
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80027ca:	60a3      	str	r3, [r4, #8]
 80027cc:	e7f0      	b.n	80027b0 <HAL_ADCEx_MultiModeConfigChannel+0x84>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80027ce:	68a3      	ldr	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027d0:	480e      	ldr	r0, [pc, #56]	; (800280c <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80027d2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80027d6:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027d8:	f7ff ffa0 	bl	800271c <LL_ADC_IsEnabled>
 80027dc:	4603      	mov	r3, r0
 80027de:	480d      	ldr	r0, [pc, #52]	; (8002814 <HAL_ADCEx_MultiModeConfigChannel+0xe8>)
 80027e0:	f7ff ff9c 	bl	800271c <LL_ADC_IsEnabled>
 80027e4:	4303      	orrs	r3, r0
 80027e6:	480c      	ldr	r0, [pc, #48]	; (8002818 <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 80027e8:	f7ff ff98 	bl	800271c <LL_ADC_IsEnabled>
 80027ec:	4318      	orrs	r0, r3
 80027ee:	d1de      	bne.n	80027ae <HAL_ADCEx_MultiModeConfigChannel+0x82>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80027f0:	68a3      	ldr	r3, [r4, #8]
 80027f2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80027f6:	f023 030f 	bic.w	r3, r3, #15
 80027fa:	e7e6      	b.n	80027ca <HAL_ADCEx_MultiModeConfigChannel+0x9e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027fc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80027fe:	f043 0320 	orr.w	r3, r3, #32
 8002802:	6553      	str	r3, [r2, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8002804:	2001      	movs	r0, #1
 8002806:	e7d3      	b.n	80027b0 <HAL_ADCEx_MultiModeConfigChannel+0x84>
  __HAL_LOCK(hadc);
 8002808:	2002      	movs	r0, #2
 800280a:	e7aa      	b.n	8002762 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 800280c:	50040000 	.word	0x50040000
 8002810:	50040300 	.word	0x50040300
 8002814:	50040100 	.word	0x50040100
 8002818:	50040200 	.word	0x50040200

0800281c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800281c:	4a07      	ldr	r2, [pc, #28]	; (800283c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800281e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002820:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002824:	041b      	lsls	r3, r3, #16
 8002826:	0c1b      	lsrs	r3, r3, #16
 8002828:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800282c:	0200      	lsls	r0, r0, #8
 800282e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002832:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8002836:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002838:	60d3      	str	r3, [r2, #12]
 800283a:	4770      	bx	lr
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002840:	4b17      	ldr	r3, [pc, #92]	; (80028a0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002842:	b530      	push	{r4, r5, lr}
 8002844:	68dc      	ldr	r4, [r3, #12]
 8002846:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800284a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800284e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002850:	2b04      	cmp	r3, #4
 8002852:	bf28      	it	cs
 8002854:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002856:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002858:	f04f 0501 	mov.w	r5, #1
 800285c:	fa05 f303 	lsl.w	r3, r5, r3
 8002860:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002864:	bf8c      	ite	hi
 8002866:	3c03      	subhi	r4, #3
 8002868:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800286a:	4019      	ands	r1, r3
 800286c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800286e:	fa05 f404 	lsl.w	r4, r5, r4
 8002872:	3c01      	subs	r4, #1
 8002874:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8002876:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002878:	ea42 0201 	orr.w	r2, r2, r1
 800287c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002880:	bfaf      	iteee	ge
 8002882:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002886:	f000 000f 	andlt.w	r0, r0, #15
 800288a:	4b06      	ldrlt	r3, [pc, #24]	; (80028a4 <HAL_NVIC_SetPriority+0x64>)
 800288c:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800288e:	bfa5      	ittet	ge
 8002890:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8002894:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002896:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002898:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800289c:	bd30      	pop	{r4, r5, pc}
 800289e:	bf00      	nop
 80028a0:	e000ed00 	.word	0xe000ed00
 80028a4:	e000ed14 	.word	0xe000ed14

080028a8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028a8:	3801      	subs	r0, #1
 80028aa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80028ae:	d20a      	bcs.n	80028c6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028b0:	4b06      	ldr	r3, [pc, #24]	; (80028cc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b2:	4a07      	ldr	r2, [pc, #28]	; (80028d0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028b4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b6:	21f0      	movs	r1, #240	; 0xf0
 80028b8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028bc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028be:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028c0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80028c6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	e000e010 	.word	0xe000e010
 80028d0:	e000ed00 	.word	0xe000ed00

080028d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028d8:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028da:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028dc:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002a88 <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80028e0:	4c67      	ldr	r4, [pc, #412]	; (8002a80 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028e2:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 80028e4:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028e6:	9a01      	ldr	r2, [sp, #4]
 80028e8:	40da      	lsrs	r2, r3
 80028ea:	d102      	bne.n	80028f2 <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 80028ec:	b005      	add	sp, #20
 80028ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028f2:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 80028f4:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028f6:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 80028f8:	ea12 0e06 	ands.w	lr, r2, r6
 80028fc:	f000 80b1 	beq.w	8002a62 <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002900:	684a      	ldr	r2, [r1, #4]
 8002902:	f022 0710 	bic.w	r7, r2, #16
 8002906:	2f02      	cmp	r7, #2
 8002908:	d116      	bne.n	8002938 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 800290a:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 800290e:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002912:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8002916:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800291a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800291e:	f04f 0c0f 	mov.w	ip, #15
 8002922:	fa0c fc0a 	lsl.w	ip, ip, sl
 8002926:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800292a:	690d      	ldr	r5, [r1, #16]
 800292c:	fa05 f50a 	lsl.w	r5, r5, sl
 8002930:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8002934:	f8c9 5020 	str.w	r5, [r9, #32]
 8002938:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800293c:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800293e:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002942:	fa05 f50c 	lsl.w	r5, r5, ip
 8002946:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002948:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800294c:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002950:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002954:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002956:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800295a:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 800295c:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002960:	d811      	bhi.n	8002986 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8002962:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002964:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002968:	68cf      	ldr	r7, [r1, #12]
 800296a:	fa07 f70c 	lsl.w	r7, r7, ip
 800296e:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8002972:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002974:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002976:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800297a:	f3c2 1700 	ubfx	r7, r2, #4, #1
 800297e:	409f      	lsls	r7, r3
 8002980:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8002984:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002986:	f1ba 0f03 	cmp.w	sl, #3
 800298a:	d107      	bne.n	800299c <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 800298c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800298e:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002992:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 8002996:	409f      	lsls	r7, r3
 8002998:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 800299a:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 800299c:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800299e:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80029a0:	688e      	ldr	r6, [r1, #8]
 80029a2:	fa06 f60c 	lsl.w	r6, r6, ip
 80029a6:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 80029a8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029aa:	00d5      	lsls	r5, r2, #3
 80029ac:	d559      	bpl.n	8002a62 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ae:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 80029b2:	f045 0501 	orr.w	r5, r5, #1
 80029b6:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 80029ba:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 80029be:	f023 0603 	bic.w	r6, r3, #3
 80029c2:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80029c6:	f005 0501 	and.w	r5, r5, #1
 80029ca:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 80029ce:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029d0:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029d4:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 80029d6:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029d8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80029dc:	270f      	movs	r7, #15
 80029de:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029e2:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029e6:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029ea:	d03c      	beq.n	8002a66 <HAL_GPIO_Init+0x192>
 80029ec:	4d25      	ldr	r5, [pc, #148]	; (8002a84 <HAL_GPIO_Init+0x1b0>)
 80029ee:	42a8      	cmp	r0, r5
 80029f0:	d03b      	beq.n	8002a6a <HAL_GPIO_Init+0x196>
 80029f2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80029f6:	42a8      	cmp	r0, r5
 80029f8:	d039      	beq.n	8002a6e <HAL_GPIO_Init+0x19a>
 80029fa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80029fe:	42a8      	cmp	r0, r5
 8002a00:	d037      	beq.n	8002a72 <HAL_GPIO_Init+0x19e>
 8002a02:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002a06:	42a8      	cmp	r0, r5
 8002a08:	d035      	beq.n	8002a76 <HAL_GPIO_Init+0x1a2>
 8002a0a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002a0e:	42a8      	cmp	r0, r5
 8002a10:	d033      	beq.n	8002a7a <HAL_GPIO_Init+0x1a6>
 8002a12:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002a16:	42a8      	cmp	r0, r5
 8002a18:	bf14      	ite	ne
 8002a1a:	2507      	movne	r5, #7
 8002a1c:	2506      	moveq	r5, #6
 8002a1e:	fa05 f50c 	lsl.w	r5, r5, ip
 8002a22:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a24:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 8002a26:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8002a28:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a2c:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 8002a2e:	bf54      	ite	pl
 8002a30:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8002a32:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 8002a36:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8002a38:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a3a:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 8002a3c:	bf54      	ite	pl
 8002a3e:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8002a40:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8002a44:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 8002a46:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a48:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 8002a4a:	bf54      	ite	pl
 8002a4c:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8002a4e:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 8002a52:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8002a54:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a56:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 8002a58:	bf54      	ite	pl
 8002a5a:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8002a5c:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 8002a60:	60e5      	str	r5, [r4, #12]
    position++;
 8002a62:	3301      	adds	r3, #1
 8002a64:	e73f      	b.n	80028e6 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a66:	2500      	movs	r5, #0
 8002a68:	e7d9      	b.n	8002a1e <HAL_GPIO_Init+0x14a>
 8002a6a:	2501      	movs	r5, #1
 8002a6c:	e7d7      	b.n	8002a1e <HAL_GPIO_Init+0x14a>
 8002a6e:	2502      	movs	r5, #2
 8002a70:	e7d5      	b.n	8002a1e <HAL_GPIO_Init+0x14a>
 8002a72:	2503      	movs	r5, #3
 8002a74:	e7d3      	b.n	8002a1e <HAL_GPIO_Init+0x14a>
 8002a76:	2504      	movs	r5, #4
 8002a78:	e7d1      	b.n	8002a1e <HAL_GPIO_Init+0x14a>
 8002a7a:	2505      	movs	r5, #5
 8002a7c:	e7cf      	b.n	8002a1e <HAL_GPIO_Init+0x14a>
 8002a7e:	bf00      	nop
 8002a80:	40010400 	.word	0x40010400
 8002a84:	48000400 	.word	0x48000400
 8002a88:	40021000 	.word	0x40021000

08002a8c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a8c:	b10a      	cbz	r2, 8002a92 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a8e:	6181      	str	r1, [r0, #24]
 8002a90:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a92:	6281      	str	r1, [r0, #40]	; 0x28
 8002a94:	4770      	bx	lr

08002a96 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a96:	6803      	ldr	r3, [r0, #0]
 8002a98:	699a      	ldr	r2, [r3, #24]
 8002a9a:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a9c:	bf44      	itt	mi
 8002a9e:	2200      	movmi	r2, #0
 8002aa0:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002aa2:	699a      	ldr	r2, [r3, #24]
 8002aa4:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002aa6:	bf5e      	ittt	pl
 8002aa8:	699a      	ldrpl	r2, [r3, #24]
 8002aaa:	f042 0201 	orrpl.w	r2, r2, #1
 8002aae:	619a      	strpl	r2, [r3, #24]
 8002ab0:	4770      	bx	lr

08002ab2 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002ab2:	b530      	push	{r4, r5, lr}
 8002ab4:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002ab6:	6805      	ldr	r5, [r0, #0]
 8002ab8:	4323      	orrs	r3, r4
 8002aba:	0d64      	lsrs	r4, r4, #21
 8002abc:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8002ac0:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8002ac4:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8002ac8:	6868      	ldr	r0, [r5, #4]
 8002aca:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002ace:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8002ad2:	4319      	orrs	r1, r3
 8002ad4:	f044 0403 	orr.w	r4, r4, #3
 8002ad8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002adc:	ea20 0404 	bic.w	r4, r0, r4
 8002ae0:	4321      	orrs	r1, r4
 8002ae2:	6069      	str	r1, [r5, #4]
 8002ae4:	bd30      	pop	{r4, r5, pc}

08002ae6 <I2C_WaitOnFlagUntilTimeout>:
{
 8002ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002aea:	9f06      	ldr	r7, [sp, #24]
 8002aec:	4604      	mov	r4, r0
 8002aee:	4688      	mov	r8, r1
 8002af0:	4616      	mov	r6, r2
 8002af2:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002af4:	6822      	ldr	r2, [r4, #0]
 8002af6:	6993      	ldr	r3, [r2, #24]
 8002af8:	ea38 0303 	bics.w	r3, r8, r3
 8002afc:	bf0c      	ite	eq
 8002afe:	2301      	moveq	r3, #1
 8002b00:	2300      	movne	r3, #0
 8002b02:	42b3      	cmp	r3, r6
 8002b04:	d002      	beq.n	8002b0c <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8002b06:	2000      	movs	r0, #0
}
 8002b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002b0c:	1c6b      	adds	r3, r5, #1
 8002b0e:	d0f2      	beq.n	8002af6 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b10:	f7ff f9ee 	bl	8001ef0 <HAL_GetTick>
 8002b14:	1bc0      	subs	r0, r0, r7
 8002b16:	4285      	cmp	r5, r0
 8002b18:	d301      	bcc.n	8002b1e <I2C_WaitOnFlagUntilTimeout+0x38>
 8002b1a:	2d00      	cmp	r5, #0
 8002b1c:	d1ea      	bne.n	8002af4 <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b1e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002b20:	f043 0320 	orr.w	r3, r3, #32
 8002b24:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002b26:	2320      	movs	r3, #32
 8002b28:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002b32:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002b36:	2001      	movs	r0, #1
 8002b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002b3c <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b3c:	6803      	ldr	r3, [r0, #0]
{
 8002b3e:	b570      	push	{r4, r5, r6, lr}
 8002b40:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b42:	6998      	ldr	r0, [r3, #24]
 8002b44:	f010 0010 	ands.w	r0, r0, #16
{
 8002b48:	460d      	mov	r5, r1
 8002b4a:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b4c:	d116      	bne.n	8002b7c <I2C_IsAcknowledgeFailed+0x40>
 8002b4e:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8002b50:	1c69      	adds	r1, r5, #1
 8002b52:	d014      	beq.n	8002b7e <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b54:	f7ff f9cc 	bl	8001ef0 <HAL_GetTick>
 8002b58:	1b80      	subs	r0, r0, r6
 8002b5a:	4285      	cmp	r5, r0
 8002b5c:	d300      	bcc.n	8002b60 <I2C_IsAcknowledgeFailed+0x24>
 8002b5e:	b96d      	cbnz	r5, 8002b7c <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b60:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002b62:	f043 0320 	orr.w	r3, r3, #32
 8002b66:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002b68:	2320      	movs	r3, #32
 8002b6a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002b74:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8002b78:	2001      	movs	r0, #1
}
 8002b7a:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b7c:	6823      	ldr	r3, [r4, #0]
 8002b7e:	6999      	ldr	r1, [r3, #24]
 8002b80:	068a      	lsls	r2, r1, #26
 8002b82:	d5e5      	bpl.n	8002b50 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b84:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b86:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b88:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8002b8a:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b8c:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8002b8e:	f7ff ff82 	bl	8002a96 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002b92:	6822      	ldr	r2, [r4, #0]
 8002b94:	6853      	ldr	r3, [r2, #4]
 8002b96:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002b9a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002b9e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002ba2:	f023 0301 	bic.w	r3, r3, #1
 8002ba6:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ba8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002baa:	f043 0304 	orr.w	r3, r3, #4
 8002bae:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002bb0:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 8002bb4:	e7db      	b.n	8002b6e <I2C_IsAcknowledgeFailed+0x32>

08002bb6 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002bb6:	b570      	push	{r4, r5, r6, lr}
 8002bb8:	4604      	mov	r4, r0
 8002bba:	460d      	mov	r5, r1
 8002bbc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002bbe:	6823      	ldr	r3, [r4, #0]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	079b      	lsls	r3, r3, #30
 8002bc4:	d501      	bpl.n	8002bca <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8002bc6:	2000      	movs	r0, #0
 8002bc8:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bca:	4632      	mov	r2, r6
 8002bcc:	4629      	mov	r1, r5
 8002bce:	4620      	mov	r0, r4
 8002bd0:	f7ff ffb4 	bl	8002b3c <I2C_IsAcknowledgeFailed>
 8002bd4:	b9a0      	cbnz	r0, 8002c00 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8002bd6:	1c6a      	adds	r2, r5, #1
 8002bd8:	d0f1      	beq.n	8002bbe <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bda:	f7ff f989 	bl	8001ef0 <HAL_GetTick>
 8002bde:	1b80      	subs	r0, r0, r6
 8002be0:	4285      	cmp	r5, r0
 8002be2:	d301      	bcc.n	8002be8 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8002be4:	2d00      	cmp	r5, #0
 8002be6:	d1ea      	bne.n	8002bbe <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002be8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002bea:	f043 0320 	orr.w	r3, r3, #32
 8002bee:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002bf0:	2320      	movs	r3, #32
 8002bf2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002bfc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002c00:	2001      	movs	r0, #1
}
 8002c02:	bd70      	pop	{r4, r5, r6, pc}

08002c04 <I2C_RequestMemoryWrite>:
{
 8002c04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c06:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8002c08:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002c0a:	4b16      	ldr	r3, [pc, #88]	; (8002c64 <I2C_RequestMemoryWrite+0x60>)
 8002c0c:	9300      	str	r3, [sp, #0]
{
 8002c0e:	4605      	mov	r5, r0
 8002c10:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002c12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c16:	b2fa      	uxtb	r2, r7
 8002c18:	f7ff ff4b 	bl	8002ab2 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c1c:	4632      	mov	r2, r6
 8002c1e:	9908      	ldr	r1, [sp, #32]
 8002c20:	4628      	mov	r0, r5
 8002c22:	f7ff ffc8 	bl	8002bb6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c26:	b110      	cbz	r0, 8002c2e <I2C_RequestMemoryWrite+0x2a>
    return HAL_ERROR;
 8002c28:	2001      	movs	r0, #1
}
 8002c2a:	b003      	add	sp, #12
 8002c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c2e:	2f01      	cmp	r7, #1
 8002c30:	682b      	ldr	r3, [r5, #0]
 8002c32:	d10c      	bne.n	8002c4e <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c34:	b2e4      	uxtb	r4, r4
 8002c36:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002c38:	9b08      	ldr	r3, [sp, #32]
 8002c3a:	9600      	str	r6, [sp, #0]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	2180      	movs	r1, #128	; 0x80
 8002c40:	4628      	mov	r0, r5
 8002c42:	f7ff ff50 	bl	8002ae6 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8002c46:	3000      	adds	r0, #0
 8002c48:	bf18      	it	ne
 8002c4a:	2001      	movne	r0, #1
 8002c4c:	e7ed      	b.n	8002c2a <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c4e:	0a22      	lsrs	r2, r4, #8
 8002c50:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c52:	9908      	ldr	r1, [sp, #32]
 8002c54:	4632      	mov	r2, r6
 8002c56:	4628      	mov	r0, r5
 8002c58:	f7ff ffad 	bl	8002bb6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c5c:	2800      	cmp	r0, #0
 8002c5e:	d1e3      	bne.n	8002c28 <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c60:	682b      	ldr	r3, [r5, #0]
 8002c62:	e7e7      	b.n	8002c34 <I2C_RequestMemoryWrite+0x30>
 8002c64:	80002000 	.word	0x80002000

08002c68 <I2C_RequestMemoryRead>:
{
 8002c68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c6a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8002c6c:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002c6e:	4b16      	ldr	r3, [pc, #88]	; (8002cc8 <I2C_RequestMemoryRead+0x60>)
 8002c70:	9300      	str	r3, [sp, #0]
{
 8002c72:	4605      	mov	r5, r0
 8002c74:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002c76:	2300      	movs	r3, #0
 8002c78:	b2fa      	uxtb	r2, r7
 8002c7a:	f7ff ff1a 	bl	8002ab2 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c7e:	4632      	mov	r2, r6
 8002c80:	9908      	ldr	r1, [sp, #32]
 8002c82:	4628      	mov	r0, r5
 8002c84:	f7ff ff97 	bl	8002bb6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c88:	b110      	cbz	r0, 8002c90 <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 8002c8a:	2001      	movs	r0, #1
}
 8002c8c:	b003      	add	sp, #12
 8002c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c90:	2f01      	cmp	r7, #1
 8002c92:	682b      	ldr	r3, [r5, #0]
 8002c94:	d10c      	bne.n	8002cb0 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c96:	b2e4      	uxtb	r4, r4
 8002c98:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002c9a:	9b08      	ldr	r3, [sp, #32]
 8002c9c:	9600      	str	r6, [sp, #0]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	2140      	movs	r1, #64	; 0x40
 8002ca2:	4628      	mov	r0, r5
 8002ca4:	f7ff ff1f 	bl	8002ae6 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8002ca8:	3000      	adds	r0, #0
 8002caa:	bf18      	it	ne
 8002cac:	2001      	movne	r0, #1
 8002cae:	e7ed      	b.n	8002c8c <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002cb0:	0a22      	lsrs	r2, r4, #8
 8002cb2:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cb4:	9908      	ldr	r1, [sp, #32]
 8002cb6:	4632      	mov	r2, r6
 8002cb8:	4628      	mov	r0, r5
 8002cba:	f7ff ff7c 	bl	8002bb6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002cbe:	2800      	cmp	r0, #0
 8002cc0:	d1e3      	bne.n	8002c8a <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cc2:	682b      	ldr	r3, [r5, #0]
 8002cc4:	e7e7      	b.n	8002c96 <I2C_RequestMemoryRead+0x2e>
 8002cc6:	bf00      	nop
 8002cc8:	80002000 	.word	0x80002000

08002ccc <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002ccc:	b570      	push	{r4, r5, r6, lr}
 8002cce:	4604      	mov	r4, r0
 8002cd0:	460d      	mov	r5, r1
 8002cd2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cd4:	6823      	ldr	r3, [r4, #0]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	069b      	lsls	r3, r3, #26
 8002cda:	d501      	bpl.n	8002ce0 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8002cdc:	2000      	movs	r0, #0
 8002cde:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ce0:	4632      	mov	r2, r6
 8002ce2:	4629      	mov	r1, r5
 8002ce4:	4620      	mov	r0, r4
 8002ce6:	f7ff ff29 	bl	8002b3c <I2C_IsAcknowledgeFailed>
 8002cea:	b990      	cbnz	r0, 8002d12 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cec:	f7ff f900 	bl	8001ef0 <HAL_GetTick>
 8002cf0:	1b80      	subs	r0, r0, r6
 8002cf2:	4285      	cmp	r5, r0
 8002cf4:	d301      	bcc.n	8002cfa <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8002cf6:	2d00      	cmp	r5, #0
 8002cf8:	d1ec      	bne.n	8002cd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cfa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002cfc:	f043 0320 	orr.w	r3, r3, #32
 8002d00:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002d02:	2320      	movs	r3, #32
 8002d04:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002d0e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002d12:	2001      	movs	r0, #1
}
 8002d14:	bd70      	pop	{r4, r5, r6, pc}

08002d16 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8002d16:	b570      	push	{r4, r5, r6, lr}
 8002d18:	4604      	mov	r4, r0
 8002d1a:	460d      	mov	r5, r1
 8002d1c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d1e:	6823      	ldr	r3, [r4, #0]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	075b      	lsls	r3, r3, #29
 8002d24:	d40e      	bmi.n	8002d44 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d26:	4632      	mov	r2, r6
 8002d28:	4629      	mov	r1, r5
 8002d2a:	4620      	mov	r0, r4
 8002d2c:	f7ff ff06 	bl	8002b3c <I2C_IsAcknowledgeFailed>
 8002d30:	b9f0      	cbnz	r0, 8002d70 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d32:	6823      	ldr	r3, [r4, #0]
 8002d34:	699a      	ldr	r2, [r3, #24]
 8002d36:	0691      	lsls	r1, r2, #26
 8002d38:	d51c      	bpl.n	8002d74 <I2C_WaitOnRXNEFlagUntilTimeout+0x5e>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002d3a:	699a      	ldr	r2, [r3, #24]
 8002d3c:	0752      	lsls	r2, r2, #29
 8002d3e:	d503      	bpl.n	8002d48 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
 8002d40:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002d42:	b10a      	cbz	r2, 8002d48 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        return HAL_OK;
 8002d44:	2000      	movs	r0, #0
 8002d46:	bd70      	pop	{r4, r5, r6, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d48:	2120      	movs	r1, #32
 8002d4a:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002d52:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002d56:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002d5a:	f022 0201 	bic.w	r2, r2, #1
 8002d5e:	605a      	str	r2, [r3, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d60:	2300      	movs	r3, #0
 8002d62:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d64:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002d6c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002d70:	2001      	movs	r0, #1
}
 8002d72:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d74:	f7ff f8bc 	bl	8001ef0 <HAL_GetTick>
 8002d78:	1b80      	subs	r0, r0, r6
 8002d7a:	4285      	cmp	r5, r0
 8002d7c:	d301      	bcc.n	8002d82 <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
 8002d7e:	2d00      	cmp	r5, #0
 8002d80:	d1cd      	bne.n	8002d1e <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d82:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002d84:	f043 0320 	orr.w	r3, r3, #32
 8002d88:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002d8a:	2320      	movs	r3, #32
 8002d8c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8002d90:	2300      	movs	r3, #0
 8002d92:	e7eb      	b.n	8002d6c <I2C_WaitOnRXNEFlagUntilTimeout+0x56>

08002d94 <HAL_I2C_Init>:
{
 8002d94:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8002d96:	4604      	mov	r4, r0
 8002d98:	2800      	cmp	r0, #0
 8002d9a:	d04a      	beq.n	8002e32 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d9c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002da0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002da4:	b91b      	cbnz	r3, 8002dae <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8002da6:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002daa:	f003 f9f1 	bl	8006190 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dae:	2324      	movs	r3, #36	; 0x24
 8002db0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002db4:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002db6:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	f022 0201 	bic.w	r2, r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002dc0:	6862      	ldr	r2, [r4, #4]
 8002dc2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002dc6:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002dc8:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002dca:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002dcc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dd0:	609a      	str	r2, [r3, #8]
 8002dd2:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002dd4:	d124      	bne.n	8002e20 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002dd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dda:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ddc:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002dde:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002de0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002de4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002de8:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002dea:	68da      	ldr	r2, [r3, #12]
 8002dec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002df0:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002df2:	6922      	ldr	r2, [r4, #16]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	69a1      	ldr	r1, [r4, #24]
 8002df8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002dfc:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002dfe:	6a21      	ldr	r1, [r4, #32]
 8002e00:	69e2      	ldr	r2, [r4, #28]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	f042 0201 	orr.w	r2, r2, #1
 8002e0c:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e0e:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8002e10:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e12:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e14:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e18:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e1a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8002e1e:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e20:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e24:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e26:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e28:	bf04      	itt	eq
 8002e2a:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8002e2e:	605a      	streq	r2, [r3, #4]
 8002e30:	e7d4      	b.n	8002ddc <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8002e32:	2001      	movs	r0, #1
}
 8002e34:	bd10      	pop	{r4, pc}
	...

08002e38 <HAL_I2C_Master_Transmit>:
{
 8002e38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002e3c:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e3e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002e42:	2b20      	cmp	r3, #32
{
 8002e44:	4604      	mov	r4, r0
 8002e46:	460e      	mov	r6, r1
 8002e48:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e4a:	f040 8084 	bne.w	8002f56 <HAL_I2C_Master_Transmit+0x11e>
    __HAL_LOCK(hi2c);
 8002e4e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d07f      	beq.n	8002f56 <HAL_I2C_Master_Transmit+0x11e>
 8002e56:	2701      	movs	r7, #1
 8002e58:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002e5c:	f7ff f848 	bl	8001ef0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e60:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8002e62:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e64:	9000      	str	r0, [sp, #0]
 8002e66:	463a      	mov	r2, r7
 8002e68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e6c:	4620      	mov	r0, r4
 8002e6e:	f7ff fe3a 	bl	8002ae6 <I2C_WaitOnFlagUntilTimeout>
 8002e72:	b118      	cbz	r0, 8002e7c <HAL_I2C_Master_Transmit+0x44>
      return HAL_ERROR;
 8002e74:	2001      	movs	r0, #1
}
 8002e76:	b003      	add	sp, #12
 8002e78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e7c:	2321      	movs	r3, #33	; 0x21
 8002e7e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002e82:	2310      	movs	r3, #16
 8002e84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e88:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8002e8a:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e8e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8002e90:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8002e98:	6360      	str	r0, [r4, #52]	; 0x34
 8002e9a:	4b30      	ldr	r3, [pc, #192]	; (8002f5c <HAL_I2C_Master_Transmit+0x124>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e9c:	d926      	bls.n	8002eec <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e9e:	22ff      	movs	r2, #255	; 0xff
 8002ea0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002ea2:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ea4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ea8:	4631      	mov	r1, r6
 8002eaa:	4620      	mov	r0, r4
 8002eac:	f7ff fe01 	bl	8002ab2 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002eb0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eb2:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 8002eb4:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eb6:	462a      	mov	r2, r5
 8002eb8:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8002eba:	b9fb      	cbnz	r3, 8002efc <HAL_I2C_Master_Transmit+0xc4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ebc:	f7ff ff06 	bl	8002ccc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ec0:	2800      	cmp	r0, #0
 8002ec2:	d1d7      	bne.n	8002e74 <HAL_I2C_Master_Transmit+0x3c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ec4:	6823      	ldr	r3, [r4, #0]
 8002ec6:	2120      	movs	r1, #32
 8002ec8:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002ed0:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002ed4:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002ed8:	f022 0201 	bic.w	r2, r2, #1
 8002edc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002ede:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002ee2:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ee6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8002eea:	e7c4      	b.n	8002e76 <HAL_I2C_Master_Transmit+0x3e>
      hi2c->XferSize = hi2c->XferCount;
 8002eec:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002eee:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8002ef0:	b292      	uxth	r2, r2
 8002ef2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ef4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ef8:	b2d2      	uxtb	r2, r2
 8002efa:	e7d5      	b.n	8002ea8 <HAL_I2C_Master_Transmit+0x70>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002efc:	f7ff fe5b 	bl	8002bb6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f00:	2800      	cmp	r0, #0
 8002f02:	d1b7      	bne.n	8002e74 <HAL_I2C_Master_Transmit+0x3c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f06:	6822      	ldr	r2, [r4, #0]
 8002f08:	f813 1b01 	ldrb.w	r1, [r3], #1
 8002f0c:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002f0e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002f10:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002f12:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002f14:	3b01      	subs	r3, #1
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f1a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002f1c:	3a01      	subs	r2, #1
 8002f1e:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f20:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8002f22:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0c3      	beq.n	8002eb0 <HAL_I2C_Master_Transmit+0x78>
 8002f28:	2a00      	cmp	r2, #0
 8002f2a:	d1c1      	bne.n	8002eb0 <HAL_I2C_Master_Transmit+0x78>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f2c:	9500      	str	r5, [sp, #0]
 8002f2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f30:	2180      	movs	r1, #128	; 0x80
 8002f32:	4620      	mov	r0, r4
 8002f34:	f7ff fdd7 	bl	8002ae6 <I2C_WaitOnFlagUntilTimeout>
 8002f38:	2800      	cmp	r0, #0
 8002f3a:	d19b      	bne.n	8002e74 <HAL_I2C_Master_Transmit+0x3c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f3c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	2bff      	cmp	r3, #255	; 0xff
 8002f42:	d903      	bls.n	8002f4c <HAL_I2C_Master_Transmit+0x114>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f44:	22ff      	movs	r2, #255	; 0xff
 8002f46:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002f48:	9000      	str	r0, [sp, #0]
 8002f4a:	e7ab      	b.n	8002ea4 <HAL_I2C_Master_Transmit+0x6c>
          hi2c->XferSize = hi2c->XferCount;
 8002f4c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002f4e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8002f50:	b292      	uxth	r2, r2
 8002f52:	8522      	strh	r2, [r4, #40]	; 0x28
 8002f54:	e7ce      	b.n	8002ef4 <HAL_I2C_Master_Transmit+0xbc>
    return HAL_BUSY;
 8002f56:	2002      	movs	r0, #2
 8002f58:	e78d      	b.n	8002e76 <HAL_I2C_Master_Transmit+0x3e>
 8002f5a:	bf00      	nop
 8002f5c:	80002000 	.word	0x80002000

08002f60 <HAL_I2C_Master_Receive>:
{
 8002f60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002f64:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f66:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002f6a:	2b20      	cmp	r3, #32
{
 8002f6c:	4604      	mov	r4, r0
 8002f6e:	460e      	mov	r6, r1
 8002f70:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f72:	f040 8086 	bne.w	8003082 <HAL_I2C_Master_Receive+0x122>
    __HAL_LOCK(hi2c);
 8002f76:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	f000 8081 	beq.w	8003082 <HAL_I2C_Master_Receive+0x122>
 8002f80:	2701      	movs	r7, #1
 8002f82:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002f86:	f7fe ffb3 	bl	8001ef0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f8a:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8002f8c:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f8e:	9000      	str	r0, [sp, #0]
 8002f90:	463a      	mov	r2, r7
 8002f92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f96:	4620      	mov	r0, r4
 8002f98:	f7ff fda5 	bl	8002ae6 <I2C_WaitOnFlagUntilTimeout>
 8002f9c:	b118      	cbz	r0, 8002fa6 <HAL_I2C_Master_Receive+0x46>
      return HAL_ERROR;
 8002f9e:	2001      	movs	r0, #1
}
 8002fa0:	b003      	add	sp, #12
 8002fa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002fa6:	2322      	movs	r3, #34	; 0x22
 8002fa8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002fac:	2310      	movs	r3, #16
 8002fae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fb2:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8002fb4:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fb8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8002fba:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8002fc2:	6360      	str	r0, [r4, #52]	; 0x34
 8002fc4:	4b30      	ldr	r3, [pc, #192]	; (8003088 <HAL_I2C_Master_Receive+0x128>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fc6:	d926      	bls.n	8003016 <HAL_I2C_Master_Receive+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fc8:	22ff      	movs	r2, #255	; 0xff
 8002fca:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002fcc:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002fce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002fd2:	4631      	mov	r1, r6
 8002fd4:	4620      	mov	r0, r4
 8002fd6:	f7ff fd6c 	bl	8002ab2 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002fda:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fdc:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 8002fde:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fe0:	462a      	mov	r2, r5
 8002fe2:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8002fe4:	b9fb      	cbnz	r3, 8003026 <HAL_I2C_Master_Receive+0xc6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fe6:	f7ff fe71 	bl	8002ccc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002fea:	2800      	cmp	r0, #0
 8002fec:	d1d7      	bne.n	8002f9e <HAL_I2C_Master_Receive+0x3e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fee:	6823      	ldr	r3, [r4, #0]
 8002ff0:	2120      	movs	r1, #32
 8002ff2:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002ffa:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002ffe:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8003002:	f022 0201 	bic.w	r2, r2, #1
 8003006:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003008:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800300c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003010:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8003014:	e7c4      	b.n	8002fa0 <HAL_I2C_Master_Receive+0x40>
      hi2c->XferSize = hi2c->XferCount;
 8003016:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003018:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800301a:	b292      	uxth	r2, r2
 800301c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800301e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	e7d5      	b.n	8002fd2 <HAL_I2C_Master_Receive+0x72>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003026:	f7ff fe76 	bl	8002d16 <I2C_WaitOnRXNEFlagUntilTimeout>
 800302a:	2800      	cmp	r0, #0
 800302c:	d1b7      	bne.n	8002f9e <HAL_I2C_Master_Receive+0x3e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800302e:	6822      	ldr	r2, [r4, #0]
 8003030:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003032:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003034:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003036:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003038:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800303a:	3301      	adds	r3, #1
 800303c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800303e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003040:	3b01      	subs	r3, #1
 8003042:	b29b      	uxth	r3, r3
 8003044:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003046:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003048:	3a01      	subs	r2, #1
 800304a:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800304c:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800304e:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003050:	2b00      	cmp	r3, #0
 8003052:	d0c2      	beq.n	8002fda <HAL_I2C_Master_Receive+0x7a>
 8003054:	2a00      	cmp	r2, #0
 8003056:	d1c0      	bne.n	8002fda <HAL_I2C_Master_Receive+0x7a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003058:	9500      	str	r5, [sp, #0]
 800305a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800305c:	2180      	movs	r1, #128	; 0x80
 800305e:	4620      	mov	r0, r4
 8003060:	f7ff fd41 	bl	8002ae6 <I2C_WaitOnFlagUntilTimeout>
 8003064:	2800      	cmp	r0, #0
 8003066:	d19a      	bne.n	8002f9e <HAL_I2C_Master_Receive+0x3e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003068:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800306a:	b29b      	uxth	r3, r3
 800306c:	2bff      	cmp	r3, #255	; 0xff
 800306e:	d903      	bls.n	8003078 <HAL_I2C_Master_Receive+0x118>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003070:	22ff      	movs	r2, #255	; 0xff
 8003072:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003074:	9000      	str	r0, [sp, #0]
 8003076:	e7aa      	b.n	8002fce <HAL_I2C_Master_Receive+0x6e>
          hi2c->XferSize = hi2c->XferCount;
 8003078:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800307a:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800307c:	b292      	uxth	r2, r2
 800307e:	8522      	strh	r2, [r4, #40]	; 0x28
 8003080:	e7cd      	b.n	800301e <HAL_I2C_Master_Receive+0xbe>
    return HAL_BUSY;
 8003082:	2002      	movs	r0, #2
 8003084:	e78c      	b.n	8002fa0 <HAL_I2C_Master_Receive+0x40>
 8003086:	bf00      	nop
 8003088:	80002400 	.word	0x80002400

0800308c <HAL_I2C_Mem_Write>:
{
 800308c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003090:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003092:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8003096:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003098:	2b20      	cmp	r3, #32
{
 800309a:	4604      	mov	r4, r0
 800309c:	460f      	mov	r7, r1
 800309e:	9203      	str	r2, [sp, #12]
 80030a0:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 80030a4:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 80030a8:	f040 80a5 	bne.w	80031f6 <HAL_I2C_Mem_Write+0x16a>
    if ((pData == NULL) || (Size == 0U))
 80030ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80030ae:	b113      	cbz	r3, 80030b6 <HAL_I2C_Mem_Write+0x2a>
 80030b0:	f1ba 0f00 	cmp.w	sl, #0
 80030b4:	d106      	bne.n	80030c4 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80030b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030ba:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80030bc:	2001      	movs	r0, #1
}
 80030be:	b005      	add	sp, #20
 80030c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80030c4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	f000 8094 	beq.w	80031f6 <HAL_I2C_Mem_Write+0x16a>
 80030ce:	2501      	movs	r5, #1
 80030d0:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80030d4:	f7fe ff0c 	bl	8001ef0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80030d8:	2319      	movs	r3, #25
 80030da:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80030dc:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80030de:	462a      	mov	r2, r5
 80030e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030e4:	4620      	mov	r0, r4
 80030e6:	f7ff fcfe 	bl	8002ae6 <I2C_WaitOnFlagUntilTimeout>
 80030ea:	4681      	mov	r9, r0
 80030ec:	2800      	cmp	r0, #0
 80030ee:	d1e5      	bne.n	80030bc <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80030f0:	2321      	movs	r3, #33	; 0x21
 80030f2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030f6:	2340      	movs	r3, #64	; 0x40
 80030f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80030fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030fe:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003100:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8003102:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8003104:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003108:	9601      	str	r6, [sp, #4]
 800310a:	f8cd 8000 	str.w	r8, [sp]
 800310e:	465b      	mov	r3, fp
 8003110:	9a03      	ldr	r2, [sp, #12]
 8003112:	4639      	mov	r1, r7
 8003114:	4620      	mov	r0, r4
 8003116:	f7ff fd75 	bl	8002c04 <I2C_RequestMemoryWrite>
 800311a:	b110      	cbz	r0, 8003122 <HAL_I2C_Mem_Write+0x96>
      __HAL_UNLOCK(hi2c);
 800311c:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 8003120:	e7cc      	b.n	80030bc <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003122:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003124:	b29b      	uxth	r3, r3
 8003126:	2bff      	cmp	r3, #255	; 0xff
 8003128:	d955      	bls.n	80031d6 <HAL_I2C_Mem_Write+0x14a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800312a:	22ff      	movs	r2, #255	; 0xff
 800312c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800312e:	9000      	str	r0, [sp, #0]
 8003130:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003134:	4639      	mov	r1, r7
 8003136:	4620      	mov	r0, r4
 8003138:	f7ff fcbb 	bl	8002ab2 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800313c:	4632      	mov	r2, r6
 800313e:	4641      	mov	r1, r8
 8003140:	4620      	mov	r0, r4
 8003142:	f7ff fd38 	bl	8002bb6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003146:	2800      	cmp	r0, #0
 8003148:	d1b8      	bne.n	80030bc <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800314a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800314c:	6822      	ldr	r2, [r4, #0]
 800314e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8003152:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003154:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003156:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003158:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800315a:	3b01      	subs	r3, #1
 800315c:	b29b      	uxth	r3, r3
 800315e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003160:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003162:	3a01      	subs	r2, #1
 8003164:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003166:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8003168:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800316a:	b1ab      	cbz	r3, 8003198 <HAL_I2C_Mem_Write+0x10c>
 800316c:	b9a2      	cbnz	r2, 8003198 <HAL_I2C_Mem_Write+0x10c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800316e:	9600      	str	r6, [sp, #0]
 8003170:	4643      	mov	r3, r8
 8003172:	2180      	movs	r1, #128	; 0x80
 8003174:	4620      	mov	r0, r4
 8003176:	f7ff fcb6 	bl	8002ae6 <I2C_WaitOnFlagUntilTimeout>
 800317a:	2800      	cmp	r0, #0
 800317c:	d19e      	bne.n	80030bc <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800317e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003180:	b29b      	uxth	r3, r3
 8003182:	2bff      	cmp	r3, #255	; 0xff
 8003184:	d92f      	bls.n	80031e6 <HAL_I2C_Mem_Write+0x15a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003186:	22ff      	movs	r2, #255	; 0xff
 8003188:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800318a:	9000      	str	r0, [sp, #0]
 800318c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003190:	4639      	mov	r1, r7
 8003192:	4620      	mov	r0, r4
 8003194:	f7ff fc8d 	bl	8002ab2 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8003198:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800319a:	b29b      	uxth	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1cd      	bne.n	800313c <HAL_I2C_Mem_Write+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031a0:	4632      	mov	r2, r6
 80031a2:	4641      	mov	r1, r8
 80031a4:	4620      	mov	r0, r4
 80031a6:	f7ff fd91 	bl	8002ccc <I2C_WaitOnSTOPFlagUntilTimeout>
 80031aa:	2800      	cmp	r0, #0
 80031ac:	d186      	bne.n	80030bc <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031ae:	6823      	ldr	r3, [r4, #0]
 80031b0:	2120      	movs	r1, #32
 80031b2:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80031ba:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80031be:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80031c2:	f022 0201 	bic.w	r2, r2, #1
 80031c6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80031c8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80031cc:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031d0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80031d4:	e773      	b.n	80030be <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 80031d6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80031d8:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80031da:	b292      	uxth	r2, r2
 80031dc:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80031de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031e2:	b2d2      	uxtb	r2, r2
 80031e4:	e7a6      	b.n	8003134 <HAL_I2C_Mem_Write+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 80031e6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80031e8:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80031ea:	b292      	uxth	r2, r2
 80031ec:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80031ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031f2:	b2d2      	uxtb	r2, r2
 80031f4:	e7cc      	b.n	8003190 <HAL_I2C_Mem_Write+0x104>
    return HAL_BUSY;
 80031f6:	2002      	movs	r0, #2
 80031f8:	e761      	b.n	80030be <HAL_I2C_Mem_Write+0x32>
	...

080031fc <HAL_I2C_Mem_Read>:
{
 80031fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003200:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003202:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8003206:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003208:	2b20      	cmp	r3, #32
{
 800320a:	4604      	mov	r4, r0
 800320c:	460f      	mov	r7, r1
 800320e:	9203      	str	r2, [sp, #12]
 8003210:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8003214:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003218:	f040 80a9 	bne.w	800336e <HAL_I2C_Mem_Read+0x172>
    if ((pData == NULL) || (Size == 0U))
 800321c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800321e:	b113      	cbz	r3, 8003226 <HAL_I2C_Mem_Read+0x2a>
 8003220:	f1ba 0f00 	cmp.w	sl, #0
 8003224:	d106      	bne.n	8003234 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003226:	f44f 7300 	mov.w	r3, #512	; 0x200
 800322a:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800322c:	2001      	movs	r0, #1
}
 800322e:	b005      	add	sp, #20
 8003230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8003234:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003238:	2b01      	cmp	r3, #1
 800323a:	f000 8098 	beq.w	800336e <HAL_I2C_Mem_Read+0x172>
 800323e:	2501      	movs	r5, #1
 8003240:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8003244:	f7fe fe54 	bl	8001ef0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003248:	2319      	movs	r3, #25
 800324a:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 800324c:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800324e:	462a      	mov	r2, r5
 8003250:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003254:	4620      	mov	r0, r4
 8003256:	f7ff fc46 	bl	8002ae6 <I2C_WaitOnFlagUntilTimeout>
 800325a:	4681      	mov	r9, r0
 800325c:	2800      	cmp	r0, #0
 800325e:	d1e5      	bne.n	800322c <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003260:	2322      	movs	r3, #34	; 0x22
 8003262:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003266:	2340      	movs	r3, #64	; 0x40
 8003268:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 800326c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800326e:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003270:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8003272:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8003274:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003278:	9601      	str	r6, [sp, #4]
 800327a:	f8cd 8000 	str.w	r8, [sp]
 800327e:	465b      	mov	r3, fp
 8003280:	9a03      	ldr	r2, [sp, #12]
 8003282:	4639      	mov	r1, r7
 8003284:	4620      	mov	r0, r4
 8003286:	f7ff fcef 	bl	8002c68 <I2C_RequestMemoryRead>
 800328a:	b110      	cbz	r0, 8003292 <HAL_I2C_Mem_Read+0x96>
      __HAL_UNLOCK(hi2c);
 800328c:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 8003290:	e7cc      	b.n	800322c <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003292:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003294:	b29b      	uxth	r3, r3
 8003296:	2bff      	cmp	r3, #255	; 0xff
 8003298:	4b36      	ldr	r3, [pc, #216]	; (8003374 <HAL_I2C_Mem_Read+0x178>)
 800329a:	d958      	bls.n	800334e <HAL_I2C_Mem_Read+0x152>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800329c:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800329e:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032a0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80032a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80032a6:	4639      	mov	r1, r7
 80032a8:	4620      	mov	r0, r4
 80032aa:	f7ff fc02 	bl	8002ab2 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80032ae:	9600      	str	r6, [sp, #0]
 80032b0:	4643      	mov	r3, r8
 80032b2:	2200      	movs	r2, #0
 80032b4:	2104      	movs	r1, #4
 80032b6:	4620      	mov	r0, r4
 80032b8:	f7ff fc15 	bl	8002ae6 <I2C_WaitOnFlagUntilTimeout>
 80032bc:	2800      	cmp	r0, #0
 80032be:	d1b5      	bne.n	800322c <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80032c0:	6822      	ldr	r2, [r4, #0]
 80032c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032c6:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80032c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80032ca:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80032cc:	3301      	adds	r3, #1
 80032ce:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80032d0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80032d2:	3b01      	subs	r3, #1
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80032da:	3a01      	subs	r2, #1
 80032dc:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032de:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80032e0:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032e2:	b1ab      	cbz	r3, 8003310 <HAL_I2C_Mem_Read+0x114>
 80032e4:	b9a2      	cbnz	r2, 8003310 <HAL_I2C_Mem_Read+0x114>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032e6:	9600      	str	r6, [sp, #0]
 80032e8:	4643      	mov	r3, r8
 80032ea:	2180      	movs	r1, #128	; 0x80
 80032ec:	4620      	mov	r0, r4
 80032ee:	f7ff fbfa 	bl	8002ae6 <I2C_WaitOnFlagUntilTimeout>
 80032f2:	2800      	cmp	r0, #0
 80032f4:	d19a      	bne.n	800322c <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	2bff      	cmp	r3, #255	; 0xff
 80032fc:	d92f      	bls.n	800335e <HAL_I2C_Mem_Read+0x162>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032fe:	22ff      	movs	r2, #255	; 0xff
 8003300:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003302:	9000      	str	r0, [sp, #0]
 8003304:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003308:	4639      	mov	r1, r7
 800330a:	4620      	mov	r0, r4
 800330c:	f7ff fbd1 	bl	8002ab2 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8003310:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003312:	b29b      	uxth	r3, r3
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1ca      	bne.n	80032ae <HAL_I2C_Mem_Read+0xb2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003318:	4632      	mov	r2, r6
 800331a:	4641      	mov	r1, r8
 800331c:	4620      	mov	r0, r4
 800331e:	f7ff fcd5 	bl	8002ccc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003322:	2800      	cmp	r0, #0
 8003324:	d182      	bne.n	800322c <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003326:	6823      	ldr	r3, [r4, #0]
 8003328:	2120      	movs	r1, #32
 800332a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8003332:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8003336:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800333a:	f022 0201 	bic.w	r2, r2, #1
 800333e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003340:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003344:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003348:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800334c:	e76f      	b.n	800322e <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 800334e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003350:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8003352:	b292      	uxth	r2, r2
 8003354:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003356:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800335a:	b2d2      	uxtb	r2, r2
 800335c:	e7a3      	b.n	80032a6 <HAL_I2C_Mem_Read+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 800335e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003360:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8003362:	b292      	uxth	r2, r2
 8003364:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003366:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	e7cc      	b.n	8003308 <HAL_I2C_Mem_Read+0x10c>
    return HAL_BUSY;
 800336e:	2002      	movs	r0, #2
 8003370:	e75d      	b.n	800322e <HAL_I2C_Mem_Read+0x32>
 8003372:	bf00      	nop
 8003374:	80002400 	.word	0x80002400

08003378 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003378:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800337c:	b2d2      	uxtb	r2, r2
 800337e:	2a20      	cmp	r2, #32
{
 8003380:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003382:	d11d      	bne.n	80033c0 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003384:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003388:	2b01      	cmp	r3, #1
 800338a:	d019      	beq.n	80033c0 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800338c:	2324      	movs	r3, #36	; 0x24
 800338e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003392:	6803      	ldr	r3, [r0, #0]
 8003394:	681c      	ldr	r4, [r3, #0]
 8003396:	f024 0401 	bic.w	r4, r4, #1
 800339a:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800339c:	681c      	ldr	r4, [r3, #0]
 800339e:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80033a2:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80033a4:	681c      	ldr	r4, [r3, #0]
 80033a6:	4321      	orrs	r1, r4
 80033a8:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033aa:	6819      	ldr	r1, [r3, #0]
 80033ac:	f041 0101 	orr.w	r1, r1, #1
 80033b0:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033b2:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80033b4:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80033b8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80033bc:	4618      	mov	r0, r3
 80033be:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80033c0:	2002      	movs	r0, #2
  }
}
 80033c2:	bd10      	pop	{r4, pc}

080033c4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033c4:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033c6:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80033ca:	b2e4      	uxtb	r4, r4
 80033cc:	2c20      	cmp	r4, #32
 80033ce:	d11c      	bne.n	800340a <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033d0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d018      	beq.n	800340a <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033d8:	2324      	movs	r3, #36	; 0x24
 80033da:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033de:	6803      	ldr	r3, [r0, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	f022 0201 	bic.w	r2, r2, #1
 80033e6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80033e8:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80033ea:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80033ee:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80033f2:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	f042 0201 	orr.w	r2, r2, #1
 80033fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033fc:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80033fe:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003402:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8003406:	4618      	mov	r0, r3
 8003408:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 800340a:	2002      	movs	r0, #2
  }
}
 800340c:	bd10      	pop	{r4, pc}
	...

08003410 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim: LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8003410:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpcfgr = 0;

  /* Check the LPTIM handle allocation */
  if(hlptim == NULL)
 8003412:	4604      	mov	r4, r0
 8003414:	2800      	cmp	r0, #0
 8003416:	d047      	beq.n	80034a8 <HAL_LPTIM_Init+0x98>

#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if(hlptim->State == HAL_LPTIM_STATE_RESET)
 8003418:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 800341c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003420:	b91b      	cbnz	r3, 800342a <HAL_LPTIM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8003422:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8003426:	f002 ff59 	bl	80062dc <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800342a:	2302      	movs	r3, #2

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800342c:	6820      	ldr	r0, [r4, #0]

  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 800342e:	6865      	ldr	r5, [r4, #4]
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003430:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  tmpcfgr = hlptim->Instance->CFGR;
 8003434:	68c2      	ldr	r2, [r0, #12]
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
  }
  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 8003436:	6961      	ldr	r1, [r4, #20]
  {
    tmpcfgr &= (uint32_t)(~ (LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8003438:	4e1c      	ldr	r6, [pc, #112]	; (80034ac <HAL_LPTIM_Init+0x9c>)
  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 800343a:	2d01      	cmp	r5, #1
  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 800343c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8003440:	bf08      	it	eq
 8003442:	f022 021e 	biceq.w	r2, r2, #30
  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 8003446:	4299      	cmp	r1, r3
    tmpcfgr &= (uint32_t)(~ (LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8003448:	bf1c      	itt	ne
 800344a:	f422 4260 	bicne.w	r2, r2, #57344	; 0xe000
 800344e:	f022 02c0 	bicne.w	r2, r2, #192	; 0xc0
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8003452:	4016      	ands	r6, r2
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE ));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003454:	68a2      	ldr	r2, [r4, #8]
 8003456:	ea45 0302 	orr.w	r3, r5, r2
              hlptim->Init.Clock.Prescaler |
 800345a:	6a22      	ldr	r2, [r4, #32]
 800345c:	4313      	orrs	r3, r2
              hlptim->Init.OutputPolarity  |
 800345e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003460:	4313      	orrs	r3, r2
              hlptim->Init.UpdateMode      |
 8003462:	6aa2      	ldr	r2, [r4, #40]	; 0x28
              hlptim->Init.CounterSource);

  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 8003464:	2d01      	cmp	r5, #1
              hlptim->Init.UpdateMode      |
 8003466:	ea43 0302 	orr.w	r3, r3, r2
  {
    tmpcfgr |=  (hlptim->Init.UltraLowPowerClock.Polarity |
 800346a:	bf04      	itt	eq
 800346c:	6925      	ldreq	r5, [r4, #16]
 800346e:	68e2      	ldreq	r2, [r4, #12]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003470:	ea43 0306 	orr.w	r3, r3, r6
    tmpcfgr |=  (hlptim->Init.UltraLowPowerClock.Polarity |
 8003474:	bf04      	itt	eq
 8003476:	432a      	orreq	r2, r5
 8003478:	4313      	orreq	r3, r2
                hlptim->Init.UltraLowPowerClock.SampleTime);
  }

  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 800347a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800347e:	4291      	cmp	r1, r2
 8003480:	d004      	beq.n	800348c <HAL_LPTIM_Init+0x7c>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003482:	69a2      	ldr	r2, [r4, #24]
 8003484:	4311      	orrs	r1, r2
                hlptim->Init.Trigger.ActiveEdge |
 8003486:	69e2      	ldr	r2, [r4, #28]
 8003488:	4311      	orrs	r1, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800348a:	430b      	orrs	r3, r1
                hlptim->Init.Trigger.SampleTime);
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800348c:	60c3      	str	r3, [r0, #12]

  /* Configure LPTIM input sources */
  if(hlptim->Instance == LPTIM1)
 800348e:	4b08      	ldr	r3, [pc, #32]	; (80034b0 <HAL_LPTIM_Init+0xa0>)
 8003490:	4298      	cmp	r0, r3
    /* Check LPTIM1 Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance,hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance,hlptim->Init.Input2Source));

    /* Configure LPTIM1 Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8003492:	bf08      	it	eq
 8003494:	6b22      	ldreq	r2, [r4, #48]	; 0x30
 8003496:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003498:	bf08      	it	eq
 800349a:	4313      	orreq	r3, r2
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance,hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 800349c:	6203      	str	r3, [r0, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800349e:	2301      	movs	r3, #1
 80034a0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80034a4:	2000      	movs	r0, #0
 80034a6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80034a8:	2001      	movs	r0, #1
}
 80034aa:	bd70      	pop	{r4, r5, r6, pc}
 80034ac:	ff19f1fe 	.word	0xff19f1fe
 80034b0:	40007c00 	.word	0x40007c00

080034b4 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80034b4:	4b02      	ldr	r3, [pc, #8]	; (80034c0 <HAL_PWREx_GetVoltageRange+0xc>)
 80034b6:	6818      	ldr	r0, [r3, #0]
#endif
}
 80034b8:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	40007000 	.word	0x40007000

080034c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80034c4:	4b17      	ldr	r3, [pc, #92]	; (8003524 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80034c6:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034c8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80034cc:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034d0:	d11c      	bne.n	800350c <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80034d2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80034d6:	d015      	beq.n	8003504 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80034de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034e2:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034e4:	4a10      	ldr	r2, [pc, #64]	; (8003528 <HAL_PWREx_ControlVoltageScaling+0x64>)
 80034e6:	6811      	ldr	r1, [r2, #0]
 80034e8:	2232      	movs	r2, #50	; 0x32
 80034ea:	434a      	muls	r2, r1
 80034ec:	490f      	ldr	r1, [pc, #60]	; (800352c <HAL_PWREx_ControlVoltageScaling+0x68>)
 80034ee:	fbb2 f2f1 	udiv	r2, r2, r1
 80034f2:	4619      	mov	r1, r3
 80034f4:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034f6:	6958      	ldr	r0, [r3, #20]
 80034f8:	0540      	lsls	r0, r0, #21
 80034fa:	d500      	bpl.n	80034fe <HAL_PWREx_ControlVoltageScaling+0x3a>
 80034fc:	b922      	cbnz	r2, 8003508 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034fe:	694b      	ldr	r3, [r1, #20]
 8003500:	055b      	lsls	r3, r3, #21
 8003502:	d40d      	bmi.n	8003520 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003504:	2000      	movs	r0, #0
 8003506:	4770      	bx	lr
        wait_loop_index--;
 8003508:	3a01      	subs	r2, #1
 800350a:	e7f4      	b.n	80034f6 <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800350c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003510:	bf1f      	itttt	ne
 8003512:	681a      	ldrne	r2, [r3, #0]
 8003514:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8003518:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 800351c:	601a      	strne	r2, [r3, #0]
 800351e:	e7f1      	b.n	8003504 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8003520:	2003      	movs	r0, #3
}
 8003522:	4770      	bx	lr
 8003524:	40007000 	.word	0x40007000
 8003528:	20000000 	.word	0x20000000
 800352c:	000f4240 	.word	0x000f4240

08003530 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003530:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003532:	4d1e      	ldr	r5, [pc, #120]	; (80035ac <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8003534:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003536:	00da      	lsls	r2, r3, #3
{
 8003538:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800353a:	d518      	bpl.n	800356e <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800353c:	f7ff ffba 	bl	80034b4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003540:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003544:	d123      	bne.n	800358e <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003546:	2c80      	cmp	r4, #128	; 0x80
 8003548:	d929      	bls.n	800359e <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800354a:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800354c:	bf8c      	ite	hi
 800354e:	2002      	movhi	r0, #2
 8003550:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003552:	4a17      	ldr	r2, [pc, #92]	; (80035b0 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8003554:	6813      	ldr	r3, [r2, #0]
 8003556:	f023 0307 	bic.w	r3, r3, #7
 800355a:	4303      	orrs	r3, r0
 800355c:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800355e:	6813      	ldr	r3, [r2, #0]
 8003560:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8003564:	1a18      	subs	r0, r3, r0
 8003566:	bf18      	it	ne
 8003568:	2001      	movne	r0, #1
 800356a:	b003      	add	sp, #12
 800356c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800356e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003574:	65ab      	str	r3, [r5, #88]	; 0x58
 8003576:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357c:	9301      	str	r3, [sp, #4]
 800357e:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8003580:	f7ff ff98 	bl	80034b4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8003584:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003586:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800358a:	65ab      	str	r3, [r5, #88]	; 0x58
 800358c:	e7d8      	b.n	8003540 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 800358e:	2c80      	cmp	r4, #128	; 0x80
 8003590:	d807      	bhi.n	80035a2 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8003592:	d008      	beq.n	80035a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8003594:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8003598:	4258      	negs	r0, r3
 800359a:	4158      	adcs	r0, r3
 800359c:	e7d9      	b.n	8003552 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800359e:	2000      	movs	r0, #0
 80035a0:	e7d7      	b.n	8003552 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80035a2:	2003      	movs	r0, #3
 80035a4:	e7d5      	b.n	8003552 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80035a6:	2002      	movs	r0, #2
 80035a8:	e7d3      	b.n	8003552 <RCC_SetFlashLatencyFromMSIRange+0x22>
 80035aa:	bf00      	nop
 80035ac:	40021000 	.word	0x40021000
 80035b0:	40022000 	.word	0x40022000

080035b4 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035b4:	4b25      	ldr	r3, [pc, #148]	; (800364c <HAL_RCC_GetSysClockFreq+0x98>)
 80035b6:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035b8:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035ba:	f012 020c 	ands.w	r2, r2, #12
 80035be:	d005      	beq.n	80035cc <HAL_RCC_GetSysClockFreq+0x18>
 80035c0:	2a0c      	cmp	r2, #12
 80035c2:	d115      	bne.n	80035f0 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035c4:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80035c8:	2901      	cmp	r1, #1
 80035ca:	d118      	bne.n	80035fe <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80035cc:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 80035ce:	4820      	ldr	r0, [pc, #128]	; (8003650 <HAL_RCC_GetSysClockFreq+0x9c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80035d0:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80035d2:	bf55      	itete	pl
 80035d4:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80035d8:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80035da:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80035de:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 80035e2:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035e6:	b382      	cbz	r2, 800364a <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80035e8:	2a0c      	cmp	r2, #12
 80035ea:	d009      	beq.n	8003600 <HAL_RCC_GetSysClockFreq+0x4c>
 80035ec:	2000      	movs	r0, #0
  return sysclockfreq;
 80035ee:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80035f0:	2a04      	cmp	r2, #4
 80035f2:	d029      	beq.n	8003648 <HAL_RCC_GetSysClockFreq+0x94>
 80035f4:	2a08      	cmp	r2, #8
 80035f6:	4817      	ldr	r0, [pc, #92]	; (8003654 <HAL_RCC_GetSysClockFreq+0xa0>)
 80035f8:	bf18      	it	ne
 80035fa:	2000      	movne	r0, #0
 80035fc:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80035fe:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003600:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003602:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003604:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003608:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (pllsource)
 800360c:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800360e:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 8003612:	d005      	beq.n	8003620 <HAL_RCC_GetSysClockFreq+0x6c>
 8003614:	2903      	cmp	r1, #3
 8003616:	d012      	beq.n	800363e <HAL_RCC_GetSysClockFreq+0x8a>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003618:	68d9      	ldr	r1, [r3, #12]
 800361a:	f3c1 2106 	ubfx	r1, r1, #8, #7
 800361e:	e003      	b.n	8003628 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003620:	68d9      	ldr	r1, [r3, #12]
 8003622:	480d      	ldr	r0, [pc, #52]	; (8003658 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003624:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003628:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800362a:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800362e:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8003632:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003634:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003636:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8003638:	fbb0 f0f3 	udiv	r0, r0, r3
 800363c:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800363e:	68d9      	ldr	r1, [r3, #12]
 8003640:	4804      	ldr	r0, [pc, #16]	; (8003654 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003642:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8003646:	e7ef      	b.n	8003628 <HAL_RCC_GetSysClockFreq+0x74>
    sysclockfreq = HSI_VALUE;
 8003648:	4803      	ldr	r0, [pc, #12]	; (8003658 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 800364a:	4770      	bx	lr
 800364c:	40021000 	.word	0x40021000
 8003650:	0800a818 	.word	0x0800a818
 8003654:	007a1200 	.word	0x007a1200
 8003658:	00f42400 	.word	0x00f42400

0800365c <HAL_RCC_OscConfig>:
{
 800365c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8003660:	4605      	mov	r5, r0
 8003662:	b918      	cbnz	r0, 800366c <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8003664:	2001      	movs	r0, #1
}
 8003666:	b003      	add	sp, #12
 8003668:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800366c:	4ca5      	ldr	r4, [pc, #660]	; (8003904 <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800366e:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003670:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003672:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003674:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003676:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800367a:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800367e:	d53c      	bpl.n	80036fa <HAL_RCC_OscConfig+0x9e>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003680:	b11e      	cbz	r6, 800368a <HAL_RCC_OscConfig+0x2e>
 8003682:	2e0c      	cmp	r6, #12
 8003684:	d163      	bne.n	800374e <HAL_RCC_OscConfig+0xf2>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003686:	2f01      	cmp	r7, #1
 8003688:	d161      	bne.n	800374e <HAL_RCC_OscConfig+0xf2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800368a:	6823      	ldr	r3, [r4, #0]
 800368c:	0798      	lsls	r0, r3, #30
 800368e:	d502      	bpl.n	8003696 <HAL_RCC_OscConfig+0x3a>
 8003690:	69ab      	ldr	r3, [r5, #24]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0e6      	beq.n	8003664 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003696:	6823      	ldr	r3, [r4, #0]
 8003698:	6a28      	ldr	r0, [r5, #32]
 800369a:	0719      	lsls	r1, r3, #28
 800369c:	bf56      	itet	pl
 800369e:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 80036a2:	6823      	ldrmi	r3, [r4, #0]
 80036a4:	091b      	lsrpl	r3, r3, #4
 80036a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036aa:	4283      	cmp	r3, r0
 80036ac:	d23a      	bcs.n	8003724 <HAL_RCC_OscConfig+0xc8>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036ae:	f7ff ff3f 	bl	8003530 <RCC_SetFlashLatencyFromMSIRange>
 80036b2:	2800      	cmp	r0, #0
 80036b4:	d1d6      	bne.n	8003664 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036b6:	6823      	ldr	r3, [r4, #0]
 80036b8:	f043 0308 	orr.w	r3, r3, #8
 80036bc:	6023      	str	r3, [r4, #0]
 80036be:	6823      	ldr	r3, [r4, #0]
 80036c0:	6a2a      	ldr	r2, [r5, #32]
 80036c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036c6:	4313      	orrs	r3, r2
 80036c8:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036ca:	6863      	ldr	r3, [r4, #4]
 80036cc:	69ea      	ldr	r2, [r5, #28]
 80036ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80036d6:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036d8:	f7ff ff6c 	bl	80035b4 <HAL_RCC_GetSysClockFreq>
 80036dc:	68a3      	ldr	r3, [r4, #8]
 80036de:	4a8a      	ldr	r2, [pc, #552]	; (8003908 <HAL_RCC_OscConfig+0x2ac>)
 80036e0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80036e4:	5cd3      	ldrb	r3, [r2, r3]
 80036e6:	f003 031f 	and.w	r3, r3, #31
 80036ea:	40d8      	lsrs	r0, r3
 80036ec:	4b87      	ldr	r3, [pc, #540]	; (800390c <HAL_RCC_OscConfig+0x2b0>)
 80036ee:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80036f0:	2000      	movs	r0, #0
 80036f2:	f7fe fbc7 	bl	8001e84 <HAL_InitTick>
        if(status != HAL_OK)
 80036f6:	2800      	cmp	r0, #0
 80036f8:	d1b5      	bne.n	8003666 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036fa:	682b      	ldr	r3, [r5, #0]
 80036fc:	07d8      	lsls	r0, r3, #31
 80036fe:	d45d      	bmi.n	80037bc <HAL_RCC_OscConfig+0x160>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003700:	682b      	ldr	r3, [r5, #0]
 8003702:	0799      	lsls	r1, r3, #30
 8003704:	f100 809c 	bmi.w	8003840 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003708:	682b      	ldr	r3, [r5, #0]
 800370a:	0718      	lsls	r0, r3, #28
 800370c:	f100 80d0 	bmi.w	80038b0 <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003710:	682b      	ldr	r3, [r5, #0]
 8003712:	0759      	lsls	r1, r3, #29
 8003714:	f100 80fc 	bmi.w	8003910 <HAL_RCC_OscConfig+0x2b4>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003718:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800371a:	2b00      	cmp	r3, #0
 800371c:	f040 8165 	bne.w	80039ea <HAL_RCC_OscConfig+0x38e>
  return HAL_OK;
 8003720:	2000      	movs	r0, #0
 8003722:	e7a0      	b.n	8003666 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003724:	6823      	ldr	r3, [r4, #0]
 8003726:	f043 0308 	orr.w	r3, r3, #8
 800372a:	6023      	str	r3, [r4, #0]
 800372c:	6823      	ldr	r3, [r4, #0]
 800372e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003732:	4303      	orrs	r3, r0
 8003734:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003736:	6863      	ldr	r3, [r4, #4]
 8003738:	69ea      	ldr	r2, [r5, #28]
 800373a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800373e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003742:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003744:	f7ff fef4 	bl	8003530 <RCC_SetFlashLatencyFromMSIRange>
 8003748:	2800      	cmp	r0, #0
 800374a:	d0c5      	beq.n	80036d8 <HAL_RCC_OscConfig+0x7c>
 800374c:	e78a      	b.n	8003664 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800374e:	69ab      	ldr	r3, [r5, #24]
 8003750:	b31b      	cbz	r3, 800379a <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_MSI_ENABLE();
 8003752:	6823      	ldr	r3, [r4, #0]
 8003754:	f043 0301 	orr.w	r3, r3, #1
 8003758:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800375a:	f7fe fbc9 	bl	8001ef0 <HAL_GetTick>
 800375e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003760:	6823      	ldr	r3, [r4, #0]
 8003762:	079a      	lsls	r2, r3, #30
 8003764:	d511      	bpl.n	800378a <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003766:	6823      	ldr	r3, [r4, #0]
 8003768:	f043 0308 	orr.w	r3, r3, #8
 800376c:	6023      	str	r3, [r4, #0]
 800376e:	6823      	ldr	r3, [r4, #0]
 8003770:	6a2a      	ldr	r2, [r5, #32]
 8003772:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003776:	4313      	orrs	r3, r2
 8003778:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800377a:	6863      	ldr	r3, [r4, #4]
 800377c:	69ea      	ldr	r2, [r5, #28]
 800377e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003782:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003786:	6063      	str	r3, [r4, #4]
 8003788:	e7b7      	b.n	80036fa <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800378a:	f7fe fbb1 	bl	8001ef0 <HAL_GetTick>
 800378e:	eba0 0008 	sub.w	r0, r0, r8
 8003792:	2802      	cmp	r0, #2
 8003794:	d9e4      	bls.n	8003760 <HAL_RCC_OscConfig+0x104>
            return HAL_TIMEOUT;
 8003796:	2003      	movs	r0, #3
 8003798:	e765      	b.n	8003666 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 800379a:	6823      	ldr	r3, [r4, #0]
 800379c:	f023 0301 	bic.w	r3, r3, #1
 80037a0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80037a2:	f7fe fba5 	bl	8001ef0 <HAL_GetTick>
 80037a6:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80037a8:	6823      	ldr	r3, [r4, #0]
 80037aa:	079b      	lsls	r3, r3, #30
 80037ac:	d5a5      	bpl.n	80036fa <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037ae:	f7fe fb9f 	bl	8001ef0 <HAL_GetTick>
 80037b2:	eba0 0008 	sub.w	r0, r0, r8
 80037b6:	2802      	cmp	r0, #2
 80037b8:	d9f6      	bls.n	80037a8 <HAL_RCC_OscConfig+0x14c>
 80037ba:	e7ec      	b.n	8003796 <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80037bc:	2e08      	cmp	r6, #8
 80037be:	d003      	beq.n	80037c8 <HAL_RCC_OscConfig+0x16c>
 80037c0:	2e0c      	cmp	r6, #12
 80037c2:	d108      	bne.n	80037d6 <HAL_RCC_OscConfig+0x17a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 80037c4:	2f03      	cmp	r7, #3
 80037c6:	d106      	bne.n	80037d6 <HAL_RCC_OscConfig+0x17a>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c8:	6823      	ldr	r3, [r4, #0]
 80037ca:	039a      	lsls	r2, r3, #14
 80037cc:	d598      	bpl.n	8003700 <HAL_RCC_OscConfig+0xa4>
 80037ce:	686b      	ldr	r3, [r5, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d195      	bne.n	8003700 <HAL_RCC_OscConfig+0xa4>
 80037d4:	e746      	b.n	8003664 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037d6:	686b      	ldr	r3, [r5, #4]
 80037d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037dc:	d110      	bne.n	8003800 <HAL_RCC_OscConfig+0x1a4>
 80037de:	6823      	ldr	r3, [r4, #0]
 80037e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037e4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80037e6:	f7fe fb83 	bl	8001ef0 <HAL_GetTick>
 80037ea:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037ec:	6823      	ldr	r3, [r4, #0]
 80037ee:	039b      	lsls	r3, r3, #14
 80037f0:	d486      	bmi.n	8003700 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037f2:	f7fe fb7d 	bl	8001ef0 <HAL_GetTick>
 80037f6:	eba0 0008 	sub.w	r0, r0, r8
 80037fa:	2864      	cmp	r0, #100	; 0x64
 80037fc:	d9f6      	bls.n	80037ec <HAL_RCC_OscConfig+0x190>
 80037fe:	e7ca      	b.n	8003796 <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003800:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003804:	d104      	bne.n	8003810 <HAL_RCC_OscConfig+0x1b4>
 8003806:	6823      	ldr	r3, [r4, #0]
 8003808:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800380c:	6023      	str	r3, [r4, #0]
 800380e:	e7e6      	b.n	80037de <HAL_RCC_OscConfig+0x182>
 8003810:	6822      	ldr	r2, [r4, #0]
 8003812:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003816:	6022      	str	r2, [r4, #0]
 8003818:	6822      	ldr	r2, [r4, #0]
 800381a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800381e:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1e0      	bne.n	80037e6 <HAL_RCC_OscConfig+0x18a>
        tickstart = HAL_GetTick();
 8003824:	f7fe fb64 	bl	8001ef0 <HAL_GetTick>
 8003828:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800382a:	6823      	ldr	r3, [r4, #0]
 800382c:	0398      	lsls	r0, r3, #14
 800382e:	f57f af67 	bpl.w	8003700 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003832:	f7fe fb5d 	bl	8001ef0 <HAL_GetTick>
 8003836:	eba0 0008 	sub.w	r0, r0, r8
 800383a:	2864      	cmp	r0, #100	; 0x64
 800383c:	d9f5      	bls.n	800382a <HAL_RCC_OscConfig+0x1ce>
 800383e:	e7aa      	b.n	8003796 <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003840:	2e04      	cmp	r6, #4
 8003842:	d003      	beq.n	800384c <HAL_RCC_OscConfig+0x1f0>
 8003844:	2e0c      	cmp	r6, #12
 8003846:	d110      	bne.n	800386a <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8003848:	2f02      	cmp	r7, #2
 800384a:	d10e      	bne.n	800386a <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800384c:	6823      	ldr	r3, [r4, #0]
 800384e:	0559      	lsls	r1, r3, #21
 8003850:	d503      	bpl.n	800385a <HAL_RCC_OscConfig+0x1fe>
 8003852:	68eb      	ldr	r3, [r5, #12]
 8003854:	2b00      	cmp	r3, #0
 8003856:	f43f af05 	beq.w	8003664 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800385a:	6863      	ldr	r3, [r4, #4]
 800385c:	692a      	ldr	r2, [r5, #16]
 800385e:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8003862:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003866:	6063      	str	r3, [r4, #4]
 8003868:	e74e      	b.n	8003708 <HAL_RCC_OscConfig+0xac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800386a:	68eb      	ldr	r3, [r5, #12]
 800386c:	b17b      	cbz	r3, 800388e <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 800386e:	6823      	ldr	r3, [r4, #0]
 8003870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003874:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003876:	f7fe fb3b 	bl	8001ef0 <HAL_GetTick>
 800387a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800387c:	6823      	ldr	r3, [r4, #0]
 800387e:	055a      	lsls	r2, r3, #21
 8003880:	d4eb      	bmi.n	800385a <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003882:	f7fe fb35 	bl	8001ef0 <HAL_GetTick>
 8003886:	1bc0      	subs	r0, r0, r7
 8003888:	2802      	cmp	r0, #2
 800388a:	d9f7      	bls.n	800387c <HAL_RCC_OscConfig+0x220>
 800388c:	e783      	b.n	8003796 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_DISABLE();
 800388e:	6823      	ldr	r3, [r4, #0]
 8003890:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003894:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003896:	f7fe fb2b 	bl	8001ef0 <HAL_GetTick>
 800389a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800389c:	6823      	ldr	r3, [r4, #0]
 800389e:	055b      	lsls	r3, r3, #21
 80038a0:	f57f af32 	bpl.w	8003708 <HAL_RCC_OscConfig+0xac>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038a4:	f7fe fb24 	bl	8001ef0 <HAL_GetTick>
 80038a8:	1bc0      	subs	r0, r0, r7
 80038aa:	2802      	cmp	r0, #2
 80038ac:	d9f6      	bls.n	800389c <HAL_RCC_OscConfig+0x240>
 80038ae:	e772      	b.n	8003796 <HAL_RCC_OscConfig+0x13a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038b0:	696b      	ldr	r3, [r5, #20]
 80038b2:	b19b      	cbz	r3, 80038dc <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 80038b4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80038b8:	f043 0301 	orr.w	r3, r3, #1
 80038bc:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80038c0:	f7fe fb16 	bl	8001ef0 <HAL_GetTick>
 80038c4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038c6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80038ca:	079a      	lsls	r2, r3, #30
 80038cc:	f53f af20 	bmi.w	8003710 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038d0:	f7fe fb0e 	bl	8001ef0 <HAL_GetTick>
 80038d4:	1bc0      	subs	r0, r0, r7
 80038d6:	2802      	cmp	r0, #2
 80038d8:	d9f5      	bls.n	80038c6 <HAL_RCC_OscConfig+0x26a>
 80038da:	e75c      	b.n	8003796 <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_LSI_DISABLE();
 80038dc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80038e0:	f023 0301 	bic.w	r3, r3, #1
 80038e4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80038e8:	f7fe fb02 	bl	8001ef0 <HAL_GetTick>
 80038ec:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038ee:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80038f2:	079b      	lsls	r3, r3, #30
 80038f4:	f57f af0c 	bpl.w	8003710 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038f8:	f7fe fafa 	bl	8001ef0 <HAL_GetTick>
 80038fc:	1bc0      	subs	r0, r0, r7
 80038fe:	2802      	cmp	r0, #2
 8003900:	d9f5      	bls.n	80038ee <HAL_RCC_OscConfig+0x292>
 8003902:	e748      	b.n	8003796 <HAL_RCC_OscConfig+0x13a>
 8003904:	40021000 	.word	0x40021000
 8003908:	0800a800 	.word	0x0800a800
 800390c:	20000000 	.word	0x20000000
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003910:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003912:	00d8      	lsls	r0, r3, #3
 8003914:	d429      	bmi.n	800396a <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003916:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800391c:	65a3      	str	r3, [r4, #88]	; 0x58
 800391e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003924:	9301      	str	r3, [sp, #4]
 8003926:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003928:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800392c:	4f5d      	ldr	r7, [pc, #372]	; (8003aa4 <HAL_RCC_OscConfig+0x448>)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	05d9      	lsls	r1, r3, #23
 8003932:	d51d      	bpl.n	8003970 <HAL_RCC_OscConfig+0x314>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003934:	68ab      	ldr	r3, [r5, #8]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d12b      	bne.n	8003992 <HAL_RCC_OscConfig+0x336>
 800393a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800393e:	f043 0301 	orr.w	r3, r3, #1
 8003942:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8003946:	f7fe fad3 	bl	8001ef0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800394a:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800394e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003950:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003954:	079b      	lsls	r3, r3, #30
 8003956:	d542      	bpl.n	80039de <HAL_RCC_OscConfig+0x382>
    if(pwrclkchanged == SET)
 8003958:	f1b8 0f00 	cmp.w	r8, #0
 800395c:	f43f aedc 	beq.w	8003718 <HAL_RCC_OscConfig+0xbc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003960:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003962:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003966:	65a3      	str	r3, [r4, #88]	; 0x58
 8003968:	e6d6      	b.n	8003718 <HAL_RCC_OscConfig+0xbc>
    FlagStatus       pwrclkchanged = RESET;
 800396a:	f04f 0800 	mov.w	r8, #0
 800396e:	e7dd      	b.n	800392c <HAL_RCC_OscConfig+0x2d0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003976:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8003978:	f7fe faba 	bl	8001ef0 <HAL_GetTick>
 800397c:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	05da      	lsls	r2, r3, #23
 8003982:	d4d7      	bmi.n	8003934 <HAL_RCC_OscConfig+0x2d8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003984:	f7fe fab4 	bl	8001ef0 <HAL_GetTick>
 8003988:	eba0 0009 	sub.w	r0, r0, r9
 800398c:	2802      	cmp	r0, #2
 800398e:	d9f6      	bls.n	800397e <HAL_RCC_OscConfig+0x322>
 8003990:	e701      	b.n	8003796 <HAL_RCC_OscConfig+0x13a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003992:	2b05      	cmp	r3, #5
 8003994:	d106      	bne.n	80039a4 <HAL_RCC_OscConfig+0x348>
 8003996:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800399a:	f043 0304 	orr.w	r3, r3, #4
 800399e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80039a2:	e7ca      	b.n	800393a <HAL_RCC_OscConfig+0x2de>
 80039a4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80039a8:	f022 0201 	bic.w	r2, r2, #1
 80039ac:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 80039b0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80039b4:	f022 0204 	bic.w	r2, r2, #4
 80039b8:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1c2      	bne.n	8003946 <HAL_RCC_OscConfig+0x2ea>
      tickstart = HAL_GetTick();
 80039c0:	f7fe fa96 	bl	8001ef0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039c4:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80039c8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039ca:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80039ce:	0798      	lsls	r0, r3, #30
 80039d0:	d5c2      	bpl.n	8003958 <HAL_RCC_OscConfig+0x2fc>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039d2:	f7fe fa8d 	bl	8001ef0 <HAL_GetTick>
 80039d6:	1bc0      	subs	r0, r0, r7
 80039d8:	4548      	cmp	r0, r9
 80039da:	d9f6      	bls.n	80039ca <HAL_RCC_OscConfig+0x36e>
 80039dc:	e6db      	b.n	8003796 <HAL_RCC_OscConfig+0x13a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039de:	f7fe fa87 	bl	8001ef0 <HAL_GetTick>
 80039e2:	1bc0      	subs	r0, r0, r7
 80039e4:	4548      	cmp	r0, r9
 80039e6:	d9b3      	bls.n	8003950 <HAL_RCC_OscConfig+0x2f4>
 80039e8:	e6d5      	b.n	8003796 <HAL_RCC_OscConfig+0x13a>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039ea:	2e0c      	cmp	r6, #12
 80039ec:	f43f ae3a 	beq.w	8003664 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80039f0:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 80039f2:	6823      	ldr	r3, [r4, #0]
 80039f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039f8:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80039fa:	d137      	bne.n	8003a6c <HAL_RCC_OscConfig+0x410>
        tickstart = HAL_GetTick();
 80039fc:	f7fe fa78 	bl	8001ef0 <HAL_GetTick>
 8003a00:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a02:	6823      	ldr	r3, [r4, #0]
 8003a04:	0199      	lsls	r1, r3, #6
 8003a06:	d42b      	bmi.n	8003a60 <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a08:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003a0a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003a0c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003a10:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8003a12:	3a01      	subs	r2, #1
 8003a14:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003a18:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8003a1a:	0912      	lsrs	r2, r2, #4
 8003a1c:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8003a20:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8003a22:	0852      	lsrs	r2, r2, #1
 8003a24:	3a01      	subs	r2, #1
 8003a26:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8003a2a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003a2c:	0852      	lsrs	r2, r2, #1
 8003a2e:	3a01      	subs	r2, #1
 8003a30:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8003a34:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8003a36:	6823      	ldr	r3, [r4, #0]
 8003a38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a3c:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a3e:	68e3      	ldr	r3, [r4, #12]
 8003a40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a44:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8003a46:	f7fe fa53 	bl	8001ef0 <HAL_GetTick>
 8003a4a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a4c:	6823      	ldr	r3, [r4, #0]
 8003a4e:	019a      	lsls	r2, r3, #6
 8003a50:	f53f ae66 	bmi.w	8003720 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a54:	f7fe fa4c 	bl	8001ef0 <HAL_GetTick>
 8003a58:	1b40      	subs	r0, r0, r5
 8003a5a:	2802      	cmp	r0, #2
 8003a5c:	d9f6      	bls.n	8003a4c <HAL_RCC_OscConfig+0x3f0>
 8003a5e:	e69a      	b.n	8003796 <HAL_RCC_OscConfig+0x13a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a60:	f7fe fa46 	bl	8001ef0 <HAL_GetTick>
 8003a64:	1b80      	subs	r0, r0, r6
 8003a66:	2802      	cmp	r0, #2
 8003a68:	d9cb      	bls.n	8003a02 <HAL_RCC_OscConfig+0x3a6>
 8003a6a:	e694      	b.n	8003796 <HAL_RCC_OscConfig+0x13a>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003a6c:	6823      	ldr	r3, [r4, #0]
 8003a6e:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003a72:	bf02      	ittt	eq
 8003a74:	68e3      	ldreq	r3, [r4, #12]
 8003a76:	f023 0303 	biceq.w	r3, r3, #3
 8003a7a:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003a7c:	68e3      	ldr	r3, [r4, #12]
 8003a7e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003a82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a86:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8003a88:	f7fe fa32 	bl	8001ef0 <HAL_GetTick>
 8003a8c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a8e:	6823      	ldr	r3, [r4, #0]
 8003a90:	019b      	lsls	r3, r3, #6
 8003a92:	f57f ae45 	bpl.w	8003720 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a96:	f7fe fa2b 	bl	8001ef0 <HAL_GetTick>
 8003a9a:	1b40      	subs	r0, r0, r5
 8003a9c:	2802      	cmp	r0, #2
 8003a9e:	d9f6      	bls.n	8003a8e <HAL_RCC_OscConfig+0x432>
 8003aa0:	e679      	b.n	8003796 <HAL_RCC_OscConfig+0x13a>
 8003aa2:	bf00      	nop
 8003aa4:	40007000 	.word	0x40007000

08003aa8 <HAL_RCC_ClockConfig>:
{
 8003aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003aac:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8003aae:	4604      	mov	r4, r0
 8003ab0:	b910      	cbnz	r0, 8003ab8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003ab2:	2001      	movs	r0, #1
 8003ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ab8:	4a40      	ldr	r2, [pc, #256]	; (8003bbc <HAL_RCC_ClockConfig+0x114>)
 8003aba:	6813      	ldr	r3, [r2, #0]
 8003abc:	f003 0307 	and.w	r3, r3, #7
 8003ac0:	428b      	cmp	r3, r1
 8003ac2:	d329      	bcc.n	8003b18 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ac4:	6823      	ldr	r3, [r4, #0]
 8003ac6:	07d9      	lsls	r1, r3, #31
 8003ac8:	d431      	bmi.n	8003b2e <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aca:	6821      	ldr	r1, [r4, #0]
 8003acc:	078a      	lsls	r2, r1, #30
 8003ace:	d45b      	bmi.n	8003b88 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ad0:	4a3a      	ldr	r2, [pc, #232]	; (8003bbc <HAL_RCC_ClockConfig+0x114>)
 8003ad2:	6813      	ldr	r3, [r2, #0]
 8003ad4:	f003 0307 	and.w	r3, r3, #7
 8003ad8:	429e      	cmp	r6, r3
 8003ada:	d35d      	bcc.n	8003b98 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003adc:	f011 0f04 	tst.w	r1, #4
 8003ae0:	4d37      	ldr	r5, [pc, #220]	; (8003bc0 <HAL_RCC_ClockConfig+0x118>)
 8003ae2:	d164      	bne.n	8003bae <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ae4:	070b      	lsls	r3, r1, #28
 8003ae6:	d506      	bpl.n	8003af6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ae8:	68ab      	ldr	r3, [r5, #8]
 8003aea:	6922      	ldr	r2, [r4, #16]
 8003aec:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003af0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003af4:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003af6:	f7ff fd5d 	bl	80035b4 <HAL_RCC_GetSysClockFreq>
 8003afa:	68ab      	ldr	r3, [r5, #8]
 8003afc:	4a31      	ldr	r2, [pc, #196]	; (8003bc4 <HAL_RCC_ClockConfig+0x11c>)
 8003afe:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8003b02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b06:	5cd3      	ldrb	r3, [r2, r3]
 8003b08:	f003 031f 	and.w	r3, r3, #31
 8003b0c:	40d8      	lsrs	r0, r3
 8003b0e:	4b2e      	ldr	r3, [pc, #184]	; (8003bc8 <HAL_RCC_ClockConfig+0x120>)
 8003b10:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8003b12:	2000      	movs	r0, #0
 8003b14:	f7fe b9b6 	b.w	8001e84 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b18:	6813      	ldr	r3, [r2, #0]
 8003b1a:	f023 0307 	bic.w	r3, r3, #7
 8003b1e:	430b      	orrs	r3, r1
 8003b20:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b22:	6813      	ldr	r3, [r2, #0]
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	4299      	cmp	r1, r3
 8003b2a:	d1c2      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xa>
 8003b2c:	e7ca      	b.n	8003ac4 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b2e:	6862      	ldr	r2, [r4, #4]
 8003b30:	4d23      	ldr	r5, [pc, #140]	; (8003bc0 <HAL_RCC_ClockConfig+0x118>)
 8003b32:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b34:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b36:	d11b      	bne.n	8003b70 <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b38:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b3c:	d0b9      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b3e:	68ab      	ldr	r3, [r5, #8]
 8003b40:	f023 0303 	bic.w	r3, r3, #3
 8003b44:	4313      	orrs	r3, r2
 8003b46:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8003b48:	f7fe f9d2 	bl	8001ef0 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b4c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003b50:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b52:	68ab      	ldr	r3, [r5, #8]
 8003b54:	6862      	ldr	r2, [r4, #4]
 8003b56:	f003 030c 	and.w	r3, r3, #12
 8003b5a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003b5e:	d0b4      	beq.n	8003aca <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b60:	f7fe f9c6 	bl	8001ef0 <HAL_GetTick>
 8003b64:	1bc0      	subs	r0, r0, r7
 8003b66:	4540      	cmp	r0, r8
 8003b68:	d9f3      	bls.n	8003b52 <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 8003b6a:	2003      	movs	r0, #3
}
 8003b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b70:	2a02      	cmp	r2, #2
 8003b72:	d102      	bne.n	8003b7a <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b74:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003b78:	e7e0      	b.n	8003b3c <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b7a:	b912      	cbnz	r2, 8003b82 <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b7c:	f013 0f02 	tst.w	r3, #2
 8003b80:	e7dc      	b.n	8003b3c <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b82:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003b86:	e7d9      	b.n	8003b3c <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b88:	4a0d      	ldr	r2, [pc, #52]	; (8003bc0 <HAL_RCC_ClockConfig+0x118>)
 8003b8a:	68a0      	ldr	r0, [r4, #8]
 8003b8c:	6893      	ldr	r3, [r2, #8]
 8003b8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b92:	4303      	orrs	r3, r0
 8003b94:	6093      	str	r3, [r2, #8]
 8003b96:	e79b      	b.n	8003ad0 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b98:	6813      	ldr	r3, [r2, #0]
 8003b9a:	f023 0307 	bic.w	r3, r3, #7
 8003b9e:	4333      	orrs	r3, r6
 8003ba0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba2:	6813      	ldr	r3, [r2, #0]
 8003ba4:	f003 0307 	and.w	r3, r3, #7
 8003ba8:	429e      	cmp	r6, r3
 8003baa:	d182      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xa>
 8003bac:	e796      	b.n	8003adc <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bae:	68ab      	ldr	r3, [r5, #8]
 8003bb0:	68e2      	ldr	r2, [r4, #12]
 8003bb2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	60ab      	str	r3, [r5, #8]
 8003bba:	e793      	b.n	8003ae4 <HAL_RCC_ClockConfig+0x3c>
 8003bbc:	40022000 	.word	0x40022000
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	0800a800 	.word	0x0800a800
 8003bc8:	20000000 	.word	0x20000000

08003bcc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003bcc:	4b05      	ldr	r3, [pc, #20]	; (8003be4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003bce:	4a06      	ldr	r2, [pc, #24]	; (8003be8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003bd6:	5cd3      	ldrb	r3, [r2, r3]
 8003bd8:	4a04      	ldr	r2, [pc, #16]	; (8003bec <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bda:	6810      	ldr	r0, [r2, #0]
 8003bdc:	f003 031f 	and.w	r3, r3, #31
}
 8003be0:	40d8      	lsrs	r0, r3
 8003be2:	4770      	bx	lr
 8003be4:	40021000 	.word	0x40021000
 8003be8:	0800a810 	.word	0x0800a810
 8003bec:	20000000 	.word	0x20000000

08003bf0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003bf0:	4b05      	ldr	r3, [pc, #20]	; (8003c08 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003bf2:	4a06      	ldr	r2, [pc, #24]	; (8003c0c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003bfa:	5cd3      	ldrb	r3, [r2, r3]
 8003bfc:	4a04      	ldr	r2, [pc, #16]	; (8003c10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bfe:	6810      	ldr	r0, [r2, #0]
 8003c00:	f003 031f 	and.w	r3, r3, #31
}
 8003c04:	40d8      	lsrs	r0, r3
 8003c06:	4770      	bx	lr
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	0800a810 	.word	0x0800a810
 8003c10:	20000000 	.word	0x20000000

08003c14 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c16:	4b45      	ldr	r3, [pc, #276]	; (8003d2c <RCCEx_PLLSAI1_Config+0x118>)
 8003c18:	68da      	ldr	r2, [r3, #12]
 8003c1a:	f012 0f03 	tst.w	r2, #3
{
 8003c1e:	4605      	mov	r5, r0
 8003c20:	460e      	mov	r6, r1
 8003c22:	461c      	mov	r4, r3
 8003c24:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c26:	d02a      	beq.n	8003c7e <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c28:	68da      	ldr	r2, [r3, #12]
 8003c2a:	f002 0203 	and.w	r2, r2, #3
 8003c2e:	4282      	cmp	r2, r0
 8003c30:	d13c      	bne.n	8003cac <RCCEx_PLLSAI1_Config+0x98>
       ||
 8003c32:	2a00      	cmp	r2, #0
 8003c34:	d03a      	beq.n	8003cac <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003c36:	68db      	ldr	r3, [r3, #12]
       ||
 8003c38:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003c3a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003c3e:	3301      	adds	r3, #1
       ||
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d133      	bne.n	8003cac <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c44:	6823      	ldr	r3, [r4, #0]
 8003c46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c4a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c4c:	f7fe f950 	bl	8001ef0 <HAL_GetTick>
 8003c50:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c52:	6823      	ldr	r3, [r4, #0]
 8003c54:	011a      	lsls	r2, r3, #4
 8003c56:	d432      	bmi.n	8003cbe <RCCEx_PLLSAI1_Config+0xaa>
 8003c58:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c5a:	2e00      	cmp	r6, #0
 8003c5c:	d036      	beq.n	8003ccc <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c5e:	2e01      	cmp	r6, #1
 8003c60:	d150      	bne.n	8003d04 <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c62:	6922      	ldr	r2, [r4, #16]
 8003c64:	6928      	ldr	r0, [r5, #16]
 8003c66:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003c6a:	0840      	lsrs	r0, r0, #1
 8003c6c:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8003c70:	3801      	subs	r0, #1
 8003c72:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8003c76:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8003c7a:	6122      	str	r2, [r4, #16]
 8003c7c:	e032      	b.n	8003ce4 <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 8003c7e:	2802      	cmp	r0, #2
 8003c80:	d010      	beq.n	8003ca4 <RCCEx_PLLSAI1_Config+0x90>
 8003c82:	2803      	cmp	r0, #3
 8003c84:	d014      	beq.n	8003cb0 <RCCEx_PLLSAI1_Config+0x9c>
 8003c86:	2801      	cmp	r0, #1
 8003c88:	d110      	bne.n	8003cac <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	079f      	lsls	r7, r3, #30
 8003c8e:	d538      	bpl.n	8003d02 <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c90:	68e3      	ldr	r3, [r4, #12]
 8003c92:	686a      	ldr	r2, [r5, #4]
 8003c94:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8003c98:	3a01      	subs	r2, #1
 8003c9a:	4318      	orrs	r0, r3
 8003c9c:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8003ca0:	60e0      	str	r0, [r4, #12]
 8003ca2:	e7cf      	b.n	8003c44 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003caa:	d1f1      	bne.n	8003c90 <RCCEx_PLLSAI1_Config+0x7c>
 8003cac:	2001      	movs	r0, #1
 8003cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	0391      	lsls	r1, r2, #14
 8003cb4:	d4ec      	bmi.n	8003c90 <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003cbc:	e7f5      	b.n	8003caa <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cbe:	f7fe f917 	bl	8001ef0 <HAL_GetTick>
 8003cc2:	1bc0      	subs	r0, r0, r7
 8003cc4:	2802      	cmp	r0, #2
 8003cc6:	d9c4      	bls.n	8003c52 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8003cc8:	2003      	movs	r0, #3
 8003cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ccc:	6921      	ldr	r1, [r4, #16]
 8003cce:	68eb      	ldr	r3, [r5, #12]
 8003cd0:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8003cd4:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8003cd8:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8003cdc:	091b      	lsrs	r3, r3, #4
 8003cde:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8003ce2:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ce4:	6823      	ldr	r3, [r4, #0]
 8003ce6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cea:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cec:	f7fe f900 	bl	8001ef0 <HAL_GetTick>
 8003cf0:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cf2:	6823      	ldr	r3, [r4, #0]
 8003cf4:	011b      	lsls	r3, r3, #4
 8003cf6:	d513      	bpl.n	8003d20 <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003cf8:	6923      	ldr	r3, [r4, #16]
 8003cfa:	69aa      	ldr	r2, [r5, #24]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	6123      	str	r3, [r4, #16]
 8003d00:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8003d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d04:	6923      	ldr	r3, [r4, #16]
 8003d06:	6968      	ldr	r0, [r5, #20]
 8003d08:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d0c:	0840      	lsrs	r0, r0, #1
 8003d0e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d12:	3801      	subs	r0, #1
 8003d14:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8003d18:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8003d1c:	6123      	str	r3, [r4, #16]
 8003d1e:	e7e1      	b.n	8003ce4 <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d20:	f7fe f8e6 	bl	8001ef0 <HAL_GetTick>
 8003d24:	1b80      	subs	r0, r0, r6
 8003d26:	2802      	cmp	r0, #2
 8003d28:	d9e3      	bls.n	8003cf2 <RCCEx_PLLSAI1_Config+0xde>
 8003d2a:	e7cd      	b.n	8003cc8 <RCCEx_PLLSAI1_Config+0xb4>
 8003d2c:	40021000 	.word	0x40021000

08003d30 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d32:	4b3d      	ldr	r3, [pc, #244]	; (8003e28 <RCCEx_PLLSAI2_Config+0xf8>)
 8003d34:	68da      	ldr	r2, [r3, #12]
 8003d36:	f012 0f03 	tst.w	r2, #3
{
 8003d3a:	4605      	mov	r5, r0
 8003d3c:	460e      	mov	r6, r1
 8003d3e:	461c      	mov	r4, r3
 8003d40:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d42:	d028      	beq.n	8003d96 <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003d44:	68da      	ldr	r2, [r3, #12]
 8003d46:	f002 0203 	and.w	r2, r2, #3
 8003d4a:	4282      	cmp	r2, r0
 8003d4c:	d13a      	bne.n	8003dc4 <RCCEx_PLLSAI2_Config+0x94>
       ||
 8003d4e:	2a00      	cmp	r2, #0
 8003d50:	d038      	beq.n	8003dc4 <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003d52:	68db      	ldr	r3, [r3, #12]
       ||
 8003d54:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003d56:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003d5a:	3301      	adds	r3, #1
       ||
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d131      	bne.n	8003dc4 <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003d60:	6823      	ldr	r3, [r4, #0]
 8003d62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d66:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d68:	f7fe f8c2 	bl	8001ef0 <HAL_GetTick>
 8003d6c:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d6e:	6823      	ldr	r3, [r4, #0]
 8003d70:	009a      	lsls	r2, r3, #2
 8003d72:	d430      	bmi.n	8003dd6 <RCCEx_PLLSAI2_Config+0xa6>
 8003d74:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d76:	2e00      	cmp	r6, #0
 8003d78:	d034      	beq.n	8003de4 <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d7a:	6963      	ldr	r3, [r4, #20]
 8003d7c:	6929      	ldr	r1, [r5, #16]
 8003d7e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d82:	0849      	lsrs	r1, r1, #1
 8003d84:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d88:	3901      	subs	r1, #1
 8003d8a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003d8e:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8003d92:	6163      	str	r3, [r4, #20]
 8003d94:	e032      	b.n	8003dfc <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 8003d96:	2802      	cmp	r0, #2
 8003d98:	d010      	beq.n	8003dbc <RCCEx_PLLSAI2_Config+0x8c>
 8003d9a:	2803      	cmp	r0, #3
 8003d9c:	d014      	beq.n	8003dc8 <RCCEx_PLLSAI2_Config+0x98>
 8003d9e:	2801      	cmp	r0, #1
 8003da0:	d110      	bne.n	8003dc4 <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	079f      	lsls	r7, r3, #30
 8003da6:	d538      	bpl.n	8003e1a <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003da8:	68e3      	ldr	r3, [r4, #12]
 8003daa:	686a      	ldr	r2, [r5, #4]
 8003dac:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8003db0:	3a01      	subs	r2, #1
 8003db2:	4318      	orrs	r0, r3
 8003db4:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8003db8:	60e0      	str	r0, [r4, #12]
 8003dba:	e7d1      	b.n	8003d60 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003dc2:	d1f1      	bne.n	8003da8 <RCCEx_PLLSAI2_Config+0x78>
 8003dc4:	2001      	movs	r0, #1
 8003dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	0391      	lsls	r1, r2, #14
 8003dcc:	d4ec      	bmi.n	8003da8 <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003dd4:	e7f5      	b.n	8003dc2 <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003dd6:	f7fe f88b 	bl	8001ef0 <HAL_GetTick>
 8003dda:	1bc0      	subs	r0, r0, r7
 8003ddc:	2802      	cmp	r0, #2
 8003dde:	d9c6      	bls.n	8003d6e <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8003de0:	2003      	movs	r0, #3
 8003de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003de4:	6962      	ldr	r2, [r4, #20]
 8003de6:	68eb      	ldr	r3, [r5, #12]
 8003de8:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8003dec:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003df0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8003df4:	091b      	lsrs	r3, r3, #4
 8003df6:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8003dfa:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003dfc:	6823      	ldr	r3, [r4, #0]
 8003dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e02:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e04:	f7fe f874 	bl	8001ef0 <HAL_GetTick>
 8003e08:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e0a:	6823      	ldr	r3, [r4, #0]
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	d505      	bpl.n	8003e1c <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003e10:	6963      	ldr	r3, [r4, #20]
 8003e12:	696a      	ldr	r2, [r5, #20]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	6163      	str	r3, [r4, #20]
 8003e18:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8003e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e1c:	f7fe f868 	bl	8001ef0 <HAL_GetTick>
 8003e20:	1b80      	subs	r0, r0, r6
 8003e22:	2802      	cmp	r0, #2
 8003e24:	d9f1      	bls.n	8003e0a <RCCEx_PLLSAI2_Config+0xda>
 8003e26:	e7db      	b.n	8003de0 <RCCEx_PLLSAI2_Config+0xb0>
 8003e28:	40021000 	.word	0x40021000

08003e2c <HAL_RCCEx_PeriphCLKConfig>:
{
 8003e2c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e30:	6806      	ldr	r6, [r0, #0]
 8003e32:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8003e36:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e38:	d024      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003e3a:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8003e3c:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8003e40:	d02c      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x70>
 8003e42:	d802      	bhi.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003e44:	b1c1      	cbz	r1, 8003e78 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 8003e46:	2601      	movs	r6, #1
 8003e48:	e01c      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003e4a:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8003e4e:	d00d      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003e50:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8003e54:	d1f7      	bne.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e56:	4a4d      	ldr	r2, [pc, #308]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e58:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003e5a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003e5e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003e62:	430b      	orrs	r3, r1
 8003e64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003e68:	2600      	movs	r6, #0
 8003e6a:	e00b      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e6c:	4a47      	ldr	r2, [pc, #284]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e6e:	68d3      	ldr	r3, [r2, #12]
 8003e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e74:	60d3      	str	r3, [r2, #12]
      break;
 8003e76:	e7ee      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e78:	3004      	adds	r0, #4
 8003e7a:	f7ff fecb 	bl	8003c14 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e7e:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8003e80:	2800      	cmp	r0, #0
 8003e82:	d0e8      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003e84:	6823      	ldr	r3, [r4, #0]
 8003e86:	04d8      	lsls	r0, r3, #19
 8003e88:	d506      	bpl.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8003e8a:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8003e8c:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8003e90:	d074      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x150>
 8003e92:	d808      	bhi.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003e94:	b1a9      	cbz	r1, 8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 8003e96:	2601      	movs	r6, #1
 8003e98:	4635      	mov	r5, r6
 8003e9a:	e021      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	3020      	adds	r0, #32
 8003ea0:	f7ff ff46 	bl	8003d30 <RCCEx_PLLSAI2_Config>
 8003ea4:	e7eb      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 8003ea6:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8003eaa:	d004      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8003eac:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8003eb0:	d1f1      	bne.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003eb2:	4635      	mov	r5, r6
 8003eb4:	e009      	b.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003eb6:	4a35      	ldr	r2, [pc, #212]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eb8:	68d3      	ldr	r3, [r2, #12]
 8003eba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ebe:	60d3      	str	r3, [r2, #12]
 8003ec0:	e7f7      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ec2:	1d20      	adds	r0, r4, #4
 8003ec4:	f7ff fea6 	bl	8003c14 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ec8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003eca:	2d00      	cmp	r5, #0
 8003ecc:	d15c      	bne.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ece:	4a2f      	ldr	r2, [pc, #188]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ed0:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8003ed2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003ed6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003eda:	430b      	orrs	r3, r1
 8003edc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ee0:	6823      	ldr	r3, [r4, #0]
 8003ee2:	0399      	lsls	r1, r3, #14
 8003ee4:	f140 814f 	bpl.w	8004186 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ee8:	4f28      	ldr	r7, [pc, #160]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003eec:	00da      	lsls	r2, r3, #3
 8003eee:	f140 8176 	bpl.w	80041de <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 8003ef2:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ef6:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8003f90 <HAL_RCCEx_PeriphCLKConfig+0x164>
 8003efa:	f8d9 3000 	ldr.w	r3, [r9]
 8003efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f02:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8003f06:	f7fd fff3 	bl	8001ef0 <HAL_GetTick>
 8003f0a:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f0c:	f8d9 3000 	ldr.w	r3, [r9]
 8003f10:	05db      	lsls	r3, r3, #23
 8003f12:	d53f      	bpl.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 8003f14:	2d00      	cmp	r5, #0
 8003f16:	d144      	bne.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f18:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f1c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003f20:	d015      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x122>
 8003f22:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d011      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f2e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003f32:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003f36:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f3a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f42:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003f46:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8003f4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f4e:	07d8      	lsls	r0, r3, #31
 8003f50:	d509      	bpl.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 8003f52:	f7fd ffcd 	bl	8001ef0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f56:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003f5a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003f60:	0799      	lsls	r1, r3, #30
 8003f62:	f140 8109 	bpl.w	8004178 <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003f6a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8003f6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f72:	4313      	orrs	r3, r2
 8003f74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f78:	4635      	mov	r5, r6
 8003f7a:	e012      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	f104 0020 	add.w	r0, r4, #32
 8003f82:	f7ff fed5 	bl	8003d30 <RCCEx_PLLSAI2_Config>
 8003f86:	e79f      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8003f88:	462e      	mov	r6, r5
 8003f8a:	e7a9      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f94:	f7fd ffac 	bl	8001ef0 <HAL_GetTick>
 8003f98:	eba0 000a 	sub.w	r0, r0, sl
 8003f9c:	2802      	cmp	r0, #2
 8003f9e:	d9b5      	bls.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 8003fa0:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8003fa2:	f1b8 0f00 	cmp.w	r8, #0
 8003fa6:	d003      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fa8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003faa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fae:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fb0:	6823      	ldr	r3, [r4, #0]
 8003fb2:	07da      	lsls	r2, r3, #31
 8003fb4:	d508      	bpl.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fb6:	4990      	ldr	r1, [pc, #576]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003fb8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003fba:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003fbe:	f022 0203 	bic.w	r2, r2, #3
 8003fc2:	4302      	orrs	r2, r0
 8003fc4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fc8:	079f      	lsls	r7, r3, #30
 8003fca:	d508      	bpl.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fcc:	498a      	ldr	r1, [pc, #552]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003fce:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003fd0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003fd4:	f022 020c 	bic.w	r2, r2, #12
 8003fd8:	4302      	orrs	r2, r0
 8003fda:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fde:	075e      	lsls	r6, r3, #29
 8003fe0:	d508      	bpl.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fe2:	4985      	ldr	r1, [pc, #532]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003fe4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003fe6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003fea:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8003fee:	4302      	orrs	r2, r0
 8003ff0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ff4:	0718      	lsls	r0, r3, #28
 8003ff6:	d508      	bpl.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ff8:	497f      	ldr	r1, [pc, #508]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003ffa:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003ffc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004000:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004004:	4302      	orrs	r2, r0
 8004006:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800400a:	06d9      	lsls	r1, r3, #27
 800400c:	d508      	bpl.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800400e:	497a      	ldr	r1, [pc, #488]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004010:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004012:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004016:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800401a:	4302      	orrs	r2, r0
 800401c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004020:	069a      	lsls	r2, r3, #26
 8004022:	d508      	bpl.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004024:	4974      	ldr	r1, [pc, #464]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004026:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004028:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800402c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004030:	4302      	orrs	r2, r0
 8004032:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004036:	059f      	lsls	r7, r3, #22
 8004038:	d508      	bpl.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800403a:	496f      	ldr	r1, [pc, #444]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800403c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800403e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004042:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8004046:	4302      	orrs	r2, r0
 8004048:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800404c:	055e      	lsls	r6, r3, #21
 800404e:	d508      	bpl.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004050:	4969      	ldr	r1, [pc, #420]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004052:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004054:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004058:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800405c:	4302      	orrs	r2, r0
 800405e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004062:	0658      	lsls	r0, r3, #25
 8004064:	d508      	bpl.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004066:	4964      	ldr	r1, [pc, #400]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004068:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800406a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800406e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004072:	4302      	orrs	r2, r0
 8004074:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004078:	0619      	lsls	r1, r3, #24
 800407a:	d508      	bpl.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800407c:	495e      	ldr	r1, [pc, #376]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800407e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004080:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004084:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004088:	4302      	orrs	r2, r0
 800408a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800408e:	05da      	lsls	r2, r3, #23
 8004090:	d508      	bpl.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004092:	4959      	ldr	r1, [pc, #356]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004094:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004096:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800409a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800409e:	4302      	orrs	r2, r0
 80040a0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80040a4:	049b      	lsls	r3, r3, #18
 80040a6:	d50f      	bpl.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040a8:	4a53      	ldr	r2, [pc, #332]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80040aa:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80040ac:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80040b0:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80040b4:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040b6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040ba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040be:	d164      	bne.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040c0:	68d3      	ldr	r3, [r2, #12]
 80040c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040c6:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80040c8:	6823      	ldr	r3, [r4, #0]
 80040ca:	031f      	lsls	r7, r3, #12
 80040cc:	d50f      	bpl.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040ce:	4a4a      	ldr	r2, [pc, #296]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80040d0:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80040d2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80040d6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80040da:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80040dc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80040e4:	d15c      	bne.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040e6:	68d3      	ldr	r3, [r2, #12]
 80040e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040ec:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040ee:	6823      	ldr	r3, [r4, #0]
 80040f0:	035e      	lsls	r6, r3, #13
 80040f2:	d50f      	bpl.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040f4:	4a40      	ldr	r2, [pc, #256]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80040f6:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80040f8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80040fc:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004100:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004102:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004106:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800410a:	d154      	bne.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800410c:	68d3      	ldr	r3, [r2, #12]
 800410e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004112:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004114:	6823      	ldr	r3, [r4, #0]
 8004116:	0458      	lsls	r0, r3, #17
 8004118:	d512      	bpl.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800411a:	4937      	ldr	r1, [pc, #220]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800411c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800411e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004122:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004126:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004128:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800412c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004130:	d14c      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004132:	2102      	movs	r1, #2
 8004134:	1d20      	adds	r0, r4, #4
 8004136:	f7ff fd6d 	bl	8003c14 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800413a:	2800      	cmp	r0, #0
 800413c:	bf18      	it	ne
 800413e:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004140:	6822      	ldr	r2, [r4, #0]
 8004142:	0411      	lsls	r1, r2, #16
 8004144:	d508      	bpl.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004146:	492c      	ldr	r1, [pc, #176]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004148:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800414a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800414e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004152:	4303      	orrs	r3, r0
 8004154:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004158:	03d3      	lsls	r3, r2, #15
 800415a:	d509      	bpl.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800415c:	4a26      	ldr	r2, [pc, #152]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800415e:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8004162:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004166:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800416a:	430b      	orrs	r3, r1
 800416c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8004170:	4628      	mov	r0, r5
 8004172:	b002      	add	sp, #8
 8004174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004178:	f7fd feba 	bl	8001ef0 <HAL_GetTick>
 800417c:	1b40      	subs	r0, r0, r5
 800417e:	4548      	cmp	r0, r9
 8004180:	f67f aeec 	bls.w	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x130>
 8004184:	e70c      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8004186:	4635      	mov	r5, r6
 8004188:	e712      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800418a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800418e:	d19b      	bne.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004190:	2101      	movs	r1, #1
 8004192:	1d20      	adds	r0, r4, #4
 8004194:	f7ff fd3e 	bl	8003c14 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8004198:	2800      	cmp	r0, #0
 800419a:	bf18      	it	ne
 800419c:	4605      	movne	r5, r0
 800419e:	e793      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80041a0:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80041a4:	d1a3      	bne.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041a6:	2101      	movs	r1, #1
 80041a8:	1d20      	adds	r0, r4, #4
 80041aa:	f7ff fd33 	bl	8003c14 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80041ae:	2800      	cmp	r0, #0
 80041b0:	bf18      	it	ne
 80041b2:	4605      	movne	r5, r0
 80041b4:	e79b      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80041b6:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80041ba:	d1ab      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041bc:	2101      	movs	r1, #1
 80041be:	1d20      	adds	r0, r4, #4
 80041c0:	f7ff fd28 	bl	8003c14 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80041c4:	2800      	cmp	r0, #0
 80041c6:	bf18      	it	ne
 80041c8:	4605      	movne	r5, r0
 80041ca:	e7a3      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80041cc:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80041d0:	d1b6      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80041d2:	2102      	movs	r1, #2
 80041d4:	f104 0020 	add.w	r0, r4, #32
 80041d8:	f7ff fdaa 	bl	8003d30 <RCCEx_PLLSAI2_Config>
 80041dc:	e7ad      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80041de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80041e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ec:	9301      	str	r3, [sp, #4]
 80041ee:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80041f0:	f04f 0801 	mov.w	r8, #1
 80041f4:	e67f      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0xca>
 80041f6:	bf00      	nop
 80041f8:	40021000 	.word	0x40021000

080041fc <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80041fc:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041fe:	69c1      	ldr	r1, [r0, #28]
{
 8004200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004202:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004204:	6883      	ldr	r3, [r0, #8]
 8004206:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004208:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800420a:	4303      	orrs	r3, r0
 800420c:	6960      	ldr	r0, [r4, #20]
 800420e:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004210:	48ba      	ldr	r0, [pc, #744]	; (80044fc <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004212:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004214:	4028      	ands	r0, r5
 8004216:	4303      	orrs	r3, r0
 8004218:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800421a:	6853      	ldr	r3, [r2, #4]
 800421c:	68e0      	ldr	r0, [r4, #12]
 800421e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004222:	4303      	orrs	r3, r0
 8004224:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004226:	4bb6      	ldr	r3, [pc, #728]	; (8004500 <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004228:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800422a:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 800422c:	bf1c      	itt	ne
 800422e:	6a23      	ldrne	r3, [r4, #32]
 8004230:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004232:	6893      	ldr	r3, [r2, #8]
 8004234:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004238:	4303      	orrs	r3, r0
 800423a:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800423c:	4bb1      	ldr	r3, [pc, #708]	; (8004504 <UART_SetConfig+0x308>)
 800423e:	429a      	cmp	r2, r3
 8004240:	d119      	bne.n	8004276 <UART_SetConfig+0x7a>
 8004242:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8004246:	4ab0      	ldr	r2, [pc, #704]	; (8004508 <UART_SetConfig+0x30c>)
 8004248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424c:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004250:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004254:	5cd3      	ldrb	r3, [r2, r3]
 8004256:	f040 8138 	bne.w	80044ca <UART_SetConfig+0x2ce>
  {
    switch (clocksource)
 800425a:	2b08      	cmp	r3, #8
 800425c:	f200 808f 	bhi.w	800437e <UART_SetConfig+0x182>
 8004260:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004264:	00ca011a 	.word	0x00ca011a
 8004268:	008d00f9 	.word	0x008d00f9
 800426c:	008d0114 	.word	0x008d0114
 8004270:	008d008d 	.word	0x008d008d
 8004274:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004276:	4ba5      	ldr	r3, [pc, #660]	; (800450c <UART_SetConfig+0x310>)
 8004278:	429a      	cmp	r2, r3
 800427a:	d107      	bne.n	800428c <UART_SetConfig+0x90>
 800427c:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8004280:	4aa3      	ldr	r2, [pc, #652]	; (8004510 <UART_SetConfig+0x314>)
 8004282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004286:	f003 030c 	and.w	r3, r3, #12
 800428a:	e7e1      	b.n	8004250 <UART_SetConfig+0x54>
 800428c:	4ba1      	ldr	r3, [pc, #644]	; (8004514 <UART_SetConfig+0x318>)
 800428e:	429a      	cmp	r2, r3
 8004290:	d123      	bne.n	80042da <UART_SetConfig+0xde>
 8004292:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8004296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800429e:	2b10      	cmp	r3, #16
 80042a0:	f000 80f1 	beq.w	8004486 <UART_SetConfig+0x28a>
 80042a4:	d80b      	bhi.n	80042be <UART_SetConfig+0xc2>
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 80f3 	beq.w	8004492 <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042ac:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80042b0:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80042b4:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042b8:	f000 80f8 	beq.w	80044ac <UART_SetConfig+0x2b0>
 80042bc:	e0a8      	b.n	8004410 <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042be:	2b20      	cmp	r3, #32
 80042c0:	f000 80c6 	beq.w	8004450 <UART_SetConfig+0x254>
 80042c4:	2b30      	cmp	r3, #48	; 0x30
 80042c6:	d1f1      	bne.n	80042ac <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042c8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80042cc:	f040 80b8 	bne.w	8004440 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80042d0:	6860      	ldr	r0, [r4, #4]
 80042d2:	0843      	lsrs	r3, r0, #1
 80042d4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80042d8:	e0c3      	b.n	8004462 <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042da:	4b8f      	ldr	r3, [pc, #572]	; (8004518 <UART_SetConfig+0x31c>)
 80042dc:	429a      	cmp	r2, r3
 80042de:	d11e      	bne.n	800431e <UART_SetConfig+0x122>
 80042e0:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 80042e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80042ec:	2b40      	cmp	r3, #64	; 0x40
 80042ee:	f000 80bb 	beq.w	8004468 <UART_SetConfig+0x26c>
 80042f2:	d80a      	bhi.n	800430a <UART_SetConfig+0x10e>
 80042f4:	b97b      	cbnz	r3, 8004316 <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 80042f6:	4b82      	ldr	r3, [pc, #520]	; (8004500 <UART_SetConfig+0x304>)
 80042f8:	429a      	cmp	r2, r3
 80042fa:	f040 80ca 	bne.w	8004492 <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80042fe:	f7ff fc65 	bl	8003bcc <HAL_RCC_GetPCLK1Freq>
        break;
 8004302:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8004304:	bbb0      	cbnz	r0, 8004374 <UART_SetConfig+0x178>
 8004306:	4602      	mov	r2, r0
 8004308:	e03a      	b.n	8004380 <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800430a:	2b80      	cmp	r3, #128	; 0x80
 800430c:	f000 809d 	beq.w	800444a <UART_SetConfig+0x24e>
 8004310:	2bc0      	cmp	r3, #192	; 0xc0
 8004312:	f000 80b0 	beq.w	8004476 <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8004316:	4b7a      	ldr	r3, [pc, #488]	; (8004500 <UART_SetConfig+0x304>)
 8004318:	429a      	cmp	r2, r3
 800431a:	d1c7      	bne.n	80042ac <UART_SetConfig+0xb0>
 800431c:	e02f      	b.n	800437e <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800431e:	4b7f      	ldr	r3, [pc, #508]	; (800451c <UART_SetConfig+0x320>)
 8004320:	429a      	cmp	r2, r3
 8004322:	d111      	bne.n	8004348 <UART_SetConfig+0x14c>
 8004324:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8004328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004330:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004334:	f000 8098 	beq.w	8004468 <UART_SetConfig+0x26c>
 8004338:	d9dc      	bls.n	80042f4 <UART_SetConfig+0xf8>
 800433a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800433e:	f000 8084 	beq.w	800444a <UART_SetConfig+0x24e>
 8004342:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004346:	e7e4      	b.n	8004312 <UART_SetConfig+0x116>
 8004348:	4b6d      	ldr	r3, [pc, #436]	; (8004500 <UART_SetConfig+0x304>)
 800434a:	429a      	cmp	r2, r3
 800434c:	d1ae      	bne.n	80042ac <UART_SetConfig+0xb0>
 800434e:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8004352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004356:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800435a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800435e:	f000 8083 	beq.w	8004468 <UART_SetConfig+0x26c>
 8004362:	d9c7      	bls.n	80042f4 <UART_SetConfig+0xf8>
 8004364:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004368:	d06f      	beq.n	800444a <UART_SetConfig+0x24e>
 800436a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800436e:	e7d0      	b.n	8004312 <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004370:	486b      	ldr	r0, [pc, #428]	; (8004520 <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 8004372:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8004374:	6862      	ldr	r2, [r4, #4]
 8004376:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800437a:	4281      	cmp	r1, r0
 800437c:	d905      	bls.n	800438a <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 800437e:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004380:	2300      	movs	r3, #0
 8004382:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8004384:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8004386:	4610      	mov	r0, r2
 8004388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 800438a:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800438e:	d8f6      	bhi.n	800437e <UART_SetConfig+0x182>
        switch (clocksource)
 8004390:	2b08      	cmp	r3, #8
 8004392:	d82e      	bhi.n	80043f2 <UART_SetConfig+0x1f6>
 8004394:	e8df f003 	tbb	[pc, r3]
 8004398:	2d1c2d05 	.word	0x2d1c2d05
 800439c:	2d2d2d24 	.word	0x2d2d2d24
 80043a0:	27          	.byte	0x27
 80043a1:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80043a2:	f7ff fc13 	bl	8003bcc <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80043a6:	6862      	ldr	r2, [r4, #4]
 80043a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80043ac:	0856      	lsrs	r6, r2, #1
 80043ae:	2700      	movs	r7, #0
 80043b0:	fbe1 6700 	umlal	r6, r7, r1, r0
 80043b4:	2300      	movs	r3, #0
 80043b6:	4630      	mov	r0, r6
 80043b8:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80043ba:	f7fc fc41 	bl	8000c40 <__aeabi_uldivmod>
            break;
 80043be:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80043c0:	4b58      	ldr	r3, [pc, #352]	; (8004524 <UART_SetConfig+0x328>)
 80043c2:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 80043c6:	4299      	cmp	r1, r3
 80043c8:	d8d9      	bhi.n	800437e <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 80043ca:	6823      	ldr	r3, [r4, #0]
 80043cc:	60d8      	str	r0, [r3, #12]
 80043ce:	e7d7      	b.n	8004380 <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80043d0:	4855      	ldr	r0, [pc, #340]	; (8004528 <UART_SetConfig+0x32c>)
 80043d2:	0855      	lsrs	r5, r2, #1
 80043d4:	2300      	movs	r3, #0
 80043d6:	2100      	movs	r1, #0
 80043d8:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80043da:	f141 0100 	adc.w	r1, r1, #0
 80043de:	e7ec      	b.n	80043ba <UART_SetConfig+0x1be>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80043e0:	f7ff f8e8 	bl	80035b4 <HAL_RCC_GetSysClockFreq>
 80043e4:	e7df      	b.n	80043a6 <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80043e6:	0850      	lsrs	r0, r2, #1
 80043e8:	2100      	movs	r1, #0
 80043ea:	2300      	movs	r3, #0
 80043ec:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 80043f0:	e7f3      	b.n	80043da <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 80043f2:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80043f4:	2000      	movs	r0, #0
 80043f6:	e7e3      	b.n	80043c0 <UART_SetConfig+0x1c4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80043f8:	f7ff fbfa 	bl	8003bf0 <HAL_RCC_GetPCLK2Freq>
 80043fc:	e04e      	b.n	800449c <UART_SetConfig+0x2a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80043fe:	f7ff fbe5 	bl	8003bcc <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004402:	6862      	ldr	r2, [r4, #4]
 8004404:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8004408:	fbb3 f3f2 	udiv	r3, r3, r2
 800440c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800440e:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004410:	f1a3 0010 	sub.w	r0, r3, #16
 8004414:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8004418:	4288      	cmp	r0, r1
 800441a:	d8b0      	bhi.n	800437e <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 800441c:	6821      	ldr	r1, [r4, #0]
 800441e:	60cb      	str	r3, [r1, #12]
 8004420:	e7ae      	b.n	8004380 <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004422:	f7ff fbe5 	bl	8003bf0 <HAL_RCC_GetPCLK2Freq>
 8004426:	e7ec      	b.n	8004402 <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004428:	6860      	ldr	r0, [r4, #4]
 800442a:	0843      	lsrs	r3, r0, #1
 800442c:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004430:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004434:	fbb3 f3f0 	udiv	r3, r3, r0
 8004438:	e7e8      	b.n	800440c <UART_SetConfig+0x210>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800443a:	f7ff f8bb 	bl	80035b4 <HAL_RCC_GetSysClockFreq>
 800443e:	e7e0      	b.n	8004402 <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004440:	6860      	ldr	r0, [r4, #4]
 8004442:	0843      	lsrs	r3, r0, #1
 8004444:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004448:	e7f4      	b.n	8004434 <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 800444a:	4b2d      	ldr	r3, [pc, #180]	; (8004500 <UART_SetConfig+0x304>)
 800444c:	429a      	cmp	r2, r3
 800444e:	d08f      	beq.n	8004370 <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004450:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004454:	d1e8      	bne.n	8004428 <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004456:	6860      	ldr	r0, [r4, #4]
 8004458:	0843      	lsrs	r3, r0, #1
 800445a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800445e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004462:	fbb3 f3f0 	udiv	r3, r3, r0
 8004466:	e01f      	b.n	80044a8 <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 8004468:	4b25      	ldr	r3, [pc, #148]	; (8004500 <UART_SetConfig+0x304>)
 800446a:	429a      	cmp	r2, r3
 800446c:	d10b      	bne.n	8004486 <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800446e:	f7ff f8a1 	bl	80035b4 <HAL_RCC_GetSysClockFreq>
        break;
 8004472:	2304      	movs	r3, #4
 8004474:	e746      	b.n	8004304 <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 8004476:	4b22      	ldr	r3, [pc, #136]	; (8004500 <UART_SetConfig+0x304>)
 8004478:	429a      	cmp	r2, r3
 800447a:	f47f af25 	bne.w	80042c8 <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800447e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 8004482:	2308      	movs	r3, #8
 8004484:	e776      	b.n	8004374 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004486:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800448a:	d1d6      	bne.n	800443a <UART_SetConfig+0x23e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800448c:	f7ff f892 	bl	80035b4 <HAL_RCC_GetSysClockFreq>
 8004490:	e004      	b.n	800449c <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004492:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004496:	d1b2      	bne.n	80043fe <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004498:	f7ff fb98 	bl	8003bcc <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800449c:	6861      	ldr	r1, [r4, #4]
 800449e:	084a      	lsrs	r2, r1, #1
 80044a0:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 80044a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80044a8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80044aa:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044ac:	f1a3 0010 	sub.w	r0, r3, #16
 80044b0:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80044b4:	4288      	cmp	r0, r1
 80044b6:	f63f af62 	bhi.w	800437e <UART_SetConfig+0x182>
      brrtemp = usartdiv & 0xFFF0U;
 80044ba:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 80044be:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044c0:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 80044c4:	430b      	orrs	r3, r1
 80044c6:	60c3      	str	r3, [r0, #12]
 80044c8:	e75a      	b.n	8004380 <UART_SetConfig+0x184>
    switch (clocksource)
 80044ca:	2b08      	cmp	r3, #8
 80044cc:	f63f af57 	bhi.w	800437e <UART_SetConfig+0x182>
 80044d0:	a201      	add	r2, pc, #4	; (adr r2, 80044d8 <UART_SetConfig+0x2dc>)
 80044d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d6:	bf00      	nop
 80044d8:	080043ff 	.word	0x080043ff
 80044dc:	08004423 	.word	0x08004423
 80044e0:	08004429 	.word	0x08004429
 80044e4:	0800437f 	.word	0x0800437f
 80044e8:	0800443b 	.word	0x0800443b
 80044ec:	0800437f 	.word	0x0800437f
 80044f0:	0800437f 	.word	0x0800437f
 80044f4:	0800437f 	.word	0x0800437f
 80044f8:	08004441 	.word	0x08004441
 80044fc:	efff69f3 	.word	0xefff69f3
 8004500:	40008000 	.word	0x40008000
 8004504:	40013800 	.word	0x40013800
 8004508:	0800a7ef 	.word	0x0800a7ef
 800450c:	40004400 	.word	0x40004400
 8004510:	0800a7f3 	.word	0x0800a7f3
 8004514:	40004800 	.word	0x40004800
 8004518:	40004c00 	.word	0x40004c00
 800451c:	40005000 	.word	0x40005000
 8004520:	00f42400 	.word	0x00f42400
 8004524:	000ffcff 	.word	0x000ffcff
 8004528:	f4240000 	.word	0xf4240000

0800452c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800452c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800452e:	07da      	lsls	r2, r3, #31
{
 8004530:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004532:	d506      	bpl.n	8004542 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004534:	6801      	ldr	r1, [r0, #0]
 8004536:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8004538:	684a      	ldr	r2, [r1, #4]
 800453a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800453e:	4322      	orrs	r2, r4
 8004540:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004542:	079c      	lsls	r4, r3, #30
 8004544:	d506      	bpl.n	8004554 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004546:	6801      	ldr	r1, [r0, #0]
 8004548:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800454a:	684a      	ldr	r2, [r1, #4]
 800454c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004550:	4322      	orrs	r2, r4
 8004552:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004554:	0759      	lsls	r1, r3, #29
 8004556:	d506      	bpl.n	8004566 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004558:	6801      	ldr	r1, [r0, #0]
 800455a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800455c:	684a      	ldr	r2, [r1, #4]
 800455e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004562:	4322      	orrs	r2, r4
 8004564:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004566:	071a      	lsls	r2, r3, #28
 8004568:	d506      	bpl.n	8004578 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800456a:	6801      	ldr	r1, [r0, #0]
 800456c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800456e:	684a      	ldr	r2, [r1, #4]
 8004570:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004574:	4322      	orrs	r2, r4
 8004576:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004578:	06dc      	lsls	r4, r3, #27
 800457a:	d506      	bpl.n	800458a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800457c:	6801      	ldr	r1, [r0, #0]
 800457e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8004580:	688a      	ldr	r2, [r1, #8]
 8004582:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004586:	4322      	orrs	r2, r4
 8004588:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800458a:	0699      	lsls	r1, r3, #26
 800458c:	d506      	bpl.n	800459c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800458e:	6801      	ldr	r1, [r0, #0]
 8004590:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004592:	688a      	ldr	r2, [r1, #8]
 8004594:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004598:	4322      	orrs	r2, r4
 800459a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800459c:	065a      	lsls	r2, r3, #25
 800459e:	d50f      	bpl.n	80045c0 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045a0:	6801      	ldr	r1, [r0, #0]
 80045a2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80045a4:	684a      	ldr	r2, [r1, #4]
 80045a6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80045aa:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045ac:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045b0:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045b2:	d105      	bne.n	80045c0 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045b4:	684a      	ldr	r2, [r1, #4]
 80045b6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80045b8:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80045bc:	4322      	orrs	r2, r4
 80045be:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045c0:	061b      	lsls	r3, r3, #24
 80045c2:	d506      	bpl.n	80045d2 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045c4:	6802      	ldr	r2, [r0, #0]
 80045c6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80045c8:	6853      	ldr	r3, [r2, #4]
 80045ca:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80045ce:	430b      	orrs	r3, r1
 80045d0:	6053      	str	r3, [r2, #4]
 80045d2:	bd10      	pop	{r4, pc}

080045d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80045d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045d8:	9d06      	ldr	r5, [sp, #24]
 80045da:	4604      	mov	r4, r0
 80045dc:	460f      	mov	r7, r1
 80045de:	4616      	mov	r6, r2
 80045e0:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045e2:	6821      	ldr	r1, [r4, #0]
 80045e4:	69ca      	ldr	r2, [r1, #28]
 80045e6:	ea37 0302 	bics.w	r3, r7, r2
 80045ea:	bf0c      	ite	eq
 80045ec:	2201      	moveq	r2, #1
 80045ee:	2200      	movne	r2, #0
 80045f0:	42b2      	cmp	r2, r6
 80045f2:	d002      	beq.n	80045fa <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80045f4:	2000      	movs	r0, #0
}
 80045f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80045fa:	1c6b      	adds	r3, r5, #1
 80045fc:	d0f2      	beq.n	80045e4 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80045fe:	b99d      	cbnz	r5, 8004628 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004600:	6823      	ldr	r3, [r4, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004608:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	f022 0201 	bic.w	r2, r2, #1
 8004610:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8004612:	2320      	movs	r3, #32
 8004614:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8004618:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 800461c:	2300      	movs	r3, #0
 800461e:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8004622:	2003      	movs	r0, #3
 8004624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004628:	f7fd fc62 	bl	8001ef0 <HAL_GetTick>
 800462c:	eba0 0008 	sub.w	r0, r0, r8
 8004630:	4285      	cmp	r5, r0
 8004632:	d2d6      	bcs.n	80045e2 <UART_WaitOnFlagUntilTimeout+0xe>
 8004634:	e7e4      	b.n	8004600 <UART_WaitOnFlagUntilTimeout+0x2c>

08004636 <UART_CheckIdleState>:
{
 8004636:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004638:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800463a:	2600      	movs	r6, #0
 800463c:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 800463e:	f7fd fc57 	bl	8001ef0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004642:	6823      	ldr	r3, [r4, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8004648:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800464a:	d417      	bmi.n	800467c <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800464c:	6823      	ldr	r3, [r4, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	075b      	lsls	r3, r3, #29
 8004652:	d50a      	bpl.n	800466a <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004654:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	2200      	movs	r2, #0
 800465c:	462b      	mov	r3, r5
 800465e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004662:	4620      	mov	r0, r4
 8004664:	f7ff ffb6 	bl	80045d4 <UART_WaitOnFlagUntilTimeout>
 8004668:	b9a0      	cbnz	r0, 8004694 <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 800466a:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800466c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800466e:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 8004672:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8004676:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 800467a:	e00c      	b.n	8004696 <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800467c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004680:	9300      	str	r3, [sp, #0]
 8004682:	4632      	mov	r2, r6
 8004684:	4603      	mov	r3, r0
 8004686:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800468a:	4620      	mov	r0, r4
 800468c:	f7ff ffa2 	bl	80045d4 <UART_WaitOnFlagUntilTimeout>
 8004690:	2800      	cmp	r0, #0
 8004692:	d0db      	beq.n	800464c <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8004694:	2003      	movs	r0, #3
}
 8004696:	b002      	add	sp, #8
 8004698:	bd70      	pop	{r4, r5, r6, pc}

0800469a <HAL_UART_Init>:
{
 800469a:	b510      	push	{r4, lr}
  if (huart == NULL)
 800469c:	4604      	mov	r4, r0
 800469e:	b360      	cbz	r0, 80046fa <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 80046a0:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 80046a4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80046a8:	b91b      	cbnz	r3, 80046b2 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80046aa:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80046ae:	f002 f975 	bl	800699c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80046b2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80046b4:	2324      	movs	r3, #36	; 0x24
 80046b6:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 80046ba:	6813      	ldr	r3, [r2, #0]
 80046bc:	f023 0301 	bic.w	r3, r3, #1
 80046c0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046c2:	4620      	mov	r0, r4
 80046c4:	f7ff fd9a 	bl	80041fc <UART_SetConfig>
 80046c8:	2801      	cmp	r0, #1
 80046ca:	d016      	beq.n	80046fa <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046ce:	b113      	cbz	r3, 80046d6 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80046d0:	4620      	mov	r0, r4
 80046d2:	f7ff ff2b 	bl	800452c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046d6:	6823      	ldr	r3, [r4, #0]
 80046d8:	685a      	ldr	r2, [r3, #4]
 80046da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046e0:	689a      	ldr	r2, [r3, #8]
 80046e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046e6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80046ee:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80046f0:	601a      	str	r2, [r3, #0]
}
 80046f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80046f6:	f7ff bf9e 	b.w	8004636 <UART_CheckIdleState>
}
 80046fa:	2001      	movs	r0, #1
 80046fc:	bd10      	pop	{r4, pc}

080046fe <_ZSt3powfi>:
  pow(double __x, int __i)
  { return __builtin_powi(__x, __i); }

  inline float
  pow(float __x, int __n)
  { return __builtin_powif(__x, __n); }
 80046fe:	b580      	push	{r7, lr}
 8004700:	b082      	sub	sp, #8
 8004702:	af00      	add	r7, sp, #0
 8004704:	ed87 0a01 	vstr	s0, [r7, #4]
 8004708:	6038      	str	r0, [r7, #0]
 800470a:	6838      	ldr	r0, [r7, #0]
 800470c:	ed97 0a01 	vldr	s0, [r7, #4]
 8004710:	f7fc faae 	bl	8000c70 <__powisf2>
 8004714:	eef0 7a40 	vmov.f32	s15, s0
 8004718:	eeb0 0a67 	vmov.f32	s0, s15
 800471c:	3708      	adds	r7, #8
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <_ZN10SFE_BMP180C1EP19__I2C_HandleTypeDef>:
#include <SFE_BMP180.h>
#include <stdio.h>
#include <math.h>


SFE_BMP180::SFE_BMP180(I2C_HandleTypeDef *pI2C)
 8004722:	b480      	push	{r7}
 8004724:	b083      	sub	sp, #12
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
 800472a:	6039      	str	r1, [r7, #0]
// Base library Constructor
{
	m_pI2C = pI2C;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4618      	mov	r0, r3
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <_ZN10SFE_BMP1805BeginEv>:


bool SFE_BMP180::Begin()
// Initialize library for subsequent pressure measurements
{
 8004740:	b5b0      	push	{r4, r5, r7, lr}
 8004742:	b090      	sub	sp, #64	; 0x40
 8004744:	af04      	add	r7, sp, #16
 8004746:	6078      	str	r0, [r7, #4]
	// The BMP180 includes factory calibration data stored on the device.
	// Each device has different numbers, these must be retrieved and
	// used in the calculations when taking pressure measurements.

	// Retrieve calibration data from device:
	m_error= HAL_I2C_Mem_Read(m_pI2C, BMP180_ADDR << 1, 0xAA, I2C_MEMADD_SIZE_8BIT, buf, 22, 500);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800474c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004750:	9302      	str	r3, [sp, #8]
 8004752:	2316      	movs	r3, #22
 8004754:	9301      	str	r3, [sp, #4]
 8004756:	f107 030c 	add.w	r3, r7, #12
 800475a:	9300      	str	r3, [sp, #0]
 800475c:	2301      	movs	r3, #1
 800475e:	22aa      	movs	r2, #170	; 0xaa
 8004760:	21ee      	movs	r1, #238	; 0xee
 8004762:	f7fe fd4b 	bl	80031fc <HAL_I2C_Mem_Read>
 8004766:	4603      	mov	r3, r0
 8004768:	461a      	mov	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	
	if(m_error == HAL_OK)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004776:	2b00      	cmp	r3, #0
 8004778:	f040 8322 	bne.w	8004dc0 <_ZN10SFE_BMP1805BeginEv+0x680>

		// Example from http://wmrx00.sourceforge.net/Arduino/BMP180-Calcs.pdf
		// AC1 = 7911; AC2 = -934; AC3 = -14306; AC4 = 31567; AC5 = 25671; AC6 = 18974;
		// VB1 = 5498; VB2 = 46; MB = -32768; MC = -11075; MD = 2432;

		m_AC1 = (int16_t)((buf[0]<<8)  | buf[1]);		// data from register address 0xAA MSB first
 800477c:	7b3b      	ldrb	r3, [r7, #12]
 800477e:	021b      	lsls	r3, r3, #8
 8004780:	b21a      	sxth	r2, r3
 8004782:	7b7b      	ldrb	r3, [r7, #13]
 8004784:	b21b      	sxth	r3, r3
 8004786:	4313      	orrs	r3, r2
 8004788:	b21a      	sxth	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	801a      	strh	r2, [r3, #0]
		m_AC2 = (int16_t)((buf[2]<<8)  | buf[3]);
 800478e:	7bbb      	ldrb	r3, [r7, #14]
 8004790:	021b      	lsls	r3, r3, #8
 8004792:	b21a      	sxth	r2, r3
 8004794:	7bfb      	ldrb	r3, [r7, #15]
 8004796:	b21b      	sxth	r3, r3
 8004798:	4313      	orrs	r3, r2
 800479a:	b21a      	sxth	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	805a      	strh	r2, [r3, #2]
		m_AC3 = (int16_t)((buf[4]<<8)  | buf[5]);
 80047a0:	7c3b      	ldrb	r3, [r7, #16]
 80047a2:	021b      	lsls	r3, r3, #8
 80047a4:	b21a      	sxth	r2, r3
 80047a6:	7c7b      	ldrb	r3, [r7, #17]
 80047a8:	b21b      	sxth	r3, r3
 80047aa:	4313      	orrs	r3, r2
 80047ac:	b21a      	sxth	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	809a      	strh	r2, [r3, #4]
		m_AC4 = (int16_t)((buf[6]<<8)  | buf[7]);
 80047b2:	7cbb      	ldrb	r3, [r7, #18]
 80047b4:	021b      	lsls	r3, r3, #8
 80047b6:	b21a      	sxth	r2, r3
 80047b8:	7cfb      	ldrb	r3, [r7, #19]
 80047ba:	b21b      	sxth	r3, r3
 80047bc:	4313      	orrs	r3, r2
 80047be:	b21b      	sxth	r3, r3
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	821a      	strh	r2, [r3, #16]
		m_AC5 = (int16_t)((buf[8]<<8)  | buf[9]);
 80047c6:	7d3b      	ldrb	r3, [r7, #20]
 80047c8:	021b      	lsls	r3, r3, #8
 80047ca:	b21a      	sxth	r2, r3
 80047cc:	7d7b      	ldrb	r3, [r7, #21]
 80047ce:	b21b      	sxth	r3, r3
 80047d0:	4313      	orrs	r3, r2
 80047d2:	b21b      	sxth	r3, r3
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	825a      	strh	r2, [r3, #18]
		m_AC6 = (int16_t)((buf[10]<<8) | buf[11]);
 80047da:	7dbb      	ldrb	r3, [r7, #22]
 80047dc:	021b      	lsls	r3, r3, #8
 80047de:	b21a      	sxth	r2, r3
 80047e0:	7dfb      	ldrb	r3, [r7, #23]
 80047e2:	b21b      	sxth	r3, r3
 80047e4:	4313      	orrs	r3, r2
 80047e6:	b21b      	sxth	r3, r3
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	829a      	strh	r2, [r3, #20]
		m_VB1 = (int16_t)((buf[12]<<8) | buf[13]);
 80047ee:	7e3b      	ldrb	r3, [r7, #24]
 80047f0:	021b      	lsls	r3, r3, #8
 80047f2:	b21a      	sxth	r2, r3
 80047f4:	7e7b      	ldrb	r3, [r7, #25]
 80047f6:	b21b      	sxth	r3, r3
 80047f8:	4313      	orrs	r3, r2
 80047fa:	b21a      	sxth	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	80da      	strh	r2, [r3, #6]
		m_VB2 = (int16_t)((buf[14]<<8) | buf[15]);
 8004800:	7ebb      	ldrb	r3, [r7, #26]
 8004802:	021b      	lsls	r3, r3, #8
 8004804:	b21a      	sxth	r2, r3
 8004806:	7efb      	ldrb	r3, [r7, #27]
 8004808:	b21b      	sxth	r3, r3
 800480a:	4313      	orrs	r3, r2
 800480c:	b21a      	sxth	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	811a      	strh	r2, [r3, #8]
		m_MB  = (int16_t)((buf[16]<<8) | buf[17]);
 8004812:	7f3b      	ldrb	r3, [r7, #28]
 8004814:	021b      	lsls	r3, r3, #8
 8004816:	b21a      	sxth	r2, r3
 8004818:	7f7b      	ldrb	r3, [r7, #29]
 800481a:	b21b      	sxth	r3, r3
 800481c:	4313      	orrs	r3, r2
 800481e:	b21a      	sxth	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	815a      	strh	r2, [r3, #10]
		m_MC  = (int16_t)((buf[18]<<8) | buf[19]);
 8004824:	7fbb      	ldrb	r3, [r7, #30]
 8004826:	021b      	lsls	r3, r3, #8
 8004828:	b21a      	sxth	r2, r3
 800482a:	7ffb      	ldrb	r3, [r7, #31]
 800482c:	b21b      	sxth	r3, r3
 800482e:	4313      	orrs	r3, r2
 8004830:	b21a      	sxth	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	819a      	strh	r2, [r3, #12]
		m_MD  = (int16_t)((buf[20]<<8) | buf[21]);
 8004836:	f897 3020 	ldrb.w	r3, [r7, #32]
 800483a:	021b      	lsls	r3, r3, #8
 800483c:	b21a      	sxth	r2, r3
 800483e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004842:	b21b      	sxth	r3, r3
 8004844:	4313      	orrs	r3, r2
 8004846:	b21a      	sxth	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	81da      	strh	r2, [r3, #14]

		printf("BMP180: AC1=%d \n", m_AC1);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004852:	4619      	mov	r1, r3
 8004854:	48d8      	ldr	r0, [pc, #864]	; (8004bb8 <_ZN10SFE_BMP1805BeginEv+0x478>)
 8004856:	f003 fe01 	bl	800845c <iprintf>
		printf("BMP180: AC2=%d \n", m_AC2);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004860:	4619      	mov	r1, r3
 8004862:	48d6      	ldr	r0, [pc, #856]	; (8004bbc <_ZN10SFE_BMP1805BeginEv+0x47c>)
 8004864:	f003 fdfa 	bl	800845c <iprintf>
		printf("BMP180: AC3=%d \n", m_AC3);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800486e:	4619      	mov	r1, r3
 8004870:	48d3      	ldr	r0, [pc, #844]	; (8004bc0 <_ZN10SFE_BMP1805BeginEv+0x480>)
 8004872:	f003 fdf3 	bl	800845c <iprintf>
		printf("BMP180: AC4=%d \n", m_AC4);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	8a1b      	ldrh	r3, [r3, #16]
 800487a:	4619      	mov	r1, r3
 800487c:	48d1      	ldr	r0, [pc, #836]	; (8004bc4 <_ZN10SFE_BMP1805BeginEv+0x484>)
 800487e:	f003 fded 	bl	800845c <iprintf>
		printf("BMP180: AC5=%d \n", m_AC5);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	8a5b      	ldrh	r3, [r3, #18]
 8004886:	4619      	mov	r1, r3
 8004888:	48cf      	ldr	r0, [pc, #828]	; (8004bc8 <_ZN10SFE_BMP1805BeginEv+0x488>)
 800488a:	f003 fde7 	bl	800845c <iprintf>
		printf("BMP180: AC6=%d \n", m_AC6);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	8a9b      	ldrh	r3, [r3, #20]
 8004892:	4619      	mov	r1, r3
 8004894:	48cd      	ldr	r0, [pc, #820]	; (8004bcc <_ZN10SFE_BMP1805BeginEv+0x48c>)
 8004896:	f003 fde1 	bl	800845c <iprintf>
		printf("BMP180: VB1=%d \n", m_VB1);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80048a0:	4619      	mov	r1, r3
 80048a2:	48cb      	ldr	r0, [pc, #812]	; (8004bd0 <_ZN10SFE_BMP1805BeginEv+0x490>)
 80048a4:	f003 fdda 	bl	800845c <iprintf>
		printf("BMP180: VB2=%d \n", m_VB2);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80048ae:	4619      	mov	r1, r3
 80048b0:	48c8      	ldr	r0, [pc, #800]	; (8004bd4 <_ZN10SFE_BMP1805BeginEv+0x494>)
 80048b2:	f003 fdd3 	bl	800845c <iprintf>
		printf("BMP180: MB=%d \n", m_MB);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80048bc:	4619      	mov	r1, r3
 80048be:	48c6      	ldr	r0, [pc, #792]	; (8004bd8 <_ZN10SFE_BMP1805BeginEv+0x498>)
 80048c0:	f003 fdcc 	bl	800845c <iprintf>
		printf("BMP180: MC=%d \n", m_MC);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80048ca:	4619      	mov	r1, r3
 80048cc:	48c3      	ldr	r0, [pc, #780]	; (8004bdc <_ZN10SFE_BMP1805BeginEv+0x49c>)
 80048ce:	f003 fdc5 	bl	800845c <iprintf>
		printf("BMP180: MD=%d \n", m_MD);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80048d8:	4619      	mov	r1, r3
 80048da:	48c1      	ldr	r0, [pc, #772]	; (8004be0 <_ZN10SFE_BMP1805BeginEv+0x4a0>)
 80048dc:	f003 fdbe 	bl	800845c <iprintf>
		
		// Compute floating-point polynominals:

		c3 = 160.0 * pow(2,-15) * m_AC3;
 80048e0:	f06f 010e 	mvn.w	r1, #14
 80048e4:	2002      	movs	r0, #2
 80048e6:	f000 fd0e 	bl	8005306 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80048ea:	ec51 0b10 	vmov	r0, r1, d0
 80048ee:	f04f 0200 	mov.w	r2, #0
 80048f2:	4bbc      	ldr	r3, [pc, #752]	; (8004be4 <_ZN10SFE_BMP1805BeginEv+0x4a4>)
 80048f4:	f7fb fe7c 	bl	80005f0 <__aeabi_dmul>
 80048f8:	4603      	mov	r3, r0
 80048fa:	460c      	mov	r4, r1
 80048fc:	4625      	mov	r5, r4
 80048fe:	461c      	mov	r4, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004906:	4618      	mov	r0, r3
 8004908:	f7fb fe0c 	bl	8000524 <__aeabi_i2d>
 800490c:	4602      	mov	r2, r0
 800490e:	460b      	mov	r3, r1
 8004910:	4620      	mov	r0, r4
 8004912:	4629      	mov	r1, r5
 8004914:	f7fb fe6c 	bl	80005f0 <__aeabi_dmul>
 8004918:	4603      	mov	r3, r0
 800491a:	460c      	mov	r4, r1
 800491c:	4618      	mov	r0, r3
 800491e:	4621      	mov	r1, r4
 8004920:	f7fc f93e 	bl	8000ba0 <__aeabi_d2f>
 8004924:	4603      	mov	r3, r0
 8004926:	62fb      	str	r3, [r7, #44]	; 0x2c
		c4 = pow(10,-3) * pow(2,-15) * m_AC4;
 8004928:	f06f 0102 	mvn.w	r1, #2
 800492c:	200a      	movs	r0, #10
 800492e:	f000 fcea 	bl	8005306 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8004932:	ec55 4b10 	vmov	r4, r5, d0
 8004936:	f06f 010e 	mvn.w	r1, #14
 800493a:	2002      	movs	r0, #2
 800493c:	f000 fce3 	bl	8005306 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8004940:	ec53 2b10 	vmov	r2, r3, d0
 8004944:	4620      	mov	r0, r4
 8004946:	4629      	mov	r1, r5
 8004948:	f7fb fe52 	bl	80005f0 <__aeabi_dmul>
 800494c:	4603      	mov	r3, r0
 800494e:	460c      	mov	r4, r1
 8004950:	4625      	mov	r5, r4
 8004952:	461c      	mov	r4, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	8a1b      	ldrh	r3, [r3, #16]
 8004958:	4618      	mov	r0, r3
 800495a:	f7fb fde3 	bl	8000524 <__aeabi_i2d>
 800495e:	4602      	mov	r2, r0
 8004960:	460b      	mov	r3, r1
 8004962:	4620      	mov	r0, r4
 8004964:	4629      	mov	r1, r5
 8004966:	f7fb fe43 	bl	80005f0 <__aeabi_dmul>
 800496a:	4603      	mov	r3, r0
 800496c:	460c      	mov	r4, r1
 800496e:	4618      	mov	r0, r3
 8004970:	4621      	mov	r1, r4
 8004972:	f7fc f915 	bl	8000ba0 <__aeabi_d2f>
 8004976:	4603      	mov	r3, r0
 8004978:	62bb      	str	r3, [r7, #40]	; 0x28
		b1 = pow(160,2) * pow(2,-30) * m_VB1;
 800497a:	2102      	movs	r1, #2
 800497c:	20a0      	movs	r0, #160	; 0xa0
 800497e:	f000 fcc2 	bl	8005306 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8004982:	ec55 4b10 	vmov	r4, r5, d0
 8004986:	f06f 011d 	mvn.w	r1, #29
 800498a:	2002      	movs	r0, #2
 800498c:	f000 fcbb 	bl	8005306 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8004990:	ec53 2b10 	vmov	r2, r3, d0
 8004994:	4620      	mov	r0, r4
 8004996:	4629      	mov	r1, r5
 8004998:	f7fb fe2a 	bl	80005f0 <__aeabi_dmul>
 800499c:	4603      	mov	r3, r0
 800499e:	460c      	mov	r4, r1
 80049a0:	4625      	mov	r5, r4
 80049a2:	461c      	mov	r4, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7fb fdba 	bl	8000524 <__aeabi_i2d>
 80049b0:	4602      	mov	r2, r0
 80049b2:	460b      	mov	r3, r1
 80049b4:	4620      	mov	r0, r4
 80049b6:	4629      	mov	r1, r5
 80049b8:	f7fb fe1a 	bl	80005f0 <__aeabi_dmul>
 80049bc:	4603      	mov	r3, r0
 80049be:	460c      	mov	r4, r1
 80049c0:	4618      	mov	r0, r3
 80049c2:	4621      	mov	r1, r4
 80049c4:	f7fc f8ec 	bl	8000ba0 <__aeabi_d2f>
 80049c8:	4603      	mov	r3, r0
 80049ca:	627b      	str	r3, [r7, #36]	; 0x24
		m_c5 = (pow(2,-15) / 160) * m_AC5;
 80049cc:	f06f 010e 	mvn.w	r1, #14
 80049d0:	2002      	movs	r0, #2
 80049d2:	f000 fc98 	bl	8005306 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80049d6:	ec51 0b10 	vmov	r0, r1, d0
 80049da:	f04f 0200 	mov.w	r2, #0
 80049de:	4b81      	ldr	r3, [pc, #516]	; (8004be4 <_ZN10SFE_BMP1805BeginEv+0x4a4>)
 80049e0:	f7fb ff30 	bl	8000844 <__aeabi_ddiv>
 80049e4:	4603      	mov	r3, r0
 80049e6:	460c      	mov	r4, r1
 80049e8:	4625      	mov	r5, r4
 80049ea:	461c      	mov	r4, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	8a5b      	ldrh	r3, [r3, #18]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7fb fd97 	bl	8000524 <__aeabi_i2d>
 80049f6:	4602      	mov	r2, r0
 80049f8:	460b      	mov	r3, r1
 80049fa:	4620      	mov	r0, r4
 80049fc:	4629      	mov	r1, r5
 80049fe:	f7fb fdf7 	bl	80005f0 <__aeabi_dmul>
 8004a02:	4603      	mov	r3, r0
 8004a04:	460c      	mov	r4, r1
 8004a06:	4618      	mov	r0, r3
 8004a08:	4621      	mov	r1, r4
 8004a0a:	f7fc f8c9 	bl	8000ba0 <__aeabi_d2f>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	619a      	str	r2, [r3, #24]
		m_c6 = m_AC6;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	8a9b      	ldrh	r3, [r3, #20]
 8004a18:	ee07 3a90 	vmov	s15, r3
 8004a1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	edc3 7a07 	vstr	s15, [r3, #28]
		m_mc = (pow(2,11) / pow(160,2)) * m_MC;
 8004a26:	210b      	movs	r1, #11
 8004a28:	2002      	movs	r0, #2
 8004a2a:	f000 fc6c 	bl	8005306 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8004a2e:	ec55 4b10 	vmov	r4, r5, d0
 8004a32:	2102      	movs	r1, #2
 8004a34:	20a0      	movs	r0, #160	; 0xa0
 8004a36:	f000 fc66 	bl	8005306 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8004a3a:	ec53 2b10 	vmov	r2, r3, d0
 8004a3e:	4620      	mov	r0, r4
 8004a40:	4629      	mov	r1, r5
 8004a42:	f7fb feff 	bl	8000844 <__aeabi_ddiv>
 8004a46:	4603      	mov	r3, r0
 8004a48:	460c      	mov	r4, r1
 8004a4a:	4625      	mov	r5, r4
 8004a4c:	461c      	mov	r4, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7fb fd65 	bl	8000524 <__aeabi_i2d>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	4620      	mov	r0, r4
 8004a60:	4629      	mov	r1, r5
 8004a62:	f7fb fdc5 	bl	80005f0 <__aeabi_dmul>
 8004a66:	4603      	mov	r3, r0
 8004a68:	460c      	mov	r4, r1
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	4621      	mov	r1, r4
 8004a6e:	f7fc f897 	bl	8000ba0 <__aeabi_d2f>
 8004a72:	4602      	mov	r2, r0
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	621a      	str	r2, [r3, #32]
		m_md = m_MD / 160.0;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7fb fd50 	bl	8000524 <__aeabi_i2d>
 8004a84:	f04f 0200 	mov.w	r2, #0
 8004a88:	4b56      	ldr	r3, [pc, #344]	; (8004be4 <_ZN10SFE_BMP1805BeginEv+0x4a4>)
 8004a8a:	f7fb fedb 	bl	8000844 <__aeabi_ddiv>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	460c      	mov	r4, r1
 8004a92:	4618      	mov	r0, r3
 8004a94:	4621      	mov	r1, r4
 8004a96:	f7fc f883 	bl	8000ba0 <__aeabi_d2f>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	625a      	str	r2, [r3, #36]	; 0x24
		m_x0 = m_AC1;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004aa6:	ee07 3a90 	vmov	s15, r3
 8004aaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		m_x1 = 160.0 * pow(2,-13) * m_AC2;
 8004ab4:	f06f 010c 	mvn.w	r1, #12
 8004ab8:	2002      	movs	r0, #2
 8004aba:	f000 fc24 	bl	8005306 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8004abe:	ec51 0b10 	vmov	r0, r1, d0
 8004ac2:	f04f 0200 	mov.w	r2, #0
 8004ac6:	4b47      	ldr	r3, [pc, #284]	; (8004be4 <_ZN10SFE_BMP1805BeginEv+0x4a4>)
 8004ac8:	f7fb fd92 	bl	80005f0 <__aeabi_dmul>
 8004acc:	4603      	mov	r3, r0
 8004ace:	460c      	mov	r4, r1
 8004ad0:	4625      	mov	r5, r4
 8004ad2:	461c      	mov	r4, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7fb fd22 	bl	8000524 <__aeabi_i2d>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	4620      	mov	r0, r4
 8004ae6:	4629      	mov	r1, r5
 8004ae8:	f7fb fd82 	bl	80005f0 <__aeabi_dmul>
 8004aec:	4603      	mov	r3, r0
 8004aee:	460c      	mov	r4, r1
 8004af0:	4618      	mov	r0, r3
 8004af2:	4621      	mov	r1, r4
 8004af4:	f7fc f854 	bl	8000ba0 <__aeabi_d2f>
 8004af8:	4602      	mov	r2, r0
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	62da      	str	r2, [r3, #44]	; 0x2c
		m_x2 = pow(160,2) * pow(2,-25) * m_VB2;
 8004afe:	2102      	movs	r1, #2
 8004b00:	20a0      	movs	r0, #160	; 0xa0
 8004b02:	f000 fc00 	bl	8005306 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8004b06:	ec55 4b10 	vmov	r4, r5, d0
 8004b0a:	f06f 0118 	mvn.w	r1, #24
 8004b0e:	2002      	movs	r0, #2
 8004b10:	f000 fbf9 	bl	8005306 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8004b14:	ec53 2b10 	vmov	r2, r3, d0
 8004b18:	4620      	mov	r0, r4
 8004b1a:	4629      	mov	r1, r5
 8004b1c:	f7fb fd68 	bl	80005f0 <__aeabi_dmul>
 8004b20:	4603      	mov	r3, r0
 8004b22:	460c      	mov	r4, r1
 8004b24:	4625      	mov	r5, r4
 8004b26:	461c      	mov	r4, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7fb fcf8 	bl	8000524 <__aeabi_i2d>
 8004b34:	4602      	mov	r2, r0
 8004b36:	460b      	mov	r3, r1
 8004b38:	4620      	mov	r0, r4
 8004b3a:	4629      	mov	r1, r5
 8004b3c:	f7fb fd58 	bl	80005f0 <__aeabi_dmul>
 8004b40:	4603      	mov	r3, r0
 8004b42:	460c      	mov	r4, r1
 8004b44:	4618      	mov	r0, r3
 8004b46:	4621      	mov	r1, r4
 8004b48:	f7fc f82a 	bl	8000ba0 <__aeabi_d2f>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	631a      	str	r2, [r3, #48]	; 0x30
		m_y0 = c4 * pow(2,15);
 8004b52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b54:	f7fb fcf8 	bl	8000548 <__aeabi_f2d>
 8004b58:	4604      	mov	r4, r0
 8004b5a:	460d      	mov	r5, r1
 8004b5c:	210f      	movs	r1, #15
 8004b5e:	2002      	movs	r0, #2
 8004b60:	f000 fbd1 	bl	8005306 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8004b64:	ec53 2b10 	vmov	r2, r3, d0
 8004b68:	4620      	mov	r0, r4
 8004b6a:	4629      	mov	r1, r5
 8004b6c:	f7fb fd40 	bl	80005f0 <__aeabi_dmul>
 8004b70:	4603      	mov	r3, r0
 8004b72:	460c      	mov	r4, r1
 8004b74:	4618      	mov	r0, r3
 8004b76:	4621      	mov	r1, r4
 8004b78:	f7fc f812 	bl	8000ba0 <__aeabi_d2f>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	635a      	str	r2, [r3, #52]	; 0x34
		m_y1 = c4 * c3;
 8004b82:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8004b86:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		m_y2 = c4 * b1;
 8004b94:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8004b98:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		m_y0 = (3791.0 - 8.0) / 1600.0;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a0f      	ldr	r2, [pc, #60]	; (8004be8 <_ZN10SFE_BMP1805BeginEv+0x4a8>)
 8004baa:	635a      	str	r2, [r3, #52]	; 0x34
		m_y1 = 1.0 - 7357.0 * pow(2,-20);
 8004bac:	f06f 0113 	mvn.w	r1, #19
 8004bb0:	2002      	movs	r0, #2
 8004bb2:	f000 fba8 	bl	8005306 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8004bb6:	e019      	b.n	8004bec <_ZN10SFE_BMP1805BeginEv+0x4ac>
 8004bb8:	0800a390 	.word	0x0800a390
 8004bbc:	0800a3a4 	.word	0x0800a3a4
 8004bc0:	0800a3b8 	.word	0x0800a3b8
 8004bc4:	0800a3cc 	.word	0x0800a3cc
 8004bc8:	0800a3e0 	.word	0x0800a3e0
 8004bcc:	0800a3f4 	.word	0x0800a3f4
 8004bd0:	0800a408 	.word	0x0800a408
 8004bd4:	0800a41c 	.word	0x0800a41c
 8004bd8:	0800a430 	.word	0x0800a430
 8004bdc:	0800a440 	.word	0x0800a440
 8004be0:	0800a450 	.word	0x0800a450
 8004be4:	40640000 	.word	0x40640000
 8004be8:	401751ec 	.word	0x401751ec
 8004bec:	ec51 0b10 	vmov	r0, r1, d0
 8004bf0:	a38a      	add	r3, pc, #552	; (adr r3, 8004e1c <_ZN10SFE_BMP1805BeginEv+0x6dc>)
 8004bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf6:	f7fb fcfb 	bl	80005f0 <__aeabi_dmul>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	460c      	mov	r4, r1
 8004bfe:	461a      	mov	r2, r3
 8004c00:	4623      	mov	r3, r4
 8004c02:	f04f 0000 	mov.w	r0, #0
 8004c06:	4974      	ldr	r1, [pc, #464]	; (8004dd8 <_ZN10SFE_BMP1805BeginEv+0x698>)
 8004c08:	f7fb fb3e 	bl	8000288 <__aeabi_dsub>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	460c      	mov	r4, r1
 8004c10:	4618      	mov	r0, r3
 8004c12:	4621      	mov	r1, r4
 8004c14:	f7fb ffc4 	bl	8000ba0 <__aeabi_d2f>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	639a      	str	r2, [r3, #56]	; 0x38
		m_y2 = 3038.0 * 100.0 * pow(2,-36);
 8004c1e:	f06f 0123 	mvn.w	r1, #35	; 0x23
 8004c22:	2002      	movs	r0, #2
 8004c24:	f000 fb6f 	bl	8005306 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8004c28:	ec51 0b10 	vmov	r0, r1, d0
 8004c2c:	a368      	add	r3, pc, #416	; (adr r3, 8004dd0 <_ZN10SFE_BMP1805BeginEv+0x690>)
 8004c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c32:	f7fb fcdd 	bl	80005f0 <__aeabi_dmul>
 8004c36:	4603      	mov	r3, r0
 8004c38:	460c      	mov	r4, r1
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	4621      	mov	r1, r4
 8004c3e:	f7fb ffaf 	bl	8000ba0 <__aeabi_d2f>
 8004c42:	4602      	mov	r2, r0
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	63da      	str	r2, [r3, #60]	; 0x3c

		printf("BMP180: c3=%f\n", c3);
 8004c48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c4a:	f7fb fc7d 	bl	8000548 <__aeabi_f2d>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	460c      	mov	r4, r1
 8004c52:	461a      	mov	r2, r3
 8004c54:	4623      	mov	r3, r4
 8004c56:	4861      	ldr	r0, [pc, #388]	; (8004ddc <_ZN10SFE_BMP1805BeginEv+0x69c>)
 8004c58:	f003 fc00 	bl	800845c <iprintf>
		printf("BMP180: c4=%f\n", c4);
 8004c5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c5e:	f7fb fc73 	bl	8000548 <__aeabi_f2d>
 8004c62:	4603      	mov	r3, r0
 8004c64:	460c      	mov	r4, r1
 8004c66:	461a      	mov	r2, r3
 8004c68:	4623      	mov	r3, r4
 8004c6a:	485d      	ldr	r0, [pc, #372]	; (8004de0 <_ZN10SFE_BMP1805BeginEv+0x6a0>)
 8004c6c:	f003 fbf6 	bl	800845c <iprintf>
		printf("BMP180: m_c5=%f\n", m_c5);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	4618      	mov	r0, r3
 8004c76:	f7fb fc67 	bl	8000548 <__aeabi_f2d>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	460c      	mov	r4, r1
 8004c7e:	461a      	mov	r2, r3
 8004c80:	4623      	mov	r3, r4
 8004c82:	4858      	ldr	r0, [pc, #352]	; (8004de4 <_ZN10SFE_BMP1805BeginEv+0x6a4>)
 8004c84:	f003 fbea 	bl	800845c <iprintf>
		printf("BMP180: m_c6=%f\n", m_c6);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	69db      	ldr	r3, [r3, #28]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7fb fc5b 	bl	8000548 <__aeabi_f2d>
 8004c92:	4603      	mov	r3, r0
 8004c94:	460c      	mov	r4, r1
 8004c96:	461a      	mov	r2, r3
 8004c98:	4623      	mov	r3, r4
 8004c9a:	4853      	ldr	r0, [pc, #332]	; (8004de8 <_ZN10SFE_BMP1805BeginEv+0x6a8>)
 8004c9c:	f003 fbde 	bl	800845c <iprintf>
		printf("BMP180: b1=%f\n", b1);
 8004ca0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ca2:	f7fb fc51 	bl	8000548 <__aeabi_f2d>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	460c      	mov	r4, r1
 8004caa:	461a      	mov	r2, r3
 8004cac:	4623      	mov	r3, r4
 8004cae:	484f      	ldr	r0, [pc, #316]	; (8004dec <_ZN10SFE_BMP1805BeginEv+0x6ac>)
 8004cb0:	f003 fbd4 	bl	800845c <iprintf>
		printf("BMP180: m_mc=%f\n", m_mc);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a1b      	ldr	r3, [r3, #32]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7fb fc45 	bl	8000548 <__aeabi_f2d>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	460c      	mov	r4, r1
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	4623      	mov	r3, r4
 8004cc6:	484a      	ldr	r0, [pc, #296]	; (8004df0 <_ZN10SFE_BMP1805BeginEv+0x6b0>)
 8004cc8:	f003 fbc8 	bl	800845c <iprintf>
		printf("BMP180: m_md=%f\n", m_md);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7fb fc39 	bl	8000548 <__aeabi_f2d>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	460c      	mov	r4, r1
 8004cda:	461a      	mov	r2, r3
 8004cdc:	4623      	mov	r3, r4
 8004cde:	4845      	ldr	r0, [pc, #276]	; (8004df4 <_ZN10SFE_BMP1805BeginEv+0x6b4>)
 8004ce0:	f003 fbbc 	bl	800845c <iprintf>
		printf("BMP180: m_x0=%f\n", m_x0);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7fb fc2d 	bl	8000548 <__aeabi_f2d>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	460c      	mov	r4, r1
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	4623      	mov	r3, r4
 8004cf6:	4840      	ldr	r0, [pc, #256]	; (8004df8 <_ZN10SFE_BMP1805BeginEv+0x6b8>)
 8004cf8:	f003 fbb0 	bl	800845c <iprintf>
		printf("BMP180: m_x1=%f\n", m_x1);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7fb fc21 	bl	8000548 <__aeabi_f2d>
 8004d06:	4603      	mov	r3, r0
 8004d08:	460c      	mov	r4, r1
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	4623      	mov	r3, r4
 8004d0e:	483b      	ldr	r0, [pc, #236]	; (8004dfc <_ZN10SFE_BMP1805BeginEv+0x6bc>)
 8004d10:	f003 fba4 	bl	800845c <iprintf>
		printf("BMP180: m_x2=%f\n", m_x2);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7fb fc15 	bl	8000548 <__aeabi_f2d>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	460c      	mov	r4, r1
 8004d22:	461a      	mov	r2, r3
 8004d24:	4623      	mov	r3, r4
 8004d26:	4836      	ldr	r0, [pc, #216]	; (8004e00 <_ZN10SFE_BMP1805BeginEv+0x6c0>)
 8004d28:	f003 fb98 	bl	800845c <iprintf>
		printf("BMP180: m_y0=%f\n", m_y0);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7fb fc09 	bl	8000548 <__aeabi_f2d>
 8004d36:	4603      	mov	r3, r0
 8004d38:	460c      	mov	r4, r1
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	4623      	mov	r3, r4
 8004d3e:	4831      	ldr	r0, [pc, #196]	; (8004e04 <_ZN10SFE_BMP1805BeginEv+0x6c4>)
 8004d40:	f003 fb8c 	bl	800845c <iprintf>
		printf("BMP180: m_y1=%f\n", m_y1);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7fb fbfd 	bl	8000548 <__aeabi_f2d>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	460c      	mov	r4, r1
 8004d52:	461a      	mov	r2, r3
 8004d54:	4623      	mov	r3, r4
 8004d56:	482c      	ldr	r0, [pc, #176]	; (8004e08 <_ZN10SFE_BMP1805BeginEv+0x6c8>)
 8004d58:	f003 fb80 	bl	800845c <iprintf>
		printf("BMP180: m_y2=%f\n", m_y2);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7fb fbf1 	bl	8000548 <__aeabi_f2d>
 8004d66:	4603      	mov	r3, r0
 8004d68:	460c      	mov	r4, r1
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	4623      	mov	r3, r4
 8004d6e:	4827      	ldr	r0, [pc, #156]	; (8004e0c <_ZN10SFE_BMP1805BeginEv+0x6cc>)
 8004d70:	f003 fb74 	bl	800845c <iprintf>
		printf("BMP180: m_p0=%f\n", m_p0);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7fb fbe5 	bl	8000548 <__aeabi_f2d>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	460c      	mov	r4, r1
 8004d82:	461a      	mov	r2, r3
 8004d84:	4623      	mov	r3, r4
 8004d86:	4822      	ldr	r0, [pc, #136]	; (8004e10 <_ZN10SFE_BMP1805BeginEv+0x6d0>)
 8004d88:	f003 fb68 	bl	800845c <iprintf>
		printf("BMP180: m_p1=%f\n", m_p1);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7fb fbd9 	bl	8000548 <__aeabi_f2d>
 8004d96:	4603      	mov	r3, r0
 8004d98:	460c      	mov	r4, r1
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	4623      	mov	r3, r4
 8004d9e:	481d      	ldr	r0, [pc, #116]	; (8004e14 <_ZN10SFE_BMP1805BeginEv+0x6d4>)
 8004da0:	f003 fb5c 	bl	800845c <iprintf>
		printf("BMP180: m_p2=%f\n", m_p2);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7fb fbcd 	bl	8000548 <__aeabi_f2d>
 8004dae:	4603      	mov	r3, r0
 8004db0:	460c      	mov	r4, r1
 8004db2:	461a      	mov	r2, r3
 8004db4:	4623      	mov	r3, r4
 8004db6:	4818      	ldr	r0, [pc, #96]	; (8004e18 <_ZN10SFE_BMP1805BeginEv+0x6d8>)
 8004db8:	f003 fb50 	bl	800845c <iprintf>
		
		// Success!
		return true;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e000      	b.n	8004dc2 <_ZN10SFE_BMP1805BeginEv+0x682>
	}
	else
	{
		// Error reading calibration data; bad component or connection?
		return false;
 8004dc0:	2300      	movs	r3, #0
	}
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3730      	adds	r7, #48	; 0x30
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bdb0      	pop	{r4, r5, r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	f3af 8000 	nop.w
 8004dd0:	00000000 	.word	0x00000000
 8004dd4:	41128ae0 	.word	0x41128ae0
 8004dd8:	3ff00000 	.word	0x3ff00000
 8004ddc:	0800a460 	.word	0x0800a460
 8004de0:	0800a470 	.word	0x0800a470
 8004de4:	0800a480 	.word	0x0800a480
 8004de8:	0800a494 	.word	0x0800a494
 8004dec:	0800a4a8 	.word	0x0800a4a8
 8004df0:	0800a4b8 	.word	0x0800a4b8
 8004df4:	0800a4cc 	.word	0x0800a4cc
 8004df8:	0800a4e0 	.word	0x0800a4e0
 8004dfc:	0800a4f4 	.word	0x0800a4f4
 8004e00:	0800a508 	.word	0x0800a508
 8004e04:	0800a51c 	.word	0x0800a51c
 8004e08:	0800a530 	.word	0x0800a530
 8004e0c:	0800a544 	.word	0x0800a544
 8004e10:	0800a558 	.word	0x0800a558
 8004e14:	0800a56c 	.word	0x0800a56c
 8004e18:	0800a580 	.word	0x0800a580
 8004e1c:	00000000 	.word	0x00000000
 8004e20:	40bcbd00 	.word	0x40bcbd00

08004e24 <_ZN10SFE_BMP18016StartTemperatureEv>:


byte SFE_BMP180::StartTemperature(void)
// Begin a temperature reading.
// Will return delay in ms to wait, or 0 if I2C error
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
	byte data;
	bool result;

	data = BMP180_COMMAND_TEMPERATURE;
 8004e2c:	232e      	movs	r3, #46	; 0x2e
 8004e2e:	73bb      	strb	r3, [r7, #14]

	result = WriteBytes(BMP180_REG_CONTROL, &data, 1);
 8004e30:	f107 020e 	add.w	r2, r7, #14
 8004e34:	2301      	movs	r3, #1
 8004e36:	21f4      	movs	r1, #244	; 0xf4
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 fa3a 	bl	80052b2 <_ZN10SFE_BMP18010WriteBytesEhPhi>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	73fb      	strb	r3, [r7, #15]
	
	if (result) 	// good write?
 8004e42:	7bfb      	ldrb	r3, [r7, #15]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d001      	beq.n	8004e4c <_ZN10SFE_BMP18016StartTemperatureEv+0x28>
		return 5; 	// return the delay in ms (rounded up) to wait before retrieving data
 8004e48:	2305      	movs	r3, #5
 8004e4a:	e000      	b.n	8004e4e <_ZN10SFE_BMP18016StartTemperatureEv+0x2a>
	else
		return 0; 	// or return 0 if there was a problem communicating with the BMP
 8004e4c:	2300      	movs	r3, #0
	
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
	...

08004e58 <_ZN10SFE_BMP18014GetTemperatureERf>:
// Retrieve a previously-started temperature reading.
// Requires begin() to be called once prior to retrieve calibration parameters.
// Requires startTemperature() to have been called prior and sufficient time elapsed.
// T: external variable to hold result.
// Returns 1 if successful, 0 if I2C error.
{
 8004e58:	b5b0      	push	{r4, r5, r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
	byte data[2];
	bool result;
	float tu, a;
	

	result = ReadBytes(BMP180_REG_RESULT, data, 2);
 8004e62:	f107 0208 	add.w	r2, r7, #8
 8004e66:	2302      	movs	r3, #2
 8004e68:	21f6      	movs	r1, #246	; 0xf6
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 f9ca 	bl	8005204 <_ZN10SFE_BMP1809ReadBytesEhPhi>
 8004e70:	4603      	mov	r3, r0
 8004e72:	75fb      	strb	r3, [r7, #23]

	if (result) // good read, calculate temperature
 8004e74:	7dfb      	ldrb	r3, [r7, #23]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d05f      	beq.n	8004f3a <_ZN10SFE_BMP18014GetTemperatureERf+0xe2>
	{
		tu = (data[0] * 256.0) + data[1];
 8004e7a:	7a3b      	ldrb	r3, [r7, #8]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7fb fb51 	bl	8000524 <__aeabi_i2d>
 8004e82:	f04f 0200 	mov.w	r2, #0
 8004e86:	4b2f      	ldr	r3, [pc, #188]	; (8004f44 <_ZN10SFE_BMP18014GetTemperatureERf+0xec>)
 8004e88:	f7fb fbb2 	bl	80005f0 <__aeabi_dmul>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	460c      	mov	r4, r1
 8004e90:	4625      	mov	r5, r4
 8004e92:	461c      	mov	r4, r3
 8004e94:	7a7b      	ldrb	r3, [r7, #9]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7fb fb44 	bl	8000524 <__aeabi_i2d>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	4629      	mov	r1, r5
 8004ea4:	f7fb f9f2 	bl	800028c <__adddf3>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	460c      	mov	r4, r1
 8004eac:	4618      	mov	r0, r3
 8004eae:	4621      	mov	r1, r4
 8004eb0:	f7fb fe76 	bl	8000ba0 <__aeabi_d2f>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	613b      	str	r3, [r7, #16]
		//tu = 27898;

		//example from http://wmrx00.sourceforge.net/Arduino/BMP085-Calcs.pdf
		//tu = 0x69EC;
		
		a = m_c5 * (tu - m_c6);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	ed93 7a06 	vldr	s14, [r3, #24]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	edd3 7a07 	vldr	s15, [r3, #28]
 8004ec4:	edd7 6a04 	vldr	s13, [r7, #16]
 8004ec8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004ecc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ed0:	edc7 7a03 	vstr	s15, [r7, #12]
		temperature = a + (m_mc / (a + m_md));
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	edd3 6a08 	vldr	s13, [r3, #32]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8004ee0:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ee4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ee8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eec:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ef0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	edc3 7a00 	vstr	s15, [r3]

		printf("BMP_GetTemperature: tu=%f\n", tu);
 8004efa:	6938      	ldr	r0, [r7, #16]
 8004efc:	f7fb fb24 	bl	8000548 <__aeabi_f2d>
 8004f00:	4603      	mov	r3, r0
 8004f02:	460c      	mov	r4, r1
 8004f04:	461a      	mov	r2, r3
 8004f06:	4623      	mov	r3, r4
 8004f08:	480f      	ldr	r0, [pc, #60]	; (8004f48 <_ZN10SFE_BMP18014GetTemperatureERf+0xf0>)
 8004f0a:	f003 faa7 	bl	800845c <iprintf>
		printf("BMP_GetTemperature: a=%f\n", a);
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f7fb fb1a 	bl	8000548 <__aeabi_f2d>
 8004f14:	4603      	mov	r3, r0
 8004f16:	460c      	mov	r4, r1
 8004f18:	461a      	mov	r2, r3
 8004f1a:	4623      	mov	r3, r4
 8004f1c:	480b      	ldr	r0, [pc, #44]	; (8004f4c <_ZN10SFE_BMP18014GetTemperatureERf+0xf4>)
 8004f1e:	f003 fa9d 	bl	800845c <iprintf>
		printf("BMP_GetTemperature: temperature=%f\n", temperature);
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7fb fb0e 	bl	8000548 <__aeabi_f2d>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	460c      	mov	r4, r1
 8004f30:	461a      	mov	r2, r3
 8004f32:	4623      	mov	r3, r4
 8004f34:	4806      	ldr	r0, [pc, #24]	; (8004f50 <_ZN10SFE_BMP18014GetTemperatureERf+0xf8>)
 8004f36:	f003 fa91 	bl	800845c <iprintf>
	}

	return(result);
 8004f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3718      	adds	r7, #24
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bdb0      	pop	{r4, r5, r7, pc}
 8004f44:	40700000 	.word	0x40700000
 8004f48:	0800a594 	.word	0x0800a594
 8004f4c:	0800a5b0 	.word	0x0800a5b0
 8004f50:	0800a5cc 	.word	0x0800a5cc

08004f54 <_ZN10SFE_BMP18013StartPressureEi>:

byte SFE_BMP180::StartPressure(int oversampling)
// Begin a pressure reading.
// Over sampling: 0 to 3, higher numbers are slower, higher-res outputs.
// Will return delay in ms to wait, or 0 if I2C error.
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
	byte data;
	bool result;
	byte delay;
	
	switch (oversampling)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	2b03      	cmp	r3, #3
 8004f62:	d81f      	bhi.n	8004fa4 <_ZN10SFE_BMP18013StartPressureEi+0x50>
 8004f64:	a201      	add	r2, pc, #4	; (adr r2, 8004f6c <_ZN10SFE_BMP18013StartPressureEi+0x18>)
 8004f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6a:	bf00      	nop
 8004f6c:	08004f7d 	.word	0x08004f7d
 8004f70:	08004f87 	.word	0x08004f87
 8004f74:	08004f91 	.word	0x08004f91
 8004f78:	08004f9b 	.word	0x08004f9b
	{
		case 0:
			data = BMP180_COMMAND_PRESSURE0;
 8004f7c:	2334      	movs	r3, #52	; 0x34
 8004f7e:	737b      	strb	r3, [r7, #13]
			delay = 5;
 8004f80:	2305      	movs	r3, #5
 8004f82:	73fb      	strb	r3, [r7, #15]
		break;
 8004f84:	e013      	b.n	8004fae <_ZN10SFE_BMP18013StartPressureEi+0x5a>
		case 1:
			data = BMP180_COMMAND_PRESSURE1;
 8004f86:	2374      	movs	r3, #116	; 0x74
 8004f88:	737b      	strb	r3, [r7, #13]
			delay = 8;
 8004f8a:	2308      	movs	r3, #8
 8004f8c:	73fb      	strb	r3, [r7, #15]
		break;
 8004f8e:	e00e      	b.n	8004fae <_ZN10SFE_BMP18013StartPressureEi+0x5a>
		case 2:
			data = BMP180_COMMAND_PRESSURE2;
 8004f90:	23b4      	movs	r3, #180	; 0xb4
 8004f92:	737b      	strb	r3, [r7, #13]
			delay = 14;
 8004f94:	230e      	movs	r3, #14
 8004f96:	73fb      	strb	r3, [r7, #15]
		break;
 8004f98:	e009      	b.n	8004fae <_ZN10SFE_BMP18013StartPressureEi+0x5a>
		case 3:
			data = BMP180_COMMAND_PRESSURE3;
 8004f9a:	23f4      	movs	r3, #244	; 0xf4
 8004f9c:	737b      	strb	r3, [r7, #13]
			delay = 26;
 8004f9e:	231a      	movs	r3, #26
 8004fa0:	73fb      	strb	r3, [r7, #15]
		break;
 8004fa2:	e004      	b.n	8004fae <_ZN10SFE_BMP18013StartPressureEi+0x5a>
		default:
			data = BMP180_COMMAND_PRESSURE0;
 8004fa4:	2334      	movs	r3, #52	; 0x34
 8004fa6:	737b      	strb	r3, [r7, #13]
			delay = 5;
 8004fa8:	2305      	movs	r3, #5
 8004faa:	73fb      	strb	r3, [r7, #15]
		break;
 8004fac:	bf00      	nop
	}
	result = WriteBytes(BMP180_REG_CONTROL, &data, 1);
 8004fae:	f107 020d 	add.w	r2, r7, #13
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	21f4      	movs	r1, #244	; 0xf4
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f97b 	bl	80052b2 <_ZN10SFE_BMP18010WriteBytesEhPhi>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	73bb      	strb	r3, [r7, #14]

	if (result) // good write?
 8004fc0:	7bbb      	ldrb	r3, [r7, #14]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <_ZN10SFE_BMP18013StartPressureEi+0x76>
		return(delay); // return the delay in ms (rounded up) to wait before retrieving data
 8004fc6:	7bfb      	ldrb	r3, [r7, #15]
 8004fc8:	e000      	b.n	8004fcc <_ZN10SFE_BMP18013StartPressureEi+0x78>
	else
		return(0); // or return 0 if there was a problem communicating with the BMP
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <_ZN10SFE_BMP18011GetPressureERff>:
// pressure: external variable to hold pressure.
// temperature: previously-calculated temperature.
// Returns 1 for success, 0 for I2C error.

// Note that calculated pressure value is absolute mbars, to compensate for altitude call SeaLevel().
{
 8004fd4:	b5b0      	push	{r4, r5, r7, lr}
 8004fd6:	ed2d 8b02 	vpush	{d8}
 8004fda:	b08e      	sub	sp, #56	; 0x38
 8004fdc:	af02      	add	r7, sp, #8
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	ed87 0a01 	vstr	s0, [r7, #4]
	byte data[3];
	bool result;
	float pu,s,x,y,z;

	result = ReadBytes(BMP180_REG_RESULT, data, 3);
 8004fe6:	f107 0214 	add.w	r2, r7, #20
 8004fea:	2303      	movs	r3, #3
 8004fec:	21f6      	movs	r1, #246	; 0xf6
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f000 f908 	bl	8005204 <_ZN10SFE_BMP1809ReadBytesEhPhi>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	
	if (result) 	// good read, calculate pressure
 8004ffa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f000 80e6 	beq.w	80051d0 <_ZN10SFE_BMP18011GetPressureERff+0x1fc>
	{
		pu = (data[0] * 256.0) + data[1] + (data[2]/256.0);
 8005004:	7d3b      	ldrb	r3, [r7, #20]
 8005006:	4618      	mov	r0, r3
 8005008:	f7fb fa8c 	bl	8000524 <__aeabi_i2d>
 800500c:	f04f 0200 	mov.w	r2, #0
 8005010:	4b73      	ldr	r3, [pc, #460]	; (80051e0 <_ZN10SFE_BMP18011GetPressureERff+0x20c>)
 8005012:	f7fb faed 	bl	80005f0 <__aeabi_dmul>
 8005016:	4603      	mov	r3, r0
 8005018:	460c      	mov	r4, r1
 800501a:	4625      	mov	r5, r4
 800501c:	461c      	mov	r4, r3
 800501e:	7d7b      	ldrb	r3, [r7, #21]
 8005020:	4618      	mov	r0, r3
 8005022:	f7fb fa7f 	bl	8000524 <__aeabi_i2d>
 8005026:	4602      	mov	r2, r0
 8005028:	460b      	mov	r3, r1
 800502a:	4620      	mov	r0, r4
 800502c:	4629      	mov	r1, r5
 800502e:	f7fb f92d 	bl	800028c <__adddf3>
 8005032:	4603      	mov	r3, r0
 8005034:	460c      	mov	r4, r1
 8005036:	4625      	mov	r5, r4
 8005038:	461c      	mov	r4, r3
 800503a:	7dbb      	ldrb	r3, [r7, #22]
 800503c:	4618      	mov	r0, r3
 800503e:	f7fb fa71 	bl	8000524 <__aeabi_i2d>
 8005042:	f04f 0200 	mov.w	r2, #0
 8005046:	4b66      	ldr	r3, [pc, #408]	; (80051e0 <_ZN10SFE_BMP18011GetPressureERff+0x20c>)
 8005048:	f7fb fbfc 	bl	8000844 <__aeabi_ddiv>
 800504c:	4602      	mov	r2, r0
 800504e:	460b      	mov	r3, r1
 8005050:	4620      	mov	r0, r4
 8005052:	4629      	mov	r1, r5
 8005054:	f7fb f91a 	bl	800028c <__adddf3>
 8005058:	4603      	mov	r3, r0
 800505a:	460c      	mov	r4, r1
 800505c:	4618      	mov	r0, r3
 800505e:	4621      	mov	r1, r4
 8005060:	f7fb fd9e 	bl	8000ba0 <__aeabi_d2f>
 8005064:	4603      	mov	r3, r0
 8005066:	62bb      	str	r3, [r7, #40]	; 0x28
		//pu = 23843;

		//example from http://wmrx00.sourceforge.net/Arduino/BMP085-Calcs.pdf, pu = 0x982FC0;	
		//pu = (0x98 * 256.0) + 0x2F + (0xC0/256.0);
		
		s = temperature - 25.0;
 8005068:	edd7 7a01 	vldr	s15, [r7, #4]
 800506c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005070:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005074:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		x = (m_x2 * pow(s, 2)) + (m_x1 * s) + m_x0;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	ed93 8a0c 	vldr	s16, [r3, #48]	; 0x30
 800507e:	2002      	movs	r0, #2
 8005080:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8005084:	f7ff fb3b 	bl	80046fe <_ZSt3powfi>
 8005088:	eef0 7a40 	vmov.f32	s15, s0
 800508c:	ee28 7a27 	vmul.f32	s14, s16, s15
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8005096:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800509a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800509e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80050a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050ac:	edc7 7a08 	vstr	s15, [r7, #32]
		y = (m_y2 * pow(s, 2)) + (m_y1 * s) + m_y0;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	ed93 8a0f 	vldr	s16, [r3, #60]	; 0x3c
 80050b6:	2002      	movs	r0, #2
 80050b8:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80050bc:	f7ff fb1f 	bl	80046fe <_ZSt3powfi>
 80050c0:	eef0 7a40 	vmov.f32	s15, s0
 80050c4:	ee28 7a27 	vmul.f32	s14, s16, s15
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80050ce:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80050d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80050e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050e4:	edc7 7a07 	vstr	s15, [r7, #28]
		z = (pu - x) / y;
 80050e8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80050ec:	edd7 7a08 	vldr	s15, [r7, #32]
 80050f0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80050f4:	ed97 7a07 	vldr	s14, [r7, #28]
 80050f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050fc:	edc7 7a06 	vstr	s15, [r7, #24]
		pressure = (m_p2 * pow(z, 2)) + (m_p1 * z) + m_p0;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	ed93 8a12 	vldr	s16, [r3, #72]	; 0x48
 8005106:	2002      	movs	r0, #2
 8005108:	ed97 0a06 	vldr	s0, [r7, #24]
 800510c:	f7ff faf7 	bl	80046fe <_ZSt3powfi>
 8005110:	eef0 7a40 	vmov.f32	s15, s0
 8005114:	ee28 7a27 	vmul.f32	s14, s16, s15
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 800511e:	edd7 7a06 	vldr	s15, [r7, #24]
 8005122:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005126:	ee37 7a27 	vadd.f32	s14, s14, s15
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8005130:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	edc3 7a00 	vstr	s15, [r3]

		printf("%s(%d): Pressure=%f\n", __FUNCTION__, __LINE__, pressure);
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4618      	mov	r0, r3
 8005140:	f7fb fa02 	bl	8000548 <__aeabi_f2d>
 8005144:	4603      	mov	r3, r0
 8005146:	460c      	mov	r4, r1
 8005148:	e88d 0018 	stmia.w	sp, {r3, r4}
 800514c:	f44f 7283 	mov.w	r2, #262	; 0x106
 8005150:	4924      	ldr	r1, [pc, #144]	; (80051e4 <_ZN10SFE_BMP18011GetPressureERff+0x210>)
 8005152:	4825      	ldr	r0, [pc, #148]	; (80051e8 <_ZN10SFE_BMP18011GetPressureERff+0x214>)
 8005154:	f003 f982 	bl	800845c <iprintf>
		printf("BMP180: Temp=%f\n", temperature);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f7fb f9f5 	bl	8000548 <__aeabi_f2d>
 800515e:	4603      	mov	r3, r0
 8005160:	460c      	mov	r4, r1
 8005162:	461a      	mov	r2, r3
 8005164:	4623      	mov	r3, r4
 8005166:	4821      	ldr	r0, [pc, #132]	; (80051ec <_ZN10SFE_BMP18011GetPressureERff+0x218>)
 8005168:	f003 f978 	bl	800845c <iprintf>
		printf("BMP180: s=%f\n", s);
 800516c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800516e:	f7fb f9eb 	bl	8000548 <__aeabi_f2d>
 8005172:	4603      	mov	r3, r0
 8005174:	460c      	mov	r4, r1
 8005176:	461a      	mov	r2, r3
 8005178:	4623      	mov	r3, r4
 800517a:	481d      	ldr	r0, [pc, #116]	; (80051f0 <_ZN10SFE_BMP18011GetPressureERff+0x21c>)
 800517c:	f003 f96e 	bl	800845c <iprintf>
		printf("BMP180: x=%f\n", x);
 8005180:	6a38      	ldr	r0, [r7, #32]
 8005182:	f7fb f9e1 	bl	8000548 <__aeabi_f2d>
 8005186:	4603      	mov	r3, r0
 8005188:	460c      	mov	r4, r1
 800518a:	461a      	mov	r2, r3
 800518c:	4623      	mov	r3, r4
 800518e:	4819      	ldr	r0, [pc, #100]	; (80051f4 <_ZN10SFE_BMP18011GetPressureERff+0x220>)
 8005190:	f003 f964 	bl	800845c <iprintf>
		printf("BMP180: y=%f\n", y);
 8005194:	69f8      	ldr	r0, [r7, #28]
 8005196:	f7fb f9d7 	bl	8000548 <__aeabi_f2d>
 800519a:	4603      	mov	r3, r0
 800519c:	460c      	mov	r4, r1
 800519e:	461a      	mov	r2, r3
 80051a0:	4623      	mov	r3, r4
 80051a2:	4815      	ldr	r0, [pc, #84]	; (80051f8 <_ZN10SFE_BMP18011GetPressureERff+0x224>)
 80051a4:	f003 f95a 	bl	800845c <iprintf>
		printf("BMP180: z=%f\n", z);
 80051a8:	69b8      	ldr	r0, [r7, #24]
 80051aa:	f7fb f9cd 	bl	8000548 <__aeabi_f2d>
 80051ae:	4603      	mov	r3, r0
 80051b0:	460c      	mov	r4, r1
 80051b2:	461a      	mov	r2, r3
 80051b4:	4623      	mov	r3, r4
 80051b6:	4811      	ldr	r0, [pc, #68]	; (80051fc <_ZN10SFE_BMP18011GetPressureERff+0x228>)
 80051b8:	f003 f950 	bl	800845c <iprintf>
		printf("BMP180: pu=%f\n", pu);
 80051bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051be:	f7fb f9c3 	bl	8000548 <__aeabi_f2d>
 80051c2:	4603      	mov	r3, r0
 80051c4:	460c      	mov	r4, r1
 80051c6:	461a      	mov	r2, r3
 80051c8:	4623      	mov	r3, r4
 80051ca:	480d      	ldr	r0, [pc, #52]	; (8005200 <_ZN10SFE_BMP18011GetPressureERff+0x22c>)
 80051cc:	f003 f946 	bl	800845c <iprintf>
	}
	return(result);
 80051d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3730      	adds	r7, #48	; 0x30
 80051d8:	46bd      	mov	sp, r7
 80051da:	ecbd 8b02 	vpop	{d8}
 80051de:	bdb0      	pop	{r4, r5, r7, pc}
 80051e0:	40700000 	.word	0x40700000
 80051e4:	0800a66c 	.word	0x0800a66c
 80051e8:	0800a5f0 	.word	0x0800a5f0
 80051ec:	0800a608 	.word	0x0800a608
 80051f0:	0800a61c 	.word	0x0800a61c
 80051f4:	0800a62c 	.word	0x0800a62c
 80051f8:	0800a63c 	.word	0x0800a63c
 80051fc:	0800a64c 	.word	0x0800a64c
 8005200:	0800a65c 	.word	0x0800a65c

08005204 <_ZN10SFE_BMP1809ReadBytesEhPhi>:

bool SFE_BMP180::ReadBytes(byte regAddr, byte *values, int length)
// Read an array of bytes from device
// values: external array to hold data. Put starting register in values[0].
// length: number of bytes to read
{
 8005204:	b590      	push	{r4, r7, lr}
 8005206:	b0cb      	sub	sp, #300	; 0x12c
 8005208:	af04      	add	r7, sp, #16
 800520a:	f107 040c 	add.w	r4, r7, #12
 800520e:	6020      	str	r0, [r4, #0]
 8005210:	4608      	mov	r0, r1
 8005212:	1d39      	adds	r1, r7, #4
 8005214:	600a      	str	r2, [r1, #0]
 8005216:	463a      	mov	r2, r7
 8005218:	6013      	str	r3, [r2, #0]
 800521a:	f107 030b 	add.w	r3, r7, #11
 800521e:	4602      	mov	r2, r0
 8005220:	701a      	strb	r2, [r3, #0]
	byte buf[255];

	m_error = HAL_I2C_Mem_Read(m_pI2C, BMP180_ADDR << 1, regAddr, I2C_MEMADD_SIZE_8BIT, buf, length, 500);
 8005222:	f107 030c 	add.w	r3, r7, #12
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800522a:	f107 030b 	add.w	r3, r7, #11
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	b299      	uxth	r1, r3
 8005232:	463b      	mov	r3, r7
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	b29b      	uxth	r3, r3
 8005238:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800523c:	9202      	str	r2, [sp, #8]
 800523e:	9301      	str	r3, [sp, #4]
 8005240:	f107 0314 	add.w	r3, r7, #20
 8005244:	9300      	str	r3, [sp, #0]
 8005246:	2301      	movs	r3, #1
 8005248:	460a      	mov	r2, r1
 800524a:	21ee      	movs	r1, #238	; 0xee
 800524c:	f7fd ffd6 	bl	80031fc <HAL_I2C_Mem_Read>
 8005250:	4603      	mov	r3, r0
 8005252:	461a      	mov	r2, r3
 8005254:	f107 030c 	add.w	r3, r7, #12
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

	if (m_error == HAL_OK)
 800525e:	f107 030c 	add.w	r3, r7, #12
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005268:	2b00      	cmp	r3, #0
 800526a:	d11c      	bne.n	80052a6 <_ZN10SFE_BMP1809ReadBytesEhPhi+0xa2>
	{
		for(int ix = 0; ix < length; ix++)
 800526c:	2300      	movs	r3, #0
 800526e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005272:	463b      	mov	r3, r7
 8005274:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	429a      	cmp	r2, r3
 800527c:	da11      	bge.n	80052a2 <_ZN10SFE_BMP1809ReadBytesEhPhi+0x9e>
		{
			values[ix] = buf[ix];
 800527e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005282:	1d3a      	adds	r2, r7, #4
 8005284:	6812      	ldr	r2, [r2, #0]
 8005286:	4413      	add	r3, r2
 8005288:	f107 0114 	add.w	r1, r7, #20
 800528c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005290:	440a      	add	r2, r1
 8005292:	7812      	ldrb	r2, [r2, #0]
 8005294:	701a      	strb	r2, [r3, #0]
		for(int ix = 0; ix < length; ix++)
 8005296:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800529a:	3301      	adds	r3, #1
 800529c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80052a0:	e7e7      	b.n	8005272 <_ZN10SFE_BMP1809ReadBytesEhPhi+0x6e>
		}
		return true;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e000      	b.n	80052a8 <_ZN10SFE_BMP1809ReadBytesEhPhi+0xa4>
	}
	return false;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd90      	pop	{r4, r7, pc}

080052b2 <_ZN10SFE_BMP18010WriteBytesEhPhi>:
bool SFE_BMP180::WriteBytes(byte regAddr, byte *values, int length)
// Write an array of bytes to device
// registerAddress: register to start writing
// values: external array of data to write. Put starting register in values[0].
// length: number of bytes to write
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b088      	sub	sp, #32
 80052b6:	af04      	add	r7, sp, #16
 80052b8:	60f8      	str	r0, [r7, #12]
 80052ba:	607a      	str	r2, [r7, #4]
 80052bc:	603b      	str	r3, [r7, #0]
 80052be:	460b      	mov	r3, r1
 80052c0:	72fb      	strb	r3, [r7, #11]
	m_error= HAL_I2C_Mem_Write(m_pI2C, BMP180_ADDR << 1, regAddr, I2C_MEMADD_SIZE_8BIT, values, length, 500);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80052c6:	7afb      	ldrb	r3, [r7, #11]
 80052c8:	b299      	uxth	r1, r3
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80052d2:	9202      	str	r2, [sp, #8]
 80052d4:	9301      	str	r3, [sp, #4]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	9300      	str	r3, [sp, #0]
 80052da:	2301      	movs	r3, #1
 80052dc:	460a      	mov	r2, r1
 80052de:	21ee      	movs	r1, #238	; 0xee
 80052e0:	f7fd fed4 	bl	800308c <HAL_I2C_Mem_Write>
 80052e4:	4603      	mov	r3, r0
 80052e6:	461a      	mov	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

	if (m_error == HAL_OK)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d101      	bne.n	80052fc <_ZN10SFE_BMP18010WriteBytesEhPhi+0x4a>
		return true;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e000      	b.n	80052fe <_ZN10SFE_BMP18010WriteBytesEhPhi+0x4c>
	else
		return false;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}

08005306 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8005306:	b5b0      	push	{r4, r5, r7, lr}
 8005308:	b082      	sub	sp, #8
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
 800530e:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f7fb f907 	bl	8000524 <__aeabi_i2d>
 8005316:	4604      	mov	r4, r0
 8005318:	460d      	mov	r5, r1
 800531a:	6838      	ldr	r0, [r7, #0]
 800531c:	f7fb f902 	bl	8000524 <__aeabi_i2d>
 8005320:	4602      	mov	r2, r0
 8005322:	460b      	mov	r3, r1
 8005324:	ec43 2b11 	vmov	d1, r2, r3
 8005328:	ec45 4b10 	vmov	d0, r4, r5
 800532c:	f001 fb92 	bl	8006a54 <pow>
 8005330:	eeb0 7a40 	vmov.f32	s14, s0
 8005334:	eef0 7a60 	vmov.f32	s15, s1
    }
 8005338:	eeb0 0a47 	vmov.f32	s0, s14
 800533c:	eef0 0a67 	vmov.f32	s1, s15
 8005340:	3708      	adds	r7, #8
 8005342:	46bd      	mov	sp, r7
 8005344:	bdb0      	pop	{r4, r5, r7, pc}

08005346 <_ZN16NS_energyShield29writeByteEhhh>:
#define DELAY 100
#define ES2_DELAY 1

// Write one byte via TWI
void NS_energyShield2::writeByte(uint8_t slaveAddress, uint8_t registerAddress, uint8_t data)
{
 8005346:	b580      	push	{r7, lr}
 8005348:	b086      	sub	sp, #24
 800534a:	af04      	add	r7, sp, #16
 800534c:	6078      	str	r0, [r7, #4]
 800534e:	4608      	mov	r0, r1
 8005350:	4611      	mov	r1, r2
 8005352:	461a      	mov	r2, r3
 8005354:	4603      	mov	r3, r0
 8005356:	70fb      	strb	r3, [r7, #3]
 8005358:	460b      	mov	r3, r1
 800535a:	70bb      	strb	r3, [r7, #2]
 800535c:	4613      	mov	r3, r2
 800535e:	707b      	strb	r3, [r7, #1]
	HAL_I2C_Mem_Write(_pI2C, slaveAddress << 1, registerAddress, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	68d8      	ldr	r0, [r3, #12]
 8005364:	78fb      	ldrb	r3, [r7, #3]
 8005366:	b29b      	uxth	r3, r3
 8005368:	005b      	lsls	r3, r3, #1
 800536a:	b299      	uxth	r1, r3
 800536c:	78bb      	ldrb	r3, [r7, #2]
 800536e:	b29a      	uxth	r2, r3
 8005370:	2364      	movs	r3, #100	; 0x64
 8005372:	9302      	str	r3, [sp, #8]
 8005374:	2301      	movs	r3, #1
 8005376:	9301      	str	r3, [sp, #4]
 8005378:	1c7b      	adds	r3, r7, #1
 800537a:	9300      	str	r3, [sp, #0]
 800537c:	2301      	movs	r3, #1
 800537e:	f7fd fe85 	bl	800308c <HAL_I2C_Mem_Write>

	HAL_Delay(ES2_DELAY);
 8005382:	2001      	movs	r0, #1
 8005384:	f7fc fdba 	bl	8001efc <HAL_Delay>

	return;	
 8005388:	bf00      	nop
}
 800538a:	3708      	adds	r7, #8
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <_ZN16NS_energyShield28readByteEhh>:

// Read one byte via TWI
uint8_t NS_energyShield2::readByte(uint8_t slaveAddress, uint8_t registerAddress)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b088      	sub	sp, #32
 8005394:	af04      	add	r7, sp, #16
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	460b      	mov	r3, r1
 800539a:	70fb      	strb	r3, [r7, #3]
 800539c:	4613      	mov	r3, r2
 800539e:	70bb      	strb	r3, [r7, #2]
	uint8_t data;

	HAL_I2C_Mem_Read(_pI2C, slaveAddress << 1, registerAddress, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	68d8      	ldr	r0, [r3, #12]
 80053a4:	78fb      	ldrb	r3, [r7, #3]
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	005b      	lsls	r3, r3, #1
 80053aa:	b299      	uxth	r1, r3
 80053ac:	78bb      	ldrb	r3, [r7, #2]
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	2364      	movs	r3, #100	; 0x64
 80053b2:	9302      	str	r3, [sp, #8]
 80053b4:	2301      	movs	r3, #1
 80053b6:	9301      	str	r3, [sp, #4]
 80053b8:	f107 030f 	add.w	r3, r7, #15
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	2301      	movs	r3, #1
 80053c0:	f7fd ff1c 	bl	80031fc <HAL_I2C_Mem_Read>
	HAL_Delay(ES2_DELAY);
 80053c4:	2001      	movs	r0, #1
 80053c6:	f7fc fd99 	bl	8001efc <HAL_Delay>

	return data;
 80053ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3710      	adds	r7, #16
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <_ZN16NS_energyShield212writeCommandEhht>:

// Write standard command to BQ fuel gauge (TI)
void NS_energyShield2::writeCommand(uint8_t slaveAddress, uint8_t registerAddress, uint16_t dataWord)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b088      	sub	sp, #32
 80053d8:	af04      	add	r7, sp, #16
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	4608      	mov	r0, r1
 80053de:	4611      	mov	r1, r2
 80053e0:	461a      	mov	r2, r3
 80053e2:	4603      	mov	r3, r0
 80053e4:	70fb      	strb	r3, [r7, #3]
 80053e6:	460b      	mov	r3, r1
 80053e8:	70bb      	strb	r3, [r7, #2]
 80053ea:	4613      	mov	r3, r2
 80053ec:	803b      	strh	r3, [r7, #0]
	uint8_t buf[2];

	buf[0] = dataWord & 0xFF;
 80053ee:	883b      	ldrh	r3, [r7, #0]
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	733b      	strb	r3, [r7, #12]
	buf[1] = dataWord >> 8;
 80053f4:	883b      	ldrh	r3, [r7, #0]
 80053f6:	121b      	asrs	r3, r3, #8
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Mem_Write(_pI2C, slaveAddress << 1, registerAddress, I2C_MEMADD_SIZE_8BIT, buf, 2, 100);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	68d8      	ldr	r0, [r3, #12]
 8005400:	78fb      	ldrb	r3, [r7, #3]
 8005402:	b29b      	uxth	r3, r3
 8005404:	005b      	lsls	r3, r3, #1
 8005406:	b299      	uxth	r1, r3
 8005408:	78bb      	ldrb	r3, [r7, #2]
 800540a:	b29a      	uxth	r2, r3
 800540c:	2364      	movs	r3, #100	; 0x64
 800540e:	9302      	str	r3, [sp, #8]
 8005410:	2302      	movs	r3, #2
 8005412:	9301      	str	r3, [sp, #4]
 8005414:	f107 030c 	add.w	r3, r7, #12
 8005418:	9300      	str	r3, [sp, #0]
 800541a:	2301      	movs	r3, #1
 800541c:	f7fd fe36 	bl	800308c <HAL_I2C_Mem_Write>

	HAL_Delay(ES2_DELAY);
 8005420:	2001      	movs	r0, #1
 8005422:	f7fc fd6b 	bl	8001efc <HAL_Delay>

  return;
 8005426:	bf00      	nop
}
 8005428:	3710      	adds	r7, #16
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <_ZN16NS_energyShield211readCommandEhh>:

// Read standard command to BQ fuel gauge (TI)
uint16_t NS_energyShield2::readCommand(uint8_t slaveAddress, uint8_t registerAddress)
{
 800542e:	b580      	push	{r7, lr}
 8005430:	b088      	sub	sp, #32
 8005432:	af04      	add	r7, sp, #16
 8005434:	6078      	str	r0, [r7, #4]
 8005436:	460b      	mov	r3, r1
 8005438:	70fb      	strb	r3, [r7, #3]
 800543a:	4613      	mov	r3, r2
 800543c:	70bb      	strb	r3, [r7, #2]
	uint16_t dataWord;
	uint8_t buf[2];

	HAL_I2C_Mem_Read(_pI2C, slaveAddress << 1, registerAddress, I2C_MEMADD_SIZE_8BIT, buf, 2, 100);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68d8      	ldr	r0, [r3, #12]
 8005442:	78fb      	ldrb	r3, [r7, #3]
 8005444:	b29b      	uxth	r3, r3
 8005446:	005b      	lsls	r3, r3, #1
 8005448:	b299      	uxth	r1, r3
 800544a:	78bb      	ldrb	r3, [r7, #2]
 800544c:	b29a      	uxth	r2, r3
 800544e:	2364      	movs	r3, #100	; 0x64
 8005450:	9302      	str	r3, [sp, #8]
 8005452:	2302      	movs	r3, #2
 8005454:	9301      	str	r3, [sp, #4]
 8005456:	f107 030c 	add.w	r3, r7, #12
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	2301      	movs	r3, #1
 800545e:	f7fd fecd 	bl	80031fc <HAL_I2C_Mem_Read>

	HAL_Delay(ES2_DELAY);
 8005462:	2001      	movs	r0, #1
 8005464:	f7fc fd4a 	bl	8001efc <HAL_Delay>

	dataWord = buf[0];
 8005468:	7b3b      	ldrb	r3, [r7, #12]
 800546a:	81fb      	strh	r3, [r7, #14]
	dataWord |= buf[1] << 8;
 800546c:	7b7b      	ldrb	r3, [r7, #13]
 800546e:	021b      	lsls	r3, r3, #8
 8005470:	b21a      	sxth	r2, r3
 8005472:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005476:	4313      	orrs	r3, r2
 8005478:	b21b      	sxth	r3, r3
 800547a:	81fb      	strh	r3, [r7, #14]

	return dataWord;
 800547c:	89fb      	ldrh	r3, [r7, #14]
} 
 800547e:	4618      	mov	r0, r3
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <_ZN16NS_energyShield214readSubCommandEht>:

// Read Control() subcommand to BQ fuel gauge (TI)
uint16_t NS_energyShield2::readSubCommand(uint8_t slaveAddress, uint16_t controlData)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b086      	sub	sp, #24
 800548a:	af02      	add	r7, sp, #8
 800548c:	6078      	str	r0, [r7, #4]
 800548e:	460b      	mov	r3, r1
 8005490:	70fb      	strb	r3, [r7, #3]
 8005492:	4613      	mov	r3, r2
 8005494:	803b      	strh	r3, [r7, #0]
	uint16_t dataWord;
	uint8_t buf[3];

	buf[0] = 0;
 8005496:	2300      	movs	r3, #0
 8005498:	723b      	strb	r3, [r7, #8]
	buf[1] = controlData & 0xFF;
 800549a:	883b      	ldrh	r3, [r7, #0]
 800549c:	b2db      	uxtb	r3, r3
 800549e:	727b      	strb	r3, [r7, #9]
	buf[2] = controlData >> 8;
 80054a0:	883b      	ldrh	r3, [r7, #0]
 80054a2:	121b      	asrs	r3, r3, #8
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	72bb      	strb	r3, [r7, #10]

	HAL_I2C_Master_Transmit(_pI2C, slaveAddress << 1, buf, 3, 100);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	68d8      	ldr	r0, [r3, #12]
 80054ac:	78fb      	ldrb	r3, [r7, #3]
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	005b      	lsls	r3, r3, #1
 80054b2:	b299      	uxth	r1, r3
 80054b4:	f107 0208 	add.w	r2, r7, #8
 80054b8:	2364      	movs	r3, #100	; 0x64
 80054ba:	9300      	str	r3, [sp, #0]
 80054bc:	2303      	movs	r3, #3
 80054be:	f7fd fcbb 	bl	8002e38 <HAL_I2C_Master_Transmit>

	dataWord = readCommand(slaveAddress, 0x00);
 80054c2:	78fb      	ldrb	r3, [r7, #3]
 80054c4:	2200      	movs	r2, #0
 80054c6:	4619      	mov	r1, r3
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f7ff ffb0 	bl	800542e <_ZN16NS_energyShield211readCommandEhh>
 80054ce:	4603      	mov	r3, r0
 80054d0:	81fb      	strh	r3, [r7, #14]

	HAL_Delay(ES2_DELAY);
 80054d2:	2001      	movs	r0, #1
 80054d4:	f7fc fd12 	bl	8001efc <HAL_Delay>

	return dataWord;
 80054d8:	89fb      	ldrh	r3, [r7, #14]
} 
 80054da:	4618      	mov	r0, r3
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <_ZN16NS_energyShield213checkIfSealedEh>:

// Check if fuel gauge is in "Sealed" state
bool NS_energyShield2::checkIfSealed(uint8_t slaveAddress)
{
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b084      	sub	sp, #16
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
 80054ea:	460b      	mov	r3, r1
 80054ec:	70fb      	strb	r3, [r7, #3]
  uint16_t flags;

  flags = readSubCommand(slaveAddress, 0x0000);
 80054ee:	78fb      	ldrb	r3, [r7, #3]
 80054f0:	2200      	movs	r2, #0
 80054f2:	4619      	mov	r1, r3
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f7ff ffc6 	bl	8005486 <_ZN16NS_energyShield214readSubCommandEht>
 80054fa:	4603      	mov	r3, r0
 80054fc:	81fb      	strh	r3, [r7, #14]
  
  return ((flags & 0x2000) != 0);
 80054fe:	89fb      	ldrh	r3, [r7, #14]
 8005500:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005504:	2b00      	cmp	r3, #0
 8005506:	bf14      	ite	ne
 8005508:	2301      	movne	r3, #1
 800550a:	2300      	moveq	r3, #0
 800550c:	b2db      	uxtb	r3, r3
}
 800550e:	4618      	mov	r0, r3
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
	...

08005518 <_ZN16NS_energyShield214setupFuelGaugeEhttth>:

int NS_energyShield2::setupFuelGauge(uint8_t slaveAddress, uint16_t newDesignCapacity_mAh, uint16_t newTerminationVoltage_mV, uint16_t chargeTerminationCurrent_mA, uint8_t alarmSOC)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b08c      	sub	sp, #48	; 0x30
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	4608      	mov	r0, r1
 8005522:	4611      	mov	r1, r2
 8005524:	461a      	mov	r2, r3
 8005526:	4603      	mov	r3, r0
 8005528:	72fb      	strb	r3, [r7, #11]
 800552a:	460b      	mov	r3, r1
 800552c:	813b      	strh	r3, [r7, #8]
 800552e:	4613      	mov	r3, r2
 8005530:	80fb      	strh	r3, [r7, #6]
	uint16_t oldOpConfig;
	uint16_t newOpConfig;
	uint16_t oldSOC1Set;
	uint16_t oldSOC1Clear;
		
	newDesignEnergy = (uint16_t) (((int)newDesignCapacity_mAh*37)/10);
 8005532:	893a      	ldrh	r2, [r7, #8]
 8005534:	4613      	mov	r3, r2
 8005536:	00db      	lsls	r3, r3, #3
 8005538:	4413      	add	r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4413      	add	r3, r2
 800553e:	4ab9      	ldr	r2, [pc, #740]	; (8005824 <_ZN16NS_energyShield214setupFuelGaugeEhttth+0x30c>)
 8005540:	fb82 1203 	smull	r1, r2, r2, r3
 8005544:	1092      	asrs	r2, r2, #2
 8005546:	17db      	asrs	r3, r3, #31
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	85bb      	strh	r3, [r7, #44]	; 0x2c
	newTerminationRate = (uint16_t) (newDesignCapacity_mAh*10)/chargeTerminationCurrent_mA;
 800554c:	893b      	ldrh	r3, [r7, #8]
 800554e:	461a      	mov	r2, r3
 8005550:	0092      	lsls	r2, r2, #2
 8005552:	4413      	add	r3, r2
 8005554:	005b      	lsls	r3, r3, #1
 8005556:	b29a      	uxth	r2, r3
 8005558:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800555a:	fbb2 f3f3 	udiv	r3, r2, r3
 800555e:	857b      	strh	r3, [r7, #42]	; 0x2a
	
	i=0;
 8005560:	2300      	movs	r3, #0
 8005562:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	do
	{
		++i;
 8005566:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800556a:	3301      	adds	r3, #1
 800556c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (i > 100)
 8005570:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005574:	2b64      	cmp	r3, #100	; 0x64
 8005576:	dd01      	ble.n	800557c <_ZN16NS_energyShield214setupFuelGaugeEhttth+0x64>
			return 1; // Failed
 8005578:	2301      	movs	r3, #1
 800557a:	e291      	b.n	8005aa0 <_ZN16NS_energyShield214setupFuelGaugeEhttth+0x588>
		// Un-seal
		writeCommand(slaveAddress, 0x00, 0x8000);
 800557c:	7af9      	ldrb	r1, [r7, #11]
 800557e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005582:	2200      	movs	r2, #0
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f7ff ff25 	bl	80053d4 <_ZN16NS_energyShield212writeCommandEhht>
		writeCommand(slaveAddress, 0x00, 0x8000);
 800558a:	7af9      	ldrb	r1, [r7, #11]
 800558c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005590:	2200      	movs	r2, #0
 8005592:	68f8      	ldr	r0, [r7, #12]
 8005594:	f7ff ff1e 	bl	80053d4 <_ZN16NS_energyShield212writeCommandEhht>
		HAL_Delay(10);
 8005598:	200a      	movs	r0, #10
 800559a:	f7fc fcaf 	bl	8001efc <HAL_Delay>
	do
 800559e:	7afb      	ldrb	r3, [r7, #11]
 80055a0:	4619      	mov	r1, r3
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	f7ff ff9d 	bl	80054e2 <_ZN16NS_energyShield213checkIfSealedEh>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d000      	beq.n	80055b0 <_ZN16NS_energyShield214setupFuelGaugeEhttth+0x98>
 80055ae:	e7da      	b.n	8005566 <_ZN16NS_energyShield214setupFuelGaugeEhttth+0x4e>
	} while (checkIfSealed(slaveAddress));
	
	//Change to CONFIG UPDATE mode
	writeCommand(slaveAddress, 0x00, 0x0013);
 80055b0:	7af9      	ldrb	r1, [r7, #11]
 80055b2:	2313      	movs	r3, #19
 80055b4:	2200      	movs	r2, #0
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f7ff ff0c 	bl	80053d4 <_ZN16NS_energyShield212writeCommandEhht>
	do
	{
		flags = readCommand(slaveAddress, 0x06);
 80055bc:	7afb      	ldrb	r3, [r7, #11]
 80055be:	2206      	movs	r2, #6
 80055c0:	4619      	mov	r1, r3
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f7ff ff33 	bl	800542e <_ZN16NS_energyShield211readCommandEhh>
 80055c8:	4603      	mov	r3, r0
 80055ca:	853b      	strh	r3, [r7, #40]	; 0x28
	} while (!(flags & 0x0010));
 80055cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80055ce:	f003 0310 	and.w	r3, r3, #16
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d100      	bne.n	80055d8 <_ZN16NS_energyShield214setupFuelGaugeEhttth+0xc0>
	do
 80055d6:	e7f1      	b.n	80055bc <_ZN16NS_energyShield214setupFuelGaugeEhttth+0xa4>
	
	// Setup Block RAM update
	writeByte(slaveAddress, 0x61, 0x00);
 80055d8:	7af9      	ldrb	r1, [r7, #11]
 80055da:	2300      	movs	r3, #0
 80055dc:	2261      	movs	r2, #97	; 0x61
 80055de:	68f8      	ldr	r0, [r7, #12]
 80055e0:	f7ff feb1 	bl	8005346 <_ZN16NS_energyShield29writeByteEhhh>
	writeByte(slaveAddress, 0x3E, 0x52);
 80055e4:	7af9      	ldrb	r1, [r7, #11]
 80055e6:	2352      	movs	r3, #82	; 0x52
 80055e8:	223e      	movs	r2, #62	; 0x3e
 80055ea:	68f8      	ldr	r0, [r7, #12]
 80055ec:	f7ff feab 	bl	8005346 <_ZN16NS_energyShield29writeByteEhhh>
	writeByte(slaveAddress,0x3F, 0x00);
 80055f0:	7af9      	ldrb	r1, [r7, #11]
 80055f2:	2300      	movs	r3, #0
 80055f4:	223f      	movs	r2, #63	; 0x3f
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f7ff fea5 	bl	8005346 <_ZN16NS_energyShield29writeByteEhhh>
		
	oldCheckSum = readByte(slaveAddress, 0x60);
 80055fc:	7afb      	ldrb	r3, [r7, #11]
 80055fe:	2260      	movs	r2, #96	; 0x60
 8005600:	4619      	mov	r1, r3
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f7ff fec4 	bl	8005390 <_ZN16NS_energyShield28readByteEhh>
 8005608:	4603      	mov	r3, r0
 800560a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	
	i = 0;
 800560e:	2300      	movs	r3, #0
 8005610:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	do {		
		++i;
 8005614:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005618:	3301      	adds	r3, #1
 800561a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (i > 100)
 800561e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005622:	2b64      	cmp	r3, #100	; 0x64
 8005624:	dd01      	ble.n	800562a <_ZN16NS_energyShield214setupFuelGaugeEhttth+0x112>
			return 2; // Failed
 8005626:	2302      	movs	r3, #2
 8005628:	e23a      	b.n	8005aa0 <_ZN16NS_energyShield214setupFuelGaugeEhttth+0x588>
		
		// Compute new checksum
		tempCheckSum = 0xFF - oldCheckSum;
 800562a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800562e:	43db      	mvns	r3, r3
 8005630:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		
		oldDesignCapacity = readCommand(slaveAddress,0x4A);
 8005634:	7afb      	ldrb	r3, [r7, #11]
 8005636:	224a      	movs	r2, #74	; 0x4a
 8005638:	4619      	mov	r1, r3
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f7ff fef7 	bl	800542e <_ZN16NS_energyShield211readCommandEhh>
 8005640:	4603      	mov	r3, r0
 8005642:	84bb      	strh	r3, [r7, #36]	; 0x24
		oldDesignEnergy = readCommand(slaveAddress, 0x4C);
 8005644:	7afb      	ldrb	r3, [r7, #11]
 8005646:	224c      	movs	r2, #76	; 0x4c
 8005648:	4619      	mov	r1, r3
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f7ff feef 	bl	800542e <_ZN16NS_energyShield211readCommandEhh>
 8005650:	4603      	mov	r3, r0
 8005652:	847b      	strh	r3, [r7, #34]	; 0x22
		oldTerminationVoltage = readCommand(slaveAddress,0x50);
 8005654:	7afb      	ldrb	r3, [r7, #11]
 8005656:	2250      	movs	r2, #80	; 0x50
 8005658:	4619      	mov	r1, r3
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f7ff fee7 	bl	800542e <_ZN16NS_energyShield211readCommandEhh>
 8005660:	4603      	mov	r3, r0
 8005662:	843b      	strh	r3, [r7, #32]
		oldTaperRate = readCommand(slaveAddress, 0x5B);
 8005664:	7afb      	ldrb	r3, [r7, #11]
 8005666:	225b      	movs	r2, #91	; 0x5b
 8005668:	4619      	mov	r1, r3
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f7ff fedf 	bl	800542e <_ZN16NS_energyShield211readCommandEhh>
 8005670:	4603      	mov	r3, r0
 8005672:	83fb      	strh	r3, [r7, #30]
		
		tempCheckSum -= oldDesignCapacity >> 8;
 8005674:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005676:	121b      	asrs	r3, r3, #8
 8005678:	b2db      	uxtb	r3, r3
 800567a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		tempCheckSum -= oldDesignCapacity & 0xFF;
 8005684:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005686:	b2db      	uxtb	r3, r3
 8005688:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		
		tempCheckSum -= oldDesignEnergy >> 8;
 8005692:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005694:	121b      	asrs	r3, r3, #8
 8005696:	b2db      	uxtb	r3, r3
 8005698:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		tempCheckSum -= oldDesignEnergy & 0xFF;
 80056a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		
		tempCheckSum -= oldTerminationVoltage >> 8;
 80056b0:	8c3b      	ldrh	r3, [r7, #32]
 80056b2:	121b      	asrs	r3, r3, #8
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		tempCheckSum -= oldTerminationVoltage & 0xFF;
 80056c0:	8c3b      	ldrh	r3, [r7, #32]
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		
		tempCheckSum -= oldTaperRate >> 8;
 80056ce:	8bfb      	ldrh	r3, [r7, #30]
 80056d0:	121b      	asrs	r3, r3, #8
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		tempCheckSum -= oldTaperRate & 0xFF;
 80056de:	8bfb      	ldrh	r3, [r7, #30]
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		
		writeByte(slaveAddress, 0x4A, newDesignCapacity_mAh >> 8);
 80056ec:	893b      	ldrh	r3, [r7, #8]
 80056ee:	121b      	asrs	r3, r3, #8
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	7af9      	ldrb	r1, [r7, #11]
 80056f4:	224a      	movs	r2, #74	; 0x4a
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f7ff fe25 	bl	8005346 <_ZN16NS_energyShield29writeByteEhhh>
		writeByte(slaveAddress, 0x4B, newDesignCapacity_mAh & 0xFF);
 80056fc:	893b      	ldrh	r3, [r7, #8]
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	7af9      	ldrb	r1, [r7, #11]
 8005702:	224b      	movs	r2, #75	; 0x4b
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f7ff fe1e 	bl	8005346 <_ZN16NS_energyShield29writeByteEhhh>
		
		writeByte(slaveAddress, 0x4C, newDesignEnergy >> 8);
 800570a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800570c:	121b      	asrs	r3, r3, #8
 800570e:	b2db      	uxtb	r3, r3
 8005710:	7af9      	ldrb	r1, [r7, #11]
 8005712:	224c      	movs	r2, #76	; 0x4c
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f7ff fe16 	bl	8005346 <_ZN16NS_energyShield29writeByteEhhh>
		writeByte(slaveAddress, 0x4D, newDesignEnergy & 0xFF);
 800571a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800571c:	b2db      	uxtb	r3, r3
 800571e:	7af9      	ldrb	r1, [r7, #11]
 8005720:	224d      	movs	r2, #77	; 0x4d
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f7ff fe0f 	bl	8005346 <_ZN16NS_energyShield29writeByteEhhh>
		
		writeByte(slaveAddress, 0x50, newTerminationVoltage_mV >> 8);
 8005728:	88fb      	ldrh	r3, [r7, #6]
 800572a:	121b      	asrs	r3, r3, #8
 800572c:	b2db      	uxtb	r3, r3
 800572e:	7af9      	ldrb	r1, [r7, #11]
 8005730:	2250      	movs	r2, #80	; 0x50
 8005732:	68f8      	ldr	r0, [r7, #12]
 8005734:	f7ff fe07 	bl	8005346 <_ZN16NS_energyShield29writeByteEhhh>
		writeByte(slaveAddress, 0x51, newTerminationVoltage_mV & 0xFF);
 8005738:	88fb      	ldrh	r3, [r7, #6]
 800573a:	b2db      	uxtb	r3, r3
 800573c:	7af9      	ldrb	r1, [r7, #11]
 800573e:	2251      	movs	r2, #81	; 0x51
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f7ff fe00 	bl	8005346 <_ZN16NS_energyShield29writeByteEhhh>
		
		writeByte(slaveAddress, 0x5B, newTerminationRate >> 8);
 8005746:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005748:	121b      	asrs	r3, r3, #8
 800574a:	b2db      	uxtb	r3, r3
 800574c:	7af9      	ldrb	r1, [r7, #11]
 800574e:	225b      	movs	r2, #91	; 0x5b
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f7ff fdf8 	bl	8005346 <_ZN16NS_energyShield29writeByteEhhh>
		writeByte(slaveAddress, 0x5C, newTerminationRate & 0xFF);
 8005756:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005758:	b2db      	uxtb	r3, r3
 800575a:	7af9      	ldrb	r1, [r7, #11]
 800575c:	225c      	movs	r2, #92	; 0x5c
 800575e:	68f8      	ldr	r0, [r7, #12]
 8005760:	f7ff fdf1 	bl	8005346 <_ZN16NS_energyShield29writeByteEhhh>
		
		// Finish computing new checksum		
		tempCheckSum += newDesignCapacity_mAh >> 8;
 8005764:	893b      	ldrh	r3, [r7, #8]
 8005766:	121b      	asrs	r3, r3, #8
 8005768:	b2da      	uxtb	r2, r3
 800576a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800576e:	4413      	add	r3, r2
 8005770:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		tempCheckSum += newDesignCapacity_mAh & 0xFF;
 8005774:	893b      	ldrh	r3, [r7, #8]
 8005776:	b2da      	uxtb	r2, r3
 8005778:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800577c:	4413      	add	r3, r2
 800577e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		
		tempCheckSum += newDesignEnergy >> 8;
 8005782:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005784:	121b      	asrs	r3, r3, #8
 8005786:	b2da      	uxtb	r2, r3
 8005788:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800578c:	4413      	add	r3, r2
 800578e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		tempCheckSum += newDesignEnergy & 0xFF;
 8005792:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005794:	b2da      	uxtb	r2, r3
 8005796:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800579a:	4413      	add	r3, r2
 800579c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		
		tempCheckSum += newTerminationVoltage_mV >> 8;
 80057a0:	88fb      	ldrh	r3, [r7, #6]
 80057a2:	121b      	asrs	r3, r3, #8
 80057a4:	b2da      	uxtb	r2, r3
 80057a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80057aa:	4413      	add	r3, r2
 80057ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		tempCheckSum += newTerminationVoltage_mV & 0xFF;
 80057b0:	88fb      	ldrh	r3, [r7, #6]
 80057b2:	b2da      	uxtb	r2, r3
 80057b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80057b8:	4413      	add	r3, r2
 80057ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		
		tempCheckSum += newTerminationRate >> 8;
 80057be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80057c0:	121b      	asrs	r3, r3, #8
 80057c2:	b2da      	uxtb	r2, r3
 80057c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80057c8:	4413      	add	r3, r2
 80057ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		tempCheckSum += newTerminationRate & 0xFF;
 80057ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80057d0:	b2da      	uxtb	r2, r3
 80057d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80057d6:	4413      	add	r3, r2
 80057d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		
		newCheckSum = 0xFF - tempCheckSum;
 80057dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80057e0:	43db      	mvns	r3, r3
 80057e2:	777b      	strb	r3, [r7, #29]
		writeByte(slaveAddress, 0x60, newCheckSum);
 80057e4:	7f7b      	ldrb	r3, [r7, #29]
 80057e6:	7af9      	ldrb	r1, [r7, #11]
 80057e8:	2260      	movs	r2, #96	; 0x60
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f7ff fdab 	bl	8005346 <_ZN16NS_energyShield29writeByteEhhh>
		
		// Verify RAM update is complete
		writeByte(slaveAddress, 0x3E, 0x52);
 80057f0:	7af9      	ldrb	r1, [r7, #11]
 80057f2:	2352      	movs	r3, #82	; 0x52
 80057f4:	223e      	movs	r2, #62	; 0x3e
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f7ff fda5 	bl	8005346 <_ZN16NS_energyShield29writeByteEhhh>
		writeByte(slaveAddress, 0x3F, 0x00);
 80057fc:	7af9      	ldrb	r1, [r7, #11]
 80057fe:	2300      	movs	r3, #0
 8005800:	223f      	movs	r2, #63	; 0x3f
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f7ff fd9f 	bl	8005346 <_ZN16NS_energyShield29writeByteEhhh>
		
		checkSum = readByte(slaveAddress, 0x60);
 8005808:	7afb      	ldrb	r3, [r7, #11]
 800580a:	2260      	movs	r2, #96	; 0x60
 800580c:	4619      	mov	r1, r3
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f7ff fdbe 	bl	8005390 <_ZN16NS_energyShield28readByteEhh>
 8005814:	4603      	mov	r3, r0
 8005816:	773b      	strb	r3, [r7, #28]
	
	} while (checkSum != newCheckSum);
 8005818:	7f3a      	ldrb	r2, [r7, #28]
 800581a:	7f7b      	ldrb	r3, [r7, #29]
 800581c:	429a      	cmp	r2, r3
 800581e:	d003      	beq.n	8005828 <_ZN16NS_energyShield214setupFuelGaugeEhttth+0x310>
	do {		
 8005820:	e6f8      	b.n	8005614 <_ZN16NS_energyShield214setupFuelGaugeEhttth+0xfc>
 8005822:	bf00      	nop
 8005824:	66666667 	.word	0x66666667
	
	// Setup Block RAM update for Subclass ID 0x40 (64)
	writeByte(slaveAddress, 0x61, 0x00); // Enable block access
 8005828:	7af9      	ldrb	r1, [r7, #11]
 800582a:	2300      	movs	r3, #0
 800582c:	2261      	movs	r2, #97	; 0x61
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	f7ff fd89 	bl	8005346 <_ZN16NS_energyShield29writeByteEhhh>
	writeByte(slaveAddress, 0x3E, 0x40); // Set subclass ID
 8005834:	7af9      	ldrb	r1, [r7, #11]
 8005836:	2340      	movs	r3, #64	; 0x40
 8005838:	223e      	movs	r2, #62	; 0x3e
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f7ff fd83 	bl	8005346 <_ZN16NS_energyShield29writeByteEhhh>
	writeByte(slaveAddress,0x3F, 0x00);  // Set block offset 0 or 32
 8005840:	7af9      	ldrb	r1, [r7, #11]
 8005842:	2300      	movs	r3, #0
 8005844:	223f      	movs	r2, #63	; 0x3f
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	f7ff fd7d 	bl	8005346 <_ZN16NS_energyShield29writeByteEhhh>
	oldCheckSum = readByte(slaveAddress, 0x60);
 800584c:	7afb      	ldrb	r3, [r7, #11]
 800584e:	2260      	movs	r2, #96	; 0x60
 8005850:	4619      	mov	r1, r3
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f7ff fd9c 	bl	8005390 <_ZN16NS_energyShield28readByteEhh>
 8005858:	4603      	mov	r3, r0
 800585a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	
	i = 0;
 800585e:	2300      	movs	r3, #0
 8005860:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	do
	{
		++i;
 8005864:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005868:	3301      	adds	r3, #1
 800586a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (i > 100)
 800586e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005872:	2b64      	cmp	r3, #100	; 0x64
 8005874:	dd01      	ble.n	800587a <_ZN16NS_energyShield214setupFuelGaugeEhttth+0x362>
			return 2; // Failed
 8005876:	2302      	movs	r3, #2
 8005878:	e112      	b.n	8005aa0 <_ZN16NS_energyShield214setupFuelGaugeEhttth+0x588>
		
		// Compute new checksum
		tempCheckSum = 0xFF - oldCheckSum;
 800587a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800587e:	43db      	mvns	r3, r3
 8005880:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		
		oldOpConfig = readCommand(slaveAddress,0x40);
 8005884:	7afb      	ldrb	r3, [r7, #11]
 8005886:	2240      	movs	r2, #64	; 0x40
 8005888:	4619      	mov	r1, r3
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	f7ff fdcf 	bl	800542e <_ZN16NS_energyShield211readCommandEhh>
 8005890:	4603      	mov	r3, r0
 8005892:	837b      	strh	r3, [r7, #26]
		
		newOpConfig = oldOpConfig | 0x0004; // Enable BATLOWEN Bit
 8005894:	8b7b      	ldrh	r3, [r7, #26]
 8005896:	f043 0304 	orr.w	r3, r3, #4
 800589a:	833b      	strh	r3, [r7, #24]
		
		// Check if already set correctly
		if (newOpConfig == oldOpConfig)
 800589c:	8b3a      	ldrh	r2, [r7, #24]
 800589e:	8b7b      	ldrh	r3, [r7, #26]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d04f      	beq.n	8005944 <_ZN16NS_energyShield214setupFuelGaugeEhttth+0x42c>
			break;
		
		tempCheckSum -= oldOpConfig >> 8;
 80058a4:	8b7b      	ldrh	r3, [r7, #26]
 80058a6:	121b      	asrs	r3, r3, #8
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		tempCheckSum -= oldOpConfig & 0xFF;
 80058b4:	8b7b      	ldrh	r3, [r7, #26]
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		
		writeByte(slaveAddress, 0x40, newOpConfig >> 8);
 80058c2:	8b3b      	ldrh	r3, [r7, #24]
 80058c4:	121b      	asrs	r3, r3, #8
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	7af9      	ldrb	r1, [r7, #11]
 80058ca:	2240      	movs	r2, #64	; 0x40
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f7ff fd3a 	bl	8005346 <_ZN16NS_energyShield29writeByteEhhh>
		writeByte(slaveAddress, 0x41, newOpConfig & 0xFF);
 80058d2:	8b3b      	ldrh	r3, [r7, #24]
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	7af9      	ldrb	r1, [r7, #11]
 80058d8:	2241      	movs	r2, #65	; 0x41
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f7ff fd33 	bl	8005346 <_ZN16NS_energyShield29writeByteEhhh>
		
		// Finish computing new checksum		
		tempCheckSum += newOpConfig >> 8;
 80058e0:	8b3b      	ldrh	r3, [r7, #24]
 80058e2:	121b      	asrs	r3, r3, #8
 80058e4:	b2da      	uxtb	r2, r3
 80058e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80058ea:	4413      	add	r3, r2
 80058ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		tempCheckSum += newOpConfig & 0xFF;
 80058f0:	8b3b      	ldrh	r3, [r7, #24]
 80058f2:	b2da      	uxtb	r2, r3
 80058f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80058f8:	4413      	add	r3, r2
 80058fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		
		newCheckSum = 0xFF - tempCheckSum;
 80058fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005902:	43db      	mvns	r3, r3
 8005904:	777b      	strb	r3, [r7, #29]
		writeByte(slaveAddress, 0x60, newCheckSum);
 8005906:	7f7b      	ldrb	r3, [r7, #29]
 8005908:	7af9      	ldrb	r1, [r7, #11]
 800590a:	2260      	movs	r2, #96	; 0x60
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f7ff fd1a 	bl	8005346 <_ZN16NS_energyShield29writeByteEhhh>
		
		// Verify RAM update is complete
		writeByte(slaveAddress, 0x3E, 0x40);
 8005912:	7af9      	ldrb	r1, [r7, #11]
 8005914:	2340      	movs	r3, #64	; 0x40
 8005916:	223e      	movs	r2, #62	; 0x3e
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	f7ff fd14 	bl	8005346 <_ZN16NS_energyShield29writeByteEhhh>
		writeByte(slaveAddress, 0x3F, 0x00);
 800591e:	7af9      	ldrb	r1, [r7, #11]
 8005920:	2300      	movs	r3, #0
 8005922:	223f      	movs	r2, #63	; 0x3f
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	f7ff fd0e 	bl	8005346 <_ZN16NS_energyShield29writeByteEhhh>
		checkSum = readByte(slaveAddress, 0x60);
 800592a:	7afb      	ldrb	r3, [r7, #11]
 800592c:	2260      	movs	r2, #96	; 0x60
 800592e:	4619      	mov	r1, r3
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f7ff fd2d 	bl	8005390 <_ZN16NS_energyShield28readByteEhh>
 8005936:	4603      	mov	r3, r0
 8005938:	773b      	strb	r3, [r7, #28]
	
	} while (checkSum != newCheckSum);
 800593a:	7f3a      	ldrb	r2, [r7, #28]
 800593c:	7f7b      	ldrb	r3, [r7, #29]
 800593e:	429a      	cmp	r2, r3
 8005940:	d001      	beq.n	8005946 <_ZN16NS_energyShield214setupFuelGaugeEhttth+0x42e>
	do
 8005942:	e78f      	b.n	8005864 <_ZN16NS_energyShield214setupFuelGaugeEhttth+0x34c>
			break;
 8005944:	bf00      	nop
	
	
	// Setup Block RAM update for Subclass ID 0x40 (64)
	writeByte(slaveAddress, 0x3E, 0x31); // Set subclass ID
 8005946:	7af9      	ldrb	r1, [r7, #11]
 8005948:	2331      	movs	r3, #49	; 0x31
 800594a:	223e      	movs	r2, #62	; 0x3e
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	f7ff fcfa 	bl	8005346 <_ZN16NS_energyShield29writeByteEhhh>
	writeByte(slaveAddress,0x3F, 0x00);  // Set block offset 0 or 32
 8005952:	7af9      	ldrb	r1, [r7, #11]
 8005954:	2300      	movs	r3, #0
 8005956:	223f      	movs	r2, #63	; 0x3f
 8005958:	68f8      	ldr	r0, [r7, #12]
 800595a:	f7ff fcf4 	bl	8005346 <_ZN16NS_energyShield29writeByteEhhh>
	oldCheckSum = readByte(slaveAddress, 0x60);
 800595e:	7afb      	ldrb	r3, [r7, #11]
 8005960:	2260      	movs	r2, #96	; 0x60
 8005962:	4619      	mov	r1, r3
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f7ff fd13 	bl	8005390 <_ZN16NS_energyShield28readByteEhh>
 800596a:	4603      	mov	r3, r0
 800596c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	
	i = 0;
 8005970:	2300      	movs	r3, #0
 8005972:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	do {		
		++i;
 8005976:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800597a:	3301      	adds	r3, #1
 800597c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (i > 100)
 8005980:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005984:	2b64      	cmp	r3, #100	; 0x64
 8005986:	dd01      	ble.n	800598c <_ZN16NS_energyShield214setupFuelGaugeEhttth+0x474>
			return 2; // Failed
 8005988:	2302      	movs	r3, #2
 800598a:	e089      	b.n	8005aa0 <_ZN16NS_energyShield214setupFuelGaugeEhttth+0x588>
		
		// Compute new checksum
		tempCheckSum = 0xFF - oldCheckSum;
 800598c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005990:	43db      	mvns	r3, r3
 8005992:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		
		oldSOC1Set = readByte(slaveAddress,0x40);
 8005996:	7afb      	ldrb	r3, [r7, #11]
 8005998:	2240      	movs	r2, #64	; 0x40
 800599a:	4619      	mov	r1, r3
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f7ff fcf7 	bl	8005390 <_ZN16NS_energyShield28readByteEhh>
 80059a2:	4603      	mov	r3, r0
 80059a4:	82fb      	strh	r3, [r7, #22]
		oldSOC1Clear = readByte(slaveAddress,0x41);
 80059a6:	7afb      	ldrb	r3, [r7, #11]
 80059a8:	2241      	movs	r2, #65	; 0x41
 80059aa:	4619      	mov	r1, r3
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f7ff fcef 	bl	8005390 <_ZN16NS_energyShield28readByteEhh>
 80059b2:	4603      	mov	r3, r0
 80059b4:	82bb      	strh	r3, [r7, #20]
		
		// Check if already set correctly
		if ((oldSOC1Set == alarmSOC) && (oldSOC1Clear == alarmSOC))
 80059b6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	8afa      	ldrh	r2, [r7, #22]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d105      	bne.n	80059ce <_ZN16NS_energyShield214setupFuelGaugeEhttth+0x4b6>
 80059c2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	8aba      	ldrh	r2, [r7, #20]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d04c      	beq.n	8005a68 <_ZN16NS_energyShield214setupFuelGaugeEhttth+0x550>
			break;
		
		tempCheckSum -= oldSOC1Set;
 80059ce:	8afb      	ldrh	r3, [r7, #22]
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		tempCheckSum -= oldSOC1Clear;
 80059dc:	8abb      	ldrh	r3, [r7, #20]
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		
		writeByte(slaveAddress, 0x40, alarmSOC);
 80059ea:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80059ee:	7af9      	ldrb	r1, [r7, #11]
 80059f0:	2240      	movs	r2, #64	; 0x40
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f7ff fca7 	bl	8005346 <_ZN16NS_energyShield29writeByteEhhh>
		writeByte(slaveAddress, 0x41, alarmSOC);
 80059f8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80059fc:	7af9      	ldrb	r1, [r7, #11]
 80059fe:	2241      	movs	r2, #65	; 0x41
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	f7ff fca0 	bl	8005346 <_ZN16NS_energyShield29writeByteEhhh>
		
		// Finish computing new checksum		
		tempCheckSum += alarmSOC;
 8005a06:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005a0a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005a0e:	4413      	add	r3, r2
 8005a10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		tempCheckSum += alarmSOC;
 8005a14:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005a18:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		
		newCheckSum = 0xFF - tempCheckSum;
 8005a22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005a26:	43db      	mvns	r3, r3
 8005a28:	777b      	strb	r3, [r7, #29]
		writeByte(slaveAddress, 0x60, newCheckSum);
 8005a2a:	7f7b      	ldrb	r3, [r7, #29]
 8005a2c:	7af9      	ldrb	r1, [r7, #11]
 8005a2e:	2260      	movs	r2, #96	; 0x60
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f7ff fc88 	bl	8005346 <_ZN16NS_energyShield29writeByteEhhh>
		
		// Verify RAM update is complete
		writeByte(slaveAddress, 0x3E, 0x31);
 8005a36:	7af9      	ldrb	r1, [r7, #11]
 8005a38:	2331      	movs	r3, #49	; 0x31
 8005a3a:	223e      	movs	r2, #62	; 0x3e
 8005a3c:	68f8      	ldr	r0, [r7, #12]
 8005a3e:	f7ff fc82 	bl	8005346 <_ZN16NS_energyShield29writeByteEhhh>
		writeByte(slaveAddress, 0x3F, 0x00);
 8005a42:	7af9      	ldrb	r1, [r7, #11]
 8005a44:	2300      	movs	r3, #0
 8005a46:	223f      	movs	r2, #63	; 0x3f
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f7ff fc7c 	bl	8005346 <_ZN16NS_energyShield29writeByteEhhh>
		checkSum = readByte(slaveAddress, 0x60);
 8005a4e:	7afb      	ldrb	r3, [r7, #11]
 8005a50:	2260      	movs	r2, #96	; 0x60
 8005a52:	4619      	mov	r1, r3
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f7ff fc9b 	bl	8005390 <_ZN16NS_energyShield28readByteEhh>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	773b      	strb	r3, [r7, #28]
	
	} while (checkSum != newCheckSum);
 8005a5e:	7f3a      	ldrb	r2, [r7, #28]
 8005a60:	7f7b      	ldrb	r3, [r7, #29]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d001      	beq.n	8005a6a <_ZN16NS_energyShield214setupFuelGaugeEhttth+0x552>
	do {		
 8005a66:	e786      	b.n	8005976 <_ZN16NS_energyShield214setupFuelGaugeEhttth+0x45e>
			break;
 8005a68:	bf00      	nop
	
	// Exit CONFIG UPDATE mode
	writeCommand(slaveAddress, 0x00, 0x0042);
 8005a6a:	7af9      	ldrb	r1, [r7, #11]
 8005a6c:	2342      	movs	r3, #66	; 0x42
 8005a6e:	2200      	movs	r2, #0
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f7ff fcaf 	bl	80053d4 <_ZN16NS_energyShield212writeCommandEhht>
	do {
		flags = readCommand(slaveAddress, 0x06);		
 8005a76:	7afb      	ldrb	r3, [r7, #11]
 8005a78:	2206      	movs	r2, #6
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	68f8      	ldr	r0, [r7, #12]
 8005a7e:	f7ff fcd6 	bl	800542e <_ZN16NS_energyShield211readCommandEhh>
 8005a82:	4603      	mov	r3, r0
 8005a84:	853b      	strh	r3, [r7, #40]	; 0x28
	} while (flags & 0x0010);	
 8005a86:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005a88:	f003 0310 	and.w	r3, r3, #16
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d000      	beq.n	8005a92 <_ZN16NS_energyShield214setupFuelGaugeEhttth+0x57a>
	do {
 8005a90:	e7f1      	b.n	8005a76 <_ZN16NS_energyShield214setupFuelGaugeEhttth+0x55e>
	
	// Seal fuel gauge
	writeCommand(slaveAddress, 0x00, 0x0020);	
 8005a92:	7af9      	ldrb	r1, [r7, #11]
 8005a94:	2320      	movs	r3, #32
 8005a96:	2200      	movs	r2, #0
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f7ff fc9b 	bl	80053d4 <_ZN16NS_energyShield212writeCommandEhht>
	
	return 0;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3730      	adds	r7, #48	; 0x30
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <_ZN16NS_energyShield29decodeBCDEh>:

// Decode tens place, units place formating (BCD)
uint8_t NS_energyShield2::decodeBCD(uint8_t bcd)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	70fb      	strb	r3, [r7, #3]
	uint8_t _value = ((0b01110000 & bcd) >> 4) * 10 + (0b00001111 & bcd);
 8005ab4:	78fb      	ldrb	r3, [r7, #3]
 8005ab6:	111b      	asrs	r3, r3, #4
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	f003 0307 	and.w	r3, r3, #7
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	0092      	lsls	r2, r2, #2
 8005ac4:	4413      	add	r3, r2
 8005ac6:	005b      	lsls	r3, r3, #1
 8005ac8:	b2da      	uxtb	r2, r3
 8005aca:	78fb      	ldrb	r3, [r7, #3]
 8005acc:	f003 030f 	and.w	r3, r3, #15
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	4413      	add	r3, r2
 8005ad4:	73fb      	strb	r3, [r7, #15]

	return _value;
 8005ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3714      	adds	r7, #20
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <_ZN16NS_energyShield2C1EP19__I2C_HandleTypeDef>:
*****************************************/
#include <adc.h>
#include ".\NS_energyShield2.h"

// Creates an instance of NS_energyShield2
NS_energyShield2::NS_energyShield2(I2C_HandleTypeDef *pI2C)
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
{
	_batteryCapacity = BATTERY_CAPACITY;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8005af4:	811a      	strh	r2, [r3, #8]
	_pI2C = pI2C;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	683a      	ldr	r2, [r7, #0]
 8005afa:	60da      	str	r2, [r3, #12]
}
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4618      	mov	r0, r3
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <_ZN16NS_energyShield29readClockEv>:
  return;
}

// Read current time and date into a local buffer
void NS_energyShield2::readClock()
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b088      	sub	sp, #32
 8005b0e:	af04      	add	r7, sp, #16
 8005b10:	6078      	str	r0, [r7, #4]
	int i=0;	
 8005b12:	2300      	movs	r3, #0
 8005b14:	60fb      	str	r3, [r7, #12]
	
	// Read time and date
	// read from register 4 to 0xA from RTC
	HAL_I2C_Mem_Read(_pI2C, RTC_SLAVE_ADDR << 1, 0x04, I2C_MEMADD_SIZE_8BIT, _timeDate, 7, 100);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	68d8      	ldr	r0, [r3, #12]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2264      	movs	r2, #100	; 0x64
 8005b1e:	9202      	str	r2, [sp, #8]
 8005b20:	2207      	movs	r2, #7
 8005b22:	9201      	str	r2, [sp, #4]
 8005b24:	9300      	str	r3, [sp, #0]
 8005b26:	2301      	movs	r3, #1
 8005b28:	2204      	movs	r2, #4
 8005b2a:	21a2      	movs	r1, #162	; 0xa2
 8005b2c:	f7fd fb66 	bl	80031fc <HAL_I2C_Mem_Read>

	
	// Convert seconds, minutes, hours, day-of-the-month, and year from BCD to binary (skipping day-of-the-week)
	for (i = 0; i < 7; i++)
 8005b30:	2300      	movs	r3, #0
 8005b32:	60fb      	str	r3, [r7, #12]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2b06      	cmp	r3, #6
 8005b38:	dc15      	bgt.n	8005b66 <_ZN16NS_energyShield29readClockEv+0x5c>
	{
		if (i != 4)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2b04      	cmp	r3, #4
 8005b3e:	d00e      	beq.n	8005b5e <_ZN16NS_energyShield29readClockEv+0x54>
			_timeDate[i] = decodeBCD(_timeDate[i]);
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	4413      	add	r3, r2
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	4619      	mov	r1, r3
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f7ff ffac 	bl	8005aa8 <_ZN16NS_energyShield29decodeBCDEh>
 8005b50:	4603      	mov	r3, r0
 8005b52:	4619      	mov	r1, r3
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	4413      	add	r3, r2
 8005b5a:	460a      	mov	r2, r1
 8005b5c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 7; i++)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	3301      	adds	r3, #1
 8005b62:	60fb      	str	r3, [r7, #12]
 8005b64:	e7e6      	b.n	8005b34 <_ZN16NS_energyShield29readClockEv+0x2a>
	}
	
	return;
 8005b66:	bf00      	nop
}
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <_ZN16NS_energyShield26secondEv>:

// Returns current second(0-59)
uint8_t NS_energyShield2::second()
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b083      	sub	sp, #12
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
	return _timeDate[0];
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	781b      	ldrb	r3, [r3, #0]
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	370c      	adds	r7, #12
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr

08005b86 <_ZN16NS_energyShield26minuteEv>:

// Returns current minute (0-59)
uint8_t NS_energyShield2::minute()
{
 8005b86:	b480      	push	{r7}
 8005b88:	b083      	sub	sp, #12
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
	return _timeDate[1];
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	785b      	ldrb	r3, [r3, #1]
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	370c      	adds	r7, #12
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr

08005b9e <_ZN16NS_energyShield24hourEv>:

// Returns current hour (0-23)
uint8_t NS_energyShield2::hour()
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b083      	sub	sp, #12
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
	return _timeDate[2];
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	789b      	ldrb	r3, [r3, #2]
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	370c      	adds	r7, #12
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <_ZN16NS_energyShield210dayOfMonthEv>:

// Returns current day of the month (1-31)
uint8_t NS_energyShield2::dayOfMonth()
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b083      	sub	sp, #12
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
	return _timeDate[3];
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	78db      	ldrb	r3, [r3, #3]
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <_ZN16NS_energyShield25monthEv>:
	return _timeDate[4];
}

// Returns current month (1-12)
uint8_t NS_energyShield2::month()
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b083      	sub	sp, #12
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
	return _timeDate[5];
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	795b      	ldrb	r3, [r3, #5]
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	370c      	adds	r7, #12
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <_ZN16NS_energyShield24yearEv>:

// Returns current year (00-99)
uint8_t NS_energyShield2::year()
{
 8005be6:	b480      	push	{r7}
 8005be8:	b083      	sub	sp, #12
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
	return _timeDate[6];
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	799b      	ldrb	r3, [r3, #6]
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <_ZN16NS_energyShield211clearAlarmsEv>:

// Clears any active RTC alarms
void NS_energyShield2::clearAlarms()
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b08a      	sub	sp, #40	; 0x28
 8005c02:	af04      	add	r7, sp, #16
 8005c04:	6078      	str	r0, [r7, #4]
	uint8_t tmp[5];

	for(int i = 0; i < 5; i++)
 8005c06:	2300      	movs	r3, #0
 8005c08:	617b      	str	r3, [r7, #20]
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	2b04      	cmp	r3, #4
 8005c0e:	dc09      	bgt.n	8005c24 <_ZN16NS_energyShield211clearAlarmsEv+0x26>
		tmp[i] = 0xff;
 8005c10:	f107 020c 	add.w	r2, r7, #12
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	4413      	add	r3, r2
 8005c18:	22ff      	movs	r2, #255	; 0xff
 8005c1a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 5; i++)
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	3301      	adds	r3, #1
 8005c20:	617b      	str	r3, [r7, #20]
 8005c22:	e7f2      	b.n	8005c0a <_ZN16NS_energyShield211clearAlarmsEv+0xc>

	//HAL_Delay(15);
	HAL_I2C_Mem_Write(_pI2C, RTC_SLAVE_ADDR << 1, 0x0B, I2C_MEMADD_SIZE_8BIT, tmp, 5, 100);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	68d8      	ldr	r0, [r3, #12]
 8005c28:	2364      	movs	r3, #100	; 0x64
 8005c2a:	9302      	str	r3, [sp, #8]
 8005c2c:	2305      	movs	r3, #5
 8005c2e:	9301      	str	r3, [sp, #4]
 8005c30:	f107 030c 	add.w	r3, r7, #12
 8005c34:	9300      	str	r3, [sp, #0]
 8005c36:	2301      	movs	r3, #1
 8005c38:	220b      	movs	r2, #11
 8005c3a:	21a2      	movs	r1, #162	; 0xa2
 8005c3c:	f7fd fa26 	bl	800308c <HAL_I2C_Mem_Write>

	return;
 8005c40:	bf00      	nop
}
 8005c42:	3718      	adds	r7, #24
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <_ZN16NS_energyShield28readVMPPEv>:
  }
}

// Read the current VMPP setting from DAC
int NS_energyShield2::readVMPP()
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b086      	sub	sp, #24
 8005c4c:	af02      	add	r7, sp, #8
 8005c4e:	6078      	str	r0, [r7, #4]
	uint8_t data[2];
	do
	{
		HAL_I2C_Master_Receive(_pI2C, DAC_SLAVE_ADDR<<1, data, 2, 100);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	68d8      	ldr	r0, [r3, #12]
 8005c54:	f107 020c 	add.w	r2, r7, #12
 8005c58:	2364      	movs	r3, #100	; 0x64
 8005c5a:	9300      	str	r3, [sp, #0]
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	21c0      	movs	r1, #192	; 0xc0
 8005c60:	f7fd f97e 	bl	8002f60 <HAL_I2C_Master_Receive>
	} while (!(data[0] & 0b10000000));
 8005c64:	7b3b      	ldrb	r3, [r7, #12]
 8005c66:	b25b      	sxtb	r3, r3
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	db00      	blt.n	8005c6e <_ZN16NS_energyShield28readVMPPEv+0x26>
	do
 8005c6c:	e7f0      	b.n	8005c50 <_ZN16NS_energyShield28readVMPPEv+0x8>

	if (data[0] & 0b00000110)
 8005c6e:	7b3b      	ldrb	r3, [r7, #12]
 8005c70:	f003 0306 	and.w	r3, r3, #6
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d002      	beq.n	8005c7e <_ZN16NS_energyShield28readVMPPEv+0x36>
	{
		return -1;
 8005c78:	f04f 33ff 	mov.w	r3, #4294967295
 8005c7c:	e009      	b.n	8005c92 <_ZN16NS_energyShield28readVMPPEv+0x4a>
	}
	else
	{
		return ((unsigned long) (357 - (int)(data[1])) << 16) / 984;
 8005c7e:	7b7b      	ldrb	r3, [r7, #13]
 8005c80:	f5c3 73b2 	rsb	r3, r3, #356	; 0x164
 8005c84:	3301      	adds	r3, #1
 8005c86:	041b      	lsls	r3, r3, #16
 8005c88:	08db      	lsrs	r3, r3, #3
 8005c8a:	4a04      	ldr	r2, [pc, #16]	; (8005c9c <_ZN16NS_energyShield28readVMPPEv+0x54>)
 8005c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c90:	091b      	lsrs	r3, r3, #4
	}
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	214d0215 	.word	0x214d0215

08005ca0 <_ZN16NS_energyShield27setVMPPEib>:

// Set regulated MPP voltage of solar panel and writes to EEPROM
void NS_energyShield2::setVMPP(int MPP_Voltage_mV, bool writeEEPROM)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b08a      	sub	sp, #40	; 0x28
 8005ca4:	af02      	add	r7, sp, #8
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	4613      	mov	r3, r2
 8005cac:	71fb      	strb	r3, [r7, #7]
	uint8_t DAC_setting, Control, Hbyte, Lbyte, data[2];
	uint8_t tmp[3];

	do
	{
		HAL_I2C_Master_Receive(_pI2C, DAC_SLAVE_ADDR<<1, data, 2, 100);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	68d8      	ldr	r0, [r3, #12]
 8005cb2:	f107 0218 	add.w	r2, r7, #24
 8005cb6:	2364      	movs	r3, #100	; 0x64
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	2302      	movs	r3, #2
 8005cbc:	21c0      	movs	r1, #192	; 0xc0
 8005cbe:	f7fd f94f 	bl	8002f60 <HAL_I2C_Master_Receive>
	} while (!(data[0] & 0b10000000));
 8005cc2:	7e3b      	ldrb	r3, [r7, #24]
 8005cc4:	b25b      	sxtb	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	db00      	blt.n	8005ccc <_ZN16NS_energyShield27setVMPPEib+0x2c>
	do
 8005cca:	e7f0      	b.n	8005cae <_ZN16NS_energyShield27setVMPPEib+0xe>


	// Check to see if regulation is already disabled
	if ((MPP_Voltage_mV <= 0) && (data[0] & 0b00000110))
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	dc04      	bgt.n	8005cdc <_ZN16NS_energyShield27setVMPPEib+0x3c>
 8005cd2:	7e3b      	ldrb	r3, [r7, #24]
 8005cd4:	f003 0306 	and.w	r3, r3, #6
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d139      	bne.n	8005d50 <_ZN16NS_energyShield27setVMPPEib+0xb0>
		return;

	// Calculates the required DAC voltage to bias the feedback 
	DAC_setting = 357 - ((unsigned long) 984 * MPP_Voltage_mV >> 16);
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8005ce2:	fb02 f303 	mul.w	r3, r2, r3
 8005ce6:	0c1b      	lsrs	r3, r3, #16
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	f1c3 0365 	rsb	r3, r3, #101	; 0x65
 8005cee:	773b      	strb	r3, [r7, #28]

	if (data[1] != DAC_setting)
 8005cf0:	7e7b      	ldrb	r3, [r7, #25]
 8005cf2:	7f3a      	ldrb	r2, [r7, #28]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d02d      	beq.n	8005d54 <_ZN16NS_energyShield27setVMPPEib+0xb4>
	{
		if (MPP_Voltage_mV > 0)
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	dd0b      	ble.n	8005d16 <_ZN16NS_energyShield27setVMPPEib+0x76>
		{
			// Formats data for transmission
			Control = writeEEPROM ? 0x70 : 0x50;
 8005cfe:	79fb      	ldrb	r3, [r7, #7]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d001      	beq.n	8005d08 <_ZN16NS_energyShield27setVMPPEib+0x68>
 8005d04:	2370      	movs	r3, #112	; 0x70
 8005d06:	e000      	b.n	8005d0a <_ZN16NS_energyShield27setVMPPEib+0x6a>
 8005d08:	2350      	movs	r3, #80	; 0x50
 8005d0a:	77fb      	strb	r3, [r7, #31]
			Hbyte = DAC_setting;
 8005d0c:	7f3b      	ldrb	r3, [r7, #28]
 8005d0e:	77bb      	strb	r3, [r7, #30]
			Lbyte = 0x00;
 8005d10:	2300      	movs	r3, #0
 8005d12:	777b      	strb	r3, [r7, #29]
 8005d14:	e00a      	b.n	8005d2c <_ZN16NS_energyShield27setVMPPEib+0x8c>
		}
		else
		{
			// Sets DAC to high impedance, low power state
			Control = writeEEPROM ? 0x76 : 0x56;
 8005d16:	79fb      	ldrb	r3, [r7, #7]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d001      	beq.n	8005d20 <_ZN16NS_energyShield27setVMPPEib+0x80>
 8005d1c:	2376      	movs	r3, #118	; 0x76
 8005d1e:	e000      	b.n	8005d22 <_ZN16NS_energyShield27setVMPPEib+0x82>
 8005d20:	2356      	movs	r3, #86	; 0x56
 8005d22:	77fb      	strb	r3, [r7, #31]
			Hbyte = 0x00;
 8005d24:	2300      	movs	r3, #0
 8005d26:	77bb      	strb	r3, [r7, #30]
			Lbyte = 0x00;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	777b      	strb	r3, [r7, #29]
		}
		tmp[0] = Control;
 8005d2c:	7ffb      	ldrb	r3, [r7, #31]
 8005d2e:	753b      	strb	r3, [r7, #20]
		tmp[1] = Hbyte;
 8005d30:	7fbb      	ldrb	r3, [r7, #30]
 8005d32:	757b      	strb	r3, [r7, #21]
		tmp[2] = Lbyte;
 8005d34:	7f7b      	ldrb	r3, [r7, #29]
 8005d36:	75bb      	strb	r3, [r7, #22]

		// Write value to DAC
		HAL_I2C_Master_Transmit(_pI2C, DAC_SLAVE_ADDR<<1, tmp, 3, 100);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	68d8      	ldr	r0, [r3, #12]
 8005d3c:	f107 0214 	add.w	r2, r7, #20
 8005d40:	2364      	movs	r3, #100	; 0x64
 8005d42:	9300      	str	r3, [sp, #0]
 8005d44:	2303      	movs	r3, #3
 8005d46:	21c0      	movs	r1, #192	; 0xc0
 8005d48:	f7fd f876 	bl	8002e38 <HAL_I2C_Master_Transmit>
	}

	return;
 8005d4c:	bf00      	nop
 8005d4e:	e001      	b.n	8005d54 <_ZN16NS_energyShield27setVMPPEib+0xb4>
		return;
 8005d50:	bf00      	nop
 8005d52:	e000      	b.n	8005d56 <_ZN16NS_energyShield27setVMPPEib+0xb6>
	return;
 8005d54:	bf00      	nop
}
 8005d56:	3720      	adds	r7, #32
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <_ZN16NS_energyShield214batteryVoltageEv>:

// Returns battery voltage from fuel gauge in mV
uint16_t NS_energyShield2::batteryVoltage()
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
	uint16_t voltage = readCommand(FG_SLAVE_ADDR, 0x04);
 8005d64:	2204      	movs	r2, #4
 8005d66:	2155      	movs	r1, #85	; 0x55
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f7ff fb60 	bl	800542e <_ZN16NS_energyShield211readCommandEhh>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	81fb      	strh	r3, [r7, #14]
	return voltage;
 8005d72:	89fb      	ldrh	r3, [r7, #14]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3710      	adds	r7, #16
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <_ZN16NS_energyShield214batteryCurrentEv>:

// Returns 1 second average of current from fuel gauge in mA
int16_t NS_energyShield2::batteryCurrent()
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
	int16_t current = readCommand(FG_SLAVE_ADDR, 0x10);
 8005d84:	2210      	movs	r2, #16
 8005d86:	2155      	movs	r1, #85	; 0x55
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f7ff fb50 	bl	800542e <_ZN16NS_energyShield211readCommandEhh>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	81fb      	strh	r3, [r7, #14]
	return current;
 8005d92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <_ZN16NS_energyShield211temperatureEv>:

// Returns temperature from fuel gauge in tenths of a degree Celsius (0.1 C)
int16_t NS_energyShield2::temperature()
{
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b084      	sub	sp, #16
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
	int16_t temp = readCommand(FG_SLAVE_ADDR, 0x02);
 8005da6:	2202      	movs	r2, #2
 8005da8:	2155      	movs	r1, #85	; 0x55
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f7ff fb3f 	bl	800542e <_ZN16NS_energyShield211readCommandEhh>
 8005db0:	4603      	mov	r3, r0
 8005db2:	81fb      	strh	r3, [r7, #14]
	temp -= 2732;
 8005db4:	89fb      	ldrh	r3, [r7, #14]
 8005db6:	f6a3 23ac 	subw	r3, r3, #2732	; 0xaac
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	81fb      	strh	r3, [r7, #14]
	return temp;
 8005dbe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <_ZN16NS_energyShield23SOCEv>:

// Returns state-of-charge from fuel gauge in percent of full charge (1%)
uint16_t NS_energyShield2::SOC()
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b084      	sub	sp, #16
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
	uint16_t SOC = readCommand(FG_SLAVE_ADDR, 0x1C);
 8005dd2:	221c      	movs	r2, #28
 8005dd4:	2155      	movs	r1, #85	; 0x55
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f7ff fb29 	bl	800542e <_ZN16NS_energyShield211readCommandEhh>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	81fb      	strh	r3, [r7, #14]
	return SOC;
 8005de0:	89fb      	ldrh	r3, [r7, #14]
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <_ZN16NS_energyShield218fullChargeCapacityEv>:

// Returns full-charge capacity from fuel gauge in mAh
uint16_t NS_energyShield2::fullChargeCapacity()
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b084      	sub	sp, #16
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
	uint16_t fullChargeCapacity = readCommand(FG_SLAVE_ADDR, 0x0E);
 8005df2:	220e      	movs	r2, #14
 8005df4:	2155      	movs	r1, #85	; 0x55
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f7ff fb19 	bl	800542e <_ZN16NS_energyShield211readCommandEhh>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	81fb      	strh	r3, [r7, #14]
	return fullChargeCapacity;
 8005e00:	89fb      	ldrh	r3, [r7, #14]
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <_ZN16NS_energyShield217remainingCapacityEv>:

// Returns remaining capacity from fuel gauge in mAh
uint16_t NS_energyShield2::remainingCapacity()
{
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b084      	sub	sp, #16
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
	uint16_t remainingCapacity = readCommand(FG_SLAVE_ADDR, 0x0C);
 8005e12:	220c      	movs	r2, #12
 8005e14:	2155      	movs	r1, #85	; 0x55
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f7ff fb09 	bl	800542e <_ZN16NS_energyShield211readCommandEhh>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	81fb      	strh	r3, [r7, #14]
	return remainingCapacity;
 8005e20:	89fb      	ldrh	r3, [r7, #14]
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
	...

08005e2c <_ZN16NS_energyShield212inputVoltageEh>:
	return 0;
}

// Returns solar/adapter input voltage in mV (default pin, A0)
uint16_t NS_energyShield2::inputVoltage(uint8_t analogChannel)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	460b      	mov	r3, r1
 8005e36:	70fb      	strb	r3, [r7, #3]
	uint16_t voltage = 0;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	81fb      	strh	r3, [r7, #14]

	if (analogChannel == 0) 			// PA0 is configured ADC1_IN5
 8005e3c:	78fb      	ldrb	r3, [r7, #3]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d127      	bne.n	8005e92 <_ZN16NS_energyShield212inputVoltageEh+0x66>
	{
		HAL_ADC_Start(&hadc1);
 8005e42:	4816      	ldr	r0, [pc, #88]	; (8005e9c <_ZN16NS_energyShield212inputVoltageEh+0x70>)
 8005e44:	f7fc fbf8 	bl	8002638 <HAL_ADC_Start>
		for (int ix = 0; ix < 4; ix++)
 8005e48:	2300      	movs	r3, #0
 8005e4a:	60bb      	str	r3, [r7, #8]
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	2b03      	cmp	r3, #3
 8005e50:	dc18      	bgt.n	8005e84 <_ZN16NS_energyShield212inputVoltageEh+0x58>
		{
			if (HAL_ADC_PollForConversion(&hadc1, 4000) == HAL_OK)
 8005e52:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8005e56:	4811      	ldr	r0, [pc, #68]	; (8005e9c <_ZN16NS_energyShield212inputVoltageEh+0x70>)
 8005e58:	f7fc f958 	bl	800210c <HAL_ADC_PollForConversion>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	bf0c      	ite	eq
 8005e62:	2301      	moveq	r3, #1
 8005e64:	2300      	movne	r3, #0
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d007      	beq.n	8005e7c <_ZN16NS_energyShield212inputVoltageEh+0x50>
			{
				voltage += HAL_ADC_GetValue(&hadc1);
 8005e6c:	480b      	ldr	r0, [pc, #44]	; (8005e9c <_ZN16NS_energyShield212inputVoltageEh+0x70>)
 8005e6e:	f7fc f9c5 	bl	80021fc <HAL_ADC_GetValue>
 8005e72:	4603      	mov	r3, r0
 8005e74:	b29a      	uxth	r2, r3
 8005e76:	89fb      	ldrh	r3, [r7, #14]
 8005e78:	4413      	add	r3, r2
 8005e7a:	81fb      	strh	r3, [r7, #14]
		for (int ix = 0; ix < 4; ix++)
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	3301      	adds	r3, #1
 8005e80:	60bb      	str	r3, [r7, #8]
 8005e82:	e7e3      	b.n	8005e4c <_ZN16NS_energyShield212inputVoltageEh+0x20>
			}
		}
		voltage = (unsigned long) (voltage / 4) * 5;
 8005e84:	89fb      	ldrh	r3, [r7, #14]
 8005e86:	089b      	lsrs	r3, r3, #2
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	0092      	lsls	r2, r2, #2
 8005e8e:	4413      	add	r3, r2
 8005e90:	81fb      	strh	r3, [r7, #14]
	}

	return voltage;
 8005e92:	89fb      	ldrh	r3, [r7, #14]
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3710      	adds	r7, #16
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	20000268 	.word	0x20000268

08005ea0 <_ZN16NS_energyShield25beginEv>:

// Set up energyShield 2 for use
int NS_energyShield2::begin()
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af02      	add	r7, sp, #8
 8005ea6:	6078      	str	r0, [r7, #4]
	int error=0;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	60fb      	str	r3, [r7, #12]
	
	// Setup RTC
	writeByte(RTC_SLAVE_ADDR, 0x00, 0b01001001); // Normal Mode, Run (Not Stop), No Reset, No Correction, 24-Hour, 12.5pF
 8005eac:	2349      	movs	r3, #73	; 0x49
 8005eae:	2200      	movs	r2, #0
 8005eb0:	2151      	movs	r1, #81	; 0x51
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f7ff fa47 	bl	8005346 <_ZN16NS_energyShield29writeByteEhhh>
	writeByte(RTC_SLAVE_ADDR, 0x01, 0b11000111); // Alarm Interrupt Enabled, Leave Alarm Flag Unchanged, Disable MI, HMI, and TF, No CLKOUT
 8005eb8:	23c7      	movs	r3, #199	; 0xc7
 8005eba:	2201      	movs	r2, #1
 8005ebc:	2151      	movs	r1, #81	; 0x51
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f7ff fa41 	bl	8005346 <_ZN16NS_energyShield29writeByteEhhh>
	clearAlarms();
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f7ff fe9a 	bl	8005bfe <_ZN16NS_energyShield211clearAlarmsEv>
	
	// Setup Fuel Gauge	
	error |= setupFuelGauge(FG_SLAVE_ADDR, _batteryCapacity, BATTERY_TERMVOLT_MV, BATTERY_TERMCUR_MA, ALARM_SOC); // Write correct RAM values
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	891a      	ldrh	r2, [r3, #8]
 8005ece:	230a      	movs	r3, #10
 8005ed0:	9301      	str	r3, [sp, #4]
 8005ed2:	2341      	movs	r3, #65	; 0x41
 8005ed4:	9300      	str	r3, [sp, #0]
 8005ed6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005eda:	2155      	movs	r1, #85	; 0x55
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f7ff fb1b 	bl	8005518 <_ZN16NS_energyShield214setupFuelGaugeEhttth>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	60fb      	str	r3, [r7, #12]
		
	return error;
 8005eea:	68fb      	ldr	r3, [r7, #12]
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3710      	adds	r7, #16
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8005ef4:	b510      	push	{r4, lr}
  ADC_MultiModeTypeDef multimode = {0};
 8005ef6:	2400      	movs	r4, #0
{
 8005ef8:	b08a      	sub	sp, #40	; 0x28
  ADC_ChannelConfTypeDef sConfig = {0};
 8005efa:	2218      	movs	r2, #24
 8005efc:	4621      	mov	r1, r4
 8005efe:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 8005f00:	9401      	str	r4, [sp, #4]
 8005f02:	9402      	str	r4, [sp, #8]
 8005f04:	9403      	str	r4, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 8005f06:	f001 fe35 	bl	8007b74 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8005f0a:	481b      	ldr	r0, [pc, #108]	; (8005f78 <MX_ADC1_Init+0x84>)
 8005f0c:	4b1b      	ldr	r3, [pc, #108]	; (8005f7c <MX_ADC1_Init+0x88>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005f0e:	6084      	str	r4, [r0, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8005f10:	e880 0018 	stmia.w	r0, {r3, r4}
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005f14:	2304      	movs	r3, #4
 8005f16:	6143      	str	r3, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
 8005f18:	2301      	movs	r3, #1
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005f1a:	60c4      	str	r4, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005f1c:	6104      	str	r4, [r0, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8005f1e:	7604      	strb	r4, [r0, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8005f20:	7643      	strb	r3, [r0, #25]
  hadc1.Init.NbrOfConversion = 1;
 8005f22:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005f24:	f880 4020 	strb.w	r4, [r0, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005f28:	6284      	str	r4, [r0, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005f2a:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8005f2c:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005f30:	6344      	str	r4, [r0, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8005f32:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005f36:	f7fc f809 	bl	8001f4c <HAL_ADC_Init>
 8005f3a:	b108      	cbz	r0, 8005f40 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8005f3c:	f000 fc3c 	bl	80067b8 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8005f40:	a901      	add	r1, sp, #4
 8005f42:	480d      	ldr	r0, [pc, #52]	; (8005f78 <MX_ADC1_Init+0x84>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8005f44:	9401      	str	r4, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8005f46:	f7fc fbf1 	bl	800272c <HAL_ADCEx_MultiModeConfigChannel>
 8005f4a:	b108      	cbz	r0, 8005f50 <MX_ADC1_Init+0x5c>
  {
    Error_Handler();
 8005f4c:	f000 fc34 	bl	80067b8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8005f50:	4b0b      	ldr	r3, [pc, #44]	; (8005f80 <MX_ADC1_Init+0x8c>)
 8005f52:	9304      	str	r3, [sp, #16]
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005f54:	227f      	movs	r2, #127	; 0x7f
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005f56:	2306      	movs	r3, #6
 8005f58:	9305      	str	r3, [sp, #20]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005f5a:	9207      	str	r2, [sp, #28]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8005f5c:	2300      	movs	r3, #0
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005f5e:	2204      	movs	r2, #4
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005f60:	a904      	add	r1, sp, #16
 8005f62:	4805      	ldr	r0, [pc, #20]	; (8005f78 <MX_ADC1_Init+0x84>)
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8005f64:	9306      	str	r3, [sp, #24]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005f66:	9208      	str	r2, [sp, #32]
  sConfig.Offset = 0;
 8005f68:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005f6a:	f7fc f94b 	bl	8002204 <HAL_ADC_ConfigChannel>
 8005f6e:	b108      	cbz	r0, 8005f74 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8005f70:	f000 fc22 	bl	80067b8 <Error_Handler>
  }

}
 8005f74:	b00a      	add	sp, #40	; 0x28
 8005f76:	bd10      	pop	{r4, pc}
 8005f78:	20000268 	.word	0x20000268
 8005f7c:	50040000 	.word	0x50040000
 8005f80:	14f00020 	.word	0x14f00020

08005f84 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005f84:	b510      	push	{r4, lr}
 8005f86:	4604      	mov	r4, r0
 8005f88:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f8a:	2214      	movs	r2, #20
 8005f8c:	2100      	movs	r1, #0
 8005f8e:	a803      	add	r0, sp, #12
 8005f90:	f001 fdf0 	bl	8007b74 <memset>
  if(adcHandle->Instance==ADC1)
 8005f94:	6822      	ldr	r2, [r4, #0]
 8005f96:	4b12      	ldr	r3, [pc, #72]	; (8005fe0 <HAL_ADC_MspInit+0x5c>)
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d11e      	bne.n	8005fda <HAL_ADC_MspInit+0x56>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8005f9c:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8005fa0:	f5a3 33f8 	sub.w	r3, r3, #126976	; 0x1f000
    PA0     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fa4:	a903      	add	r1, sp, #12
    __HAL_RCC_ADC_CLK_ENABLE();
 8005fa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fac:	64da      	str	r2, [r3, #76]	; 0x4c
 8005fae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fb0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005fb4:	9201      	str	r2, [sp, #4]
 8005fb6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fba:	f042 0201 	orr.w	r2, r2, #1
 8005fbe:	64da      	str	r2, [r3, #76]	; 0x4c
 8005fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	9302      	str	r3, [sp, #8]
 8005fc8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8005fd2:	230b      	movs	r3, #11
 8005fd4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fd6:	f7fc fc7d 	bl	80028d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8005fda:	b008      	add	sp, #32
 8005fdc:	bd10      	pop	{r4, pc}
 8005fde:	bf00      	nop
 8005fe0:	50040000 	.word	0x50040000

08005fe4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005fe4:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fe6:	2214      	movs	r2, #20
{
 8005fe8:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fea:	eb0d 0002 	add.w	r0, sp, r2
 8005fee:	2100      	movs	r1, #0
 8005ff0:	f001 fdc0 	bl	8007b74 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ff4:	4b21      	ldr	r3, [pc, #132]	; (800607c <MX_GPIO_Init+0x98>)
 8005ff6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ff8:	f042 0204 	orr.w	r2, r2, #4
 8005ffc:	64da      	str	r2, [r3, #76]	; 0x4c
 8005ffe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006000:	f002 0204 	and.w	r2, r2, #4
 8006004:	9201      	str	r2, [sp, #4]
 8006006:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006008:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800600a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800600e:	64da      	str	r2, [r3, #76]	; 0x4c
 8006010:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006012:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8006016:	9202      	str	r2, [sp, #8]
 8006018:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800601a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800601c:	f042 0201 	orr.w	r2, r2, #1
 8006020:	64da      	str	r2, [r3, #76]	; 0x4c
 8006022:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006024:	f002 0201 	and.w	r2, r2, #1
 8006028:	9203      	str	r2, [sp, #12]
 800602a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800602c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800602e:	f042 0202 	orr.w	r2, r2, #2
 8006032:	64da      	str	r2, [r3, #76]	; 0x4c
 8006034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006036:	f003 0302 	and.w	r3, r3, #2

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800603a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800603c:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800603e:	2120      	movs	r1, #32
 8006040:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006044:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8006046:	f7fc fd21 	bl	8002a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800604a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800604e:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = B1_Pin;
 8006050:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8006052:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006054:	4b0a      	ldr	r3, [pc, #40]	; (8006080 <MX_GPIO_Init+0x9c>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8006056:	480b      	ldr	r0, [pc, #44]	; (8006084 <MX_GPIO_Init+0xa0>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006058:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800605a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800605c:	f7fc fc3a 	bl	80028d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8006060:	2320      	movs	r3, #32
 8006062:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8006064:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006066:	2301      	movs	r3, #1
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8006068:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800606c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800606e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006070:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8006072:	f7fc fc2f 	bl	80028d4 <HAL_GPIO_Init>

}
 8006076:	b00a      	add	sp, #40	; 0x28
 8006078:	bd10      	pop	{r4, pc}
 800607a:	bf00      	nop
 800607c:	40021000 	.word	0x40021000
 8006080:	10210000 	.word	0x10210000
 8006084:	48000800 	.word	0x48000800

08006088 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8006088:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 800608a:	4812      	ldr	r0, [pc, #72]	; (80060d4 <MX_I2C1_Init+0x4c>)
  hi2c1.Init.Timing = 0x10909CEC;
 800608c:	4b12      	ldr	r3, [pc, #72]	; (80060d8 <MX_I2C1_Init+0x50>)
 800608e:	4913      	ldr	r1, [pc, #76]	; (80060dc <MX_I2C1_Init+0x54>)
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006090:	2201      	movs	r2, #1
  hi2c1.Init.Timing = 0x10909CEC;
 8006092:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c1.Init.OwnAddress1 = 0;
 8006096:	2300      	movs	r3, #0
 8006098:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800609a:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800609c:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800609e:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80060a0:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80060a2:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80060a4:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80060a6:	f7fc fe75 	bl	8002d94 <HAL_I2C_Init>
 80060aa:	b108      	cbz	r0, 80060b0 <MX_I2C1_Init+0x28>
  {
    Error_Handler();
 80060ac:	f000 fb84 	bl	80067b8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80060b0:	2100      	movs	r1, #0
 80060b2:	4808      	ldr	r0, [pc, #32]	; (80060d4 <MX_I2C1_Init+0x4c>)
 80060b4:	f7fd f960 	bl	8003378 <HAL_I2CEx_ConfigAnalogFilter>
 80060b8:	b108      	cbz	r0, 80060be <MX_I2C1_Init+0x36>
  {
    Error_Handler();
 80060ba:	f000 fb7d 	bl	80067b8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80060be:	2100      	movs	r1, #0
 80060c0:	4804      	ldr	r0, [pc, #16]	; (80060d4 <MX_I2C1_Init+0x4c>)
 80060c2:	f7fd f97f 	bl	80033c4 <HAL_I2CEx_ConfigDigitalFilter>
 80060c6:	b118      	cbz	r0, 80060d0 <MX_I2C1_Init+0x48>
  {
    Error_Handler();
  }

}
 80060c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80060cc:	f000 bb74 	b.w	80067b8 <Error_Handler>
 80060d0:	bd08      	pop	{r3, pc}
 80060d2:	bf00      	nop
 80060d4:	20000318 	.word	0x20000318
 80060d8:	10909cec 	.word	0x10909cec
 80060dc:	40005400 	.word	0x40005400

080060e0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80060e0:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 80060e2:	4812      	ldr	r0, [pc, #72]	; (800612c <MX_I2C2_Init+0x4c>)
  hi2c2.Init.Timing = 0x10909CEC;
 80060e4:	4b12      	ldr	r3, [pc, #72]	; (8006130 <MX_I2C2_Init+0x50>)
 80060e6:	4913      	ldr	r1, [pc, #76]	; (8006134 <MX_I2C2_Init+0x54>)
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80060e8:	2201      	movs	r2, #1
  hi2c2.Init.Timing = 0x10909CEC;
 80060ea:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c2.Init.OwnAddress1 = 0;
 80060ee:	2300      	movs	r3, #0
 80060f0:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80060f2:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80060f4:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80060f6:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80060f8:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80060fa:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80060fc:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80060fe:	f7fc fe49 	bl	8002d94 <HAL_I2C_Init>
 8006102:	b108      	cbz	r0, 8006108 <MX_I2C2_Init+0x28>
  {
    Error_Handler();
 8006104:	f000 fb58 	bl	80067b8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006108:	2100      	movs	r1, #0
 800610a:	4808      	ldr	r0, [pc, #32]	; (800612c <MX_I2C2_Init+0x4c>)
 800610c:	f7fd f934 	bl	8003378 <HAL_I2CEx_ConfigAnalogFilter>
 8006110:	b108      	cbz	r0, 8006116 <MX_I2C2_Init+0x36>
  {
    Error_Handler();
 8006112:	f000 fb51 	bl	80067b8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8006116:	2100      	movs	r1, #0
 8006118:	4804      	ldr	r0, [pc, #16]	; (800612c <MX_I2C2_Init+0x4c>)
 800611a:	f7fd f953 	bl	80033c4 <HAL_I2CEx_ConfigDigitalFilter>
 800611e:	b118      	cbz	r0, 8006128 <MX_I2C2_Init+0x48>
  {
    Error_Handler();
  }

}
 8006120:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8006124:	f000 bb48 	b.w	80067b8 <Error_Handler>
 8006128:	bd08      	pop	{r3, pc}
 800612a:	bf00      	nop
 800612c:	20000364 	.word	0x20000364
 8006130:	10909cec 	.word	0x10909cec
 8006134:	40005800 	.word	0x40005800

08006138 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8006138:	b508      	push	{r3, lr}

  hi2c3.Instance = I2C3;
 800613a:	4812      	ldr	r0, [pc, #72]	; (8006184 <MX_I2C3_Init+0x4c>)
  hi2c3.Init.Timing = 0x10909CEC;
 800613c:	4b12      	ldr	r3, [pc, #72]	; (8006188 <MX_I2C3_Init+0x50>)
 800613e:	4913      	ldr	r1, [pc, #76]	; (800618c <MX_I2C3_Init+0x54>)
  hi2c3.Init.OwnAddress1 = 0;
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006140:	2201      	movs	r2, #1
  hi2c3.Init.Timing = 0x10909CEC;
 8006142:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c3.Init.OwnAddress1 = 0;
 8006146:	2300      	movs	r3, #0
 8006148:	6083      	str	r3, [r0, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800614a:	60c2      	str	r2, [r0, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800614c:	6103      	str	r3, [r0, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800614e:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006150:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006152:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006154:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8006156:	f7fc fe1d 	bl	8002d94 <HAL_I2C_Init>
 800615a:	b108      	cbz	r0, 8006160 <MX_I2C3_Init+0x28>
  {
    Error_Handler();
 800615c:	f000 fb2c 	bl	80067b8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006160:	2100      	movs	r1, #0
 8006162:	4808      	ldr	r0, [pc, #32]	; (8006184 <MX_I2C3_Init+0x4c>)
 8006164:	f7fd f908 	bl	8003378 <HAL_I2CEx_ConfigAnalogFilter>
 8006168:	b108      	cbz	r0, 800616e <MX_I2C3_Init+0x36>
  {
    Error_Handler();
 800616a:	f000 fb25 	bl	80067b8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800616e:	2100      	movs	r1, #0
 8006170:	4804      	ldr	r0, [pc, #16]	; (8006184 <MX_I2C3_Init+0x4c>)
 8006172:	f7fd f927 	bl	80033c4 <HAL_I2CEx_ConfigDigitalFilter>
 8006176:	b118      	cbz	r0, 8006180 <MX_I2C3_Init+0x48>
  {
    Error_Handler();
  }

}
 8006178:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800617c:	f000 bb1c 	b.w	80067b8 <Error_Handler>
 8006180:	bd08      	pop	{r3, pc}
 8006182:	bf00      	nop
 8006184:	200002cc 	.word	0x200002cc
 8006188:	10909cec 	.word	0x10909cec
 800618c:	40005c00 	.word	0x40005c00

08006190 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006190:	b510      	push	{r4, lr}
 8006192:	4604      	mov	r4, r0
 8006194:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006196:	2214      	movs	r2, #20
 8006198:	2100      	movs	r1, #0
 800619a:	a807      	add	r0, sp, #28
 800619c:	f001 fcea 	bl	8007b74 <memset>
  if(i2cHandle->Instance==I2C1)
 80061a0:	6823      	ldr	r3, [r4, #0]
 80061a2:	4a38      	ldr	r2, [pc, #224]	; (8006284 <HAL_I2C_MspInit+0xf4>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d122      	bne.n	80061ee <HAL_I2C_MspInit+0x5e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80061a8:	4c37      	ldr	r4, [pc, #220]	; (8006288 <HAL_I2C_MspInit+0xf8>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061aa:	4838      	ldr	r0, [pc, #224]	; (800628c <HAL_I2C_MspInit+0xfc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80061ac:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80061ae:	f043 0302 	orr.w	r3, r3, #2
 80061b2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80061b4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80061b6:	f003 0302 	and.w	r3, r3, #2
 80061ba:	9301      	str	r3, [sp, #4]
 80061bc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80061be:	23c0      	movs	r3, #192	; 0xc0
 80061c0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80061c2:	2312      	movs	r3, #18
 80061c4:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80061c6:	2301      	movs	r3, #1
 80061c8:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061ca:	2303      	movs	r3, #3
 80061cc:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061ce:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80061d0:	2304      	movs	r3, #4
 80061d2:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061d4:	f7fc fb7e 	bl	80028d4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80061d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80061da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80061de:	65a3      	str	r3, [r4, #88]	; 0x58
 80061e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80061e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061e6:	9302      	str	r3, [sp, #8]
 80061e8:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80061ea:	b00c      	add	sp, #48	; 0x30
 80061ec:	bd10      	pop	{r4, pc}
  else if(i2cHandle->Instance==I2C2)
 80061ee:	4a28      	ldr	r2, [pc, #160]	; (8006290 <HAL_I2C_MspInit+0x100>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d122      	bne.n	800623a <HAL_I2C_MspInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80061f4:	4c24      	ldr	r4, [pc, #144]	; (8006288 <HAL_I2C_MspInit+0xf8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061f6:	4825      	ldr	r0, [pc, #148]	; (800628c <HAL_I2C_MspInit+0xfc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80061f8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80061fa:	f043 0302 	orr.w	r3, r3, #2
 80061fe:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006200:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006202:	f003 0302 	and.w	r3, r3, #2
 8006206:	9303      	str	r3, [sp, #12]
 8006208:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800620a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800620e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006210:	2312      	movs	r3, #18
 8006212:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006214:	2301      	movs	r3, #1
 8006216:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006218:	2303      	movs	r3, #3
 800621a:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800621c:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800621e:	2304      	movs	r3, #4
 8006220:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006222:	f7fc fb57 	bl	80028d4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006226:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006228:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800622c:	65a3      	str	r3, [r4, #88]	; 0x58
 800622e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006230:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006234:	9304      	str	r3, [sp, #16]
 8006236:	9b04      	ldr	r3, [sp, #16]
 8006238:	e7d7      	b.n	80061ea <HAL_I2C_MspInit+0x5a>
  else if(i2cHandle->Instance==I2C3)
 800623a:	4a16      	ldr	r2, [pc, #88]	; (8006294 <HAL_I2C_MspInit+0x104>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d1d4      	bne.n	80061ea <HAL_I2C_MspInit+0x5a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006240:	4c11      	ldr	r4, [pc, #68]	; (8006288 <HAL_I2C_MspInit+0xf8>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006242:	4815      	ldr	r0, [pc, #84]	; (8006298 <HAL_I2C_MspInit+0x108>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006244:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006246:	f043 0304 	orr.w	r3, r3, #4
 800624a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800624c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800624e:	f003 0304 	and.w	r3, r3, #4
 8006252:	9305      	str	r3, [sp, #20]
 8006254:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006256:	2212      	movs	r2, #18
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006258:	2303      	movs	r3, #3
 800625a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800625c:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800625e:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006260:	2201      	movs	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006262:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006264:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006266:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006268:	9209      	str	r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800626a:	f7fc fb33 	bl	80028d4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800626e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006270:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006274:	65a3      	str	r3, [r4, #88]	; 0x58
 8006276:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006278:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800627c:	9306      	str	r3, [sp, #24]
 800627e:	9b06      	ldr	r3, [sp, #24]
}
 8006280:	e7b3      	b.n	80061ea <HAL_I2C_MspInit+0x5a>
 8006282:	bf00      	nop
 8006284:	40005400 	.word	0x40005400
 8006288:	40021000 	.word	0x40021000
 800628c:	48000400 	.word	0x48000400
 8006290:	40005800 	.word	0x40005800
 8006294:	40005c00 	.word	0x40005c00
 8006298:	48000800 	.word	0x48000800

0800629c <MX_LPTIM1_Init>:

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{

  hlptim1.Instance = LPTIM1;
 800629c:	480d      	ldr	r0, [pc, #52]	; (80062d4 <MX_LPTIM1_Init+0x38>)
{
 800629e:	b508      	push	{r3, lr}
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_ULPTIM;
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80062a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
  hlptim1.Instance = LPTIM1;
 80062a4:	4b0c      	ldr	r3, [pc, #48]	; (80062d8 <MX_LPTIM1_Init+0x3c>)
 80062a6:	6003      	str	r3, [r0, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_ULPTIM;
 80062a8:	2201      	movs	r2, #1
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80062aa:	2300      	movs	r3, #0
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80062ac:	6141      	str	r1, [r0, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 80062ae:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_ULPTIM;
 80062b2:	6042      	str	r2, [r0, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80062b4:	6083      	str	r3, [r0, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 80062b6:	60c3      	str	r3, [r0, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 80062b8:	6103      	str	r3, [r0, #16]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80062ba:	6203      	str	r3, [r0, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80062bc:	6243      	str	r3, [r0, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 80062be:	6281      	str	r1, [r0, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_COMP1;
 80062c0:	62c2      	str	r2, [r0, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80062c2:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80062c4:	f7fd f8a4 	bl	8003410 <HAL_LPTIM_Init>
 80062c8:	b118      	cbz	r0, 80062d2 <MX_LPTIM1_Init+0x36>
  {
    Error_Handler();
  }

}
 80062ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80062ce:	f000 ba73 	b.w	80067b8 <Error_Handler>
 80062d2:	bd08      	pop	{r3, pc}
 80062d4:	200003b0 	.word	0x200003b0
 80062d8:	40007c00 	.word	0x40007c00

080062dc <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{

  if(lptimHandle->Instance==LPTIM1)
 80062dc:	6802      	ldr	r2, [r0, #0]
 80062de:	4b08      	ldr	r3, [pc, #32]	; (8006300 <HAL_LPTIM_MspInit+0x24>)
 80062e0:	429a      	cmp	r2, r3
{
 80062e2:	b082      	sub	sp, #8
  if(lptimHandle->Instance==LPTIM1)
 80062e4:	d10a      	bne.n	80062fc <HAL_LPTIM_MspInit+0x20>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80062e6:	f503 33ca 	add.w	r3, r3, #103424	; 0x19400
 80062ea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80062ec:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80062f0:	659a      	str	r2, [r3, #88]	; 0x58
 80062f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062f8:	9301      	str	r3, [sp, #4]
 80062fa:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 80062fc:	b002      	add	sp, #8
 80062fe:	4770      	bx	lr
 8006300:	40007c00 	.word	0x40007c00

08006304 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8006304:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006308:	b091      	sub	sp, #68	; 0x44
 800630a:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800630c:	f7fb fdd2 	bl	8001eb4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8006310:	f000 f9ae 	bl	8006670 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8006314:	f7ff fe66 	bl	8005fe4 <MX_GPIO_Init>
	MX_I2C1_Init();
 8006318:	f7ff feb6 	bl	8006088 <MX_I2C1_Init>
	MX_I2C2_Init();
 800631c:	f7ff fee0 	bl	80060e0 <MX_I2C2_Init>
	MX_I2C3_Init();
 8006320:	f7ff ff0a 	bl	8006138 <MX_I2C3_Init>
	MX_LPTIM1_Init();
 8006324:	f7ff ffba 	bl	800629c <MX_LPTIM1_Init>
	MX_USART2_UART_Init();
 8006328:	f000 fb1a 	bl	8006960 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 800632c:	f7ff fde2 	bl	8005ef4 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */

	Bmp.Begin();
 8006330:	48bb      	ldr	r0, [pc, #748]	; (8006620 <main+0x31c>)
 8006332:	f7fe fa05 	bl	8004740 <_ZN10SFE_BMP1805BeginEv>
	byte wait = Bmp.StartTemperature();
 8006336:	48ba      	ldr	r0, [pc, #744]	; (8006620 <main+0x31c>)
 8006338:	f7fe fd74 	bl	8004e24 <_ZN10SFE_BMP18016StartTemperatureEv>
 800633c:	4603      	mov	r3, r0
 800633e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	HAL_Delay(wait);
 8006342:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006346:	4618      	mov	r0, r3
 8006348:	f7fb fdd8 	bl	8001efc <HAL_Delay>
	float temp = 0.0;
 800634c:	f04f 0300 	mov.w	r3, #0
 8006350:	607b      	str	r3, [r7, #4]
	Bmp.GetTemperature(temp);
 8006352:	1d3b      	adds	r3, r7, #4
 8006354:	4619      	mov	r1, r3
 8006356:	48b2      	ldr	r0, [pc, #712]	; (8006620 <main+0x31c>)
 8006358:	f7fe fd7e 	bl	8004e58 <_ZN10SFE_BMP18014GetTemperatureERf>
	printf("MAIN: BMP180 temp = %f\n", temp);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4618      	mov	r0, r3
 8006360:	f7fa f8f2 	bl	8000548 <__aeabi_f2d>
 8006364:	4603      	mov	r3, r0
 8006366:	460c      	mov	r4, r1
 8006368:	461a      	mov	r2, r3
 800636a:	4623      	mov	r3, r4
 800636c:	48ad      	ldr	r0, [pc, #692]	; (8006624 <main+0x320>)
 800636e:	f002 f875 	bl	800845c <iprintf>

	if (Es2.begin())
 8006372:	48ad      	ldr	r0, [pc, #692]	; (8006628 <main+0x324>)
 8006374:	f7ff fd94 	bl	8005ea0 <_ZN16NS_energyShield25beginEv>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	bf14      	ite	ne
 800637e:	2301      	movne	r3, #1
 8006380:	2300      	moveq	r3, #0
 8006382:	b2db      	uxtb	r3, r3
 8006384:	2b00      	cmp	r3, #0
 8006386:	d003      	beq.n	8006390 <main+0x8c>
	{
		printf("! ES2 ERROR - Initialization Failed !");
 8006388:	48a8      	ldr	r0, [pc, #672]	; (800662c <main+0x328>)
 800638a:	f002 f867 	bl	800845c <iprintf>
		while (1)
 800638e:	e7fe      	b.n	800638e <main+0x8a>
			;
	}
	if (Es2.readVMPP() != -1)
 8006390:	48a5      	ldr	r0, [pc, #660]	; (8006628 <main+0x324>)
 8006392:	f7ff fc59 	bl	8005c48 <_ZN16NS_energyShield28readVMPPEv>
 8006396:	4603      	mov	r3, r0
 8006398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800639c:	bf14      	ite	ne
 800639e:	2301      	movne	r3, #1
 80063a0:	2300      	moveq	r3, #0
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d005      	beq.n	80063b4 <main+0xb0>
		Es2.setVMPP(-1, 1); // Disable VMPP regulation to allow charging from any power supply (7V - 23V) and prevent excessive EEPROM writes
 80063a8:	2201      	movs	r2, #1
 80063aa:	f04f 31ff 	mov.w	r1, #4294967295
 80063ae:	489e      	ldr	r0, [pc, #632]	; (8006628 <main+0x324>)
 80063b0:	f7ff fc76 	bl	8005ca0 <_ZN16NS_energyShield27setVMPPEib>
		//double pressure = 0.0;
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		// Read values from energyShield2
		int batVal = Es2.batteryVoltage();
 80063b4:	489c      	ldr	r0, [pc, #624]	; (8006628 <main+0x324>)
 80063b6:	f7ff fcd1 	bl	8005d5c <_ZN16NS_energyShield214batteryVoltageEv>
 80063ba:	4603      	mov	r3, r0
 80063bc:	62bb      	str	r3, [r7, #40]	; 0x28
		int iBattVolt = batVal / 1000;
 80063be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c0:	4a9b      	ldr	r2, [pc, #620]	; (8006630 <main+0x32c>)
 80063c2:	fb82 1203 	smull	r1, r2, r2, r3
 80063c6:	1192      	asrs	r2, r2, #6
 80063c8:	17db      	asrs	r3, r3, #31
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	627b      	str	r3, [r7, #36]	; 0x24
		int nBattVolt = batVal % 1000;
 80063ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d0:	4a97      	ldr	r2, [pc, #604]	; (8006630 <main+0x32c>)
 80063d2:	fb82 1203 	smull	r1, r2, r2, r3
 80063d6:	1191      	asrs	r1, r2, #6
 80063d8:	17da      	asrs	r2, r3, #31
 80063da:	1a8a      	subs	r2, r1, r2
 80063dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80063e0:	fb01 f202 	mul.w	r2, r1, r2
 80063e4:	1a9b      	subs	r3, r3, r2
 80063e6:	623b      	str	r3, [r7, #32]
		float batteryVoltage = (float) batVal / 1000.0;
 80063e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ea:	ee07 3a90 	vmov	s15, r3
 80063ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80063f2:	eddf 6a90 	vldr	s13, [pc, #576]	; 8006634 <main+0x330>
 80063f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80063fa:	edc7 7a07 	vstr	s15, [r7, #28]

		float batteryCurrent = (float) Es2.batteryCurrent() / 1000.0;
 80063fe:	488a      	ldr	r0, [pc, #552]	; (8006628 <main+0x324>)
 8006400:	f7ff fcbc 	bl	8005d7c <_ZN16NS_energyShield214batteryCurrentEv>
 8006404:	4603      	mov	r3, r0
 8006406:	ee07 3a90 	vmov	s15, r3
 800640a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800640e:	eddf 6a89 	vldr	s13, [pc, #548]	; 8006634 <main+0x330>
 8006412:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006416:	edc7 7a06 	vstr	s15, [r7, #24]
		uint16_t fullCapacity = Es2.fullChargeCapacity();
 800641a:	4883      	ldr	r0, [pc, #524]	; (8006628 <main+0x324>)
 800641c:	f7ff fce5 	bl	8005dea <_ZN16NS_energyShield218fullChargeCapacityEv>
 8006420:	4603      	mov	r3, r0
 8006422:	82fb      	strh	r3, [r7, #22]
		uint16_t remainingCapacity = Es2.remainingCapacity();
 8006424:	4880      	ldr	r0, [pc, #512]	; (8006628 <main+0x324>)
 8006426:	f7ff fcf0 	bl	8005e0a <_ZN16NS_energyShield217remainingCapacityEv>
 800642a:	4603      	mov	r3, r0
 800642c:	82bb      	strh	r3, [r7, #20]
		uint16_t stateOfCharge = Es2.SOC();
 800642e:	487e      	ldr	r0, [pc, #504]	; (8006628 <main+0x324>)
 8006430:	f7ff fccb 	bl	8005dca <_ZN16NS_energyShield23SOCEv>
 8006434:	4603      	mov	r3, r0
 8006436:	827b      	strh	r3, [r7, #18]
		float inputVoltage = (float) Es2.inputVoltage(0) / 1000;
 8006438:	2100      	movs	r1, #0
 800643a:	487b      	ldr	r0, [pc, #492]	; (8006628 <main+0x324>)
 800643c:	f7ff fcf6 	bl	8005e2c <_ZN16NS_energyShield212inputVoltageEh>
 8006440:	4603      	mov	r3, r0
 8006442:	ee07 3a90 	vmov	s15, r3
 8006446:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800644a:	eddf 6a7a 	vldr	s13, [pc, #488]	; 8006634 <main+0x330>
 800644e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006452:	edc7 7a03 	vstr	s15, [r7, #12]
		float temperature = (float) Es2.temperature() / 10;
 8006456:	4874      	ldr	r0, [pc, #464]	; (8006628 <main+0x324>)
 8006458:	f7ff fca1 	bl	8005d9e <_ZN16NS_energyShield211temperatureEv>
 800645c:	4603      	mov	r3, r0
 800645e:	ee07 3a90 	vmov	s15, r3
 8006462:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006466:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800646a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800646e:	edc7 7a02 	vstr	s15, [r7, #8]

		// Print Results
		printf("Battery Voltage    = %f V\n", batteryVoltage);
 8006472:	69f8      	ldr	r0, [r7, #28]
 8006474:	f7fa f868 	bl	8000548 <__aeabi_f2d>
 8006478:	4603      	mov	r3, r0
 800647a:	460c      	mov	r4, r1
 800647c:	461a      	mov	r2, r3
 800647e:	4623      	mov	r3, r4
 8006480:	486d      	ldr	r0, [pc, #436]	; (8006638 <main+0x334>)
 8006482:	f001 ffeb 	bl	800845c <iprintf>
		printf("Battery Voltage    = %d.%03d V\n", iBattVolt, nBattVolt);
 8006486:	6a3a      	ldr	r2, [r7, #32]
 8006488:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800648a:	486c      	ldr	r0, [pc, #432]	; (800663c <main+0x338>)
 800648c:	f001 ffe6 	bl	800845c <iprintf>
		printf("Battery Current    = %f V\n", batteryCurrent);
 8006490:	69b8      	ldr	r0, [r7, #24]
 8006492:	f7fa f859 	bl	8000548 <__aeabi_f2d>
 8006496:	4603      	mov	r3, r0
 8006498:	460c      	mov	r4, r1
 800649a:	461a      	mov	r2, r3
 800649c:	4623      	mov	r3, r4
 800649e:	4868      	ldr	r0, [pc, #416]	; (8006640 <main+0x33c>)
 80064a0:	f001 ffdc 	bl	800845c <iprintf>
		printf("Full Capacity      = %d mAh\n", fullCapacity);
 80064a4:	8afb      	ldrh	r3, [r7, #22]
 80064a6:	4619      	mov	r1, r3
 80064a8:	4866      	ldr	r0, [pc, #408]	; (8006644 <main+0x340>)
 80064aa:	f001 ffd7 	bl	800845c <iprintf>
		printf("Remaining Capacity = %d mAh\n", remainingCapacity);
 80064ae:	8abb      	ldrh	r3, [r7, #20]
 80064b0:	4619      	mov	r1, r3
 80064b2:	4865      	ldr	r0, [pc, #404]	; (8006648 <main+0x344>)
 80064b4:	f001 ffd2 	bl	800845c <iprintf>
		printf("State of Charge    = %d %% \n", stateOfCharge);
 80064b8:	8a7b      	ldrh	r3, [r7, #18]
 80064ba:	4619      	mov	r1, r3
 80064bc:	4863      	ldr	r0, [pc, #396]	; (800664c <main+0x348>)
 80064be:	f001 ffcd 	bl	800845c <iprintf>
		printf("Input Voltage      = %f V\n", inputVoltage);
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	f7fa f840 	bl	8000548 <__aeabi_f2d>
 80064c8:	4603      	mov	r3, r0
 80064ca:	460c      	mov	r4, r1
 80064cc:	461a      	mov	r2, r3
 80064ce:	4623      	mov	r3, r4
 80064d0:	485f      	ldr	r0, [pc, #380]	; (8006650 <main+0x34c>)
 80064d2:	f001 ffc3 	bl	800845c <iprintf>
		printf("Batt. Temp         = %f F\n", (temperature * 9.0 / 5.0) + 32.0);
 80064d6:	68b8      	ldr	r0, [r7, #8]
 80064d8:	f7fa f836 	bl	8000548 <__aeabi_f2d>
 80064dc:	f04f 0200 	mov.w	r2, #0
 80064e0:	4b5c      	ldr	r3, [pc, #368]	; (8006654 <main+0x350>)
 80064e2:	f7fa f885 	bl	80005f0 <__aeabi_dmul>
 80064e6:	4603      	mov	r3, r0
 80064e8:	460c      	mov	r4, r1
 80064ea:	4618      	mov	r0, r3
 80064ec:	4621      	mov	r1, r4
 80064ee:	f04f 0200 	mov.w	r2, #0
 80064f2:	4b59      	ldr	r3, [pc, #356]	; (8006658 <main+0x354>)
 80064f4:	f7fa f9a6 	bl	8000844 <__aeabi_ddiv>
 80064f8:	4603      	mov	r3, r0
 80064fa:	460c      	mov	r4, r1
 80064fc:	4618      	mov	r0, r3
 80064fe:	4621      	mov	r1, r4
 8006500:	f04f 0200 	mov.w	r2, #0
 8006504:	4b55      	ldr	r3, [pc, #340]	; (800665c <main+0x358>)
 8006506:	f7f9 fec1 	bl	800028c <__adddf3>
 800650a:	4603      	mov	r3, r0
 800650c:	460c      	mov	r4, r1
 800650e:	461a      	mov	r2, r3
 8006510:	4623      	mov	r3, r4
 8006512:	4853      	ldr	r0, [pc, #332]	; (8006660 <main+0x35c>)
 8006514:	f001 ffa2 	bl	800845c <iprintf>

		// check pressure from BMP180
		wait = Bmp.StartTemperature();
 8006518:	4841      	ldr	r0, [pc, #260]	; (8006620 <main+0x31c>)
 800651a:	f7fe fc83 	bl	8004e24 <_ZN10SFE_BMP18016StartTemperatureEv>
 800651e:	4603      	mov	r3, r0
 8006520:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		HAL_Delay(wait);
 8006524:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006528:	4618      	mov	r0, r3
 800652a:	f7fb fce7 	bl	8001efc <HAL_Delay>
		temp = 0.0;
 800652e:	f04f 0300 	mov.w	r3, #0
 8006532:	607b      	str	r3, [r7, #4]
		Bmp.GetTemperature(temp);
 8006534:	1d3b      	adds	r3, r7, #4
 8006536:	4619      	mov	r1, r3
 8006538:	4839      	ldr	r0, [pc, #228]	; (8006620 <main+0x31c>)
 800653a:	f7fe fc8d 	bl	8004e58 <_ZN10SFE_BMP18014GetTemperatureERf>
		printf("BMP180 Temp = %f C, %f F\n", temp, ((temp * 9.0) / 5) + 32);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4618      	mov	r0, r3
 8006542:	f7fa f801 	bl	8000548 <__aeabi_f2d>
 8006546:	4605      	mov	r5, r0
 8006548:	460e      	mov	r6, r1
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4618      	mov	r0, r3
 800654e:	f7f9 fffb 	bl	8000548 <__aeabi_f2d>
 8006552:	f04f 0200 	mov.w	r2, #0
 8006556:	4b3f      	ldr	r3, [pc, #252]	; (8006654 <main+0x350>)
 8006558:	f7fa f84a 	bl	80005f0 <__aeabi_dmul>
 800655c:	4603      	mov	r3, r0
 800655e:	460c      	mov	r4, r1
 8006560:	4618      	mov	r0, r3
 8006562:	4621      	mov	r1, r4
 8006564:	f04f 0200 	mov.w	r2, #0
 8006568:	4b3b      	ldr	r3, [pc, #236]	; (8006658 <main+0x354>)
 800656a:	f7fa f96b 	bl	8000844 <__aeabi_ddiv>
 800656e:	4603      	mov	r3, r0
 8006570:	460c      	mov	r4, r1
 8006572:	4618      	mov	r0, r3
 8006574:	4621      	mov	r1, r4
 8006576:	f04f 0200 	mov.w	r2, #0
 800657a:	4b38      	ldr	r3, [pc, #224]	; (800665c <main+0x358>)
 800657c:	f7f9 fe86 	bl	800028c <__adddf3>
 8006580:	4603      	mov	r3, r0
 8006582:	460c      	mov	r4, r1
 8006584:	e88d 0018 	stmia.w	sp, {r3, r4}
 8006588:	462a      	mov	r2, r5
 800658a:	4633      	mov	r3, r6
 800658c:	4835      	ldr	r0, [pc, #212]	; (8006664 <main+0x360>)
 800658e:	f001 ff65 	bl	800845c <iprintf>
		wait = Bmp.StartPressure(1);
 8006592:	2101      	movs	r1, #1
 8006594:	4822      	ldr	r0, [pc, #136]	; (8006620 <main+0x31c>)
 8006596:	f7fe fcdd 	bl	8004f54 <_ZN10SFE_BMP18013StartPressureEi>
 800659a:	4603      	mov	r3, r0
 800659c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		HAL_Delay(wait);
 80065a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7fb fca9 	bl	8001efc <HAL_Delay>
		float pressure;
		Bmp.GetPressure(pressure, temp);
 80065aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80065ae:	463b      	mov	r3, r7
 80065b0:	eeb0 0a67 	vmov.f32	s0, s15
 80065b4:	4619      	mov	r1, r3
 80065b6:	481a      	ldr	r0, [pc, #104]	; (8006620 <main+0x31c>)
 80065b8:	f7fe fd0c 	bl	8004fd4 <_ZN10SFE_BMP18011GetPressureERff>

		// Read time and date from energyShield and store locally
		// Local values will not update until readClock is called again
		Es2.readClock();
 80065bc:	481a      	ldr	r0, [pc, #104]	; (8006628 <main+0x324>)
 80065be:	f7ff faa4 	bl	8005b0a <_ZN16NS_energyShield29readClockEv>

		// Print time and date from locally stored values
		printf("\n\tTime:: %d:%d:%d \t Date:: %d-%d-%d\n", Es2.hour(),
 80065c2:	4819      	ldr	r0, [pc, #100]	; (8006628 <main+0x324>)
 80065c4:	f7ff faeb 	bl	8005b9e <_ZN16NS_energyShield24hourEv>
 80065c8:	4603      	mov	r3, r0
 80065ca:	461e      	mov	r6, r3
				Es2.minute(), Es2.second(), Es2.month(), Es2.dayOfMonth(),
 80065cc:	4816      	ldr	r0, [pc, #88]	; (8006628 <main+0x324>)
 80065ce:	f7ff fada 	bl	8005b86 <_ZN16NS_energyShield26minuteEv>
 80065d2:	4603      	mov	r3, r0
		printf("\n\tTime:: %d:%d:%d \t Date:: %d-%d-%d\n", Es2.hour(),
 80065d4:	4698      	mov	r8, r3
				Es2.minute(), Es2.second(), Es2.month(), Es2.dayOfMonth(),
 80065d6:	4814      	ldr	r0, [pc, #80]	; (8006628 <main+0x324>)
 80065d8:	f7ff fac9 	bl	8005b6e <_ZN16NS_energyShield26secondEv>
 80065dc:	4603      	mov	r3, r0
		printf("\n\tTime:: %d:%d:%d \t Date:: %d-%d-%d\n", Es2.hour(),
 80065de:	4699      	mov	r9, r3
				Es2.minute(), Es2.second(), Es2.month(), Es2.dayOfMonth(),
 80065e0:	4811      	ldr	r0, [pc, #68]	; (8006628 <main+0x324>)
 80065e2:	f7ff faf4 	bl	8005bce <_ZN16NS_energyShield25monthEv>
 80065e6:	4603      	mov	r3, r0
		printf("\n\tTime:: %d:%d:%d \t Date:: %d-%d-%d\n", Es2.hour(),
 80065e8:	461c      	mov	r4, r3
				Es2.minute(), Es2.second(), Es2.month(), Es2.dayOfMonth(),
 80065ea:	480f      	ldr	r0, [pc, #60]	; (8006628 <main+0x324>)
 80065ec:	f7ff fae3 	bl	8005bb6 <_ZN16NS_energyShield210dayOfMonthEv>
 80065f0:	4603      	mov	r3, r0
		printf("\n\tTime:: %d:%d:%d \t Date:: %d-%d-%d\n", Es2.hour(),
 80065f2:	461d      	mov	r5, r3
				Es2.year());
 80065f4:	480c      	ldr	r0, [pc, #48]	; (8006628 <main+0x324>)
 80065f6:	f7ff faf6 	bl	8005be6 <_ZN16NS_energyShield24yearEv>
 80065fa:	4603      	mov	r3, r0
 80065fc:	9302      	str	r3, [sp, #8]
 80065fe:	9501      	str	r5, [sp, #4]
 8006600:	9400      	str	r4, [sp, #0]
 8006602:	464b      	mov	r3, r9
 8006604:	4642      	mov	r2, r8
 8006606:	4631      	mov	r1, r6
 8006608:	4817      	ldr	r0, [pc, #92]	; (8006668 <main+0x364>)
 800660a:	f001 ff27 	bl	800845c <iprintf>

		// Print carriage return to start new line
		printf("\n\n\n");
 800660e:	4817      	ldr	r0, [pc, #92]	; (800666c <main+0x368>)
 8006610:	f001 ff98 	bl	8008544 <puts>

		// Wait between reads
		HAL_Delay(2000);
 8006614:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006618:	f7fb fc70 	bl	8001efc <HAL_Delay>

	}
 800661c:	e6ca      	b.n	80063b4 <main+0xb0>
 800661e:	bf00      	nop
 8006620:	20000204 	.word	0x20000204
 8006624:	0800a678 	.word	0x0800a678
 8006628:	200001f4 	.word	0x200001f4
 800662c:	0800a690 	.word	0x0800a690
 8006630:	10624dd3 	.word	0x10624dd3
 8006634:	447a0000 	.word	0x447a0000
 8006638:	0800a6b8 	.word	0x0800a6b8
 800663c:	0800a6d4 	.word	0x0800a6d4
 8006640:	0800a6f4 	.word	0x0800a6f4
 8006644:	0800a710 	.word	0x0800a710
 8006648:	0800a730 	.word	0x0800a730
 800664c:	0800a750 	.word	0x0800a750
 8006650:	0800a770 	.word	0x0800a770
 8006654:	40220000 	.word	0x40220000
 8006658:	40140000 	.word	0x40140000
 800665c:	40400000 	.word	0x40400000
 8006660:	0800a78c 	.word	0x0800a78c
 8006664:	0800a7a8 	.word	0x0800a7a8
 8006668:	0800a7c4 	.word	0x0800a7c4
 800666c:	0800a7ec 	.word	0x0800a7ec

08006670 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b0b8      	sub	sp, #224	; 0xe0
 8006674:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
	{ 0 };
 8006676:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800667a:	2244      	movs	r2, #68	; 0x44
 800667c:	2100      	movs	r1, #0
 800667e:	4618      	mov	r0, r3
 8006680:	f001 fa78 	bl	8007b74 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
	{ 0 };
 8006684:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006688:	2200      	movs	r2, #0
 800668a:	601a      	str	r2, [r3, #0]
 800668c:	605a      	str	r2, [r3, #4]
 800668e:	609a      	str	r2, [r3, #8]
 8006690:	60da      	str	r2, [r3, #12]
 8006692:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit =
	{ 0 };
 8006694:	463b      	mov	r3, r7
 8006696:	2288      	movs	r2, #136	; 0x88
 8006698:	2100      	movs	r1, #0
 800669a:	4618      	mov	r0, r3
 800669c:	f001 fa6a 	bl	8007b74 <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80066a0:	2302      	movs	r3, #2
 80066a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80066a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80066ae:	2310      	movs	r3, #16
 80066b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80066b4:	2302      	movs	r3, #2
 80066b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80066ba:	2302      	movs	r3, #2
 80066bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 1;
 80066c0:	2301      	movs	r3, #1
 80066c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 10;
 80066c6:	230a      	movs	r3, #10
 80066c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80066cc:	2307      	movs	r3, #7
 80066ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80066d2:	2302      	movs	r3, #2
 80066d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80066d8:	2302      	movs	r3, #2
 80066da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80066de:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7fc ffba 	bl	800365c <HAL_RCC_OscConfig>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	bf14      	ite	ne
 80066ee:	2301      	movne	r3, #1
 80066f0:	2300      	moveq	r3, #0
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d001      	beq.n	80066fc <_Z18SystemClock_Configv+0x8c>
	{
		Error_Handler();
 80066f8:	f000 f85e 	bl	80067b8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80066fc:	230f      	movs	r3, #15
 80066fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006702:	2303      	movs	r3, #3
 8006704:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006708:	2300      	movs	r3, #0
 800670a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800670e:	2300      	movs	r3, #0
 8006710:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006714:	2300      	movs	r3, #0
 8006716:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800671a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800671e:	2104      	movs	r1, #4
 8006720:	4618      	mov	r0, r3
 8006722:	f7fd f9c1 	bl	8003aa8 <HAL_RCC_ClockConfig>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	bf14      	ite	ne
 800672c:	2301      	movne	r3, #1
 800672e:	2300      	moveq	r3, #0
 8006730:	b2db      	uxtb	r3, r3
 8006732:	2b00      	cmp	r3, #0
 8006734:	d001      	beq.n	800673a <_Z18SystemClock_Configv+0xca>
	{
		Error_Handler();
 8006736:	f000 f83f 	bl	80067b8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2
 800673a:	f244 33c2 	movw	r3, #17346	; 0x43c2
 800673e:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_LPTIM1 | RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_I2C2
			| RCC_PERIPHCLK_I2C3 | RCC_PERIPHCLK_ADC;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8006740:	2300      	movs	r3, #0
 8006742:	63fb      	str	r3, [r7, #60]	; 0x3c
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8006744:	2300      	movs	r3, #0
 8006746:	653b      	str	r3, [r7, #80]	; 0x50
	PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8006748:	2300      	movs	r3, #0
 800674a:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800674c:	2300      	movs	r3, #0
 800674e:	65bb      	str	r3, [r7, #88]	; 0x58
	PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 8006750:	2300      	movs	r3, #0
 8006752:	65fb      	str	r3, [r7, #92]	; 0x5c
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8006754:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006758:	67bb      	str	r3, [r7, #120]	; 0x78
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800675a:	2302      	movs	r3, #2
 800675c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800675e:	2301      	movs	r3, #1
 8006760:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8006762:	2308      	movs	r3, #8
 8006764:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8006766:	2307      	movs	r3, #7
 8006768:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800676a:	2302      	movs	r3, #2
 800676c:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800676e:	2302      	movs	r3, #2
 8006770:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8006772:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006776:	61fb      	str	r3, [r7, #28]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006778:	463b      	mov	r3, r7
 800677a:	4618      	mov	r0, r3
 800677c:	f7fd fb56 	bl	8003e2c <HAL_RCCEx_PeriphCLKConfig>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	bf14      	ite	ne
 8006786:	2301      	movne	r3, #1
 8006788:	2300      	moveq	r3, #0
 800678a:	b2db      	uxtb	r3, r3
 800678c:	2b00      	cmp	r3, #0
 800678e:	d001      	beq.n	8006794 <_Z18SystemClock_Configv+0x124>
	{
		Error_Handler();
 8006790:	f000 f812 	bl	80067b8 <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8006794:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006798:	f7fc fe94 	bl	80034c4 <HAL_PWREx_ControlVoltageScaling>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	bf14      	ite	ne
 80067a2:	2301      	movne	r3, #1
 80067a4:	2300      	moveq	r3, #0
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d001      	beq.n	80067b0 <_Z18SystemClock_Configv+0x140>
	{
		Error_Handler();
 80067ac:	f000 f804 	bl	80067b8 <Error_Handler>
	}
}
 80067b0:	bf00      	nop
 80067b2:	37e0      	adds	r7, #224	; 0xe0
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80067b8:	b480      	push	{r7}
 80067ba:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80067bc:	bf00      	nop
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
	...

080067c8 <_Z41__static_initialization_and_destruction_0ii>:
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d10c      	bne.n	80067f2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80067de:	4293      	cmp	r3, r2
 80067e0:	d107      	bne.n	80067f2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
NS_energyShield2 Es2(&hi2c3);		// use 3rd I2C
 80067e2:	4906      	ldr	r1, [pc, #24]	; (80067fc <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80067e4:	4806      	ldr	r0, [pc, #24]	; (8006800 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80067e6:	f7ff f97d 	bl	8005ae4 <_ZN16NS_energyShield2C1EP19__I2C_HandleTypeDef>
SFE_BMP180 Bmp(&hi2c3);
 80067ea:	4904      	ldr	r1, [pc, #16]	; (80067fc <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80067ec:	4805      	ldr	r0, [pc, #20]	; (8006804 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80067ee:	f7fd ff98 	bl	8004722 <_ZN10SFE_BMP180C1EP19__I2C_HandleTypeDef>
}
 80067f2:	bf00      	nop
 80067f4:	3708      	adds	r7, #8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	200002cc 	.word	0x200002cc
 8006800:	200001f4 	.word	0x200001f4
 8006804:	20000204 	.word	0x20000204

08006808 <_GLOBAL__sub_I_Es2>:
 8006808:	b580      	push	{r7, lr}
 800680a:	af00      	add	r7, sp, #0
 800680c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006810:	2001      	movs	r0, #1
 8006812:	f7ff ffd9 	bl	80067c8 <_Z41__static_initialization_and_destruction_0ii>
 8006816:	bd80      	pop	{r7, pc}

08006818 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006818:	4b0a      	ldr	r3, [pc, #40]	; (8006844 <HAL_MspInit+0x2c>)
 800681a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800681c:	f042 0201 	orr.w	r2, r2, #1
 8006820:	661a      	str	r2, [r3, #96]	; 0x60
 8006822:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8006824:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006826:	f002 0201 	and.w	r2, r2, #1
 800682a:	9200      	str	r2, [sp, #0]
 800682c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800682e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006830:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006834:	659a      	str	r2, [r3, #88]	; 0x58
 8006836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800683c:	9301      	str	r3, [sp, #4]
 800683e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006840:	b002      	add	sp, #8
 8006842:	4770      	bx	lr
 8006844:	40021000 	.word	0x40021000

08006848 <NMI_Handler>:
 8006848:	4770      	bx	lr

0800684a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800684a:	e7fe      	b.n	800684a <HardFault_Handler>

0800684c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800684c:	e7fe      	b.n	800684c <MemManage_Handler>

0800684e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800684e:	e7fe      	b.n	800684e <BusFault_Handler>

08006850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006850:	e7fe      	b.n	8006850 <UsageFault_Handler>

08006852 <SVC_Handler>:
 8006852:	4770      	bx	lr

08006854 <DebugMon_Handler>:
 8006854:	4770      	bx	lr

08006856 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006856:	4770      	bx	lr

08006858 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006858:	f7fb bb42 	b.w	8001ee0 <HAL_IncTick>

0800685c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800685c:	2001      	movs	r0, #1
 800685e:	4770      	bx	lr

08006860 <_kill>:

int _kill(int pid, int sig)
{
 8006860:	b508      	push	{r3, lr}
	errno = EINVAL;
 8006862:	f001 f95d 	bl	8007b20 <__errno>
 8006866:	2316      	movs	r3, #22
 8006868:	6003      	str	r3, [r0, #0]
	return -1;
}
 800686a:	f04f 30ff 	mov.w	r0, #4294967295
 800686e:	bd08      	pop	{r3, pc}

08006870 <_exit>:

void _exit (int status)
{
 8006870:	b508      	push	{r3, lr}
	errno = EINVAL;
 8006872:	f001 f955 	bl	8007b20 <__errno>
 8006876:	2316      	movs	r3, #22
 8006878:	6003      	str	r3, [r0, #0]
 800687a:	e7fe      	b.n	800687a <_exit+0xa>

0800687c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800687c:	b570      	push	{r4, r5, r6, lr}
 800687e:	460e      	mov	r6, r1
 8006880:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006882:	460c      	mov	r4, r1
 8006884:	1ba3      	subs	r3, r4, r6
 8006886:	429d      	cmp	r5, r3
 8006888:	dc01      	bgt.n	800688e <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800688a:	4628      	mov	r0, r5
 800688c:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800688e:	f3af 8000 	nop.w
 8006892:	f804 0b01 	strb.w	r0, [r4], #1
 8006896:	e7f5      	b.n	8006884 <_read+0x8>

08006898 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006898:	b510      	push	{r4, lr}
//	{
//		__io_putchar(*ptr++);
//	}


	for(int i = 0; i < len; i++)
 800689a:	2300      	movs	r3, #0
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800689c:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
 80068a0:	4293      	cmp	r3, r2
 80068a2:	db01      	blt.n	80068a8 <_write+0x10>
		ITM_SendChar((*ptr++));

	return len;
}
 80068a4:	4610      	mov	r0, r2
 80068a6:	bd10      	pop	{r4, pc}
 80068a8:	f8d4 0e80 	ldr.w	r0, [r4, #3712]	; 0xe80
 80068ac:	07c0      	lsls	r0, r0, #31
 80068ae:	d503      	bpl.n	80068b8 <_write+0x20>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80068b0:	f8d4 0e00 	ldr.w	r0, [r4, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80068b4:	07c0      	lsls	r0, r0, #31
 80068b6:	d402      	bmi.n	80068be <_write+0x26>
	for(int i = 0; i < len; i++)
 80068b8:	3301      	adds	r3, #1
 80068ba:	e7f1      	b.n	80068a0 <_write+0x8>
  __ASM volatile ("nop");
 80068bc:	bf00      	nop
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80068be:	6820      	ldr	r0, [r4, #0]
 80068c0:	2800      	cmp	r0, #0
 80068c2:	d0fb      	beq.n	80068bc <_write+0x24>
		ITM_SendChar((*ptr++));
 80068c4:	5cc8      	ldrb	r0, [r1, r3]
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80068c6:	7020      	strb	r0, [r4, #0]
 80068c8:	e7f6      	b.n	80068b8 <_write+0x20>
	...

080068cc <_sbrk>:

caddr_t _sbrk(int incr)
{
 80068cc:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80068ce:	4b0a      	ldr	r3, [pc, #40]	; (80068f8 <_sbrk+0x2c>)
 80068d0:	6819      	ldr	r1, [r3, #0]
{
 80068d2:	4602      	mov	r2, r0
	if (heap_end == 0)
 80068d4:	b909      	cbnz	r1, 80068da <_sbrk+0xe>
		heap_end = &end;
 80068d6:	4909      	ldr	r1, [pc, #36]	; (80068fc <_sbrk+0x30>)
 80068d8:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80068da:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80068dc:	4669      	mov	r1, sp
 80068de:	4402      	add	r2, r0
 80068e0:	428a      	cmp	r2, r1
 80068e2:	d906      	bls.n	80068f2 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80068e4:	f001 f91c 	bl	8007b20 <__errno>
 80068e8:	230c      	movs	r3, #12
 80068ea:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80068ec:	f04f 30ff 	mov.w	r0, #4294967295
 80068f0:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80068f2:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80068f4:	bd08      	pop	{r3, pc}
 80068f6:	bf00      	nop
 80068f8:	20000258 	.word	0x20000258
 80068fc:	20000464 	.word	0x20000464

08006900 <_close>:

int _close(int file)
{
	return -1;
}
 8006900:	f04f 30ff 	mov.w	r0, #4294967295
 8006904:	4770      	bx	lr

08006906 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8006906:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800690a:	604b      	str	r3, [r1, #4]
	return 0;
}
 800690c:	2000      	movs	r0, #0
 800690e:	4770      	bx	lr

08006910 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8006910:	2001      	movs	r0, #1
 8006912:	4770      	bx	lr

08006914 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8006914:	2000      	movs	r0, #0
 8006916:	4770      	bx	lr

08006918 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006918:	490f      	ldr	r1, [pc, #60]	; (8006958 <SystemInit+0x40>)
 800691a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800691e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8006926:	4b0d      	ldr	r3, [pc, #52]	; (800695c <SystemInit+0x44>)
 8006928:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800692a:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 800692c:	f042 0201 	orr.w	r2, r2, #1
 8006930:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8006932:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800693a:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800693e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8006940:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006944:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800694c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800694e:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006950:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006954:	608b      	str	r3, [r1, #8]
 8006956:	4770      	bx	lr
 8006958:	e000ed00 	.word	0xe000ed00
 800695c:	40021000 	.word	0x40021000

08006960 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006960:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8006962:	480c      	ldr	r0, [pc, #48]	; (8006994 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 115200;
 8006964:	4b0c      	ldr	r3, [pc, #48]	; (8006998 <MX_USART2_UART_Init+0x38>)
 8006966:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 800696a:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800696e:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006970:	2300      	movs	r3, #0
 8006972:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006974:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006976:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006978:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800697a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800697c:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800697e:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006980:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006982:	f7fd fe8a 	bl	800469a <HAL_UART_Init>
 8006986:	b118      	cbz	r0, 8006990 <MX_USART2_UART_Init+0x30>
  {
    Error_Handler();
  }

}
 8006988:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800698c:	f7ff bf14 	b.w	80067b8 <Error_Handler>
 8006990:	bd08      	pop	{r3, pc}
 8006992:	bf00      	nop
 8006994:	200003e8 	.word	0x200003e8
 8006998:	40004400 	.word	0x40004400

0800699c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800699c:	b510      	push	{r4, lr}
 800699e:	4604      	mov	r4, r0
 80069a0:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069a2:	2214      	movs	r2, #20
 80069a4:	2100      	movs	r1, #0
 80069a6:	a803      	add	r0, sp, #12
 80069a8:	f001 f8e4 	bl	8007b74 <memset>
  if(uartHandle->Instance==USART2)
 80069ac:	6822      	ldr	r2, [r4, #0]
 80069ae:	4b13      	ldr	r3, [pc, #76]	; (80069fc <HAL_UART_MspInit+0x60>)
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d120      	bne.n	80069f6 <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80069b4:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069b8:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 80069ba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80069bc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80069c0:	659a      	str	r2, [r3, #88]	; 0x58
 80069c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80069c4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80069c8:	9201      	str	r2, [sp, #4]
 80069ca:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80069cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80069ce:	f042 0201 	orr.w	r2, r2, #1
 80069d2:	64da      	str	r2, [r3, #76]	; 0x4c
 80069d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069d6:	f003 0301 	and.w	r3, r3, #1
 80069da:	9302      	str	r3, [sp, #8]
 80069dc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80069de:	230c      	movs	r3, #12
 80069e0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069e2:	2302      	movs	r3, #2
 80069e4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069e6:	2303      	movs	r3, #3
 80069e8:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80069ee:	2307      	movs	r3, #7
 80069f0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069f2:	f7fb ff6f 	bl	80028d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80069f6:	b008      	add	sp, #32
 80069f8:	bd10      	pop	{r4, pc}
 80069fa:	bf00      	nop
 80069fc:	40004400 	.word	0x40004400

08006a00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006a00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006a38 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006a04:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006a06:	e003      	b.n	8006a10 <LoopCopyDataInit>

08006a08 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006a08:	4b0c      	ldr	r3, [pc, #48]	; (8006a3c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006a0a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006a0c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006a0e:	3104      	adds	r1, #4

08006a10 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006a10:	480b      	ldr	r0, [pc, #44]	; (8006a40 <LoopForever+0xa>)
	ldr	r3, =_edata
 8006a12:	4b0c      	ldr	r3, [pc, #48]	; (8006a44 <LoopForever+0xe>)
	adds	r2, r0, r1
 8006a14:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006a16:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006a18:	d3f6      	bcc.n	8006a08 <CopyDataInit>
	ldr	r2, =_sbss
 8006a1a:	4a0b      	ldr	r2, [pc, #44]	; (8006a48 <LoopForever+0x12>)
	b	LoopFillZerobss
 8006a1c:	e002      	b.n	8006a24 <LoopFillZerobss>

08006a1e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006a1e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006a20:	f842 3b04 	str.w	r3, [r2], #4

08006a24 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006a24:	4b09      	ldr	r3, [pc, #36]	; (8006a4c <LoopForever+0x16>)
	cmp	r2, r3
 8006a26:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006a28:	d3f9      	bcc.n	8006a1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006a2a:	f7ff ff75 	bl	8006918 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006a2e:	f001 f87d 	bl	8007b2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006a32:	f7ff fc67 	bl	8006304 <main>

08006a36 <LoopForever>:

LoopForever:
    b LoopForever
 8006a36:	e7fe      	b.n	8006a36 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006a38:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8006a3c:	0800ae78 	.word	0x0800ae78
	ldr	r0, =_sdata
 8006a40:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006a44:	200001d8 	.word	0x200001d8
	ldr	r2, =_sbss
 8006a48:	200001d8 	.word	0x200001d8
	ldr	r3, = _ebss
 8006a4c:	20000464 	.word	0x20000464

08006a50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006a50:	e7fe      	b.n	8006a50 <ADC1_2_IRQHandler>
	...

08006a54 <pow>:
 8006a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a58:	ed2d 8b04 	vpush	{d8-d9}
 8006a5c:	b08d      	sub	sp, #52	; 0x34
 8006a5e:	ec57 6b10 	vmov	r6, r7, d0
 8006a62:	ec55 4b11 	vmov	r4, r5, d1
 8006a66:	f000 f96f 	bl	8006d48 <__ieee754_pow>
 8006a6a:	4bae      	ldr	r3, [pc, #696]	; (8006d24 <pow+0x2d0>)
 8006a6c:	eeb0 8a40 	vmov.f32	s16, s0
 8006a70:	eef0 8a60 	vmov.f32	s17, s1
 8006a74:	f993 9000 	ldrsb.w	r9, [r3]
 8006a78:	f1b9 3fff 	cmp.w	r9, #4294967295
 8006a7c:	4698      	mov	r8, r3
 8006a7e:	d05f      	beq.n	8006b40 <pow+0xec>
 8006a80:	4622      	mov	r2, r4
 8006a82:	462b      	mov	r3, r5
 8006a84:	4620      	mov	r0, r4
 8006a86:	4629      	mov	r1, r5
 8006a88:	f7fa f84c 	bl	8000b24 <__aeabi_dcmpun>
 8006a8c:	4683      	mov	fp, r0
 8006a8e:	2800      	cmp	r0, #0
 8006a90:	d156      	bne.n	8006b40 <pow+0xec>
 8006a92:	4632      	mov	r2, r6
 8006a94:	463b      	mov	r3, r7
 8006a96:	4630      	mov	r0, r6
 8006a98:	4639      	mov	r1, r7
 8006a9a:	f7fa f843 	bl	8000b24 <__aeabi_dcmpun>
 8006a9e:	9001      	str	r0, [sp, #4]
 8006aa0:	b1e8      	cbz	r0, 8006ade <pow+0x8a>
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	4629      	mov	r1, r5
 8006aaa:	f7fa f809 	bl	8000ac0 <__aeabi_dcmpeq>
 8006aae:	2800      	cmp	r0, #0
 8006ab0:	d046      	beq.n	8006b40 <pow+0xec>
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	9302      	str	r3, [sp, #8]
 8006ab6:	4b9c      	ldr	r3, [pc, #624]	; (8006d28 <pow+0x2d4>)
 8006ab8:	9303      	str	r3, [sp, #12]
 8006aba:	4b9c      	ldr	r3, [pc, #624]	; (8006d2c <pow+0x2d8>)
 8006abc:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f1b9 0f02 	cmp.w	r9, #2
 8006ac6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006aca:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006ace:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006ad2:	d033      	beq.n	8006b3c <pow+0xe8>
 8006ad4:	a802      	add	r0, sp, #8
 8006ad6:	f000 ff08 	bl	80078ea <matherr>
 8006ada:	bb48      	cbnz	r0, 8006b30 <pow+0xdc>
 8006adc:	e05e      	b.n	8006b9c <pow+0x148>
 8006ade:	f04f 0a00 	mov.w	sl, #0
 8006ae2:	f04f 0b00 	mov.w	fp, #0
 8006ae6:	4652      	mov	r2, sl
 8006ae8:	465b      	mov	r3, fp
 8006aea:	4630      	mov	r0, r6
 8006aec:	4639      	mov	r1, r7
 8006aee:	f7f9 ffe7 	bl	8000ac0 <__aeabi_dcmpeq>
 8006af2:	ec4b ab19 	vmov	d9, sl, fp
 8006af6:	2800      	cmp	r0, #0
 8006af8:	d055      	beq.n	8006ba6 <pow+0x152>
 8006afa:	4652      	mov	r2, sl
 8006afc:	465b      	mov	r3, fp
 8006afe:	4620      	mov	r0, r4
 8006b00:	4629      	mov	r1, r5
 8006b02:	f7f9 ffdd 	bl	8000ac0 <__aeabi_dcmpeq>
 8006b06:	4680      	mov	r8, r0
 8006b08:	b318      	cbz	r0, 8006b52 <pow+0xfe>
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	9302      	str	r3, [sp, #8]
 8006b0e:	4b86      	ldr	r3, [pc, #536]	; (8006d28 <pow+0x2d4>)
 8006b10:	9303      	str	r3, [sp, #12]
 8006b12:	9b01      	ldr	r3, [sp, #4]
 8006b14:	930a      	str	r3, [sp, #40]	; 0x28
 8006b16:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006b1a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006b1e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8006b22:	f1b9 0f00 	cmp.w	r9, #0
 8006b26:	d0d5      	beq.n	8006ad4 <pow+0x80>
 8006b28:	4b80      	ldr	r3, [pc, #512]	; (8006d2c <pow+0x2d8>)
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006b30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b32:	b11b      	cbz	r3, 8006b3c <pow+0xe8>
 8006b34:	f000 fff4 	bl	8007b20 <__errno>
 8006b38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b3a:	6003      	str	r3, [r0, #0]
 8006b3c:	ed9d 8b08 	vldr	d8, [sp, #32]
 8006b40:	eeb0 0a48 	vmov.f32	s0, s16
 8006b44:	eef0 0a68 	vmov.f32	s1, s17
 8006b48:	b00d      	add	sp, #52	; 0x34
 8006b4a:	ecbd 8b04 	vpop	{d8-d9}
 8006b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b52:	ec45 4b10 	vmov	d0, r4, r5
 8006b56:	f000 fec0 	bl	80078da <finite>
 8006b5a:	2800      	cmp	r0, #0
 8006b5c:	d0f0      	beq.n	8006b40 <pow+0xec>
 8006b5e:	4652      	mov	r2, sl
 8006b60:	465b      	mov	r3, fp
 8006b62:	4620      	mov	r0, r4
 8006b64:	4629      	mov	r1, r5
 8006b66:	f7f9 ffb5 	bl	8000ad4 <__aeabi_dcmplt>
 8006b6a:	2800      	cmp	r0, #0
 8006b6c:	d0e8      	beq.n	8006b40 <pow+0xec>
 8006b6e:	2301      	movs	r3, #1
 8006b70:	9302      	str	r3, [sp, #8]
 8006b72:	4b6d      	ldr	r3, [pc, #436]	; (8006d28 <pow+0x2d4>)
 8006b74:	9303      	str	r3, [sp, #12]
 8006b76:	4b6b      	ldr	r3, [pc, #428]	; (8006d24 <pow+0x2d0>)
 8006b78:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8006b7c:	f993 3000 	ldrsb.w	r3, [r3]
 8006b80:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006b84:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006b88:	b913      	cbnz	r3, 8006b90 <pow+0x13c>
 8006b8a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8006b8e:	e7a1      	b.n	8006ad4 <pow+0x80>
 8006b90:	4967      	ldr	r1, [pc, #412]	; (8006d30 <pow+0x2dc>)
 8006b92:	2000      	movs	r0, #0
 8006b94:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d19b      	bne.n	8006ad4 <pow+0x80>
 8006b9c:	f000 ffc0 	bl	8007b20 <__errno>
 8006ba0:	2321      	movs	r3, #33	; 0x21
 8006ba2:	6003      	str	r3, [r0, #0]
 8006ba4:	e7c4      	b.n	8006b30 <pow+0xdc>
 8006ba6:	eeb0 0a48 	vmov.f32	s0, s16
 8006baa:	eef0 0a68 	vmov.f32	s1, s17
 8006bae:	f000 fe94 	bl	80078da <finite>
 8006bb2:	9001      	str	r0, [sp, #4]
 8006bb4:	2800      	cmp	r0, #0
 8006bb6:	f040 808a 	bne.w	8006cce <pow+0x27a>
 8006bba:	ec47 6b10 	vmov	d0, r6, r7
 8006bbe:	f000 fe8c 	bl	80078da <finite>
 8006bc2:	2800      	cmp	r0, #0
 8006bc4:	f000 8083 	beq.w	8006cce <pow+0x27a>
 8006bc8:	ec45 4b10 	vmov	d0, r4, r5
 8006bcc:	f000 fe85 	bl	80078da <finite>
 8006bd0:	2800      	cmp	r0, #0
 8006bd2:	d07c      	beq.n	8006cce <pow+0x27a>
 8006bd4:	ec53 2b18 	vmov	r2, r3, d8
 8006bd8:	ee18 0a10 	vmov	r0, s16
 8006bdc:	4619      	mov	r1, r3
 8006bde:	f7f9 ffa1 	bl	8000b24 <__aeabi_dcmpun>
 8006be2:	f998 9000 	ldrsb.w	r9, [r8]
 8006be6:	4b50      	ldr	r3, [pc, #320]	; (8006d28 <pow+0x2d4>)
 8006be8:	b1b0      	cbz	r0, 8006c18 <pow+0x1c4>
 8006bea:	2201      	movs	r2, #1
 8006bec:	9303      	str	r3, [sp, #12]
 8006bee:	9b01      	ldr	r3, [sp, #4]
 8006bf0:	9202      	str	r2, [sp, #8]
 8006bf2:	930a      	str	r3, [sp, #40]	; 0x28
 8006bf4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006bf8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006bfc:	f1b9 0f00 	cmp.w	r9, #0
 8006c00:	d0c3      	beq.n	8006b8a <pow+0x136>
 8006c02:	4652      	mov	r2, sl
 8006c04:	465b      	mov	r3, fp
 8006c06:	4650      	mov	r0, sl
 8006c08:	4659      	mov	r1, fp
 8006c0a:	f7f9 fe1b 	bl	8000844 <__aeabi_ddiv>
 8006c0e:	f1b9 0f02 	cmp.w	r9, #2
 8006c12:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006c16:	e7c0      	b.n	8006b9a <pow+0x146>
 8006c18:	2203      	movs	r2, #3
 8006c1a:	9202      	str	r2, [sp, #8]
 8006c1c:	9303      	str	r3, [sp, #12]
 8006c1e:	900a      	str	r0, [sp, #40]	; 0x28
 8006c20:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006c24:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006c28:	f1b9 0f00 	cmp.w	r9, #0
 8006c2c:	d12c      	bne.n	8006c88 <pow+0x234>
 8006c2e:	4b41      	ldr	r3, [pc, #260]	; (8006d34 <pow+0x2e0>)
 8006c30:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006c34:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006c38:	4630      	mov	r0, r6
 8006c3a:	4652      	mov	r2, sl
 8006c3c:	465b      	mov	r3, fp
 8006c3e:	4639      	mov	r1, r7
 8006c40:	f7f9 ff48 	bl	8000ad4 <__aeabi_dcmplt>
 8006c44:	2800      	cmp	r0, #0
 8006c46:	d066      	beq.n	8006d16 <pow+0x2c2>
 8006c48:	2200      	movs	r2, #0
 8006c4a:	4b3b      	ldr	r3, [pc, #236]	; (8006d38 <pow+0x2e4>)
 8006c4c:	4620      	mov	r0, r4
 8006c4e:	4629      	mov	r1, r5
 8006c50:	f7f9 fcce 	bl	80005f0 <__aeabi_dmul>
 8006c54:	4604      	mov	r4, r0
 8006c56:	460d      	mov	r5, r1
 8006c58:	ec45 4b10 	vmov	d0, r4, r5
 8006c5c:	f000 fe50 	bl	8007900 <rint>
 8006c60:	4620      	mov	r0, r4
 8006c62:	ec53 2b10 	vmov	r2, r3, d0
 8006c66:	4629      	mov	r1, r5
 8006c68:	f7f9 ff2a 	bl	8000ac0 <__aeabi_dcmpeq>
 8006c6c:	b920      	cbnz	r0, 8006c78 <pow+0x224>
 8006c6e:	4b33      	ldr	r3, [pc, #204]	; (8006d3c <pow+0x2e8>)
 8006c70:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006c74:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006c78:	f998 3000 	ldrsb.w	r3, [r8]
 8006c7c:	2b02      	cmp	r3, #2
 8006c7e:	d14a      	bne.n	8006d16 <pow+0x2c2>
 8006c80:	f000 ff4e 	bl	8007b20 <__errno>
 8006c84:	2322      	movs	r3, #34	; 0x22
 8006c86:	e78c      	b.n	8006ba2 <pow+0x14e>
 8006c88:	4b2d      	ldr	r3, [pc, #180]	; (8006d40 <pow+0x2ec>)
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006c90:	4630      	mov	r0, r6
 8006c92:	4652      	mov	r2, sl
 8006c94:	465b      	mov	r3, fp
 8006c96:	4639      	mov	r1, r7
 8006c98:	f7f9 ff1c 	bl	8000ad4 <__aeabi_dcmplt>
 8006c9c:	2800      	cmp	r0, #0
 8006c9e:	d0eb      	beq.n	8006c78 <pow+0x224>
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	4b25      	ldr	r3, [pc, #148]	; (8006d38 <pow+0x2e4>)
 8006ca4:	4620      	mov	r0, r4
 8006ca6:	4629      	mov	r1, r5
 8006ca8:	f7f9 fca2 	bl	80005f0 <__aeabi_dmul>
 8006cac:	4604      	mov	r4, r0
 8006cae:	460d      	mov	r5, r1
 8006cb0:	ec45 4b10 	vmov	d0, r4, r5
 8006cb4:	f000 fe24 	bl	8007900 <rint>
 8006cb8:	4620      	mov	r0, r4
 8006cba:	ec53 2b10 	vmov	r2, r3, d0
 8006cbe:	4629      	mov	r1, r5
 8006cc0:	f7f9 fefe 	bl	8000ac0 <__aeabi_dcmpeq>
 8006cc4:	2800      	cmp	r0, #0
 8006cc6:	d1d7      	bne.n	8006c78 <pow+0x224>
 8006cc8:	2200      	movs	r2, #0
 8006cca:	4b19      	ldr	r3, [pc, #100]	; (8006d30 <pow+0x2dc>)
 8006ccc:	e7d2      	b.n	8006c74 <pow+0x220>
 8006cce:	2200      	movs	r2, #0
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	ec51 0b18 	vmov	r0, r1, d8
 8006cd6:	f7f9 fef3 	bl	8000ac0 <__aeabi_dcmpeq>
 8006cda:	2800      	cmp	r0, #0
 8006cdc:	f43f af30 	beq.w	8006b40 <pow+0xec>
 8006ce0:	ec47 6b10 	vmov	d0, r6, r7
 8006ce4:	f000 fdf9 	bl	80078da <finite>
 8006ce8:	2800      	cmp	r0, #0
 8006cea:	f43f af29 	beq.w	8006b40 <pow+0xec>
 8006cee:	ec45 4b10 	vmov	d0, r4, r5
 8006cf2:	f000 fdf2 	bl	80078da <finite>
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	f43f af22 	beq.w	8006b40 <pow+0xec>
 8006cfc:	2304      	movs	r3, #4
 8006cfe:	9302      	str	r3, [sp, #8]
 8006d00:	4b09      	ldr	r3, [pc, #36]	; (8006d28 <pow+0x2d4>)
 8006d02:	9303      	str	r3, [sp, #12]
 8006d04:	2300      	movs	r3, #0
 8006d06:	930a      	str	r3, [sp, #40]	; 0x28
 8006d08:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006d0c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006d10:	ed8d 9b08 	vstr	d9, [sp, #32]
 8006d14:	e7b0      	b.n	8006c78 <pow+0x224>
 8006d16:	a802      	add	r0, sp, #8
 8006d18:	f000 fde7 	bl	80078ea <matherr>
 8006d1c:	2800      	cmp	r0, #0
 8006d1e:	f47f af07 	bne.w	8006b30 <pow+0xdc>
 8006d22:	e7ad      	b.n	8006c80 <pow+0x22c>
 8006d24:	20000004 	.word	0x20000004
 8006d28:	0800a848 	.word	0x0800a848
 8006d2c:	3ff00000 	.word	0x3ff00000
 8006d30:	fff00000 	.word	0xfff00000
 8006d34:	47efffff 	.word	0x47efffff
 8006d38:	3fe00000 	.word	0x3fe00000
 8006d3c:	c7efffff 	.word	0xc7efffff
 8006d40:	7ff00000 	.word	0x7ff00000
 8006d44:	00000000 	.word	0x00000000

08006d48 <__ieee754_pow>:
 8006d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d4c:	b091      	sub	sp, #68	; 0x44
 8006d4e:	ed8d 1b00 	vstr	d1, [sp]
 8006d52:	e89d 0204 	ldmia.w	sp, {r2, r9}
 8006d56:	ec57 6b10 	vmov	r6, r7, d0
 8006d5a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8006d5e:	ea58 0302 	orrs.w	r3, r8, r2
 8006d62:	ee10 aa10 	vmov	sl, s0
 8006d66:	463d      	mov	r5, r7
 8006d68:	f000 84bd 	beq.w	80076e6 <__ieee754_pow+0x99e>
 8006d6c:	4b78      	ldr	r3, [pc, #480]	; (8006f50 <__ieee754_pow+0x208>)
 8006d6e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8006d72:	429c      	cmp	r4, r3
 8006d74:	dc09      	bgt.n	8006d8a <__ieee754_pow+0x42>
 8006d76:	d103      	bne.n	8006d80 <__ieee754_pow+0x38>
 8006d78:	b93e      	cbnz	r6, 8006d8a <__ieee754_pow+0x42>
 8006d7a:	45a0      	cmp	r8, r4
 8006d7c:	dc0d      	bgt.n	8006d9a <__ieee754_pow+0x52>
 8006d7e:	e001      	b.n	8006d84 <__ieee754_pow+0x3c>
 8006d80:	4598      	cmp	r8, r3
 8006d82:	dc02      	bgt.n	8006d8a <__ieee754_pow+0x42>
 8006d84:	4598      	cmp	r8, r3
 8006d86:	d10e      	bne.n	8006da6 <__ieee754_pow+0x5e>
 8006d88:	b16a      	cbz	r2, 8006da6 <__ieee754_pow+0x5e>
 8006d8a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006d8e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006d92:	ea54 030a 	orrs.w	r3, r4, sl
 8006d96:	f000 84a6 	beq.w	80076e6 <__ieee754_pow+0x99e>
 8006d9a:	486e      	ldr	r0, [pc, #440]	; (8006f54 <__ieee754_pow+0x20c>)
 8006d9c:	b011      	add	sp, #68	; 0x44
 8006d9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006da2:	f000 bda5 	b.w	80078f0 <nan>
 8006da6:	2d00      	cmp	r5, #0
 8006da8:	da53      	bge.n	8006e52 <__ieee754_pow+0x10a>
 8006daa:	4b6b      	ldr	r3, [pc, #428]	; (8006f58 <__ieee754_pow+0x210>)
 8006dac:	4598      	cmp	r8, r3
 8006dae:	dc4d      	bgt.n	8006e4c <__ieee754_pow+0x104>
 8006db0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006db4:	4598      	cmp	r8, r3
 8006db6:	dd4c      	ble.n	8006e52 <__ieee754_pow+0x10a>
 8006db8:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006dbc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006dc0:	2b14      	cmp	r3, #20
 8006dc2:	dd26      	ble.n	8006e12 <__ieee754_pow+0xca>
 8006dc4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006dc8:	fa22 f103 	lsr.w	r1, r2, r3
 8006dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d13e      	bne.n	8006e52 <__ieee754_pow+0x10a>
 8006dd4:	f001 0101 	and.w	r1, r1, #1
 8006dd8:	f1c1 0b02 	rsb	fp, r1, #2
 8006ddc:	2a00      	cmp	r2, #0
 8006dde:	d15b      	bne.n	8006e98 <__ieee754_pow+0x150>
 8006de0:	4b5b      	ldr	r3, [pc, #364]	; (8006f50 <__ieee754_pow+0x208>)
 8006de2:	4598      	cmp	r8, r3
 8006de4:	d124      	bne.n	8006e30 <__ieee754_pow+0xe8>
 8006de6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006dea:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006dee:	ea53 030a 	orrs.w	r3, r3, sl
 8006df2:	f000 8478 	beq.w	80076e6 <__ieee754_pow+0x99e>
 8006df6:	4b59      	ldr	r3, [pc, #356]	; (8006f5c <__ieee754_pow+0x214>)
 8006df8:	429c      	cmp	r4, r3
 8006dfa:	dd2d      	ble.n	8006e58 <__ieee754_pow+0x110>
 8006dfc:	f1b9 0f00 	cmp.w	r9, #0
 8006e00:	f280 8475 	bge.w	80076ee <__ieee754_pow+0x9a6>
 8006e04:	2000      	movs	r0, #0
 8006e06:	2100      	movs	r1, #0
 8006e08:	ec41 0b10 	vmov	d0, r0, r1
 8006e0c:	b011      	add	sp, #68	; 0x44
 8006e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e12:	2a00      	cmp	r2, #0
 8006e14:	d13e      	bne.n	8006e94 <__ieee754_pow+0x14c>
 8006e16:	f1c3 0314 	rsb	r3, r3, #20
 8006e1a:	fa48 f103 	asr.w	r1, r8, r3
 8006e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8006e22:	4598      	cmp	r8, r3
 8006e24:	f040 846b 	bne.w	80076fe <__ieee754_pow+0x9b6>
 8006e28:	f001 0101 	and.w	r1, r1, #1
 8006e2c:	f1c1 0b02 	rsb	fp, r1, #2
 8006e30:	4b4b      	ldr	r3, [pc, #300]	; (8006f60 <__ieee754_pow+0x218>)
 8006e32:	4598      	cmp	r8, r3
 8006e34:	d118      	bne.n	8006e68 <__ieee754_pow+0x120>
 8006e36:	f1b9 0f00 	cmp.w	r9, #0
 8006e3a:	f280 845c 	bge.w	80076f6 <__ieee754_pow+0x9ae>
 8006e3e:	4948      	ldr	r1, [pc, #288]	; (8006f60 <__ieee754_pow+0x218>)
 8006e40:	4632      	mov	r2, r6
 8006e42:	463b      	mov	r3, r7
 8006e44:	2000      	movs	r0, #0
 8006e46:	f7f9 fcfd 	bl	8000844 <__aeabi_ddiv>
 8006e4a:	e7dd      	b.n	8006e08 <__ieee754_pow+0xc0>
 8006e4c:	f04f 0b02 	mov.w	fp, #2
 8006e50:	e7c4      	b.n	8006ddc <__ieee754_pow+0x94>
 8006e52:	f04f 0b00 	mov.w	fp, #0
 8006e56:	e7c1      	b.n	8006ddc <__ieee754_pow+0x94>
 8006e58:	f1b9 0f00 	cmp.w	r9, #0
 8006e5c:	dad2      	bge.n	8006e04 <__ieee754_pow+0xbc>
 8006e5e:	e89d 0009 	ldmia.w	sp, {r0, r3}
 8006e62:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006e66:	e7cf      	b.n	8006e08 <__ieee754_pow+0xc0>
 8006e68:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8006e6c:	d106      	bne.n	8006e7c <__ieee754_pow+0x134>
 8006e6e:	4632      	mov	r2, r6
 8006e70:	463b      	mov	r3, r7
 8006e72:	4610      	mov	r0, r2
 8006e74:	4619      	mov	r1, r3
 8006e76:	f7f9 fbbb 	bl	80005f0 <__aeabi_dmul>
 8006e7a:	e7c5      	b.n	8006e08 <__ieee754_pow+0xc0>
 8006e7c:	4b39      	ldr	r3, [pc, #228]	; (8006f64 <__ieee754_pow+0x21c>)
 8006e7e:	4599      	cmp	r9, r3
 8006e80:	d10a      	bne.n	8006e98 <__ieee754_pow+0x150>
 8006e82:	2d00      	cmp	r5, #0
 8006e84:	db08      	blt.n	8006e98 <__ieee754_pow+0x150>
 8006e86:	ec47 6b10 	vmov	d0, r6, r7
 8006e8a:	b011      	add	sp, #68	; 0x44
 8006e8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e90:	f000 bc6c 	b.w	800776c <__ieee754_sqrt>
 8006e94:	f04f 0b00 	mov.w	fp, #0
 8006e98:	ec47 6b10 	vmov	d0, r6, r7
 8006e9c:	f000 fd16 	bl	80078cc <fabs>
 8006ea0:	ec51 0b10 	vmov	r0, r1, d0
 8006ea4:	f1ba 0f00 	cmp.w	sl, #0
 8006ea8:	d127      	bne.n	8006efa <__ieee754_pow+0x1b2>
 8006eaa:	b124      	cbz	r4, 8006eb6 <__ieee754_pow+0x16e>
 8006eac:	4b2c      	ldr	r3, [pc, #176]	; (8006f60 <__ieee754_pow+0x218>)
 8006eae:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d121      	bne.n	8006efa <__ieee754_pow+0x1b2>
 8006eb6:	f1b9 0f00 	cmp.w	r9, #0
 8006eba:	da05      	bge.n	8006ec8 <__ieee754_pow+0x180>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	2000      	movs	r0, #0
 8006ec2:	4927      	ldr	r1, [pc, #156]	; (8006f60 <__ieee754_pow+0x218>)
 8006ec4:	f7f9 fcbe 	bl	8000844 <__aeabi_ddiv>
 8006ec8:	2d00      	cmp	r5, #0
 8006eca:	da9d      	bge.n	8006e08 <__ieee754_pow+0xc0>
 8006ecc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006ed0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006ed4:	ea54 030b 	orrs.w	r3, r4, fp
 8006ed8:	d108      	bne.n	8006eec <__ieee754_pow+0x1a4>
 8006eda:	4602      	mov	r2, r0
 8006edc:	460b      	mov	r3, r1
 8006ede:	4610      	mov	r0, r2
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	f7f9 f9d1 	bl	8000288 <__aeabi_dsub>
 8006ee6:	4602      	mov	r2, r0
 8006ee8:	460b      	mov	r3, r1
 8006eea:	e7ac      	b.n	8006e46 <__ieee754_pow+0xfe>
 8006eec:	f1bb 0f01 	cmp.w	fp, #1
 8006ef0:	d18a      	bne.n	8006e08 <__ieee754_pow+0xc0>
 8006ef2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	e786      	b.n	8006e08 <__ieee754_pow+0xc0>
 8006efa:	0fed      	lsrs	r5, r5, #31
 8006efc:	1e6b      	subs	r3, r5, #1
 8006efe:	930d      	str	r3, [sp, #52]	; 0x34
 8006f00:	ea5b 0303 	orrs.w	r3, fp, r3
 8006f04:	d102      	bne.n	8006f0c <__ieee754_pow+0x1c4>
 8006f06:	4632      	mov	r2, r6
 8006f08:	463b      	mov	r3, r7
 8006f0a:	e7e8      	b.n	8006ede <__ieee754_pow+0x196>
 8006f0c:	4b16      	ldr	r3, [pc, #88]	; (8006f68 <__ieee754_pow+0x220>)
 8006f0e:	4598      	cmp	r8, r3
 8006f10:	f340 80fe 	ble.w	8007110 <__ieee754_pow+0x3c8>
 8006f14:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006f18:	4598      	cmp	r8, r3
 8006f1a:	dd0a      	ble.n	8006f32 <__ieee754_pow+0x1ea>
 8006f1c:	4b0f      	ldr	r3, [pc, #60]	; (8006f5c <__ieee754_pow+0x214>)
 8006f1e:	429c      	cmp	r4, r3
 8006f20:	dc0d      	bgt.n	8006f3e <__ieee754_pow+0x1f6>
 8006f22:	f1b9 0f00 	cmp.w	r9, #0
 8006f26:	f6bf af6d 	bge.w	8006e04 <__ieee754_pow+0xbc>
 8006f2a:	a307      	add	r3, pc, #28	; (adr r3, 8006f48 <__ieee754_pow+0x200>)
 8006f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f30:	e79f      	b.n	8006e72 <__ieee754_pow+0x12a>
 8006f32:	4b0e      	ldr	r3, [pc, #56]	; (8006f6c <__ieee754_pow+0x224>)
 8006f34:	429c      	cmp	r4, r3
 8006f36:	ddf4      	ble.n	8006f22 <__ieee754_pow+0x1da>
 8006f38:	4b09      	ldr	r3, [pc, #36]	; (8006f60 <__ieee754_pow+0x218>)
 8006f3a:	429c      	cmp	r4, r3
 8006f3c:	dd18      	ble.n	8006f70 <__ieee754_pow+0x228>
 8006f3e:	f1b9 0f00 	cmp.w	r9, #0
 8006f42:	dcf2      	bgt.n	8006f2a <__ieee754_pow+0x1e2>
 8006f44:	e75e      	b.n	8006e04 <__ieee754_pow+0xbc>
 8006f46:	bf00      	nop
 8006f48:	8800759c 	.word	0x8800759c
 8006f4c:	7e37e43c 	.word	0x7e37e43c
 8006f50:	7ff00000 	.word	0x7ff00000
 8006f54:	0800aa39 	.word	0x0800aa39
 8006f58:	433fffff 	.word	0x433fffff
 8006f5c:	3fefffff 	.word	0x3fefffff
 8006f60:	3ff00000 	.word	0x3ff00000
 8006f64:	3fe00000 	.word	0x3fe00000
 8006f68:	41e00000 	.word	0x41e00000
 8006f6c:	3feffffe 	.word	0x3feffffe
 8006f70:	2200      	movs	r2, #0
 8006f72:	4b63      	ldr	r3, [pc, #396]	; (8007100 <__ieee754_pow+0x3b8>)
 8006f74:	f7f9 f988 	bl	8000288 <__aeabi_dsub>
 8006f78:	a355      	add	r3, pc, #340	; (adr r3, 80070d0 <__ieee754_pow+0x388>)
 8006f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7e:	4604      	mov	r4, r0
 8006f80:	460d      	mov	r5, r1
 8006f82:	f7f9 fb35 	bl	80005f0 <__aeabi_dmul>
 8006f86:	a354      	add	r3, pc, #336	; (adr r3, 80070d8 <__ieee754_pow+0x390>)
 8006f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f8c:	4606      	mov	r6, r0
 8006f8e:	460f      	mov	r7, r1
 8006f90:	4620      	mov	r0, r4
 8006f92:	4629      	mov	r1, r5
 8006f94:	f7f9 fb2c 	bl	80005f0 <__aeabi_dmul>
 8006f98:	2200      	movs	r2, #0
 8006f9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f9e:	4b59      	ldr	r3, [pc, #356]	; (8007104 <__ieee754_pow+0x3bc>)
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	4629      	mov	r1, r5
 8006fa4:	f7f9 fb24 	bl	80005f0 <__aeabi_dmul>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	460b      	mov	r3, r1
 8006fac:	a14c      	add	r1, pc, #304	; (adr r1, 80070e0 <__ieee754_pow+0x398>)
 8006fae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fb2:	f7f9 f969 	bl	8000288 <__aeabi_dsub>
 8006fb6:	4622      	mov	r2, r4
 8006fb8:	462b      	mov	r3, r5
 8006fba:	f7f9 fb19 	bl	80005f0 <__aeabi_dmul>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	2000      	movs	r0, #0
 8006fc4:	4950      	ldr	r1, [pc, #320]	; (8007108 <__ieee754_pow+0x3c0>)
 8006fc6:	f7f9 f95f 	bl	8000288 <__aeabi_dsub>
 8006fca:	4622      	mov	r2, r4
 8006fcc:	462b      	mov	r3, r5
 8006fce:	4680      	mov	r8, r0
 8006fd0:	4689      	mov	r9, r1
 8006fd2:	4620      	mov	r0, r4
 8006fd4:	4629      	mov	r1, r5
 8006fd6:	f7f9 fb0b 	bl	80005f0 <__aeabi_dmul>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	460b      	mov	r3, r1
 8006fde:	4640      	mov	r0, r8
 8006fe0:	4649      	mov	r1, r9
 8006fe2:	f7f9 fb05 	bl	80005f0 <__aeabi_dmul>
 8006fe6:	a340      	add	r3, pc, #256	; (adr r3, 80070e8 <__ieee754_pow+0x3a0>)
 8006fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fec:	f7f9 fb00 	bl	80005f0 <__aeabi_dmul>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ff8:	f7f9 f946 	bl	8000288 <__aeabi_dsub>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	460b      	mov	r3, r1
 8007000:	4604      	mov	r4, r0
 8007002:	460d      	mov	r5, r1
 8007004:	4630      	mov	r0, r6
 8007006:	4639      	mov	r1, r7
 8007008:	f7f9 f940 	bl	800028c <__adddf3>
 800700c:	2000      	movs	r0, #0
 800700e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007012:	4632      	mov	r2, r6
 8007014:	463b      	mov	r3, r7
 8007016:	f7f9 f937 	bl	8000288 <__aeabi_dsub>
 800701a:	4602      	mov	r2, r0
 800701c:	460b      	mov	r3, r1
 800701e:	4620      	mov	r0, r4
 8007020:	4629      	mov	r1, r5
 8007022:	f7f9 f931 	bl	8000288 <__aeabi_dsub>
 8007026:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007028:	f10b 33ff 	add.w	r3, fp, #4294967295
 800702c:	4313      	orrs	r3, r2
 800702e:	4606      	mov	r6, r0
 8007030:	460f      	mov	r7, r1
 8007032:	f040 81eb 	bne.w	800740c <__ieee754_pow+0x6c4>
 8007036:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80070f0 <__ieee754_pow+0x3a8>
 800703a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800703e:	2400      	movs	r4, #0
 8007040:	4622      	mov	r2, r4
 8007042:	462b      	mov	r3, r5
 8007044:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007048:	ed8d 7b02 	vstr	d7, [sp, #8]
 800704c:	f7f9 f91c 	bl	8000288 <__aeabi_dsub>
 8007050:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007054:	f7f9 facc 	bl	80005f0 <__aeabi_dmul>
 8007058:	e9dd 2300 	ldrd	r2, r3, [sp]
 800705c:	4680      	mov	r8, r0
 800705e:	4689      	mov	r9, r1
 8007060:	4630      	mov	r0, r6
 8007062:	4639      	mov	r1, r7
 8007064:	f7f9 fac4 	bl	80005f0 <__aeabi_dmul>
 8007068:	4602      	mov	r2, r0
 800706a:	460b      	mov	r3, r1
 800706c:	4640      	mov	r0, r8
 800706e:	4649      	mov	r1, r9
 8007070:	f7f9 f90c 	bl	800028c <__adddf3>
 8007074:	4622      	mov	r2, r4
 8007076:	462b      	mov	r3, r5
 8007078:	4680      	mov	r8, r0
 800707a:	4689      	mov	r9, r1
 800707c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007080:	f7f9 fab6 	bl	80005f0 <__aeabi_dmul>
 8007084:	460b      	mov	r3, r1
 8007086:	4604      	mov	r4, r0
 8007088:	460d      	mov	r5, r1
 800708a:	4602      	mov	r2, r0
 800708c:	4649      	mov	r1, r9
 800708e:	4640      	mov	r0, r8
 8007090:	e9cd 4500 	strd	r4, r5, [sp]
 8007094:	f7f9 f8fa 	bl	800028c <__adddf3>
 8007098:	4b1c      	ldr	r3, [pc, #112]	; (800710c <__ieee754_pow+0x3c4>)
 800709a:	4299      	cmp	r1, r3
 800709c:	4606      	mov	r6, r0
 800709e:	460f      	mov	r7, r1
 80070a0:	468b      	mov	fp, r1
 80070a2:	f340 82f7 	ble.w	8007694 <__ieee754_pow+0x94c>
 80070a6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80070aa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80070ae:	4303      	orrs	r3, r0
 80070b0:	f000 81ea 	beq.w	8007488 <__ieee754_pow+0x740>
 80070b4:	a310      	add	r3, pc, #64	; (adr r3, 80070f8 <__ieee754_pow+0x3b0>)
 80070b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070be:	f7f9 fa97 	bl	80005f0 <__aeabi_dmul>
 80070c2:	a30d      	add	r3, pc, #52	; (adr r3, 80070f8 <__ieee754_pow+0x3b0>)
 80070c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c8:	e6d5      	b.n	8006e76 <__ieee754_pow+0x12e>
 80070ca:	bf00      	nop
 80070cc:	f3af 8000 	nop.w
 80070d0:	60000000 	.word	0x60000000
 80070d4:	3ff71547 	.word	0x3ff71547
 80070d8:	f85ddf44 	.word	0xf85ddf44
 80070dc:	3e54ae0b 	.word	0x3e54ae0b
 80070e0:	55555555 	.word	0x55555555
 80070e4:	3fd55555 	.word	0x3fd55555
 80070e8:	652b82fe 	.word	0x652b82fe
 80070ec:	3ff71547 	.word	0x3ff71547
 80070f0:	00000000 	.word	0x00000000
 80070f4:	bff00000 	.word	0xbff00000
 80070f8:	8800759c 	.word	0x8800759c
 80070fc:	7e37e43c 	.word	0x7e37e43c
 8007100:	3ff00000 	.word	0x3ff00000
 8007104:	3fd00000 	.word	0x3fd00000
 8007108:	3fe00000 	.word	0x3fe00000
 800710c:	408fffff 	.word	0x408fffff
 8007110:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007114:	f04f 0200 	mov.w	r2, #0
 8007118:	da05      	bge.n	8007126 <__ieee754_pow+0x3de>
 800711a:	4bd3      	ldr	r3, [pc, #844]	; (8007468 <__ieee754_pow+0x720>)
 800711c:	f7f9 fa68 	bl	80005f0 <__aeabi_dmul>
 8007120:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007124:	460c      	mov	r4, r1
 8007126:	1523      	asrs	r3, r4, #20
 8007128:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800712c:	4413      	add	r3, r2
 800712e:	9307      	str	r3, [sp, #28]
 8007130:	4bce      	ldr	r3, [pc, #824]	; (800746c <__ieee754_pow+0x724>)
 8007132:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007136:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800713a:	429c      	cmp	r4, r3
 800713c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007140:	dd08      	ble.n	8007154 <__ieee754_pow+0x40c>
 8007142:	4bcb      	ldr	r3, [pc, #812]	; (8007470 <__ieee754_pow+0x728>)
 8007144:	429c      	cmp	r4, r3
 8007146:	f340 815e 	ble.w	8007406 <__ieee754_pow+0x6be>
 800714a:	9b07      	ldr	r3, [sp, #28]
 800714c:	3301      	adds	r3, #1
 800714e:	9307      	str	r3, [sp, #28]
 8007150:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007154:	f04f 0a00 	mov.w	sl, #0
 8007158:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800715c:	930c      	str	r3, [sp, #48]	; 0x30
 800715e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007160:	4bc4      	ldr	r3, [pc, #784]	; (8007474 <__ieee754_pow+0x72c>)
 8007162:	4413      	add	r3, r2
 8007164:	ed93 7b00 	vldr	d7, [r3]
 8007168:	4629      	mov	r1, r5
 800716a:	ec53 2b17 	vmov	r2, r3, d7
 800716e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007172:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007176:	f7f9 f887 	bl	8000288 <__aeabi_dsub>
 800717a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800717e:	4606      	mov	r6, r0
 8007180:	460f      	mov	r7, r1
 8007182:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007186:	f7f9 f881 	bl	800028c <__adddf3>
 800718a:	4602      	mov	r2, r0
 800718c:	460b      	mov	r3, r1
 800718e:	2000      	movs	r0, #0
 8007190:	49b9      	ldr	r1, [pc, #740]	; (8007478 <__ieee754_pow+0x730>)
 8007192:	f7f9 fb57 	bl	8000844 <__aeabi_ddiv>
 8007196:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800719a:	4602      	mov	r2, r0
 800719c:	460b      	mov	r3, r1
 800719e:	4630      	mov	r0, r6
 80071a0:	4639      	mov	r1, r7
 80071a2:	f7f9 fa25 	bl	80005f0 <__aeabi_dmul>
 80071a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071aa:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80071ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80071b2:	2300      	movs	r3, #0
 80071b4:	9302      	str	r3, [sp, #8]
 80071b6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80071ba:	106d      	asrs	r5, r5, #1
 80071bc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80071c0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80071c4:	2200      	movs	r2, #0
 80071c6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80071ca:	4640      	mov	r0, r8
 80071cc:	4649      	mov	r1, r9
 80071ce:	4614      	mov	r4, r2
 80071d0:	461d      	mov	r5, r3
 80071d2:	f7f9 fa0d 	bl	80005f0 <__aeabi_dmul>
 80071d6:	4602      	mov	r2, r0
 80071d8:	460b      	mov	r3, r1
 80071da:	4630      	mov	r0, r6
 80071dc:	4639      	mov	r1, r7
 80071de:	f7f9 f853 	bl	8000288 <__aeabi_dsub>
 80071e2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80071e6:	4606      	mov	r6, r0
 80071e8:	460f      	mov	r7, r1
 80071ea:	4620      	mov	r0, r4
 80071ec:	4629      	mov	r1, r5
 80071ee:	f7f9 f84b 	bl	8000288 <__aeabi_dsub>
 80071f2:	4602      	mov	r2, r0
 80071f4:	460b      	mov	r3, r1
 80071f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80071fa:	f7f9 f845 	bl	8000288 <__aeabi_dsub>
 80071fe:	4642      	mov	r2, r8
 8007200:	464b      	mov	r3, r9
 8007202:	f7f9 f9f5 	bl	80005f0 <__aeabi_dmul>
 8007206:	4602      	mov	r2, r0
 8007208:	460b      	mov	r3, r1
 800720a:	4630      	mov	r0, r6
 800720c:	4639      	mov	r1, r7
 800720e:	f7f9 f83b 	bl	8000288 <__aeabi_dsub>
 8007212:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007216:	f7f9 f9eb 	bl	80005f0 <__aeabi_dmul>
 800721a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800721e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007222:	4610      	mov	r0, r2
 8007224:	4619      	mov	r1, r3
 8007226:	f7f9 f9e3 	bl	80005f0 <__aeabi_dmul>
 800722a:	a37b      	add	r3, pc, #492	; (adr r3, 8007418 <__ieee754_pow+0x6d0>)
 800722c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007230:	4604      	mov	r4, r0
 8007232:	460d      	mov	r5, r1
 8007234:	f7f9 f9dc 	bl	80005f0 <__aeabi_dmul>
 8007238:	a379      	add	r3, pc, #484	; (adr r3, 8007420 <__ieee754_pow+0x6d8>)
 800723a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723e:	f7f9 f825 	bl	800028c <__adddf3>
 8007242:	4622      	mov	r2, r4
 8007244:	462b      	mov	r3, r5
 8007246:	f7f9 f9d3 	bl	80005f0 <__aeabi_dmul>
 800724a:	a377      	add	r3, pc, #476	; (adr r3, 8007428 <__ieee754_pow+0x6e0>)
 800724c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007250:	f7f9 f81c 	bl	800028c <__adddf3>
 8007254:	4622      	mov	r2, r4
 8007256:	462b      	mov	r3, r5
 8007258:	f7f9 f9ca 	bl	80005f0 <__aeabi_dmul>
 800725c:	a374      	add	r3, pc, #464	; (adr r3, 8007430 <__ieee754_pow+0x6e8>)
 800725e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007262:	f7f9 f813 	bl	800028c <__adddf3>
 8007266:	4622      	mov	r2, r4
 8007268:	462b      	mov	r3, r5
 800726a:	f7f9 f9c1 	bl	80005f0 <__aeabi_dmul>
 800726e:	a372      	add	r3, pc, #456	; (adr r3, 8007438 <__ieee754_pow+0x6f0>)
 8007270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007274:	f7f9 f80a 	bl	800028c <__adddf3>
 8007278:	4622      	mov	r2, r4
 800727a:	462b      	mov	r3, r5
 800727c:	f7f9 f9b8 	bl	80005f0 <__aeabi_dmul>
 8007280:	a36f      	add	r3, pc, #444	; (adr r3, 8007440 <__ieee754_pow+0x6f8>)
 8007282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007286:	f7f9 f801 	bl	800028c <__adddf3>
 800728a:	4622      	mov	r2, r4
 800728c:	4606      	mov	r6, r0
 800728e:	460f      	mov	r7, r1
 8007290:	462b      	mov	r3, r5
 8007292:	4620      	mov	r0, r4
 8007294:	4629      	mov	r1, r5
 8007296:	f7f9 f9ab 	bl	80005f0 <__aeabi_dmul>
 800729a:	4602      	mov	r2, r0
 800729c:	460b      	mov	r3, r1
 800729e:	4630      	mov	r0, r6
 80072a0:	4639      	mov	r1, r7
 80072a2:	f7f9 f9a5 	bl	80005f0 <__aeabi_dmul>
 80072a6:	4642      	mov	r2, r8
 80072a8:	4604      	mov	r4, r0
 80072aa:	460d      	mov	r5, r1
 80072ac:	464b      	mov	r3, r9
 80072ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072b2:	f7f8 ffeb 	bl	800028c <__adddf3>
 80072b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80072ba:	f7f9 f999 	bl	80005f0 <__aeabi_dmul>
 80072be:	4622      	mov	r2, r4
 80072c0:	462b      	mov	r3, r5
 80072c2:	f7f8 ffe3 	bl	800028c <__adddf3>
 80072c6:	4642      	mov	r2, r8
 80072c8:	4606      	mov	r6, r0
 80072ca:	460f      	mov	r7, r1
 80072cc:	464b      	mov	r3, r9
 80072ce:	4640      	mov	r0, r8
 80072d0:	4649      	mov	r1, r9
 80072d2:	f7f9 f98d 	bl	80005f0 <__aeabi_dmul>
 80072d6:	2200      	movs	r2, #0
 80072d8:	4b68      	ldr	r3, [pc, #416]	; (800747c <__ieee754_pow+0x734>)
 80072da:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80072de:	f7f8 ffd5 	bl	800028c <__adddf3>
 80072e2:	4632      	mov	r2, r6
 80072e4:	463b      	mov	r3, r7
 80072e6:	f7f8 ffd1 	bl	800028c <__adddf3>
 80072ea:	9802      	ldr	r0, [sp, #8]
 80072ec:	460d      	mov	r5, r1
 80072ee:	4604      	mov	r4, r0
 80072f0:	4602      	mov	r2, r0
 80072f2:	460b      	mov	r3, r1
 80072f4:	4640      	mov	r0, r8
 80072f6:	4649      	mov	r1, r9
 80072f8:	f7f9 f97a 	bl	80005f0 <__aeabi_dmul>
 80072fc:	2200      	movs	r2, #0
 80072fe:	4680      	mov	r8, r0
 8007300:	4689      	mov	r9, r1
 8007302:	4b5e      	ldr	r3, [pc, #376]	; (800747c <__ieee754_pow+0x734>)
 8007304:	4620      	mov	r0, r4
 8007306:	4629      	mov	r1, r5
 8007308:	f7f8 ffbe 	bl	8000288 <__aeabi_dsub>
 800730c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007310:	f7f8 ffba 	bl	8000288 <__aeabi_dsub>
 8007314:	4602      	mov	r2, r0
 8007316:	460b      	mov	r3, r1
 8007318:	4630      	mov	r0, r6
 800731a:	4639      	mov	r1, r7
 800731c:	f7f8 ffb4 	bl	8000288 <__aeabi_dsub>
 8007320:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007324:	f7f9 f964 	bl	80005f0 <__aeabi_dmul>
 8007328:	4622      	mov	r2, r4
 800732a:	4606      	mov	r6, r0
 800732c:	460f      	mov	r7, r1
 800732e:	462b      	mov	r3, r5
 8007330:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007334:	f7f9 f95c 	bl	80005f0 <__aeabi_dmul>
 8007338:	4602      	mov	r2, r0
 800733a:	460b      	mov	r3, r1
 800733c:	4630      	mov	r0, r6
 800733e:	4639      	mov	r1, r7
 8007340:	f7f8 ffa4 	bl	800028c <__adddf3>
 8007344:	4606      	mov	r6, r0
 8007346:	460f      	mov	r7, r1
 8007348:	4602      	mov	r2, r0
 800734a:	460b      	mov	r3, r1
 800734c:	4640      	mov	r0, r8
 800734e:	4649      	mov	r1, r9
 8007350:	f7f8 ff9c 	bl	800028c <__adddf3>
 8007354:	9802      	ldr	r0, [sp, #8]
 8007356:	a33c      	add	r3, pc, #240	; (adr r3, 8007448 <__ieee754_pow+0x700>)
 8007358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735c:	4604      	mov	r4, r0
 800735e:	460d      	mov	r5, r1
 8007360:	f7f9 f946 	bl	80005f0 <__aeabi_dmul>
 8007364:	4642      	mov	r2, r8
 8007366:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800736a:	464b      	mov	r3, r9
 800736c:	4620      	mov	r0, r4
 800736e:	4629      	mov	r1, r5
 8007370:	f7f8 ff8a 	bl	8000288 <__aeabi_dsub>
 8007374:	4602      	mov	r2, r0
 8007376:	460b      	mov	r3, r1
 8007378:	4630      	mov	r0, r6
 800737a:	4639      	mov	r1, r7
 800737c:	f7f8 ff84 	bl	8000288 <__aeabi_dsub>
 8007380:	a333      	add	r3, pc, #204	; (adr r3, 8007450 <__ieee754_pow+0x708>)
 8007382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007386:	f7f9 f933 	bl	80005f0 <__aeabi_dmul>
 800738a:	a333      	add	r3, pc, #204	; (adr r3, 8007458 <__ieee754_pow+0x710>)
 800738c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007390:	4606      	mov	r6, r0
 8007392:	460f      	mov	r7, r1
 8007394:	4620      	mov	r0, r4
 8007396:	4629      	mov	r1, r5
 8007398:	f7f9 f92a 	bl	80005f0 <__aeabi_dmul>
 800739c:	4602      	mov	r2, r0
 800739e:	460b      	mov	r3, r1
 80073a0:	4630      	mov	r0, r6
 80073a2:	4639      	mov	r1, r7
 80073a4:	f7f8 ff72 	bl	800028c <__adddf3>
 80073a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073aa:	4b35      	ldr	r3, [pc, #212]	; (8007480 <__ieee754_pow+0x738>)
 80073ac:	4413      	add	r3, r2
 80073ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b2:	f7f8 ff6b 	bl	800028c <__adddf3>
 80073b6:	4604      	mov	r4, r0
 80073b8:	9807      	ldr	r0, [sp, #28]
 80073ba:	460d      	mov	r5, r1
 80073bc:	f7f9 f8b2 	bl	8000524 <__aeabi_i2d>
 80073c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073c2:	4b30      	ldr	r3, [pc, #192]	; (8007484 <__ieee754_pow+0x73c>)
 80073c4:	4413      	add	r3, r2
 80073c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80073ca:	4606      	mov	r6, r0
 80073cc:	460f      	mov	r7, r1
 80073ce:	4622      	mov	r2, r4
 80073d0:	462b      	mov	r3, r5
 80073d2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80073d6:	f7f8 ff59 	bl	800028c <__adddf3>
 80073da:	4642      	mov	r2, r8
 80073dc:	464b      	mov	r3, r9
 80073de:	f7f8 ff55 	bl	800028c <__adddf3>
 80073e2:	4632      	mov	r2, r6
 80073e4:	463b      	mov	r3, r7
 80073e6:	f7f8 ff51 	bl	800028c <__adddf3>
 80073ea:	9802      	ldr	r0, [sp, #8]
 80073ec:	4632      	mov	r2, r6
 80073ee:	463b      	mov	r3, r7
 80073f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073f4:	f7f8 ff48 	bl	8000288 <__aeabi_dsub>
 80073f8:	4642      	mov	r2, r8
 80073fa:	464b      	mov	r3, r9
 80073fc:	f7f8 ff44 	bl	8000288 <__aeabi_dsub>
 8007400:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007404:	e607      	b.n	8007016 <__ieee754_pow+0x2ce>
 8007406:	f04f 0a01 	mov.w	sl, #1
 800740a:	e6a5      	b.n	8007158 <__ieee754_pow+0x410>
 800740c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8007460 <__ieee754_pow+0x718>
 8007410:	e613      	b.n	800703a <__ieee754_pow+0x2f2>
 8007412:	bf00      	nop
 8007414:	f3af 8000 	nop.w
 8007418:	4a454eef 	.word	0x4a454eef
 800741c:	3fca7e28 	.word	0x3fca7e28
 8007420:	93c9db65 	.word	0x93c9db65
 8007424:	3fcd864a 	.word	0x3fcd864a
 8007428:	a91d4101 	.word	0xa91d4101
 800742c:	3fd17460 	.word	0x3fd17460
 8007430:	518f264d 	.word	0x518f264d
 8007434:	3fd55555 	.word	0x3fd55555
 8007438:	db6fabff 	.word	0xdb6fabff
 800743c:	3fdb6db6 	.word	0x3fdb6db6
 8007440:	33333303 	.word	0x33333303
 8007444:	3fe33333 	.word	0x3fe33333
 8007448:	e0000000 	.word	0xe0000000
 800744c:	3feec709 	.word	0x3feec709
 8007450:	dc3a03fd 	.word	0xdc3a03fd
 8007454:	3feec709 	.word	0x3feec709
 8007458:	145b01f5 	.word	0x145b01f5
 800745c:	be3e2fe0 	.word	0xbe3e2fe0
 8007460:	00000000 	.word	0x00000000
 8007464:	3ff00000 	.word	0x3ff00000
 8007468:	43400000 	.word	0x43400000
 800746c:	0003988e 	.word	0x0003988e
 8007470:	000bb679 	.word	0x000bb679
 8007474:	0800a850 	.word	0x0800a850
 8007478:	3ff00000 	.word	0x3ff00000
 800747c:	40080000 	.word	0x40080000
 8007480:	0800a870 	.word	0x0800a870
 8007484:	0800a860 	.word	0x0800a860
 8007488:	a3b6      	add	r3, pc, #728	; (adr r3, 8007764 <__ieee754_pow+0xa1c>)
 800748a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748e:	4640      	mov	r0, r8
 8007490:	4649      	mov	r1, r9
 8007492:	f7f8 fefb 	bl	800028c <__adddf3>
 8007496:	4622      	mov	r2, r4
 8007498:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800749c:	462b      	mov	r3, r5
 800749e:	4630      	mov	r0, r6
 80074a0:	4639      	mov	r1, r7
 80074a2:	f7f8 fef1 	bl	8000288 <__aeabi_dsub>
 80074a6:	4602      	mov	r2, r0
 80074a8:	460b      	mov	r3, r1
 80074aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074ae:	f7f9 fb2f 	bl	8000b10 <__aeabi_dcmpgt>
 80074b2:	2800      	cmp	r0, #0
 80074b4:	f47f adfe 	bne.w	80070b4 <__ieee754_pow+0x36c>
 80074b8:	4aa5      	ldr	r2, [pc, #660]	; (8007750 <__ieee754_pow+0xa08>)
 80074ba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80074be:	4293      	cmp	r3, r2
 80074c0:	f340 810c 	ble.w	80076dc <__ieee754_pow+0x994>
 80074c4:	151b      	asrs	r3, r3, #20
 80074c6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80074ca:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80074ce:	fa4a f303 	asr.w	r3, sl, r3
 80074d2:	445b      	add	r3, fp
 80074d4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80074d8:	4e9e      	ldr	r6, [pc, #632]	; (8007754 <__ieee754_pow+0xa0c>)
 80074da:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80074de:	4116      	asrs	r6, r2
 80074e0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80074e4:	2000      	movs	r0, #0
 80074e6:	ea23 0106 	bic.w	r1, r3, r6
 80074ea:	f1c2 0214 	rsb	r2, r2, #20
 80074ee:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80074f2:	fa4a fa02 	asr.w	sl, sl, r2
 80074f6:	f1bb 0f00 	cmp.w	fp, #0
 80074fa:	4602      	mov	r2, r0
 80074fc:	460b      	mov	r3, r1
 80074fe:	4620      	mov	r0, r4
 8007500:	4629      	mov	r1, r5
 8007502:	bfb8      	it	lt
 8007504:	f1ca 0a00 	rsblt	sl, sl, #0
 8007508:	f7f8 febe 	bl	8000288 <__aeabi_dsub>
 800750c:	e9cd 0100 	strd	r0, r1, [sp]
 8007510:	4642      	mov	r2, r8
 8007512:	464b      	mov	r3, r9
 8007514:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007518:	f7f8 feb8 	bl	800028c <__adddf3>
 800751c:	2000      	movs	r0, #0
 800751e:	a37a      	add	r3, pc, #488	; (adr r3, 8007708 <__ieee754_pow+0x9c0>)
 8007520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007524:	4604      	mov	r4, r0
 8007526:	460d      	mov	r5, r1
 8007528:	f7f9 f862 	bl	80005f0 <__aeabi_dmul>
 800752c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007530:	4606      	mov	r6, r0
 8007532:	460f      	mov	r7, r1
 8007534:	4620      	mov	r0, r4
 8007536:	4629      	mov	r1, r5
 8007538:	f7f8 fea6 	bl	8000288 <__aeabi_dsub>
 800753c:	4602      	mov	r2, r0
 800753e:	460b      	mov	r3, r1
 8007540:	4640      	mov	r0, r8
 8007542:	4649      	mov	r1, r9
 8007544:	f7f8 fea0 	bl	8000288 <__aeabi_dsub>
 8007548:	a371      	add	r3, pc, #452	; (adr r3, 8007710 <__ieee754_pow+0x9c8>)
 800754a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754e:	f7f9 f84f 	bl	80005f0 <__aeabi_dmul>
 8007552:	a371      	add	r3, pc, #452	; (adr r3, 8007718 <__ieee754_pow+0x9d0>)
 8007554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007558:	4680      	mov	r8, r0
 800755a:	4689      	mov	r9, r1
 800755c:	4620      	mov	r0, r4
 800755e:	4629      	mov	r1, r5
 8007560:	f7f9 f846 	bl	80005f0 <__aeabi_dmul>
 8007564:	4602      	mov	r2, r0
 8007566:	460b      	mov	r3, r1
 8007568:	4640      	mov	r0, r8
 800756a:	4649      	mov	r1, r9
 800756c:	f7f8 fe8e 	bl	800028c <__adddf3>
 8007570:	4604      	mov	r4, r0
 8007572:	460d      	mov	r5, r1
 8007574:	4602      	mov	r2, r0
 8007576:	460b      	mov	r3, r1
 8007578:	4630      	mov	r0, r6
 800757a:	4639      	mov	r1, r7
 800757c:	f7f8 fe86 	bl	800028c <__adddf3>
 8007580:	4632      	mov	r2, r6
 8007582:	463b      	mov	r3, r7
 8007584:	4680      	mov	r8, r0
 8007586:	4689      	mov	r9, r1
 8007588:	f7f8 fe7e 	bl	8000288 <__aeabi_dsub>
 800758c:	4602      	mov	r2, r0
 800758e:	460b      	mov	r3, r1
 8007590:	4620      	mov	r0, r4
 8007592:	4629      	mov	r1, r5
 8007594:	f7f8 fe78 	bl	8000288 <__aeabi_dsub>
 8007598:	4642      	mov	r2, r8
 800759a:	4606      	mov	r6, r0
 800759c:	460f      	mov	r7, r1
 800759e:	464b      	mov	r3, r9
 80075a0:	4640      	mov	r0, r8
 80075a2:	4649      	mov	r1, r9
 80075a4:	f7f9 f824 	bl	80005f0 <__aeabi_dmul>
 80075a8:	a35d      	add	r3, pc, #372	; (adr r3, 8007720 <__ieee754_pow+0x9d8>)
 80075aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ae:	4604      	mov	r4, r0
 80075b0:	460d      	mov	r5, r1
 80075b2:	f7f9 f81d 	bl	80005f0 <__aeabi_dmul>
 80075b6:	a35c      	add	r3, pc, #368	; (adr r3, 8007728 <__ieee754_pow+0x9e0>)
 80075b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075bc:	f7f8 fe64 	bl	8000288 <__aeabi_dsub>
 80075c0:	4622      	mov	r2, r4
 80075c2:	462b      	mov	r3, r5
 80075c4:	f7f9 f814 	bl	80005f0 <__aeabi_dmul>
 80075c8:	a359      	add	r3, pc, #356	; (adr r3, 8007730 <__ieee754_pow+0x9e8>)
 80075ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ce:	f7f8 fe5d 	bl	800028c <__adddf3>
 80075d2:	4622      	mov	r2, r4
 80075d4:	462b      	mov	r3, r5
 80075d6:	f7f9 f80b 	bl	80005f0 <__aeabi_dmul>
 80075da:	a357      	add	r3, pc, #348	; (adr r3, 8007738 <__ieee754_pow+0x9f0>)
 80075dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e0:	f7f8 fe52 	bl	8000288 <__aeabi_dsub>
 80075e4:	4622      	mov	r2, r4
 80075e6:	462b      	mov	r3, r5
 80075e8:	f7f9 f802 	bl	80005f0 <__aeabi_dmul>
 80075ec:	a354      	add	r3, pc, #336	; (adr r3, 8007740 <__ieee754_pow+0x9f8>)
 80075ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f2:	f7f8 fe4b 	bl	800028c <__adddf3>
 80075f6:	4622      	mov	r2, r4
 80075f8:	462b      	mov	r3, r5
 80075fa:	f7f8 fff9 	bl	80005f0 <__aeabi_dmul>
 80075fe:	4602      	mov	r2, r0
 8007600:	460b      	mov	r3, r1
 8007602:	4640      	mov	r0, r8
 8007604:	4649      	mov	r1, r9
 8007606:	f7f8 fe3f 	bl	8000288 <__aeabi_dsub>
 800760a:	4604      	mov	r4, r0
 800760c:	460d      	mov	r5, r1
 800760e:	4602      	mov	r2, r0
 8007610:	460b      	mov	r3, r1
 8007612:	4640      	mov	r0, r8
 8007614:	4649      	mov	r1, r9
 8007616:	f7f8 ffeb 	bl	80005f0 <__aeabi_dmul>
 800761a:	2200      	movs	r2, #0
 800761c:	e9cd 0100 	strd	r0, r1, [sp]
 8007620:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007624:	4620      	mov	r0, r4
 8007626:	4629      	mov	r1, r5
 8007628:	f7f8 fe2e 	bl	8000288 <__aeabi_dsub>
 800762c:	4602      	mov	r2, r0
 800762e:	460b      	mov	r3, r1
 8007630:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007634:	f7f9 f906 	bl	8000844 <__aeabi_ddiv>
 8007638:	4632      	mov	r2, r6
 800763a:	4604      	mov	r4, r0
 800763c:	460d      	mov	r5, r1
 800763e:	463b      	mov	r3, r7
 8007640:	4640      	mov	r0, r8
 8007642:	4649      	mov	r1, r9
 8007644:	f7f8 ffd4 	bl	80005f0 <__aeabi_dmul>
 8007648:	4632      	mov	r2, r6
 800764a:	463b      	mov	r3, r7
 800764c:	f7f8 fe1e 	bl	800028c <__adddf3>
 8007650:	4602      	mov	r2, r0
 8007652:	460b      	mov	r3, r1
 8007654:	4620      	mov	r0, r4
 8007656:	4629      	mov	r1, r5
 8007658:	f7f8 fe16 	bl	8000288 <__aeabi_dsub>
 800765c:	4642      	mov	r2, r8
 800765e:	464b      	mov	r3, r9
 8007660:	f7f8 fe12 	bl	8000288 <__aeabi_dsub>
 8007664:	4602      	mov	r2, r0
 8007666:	460b      	mov	r3, r1
 8007668:	2000      	movs	r0, #0
 800766a:	493b      	ldr	r1, [pc, #236]	; (8007758 <__ieee754_pow+0xa10>)
 800766c:	f7f8 fe0c 	bl	8000288 <__aeabi_dsub>
 8007670:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8007674:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007678:	4602      	mov	r2, r0
 800767a:	460b      	mov	r3, r1
 800767c:	da31      	bge.n	80076e2 <__ieee754_pow+0x99a>
 800767e:	4650      	mov	r0, sl
 8007680:	ec43 2b10 	vmov	d0, r2, r3
 8007684:	f000 f9c4 	bl	8007a10 <scalbn>
 8007688:	ec51 0b10 	vmov	r0, r1, d0
 800768c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007690:	f7ff bbf1 	b.w	8006e76 <__ieee754_pow+0x12e>
 8007694:	4b31      	ldr	r3, [pc, #196]	; (800775c <__ieee754_pow+0xa14>)
 8007696:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800769a:	429e      	cmp	r6, r3
 800769c:	f77f af0c 	ble.w	80074b8 <__ieee754_pow+0x770>
 80076a0:	4b2f      	ldr	r3, [pc, #188]	; (8007760 <__ieee754_pow+0xa18>)
 80076a2:	440b      	add	r3, r1
 80076a4:	4303      	orrs	r3, r0
 80076a6:	d00b      	beq.n	80076c0 <__ieee754_pow+0x978>
 80076a8:	a327      	add	r3, pc, #156	; (adr r3, 8007748 <__ieee754_pow+0xa00>)
 80076aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076b2:	f7f8 ff9d 	bl	80005f0 <__aeabi_dmul>
 80076b6:	a324      	add	r3, pc, #144	; (adr r3, 8007748 <__ieee754_pow+0xa00>)
 80076b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076bc:	f7ff bbdb 	b.w	8006e76 <__ieee754_pow+0x12e>
 80076c0:	4622      	mov	r2, r4
 80076c2:	462b      	mov	r3, r5
 80076c4:	f7f8 fde0 	bl	8000288 <__aeabi_dsub>
 80076c8:	4602      	mov	r2, r0
 80076ca:	460b      	mov	r3, r1
 80076cc:	4640      	mov	r0, r8
 80076ce:	4649      	mov	r1, r9
 80076d0:	f7f9 fa0a 	bl	8000ae8 <__aeabi_dcmple>
 80076d4:	2800      	cmp	r0, #0
 80076d6:	f43f aeef 	beq.w	80074b8 <__ieee754_pow+0x770>
 80076da:	e7e5      	b.n	80076a8 <__ieee754_pow+0x960>
 80076dc:	f04f 0a00 	mov.w	sl, #0
 80076e0:	e716      	b.n	8007510 <__ieee754_pow+0x7c8>
 80076e2:	4621      	mov	r1, r4
 80076e4:	e7d2      	b.n	800768c <__ieee754_pow+0x944>
 80076e6:	2000      	movs	r0, #0
 80076e8:	491b      	ldr	r1, [pc, #108]	; (8007758 <__ieee754_pow+0xa10>)
 80076ea:	f7ff bb8d 	b.w	8006e08 <__ieee754_pow+0xc0>
 80076ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80076f2:	f7ff bb89 	b.w	8006e08 <__ieee754_pow+0xc0>
 80076f6:	4630      	mov	r0, r6
 80076f8:	4639      	mov	r1, r7
 80076fa:	f7ff bb85 	b.w	8006e08 <__ieee754_pow+0xc0>
 80076fe:	4693      	mov	fp, r2
 8007700:	f7ff bb96 	b.w	8006e30 <__ieee754_pow+0xe8>
 8007704:	f3af 8000 	nop.w
 8007708:	00000000 	.word	0x00000000
 800770c:	3fe62e43 	.word	0x3fe62e43
 8007710:	fefa39ef 	.word	0xfefa39ef
 8007714:	3fe62e42 	.word	0x3fe62e42
 8007718:	0ca86c39 	.word	0x0ca86c39
 800771c:	be205c61 	.word	0xbe205c61
 8007720:	72bea4d0 	.word	0x72bea4d0
 8007724:	3e663769 	.word	0x3e663769
 8007728:	c5d26bf1 	.word	0xc5d26bf1
 800772c:	3ebbbd41 	.word	0x3ebbbd41
 8007730:	af25de2c 	.word	0xaf25de2c
 8007734:	3f11566a 	.word	0x3f11566a
 8007738:	16bebd93 	.word	0x16bebd93
 800773c:	3f66c16c 	.word	0x3f66c16c
 8007740:	5555553e 	.word	0x5555553e
 8007744:	3fc55555 	.word	0x3fc55555
 8007748:	c2f8f359 	.word	0xc2f8f359
 800774c:	01a56e1f 	.word	0x01a56e1f
 8007750:	3fe00000 	.word	0x3fe00000
 8007754:	000fffff 	.word	0x000fffff
 8007758:	3ff00000 	.word	0x3ff00000
 800775c:	4090cbff 	.word	0x4090cbff
 8007760:	3f6f3400 	.word	0x3f6f3400
 8007764:	652b82fe 	.word	0x652b82fe
 8007768:	3c971547 	.word	0x3c971547

0800776c <__ieee754_sqrt>:
 800776c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007770:	ec55 4b10 	vmov	r4, r5, d0
 8007774:	4e54      	ldr	r6, [pc, #336]	; (80078c8 <__ieee754_sqrt+0x15c>)
 8007776:	43ae      	bics	r6, r5
 8007778:	ee10 0a10 	vmov	r0, s0
 800777c:	462b      	mov	r3, r5
 800777e:	462a      	mov	r2, r5
 8007780:	4621      	mov	r1, r4
 8007782:	d113      	bne.n	80077ac <__ieee754_sqrt+0x40>
 8007784:	ee10 2a10 	vmov	r2, s0
 8007788:	462b      	mov	r3, r5
 800778a:	ee10 0a10 	vmov	r0, s0
 800778e:	4629      	mov	r1, r5
 8007790:	f7f8 ff2e 	bl	80005f0 <__aeabi_dmul>
 8007794:	4602      	mov	r2, r0
 8007796:	460b      	mov	r3, r1
 8007798:	4620      	mov	r0, r4
 800779a:	4629      	mov	r1, r5
 800779c:	f7f8 fd76 	bl	800028c <__adddf3>
 80077a0:	4604      	mov	r4, r0
 80077a2:	460d      	mov	r5, r1
 80077a4:	ec45 4b10 	vmov	d0, r4, r5
 80077a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077ac:	2d00      	cmp	r5, #0
 80077ae:	dc10      	bgt.n	80077d2 <__ieee754_sqrt+0x66>
 80077b0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80077b4:	4330      	orrs	r0, r6
 80077b6:	d0f5      	beq.n	80077a4 <__ieee754_sqrt+0x38>
 80077b8:	b15d      	cbz	r5, 80077d2 <__ieee754_sqrt+0x66>
 80077ba:	ee10 2a10 	vmov	r2, s0
 80077be:	462b      	mov	r3, r5
 80077c0:	4620      	mov	r0, r4
 80077c2:	4629      	mov	r1, r5
 80077c4:	f7f8 fd60 	bl	8000288 <__aeabi_dsub>
 80077c8:	4602      	mov	r2, r0
 80077ca:	460b      	mov	r3, r1
 80077cc:	f7f9 f83a 	bl	8000844 <__aeabi_ddiv>
 80077d0:	e7e6      	b.n	80077a0 <__ieee754_sqrt+0x34>
 80077d2:	151b      	asrs	r3, r3, #20
 80077d4:	d10c      	bne.n	80077f0 <__ieee754_sqrt+0x84>
 80077d6:	2a00      	cmp	r2, #0
 80077d8:	d06d      	beq.n	80078b6 <__ieee754_sqrt+0x14a>
 80077da:	2000      	movs	r0, #0
 80077dc:	02d6      	lsls	r6, r2, #11
 80077de:	d56e      	bpl.n	80078be <__ieee754_sqrt+0x152>
 80077e0:	1e44      	subs	r4, r0, #1
 80077e2:	1b1b      	subs	r3, r3, r4
 80077e4:	f1c0 0420 	rsb	r4, r0, #32
 80077e8:	fa21 f404 	lsr.w	r4, r1, r4
 80077ec:	4322      	orrs	r2, r4
 80077ee:	4081      	lsls	r1, r0
 80077f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80077f4:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80077f8:	07dd      	lsls	r5, r3, #31
 80077fa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80077fe:	bf42      	ittt	mi
 8007800:	0052      	lslmi	r2, r2, #1
 8007802:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 8007806:	0049      	lslmi	r1, r1, #1
 8007808:	1058      	asrs	r0, r3, #1
 800780a:	2500      	movs	r5, #0
 800780c:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8007810:	441a      	add	r2, r3
 8007812:	0049      	lsls	r1, r1, #1
 8007814:	2316      	movs	r3, #22
 8007816:	462c      	mov	r4, r5
 8007818:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800781c:	19a7      	adds	r7, r4, r6
 800781e:	4297      	cmp	r7, r2
 8007820:	bfde      	ittt	le
 8007822:	1bd2      	suble	r2, r2, r7
 8007824:	19bc      	addle	r4, r7, r6
 8007826:	19ad      	addle	r5, r5, r6
 8007828:	0052      	lsls	r2, r2, #1
 800782a:	3b01      	subs	r3, #1
 800782c:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8007830:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007834:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007838:	d1f0      	bne.n	800781c <__ieee754_sqrt+0xb0>
 800783a:	f04f 0e20 	mov.w	lr, #32
 800783e:	469c      	mov	ip, r3
 8007840:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007844:	42a2      	cmp	r2, r4
 8007846:	eb06 070c 	add.w	r7, r6, ip
 800784a:	dc02      	bgt.n	8007852 <__ieee754_sqrt+0xe6>
 800784c:	d112      	bne.n	8007874 <__ieee754_sqrt+0x108>
 800784e:	428f      	cmp	r7, r1
 8007850:	d810      	bhi.n	8007874 <__ieee754_sqrt+0x108>
 8007852:	2f00      	cmp	r7, #0
 8007854:	eb07 0c06 	add.w	ip, r7, r6
 8007858:	da34      	bge.n	80078c4 <__ieee754_sqrt+0x158>
 800785a:	f1bc 0f00 	cmp.w	ip, #0
 800785e:	db31      	blt.n	80078c4 <__ieee754_sqrt+0x158>
 8007860:	f104 0801 	add.w	r8, r4, #1
 8007864:	1b12      	subs	r2, r2, r4
 8007866:	428f      	cmp	r7, r1
 8007868:	bf88      	it	hi
 800786a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800786e:	1bc9      	subs	r1, r1, r7
 8007870:	4433      	add	r3, r6
 8007872:	4644      	mov	r4, r8
 8007874:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8007878:	f1be 0e01 	subs.w	lr, lr, #1
 800787c:	443a      	add	r2, r7
 800787e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007882:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007886:	d1dd      	bne.n	8007844 <__ieee754_sqrt+0xd8>
 8007888:	430a      	orrs	r2, r1
 800788a:	d006      	beq.n	800789a <__ieee754_sqrt+0x12e>
 800788c:	1c5c      	adds	r4, r3, #1
 800788e:	bf13      	iteet	ne
 8007890:	3301      	addne	r3, #1
 8007892:	3501      	addeq	r5, #1
 8007894:	4673      	moveq	r3, lr
 8007896:	f023 0301 	bicne.w	r3, r3, #1
 800789a:	106a      	asrs	r2, r5, #1
 800789c:	085b      	lsrs	r3, r3, #1
 800789e:	07e9      	lsls	r1, r5, #31
 80078a0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80078a4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80078a8:	bf48      	it	mi
 80078aa:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80078ae:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80078b2:	461c      	mov	r4, r3
 80078b4:	e776      	b.n	80077a4 <__ieee754_sqrt+0x38>
 80078b6:	0aca      	lsrs	r2, r1, #11
 80078b8:	3b15      	subs	r3, #21
 80078ba:	0549      	lsls	r1, r1, #21
 80078bc:	e78b      	b.n	80077d6 <__ieee754_sqrt+0x6a>
 80078be:	0052      	lsls	r2, r2, #1
 80078c0:	3001      	adds	r0, #1
 80078c2:	e78b      	b.n	80077dc <__ieee754_sqrt+0x70>
 80078c4:	46a0      	mov	r8, r4
 80078c6:	e7cd      	b.n	8007864 <__ieee754_sqrt+0xf8>
 80078c8:	7ff00000 	.word	0x7ff00000

080078cc <fabs>:
 80078cc:	ec53 2b10 	vmov	r2, r3, d0
 80078d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80078d4:	ec43 2b10 	vmov	d0, r2, r3
 80078d8:	4770      	bx	lr

080078da <finite>:
 80078da:	ee10 3a90 	vmov	r3, s1
 80078de:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80078e2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80078e6:	0fc0      	lsrs	r0, r0, #31
 80078e8:	4770      	bx	lr

080078ea <matherr>:
 80078ea:	2000      	movs	r0, #0
 80078ec:	4770      	bx	lr
	...

080078f0 <nan>:
 80078f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80078f8 <nan+0x8>
 80078f4:	4770      	bx	lr
 80078f6:	bf00      	nop
 80078f8:	00000000 	.word	0x00000000
 80078fc:	7ff80000 	.word	0x7ff80000

08007900 <rint>:
 8007900:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007902:	ec51 0b10 	vmov	r0, r1, d0
 8007906:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800790a:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 800790e:	2e13      	cmp	r6, #19
 8007910:	ee10 7a10 	vmov	r7, s0
 8007914:	460b      	mov	r3, r1
 8007916:	4602      	mov	r2, r0
 8007918:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800791c:	dc58      	bgt.n	80079d0 <rint+0xd0>
 800791e:	2e00      	cmp	r6, #0
 8007920:	da2b      	bge.n	800797a <rint+0x7a>
 8007922:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8007926:	4302      	orrs	r2, r0
 8007928:	d023      	beq.n	8007972 <rint+0x72>
 800792a:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800792e:	4302      	orrs	r2, r0
 8007930:	4251      	negs	r1, r2
 8007932:	4311      	orrs	r1, r2
 8007934:	0b09      	lsrs	r1, r1, #12
 8007936:	0c5b      	lsrs	r3, r3, #17
 8007938:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 800793c:	045b      	lsls	r3, r3, #17
 800793e:	ea41 0703 	orr.w	r7, r1, r3
 8007942:	4b31      	ldr	r3, [pc, #196]	; (8007a08 <rint+0x108>)
 8007944:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007948:	4639      	mov	r1, r7
 800794a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800794e:	ee10 0a10 	vmov	r0, s0
 8007952:	4632      	mov	r2, r6
 8007954:	463b      	mov	r3, r7
 8007956:	f7f8 fc99 	bl	800028c <__adddf3>
 800795a:	e9cd 0100 	strd	r0, r1, [sp]
 800795e:	463b      	mov	r3, r7
 8007960:	4632      	mov	r2, r6
 8007962:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007966:	f7f8 fc8f 	bl	8000288 <__aeabi_dsub>
 800796a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800796e:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 8007972:	ec41 0b10 	vmov	d0, r0, r1
 8007976:	b003      	add	sp, #12
 8007978:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800797a:	4c24      	ldr	r4, [pc, #144]	; (8007a0c <rint+0x10c>)
 800797c:	4134      	asrs	r4, r6
 800797e:	ea01 0704 	and.w	r7, r1, r4
 8007982:	4307      	orrs	r7, r0
 8007984:	d0f5      	beq.n	8007972 <rint+0x72>
 8007986:	0861      	lsrs	r1, r4, #1
 8007988:	ea03 0001 	and.w	r0, r3, r1
 800798c:	4302      	orrs	r2, r0
 800798e:	d00b      	beq.n	80079a8 <rint+0xa8>
 8007990:	ea23 0101 	bic.w	r1, r3, r1
 8007994:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007998:	2e13      	cmp	r6, #19
 800799a:	fa43 f306 	asr.w	r3, r3, r6
 800799e:	bf0c      	ite	eq
 80079a0:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 80079a4:	2200      	movne	r2, #0
 80079a6:	430b      	orrs	r3, r1
 80079a8:	4619      	mov	r1, r3
 80079aa:	4b17      	ldr	r3, [pc, #92]	; (8007a08 <rint+0x108>)
 80079ac:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80079b0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80079b4:	4610      	mov	r0, r2
 80079b6:	462b      	mov	r3, r5
 80079b8:	4622      	mov	r2, r4
 80079ba:	f7f8 fc67 	bl	800028c <__adddf3>
 80079be:	e9cd 0100 	strd	r0, r1, [sp]
 80079c2:	4622      	mov	r2, r4
 80079c4:	462b      	mov	r3, r5
 80079c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80079ca:	f7f8 fc5d 	bl	8000288 <__aeabi_dsub>
 80079ce:	e7d0      	b.n	8007972 <rint+0x72>
 80079d0:	2e33      	cmp	r6, #51	; 0x33
 80079d2:	dd08      	ble.n	80079e6 <rint+0xe6>
 80079d4:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80079d8:	d1cb      	bne.n	8007972 <rint+0x72>
 80079da:	ee10 2a10 	vmov	r2, s0
 80079de:	460b      	mov	r3, r1
 80079e0:	f7f8 fc54 	bl	800028c <__adddf3>
 80079e4:	e7c5      	b.n	8007972 <rint+0x72>
 80079e6:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 80079ea:	f04f 34ff 	mov.w	r4, #4294967295
 80079ee:	40f4      	lsrs	r4, r6
 80079f0:	4220      	tst	r0, r4
 80079f2:	d0be      	beq.n	8007972 <rint+0x72>
 80079f4:	0861      	lsrs	r1, r4, #1
 80079f6:	420f      	tst	r7, r1
 80079f8:	bf1f      	itttt	ne
 80079fa:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 80079fe:	ea27 0101 	bicne.w	r1, r7, r1
 8007a02:	4132      	asrne	r2, r6
 8007a04:	430a      	orrne	r2, r1
 8007a06:	e7cf      	b.n	80079a8 <rint+0xa8>
 8007a08:	0800a880 	.word	0x0800a880
 8007a0c:	000fffff 	.word	0x000fffff

08007a10 <scalbn>:
 8007a10:	b570      	push	{r4, r5, r6, lr}
 8007a12:	ec55 4b10 	vmov	r4, r5, d0
 8007a16:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007a1a:	4606      	mov	r6, r0
 8007a1c:	462b      	mov	r3, r5
 8007a1e:	b9b2      	cbnz	r2, 8007a4e <scalbn+0x3e>
 8007a20:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007a24:	4323      	orrs	r3, r4
 8007a26:	d03c      	beq.n	8007aa2 <scalbn+0x92>
 8007a28:	2200      	movs	r2, #0
 8007a2a:	4b33      	ldr	r3, [pc, #204]	; (8007af8 <scalbn+0xe8>)
 8007a2c:	4629      	mov	r1, r5
 8007a2e:	ee10 0a10 	vmov	r0, s0
 8007a32:	f7f8 fddd 	bl	80005f0 <__aeabi_dmul>
 8007a36:	4a31      	ldr	r2, [pc, #196]	; (8007afc <scalbn+0xec>)
 8007a38:	4296      	cmp	r6, r2
 8007a3a:	4604      	mov	r4, r0
 8007a3c:	460d      	mov	r5, r1
 8007a3e:	460b      	mov	r3, r1
 8007a40:	da13      	bge.n	8007a6a <scalbn+0x5a>
 8007a42:	a329      	add	r3, pc, #164	; (adr r3, 8007ae8 <scalbn+0xd8>)
 8007a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a48:	f7f8 fdd2 	bl	80005f0 <__aeabi_dmul>
 8007a4c:	e00a      	b.n	8007a64 <scalbn+0x54>
 8007a4e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007a52:	428a      	cmp	r2, r1
 8007a54:	d10c      	bne.n	8007a70 <scalbn+0x60>
 8007a56:	ee10 2a10 	vmov	r2, s0
 8007a5a:	462b      	mov	r3, r5
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	4629      	mov	r1, r5
 8007a60:	f7f8 fc14 	bl	800028c <__adddf3>
 8007a64:	4604      	mov	r4, r0
 8007a66:	460d      	mov	r5, r1
 8007a68:	e01b      	b.n	8007aa2 <scalbn+0x92>
 8007a6a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007a6e:	3a36      	subs	r2, #54	; 0x36
 8007a70:	4432      	add	r2, r6
 8007a72:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007a76:	428a      	cmp	r2, r1
 8007a78:	dd0b      	ble.n	8007a92 <scalbn+0x82>
 8007a7a:	ec45 4b11 	vmov	d1, r4, r5
 8007a7e:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8007af0 <scalbn+0xe0>
 8007a82:	f000 f83f 	bl	8007b04 <copysign>
 8007a86:	a31a      	add	r3, pc, #104	; (adr r3, 8007af0 <scalbn+0xe0>)
 8007a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8c:	ec51 0b10 	vmov	r0, r1, d0
 8007a90:	e7da      	b.n	8007a48 <scalbn+0x38>
 8007a92:	2a00      	cmp	r2, #0
 8007a94:	dd08      	ble.n	8007aa8 <scalbn+0x98>
 8007a96:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007a9a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007a9e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007aa2:	ec45 4b10 	vmov	d0, r4, r5
 8007aa6:	bd70      	pop	{r4, r5, r6, pc}
 8007aa8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007aac:	da0d      	bge.n	8007aca <scalbn+0xba>
 8007aae:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007ab2:	429e      	cmp	r6, r3
 8007ab4:	ec45 4b11 	vmov	d1, r4, r5
 8007ab8:	dce1      	bgt.n	8007a7e <scalbn+0x6e>
 8007aba:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8007ae8 <scalbn+0xd8>
 8007abe:	f000 f821 	bl	8007b04 <copysign>
 8007ac2:	a309      	add	r3, pc, #36	; (adr r3, 8007ae8 <scalbn+0xd8>)
 8007ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac8:	e7e0      	b.n	8007a8c <scalbn+0x7c>
 8007aca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007ace:	3236      	adds	r2, #54	; 0x36
 8007ad0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007ad4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007ad8:	4620      	mov	r0, r4
 8007ada:	4629      	mov	r1, r5
 8007adc:	2200      	movs	r2, #0
 8007ade:	4b08      	ldr	r3, [pc, #32]	; (8007b00 <scalbn+0xf0>)
 8007ae0:	e7b2      	b.n	8007a48 <scalbn+0x38>
 8007ae2:	bf00      	nop
 8007ae4:	f3af 8000 	nop.w
 8007ae8:	c2f8f359 	.word	0xc2f8f359
 8007aec:	01a56e1f 	.word	0x01a56e1f
 8007af0:	8800759c 	.word	0x8800759c
 8007af4:	7e37e43c 	.word	0x7e37e43c
 8007af8:	43500000 	.word	0x43500000
 8007afc:	ffff3cb0 	.word	0xffff3cb0
 8007b00:	3c900000 	.word	0x3c900000

08007b04 <copysign>:
 8007b04:	ec53 2b10 	vmov	r2, r3, d0
 8007b08:	ee11 0a90 	vmov	r0, s3
 8007b0c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007b10:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007b14:	ea41 0300 	orr.w	r3, r1, r0
 8007b18:	ec43 2b10 	vmov	d0, r2, r3
 8007b1c:	4770      	bx	lr
	...

08007b20 <__errno>:
 8007b20:	4b01      	ldr	r3, [pc, #4]	; (8007b28 <__errno+0x8>)
 8007b22:	6818      	ldr	r0, [r3, #0]
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop
 8007b28:	20000008 	.word	0x20000008

08007b2c <__libc_init_array>:
 8007b2c:	b570      	push	{r4, r5, r6, lr}
 8007b2e:	4e0d      	ldr	r6, [pc, #52]	; (8007b64 <__libc_init_array+0x38>)
 8007b30:	4c0d      	ldr	r4, [pc, #52]	; (8007b68 <__libc_init_array+0x3c>)
 8007b32:	1ba4      	subs	r4, r4, r6
 8007b34:	10a4      	asrs	r4, r4, #2
 8007b36:	2500      	movs	r5, #0
 8007b38:	42a5      	cmp	r5, r4
 8007b3a:	d109      	bne.n	8007b50 <__libc_init_array+0x24>
 8007b3c:	4e0b      	ldr	r6, [pc, #44]	; (8007b6c <__libc_init_array+0x40>)
 8007b3e:	4c0c      	ldr	r4, [pc, #48]	; (8007b70 <__libc_init_array+0x44>)
 8007b40:	f002 fc18 	bl	800a374 <_init>
 8007b44:	1ba4      	subs	r4, r4, r6
 8007b46:	10a4      	asrs	r4, r4, #2
 8007b48:	2500      	movs	r5, #0
 8007b4a:	42a5      	cmp	r5, r4
 8007b4c:	d105      	bne.n	8007b5a <__libc_init_array+0x2e>
 8007b4e:	bd70      	pop	{r4, r5, r6, pc}
 8007b50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b54:	4798      	blx	r3
 8007b56:	3501      	adds	r5, #1
 8007b58:	e7ee      	b.n	8007b38 <__libc_init_array+0xc>
 8007b5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b5e:	4798      	blx	r3
 8007b60:	3501      	adds	r5, #1
 8007b62:	e7f2      	b.n	8007b4a <__libc_init_array+0x1e>
 8007b64:	0800ae6c 	.word	0x0800ae6c
 8007b68:	0800ae6c 	.word	0x0800ae6c
 8007b6c:	0800ae6c 	.word	0x0800ae6c
 8007b70:	0800ae74 	.word	0x0800ae74

08007b74 <memset>:
 8007b74:	4402      	add	r2, r0
 8007b76:	4603      	mov	r3, r0
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d100      	bne.n	8007b7e <memset+0xa>
 8007b7c:	4770      	bx	lr
 8007b7e:	f803 1b01 	strb.w	r1, [r3], #1
 8007b82:	e7f9      	b.n	8007b78 <memset+0x4>

08007b84 <__cvt>:
 8007b84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b88:	ec55 4b10 	vmov	r4, r5, d0
 8007b8c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007b8e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007b92:	2d00      	cmp	r5, #0
 8007b94:	460e      	mov	r6, r1
 8007b96:	4691      	mov	r9, r2
 8007b98:	4619      	mov	r1, r3
 8007b9a:	bfb8      	it	lt
 8007b9c:	4622      	movlt	r2, r4
 8007b9e:	462b      	mov	r3, r5
 8007ba0:	f027 0720 	bic.w	r7, r7, #32
 8007ba4:	bfbb      	ittet	lt
 8007ba6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007baa:	461d      	movlt	r5, r3
 8007bac:	2300      	movge	r3, #0
 8007bae:	232d      	movlt	r3, #45	; 0x2d
 8007bb0:	bfb8      	it	lt
 8007bb2:	4614      	movlt	r4, r2
 8007bb4:	2f46      	cmp	r7, #70	; 0x46
 8007bb6:	700b      	strb	r3, [r1, #0]
 8007bb8:	d004      	beq.n	8007bc4 <__cvt+0x40>
 8007bba:	2f45      	cmp	r7, #69	; 0x45
 8007bbc:	d100      	bne.n	8007bc0 <__cvt+0x3c>
 8007bbe:	3601      	adds	r6, #1
 8007bc0:	2102      	movs	r1, #2
 8007bc2:	e000      	b.n	8007bc6 <__cvt+0x42>
 8007bc4:	2103      	movs	r1, #3
 8007bc6:	ab03      	add	r3, sp, #12
 8007bc8:	9301      	str	r3, [sp, #4]
 8007bca:	ab02      	add	r3, sp, #8
 8007bcc:	9300      	str	r3, [sp, #0]
 8007bce:	4632      	mov	r2, r6
 8007bd0:	4653      	mov	r3, sl
 8007bd2:	ec45 4b10 	vmov	d0, r4, r5
 8007bd6:	f000 fe0b 	bl	80087f0 <_dtoa_r>
 8007bda:	2f47      	cmp	r7, #71	; 0x47
 8007bdc:	4680      	mov	r8, r0
 8007bde:	d102      	bne.n	8007be6 <__cvt+0x62>
 8007be0:	f019 0f01 	tst.w	r9, #1
 8007be4:	d026      	beq.n	8007c34 <__cvt+0xb0>
 8007be6:	2f46      	cmp	r7, #70	; 0x46
 8007be8:	eb08 0906 	add.w	r9, r8, r6
 8007bec:	d111      	bne.n	8007c12 <__cvt+0x8e>
 8007bee:	f898 3000 	ldrb.w	r3, [r8]
 8007bf2:	2b30      	cmp	r3, #48	; 0x30
 8007bf4:	d10a      	bne.n	8007c0c <__cvt+0x88>
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	4620      	mov	r0, r4
 8007bfc:	4629      	mov	r1, r5
 8007bfe:	f7f8 ff5f 	bl	8000ac0 <__aeabi_dcmpeq>
 8007c02:	b918      	cbnz	r0, 8007c0c <__cvt+0x88>
 8007c04:	f1c6 0601 	rsb	r6, r6, #1
 8007c08:	f8ca 6000 	str.w	r6, [sl]
 8007c0c:	f8da 3000 	ldr.w	r3, [sl]
 8007c10:	4499      	add	r9, r3
 8007c12:	2200      	movs	r2, #0
 8007c14:	2300      	movs	r3, #0
 8007c16:	4620      	mov	r0, r4
 8007c18:	4629      	mov	r1, r5
 8007c1a:	f7f8 ff51 	bl	8000ac0 <__aeabi_dcmpeq>
 8007c1e:	b938      	cbnz	r0, 8007c30 <__cvt+0xac>
 8007c20:	2230      	movs	r2, #48	; 0x30
 8007c22:	9b03      	ldr	r3, [sp, #12]
 8007c24:	4599      	cmp	r9, r3
 8007c26:	d905      	bls.n	8007c34 <__cvt+0xb0>
 8007c28:	1c59      	adds	r1, r3, #1
 8007c2a:	9103      	str	r1, [sp, #12]
 8007c2c:	701a      	strb	r2, [r3, #0]
 8007c2e:	e7f8      	b.n	8007c22 <__cvt+0x9e>
 8007c30:	f8cd 900c 	str.w	r9, [sp, #12]
 8007c34:	9b03      	ldr	r3, [sp, #12]
 8007c36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c38:	eba3 0308 	sub.w	r3, r3, r8
 8007c3c:	4640      	mov	r0, r8
 8007c3e:	6013      	str	r3, [r2, #0]
 8007c40:	b004      	add	sp, #16
 8007c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007c46 <__exponent>:
 8007c46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2900      	cmp	r1, #0
 8007c4c:	bfb8      	it	lt
 8007c4e:	4249      	neglt	r1, r1
 8007c50:	f803 2b02 	strb.w	r2, [r3], #2
 8007c54:	bfb4      	ite	lt
 8007c56:	222d      	movlt	r2, #45	; 0x2d
 8007c58:	222b      	movge	r2, #43	; 0x2b
 8007c5a:	2909      	cmp	r1, #9
 8007c5c:	7042      	strb	r2, [r0, #1]
 8007c5e:	dd20      	ble.n	8007ca2 <__exponent+0x5c>
 8007c60:	f10d 0207 	add.w	r2, sp, #7
 8007c64:	4617      	mov	r7, r2
 8007c66:	260a      	movs	r6, #10
 8007c68:	fb91 f5f6 	sdiv	r5, r1, r6
 8007c6c:	fb06 1115 	mls	r1, r6, r5, r1
 8007c70:	3130      	adds	r1, #48	; 0x30
 8007c72:	2d09      	cmp	r5, #9
 8007c74:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007c78:	f102 34ff 	add.w	r4, r2, #4294967295
 8007c7c:	4629      	mov	r1, r5
 8007c7e:	dc09      	bgt.n	8007c94 <__exponent+0x4e>
 8007c80:	3130      	adds	r1, #48	; 0x30
 8007c82:	3a02      	subs	r2, #2
 8007c84:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007c88:	42ba      	cmp	r2, r7
 8007c8a:	461c      	mov	r4, r3
 8007c8c:	d304      	bcc.n	8007c98 <__exponent+0x52>
 8007c8e:	1a20      	subs	r0, r4, r0
 8007c90:	b003      	add	sp, #12
 8007c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c94:	4622      	mov	r2, r4
 8007c96:	e7e7      	b.n	8007c68 <__exponent+0x22>
 8007c98:	f812 1b01 	ldrb.w	r1, [r2], #1
 8007c9c:	f803 1b01 	strb.w	r1, [r3], #1
 8007ca0:	e7f2      	b.n	8007c88 <__exponent+0x42>
 8007ca2:	2230      	movs	r2, #48	; 0x30
 8007ca4:	461c      	mov	r4, r3
 8007ca6:	4411      	add	r1, r2
 8007ca8:	f804 2b02 	strb.w	r2, [r4], #2
 8007cac:	7059      	strb	r1, [r3, #1]
 8007cae:	e7ee      	b.n	8007c8e <__exponent+0x48>

08007cb0 <_printf_float>:
 8007cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb4:	b08d      	sub	sp, #52	; 0x34
 8007cb6:	460c      	mov	r4, r1
 8007cb8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007cbc:	4616      	mov	r6, r2
 8007cbe:	461f      	mov	r7, r3
 8007cc0:	4605      	mov	r5, r0
 8007cc2:	f001 fcdf 	bl	8009684 <_localeconv_r>
 8007cc6:	6803      	ldr	r3, [r0, #0]
 8007cc8:	9304      	str	r3, [sp, #16]
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7f8 fa80 	bl	80001d0 <strlen>
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	930a      	str	r3, [sp, #40]	; 0x28
 8007cd4:	f8d8 3000 	ldr.w	r3, [r8]
 8007cd8:	9005      	str	r0, [sp, #20]
 8007cda:	3307      	adds	r3, #7
 8007cdc:	f023 0307 	bic.w	r3, r3, #7
 8007ce0:	f103 0208 	add.w	r2, r3, #8
 8007ce4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007ce8:	f8d4 b000 	ldr.w	fp, [r4]
 8007cec:	f8c8 2000 	str.w	r2, [r8]
 8007cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007cf8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007cfc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007d00:	9307      	str	r3, [sp, #28]
 8007d02:	f8cd 8018 	str.w	r8, [sp, #24]
 8007d06:	f04f 32ff 	mov.w	r2, #4294967295
 8007d0a:	4ba5      	ldr	r3, [pc, #660]	; (8007fa0 <_printf_float+0x2f0>)
 8007d0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d10:	f7f8 ff08 	bl	8000b24 <__aeabi_dcmpun>
 8007d14:	2800      	cmp	r0, #0
 8007d16:	f040 81fb 	bne.w	8008110 <_printf_float+0x460>
 8007d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d1e:	4ba0      	ldr	r3, [pc, #640]	; (8007fa0 <_printf_float+0x2f0>)
 8007d20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d24:	f7f8 fee0 	bl	8000ae8 <__aeabi_dcmple>
 8007d28:	2800      	cmp	r0, #0
 8007d2a:	f040 81f1 	bne.w	8008110 <_printf_float+0x460>
 8007d2e:	2200      	movs	r2, #0
 8007d30:	2300      	movs	r3, #0
 8007d32:	4640      	mov	r0, r8
 8007d34:	4649      	mov	r1, r9
 8007d36:	f7f8 fecd 	bl	8000ad4 <__aeabi_dcmplt>
 8007d3a:	b110      	cbz	r0, 8007d42 <_printf_float+0x92>
 8007d3c:	232d      	movs	r3, #45	; 0x2d
 8007d3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d42:	4b98      	ldr	r3, [pc, #608]	; (8007fa4 <_printf_float+0x2f4>)
 8007d44:	4a98      	ldr	r2, [pc, #608]	; (8007fa8 <_printf_float+0x2f8>)
 8007d46:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007d4a:	bf8c      	ite	hi
 8007d4c:	4690      	movhi	r8, r2
 8007d4e:	4698      	movls	r8, r3
 8007d50:	2303      	movs	r3, #3
 8007d52:	f02b 0204 	bic.w	r2, fp, #4
 8007d56:	6123      	str	r3, [r4, #16]
 8007d58:	6022      	str	r2, [r4, #0]
 8007d5a:	f04f 0900 	mov.w	r9, #0
 8007d5e:	9700      	str	r7, [sp, #0]
 8007d60:	4633      	mov	r3, r6
 8007d62:	aa0b      	add	r2, sp, #44	; 0x2c
 8007d64:	4621      	mov	r1, r4
 8007d66:	4628      	mov	r0, r5
 8007d68:	f000 f9e2 	bl	8008130 <_printf_common>
 8007d6c:	3001      	adds	r0, #1
 8007d6e:	f040 8093 	bne.w	8007e98 <_printf_float+0x1e8>
 8007d72:	f04f 30ff 	mov.w	r0, #4294967295
 8007d76:	b00d      	add	sp, #52	; 0x34
 8007d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d7c:	6861      	ldr	r1, [r4, #4]
 8007d7e:	1c4b      	adds	r3, r1, #1
 8007d80:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007d84:	d13f      	bne.n	8007e06 <_printf_float+0x156>
 8007d86:	2306      	movs	r3, #6
 8007d88:	6063      	str	r3, [r4, #4]
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	9303      	str	r3, [sp, #12]
 8007d8e:	ab0a      	add	r3, sp, #40	; 0x28
 8007d90:	9302      	str	r3, [sp, #8]
 8007d92:	ab09      	add	r3, sp, #36	; 0x24
 8007d94:	9300      	str	r3, [sp, #0]
 8007d96:	ec49 8b10 	vmov	d0, r8, r9
 8007d9a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007d9e:	6022      	str	r2, [r4, #0]
 8007da0:	f8cd a004 	str.w	sl, [sp, #4]
 8007da4:	6861      	ldr	r1, [r4, #4]
 8007da6:	4628      	mov	r0, r5
 8007da8:	f7ff feec 	bl	8007b84 <__cvt>
 8007dac:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007db0:	2b47      	cmp	r3, #71	; 0x47
 8007db2:	4680      	mov	r8, r0
 8007db4:	d109      	bne.n	8007dca <_printf_float+0x11a>
 8007db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007db8:	1cd8      	adds	r0, r3, #3
 8007dba:	db02      	blt.n	8007dc2 <_printf_float+0x112>
 8007dbc:	6862      	ldr	r2, [r4, #4]
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	dd57      	ble.n	8007e72 <_printf_float+0x1c2>
 8007dc2:	f1aa 0a02 	sub.w	sl, sl, #2
 8007dc6:	fa5f fa8a 	uxtb.w	sl, sl
 8007dca:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007dce:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007dd0:	d834      	bhi.n	8007e3c <_printf_float+0x18c>
 8007dd2:	3901      	subs	r1, #1
 8007dd4:	4652      	mov	r2, sl
 8007dd6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007dda:	9109      	str	r1, [sp, #36]	; 0x24
 8007ddc:	f7ff ff33 	bl	8007c46 <__exponent>
 8007de0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007de2:	1883      	adds	r3, r0, r2
 8007de4:	2a01      	cmp	r2, #1
 8007de6:	4681      	mov	r9, r0
 8007de8:	6123      	str	r3, [r4, #16]
 8007dea:	dc02      	bgt.n	8007df2 <_printf_float+0x142>
 8007dec:	6822      	ldr	r2, [r4, #0]
 8007dee:	07d1      	lsls	r1, r2, #31
 8007df0:	d501      	bpl.n	8007df6 <_printf_float+0x146>
 8007df2:	3301      	adds	r3, #1
 8007df4:	6123      	str	r3, [r4, #16]
 8007df6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d0af      	beq.n	8007d5e <_printf_float+0xae>
 8007dfe:	232d      	movs	r3, #45	; 0x2d
 8007e00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e04:	e7ab      	b.n	8007d5e <_printf_float+0xae>
 8007e06:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007e0a:	d002      	beq.n	8007e12 <_printf_float+0x162>
 8007e0c:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007e10:	d1bb      	bne.n	8007d8a <_printf_float+0xda>
 8007e12:	b189      	cbz	r1, 8007e38 <_printf_float+0x188>
 8007e14:	2300      	movs	r3, #0
 8007e16:	9303      	str	r3, [sp, #12]
 8007e18:	ab0a      	add	r3, sp, #40	; 0x28
 8007e1a:	9302      	str	r3, [sp, #8]
 8007e1c:	ab09      	add	r3, sp, #36	; 0x24
 8007e1e:	9300      	str	r3, [sp, #0]
 8007e20:	ec49 8b10 	vmov	d0, r8, r9
 8007e24:	6022      	str	r2, [r4, #0]
 8007e26:	f8cd a004 	str.w	sl, [sp, #4]
 8007e2a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007e2e:	4628      	mov	r0, r5
 8007e30:	f7ff fea8 	bl	8007b84 <__cvt>
 8007e34:	4680      	mov	r8, r0
 8007e36:	e7be      	b.n	8007db6 <_printf_float+0x106>
 8007e38:	2301      	movs	r3, #1
 8007e3a:	e7a5      	b.n	8007d88 <_printf_float+0xd8>
 8007e3c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007e40:	d119      	bne.n	8007e76 <_printf_float+0x1c6>
 8007e42:	2900      	cmp	r1, #0
 8007e44:	6863      	ldr	r3, [r4, #4]
 8007e46:	dd0c      	ble.n	8007e62 <_printf_float+0x1b2>
 8007e48:	6121      	str	r1, [r4, #16]
 8007e4a:	b913      	cbnz	r3, 8007e52 <_printf_float+0x1a2>
 8007e4c:	6822      	ldr	r2, [r4, #0]
 8007e4e:	07d2      	lsls	r2, r2, #31
 8007e50:	d502      	bpl.n	8007e58 <_printf_float+0x1a8>
 8007e52:	3301      	adds	r3, #1
 8007e54:	440b      	add	r3, r1
 8007e56:	6123      	str	r3, [r4, #16]
 8007e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e5a:	65a3      	str	r3, [r4, #88]	; 0x58
 8007e5c:	f04f 0900 	mov.w	r9, #0
 8007e60:	e7c9      	b.n	8007df6 <_printf_float+0x146>
 8007e62:	b913      	cbnz	r3, 8007e6a <_printf_float+0x1ba>
 8007e64:	6822      	ldr	r2, [r4, #0]
 8007e66:	07d0      	lsls	r0, r2, #31
 8007e68:	d501      	bpl.n	8007e6e <_printf_float+0x1be>
 8007e6a:	3302      	adds	r3, #2
 8007e6c:	e7f3      	b.n	8007e56 <_printf_float+0x1a6>
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e7f1      	b.n	8007e56 <_printf_float+0x1a6>
 8007e72:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	db05      	blt.n	8007e8a <_printf_float+0x1da>
 8007e7e:	6822      	ldr	r2, [r4, #0]
 8007e80:	6123      	str	r3, [r4, #16]
 8007e82:	07d1      	lsls	r1, r2, #31
 8007e84:	d5e8      	bpl.n	8007e58 <_printf_float+0x1a8>
 8007e86:	3301      	adds	r3, #1
 8007e88:	e7e5      	b.n	8007e56 <_printf_float+0x1a6>
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	bfd4      	ite	le
 8007e8e:	f1c3 0302 	rsble	r3, r3, #2
 8007e92:	2301      	movgt	r3, #1
 8007e94:	4413      	add	r3, r2
 8007e96:	e7de      	b.n	8007e56 <_printf_float+0x1a6>
 8007e98:	6823      	ldr	r3, [r4, #0]
 8007e9a:	055a      	lsls	r2, r3, #21
 8007e9c:	d407      	bmi.n	8007eae <_printf_float+0x1fe>
 8007e9e:	6923      	ldr	r3, [r4, #16]
 8007ea0:	4642      	mov	r2, r8
 8007ea2:	4631      	mov	r1, r6
 8007ea4:	4628      	mov	r0, r5
 8007ea6:	47b8      	blx	r7
 8007ea8:	3001      	adds	r0, #1
 8007eaa:	d12b      	bne.n	8007f04 <_printf_float+0x254>
 8007eac:	e761      	b.n	8007d72 <_printf_float+0xc2>
 8007eae:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007eb2:	f240 80e2 	bls.w	800807a <_printf_float+0x3ca>
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	2300      	movs	r3, #0
 8007eba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ebe:	f7f8 fdff 	bl	8000ac0 <__aeabi_dcmpeq>
 8007ec2:	2800      	cmp	r0, #0
 8007ec4:	d03c      	beq.n	8007f40 <_printf_float+0x290>
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	4a38      	ldr	r2, [pc, #224]	; (8007fac <_printf_float+0x2fc>)
 8007eca:	4631      	mov	r1, r6
 8007ecc:	4628      	mov	r0, r5
 8007ece:	47b8      	blx	r7
 8007ed0:	3001      	adds	r0, #1
 8007ed2:	f43f af4e 	beq.w	8007d72 <_printf_float+0xc2>
 8007ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ed8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007eda:	429a      	cmp	r2, r3
 8007edc:	db02      	blt.n	8007ee4 <_printf_float+0x234>
 8007ede:	6823      	ldr	r3, [r4, #0]
 8007ee0:	07d8      	lsls	r0, r3, #31
 8007ee2:	d50f      	bpl.n	8007f04 <_printf_float+0x254>
 8007ee4:	9b05      	ldr	r3, [sp, #20]
 8007ee6:	9a04      	ldr	r2, [sp, #16]
 8007ee8:	4631      	mov	r1, r6
 8007eea:	4628      	mov	r0, r5
 8007eec:	47b8      	blx	r7
 8007eee:	3001      	adds	r0, #1
 8007ef0:	f43f af3f 	beq.w	8007d72 <_printf_float+0xc2>
 8007ef4:	f04f 0800 	mov.w	r8, #0
 8007ef8:	f104 091a 	add.w	r9, r4, #26
 8007efc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007efe:	3b01      	subs	r3, #1
 8007f00:	4598      	cmp	r8, r3
 8007f02:	db12      	blt.n	8007f2a <_printf_float+0x27a>
 8007f04:	6823      	ldr	r3, [r4, #0]
 8007f06:	079b      	lsls	r3, r3, #30
 8007f08:	d509      	bpl.n	8007f1e <_printf_float+0x26e>
 8007f0a:	f04f 0800 	mov.w	r8, #0
 8007f0e:	f104 0919 	add.w	r9, r4, #25
 8007f12:	68e3      	ldr	r3, [r4, #12]
 8007f14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f16:	1a9b      	subs	r3, r3, r2
 8007f18:	4598      	cmp	r8, r3
 8007f1a:	f2c0 80ee 	blt.w	80080fa <_printf_float+0x44a>
 8007f1e:	68e0      	ldr	r0, [r4, #12]
 8007f20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f22:	4298      	cmp	r0, r3
 8007f24:	bfb8      	it	lt
 8007f26:	4618      	movlt	r0, r3
 8007f28:	e725      	b.n	8007d76 <_printf_float+0xc6>
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	464a      	mov	r2, r9
 8007f2e:	4631      	mov	r1, r6
 8007f30:	4628      	mov	r0, r5
 8007f32:	47b8      	blx	r7
 8007f34:	3001      	adds	r0, #1
 8007f36:	f43f af1c 	beq.w	8007d72 <_printf_float+0xc2>
 8007f3a:	f108 0801 	add.w	r8, r8, #1
 8007f3e:	e7dd      	b.n	8007efc <_printf_float+0x24c>
 8007f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	dc34      	bgt.n	8007fb0 <_printf_float+0x300>
 8007f46:	2301      	movs	r3, #1
 8007f48:	4a18      	ldr	r2, [pc, #96]	; (8007fac <_printf_float+0x2fc>)
 8007f4a:	4631      	mov	r1, r6
 8007f4c:	4628      	mov	r0, r5
 8007f4e:	47b8      	blx	r7
 8007f50:	3001      	adds	r0, #1
 8007f52:	f43f af0e 	beq.w	8007d72 <_printf_float+0xc2>
 8007f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f58:	b923      	cbnz	r3, 8007f64 <_printf_float+0x2b4>
 8007f5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f5c:	b913      	cbnz	r3, 8007f64 <_printf_float+0x2b4>
 8007f5e:	6823      	ldr	r3, [r4, #0]
 8007f60:	07d9      	lsls	r1, r3, #31
 8007f62:	d5cf      	bpl.n	8007f04 <_printf_float+0x254>
 8007f64:	9b05      	ldr	r3, [sp, #20]
 8007f66:	9a04      	ldr	r2, [sp, #16]
 8007f68:	4631      	mov	r1, r6
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	47b8      	blx	r7
 8007f6e:	3001      	adds	r0, #1
 8007f70:	f43f aeff 	beq.w	8007d72 <_printf_float+0xc2>
 8007f74:	f04f 0900 	mov.w	r9, #0
 8007f78:	f104 0a1a 	add.w	sl, r4, #26
 8007f7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f7e:	425b      	negs	r3, r3
 8007f80:	4599      	cmp	r9, r3
 8007f82:	db01      	blt.n	8007f88 <_printf_float+0x2d8>
 8007f84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f86:	e78b      	b.n	8007ea0 <_printf_float+0x1f0>
 8007f88:	2301      	movs	r3, #1
 8007f8a:	4652      	mov	r2, sl
 8007f8c:	4631      	mov	r1, r6
 8007f8e:	4628      	mov	r0, r5
 8007f90:	47b8      	blx	r7
 8007f92:	3001      	adds	r0, #1
 8007f94:	f43f aeed 	beq.w	8007d72 <_printf_float+0xc2>
 8007f98:	f109 0901 	add.w	r9, r9, #1
 8007f9c:	e7ee      	b.n	8007f7c <_printf_float+0x2cc>
 8007f9e:	bf00      	nop
 8007fa0:	7fefffff 	.word	0x7fefffff
 8007fa4:	0800a894 	.word	0x0800a894
 8007fa8:	0800a898 	.word	0x0800a898
 8007fac:	0800a8a4 	.word	0x0800a8a4
 8007fb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fb2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	bfa8      	it	ge
 8007fb8:	461a      	movge	r2, r3
 8007fba:	2a00      	cmp	r2, #0
 8007fbc:	4691      	mov	r9, r2
 8007fbe:	dc38      	bgt.n	8008032 <_printf_float+0x382>
 8007fc0:	f104 031a 	add.w	r3, r4, #26
 8007fc4:	f04f 0b00 	mov.w	fp, #0
 8007fc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007fcc:	9306      	str	r3, [sp, #24]
 8007fce:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007fd2:	ebaa 0309 	sub.w	r3, sl, r9
 8007fd6:	459b      	cmp	fp, r3
 8007fd8:	db33      	blt.n	8008042 <_printf_float+0x392>
 8007fda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	db3a      	blt.n	8008058 <_printf_float+0x3a8>
 8007fe2:	6823      	ldr	r3, [r4, #0]
 8007fe4:	07da      	lsls	r2, r3, #31
 8007fe6:	d437      	bmi.n	8008058 <_printf_float+0x3a8>
 8007fe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fea:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007fec:	eba3 020a 	sub.w	r2, r3, sl
 8007ff0:	eba3 0901 	sub.w	r9, r3, r1
 8007ff4:	4591      	cmp	r9, r2
 8007ff6:	bfa8      	it	ge
 8007ff8:	4691      	movge	r9, r2
 8007ffa:	f1b9 0f00 	cmp.w	r9, #0
 8007ffe:	dc33      	bgt.n	8008068 <_printf_float+0x3b8>
 8008000:	f04f 0800 	mov.w	r8, #0
 8008004:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008008:	f104 0a1a 	add.w	sl, r4, #26
 800800c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800800e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008010:	1a9b      	subs	r3, r3, r2
 8008012:	eba3 0309 	sub.w	r3, r3, r9
 8008016:	4598      	cmp	r8, r3
 8008018:	f6bf af74 	bge.w	8007f04 <_printf_float+0x254>
 800801c:	2301      	movs	r3, #1
 800801e:	4652      	mov	r2, sl
 8008020:	4631      	mov	r1, r6
 8008022:	4628      	mov	r0, r5
 8008024:	47b8      	blx	r7
 8008026:	3001      	adds	r0, #1
 8008028:	f43f aea3 	beq.w	8007d72 <_printf_float+0xc2>
 800802c:	f108 0801 	add.w	r8, r8, #1
 8008030:	e7ec      	b.n	800800c <_printf_float+0x35c>
 8008032:	4613      	mov	r3, r2
 8008034:	4631      	mov	r1, r6
 8008036:	4642      	mov	r2, r8
 8008038:	4628      	mov	r0, r5
 800803a:	47b8      	blx	r7
 800803c:	3001      	adds	r0, #1
 800803e:	d1bf      	bne.n	8007fc0 <_printf_float+0x310>
 8008040:	e697      	b.n	8007d72 <_printf_float+0xc2>
 8008042:	2301      	movs	r3, #1
 8008044:	9a06      	ldr	r2, [sp, #24]
 8008046:	4631      	mov	r1, r6
 8008048:	4628      	mov	r0, r5
 800804a:	47b8      	blx	r7
 800804c:	3001      	adds	r0, #1
 800804e:	f43f ae90 	beq.w	8007d72 <_printf_float+0xc2>
 8008052:	f10b 0b01 	add.w	fp, fp, #1
 8008056:	e7ba      	b.n	8007fce <_printf_float+0x31e>
 8008058:	9b05      	ldr	r3, [sp, #20]
 800805a:	9a04      	ldr	r2, [sp, #16]
 800805c:	4631      	mov	r1, r6
 800805e:	4628      	mov	r0, r5
 8008060:	47b8      	blx	r7
 8008062:	3001      	adds	r0, #1
 8008064:	d1c0      	bne.n	8007fe8 <_printf_float+0x338>
 8008066:	e684      	b.n	8007d72 <_printf_float+0xc2>
 8008068:	464b      	mov	r3, r9
 800806a:	eb08 020a 	add.w	r2, r8, sl
 800806e:	4631      	mov	r1, r6
 8008070:	4628      	mov	r0, r5
 8008072:	47b8      	blx	r7
 8008074:	3001      	adds	r0, #1
 8008076:	d1c3      	bne.n	8008000 <_printf_float+0x350>
 8008078:	e67b      	b.n	8007d72 <_printf_float+0xc2>
 800807a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800807c:	2a01      	cmp	r2, #1
 800807e:	dc01      	bgt.n	8008084 <_printf_float+0x3d4>
 8008080:	07db      	lsls	r3, r3, #31
 8008082:	d537      	bpl.n	80080f4 <_printf_float+0x444>
 8008084:	2301      	movs	r3, #1
 8008086:	4642      	mov	r2, r8
 8008088:	4631      	mov	r1, r6
 800808a:	4628      	mov	r0, r5
 800808c:	47b8      	blx	r7
 800808e:	3001      	adds	r0, #1
 8008090:	f43f ae6f 	beq.w	8007d72 <_printf_float+0xc2>
 8008094:	9b05      	ldr	r3, [sp, #20]
 8008096:	9a04      	ldr	r2, [sp, #16]
 8008098:	4631      	mov	r1, r6
 800809a:	4628      	mov	r0, r5
 800809c:	47b8      	blx	r7
 800809e:	3001      	adds	r0, #1
 80080a0:	f43f ae67 	beq.w	8007d72 <_printf_float+0xc2>
 80080a4:	2200      	movs	r2, #0
 80080a6:	2300      	movs	r3, #0
 80080a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80080ac:	f7f8 fd08 	bl	8000ac0 <__aeabi_dcmpeq>
 80080b0:	b158      	cbz	r0, 80080ca <_printf_float+0x41a>
 80080b2:	f04f 0800 	mov.w	r8, #0
 80080b6:	f104 0a1a 	add.w	sl, r4, #26
 80080ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080bc:	3b01      	subs	r3, #1
 80080be:	4598      	cmp	r8, r3
 80080c0:	db0d      	blt.n	80080de <_printf_float+0x42e>
 80080c2:	464b      	mov	r3, r9
 80080c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80080c8:	e6eb      	b.n	8007ea2 <_printf_float+0x1f2>
 80080ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080cc:	f108 0201 	add.w	r2, r8, #1
 80080d0:	3b01      	subs	r3, #1
 80080d2:	4631      	mov	r1, r6
 80080d4:	4628      	mov	r0, r5
 80080d6:	47b8      	blx	r7
 80080d8:	3001      	adds	r0, #1
 80080da:	d1f2      	bne.n	80080c2 <_printf_float+0x412>
 80080dc:	e649      	b.n	8007d72 <_printf_float+0xc2>
 80080de:	2301      	movs	r3, #1
 80080e0:	4652      	mov	r2, sl
 80080e2:	4631      	mov	r1, r6
 80080e4:	4628      	mov	r0, r5
 80080e6:	47b8      	blx	r7
 80080e8:	3001      	adds	r0, #1
 80080ea:	f43f ae42 	beq.w	8007d72 <_printf_float+0xc2>
 80080ee:	f108 0801 	add.w	r8, r8, #1
 80080f2:	e7e2      	b.n	80080ba <_printf_float+0x40a>
 80080f4:	2301      	movs	r3, #1
 80080f6:	4642      	mov	r2, r8
 80080f8:	e7eb      	b.n	80080d2 <_printf_float+0x422>
 80080fa:	2301      	movs	r3, #1
 80080fc:	464a      	mov	r2, r9
 80080fe:	4631      	mov	r1, r6
 8008100:	4628      	mov	r0, r5
 8008102:	47b8      	blx	r7
 8008104:	3001      	adds	r0, #1
 8008106:	f43f ae34 	beq.w	8007d72 <_printf_float+0xc2>
 800810a:	f108 0801 	add.w	r8, r8, #1
 800810e:	e700      	b.n	8007f12 <_printf_float+0x262>
 8008110:	4642      	mov	r2, r8
 8008112:	464b      	mov	r3, r9
 8008114:	4640      	mov	r0, r8
 8008116:	4649      	mov	r1, r9
 8008118:	f7f8 fd04 	bl	8000b24 <__aeabi_dcmpun>
 800811c:	2800      	cmp	r0, #0
 800811e:	f43f ae2d 	beq.w	8007d7c <_printf_float+0xcc>
 8008122:	4b01      	ldr	r3, [pc, #4]	; (8008128 <_printf_float+0x478>)
 8008124:	4a01      	ldr	r2, [pc, #4]	; (800812c <_printf_float+0x47c>)
 8008126:	e60e      	b.n	8007d46 <_printf_float+0x96>
 8008128:	0800a89c 	.word	0x0800a89c
 800812c:	0800a8a0 	.word	0x0800a8a0

08008130 <_printf_common>:
 8008130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008134:	4691      	mov	r9, r2
 8008136:	461f      	mov	r7, r3
 8008138:	688a      	ldr	r2, [r1, #8]
 800813a:	690b      	ldr	r3, [r1, #16]
 800813c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008140:	4293      	cmp	r3, r2
 8008142:	bfb8      	it	lt
 8008144:	4613      	movlt	r3, r2
 8008146:	f8c9 3000 	str.w	r3, [r9]
 800814a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800814e:	4606      	mov	r6, r0
 8008150:	460c      	mov	r4, r1
 8008152:	b112      	cbz	r2, 800815a <_printf_common+0x2a>
 8008154:	3301      	adds	r3, #1
 8008156:	f8c9 3000 	str.w	r3, [r9]
 800815a:	6823      	ldr	r3, [r4, #0]
 800815c:	0699      	lsls	r1, r3, #26
 800815e:	bf42      	ittt	mi
 8008160:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008164:	3302      	addmi	r3, #2
 8008166:	f8c9 3000 	strmi.w	r3, [r9]
 800816a:	6825      	ldr	r5, [r4, #0]
 800816c:	f015 0506 	ands.w	r5, r5, #6
 8008170:	d107      	bne.n	8008182 <_printf_common+0x52>
 8008172:	f104 0a19 	add.w	sl, r4, #25
 8008176:	68e3      	ldr	r3, [r4, #12]
 8008178:	f8d9 2000 	ldr.w	r2, [r9]
 800817c:	1a9b      	subs	r3, r3, r2
 800817e:	429d      	cmp	r5, r3
 8008180:	db29      	blt.n	80081d6 <_printf_common+0xa6>
 8008182:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008186:	6822      	ldr	r2, [r4, #0]
 8008188:	3300      	adds	r3, #0
 800818a:	bf18      	it	ne
 800818c:	2301      	movne	r3, #1
 800818e:	0692      	lsls	r2, r2, #26
 8008190:	d42e      	bmi.n	80081f0 <_printf_common+0xc0>
 8008192:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008196:	4639      	mov	r1, r7
 8008198:	4630      	mov	r0, r6
 800819a:	47c0      	blx	r8
 800819c:	3001      	adds	r0, #1
 800819e:	d021      	beq.n	80081e4 <_printf_common+0xb4>
 80081a0:	6823      	ldr	r3, [r4, #0]
 80081a2:	68e5      	ldr	r5, [r4, #12]
 80081a4:	f8d9 2000 	ldr.w	r2, [r9]
 80081a8:	f003 0306 	and.w	r3, r3, #6
 80081ac:	2b04      	cmp	r3, #4
 80081ae:	bf08      	it	eq
 80081b0:	1aad      	subeq	r5, r5, r2
 80081b2:	68a3      	ldr	r3, [r4, #8]
 80081b4:	6922      	ldr	r2, [r4, #16]
 80081b6:	bf0c      	ite	eq
 80081b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80081bc:	2500      	movne	r5, #0
 80081be:	4293      	cmp	r3, r2
 80081c0:	bfc4      	itt	gt
 80081c2:	1a9b      	subgt	r3, r3, r2
 80081c4:	18ed      	addgt	r5, r5, r3
 80081c6:	f04f 0900 	mov.w	r9, #0
 80081ca:	341a      	adds	r4, #26
 80081cc:	454d      	cmp	r5, r9
 80081ce:	d11b      	bne.n	8008208 <_printf_common+0xd8>
 80081d0:	2000      	movs	r0, #0
 80081d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081d6:	2301      	movs	r3, #1
 80081d8:	4652      	mov	r2, sl
 80081da:	4639      	mov	r1, r7
 80081dc:	4630      	mov	r0, r6
 80081de:	47c0      	blx	r8
 80081e0:	3001      	adds	r0, #1
 80081e2:	d103      	bne.n	80081ec <_printf_common+0xbc>
 80081e4:	f04f 30ff 	mov.w	r0, #4294967295
 80081e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081ec:	3501      	adds	r5, #1
 80081ee:	e7c2      	b.n	8008176 <_printf_common+0x46>
 80081f0:	18e1      	adds	r1, r4, r3
 80081f2:	1c5a      	adds	r2, r3, #1
 80081f4:	2030      	movs	r0, #48	; 0x30
 80081f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80081fa:	4422      	add	r2, r4
 80081fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008200:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008204:	3302      	adds	r3, #2
 8008206:	e7c4      	b.n	8008192 <_printf_common+0x62>
 8008208:	2301      	movs	r3, #1
 800820a:	4622      	mov	r2, r4
 800820c:	4639      	mov	r1, r7
 800820e:	4630      	mov	r0, r6
 8008210:	47c0      	blx	r8
 8008212:	3001      	adds	r0, #1
 8008214:	d0e6      	beq.n	80081e4 <_printf_common+0xb4>
 8008216:	f109 0901 	add.w	r9, r9, #1
 800821a:	e7d7      	b.n	80081cc <_printf_common+0x9c>

0800821c <_printf_i>:
 800821c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008220:	4617      	mov	r7, r2
 8008222:	7e0a      	ldrb	r2, [r1, #24]
 8008224:	b085      	sub	sp, #20
 8008226:	2a6e      	cmp	r2, #110	; 0x6e
 8008228:	4698      	mov	r8, r3
 800822a:	4606      	mov	r6, r0
 800822c:	460c      	mov	r4, r1
 800822e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008230:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8008234:	f000 80bc 	beq.w	80083b0 <_printf_i+0x194>
 8008238:	d81a      	bhi.n	8008270 <_printf_i+0x54>
 800823a:	2a63      	cmp	r2, #99	; 0x63
 800823c:	d02e      	beq.n	800829c <_printf_i+0x80>
 800823e:	d80a      	bhi.n	8008256 <_printf_i+0x3a>
 8008240:	2a00      	cmp	r2, #0
 8008242:	f000 80c8 	beq.w	80083d6 <_printf_i+0x1ba>
 8008246:	2a58      	cmp	r2, #88	; 0x58
 8008248:	f000 808a 	beq.w	8008360 <_printf_i+0x144>
 800824c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008250:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8008254:	e02a      	b.n	80082ac <_printf_i+0x90>
 8008256:	2a64      	cmp	r2, #100	; 0x64
 8008258:	d001      	beq.n	800825e <_printf_i+0x42>
 800825a:	2a69      	cmp	r2, #105	; 0x69
 800825c:	d1f6      	bne.n	800824c <_printf_i+0x30>
 800825e:	6821      	ldr	r1, [r4, #0]
 8008260:	681a      	ldr	r2, [r3, #0]
 8008262:	f011 0f80 	tst.w	r1, #128	; 0x80
 8008266:	d023      	beq.n	80082b0 <_printf_i+0x94>
 8008268:	1d11      	adds	r1, r2, #4
 800826a:	6019      	str	r1, [r3, #0]
 800826c:	6813      	ldr	r3, [r2, #0]
 800826e:	e027      	b.n	80082c0 <_printf_i+0xa4>
 8008270:	2a73      	cmp	r2, #115	; 0x73
 8008272:	f000 80b4 	beq.w	80083de <_printf_i+0x1c2>
 8008276:	d808      	bhi.n	800828a <_printf_i+0x6e>
 8008278:	2a6f      	cmp	r2, #111	; 0x6f
 800827a:	d02a      	beq.n	80082d2 <_printf_i+0xb6>
 800827c:	2a70      	cmp	r2, #112	; 0x70
 800827e:	d1e5      	bne.n	800824c <_printf_i+0x30>
 8008280:	680a      	ldr	r2, [r1, #0]
 8008282:	f042 0220 	orr.w	r2, r2, #32
 8008286:	600a      	str	r2, [r1, #0]
 8008288:	e003      	b.n	8008292 <_printf_i+0x76>
 800828a:	2a75      	cmp	r2, #117	; 0x75
 800828c:	d021      	beq.n	80082d2 <_printf_i+0xb6>
 800828e:	2a78      	cmp	r2, #120	; 0x78
 8008290:	d1dc      	bne.n	800824c <_printf_i+0x30>
 8008292:	2278      	movs	r2, #120	; 0x78
 8008294:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8008298:	496e      	ldr	r1, [pc, #440]	; (8008454 <_printf_i+0x238>)
 800829a:	e064      	b.n	8008366 <_printf_i+0x14a>
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80082a2:	1d11      	adds	r1, r2, #4
 80082a4:	6019      	str	r1, [r3, #0]
 80082a6:	6813      	ldr	r3, [r2, #0]
 80082a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80082ac:	2301      	movs	r3, #1
 80082ae:	e0a3      	b.n	80083f8 <_printf_i+0x1dc>
 80082b0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80082b4:	f102 0104 	add.w	r1, r2, #4
 80082b8:	6019      	str	r1, [r3, #0]
 80082ba:	d0d7      	beq.n	800826c <_printf_i+0x50>
 80082bc:	f9b2 3000 	ldrsh.w	r3, [r2]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	da03      	bge.n	80082cc <_printf_i+0xb0>
 80082c4:	222d      	movs	r2, #45	; 0x2d
 80082c6:	425b      	negs	r3, r3
 80082c8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80082cc:	4962      	ldr	r1, [pc, #392]	; (8008458 <_printf_i+0x23c>)
 80082ce:	220a      	movs	r2, #10
 80082d0:	e017      	b.n	8008302 <_printf_i+0xe6>
 80082d2:	6820      	ldr	r0, [r4, #0]
 80082d4:	6819      	ldr	r1, [r3, #0]
 80082d6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80082da:	d003      	beq.n	80082e4 <_printf_i+0xc8>
 80082dc:	1d08      	adds	r0, r1, #4
 80082de:	6018      	str	r0, [r3, #0]
 80082e0:	680b      	ldr	r3, [r1, #0]
 80082e2:	e006      	b.n	80082f2 <_printf_i+0xd6>
 80082e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80082e8:	f101 0004 	add.w	r0, r1, #4
 80082ec:	6018      	str	r0, [r3, #0]
 80082ee:	d0f7      	beq.n	80082e0 <_printf_i+0xc4>
 80082f0:	880b      	ldrh	r3, [r1, #0]
 80082f2:	4959      	ldr	r1, [pc, #356]	; (8008458 <_printf_i+0x23c>)
 80082f4:	2a6f      	cmp	r2, #111	; 0x6f
 80082f6:	bf14      	ite	ne
 80082f8:	220a      	movne	r2, #10
 80082fa:	2208      	moveq	r2, #8
 80082fc:	2000      	movs	r0, #0
 80082fe:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8008302:	6865      	ldr	r5, [r4, #4]
 8008304:	60a5      	str	r5, [r4, #8]
 8008306:	2d00      	cmp	r5, #0
 8008308:	f2c0 809c 	blt.w	8008444 <_printf_i+0x228>
 800830c:	6820      	ldr	r0, [r4, #0]
 800830e:	f020 0004 	bic.w	r0, r0, #4
 8008312:	6020      	str	r0, [r4, #0]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d13f      	bne.n	8008398 <_printf_i+0x17c>
 8008318:	2d00      	cmp	r5, #0
 800831a:	f040 8095 	bne.w	8008448 <_printf_i+0x22c>
 800831e:	4675      	mov	r5, lr
 8008320:	2a08      	cmp	r2, #8
 8008322:	d10b      	bne.n	800833c <_printf_i+0x120>
 8008324:	6823      	ldr	r3, [r4, #0]
 8008326:	07da      	lsls	r2, r3, #31
 8008328:	d508      	bpl.n	800833c <_printf_i+0x120>
 800832a:	6923      	ldr	r3, [r4, #16]
 800832c:	6862      	ldr	r2, [r4, #4]
 800832e:	429a      	cmp	r2, r3
 8008330:	bfde      	ittt	le
 8008332:	2330      	movle	r3, #48	; 0x30
 8008334:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008338:	f105 35ff 	addle.w	r5, r5, #4294967295
 800833c:	ebae 0305 	sub.w	r3, lr, r5
 8008340:	6123      	str	r3, [r4, #16]
 8008342:	f8cd 8000 	str.w	r8, [sp]
 8008346:	463b      	mov	r3, r7
 8008348:	aa03      	add	r2, sp, #12
 800834a:	4621      	mov	r1, r4
 800834c:	4630      	mov	r0, r6
 800834e:	f7ff feef 	bl	8008130 <_printf_common>
 8008352:	3001      	adds	r0, #1
 8008354:	d155      	bne.n	8008402 <_printf_i+0x1e6>
 8008356:	f04f 30ff 	mov.w	r0, #4294967295
 800835a:	b005      	add	sp, #20
 800835c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008360:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8008364:	493c      	ldr	r1, [pc, #240]	; (8008458 <_printf_i+0x23c>)
 8008366:	6822      	ldr	r2, [r4, #0]
 8008368:	6818      	ldr	r0, [r3, #0]
 800836a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800836e:	f100 0504 	add.w	r5, r0, #4
 8008372:	601d      	str	r5, [r3, #0]
 8008374:	d001      	beq.n	800837a <_printf_i+0x15e>
 8008376:	6803      	ldr	r3, [r0, #0]
 8008378:	e002      	b.n	8008380 <_printf_i+0x164>
 800837a:	0655      	lsls	r5, r2, #25
 800837c:	d5fb      	bpl.n	8008376 <_printf_i+0x15a>
 800837e:	8803      	ldrh	r3, [r0, #0]
 8008380:	07d0      	lsls	r0, r2, #31
 8008382:	bf44      	itt	mi
 8008384:	f042 0220 	orrmi.w	r2, r2, #32
 8008388:	6022      	strmi	r2, [r4, #0]
 800838a:	b91b      	cbnz	r3, 8008394 <_printf_i+0x178>
 800838c:	6822      	ldr	r2, [r4, #0]
 800838e:	f022 0220 	bic.w	r2, r2, #32
 8008392:	6022      	str	r2, [r4, #0]
 8008394:	2210      	movs	r2, #16
 8008396:	e7b1      	b.n	80082fc <_printf_i+0xe0>
 8008398:	4675      	mov	r5, lr
 800839a:	fbb3 f0f2 	udiv	r0, r3, r2
 800839e:	fb02 3310 	mls	r3, r2, r0, r3
 80083a2:	5ccb      	ldrb	r3, [r1, r3]
 80083a4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80083a8:	4603      	mov	r3, r0
 80083aa:	2800      	cmp	r0, #0
 80083ac:	d1f5      	bne.n	800839a <_printf_i+0x17e>
 80083ae:	e7b7      	b.n	8008320 <_printf_i+0x104>
 80083b0:	6808      	ldr	r0, [r1, #0]
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	6949      	ldr	r1, [r1, #20]
 80083b6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80083ba:	d004      	beq.n	80083c6 <_printf_i+0x1aa>
 80083bc:	1d10      	adds	r0, r2, #4
 80083be:	6018      	str	r0, [r3, #0]
 80083c0:	6813      	ldr	r3, [r2, #0]
 80083c2:	6019      	str	r1, [r3, #0]
 80083c4:	e007      	b.n	80083d6 <_printf_i+0x1ba>
 80083c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80083ca:	f102 0004 	add.w	r0, r2, #4
 80083ce:	6018      	str	r0, [r3, #0]
 80083d0:	6813      	ldr	r3, [r2, #0]
 80083d2:	d0f6      	beq.n	80083c2 <_printf_i+0x1a6>
 80083d4:	8019      	strh	r1, [r3, #0]
 80083d6:	2300      	movs	r3, #0
 80083d8:	6123      	str	r3, [r4, #16]
 80083da:	4675      	mov	r5, lr
 80083dc:	e7b1      	b.n	8008342 <_printf_i+0x126>
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	1d11      	adds	r1, r2, #4
 80083e2:	6019      	str	r1, [r3, #0]
 80083e4:	6815      	ldr	r5, [r2, #0]
 80083e6:	6862      	ldr	r2, [r4, #4]
 80083e8:	2100      	movs	r1, #0
 80083ea:	4628      	mov	r0, r5
 80083ec:	f7f7 fef8 	bl	80001e0 <memchr>
 80083f0:	b108      	cbz	r0, 80083f6 <_printf_i+0x1da>
 80083f2:	1b40      	subs	r0, r0, r5
 80083f4:	6060      	str	r0, [r4, #4]
 80083f6:	6863      	ldr	r3, [r4, #4]
 80083f8:	6123      	str	r3, [r4, #16]
 80083fa:	2300      	movs	r3, #0
 80083fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008400:	e79f      	b.n	8008342 <_printf_i+0x126>
 8008402:	6923      	ldr	r3, [r4, #16]
 8008404:	462a      	mov	r2, r5
 8008406:	4639      	mov	r1, r7
 8008408:	4630      	mov	r0, r6
 800840a:	47c0      	blx	r8
 800840c:	3001      	adds	r0, #1
 800840e:	d0a2      	beq.n	8008356 <_printf_i+0x13a>
 8008410:	6823      	ldr	r3, [r4, #0]
 8008412:	079b      	lsls	r3, r3, #30
 8008414:	d507      	bpl.n	8008426 <_printf_i+0x20a>
 8008416:	2500      	movs	r5, #0
 8008418:	f104 0919 	add.w	r9, r4, #25
 800841c:	68e3      	ldr	r3, [r4, #12]
 800841e:	9a03      	ldr	r2, [sp, #12]
 8008420:	1a9b      	subs	r3, r3, r2
 8008422:	429d      	cmp	r5, r3
 8008424:	db05      	blt.n	8008432 <_printf_i+0x216>
 8008426:	68e0      	ldr	r0, [r4, #12]
 8008428:	9b03      	ldr	r3, [sp, #12]
 800842a:	4298      	cmp	r0, r3
 800842c:	bfb8      	it	lt
 800842e:	4618      	movlt	r0, r3
 8008430:	e793      	b.n	800835a <_printf_i+0x13e>
 8008432:	2301      	movs	r3, #1
 8008434:	464a      	mov	r2, r9
 8008436:	4639      	mov	r1, r7
 8008438:	4630      	mov	r0, r6
 800843a:	47c0      	blx	r8
 800843c:	3001      	adds	r0, #1
 800843e:	d08a      	beq.n	8008356 <_printf_i+0x13a>
 8008440:	3501      	adds	r5, #1
 8008442:	e7eb      	b.n	800841c <_printf_i+0x200>
 8008444:	2b00      	cmp	r3, #0
 8008446:	d1a7      	bne.n	8008398 <_printf_i+0x17c>
 8008448:	780b      	ldrb	r3, [r1, #0]
 800844a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800844e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008452:	e765      	b.n	8008320 <_printf_i+0x104>
 8008454:	0800a8b7 	.word	0x0800a8b7
 8008458:	0800a8a6 	.word	0x0800a8a6

0800845c <iprintf>:
 800845c:	b40f      	push	{r0, r1, r2, r3}
 800845e:	4b0a      	ldr	r3, [pc, #40]	; (8008488 <iprintf+0x2c>)
 8008460:	b513      	push	{r0, r1, r4, lr}
 8008462:	681c      	ldr	r4, [r3, #0]
 8008464:	b124      	cbz	r4, 8008470 <iprintf+0x14>
 8008466:	69a3      	ldr	r3, [r4, #24]
 8008468:	b913      	cbnz	r3, 8008470 <iprintf+0x14>
 800846a:	4620      	mov	r0, r4
 800846c:	f001 f880 	bl	8009570 <__sinit>
 8008470:	ab05      	add	r3, sp, #20
 8008472:	9a04      	ldr	r2, [sp, #16]
 8008474:	68a1      	ldr	r1, [r4, #8]
 8008476:	9301      	str	r3, [sp, #4]
 8008478:	4620      	mov	r0, r4
 800847a:	f001 fd3d 	bl	8009ef8 <_vfiprintf_r>
 800847e:	b002      	add	sp, #8
 8008480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008484:	b004      	add	sp, #16
 8008486:	4770      	bx	lr
 8008488:	20000008 	.word	0x20000008

0800848c <_puts_r>:
 800848c:	b570      	push	{r4, r5, r6, lr}
 800848e:	460e      	mov	r6, r1
 8008490:	4605      	mov	r5, r0
 8008492:	b118      	cbz	r0, 800849c <_puts_r+0x10>
 8008494:	6983      	ldr	r3, [r0, #24]
 8008496:	b90b      	cbnz	r3, 800849c <_puts_r+0x10>
 8008498:	f001 f86a 	bl	8009570 <__sinit>
 800849c:	69ab      	ldr	r3, [r5, #24]
 800849e:	68ac      	ldr	r4, [r5, #8]
 80084a0:	b913      	cbnz	r3, 80084a8 <_puts_r+0x1c>
 80084a2:	4628      	mov	r0, r5
 80084a4:	f001 f864 	bl	8009570 <__sinit>
 80084a8:	4b23      	ldr	r3, [pc, #140]	; (8008538 <_puts_r+0xac>)
 80084aa:	429c      	cmp	r4, r3
 80084ac:	d117      	bne.n	80084de <_puts_r+0x52>
 80084ae:	686c      	ldr	r4, [r5, #4]
 80084b0:	89a3      	ldrh	r3, [r4, #12]
 80084b2:	071b      	lsls	r3, r3, #28
 80084b4:	d51d      	bpl.n	80084f2 <_puts_r+0x66>
 80084b6:	6923      	ldr	r3, [r4, #16]
 80084b8:	b1db      	cbz	r3, 80084f2 <_puts_r+0x66>
 80084ba:	3e01      	subs	r6, #1
 80084bc:	68a3      	ldr	r3, [r4, #8]
 80084be:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80084c2:	3b01      	subs	r3, #1
 80084c4:	60a3      	str	r3, [r4, #8]
 80084c6:	b9e9      	cbnz	r1, 8008504 <_puts_r+0x78>
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	da2e      	bge.n	800852a <_puts_r+0x9e>
 80084cc:	4622      	mov	r2, r4
 80084ce:	210a      	movs	r1, #10
 80084d0:	4628      	mov	r0, r5
 80084d2:	f000 f83f 	bl	8008554 <__swbuf_r>
 80084d6:	3001      	adds	r0, #1
 80084d8:	d011      	beq.n	80084fe <_puts_r+0x72>
 80084da:	200a      	movs	r0, #10
 80084dc:	bd70      	pop	{r4, r5, r6, pc}
 80084de:	4b17      	ldr	r3, [pc, #92]	; (800853c <_puts_r+0xb0>)
 80084e0:	429c      	cmp	r4, r3
 80084e2:	d101      	bne.n	80084e8 <_puts_r+0x5c>
 80084e4:	68ac      	ldr	r4, [r5, #8]
 80084e6:	e7e3      	b.n	80084b0 <_puts_r+0x24>
 80084e8:	4b15      	ldr	r3, [pc, #84]	; (8008540 <_puts_r+0xb4>)
 80084ea:	429c      	cmp	r4, r3
 80084ec:	bf08      	it	eq
 80084ee:	68ec      	ldreq	r4, [r5, #12]
 80084f0:	e7de      	b.n	80084b0 <_puts_r+0x24>
 80084f2:	4621      	mov	r1, r4
 80084f4:	4628      	mov	r0, r5
 80084f6:	f000 f87f 	bl	80085f8 <__swsetup_r>
 80084fa:	2800      	cmp	r0, #0
 80084fc:	d0dd      	beq.n	80084ba <_puts_r+0x2e>
 80084fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008502:	bd70      	pop	{r4, r5, r6, pc}
 8008504:	2b00      	cmp	r3, #0
 8008506:	da04      	bge.n	8008512 <_puts_r+0x86>
 8008508:	69a2      	ldr	r2, [r4, #24]
 800850a:	4293      	cmp	r3, r2
 800850c:	db06      	blt.n	800851c <_puts_r+0x90>
 800850e:	290a      	cmp	r1, #10
 8008510:	d004      	beq.n	800851c <_puts_r+0x90>
 8008512:	6823      	ldr	r3, [r4, #0]
 8008514:	1c5a      	adds	r2, r3, #1
 8008516:	6022      	str	r2, [r4, #0]
 8008518:	7019      	strb	r1, [r3, #0]
 800851a:	e7cf      	b.n	80084bc <_puts_r+0x30>
 800851c:	4622      	mov	r2, r4
 800851e:	4628      	mov	r0, r5
 8008520:	f000 f818 	bl	8008554 <__swbuf_r>
 8008524:	3001      	adds	r0, #1
 8008526:	d1c9      	bne.n	80084bc <_puts_r+0x30>
 8008528:	e7e9      	b.n	80084fe <_puts_r+0x72>
 800852a:	6823      	ldr	r3, [r4, #0]
 800852c:	200a      	movs	r0, #10
 800852e:	1c5a      	adds	r2, r3, #1
 8008530:	6022      	str	r2, [r4, #0]
 8008532:	7018      	strb	r0, [r3, #0]
 8008534:	bd70      	pop	{r4, r5, r6, pc}
 8008536:	bf00      	nop
 8008538:	0800a8f8 	.word	0x0800a8f8
 800853c:	0800a918 	.word	0x0800a918
 8008540:	0800a8d8 	.word	0x0800a8d8

08008544 <puts>:
 8008544:	4b02      	ldr	r3, [pc, #8]	; (8008550 <puts+0xc>)
 8008546:	4601      	mov	r1, r0
 8008548:	6818      	ldr	r0, [r3, #0]
 800854a:	f7ff bf9f 	b.w	800848c <_puts_r>
 800854e:	bf00      	nop
 8008550:	20000008 	.word	0x20000008

08008554 <__swbuf_r>:
 8008554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008556:	460e      	mov	r6, r1
 8008558:	4614      	mov	r4, r2
 800855a:	4605      	mov	r5, r0
 800855c:	b118      	cbz	r0, 8008566 <__swbuf_r+0x12>
 800855e:	6983      	ldr	r3, [r0, #24]
 8008560:	b90b      	cbnz	r3, 8008566 <__swbuf_r+0x12>
 8008562:	f001 f805 	bl	8009570 <__sinit>
 8008566:	4b21      	ldr	r3, [pc, #132]	; (80085ec <__swbuf_r+0x98>)
 8008568:	429c      	cmp	r4, r3
 800856a:	d12a      	bne.n	80085c2 <__swbuf_r+0x6e>
 800856c:	686c      	ldr	r4, [r5, #4]
 800856e:	69a3      	ldr	r3, [r4, #24]
 8008570:	60a3      	str	r3, [r4, #8]
 8008572:	89a3      	ldrh	r3, [r4, #12]
 8008574:	071a      	lsls	r2, r3, #28
 8008576:	d52e      	bpl.n	80085d6 <__swbuf_r+0x82>
 8008578:	6923      	ldr	r3, [r4, #16]
 800857a:	b363      	cbz	r3, 80085d6 <__swbuf_r+0x82>
 800857c:	6923      	ldr	r3, [r4, #16]
 800857e:	6820      	ldr	r0, [r4, #0]
 8008580:	1ac0      	subs	r0, r0, r3
 8008582:	6963      	ldr	r3, [r4, #20]
 8008584:	b2f6      	uxtb	r6, r6
 8008586:	4298      	cmp	r0, r3
 8008588:	4637      	mov	r7, r6
 800858a:	db04      	blt.n	8008596 <__swbuf_r+0x42>
 800858c:	4621      	mov	r1, r4
 800858e:	4628      	mov	r0, r5
 8008590:	f000 ff84 	bl	800949c <_fflush_r>
 8008594:	bb28      	cbnz	r0, 80085e2 <__swbuf_r+0x8e>
 8008596:	68a3      	ldr	r3, [r4, #8]
 8008598:	3b01      	subs	r3, #1
 800859a:	60a3      	str	r3, [r4, #8]
 800859c:	6823      	ldr	r3, [r4, #0]
 800859e:	1c5a      	adds	r2, r3, #1
 80085a0:	6022      	str	r2, [r4, #0]
 80085a2:	701e      	strb	r6, [r3, #0]
 80085a4:	6963      	ldr	r3, [r4, #20]
 80085a6:	3001      	adds	r0, #1
 80085a8:	4298      	cmp	r0, r3
 80085aa:	d004      	beq.n	80085b6 <__swbuf_r+0x62>
 80085ac:	89a3      	ldrh	r3, [r4, #12]
 80085ae:	07db      	lsls	r3, r3, #31
 80085b0:	d519      	bpl.n	80085e6 <__swbuf_r+0x92>
 80085b2:	2e0a      	cmp	r6, #10
 80085b4:	d117      	bne.n	80085e6 <__swbuf_r+0x92>
 80085b6:	4621      	mov	r1, r4
 80085b8:	4628      	mov	r0, r5
 80085ba:	f000 ff6f 	bl	800949c <_fflush_r>
 80085be:	b190      	cbz	r0, 80085e6 <__swbuf_r+0x92>
 80085c0:	e00f      	b.n	80085e2 <__swbuf_r+0x8e>
 80085c2:	4b0b      	ldr	r3, [pc, #44]	; (80085f0 <__swbuf_r+0x9c>)
 80085c4:	429c      	cmp	r4, r3
 80085c6:	d101      	bne.n	80085cc <__swbuf_r+0x78>
 80085c8:	68ac      	ldr	r4, [r5, #8]
 80085ca:	e7d0      	b.n	800856e <__swbuf_r+0x1a>
 80085cc:	4b09      	ldr	r3, [pc, #36]	; (80085f4 <__swbuf_r+0xa0>)
 80085ce:	429c      	cmp	r4, r3
 80085d0:	bf08      	it	eq
 80085d2:	68ec      	ldreq	r4, [r5, #12]
 80085d4:	e7cb      	b.n	800856e <__swbuf_r+0x1a>
 80085d6:	4621      	mov	r1, r4
 80085d8:	4628      	mov	r0, r5
 80085da:	f000 f80d 	bl	80085f8 <__swsetup_r>
 80085de:	2800      	cmp	r0, #0
 80085e0:	d0cc      	beq.n	800857c <__swbuf_r+0x28>
 80085e2:	f04f 37ff 	mov.w	r7, #4294967295
 80085e6:	4638      	mov	r0, r7
 80085e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085ea:	bf00      	nop
 80085ec:	0800a8f8 	.word	0x0800a8f8
 80085f0:	0800a918 	.word	0x0800a918
 80085f4:	0800a8d8 	.word	0x0800a8d8

080085f8 <__swsetup_r>:
 80085f8:	4b32      	ldr	r3, [pc, #200]	; (80086c4 <__swsetup_r+0xcc>)
 80085fa:	b570      	push	{r4, r5, r6, lr}
 80085fc:	681d      	ldr	r5, [r3, #0]
 80085fe:	4606      	mov	r6, r0
 8008600:	460c      	mov	r4, r1
 8008602:	b125      	cbz	r5, 800860e <__swsetup_r+0x16>
 8008604:	69ab      	ldr	r3, [r5, #24]
 8008606:	b913      	cbnz	r3, 800860e <__swsetup_r+0x16>
 8008608:	4628      	mov	r0, r5
 800860a:	f000 ffb1 	bl	8009570 <__sinit>
 800860e:	4b2e      	ldr	r3, [pc, #184]	; (80086c8 <__swsetup_r+0xd0>)
 8008610:	429c      	cmp	r4, r3
 8008612:	d10f      	bne.n	8008634 <__swsetup_r+0x3c>
 8008614:	686c      	ldr	r4, [r5, #4]
 8008616:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800861a:	b29a      	uxth	r2, r3
 800861c:	0715      	lsls	r5, r2, #28
 800861e:	d42c      	bmi.n	800867a <__swsetup_r+0x82>
 8008620:	06d0      	lsls	r0, r2, #27
 8008622:	d411      	bmi.n	8008648 <__swsetup_r+0x50>
 8008624:	2209      	movs	r2, #9
 8008626:	6032      	str	r2, [r6, #0]
 8008628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800862c:	81a3      	strh	r3, [r4, #12]
 800862e:	f04f 30ff 	mov.w	r0, #4294967295
 8008632:	bd70      	pop	{r4, r5, r6, pc}
 8008634:	4b25      	ldr	r3, [pc, #148]	; (80086cc <__swsetup_r+0xd4>)
 8008636:	429c      	cmp	r4, r3
 8008638:	d101      	bne.n	800863e <__swsetup_r+0x46>
 800863a:	68ac      	ldr	r4, [r5, #8]
 800863c:	e7eb      	b.n	8008616 <__swsetup_r+0x1e>
 800863e:	4b24      	ldr	r3, [pc, #144]	; (80086d0 <__swsetup_r+0xd8>)
 8008640:	429c      	cmp	r4, r3
 8008642:	bf08      	it	eq
 8008644:	68ec      	ldreq	r4, [r5, #12]
 8008646:	e7e6      	b.n	8008616 <__swsetup_r+0x1e>
 8008648:	0751      	lsls	r1, r2, #29
 800864a:	d512      	bpl.n	8008672 <__swsetup_r+0x7a>
 800864c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800864e:	b141      	cbz	r1, 8008662 <__swsetup_r+0x6a>
 8008650:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008654:	4299      	cmp	r1, r3
 8008656:	d002      	beq.n	800865e <__swsetup_r+0x66>
 8008658:	4630      	mov	r0, r6
 800865a:	f001 fb77 	bl	8009d4c <_free_r>
 800865e:	2300      	movs	r3, #0
 8008660:	6363      	str	r3, [r4, #52]	; 0x34
 8008662:	89a3      	ldrh	r3, [r4, #12]
 8008664:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008668:	81a3      	strh	r3, [r4, #12]
 800866a:	2300      	movs	r3, #0
 800866c:	6063      	str	r3, [r4, #4]
 800866e:	6923      	ldr	r3, [r4, #16]
 8008670:	6023      	str	r3, [r4, #0]
 8008672:	89a3      	ldrh	r3, [r4, #12]
 8008674:	f043 0308 	orr.w	r3, r3, #8
 8008678:	81a3      	strh	r3, [r4, #12]
 800867a:	6923      	ldr	r3, [r4, #16]
 800867c:	b94b      	cbnz	r3, 8008692 <__swsetup_r+0x9a>
 800867e:	89a3      	ldrh	r3, [r4, #12]
 8008680:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008688:	d003      	beq.n	8008692 <__swsetup_r+0x9a>
 800868a:	4621      	mov	r1, r4
 800868c:	4630      	mov	r0, r6
 800868e:	f001 f82b 	bl	80096e8 <__smakebuf_r>
 8008692:	89a2      	ldrh	r2, [r4, #12]
 8008694:	f012 0301 	ands.w	r3, r2, #1
 8008698:	d00c      	beq.n	80086b4 <__swsetup_r+0xbc>
 800869a:	2300      	movs	r3, #0
 800869c:	60a3      	str	r3, [r4, #8]
 800869e:	6963      	ldr	r3, [r4, #20]
 80086a0:	425b      	negs	r3, r3
 80086a2:	61a3      	str	r3, [r4, #24]
 80086a4:	6923      	ldr	r3, [r4, #16]
 80086a6:	b953      	cbnz	r3, 80086be <__swsetup_r+0xc6>
 80086a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086ac:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80086b0:	d1ba      	bne.n	8008628 <__swsetup_r+0x30>
 80086b2:	bd70      	pop	{r4, r5, r6, pc}
 80086b4:	0792      	lsls	r2, r2, #30
 80086b6:	bf58      	it	pl
 80086b8:	6963      	ldrpl	r3, [r4, #20]
 80086ba:	60a3      	str	r3, [r4, #8]
 80086bc:	e7f2      	b.n	80086a4 <__swsetup_r+0xac>
 80086be:	2000      	movs	r0, #0
 80086c0:	e7f7      	b.n	80086b2 <__swsetup_r+0xba>
 80086c2:	bf00      	nop
 80086c4:	20000008 	.word	0x20000008
 80086c8:	0800a8f8 	.word	0x0800a8f8
 80086cc:	0800a918 	.word	0x0800a918
 80086d0:	0800a8d8 	.word	0x0800a8d8

080086d4 <quorem>:
 80086d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086d8:	6903      	ldr	r3, [r0, #16]
 80086da:	690c      	ldr	r4, [r1, #16]
 80086dc:	429c      	cmp	r4, r3
 80086de:	4680      	mov	r8, r0
 80086e0:	f300 8082 	bgt.w	80087e8 <quorem+0x114>
 80086e4:	3c01      	subs	r4, #1
 80086e6:	f101 0714 	add.w	r7, r1, #20
 80086ea:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80086ee:	f100 0614 	add.w	r6, r0, #20
 80086f2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80086f6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80086fa:	eb06 030e 	add.w	r3, r6, lr
 80086fe:	3501      	adds	r5, #1
 8008700:	eb07 090e 	add.w	r9, r7, lr
 8008704:	9301      	str	r3, [sp, #4]
 8008706:	fbb0 f5f5 	udiv	r5, r0, r5
 800870a:	b395      	cbz	r5, 8008772 <quorem+0x9e>
 800870c:	f04f 0a00 	mov.w	sl, #0
 8008710:	4638      	mov	r0, r7
 8008712:	46b4      	mov	ip, r6
 8008714:	46d3      	mov	fp, sl
 8008716:	f850 2b04 	ldr.w	r2, [r0], #4
 800871a:	b293      	uxth	r3, r2
 800871c:	fb05 a303 	mla	r3, r5, r3, sl
 8008720:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008724:	b29b      	uxth	r3, r3
 8008726:	ebab 0303 	sub.w	r3, fp, r3
 800872a:	0c12      	lsrs	r2, r2, #16
 800872c:	f8bc b000 	ldrh.w	fp, [ip]
 8008730:	fb05 a202 	mla	r2, r5, r2, sl
 8008734:	fa13 f38b 	uxtah	r3, r3, fp
 8008738:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800873c:	fa1f fb82 	uxth.w	fp, r2
 8008740:	f8dc 2000 	ldr.w	r2, [ip]
 8008744:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008748:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800874c:	b29b      	uxth	r3, r3
 800874e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008752:	4581      	cmp	r9, r0
 8008754:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008758:	f84c 3b04 	str.w	r3, [ip], #4
 800875c:	d2db      	bcs.n	8008716 <quorem+0x42>
 800875e:	f856 300e 	ldr.w	r3, [r6, lr]
 8008762:	b933      	cbnz	r3, 8008772 <quorem+0x9e>
 8008764:	9b01      	ldr	r3, [sp, #4]
 8008766:	3b04      	subs	r3, #4
 8008768:	429e      	cmp	r6, r3
 800876a:	461a      	mov	r2, r3
 800876c:	d330      	bcc.n	80087d0 <quorem+0xfc>
 800876e:	f8c8 4010 	str.w	r4, [r8, #16]
 8008772:	4640      	mov	r0, r8
 8008774:	f001 fa15 	bl	8009ba2 <__mcmp>
 8008778:	2800      	cmp	r0, #0
 800877a:	db25      	blt.n	80087c8 <quorem+0xf4>
 800877c:	3501      	adds	r5, #1
 800877e:	4630      	mov	r0, r6
 8008780:	f04f 0e00 	mov.w	lr, #0
 8008784:	f857 2b04 	ldr.w	r2, [r7], #4
 8008788:	f8d0 c000 	ldr.w	ip, [r0]
 800878c:	b293      	uxth	r3, r2
 800878e:	ebae 0303 	sub.w	r3, lr, r3
 8008792:	0c12      	lsrs	r2, r2, #16
 8008794:	fa13 f38c 	uxtah	r3, r3, ip
 8008798:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800879c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087a6:	45b9      	cmp	r9, r7
 80087a8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80087ac:	f840 3b04 	str.w	r3, [r0], #4
 80087b0:	d2e8      	bcs.n	8008784 <quorem+0xb0>
 80087b2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80087b6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80087ba:	b92a      	cbnz	r2, 80087c8 <quorem+0xf4>
 80087bc:	3b04      	subs	r3, #4
 80087be:	429e      	cmp	r6, r3
 80087c0:	461a      	mov	r2, r3
 80087c2:	d30b      	bcc.n	80087dc <quorem+0x108>
 80087c4:	f8c8 4010 	str.w	r4, [r8, #16]
 80087c8:	4628      	mov	r0, r5
 80087ca:	b003      	add	sp, #12
 80087cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d0:	6812      	ldr	r2, [r2, #0]
 80087d2:	3b04      	subs	r3, #4
 80087d4:	2a00      	cmp	r2, #0
 80087d6:	d1ca      	bne.n	800876e <quorem+0x9a>
 80087d8:	3c01      	subs	r4, #1
 80087da:	e7c5      	b.n	8008768 <quorem+0x94>
 80087dc:	6812      	ldr	r2, [r2, #0]
 80087de:	3b04      	subs	r3, #4
 80087e0:	2a00      	cmp	r2, #0
 80087e2:	d1ef      	bne.n	80087c4 <quorem+0xf0>
 80087e4:	3c01      	subs	r4, #1
 80087e6:	e7ea      	b.n	80087be <quorem+0xea>
 80087e8:	2000      	movs	r0, #0
 80087ea:	e7ee      	b.n	80087ca <quorem+0xf6>
 80087ec:	0000      	movs	r0, r0
	...

080087f0 <_dtoa_r>:
 80087f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087f4:	ec57 6b10 	vmov	r6, r7, d0
 80087f8:	b097      	sub	sp, #92	; 0x5c
 80087fa:	e9cd 6700 	strd	r6, r7, [sp]
 80087fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008800:	9107      	str	r1, [sp, #28]
 8008802:	4604      	mov	r4, r0
 8008804:	920a      	str	r2, [sp, #40]	; 0x28
 8008806:	930f      	str	r3, [sp, #60]	; 0x3c
 8008808:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800880a:	b93e      	cbnz	r6, 800881c <_dtoa_r+0x2c>
 800880c:	2010      	movs	r0, #16
 800880e:	f000 ffab 	bl	8009768 <malloc>
 8008812:	6260      	str	r0, [r4, #36]	; 0x24
 8008814:	6046      	str	r6, [r0, #4]
 8008816:	6086      	str	r6, [r0, #8]
 8008818:	6006      	str	r6, [r0, #0]
 800881a:	60c6      	str	r6, [r0, #12]
 800881c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800881e:	6819      	ldr	r1, [r3, #0]
 8008820:	b151      	cbz	r1, 8008838 <_dtoa_r+0x48>
 8008822:	685a      	ldr	r2, [r3, #4]
 8008824:	604a      	str	r2, [r1, #4]
 8008826:	2301      	movs	r3, #1
 8008828:	4093      	lsls	r3, r2
 800882a:	608b      	str	r3, [r1, #8]
 800882c:	4620      	mov	r0, r4
 800882e:	f000 ffe2 	bl	80097f6 <_Bfree>
 8008832:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008834:	2200      	movs	r2, #0
 8008836:	601a      	str	r2, [r3, #0]
 8008838:	9b01      	ldr	r3, [sp, #4]
 800883a:	2b00      	cmp	r3, #0
 800883c:	bfbf      	itttt	lt
 800883e:	2301      	movlt	r3, #1
 8008840:	602b      	strlt	r3, [r5, #0]
 8008842:	9b01      	ldrlt	r3, [sp, #4]
 8008844:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008848:	bfb2      	itee	lt
 800884a:	9301      	strlt	r3, [sp, #4]
 800884c:	2300      	movge	r3, #0
 800884e:	602b      	strge	r3, [r5, #0]
 8008850:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008854:	4ba8      	ldr	r3, [pc, #672]	; (8008af8 <_dtoa_r+0x308>)
 8008856:	ea33 0308 	bics.w	r3, r3, r8
 800885a:	d11b      	bne.n	8008894 <_dtoa_r+0xa4>
 800885c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800885e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008862:	6013      	str	r3, [r2, #0]
 8008864:	9b00      	ldr	r3, [sp, #0]
 8008866:	b923      	cbnz	r3, 8008872 <_dtoa_r+0x82>
 8008868:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800886c:	2800      	cmp	r0, #0
 800886e:	f000 8578 	beq.w	8009362 <_dtoa_r+0xb72>
 8008872:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008874:	b953      	cbnz	r3, 800888c <_dtoa_r+0x9c>
 8008876:	4ba1      	ldr	r3, [pc, #644]	; (8008afc <_dtoa_r+0x30c>)
 8008878:	e021      	b.n	80088be <_dtoa_r+0xce>
 800887a:	4ba1      	ldr	r3, [pc, #644]	; (8008b00 <_dtoa_r+0x310>)
 800887c:	9302      	str	r3, [sp, #8]
 800887e:	3308      	adds	r3, #8
 8008880:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008882:	6013      	str	r3, [r2, #0]
 8008884:	9802      	ldr	r0, [sp, #8]
 8008886:	b017      	add	sp, #92	; 0x5c
 8008888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800888c:	4b9b      	ldr	r3, [pc, #620]	; (8008afc <_dtoa_r+0x30c>)
 800888e:	9302      	str	r3, [sp, #8]
 8008890:	3303      	adds	r3, #3
 8008892:	e7f5      	b.n	8008880 <_dtoa_r+0x90>
 8008894:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008898:	2200      	movs	r2, #0
 800889a:	2300      	movs	r3, #0
 800889c:	4630      	mov	r0, r6
 800889e:	4639      	mov	r1, r7
 80088a0:	f7f8 f90e 	bl	8000ac0 <__aeabi_dcmpeq>
 80088a4:	4681      	mov	r9, r0
 80088a6:	b160      	cbz	r0, 80088c2 <_dtoa_r+0xd2>
 80088a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80088aa:	2301      	movs	r3, #1
 80088ac:	6013      	str	r3, [r2, #0]
 80088ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	f000 8553 	beq.w	800935c <_dtoa_r+0xb6c>
 80088b6:	4b93      	ldr	r3, [pc, #588]	; (8008b04 <_dtoa_r+0x314>)
 80088b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80088ba:	6013      	str	r3, [r2, #0]
 80088bc:	3b01      	subs	r3, #1
 80088be:	9302      	str	r3, [sp, #8]
 80088c0:	e7e0      	b.n	8008884 <_dtoa_r+0x94>
 80088c2:	aa14      	add	r2, sp, #80	; 0x50
 80088c4:	a915      	add	r1, sp, #84	; 0x54
 80088c6:	ec47 6b10 	vmov	d0, r6, r7
 80088ca:	4620      	mov	r0, r4
 80088cc:	f001 f9e1 	bl	8009c92 <__d2b>
 80088d0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80088d4:	4682      	mov	sl, r0
 80088d6:	2d00      	cmp	r5, #0
 80088d8:	d07e      	beq.n	80089d8 <_dtoa_r+0x1e8>
 80088da:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80088de:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80088e2:	4630      	mov	r0, r6
 80088e4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80088e8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80088ec:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 80088f0:	2200      	movs	r2, #0
 80088f2:	4b85      	ldr	r3, [pc, #532]	; (8008b08 <_dtoa_r+0x318>)
 80088f4:	f7f7 fcc8 	bl	8000288 <__aeabi_dsub>
 80088f8:	a379      	add	r3, pc, #484	; (adr r3, 8008ae0 <_dtoa_r+0x2f0>)
 80088fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088fe:	f7f7 fe77 	bl	80005f0 <__aeabi_dmul>
 8008902:	a379      	add	r3, pc, #484	; (adr r3, 8008ae8 <_dtoa_r+0x2f8>)
 8008904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008908:	f7f7 fcc0 	bl	800028c <__adddf3>
 800890c:	4606      	mov	r6, r0
 800890e:	4628      	mov	r0, r5
 8008910:	460f      	mov	r7, r1
 8008912:	f7f7 fe07 	bl	8000524 <__aeabi_i2d>
 8008916:	a376      	add	r3, pc, #472	; (adr r3, 8008af0 <_dtoa_r+0x300>)
 8008918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891c:	f7f7 fe68 	bl	80005f0 <__aeabi_dmul>
 8008920:	4602      	mov	r2, r0
 8008922:	460b      	mov	r3, r1
 8008924:	4630      	mov	r0, r6
 8008926:	4639      	mov	r1, r7
 8008928:	f7f7 fcb0 	bl	800028c <__adddf3>
 800892c:	4606      	mov	r6, r0
 800892e:	460f      	mov	r7, r1
 8008930:	f7f8 f90e 	bl	8000b50 <__aeabi_d2iz>
 8008934:	2200      	movs	r2, #0
 8008936:	4683      	mov	fp, r0
 8008938:	2300      	movs	r3, #0
 800893a:	4630      	mov	r0, r6
 800893c:	4639      	mov	r1, r7
 800893e:	f7f8 f8c9 	bl	8000ad4 <__aeabi_dcmplt>
 8008942:	b158      	cbz	r0, 800895c <_dtoa_r+0x16c>
 8008944:	4658      	mov	r0, fp
 8008946:	f7f7 fded 	bl	8000524 <__aeabi_i2d>
 800894a:	4602      	mov	r2, r0
 800894c:	460b      	mov	r3, r1
 800894e:	4630      	mov	r0, r6
 8008950:	4639      	mov	r1, r7
 8008952:	f7f8 f8b5 	bl	8000ac0 <__aeabi_dcmpeq>
 8008956:	b908      	cbnz	r0, 800895c <_dtoa_r+0x16c>
 8008958:	f10b 3bff 	add.w	fp, fp, #4294967295
 800895c:	f1bb 0f16 	cmp.w	fp, #22
 8008960:	d859      	bhi.n	8008a16 <_dtoa_r+0x226>
 8008962:	496a      	ldr	r1, [pc, #424]	; (8008b0c <_dtoa_r+0x31c>)
 8008964:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8008968:	e9dd 2300 	ldrd	r2, r3, [sp]
 800896c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008970:	f7f8 f8ce 	bl	8000b10 <__aeabi_dcmpgt>
 8008974:	2800      	cmp	r0, #0
 8008976:	d050      	beq.n	8008a1a <_dtoa_r+0x22a>
 8008978:	f10b 3bff 	add.w	fp, fp, #4294967295
 800897c:	2300      	movs	r3, #0
 800897e:	930e      	str	r3, [sp, #56]	; 0x38
 8008980:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008982:	1b5d      	subs	r5, r3, r5
 8008984:	1e6b      	subs	r3, r5, #1
 8008986:	9306      	str	r3, [sp, #24]
 8008988:	bf45      	ittet	mi
 800898a:	f1c5 0301 	rsbmi	r3, r5, #1
 800898e:	9305      	strmi	r3, [sp, #20]
 8008990:	2300      	movpl	r3, #0
 8008992:	2300      	movmi	r3, #0
 8008994:	bf4c      	ite	mi
 8008996:	9306      	strmi	r3, [sp, #24]
 8008998:	9305      	strpl	r3, [sp, #20]
 800899a:	f1bb 0f00 	cmp.w	fp, #0
 800899e:	db3e      	blt.n	8008a1e <_dtoa_r+0x22e>
 80089a0:	9b06      	ldr	r3, [sp, #24]
 80089a2:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80089a6:	445b      	add	r3, fp
 80089a8:	9306      	str	r3, [sp, #24]
 80089aa:	2300      	movs	r3, #0
 80089ac:	9308      	str	r3, [sp, #32]
 80089ae:	9b07      	ldr	r3, [sp, #28]
 80089b0:	2b09      	cmp	r3, #9
 80089b2:	f200 80af 	bhi.w	8008b14 <_dtoa_r+0x324>
 80089b6:	2b05      	cmp	r3, #5
 80089b8:	bfc4      	itt	gt
 80089ba:	3b04      	subgt	r3, #4
 80089bc:	9307      	strgt	r3, [sp, #28]
 80089be:	9b07      	ldr	r3, [sp, #28]
 80089c0:	f1a3 0302 	sub.w	r3, r3, #2
 80089c4:	bfcc      	ite	gt
 80089c6:	2600      	movgt	r6, #0
 80089c8:	2601      	movle	r6, #1
 80089ca:	2b03      	cmp	r3, #3
 80089cc:	f200 80ae 	bhi.w	8008b2c <_dtoa_r+0x33c>
 80089d0:	e8df f003 	tbb	[pc, r3]
 80089d4:	772f8482 	.word	0x772f8482
 80089d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80089da:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80089dc:	441d      	add	r5, r3
 80089de:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80089e2:	2b20      	cmp	r3, #32
 80089e4:	dd11      	ble.n	8008a0a <_dtoa_r+0x21a>
 80089e6:	9a00      	ldr	r2, [sp, #0]
 80089e8:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80089ec:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80089f0:	fa22 f000 	lsr.w	r0, r2, r0
 80089f4:	fa08 f303 	lsl.w	r3, r8, r3
 80089f8:	4318      	orrs	r0, r3
 80089fa:	f7f7 fd83 	bl	8000504 <__aeabi_ui2d>
 80089fe:	2301      	movs	r3, #1
 8008a00:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008a04:	3d01      	subs	r5, #1
 8008a06:	9312      	str	r3, [sp, #72]	; 0x48
 8008a08:	e772      	b.n	80088f0 <_dtoa_r+0x100>
 8008a0a:	f1c3 0020 	rsb	r0, r3, #32
 8008a0e:	9b00      	ldr	r3, [sp, #0]
 8008a10:	fa03 f000 	lsl.w	r0, r3, r0
 8008a14:	e7f1      	b.n	80089fa <_dtoa_r+0x20a>
 8008a16:	2301      	movs	r3, #1
 8008a18:	e7b1      	b.n	800897e <_dtoa_r+0x18e>
 8008a1a:	900e      	str	r0, [sp, #56]	; 0x38
 8008a1c:	e7b0      	b.n	8008980 <_dtoa_r+0x190>
 8008a1e:	9b05      	ldr	r3, [sp, #20]
 8008a20:	eba3 030b 	sub.w	r3, r3, fp
 8008a24:	9305      	str	r3, [sp, #20]
 8008a26:	f1cb 0300 	rsb	r3, fp, #0
 8008a2a:	9308      	str	r3, [sp, #32]
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a30:	e7bd      	b.n	80089ae <_dtoa_r+0x1be>
 8008a32:	2301      	movs	r3, #1
 8008a34:	9309      	str	r3, [sp, #36]	; 0x24
 8008a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	dd7a      	ble.n	8008b32 <_dtoa_r+0x342>
 8008a3c:	9304      	str	r3, [sp, #16]
 8008a3e:	9303      	str	r3, [sp, #12]
 8008a40:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008a42:	2200      	movs	r2, #0
 8008a44:	606a      	str	r2, [r5, #4]
 8008a46:	2104      	movs	r1, #4
 8008a48:	f101 0214 	add.w	r2, r1, #20
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d975      	bls.n	8008b3c <_dtoa_r+0x34c>
 8008a50:	6869      	ldr	r1, [r5, #4]
 8008a52:	4620      	mov	r0, r4
 8008a54:	f000 fe9b 	bl	800978e <_Balloc>
 8008a58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a5a:	6028      	str	r0, [r5, #0]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	9302      	str	r3, [sp, #8]
 8008a60:	9b03      	ldr	r3, [sp, #12]
 8008a62:	2b0e      	cmp	r3, #14
 8008a64:	f200 80e5 	bhi.w	8008c32 <_dtoa_r+0x442>
 8008a68:	2e00      	cmp	r6, #0
 8008a6a:	f000 80e2 	beq.w	8008c32 <_dtoa_r+0x442>
 8008a6e:	ed9d 7b00 	vldr	d7, [sp]
 8008a72:	f1bb 0f00 	cmp.w	fp, #0
 8008a76:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8008a7a:	dd74      	ble.n	8008b66 <_dtoa_r+0x376>
 8008a7c:	4a23      	ldr	r2, [pc, #140]	; (8008b0c <_dtoa_r+0x31c>)
 8008a7e:	f00b 030f 	and.w	r3, fp, #15
 8008a82:	ea4f 162b 	mov.w	r6, fp, asr #4
 8008a86:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008a8a:	06f0      	lsls	r0, r6, #27
 8008a8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008a90:	d559      	bpl.n	8008b46 <_dtoa_r+0x356>
 8008a92:	4b1f      	ldr	r3, [pc, #124]	; (8008b10 <_dtoa_r+0x320>)
 8008a94:	ec51 0b17 	vmov	r0, r1, d7
 8008a98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008a9c:	f7f7 fed2 	bl	8000844 <__aeabi_ddiv>
 8008aa0:	e9cd 0100 	strd	r0, r1, [sp]
 8008aa4:	f006 060f 	and.w	r6, r6, #15
 8008aa8:	2503      	movs	r5, #3
 8008aaa:	4f19      	ldr	r7, [pc, #100]	; (8008b10 <_dtoa_r+0x320>)
 8008aac:	2e00      	cmp	r6, #0
 8008aae:	d14c      	bne.n	8008b4a <_dtoa_r+0x35a>
 8008ab0:	4642      	mov	r2, r8
 8008ab2:	464b      	mov	r3, r9
 8008ab4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ab8:	f7f7 fec4 	bl	8000844 <__aeabi_ddiv>
 8008abc:	e9cd 0100 	strd	r0, r1, [sp]
 8008ac0:	e06a      	b.n	8008b98 <_dtoa_r+0x3a8>
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ac8:	445b      	add	r3, fp
 8008aca:	9304      	str	r3, [sp, #16]
 8008acc:	3301      	adds	r3, #1
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	9303      	str	r3, [sp, #12]
 8008ad2:	bfb8      	it	lt
 8008ad4:	2301      	movlt	r3, #1
 8008ad6:	e7b3      	b.n	8008a40 <_dtoa_r+0x250>
 8008ad8:	2300      	movs	r3, #0
 8008ada:	e7ab      	b.n	8008a34 <_dtoa_r+0x244>
 8008adc:	2300      	movs	r3, #0
 8008ade:	e7f1      	b.n	8008ac4 <_dtoa_r+0x2d4>
 8008ae0:	636f4361 	.word	0x636f4361
 8008ae4:	3fd287a7 	.word	0x3fd287a7
 8008ae8:	8b60c8b3 	.word	0x8b60c8b3
 8008aec:	3fc68a28 	.word	0x3fc68a28
 8008af0:	509f79fb 	.word	0x509f79fb
 8008af4:	3fd34413 	.word	0x3fd34413
 8008af8:	7ff00000 	.word	0x7ff00000
 8008afc:	0800a8d1 	.word	0x0800a8d1
 8008b00:	0800a8c8 	.word	0x0800a8c8
 8008b04:	0800a8a5 	.word	0x0800a8a5
 8008b08:	3ff80000 	.word	0x3ff80000
 8008b0c:	0800a960 	.word	0x0800a960
 8008b10:	0800a938 	.word	0x0800a938
 8008b14:	2601      	movs	r6, #1
 8008b16:	2300      	movs	r3, #0
 8008b18:	9307      	str	r3, [sp, #28]
 8008b1a:	9609      	str	r6, [sp, #36]	; 0x24
 8008b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8008b20:	9304      	str	r3, [sp, #16]
 8008b22:	9303      	str	r3, [sp, #12]
 8008b24:	2200      	movs	r2, #0
 8008b26:	2312      	movs	r3, #18
 8008b28:	920a      	str	r2, [sp, #40]	; 0x28
 8008b2a:	e789      	b.n	8008a40 <_dtoa_r+0x250>
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	9309      	str	r3, [sp, #36]	; 0x24
 8008b30:	e7f4      	b.n	8008b1c <_dtoa_r+0x32c>
 8008b32:	2301      	movs	r3, #1
 8008b34:	9304      	str	r3, [sp, #16]
 8008b36:	9303      	str	r3, [sp, #12]
 8008b38:	461a      	mov	r2, r3
 8008b3a:	e7f5      	b.n	8008b28 <_dtoa_r+0x338>
 8008b3c:	686a      	ldr	r2, [r5, #4]
 8008b3e:	3201      	adds	r2, #1
 8008b40:	606a      	str	r2, [r5, #4]
 8008b42:	0049      	lsls	r1, r1, #1
 8008b44:	e780      	b.n	8008a48 <_dtoa_r+0x258>
 8008b46:	2502      	movs	r5, #2
 8008b48:	e7af      	b.n	8008aaa <_dtoa_r+0x2ba>
 8008b4a:	07f1      	lsls	r1, r6, #31
 8008b4c:	d508      	bpl.n	8008b60 <_dtoa_r+0x370>
 8008b4e:	4640      	mov	r0, r8
 8008b50:	4649      	mov	r1, r9
 8008b52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b56:	f7f7 fd4b 	bl	80005f0 <__aeabi_dmul>
 8008b5a:	3501      	adds	r5, #1
 8008b5c:	4680      	mov	r8, r0
 8008b5e:	4689      	mov	r9, r1
 8008b60:	1076      	asrs	r6, r6, #1
 8008b62:	3708      	adds	r7, #8
 8008b64:	e7a2      	b.n	8008aac <_dtoa_r+0x2bc>
 8008b66:	f000 809d 	beq.w	8008ca4 <_dtoa_r+0x4b4>
 8008b6a:	f1cb 0600 	rsb	r6, fp, #0
 8008b6e:	4b9f      	ldr	r3, [pc, #636]	; (8008dec <_dtoa_r+0x5fc>)
 8008b70:	4f9f      	ldr	r7, [pc, #636]	; (8008df0 <_dtoa_r+0x600>)
 8008b72:	f006 020f 	and.w	r2, r6, #15
 8008b76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008b82:	f7f7 fd35 	bl	80005f0 <__aeabi_dmul>
 8008b86:	e9cd 0100 	strd	r0, r1, [sp]
 8008b8a:	1136      	asrs	r6, r6, #4
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	2502      	movs	r5, #2
 8008b90:	2e00      	cmp	r6, #0
 8008b92:	d17c      	bne.n	8008c8e <_dtoa_r+0x49e>
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d191      	bne.n	8008abc <_dtoa_r+0x2cc>
 8008b98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	f000 8084 	beq.w	8008ca8 <_dtoa_r+0x4b8>
 8008ba0:	e9dd 8900 	ldrd	r8, r9, [sp]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	4b93      	ldr	r3, [pc, #588]	; (8008df4 <_dtoa_r+0x604>)
 8008ba8:	4640      	mov	r0, r8
 8008baa:	4649      	mov	r1, r9
 8008bac:	f7f7 ff92 	bl	8000ad4 <__aeabi_dcmplt>
 8008bb0:	2800      	cmp	r0, #0
 8008bb2:	d079      	beq.n	8008ca8 <_dtoa_r+0x4b8>
 8008bb4:	9b03      	ldr	r3, [sp, #12]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d076      	beq.n	8008ca8 <_dtoa_r+0x4b8>
 8008bba:	9b04      	ldr	r3, [sp, #16]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	dd34      	ble.n	8008c2a <_dtoa_r+0x43a>
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	4b8d      	ldr	r3, [pc, #564]	; (8008df8 <_dtoa_r+0x608>)
 8008bc4:	4640      	mov	r0, r8
 8008bc6:	4649      	mov	r1, r9
 8008bc8:	f7f7 fd12 	bl	80005f0 <__aeabi_dmul>
 8008bcc:	e9cd 0100 	strd	r0, r1, [sp]
 8008bd0:	9e04      	ldr	r6, [sp, #16]
 8008bd2:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008bd6:	3501      	adds	r5, #1
 8008bd8:	4628      	mov	r0, r5
 8008bda:	f7f7 fca3 	bl	8000524 <__aeabi_i2d>
 8008bde:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008be2:	f7f7 fd05 	bl	80005f0 <__aeabi_dmul>
 8008be6:	2200      	movs	r2, #0
 8008be8:	4b84      	ldr	r3, [pc, #528]	; (8008dfc <_dtoa_r+0x60c>)
 8008bea:	f7f7 fb4f 	bl	800028c <__adddf3>
 8008bee:	4680      	mov	r8, r0
 8008bf0:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8008bf4:	2e00      	cmp	r6, #0
 8008bf6:	d15a      	bne.n	8008cae <_dtoa_r+0x4be>
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	4b81      	ldr	r3, [pc, #516]	; (8008e00 <_dtoa_r+0x610>)
 8008bfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c00:	f7f7 fb42 	bl	8000288 <__aeabi_dsub>
 8008c04:	4642      	mov	r2, r8
 8008c06:	464b      	mov	r3, r9
 8008c08:	e9cd 0100 	strd	r0, r1, [sp]
 8008c0c:	f7f7 ff80 	bl	8000b10 <__aeabi_dcmpgt>
 8008c10:	2800      	cmp	r0, #0
 8008c12:	f040 829b 	bne.w	800914c <_dtoa_r+0x95c>
 8008c16:	4642      	mov	r2, r8
 8008c18:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008c1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c20:	f7f7 ff58 	bl	8000ad4 <__aeabi_dcmplt>
 8008c24:	2800      	cmp	r0, #0
 8008c26:	f040 828f 	bne.w	8009148 <_dtoa_r+0x958>
 8008c2a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008c2e:	e9cd 2300 	strd	r2, r3, [sp]
 8008c32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	f2c0 8150 	blt.w	8008eda <_dtoa_r+0x6ea>
 8008c3a:	f1bb 0f0e 	cmp.w	fp, #14
 8008c3e:	f300 814c 	bgt.w	8008eda <_dtoa_r+0x6ea>
 8008c42:	4b6a      	ldr	r3, [pc, #424]	; (8008dec <_dtoa_r+0x5fc>)
 8008c44:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008c48:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008c4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	f280 80da 	bge.w	8008e08 <_dtoa_r+0x618>
 8008c54:	9b03      	ldr	r3, [sp, #12]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	f300 80d6 	bgt.w	8008e08 <_dtoa_r+0x618>
 8008c5c:	f040 8273 	bne.w	8009146 <_dtoa_r+0x956>
 8008c60:	2200      	movs	r2, #0
 8008c62:	4b67      	ldr	r3, [pc, #412]	; (8008e00 <_dtoa_r+0x610>)
 8008c64:	4640      	mov	r0, r8
 8008c66:	4649      	mov	r1, r9
 8008c68:	f7f7 fcc2 	bl	80005f0 <__aeabi_dmul>
 8008c6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c70:	f7f7 ff44 	bl	8000afc <__aeabi_dcmpge>
 8008c74:	9e03      	ldr	r6, [sp, #12]
 8008c76:	4637      	mov	r7, r6
 8008c78:	2800      	cmp	r0, #0
 8008c7a:	f040 824a 	bne.w	8009112 <_dtoa_r+0x922>
 8008c7e:	9b02      	ldr	r3, [sp, #8]
 8008c80:	9a02      	ldr	r2, [sp, #8]
 8008c82:	1c5d      	adds	r5, r3, #1
 8008c84:	2331      	movs	r3, #49	; 0x31
 8008c86:	7013      	strb	r3, [r2, #0]
 8008c88:	f10b 0b01 	add.w	fp, fp, #1
 8008c8c:	e245      	b.n	800911a <_dtoa_r+0x92a>
 8008c8e:	07f2      	lsls	r2, r6, #31
 8008c90:	d505      	bpl.n	8008c9e <_dtoa_r+0x4ae>
 8008c92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c96:	f7f7 fcab 	bl	80005f0 <__aeabi_dmul>
 8008c9a:	3501      	adds	r5, #1
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	1076      	asrs	r6, r6, #1
 8008ca0:	3708      	adds	r7, #8
 8008ca2:	e775      	b.n	8008b90 <_dtoa_r+0x3a0>
 8008ca4:	2502      	movs	r5, #2
 8008ca6:	e777      	b.n	8008b98 <_dtoa_r+0x3a8>
 8008ca8:	465f      	mov	r7, fp
 8008caa:	9e03      	ldr	r6, [sp, #12]
 8008cac:	e794      	b.n	8008bd8 <_dtoa_r+0x3e8>
 8008cae:	9a02      	ldr	r2, [sp, #8]
 8008cb0:	4b4e      	ldr	r3, [pc, #312]	; (8008dec <_dtoa_r+0x5fc>)
 8008cb2:	4432      	add	r2, r6
 8008cb4:	9213      	str	r2, [sp, #76]	; 0x4c
 8008cb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cb8:	1e71      	subs	r1, r6, #1
 8008cba:	2a00      	cmp	r2, #0
 8008cbc:	d048      	beq.n	8008d50 <_dtoa_r+0x560>
 8008cbe:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8008cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc6:	2000      	movs	r0, #0
 8008cc8:	494e      	ldr	r1, [pc, #312]	; (8008e04 <_dtoa_r+0x614>)
 8008cca:	f7f7 fdbb 	bl	8000844 <__aeabi_ddiv>
 8008cce:	4642      	mov	r2, r8
 8008cd0:	464b      	mov	r3, r9
 8008cd2:	f7f7 fad9 	bl	8000288 <__aeabi_dsub>
 8008cd6:	9d02      	ldr	r5, [sp, #8]
 8008cd8:	4680      	mov	r8, r0
 8008cda:	4689      	mov	r9, r1
 8008cdc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ce0:	f7f7 ff36 	bl	8000b50 <__aeabi_d2iz>
 8008ce4:	4606      	mov	r6, r0
 8008ce6:	f7f7 fc1d 	bl	8000524 <__aeabi_i2d>
 8008cea:	4602      	mov	r2, r0
 8008cec:	460b      	mov	r3, r1
 8008cee:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008cf2:	f7f7 fac9 	bl	8000288 <__aeabi_dsub>
 8008cf6:	3630      	adds	r6, #48	; 0x30
 8008cf8:	f805 6b01 	strb.w	r6, [r5], #1
 8008cfc:	4642      	mov	r2, r8
 8008cfe:	464b      	mov	r3, r9
 8008d00:	e9cd 0100 	strd	r0, r1, [sp]
 8008d04:	f7f7 fee6 	bl	8000ad4 <__aeabi_dcmplt>
 8008d08:	2800      	cmp	r0, #0
 8008d0a:	d165      	bne.n	8008dd8 <_dtoa_r+0x5e8>
 8008d0c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d10:	2000      	movs	r0, #0
 8008d12:	4938      	ldr	r1, [pc, #224]	; (8008df4 <_dtoa_r+0x604>)
 8008d14:	f7f7 fab8 	bl	8000288 <__aeabi_dsub>
 8008d18:	4642      	mov	r2, r8
 8008d1a:	464b      	mov	r3, r9
 8008d1c:	f7f7 feda 	bl	8000ad4 <__aeabi_dcmplt>
 8008d20:	2800      	cmp	r0, #0
 8008d22:	f040 80ba 	bne.w	8008e9a <_dtoa_r+0x6aa>
 8008d26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008d28:	429d      	cmp	r5, r3
 8008d2a:	f43f af7e 	beq.w	8008c2a <_dtoa_r+0x43a>
 8008d2e:	2200      	movs	r2, #0
 8008d30:	4b31      	ldr	r3, [pc, #196]	; (8008df8 <_dtoa_r+0x608>)
 8008d32:	4640      	mov	r0, r8
 8008d34:	4649      	mov	r1, r9
 8008d36:	f7f7 fc5b 	bl	80005f0 <__aeabi_dmul>
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	4680      	mov	r8, r0
 8008d3e:	4689      	mov	r9, r1
 8008d40:	4b2d      	ldr	r3, [pc, #180]	; (8008df8 <_dtoa_r+0x608>)
 8008d42:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d46:	f7f7 fc53 	bl	80005f0 <__aeabi_dmul>
 8008d4a:	e9cd 0100 	strd	r0, r1, [sp]
 8008d4e:	e7c5      	b.n	8008cdc <_dtoa_r+0x4ec>
 8008d50:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8008d54:	4642      	mov	r2, r8
 8008d56:	464b      	mov	r3, r9
 8008d58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d5c:	f7f7 fc48 	bl	80005f0 <__aeabi_dmul>
 8008d60:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008d64:	9d02      	ldr	r5, [sp, #8]
 8008d66:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d6a:	f7f7 fef1 	bl	8000b50 <__aeabi_d2iz>
 8008d6e:	4606      	mov	r6, r0
 8008d70:	f7f7 fbd8 	bl	8000524 <__aeabi_i2d>
 8008d74:	3630      	adds	r6, #48	; 0x30
 8008d76:	4602      	mov	r2, r0
 8008d78:	460b      	mov	r3, r1
 8008d7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d7e:	f7f7 fa83 	bl	8000288 <__aeabi_dsub>
 8008d82:	f805 6b01 	strb.w	r6, [r5], #1
 8008d86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008d88:	42ab      	cmp	r3, r5
 8008d8a:	4680      	mov	r8, r0
 8008d8c:	4689      	mov	r9, r1
 8008d8e:	f04f 0200 	mov.w	r2, #0
 8008d92:	d125      	bne.n	8008de0 <_dtoa_r+0x5f0>
 8008d94:	4b1b      	ldr	r3, [pc, #108]	; (8008e04 <_dtoa_r+0x614>)
 8008d96:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008d9a:	f7f7 fa77 	bl	800028c <__adddf3>
 8008d9e:	4602      	mov	r2, r0
 8008da0:	460b      	mov	r3, r1
 8008da2:	4640      	mov	r0, r8
 8008da4:	4649      	mov	r1, r9
 8008da6:	f7f7 feb3 	bl	8000b10 <__aeabi_dcmpgt>
 8008daa:	2800      	cmp	r0, #0
 8008dac:	d175      	bne.n	8008e9a <_dtoa_r+0x6aa>
 8008dae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008db2:	2000      	movs	r0, #0
 8008db4:	4913      	ldr	r1, [pc, #76]	; (8008e04 <_dtoa_r+0x614>)
 8008db6:	f7f7 fa67 	bl	8000288 <__aeabi_dsub>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	4640      	mov	r0, r8
 8008dc0:	4649      	mov	r1, r9
 8008dc2:	f7f7 fe87 	bl	8000ad4 <__aeabi_dcmplt>
 8008dc6:	2800      	cmp	r0, #0
 8008dc8:	f43f af2f 	beq.w	8008c2a <_dtoa_r+0x43a>
 8008dcc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008dd0:	2b30      	cmp	r3, #48	; 0x30
 8008dd2:	f105 32ff 	add.w	r2, r5, #4294967295
 8008dd6:	d001      	beq.n	8008ddc <_dtoa_r+0x5ec>
 8008dd8:	46bb      	mov	fp, r7
 8008dda:	e04d      	b.n	8008e78 <_dtoa_r+0x688>
 8008ddc:	4615      	mov	r5, r2
 8008dde:	e7f5      	b.n	8008dcc <_dtoa_r+0x5dc>
 8008de0:	4b05      	ldr	r3, [pc, #20]	; (8008df8 <_dtoa_r+0x608>)
 8008de2:	f7f7 fc05 	bl	80005f0 <__aeabi_dmul>
 8008de6:	e9cd 0100 	strd	r0, r1, [sp]
 8008dea:	e7bc      	b.n	8008d66 <_dtoa_r+0x576>
 8008dec:	0800a960 	.word	0x0800a960
 8008df0:	0800a938 	.word	0x0800a938
 8008df4:	3ff00000 	.word	0x3ff00000
 8008df8:	40240000 	.word	0x40240000
 8008dfc:	401c0000 	.word	0x401c0000
 8008e00:	40140000 	.word	0x40140000
 8008e04:	3fe00000 	.word	0x3fe00000
 8008e08:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008e0c:	9d02      	ldr	r5, [sp, #8]
 8008e0e:	4642      	mov	r2, r8
 8008e10:	464b      	mov	r3, r9
 8008e12:	4630      	mov	r0, r6
 8008e14:	4639      	mov	r1, r7
 8008e16:	f7f7 fd15 	bl	8000844 <__aeabi_ddiv>
 8008e1a:	f7f7 fe99 	bl	8000b50 <__aeabi_d2iz>
 8008e1e:	9000      	str	r0, [sp, #0]
 8008e20:	f7f7 fb80 	bl	8000524 <__aeabi_i2d>
 8008e24:	4642      	mov	r2, r8
 8008e26:	464b      	mov	r3, r9
 8008e28:	f7f7 fbe2 	bl	80005f0 <__aeabi_dmul>
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	460b      	mov	r3, r1
 8008e30:	4630      	mov	r0, r6
 8008e32:	4639      	mov	r1, r7
 8008e34:	f7f7 fa28 	bl	8000288 <__aeabi_dsub>
 8008e38:	9e00      	ldr	r6, [sp, #0]
 8008e3a:	9f03      	ldr	r7, [sp, #12]
 8008e3c:	3630      	adds	r6, #48	; 0x30
 8008e3e:	f805 6b01 	strb.w	r6, [r5], #1
 8008e42:	9e02      	ldr	r6, [sp, #8]
 8008e44:	1bae      	subs	r6, r5, r6
 8008e46:	42b7      	cmp	r7, r6
 8008e48:	4602      	mov	r2, r0
 8008e4a:	460b      	mov	r3, r1
 8008e4c:	d138      	bne.n	8008ec0 <_dtoa_r+0x6d0>
 8008e4e:	f7f7 fa1d 	bl	800028c <__adddf3>
 8008e52:	4606      	mov	r6, r0
 8008e54:	460f      	mov	r7, r1
 8008e56:	4602      	mov	r2, r0
 8008e58:	460b      	mov	r3, r1
 8008e5a:	4640      	mov	r0, r8
 8008e5c:	4649      	mov	r1, r9
 8008e5e:	f7f7 fe39 	bl	8000ad4 <__aeabi_dcmplt>
 8008e62:	b9c8      	cbnz	r0, 8008e98 <_dtoa_r+0x6a8>
 8008e64:	4632      	mov	r2, r6
 8008e66:	463b      	mov	r3, r7
 8008e68:	4640      	mov	r0, r8
 8008e6a:	4649      	mov	r1, r9
 8008e6c:	f7f7 fe28 	bl	8000ac0 <__aeabi_dcmpeq>
 8008e70:	b110      	cbz	r0, 8008e78 <_dtoa_r+0x688>
 8008e72:	9b00      	ldr	r3, [sp, #0]
 8008e74:	07db      	lsls	r3, r3, #31
 8008e76:	d40f      	bmi.n	8008e98 <_dtoa_r+0x6a8>
 8008e78:	4651      	mov	r1, sl
 8008e7a:	4620      	mov	r0, r4
 8008e7c:	f000 fcbb 	bl	80097f6 <_Bfree>
 8008e80:	2300      	movs	r3, #0
 8008e82:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008e84:	702b      	strb	r3, [r5, #0]
 8008e86:	f10b 0301 	add.w	r3, fp, #1
 8008e8a:	6013      	str	r3, [r2, #0]
 8008e8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	f43f acf8 	beq.w	8008884 <_dtoa_r+0x94>
 8008e94:	601d      	str	r5, [r3, #0]
 8008e96:	e4f5      	b.n	8008884 <_dtoa_r+0x94>
 8008e98:	465f      	mov	r7, fp
 8008e9a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008e9e:	2a39      	cmp	r2, #57	; 0x39
 8008ea0:	f105 33ff 	add.w	r3, r5, #4294967295
 8008ea4:	d106      	bne.n	8008eb4 <_dtoa_r+0x6c4>
 8008ea6:	9a02      	ldr	r2, [sp, #8]
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d107      	bne.n	8008ebc <_dtoa_r+0x6cc>
 8008eac:	2330      	movs	r3, #48	; 0x30
 8008eae:	7013      	strb	r3, [r2, #0]
 8008eb0:	3701      	adds	r7, #1
 8008eb2:	4613      	mov	r3, r2
 8008eb4:	781a      	ldrb	r2, [r3, #0]
 8008eb6:	3201      	adds	r2, #1
 8008eb8:	701a      	strb	r2, [r3, #0]
 8008eba:	e78d      	b.n	8008dd8 <_dtoa_r+0x5e8>
 8008ebc:	461d      	mov	r5, r3
 8008ebe:	e7ec      	b.n	8008e9a <_dtoa_r+0x6aa>
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	4ba4      	ldr	r3, [pc, #656]	; (8009154 <_dtoa_r+0x964>)
 8008ec4:	f7f7 fb94 	bl	80005f0 <__aeabi_dmul>
 8008ec8:	2200      	movs	r2, #0
 8008eca:	2300      	movs	r3, #0
 8008ecc:	4606      	mov	r6, r0
 8008ece:	460f      	mov	r7, r1
 8008ed0:	f7f7 fdf6 	bl	8000ac0 <__aeabi_dcmpeq>
 8008ed4:	2800      	cmp	r0, #0
 8008ed6:	d09a      	beq.n	8008e0e <_dtoa_r+0x61e>
 8008ed8:	e7ce      	b.n	8008e78 <_dtoa_r+0x688>
 8008eda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008edc:	2a00      	cmp	r2, #0
 8008ede:	f000 80cd 	beq.w	800907c <_dtoa_r+0x88c>
 8008ee2:	9a07      	ldr	r2, [sp, #28]
 8008ee4:	2a01      	cmp	r2, #1
 8008ee6:	f300 80af 	bgt.w	8009048 <_dtoa_r+0x858>
 8008eea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008eec:	2a00      	cmp	r2, #0
 8008eee:	f000 80a7 	beq.w	8009040 <_dtoa_r+0x850>
 8008ef2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008ef6:	9e08      	ldr	r6, [sp, #32]
 8008ef8:	9d05      	ldr	r5, [sp, #20]
 8008efa:	9a05      	ldr	r2, [sp, #20]
 8008efc:	441a      	add	r2, r3
 8008efe:	9205      	str	r2, [sp, #20]
 8008f00:	9a06      	ldr	r2, [sp, #24]
 8008f02:	2101      	movs	r1, #1
 8008f04:	441a      	add	r2, r3
 8008f06:	4620      	mov	r0, r4
 8008f08:	9206      	str	r2, [sp, #24]
 8008f0a:	f000 fd14 	bl	8009936 <__i2b>
 8008f0e:	4607      	mov	r7, r0
 8008f10:	2d00      	cmp	r5, #0
 8008f12:	dd0c      	ble.n	8008f2e <_dtoa_r+0x73e>
 8008f14:	9b06      	ldr	r3, [sp, #24]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	dd09      	ble.n	8008f2e <_dtoa_r+0x73e>
 8008f1a:	42ab      	cmp	r3, r5
 8008f1c:	9a05      	ldr	r2, [sp, #20]
 8008f1e:	bfa8      	it	ge
 8008f20:	462b      	movge	r3, r5
 8008f22:	1ad2      	subs	r2, r2, r3
 8008f24:	9205      	str	r2, [sp, #20]
 8008f26:	9a06      	ldr	r2, [sp, #24]
 8008f28:	1aed      	subs	r5, r5, r3
 8008f2a:	1ad3      	subs	r3, r2, r3
 8008f2c:	9306      	str	r3, [sp, #24]
 8008f2e:	9b08      	ldr	r3, [sp, #32]
 8008f30:	b1f3      	cbz	r3, 8008f70 <_dtoa_r+0x780>
 8008f32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	f000 80a5 	beq.w	8009084 <_dtoa_r+0x894>
 8008f3a:	2e00      	cmp	r6, #0
 8008f3c:	dd10      	ble.n	8008f60 <_dtoa_r+0x770>
 8008f3e:	4639      	mov	r1, r7
 8008f40:	4632      	mov	r2, r6
 8008f42:	4620      	mov	r0, r4
 8008f44:	f000 fd8e 	bl	8009a64 <__pow5mult>
 8008f48:	4652      	mov	r2, sl
 8008f4a:	4601      	mov	r1, r0
 8008f4c:	4607      	mov	r7, r0
 8008f4e:	4620      	mov	r0, r4
 8008f50:	f000 fcfa 	bl	8009948 <__multiply>
 8008f54:	4651      	mov	r1, sl
 8008f56:	4680      	mov	r8, r0
 8008f58:	4620      	mov	r0, r4
 8008f5a:	f000 fc4c 	bl	80097f6 <_Bfree>
 8008f5e:	46c2      	mov	sl, r8
 8008f60:	9b08      	ldr	r3, [sp, #32]
 8008f62:	1b9a      	subs	r2, r3, r6
 8008f64:	d004      	beq.n	8008f70 <_dtoa_r+0x780>
 8008f66:	4651      	mov	r1, sl
 8008f68:	4620      	mov	r0, r4
 8008f6a:	f000 fd7b 	bl	8009a64 <__pow5mult>
 8008f6e:	4682      	mov	sl, r0
 8008f70:	2101      	movs	r1, #1
 8008f72:	4620      	mov	r0, r4
 8008f74:	f000 fcdf 	bl	8009936 <__i2b>
 8008f78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	4606      	mov	r6, r0
 8008f7e:	f340 8083 	ble.w	8009088 <_dtoa_r+0x898>
 8008f82:	461a      	mov	r2, r3
 8008f84:	4601      	mov	r1, r0
 8008f86:	4620      	mov	r0, r4
 8008f88:	f000 fd6c 	bl	8009a64 <__pow5mult>
 8008f8c:	9b07      	ldr	r3, [sp, #28]
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	4606      	mov	r6, r0
 8008f92:	dd7c      	ble.n	800908e <_dtoa_r+0x89e>
 8008f94:	f04f 0800 	mov.w	r8, #0
 8008f98:	6933      	ldr	r3, [r6, #16]
 8008f9a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008f9e:	6918      	ldr	r0, [r3, #16]
 8008fa0:	f000 fc7b 	bl	800989a <__hi0bits>
 8008fa4:	f1c0 0020 	rsb	r0, r0, #32
 8008fa8:	9b06      	ldr	r3, [sp, #24]
 8008faa:	4418      	add	r0, r3
 8008fac:	f010 001f 	ands.w	r0, r0, #31
 8008fb0:	f000 8096 	beq.w	80090e0 <_dtoa_r+0x8f0>
 8008fb4:	f1c0 0320 	rsb	r3, r0, #32
 8008fb8:	2b04      	cmp	r3, #4
 8008fba:	f340 8087 	ble.w	80090cc <_dtoa_r+0x8dc>
 8008fbe:	9b05      	ldr	r3, [sp, #20]
 8008fc0:	f1c0 001c 	rsb	r0, r0, #28
 8008fc4:	4403      	add	r3, r0
 8008fc6:	9305      	str	r3, [sp, #20]
 8008fc8:	9b06      	ldr	r3, [sp, #24]
 8008fca:	4405      	add	r5, r0
 8008fcc:	4403      	add	r3, r0
 8008fce:	9306      	str	r3, [sp, #24]
 8008fd0:	9b05      	ldr	r3, [sp, #20]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	dd05      	ble.n	8008fe2 <_dtoa_r+0x7f2>
 8008fd6:	4651      	mov	r1, sl
 8008fd8:	461a      	mov	r2, r3
 8008fda:	4620      	mov	r0, r4
 8008fdc:	f000 fd90 	bl	8009b00 <__lshift>
 8008fe0:	4682      	mov	sl, r0
 8008fe2:	9b06      	ldr	r3, [sp, #24]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	dd05      	ble.n	8008ff4 <_dtoa_r+0x804>
 8008fe8:	4631      	mov	r1, r6
 8008fea:	461a      	mov	r2, r3
 8008fec:	4620      	mov	r0, r4
 8008fee:	f000 fd87 	bl	8009b00 <__lshift>
 8008ff2:	4606      	mov	r6, r0
 8008ff4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d074      	beq.n	80090e4 <_dtoa_r+0x8f4>
 8008ffa:	4631      	mov	r1, r6
 8008ffc:	4650      	mov	r0, sl
 8008ffe:	f000 fdd0 	bl	8009ba2 <__mcmp>
 8009002:	2800      	cmp	r0, #0
 8009004:	da6e      	bge.n	80090e4 <_dtoa_r+0x8f4>
 8009006:	2300      	movs	r3, #0
 8009008:	4651      	mov	r1, sl
 800900a:	220a      	movs	r2, #10
 800900c:	4620      	mov	r0, r4
 800900e:	f000 fc09 	bl	8009824 <__multadd>
 8009012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009014:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009018:	4682      	mov	sl, r0
 800901a:	2b00      	cmp	r3, #0
 800901c:	f000 81a8 	beq.w	8009370 <_dtoa_r+0xb80>
 8009020:	2300      	movs	r3, #0
 8009022:	4639      	mov	r1, r7
 8009024:	220a      	movs	r2, #10
 8009026:	4620      	mov	r0, r4
 8009028:	f000 fbfc 	bl	8009824 <__multadd>
 800902c:	9b04      	ldr	r3, [sp, #16]
 800902e:	2b00      	cmp	r3, #0
 8009030:	4607      	mov	r7, r0
 8009032:	f300 80c8 	bgt.w	80091c6 <_dtoa_r+0x9d6>
 8009036:	9b07      	ldr	r3, [sp, #28]
 8009038:	2b02      	cmp	r3, #2
 800903a:	f340 80c4 	ble.w	80091c6 <_dtoa_r+0x9d6>
 800903e:	e059      	b.n	80090f4 <_dtoa_r+0x904>
 8009040:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009042:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009046:	e756      	b.n	8008ef6 <_dtoa_r+0x706>
 8009048:	9b03      	ldr	r3, [sp, #12]
 800904a:	1e5e      	subs	r6, r3, #1
 800904c:	9b08      	ldr	r3, [sp, #32]
 800904e:	42b3      	cmp	r3, r6
 8009050:	bfbf      	itttt	lt
 8009052:	9b08      	ldrlt	r3, [sp, #32]
 8009054:	9608      	strlt	r6, [sp, #32]
 8009056:	1af2      	sublt	r2, r6, r3
 8009058:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800905a:	bfb6      	itet	lt
 800905c:	189b      	addlt	r3, r3, r2
 800905e:	1b9e      	subge	r6, r3, r6
 8009060:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8009062:	9b03      	ldr	r3, [sp, #12]
 8009064:	bfb8      	it	lt
 8009066:	2600      	movlt	r6, #0
 8009068:	2b00      	cmp	r3, #0
 800906a:	bfb9      	ittee	lt
 800906c:	9b05      	ldrlt	r3, [sp, #20]
 800906e:	9a03      	ldrlt	r2, [sp, #12]
 8009070:	9d05      	ldrge	r5, [sp, #20]
 8009072:	9b03      	ldrge	r3, [sp, #12]
 8009074:	bfbc      	itt	lt
 8009076:	1a9d      	sublt	r5, r3, r2
 8009078:	2300      	movlt	r3, #0
 800907a:	e73e      	b.n	8008efa <_dtoa_r+0x70a>
 800907c:	9e08      	ldr	r6, [sp, #32]
 800907e:	9d05      	ldr	r5, [sp, #20]
 8009080:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009082:	e745      	b.n	8008f10 <_dtoa_r+0x720>
 8009084:	9a08      	ldr	r2, [sp, #32]
 8009086:	e76e      	b.n	8008f66 <_dtoa_r+0x776>
 8009088:	9b07      	ldr	r3, [sp, #28]
 800908a:	2b01      	cmp	r3, #1
 800908c:	dc19      	bgt.n	80090c2 <_dtoa_r+0x8d2>
 800908e:	9b00      	ldr	r3, [sp, #0]
 8009090:	b9bb      	cbnz	r3, 80090c2 <_dtoa_r+0x8d2>
 8009092:	9b01      	ldr	r3, [sp, #4]
 8009094:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009098:	b99b      	cbnz	r3, 80090c2 <_dtoa_r+0x8d2>
 800909a:	9b01      	ldr	r3, [sp, #4]
 800909c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80090a0:	0d1b      	lsrs	r3, r3, #20
 80090a2:	051b      	lsls	r3, r3, #20
 80090a4:	b183      	cbz	r3, 80090c8 <_dtoa_r+0x8d8>
 80090a6:	9b05      	ldr	r3, [sp, #20]
 80090a8:	3301      	adds	r3, #1
 80090aa:	9305      	str	r3, [sp, #20]
 80090ac:	9b06      	ldr	r3, [sp, #24]
 80090ae:	3301      	adds	r3, #1
 80090b0:	9306      	str	r3, [sp, #24]
 80090b2:	f04f 0801 	mov.w	r8, #1
 80090b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	f47f af6d 	bne.w	8008f98 <_dtoa_r+0x7a8>
 80090be:	2001      	movs	r0, #1
 80090c0:	e772      	b.n	8008fa8 <_dtoa_r+0x7b8>
 80090c2:	f04f 0800 	mov.w	r8, #0
 80090c6:	e7f6      	b.n	80090b6 <_dtoa_r+0x8c6>
 80090c8:	4698      	mov	r8, r3
 80090ca:	e7f4      	b.n	80090b6 <_dtoa_r+0x8c6>
 80090cc:	d080      	beq.n	8008fd0 <_dtoa_r+0x7e0>
 80090ce:	9a05      	ldr	r2, [sp, #20]
 80090d0:	331c      	adds	r3, #28
 80090d2:	441a      	add	r2, r3
 80090d4:	9205      	str	r2, [sp, #20]
 80090d6:	9a06      	ldr	r2, [sp, #24]
 80090d8:	441a      	add	r2, r3
 80090da:	441d      	add	r5, r3
 80090dc:	4613      	mov	r3, r2
 80090de:	e776      	b.n	8008fce <_dtoa_r+0x7de>
 80090e0:	4603      	mov	r3, r0
 80090e2:	e7f4      	b.n	80090ce <_dtoa_r+0x8de>
 80090e4:	9b03      	ldr	r3, [sp, #12]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	dc36      	bgt.n	8009158 <_dtoa_r+0x968>
 80090ea:	9b07      	ldr	r3, [sp, #28]
 80090ec:	2b02      	cmp	r3, #2
 80090ee:	dd33      	ble.n	8009158 <_dtoa_r+0x968>
 80090f0:	9b03      	ldr	r3, [sp, #12]
 80090f2:	9304      	str	r3, [sp, #16]
 80090f4:	9b04      	ldr	r3, [sp, #16]
 80090f6:	b963      	cbnz	r3, 8009112 <_dtoa_r+0x922>
 80090f8:	4631      	mov	r1, r6
 80090fa:	2205      	movs	r2, #5
 80090fc:	4620      	mov	r0, r4
 80090fe:	f000 fb91 	bl	8009824 <__multadd>
 8009102:	4601      	mov	r1, r0
 8009104:	4606      	mov	r6, r0
 8009106:	4650      	mov	r0, sl
 8009108:	f000 fd4b 	bl	8009ba2 <__mcmp>
 800910c:	2800      	cmp	r0, #0
 800910e:	f73f adb6 	bgt.w	8008c7e <_dtoa_r+0x48e>
 8009112:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009114:	9d02      	ldr	r5, [sp, #8]
 8009116:	ea6f 0b03 	mvn.w	fp, r3
 800911a:	2300      	movs	r3, #0
 800911c:	9303      	str	r3, [sp, #12]
 800911e:	4631      	mov	r1, r6
 8009120:	4620      	mov	r0, r4
 8009122:	f000 fb68 	bl	80097f6 <_Bfree>
 8009126:	2f00      	cmp	r7, #0
 8009128:	f43f aea6 	beq.w	8008e78 <_dtoa_r+0x688>
 800912c:	9b03      	ldr	r3, [sp, #12]
 800912e:	b12b      	cbz	r3, 800913c <_dtoa_r+0x94c>
 8009130:	42bb      	cmp	r3, r7
 8009132:	d003      	beq.n	800913c <_dtoa_r+0x94c>
 8009134:	4619      	mov	r1, r3
 8009136:	4620      	mov	r0, r4
 8009138:	f000 fb5d 	bl	80097f6 <_Bfree>
 800913c:	4639      	mov	r1, r7
 800913e:	4620      	mov	r0, r4
 8009140:	f000 fb59 	bl	80097f6 <_Bfree>
 8009144:	e698      	b.n	8008e78 <_dtoa_r+0x688>
 8009146:	2600      	movs	r6, #0
 8009148:	4637      	mov	r7, r6
 800914a:	e7e2      	b.n	8009112 <_dtoa_r+0x922>
 800914c:	46bb      	mov	fp, r7
 800914e:	4637      	mov	r7, r6
 8009150:	e595      	b.n	8008c7e <_dtoa_r+0x48e>
 8009152:	bf00      	nop
 8009154:	40240000 	.word	0x40240000
 8009158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800915a:	bb93      	cbnz	r3, 80091c2 <_dtoa_r+0x9d2>
 800915c:	9b03      	ldr	r3, [sp, #12]
 800915e:	9304      	str	r3, [sp, #16]
 8009160:	9d02      	ldr	r5, [sp, #8]
 8009162:	4631      	mov	r1, r6
 8009164:	4650      	mov	r0, sl
 8009166:	f7ff fab5 	bl	80086d4 <quorem>
 800916a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800916e:	f805 9b01 	strb.w	r9, [r5], #1
 8009172:	9b02      	ldr	r3, [sp, #8]
 8009174:	9a04      	ldr	r2, [sp, #16]
 8009176:	1aeb      	subs	r3, r5, r3
 8009178:	429a      	cmp	r2, r3
 800917a:	f300 80dc 	bgt.w	8009336 <_dtoa_r+0xb46>
 800917e:	9b02      	ldr	r3, [sp, #8]
 8009180:	2a01      	cmp	r2, #1
 8009182:	bfac      	ite	ge
 8009184:	189b      	addge	r3, r3, r2
 8009186:	3301      	addlt	r3, #1
 8009188:	4698      	mov	r8, r3
 800918a:	2300      	movs	r3, #0
 800918c:	9303      	str	r3, [sp, #12]
 800918e:	4651      	mov	r1, sl
 8009190:	2201      	movs	r2, #1
 8009192:	4620      	mov	r0, r4
 8009194:	f000 fcb4 	bl	8009b00 <__lshift>
 8009198:	4631      	mov	r1, r6
 800919a:	4682      	mov	sl, r0
 800919c:	f000 fd01 	bl	8009ba2 <__mcmp>
 80091a0:	2800      	cmp	r0, #0
 80091a2:	f300 808d 	bgt.w	80092c0 <_dtoa_r+0xad0>
 80091a6:	d103      	bne.n	80091b0 <_dtoa_r+0x9c0>
 80091a8:	f019 0f01 	tst.w	r9, #1
 80091ac:	f040 8088 	bne.w	80092c0 <_dtoa_r+0xad0>
 80091b0:	4645      	mov	r5, r8
 80091b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80091b6:	2b30      	cmp	r3, #48	; 0x30
 80091b8:	f105 32ff 	add.w	r2, r5, #4294967295
 80091bc:	d1af      	bne.n	800911e <_dtoa_r+0x92e>
 80091be:	4615      	mov	r5, r2
 80091c0:	e7f7      	b.n	80091b2 <_dtoa_r+0x9c2>
 80091c2:	9b03      	ldr	r3, [sp, #12]
 80091c4:	9304      	str	r3, [sp, #16]
 80091c6:	2d00      	cmp	r5, #0
 80091c8:	dd05      	ble.n	80091d6 <_dtoa_r+0x9e6>
 80091ca:	4639      	mov	r1, r7
 80091cc:	462a      	mov	r2, r5
 80091ce:	4620      	mov	r0, r4
 80091d0:	f000 fc96 	bl	8009b00 <__lshift>
 80091d4:	4607      	mov	r7, r0
 80091d6:	f1b8 0f00 	cmp.w	r8, #0
 80091da:	d04c      	beq.n	8009276 <_dtoa_r+0xa86>
 80091dc:	6879      	ldr	r1, [r7, #4]
 80091de:	4620      	mov	r0, r4
 80091e0:	f000 fad5 	bl	800978e <_Balloc>
 80091e4:	693a      	ldr	r2, [r7, #16]
 80091e6:	3202      	adds	r2, #2
 80091e8:	4605      	mov	r5, r0
 80091ea:	0092      	lsls	r2, r2, #2
 80091ec:	f107 010c 	add.w	r1, r7, #12
 80091f0:	300c      	adds	r0, #12
 80091f2:	f000 fac1 	bl	8009778 <memcpy>
 80091f6:	2201      	movs	r2, #1
 80091f8:	4629      	mov	r1, r5
 80091fa:	4620      	mov	r0, r4
 80091fc:	f000 fc80 	bl	8009b00 <__lshift>
 8009200:	9b00      	ldr	r3, [sp, #0]
 8009202:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009206:	9703      	str	r7, [sp, #12]
 8009208:	f003 0301 	and.w	r3, r3, #1
 800920c:	4607      	mov	r7, r0
 800920e:	9305      	str	r3, [sp, #20]
 8009210:	4631      	mov	r1, r6
 8009212:	4650      	mov	r0, sl
 8009214:	f7ff fa5e 	bl	80086d4 <quorem>
 8009218:	9903      	ldr	r1, [sp, #12]
 800921a:	4605      	mov	r5, r0
 800921c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009220:	4650      	mov	r0, sl
 8009222:	f000 fcbe 	bl	8009ba2 <__mcmp>
 8009226:	463a      	mov	r2, r7
 8009228:	9000      	str	r0, [sp, #0]
 800922a:	4631      	mov	r1, r6
 800922c:	4620      	mov	r0, r4
 800922e:	f000 fcd2 	bl	8009bd6 <__mdiff>
 8009232:	68c3      	ldr	r3, [r0, #12]
 8009234:	4602      	mov	r2, r0
 8009236:	bb03      	cbnz	r3, 800927a <_dtoa_r+0xa8a>
 8009238:	4601      	mov	r1, r0
 800923a:	9006      	str	r0, [sp, #24]
 800923c:	4650      	mov	r0, sl
 800923e:	f000 fcb0 	bl	8009ba2 <__mcmp>
 8009242:	9a06      	ldr	r2, [sp, #24]
 8009244:	4603      	mov	r3, r0
 8009246:	4611      	mov	r1, r2
 8009248:	4620      	mov	r0, r4
 800924a:	9306      	str	r3, [sp, #24]
 800924c:	f000 fad3 	bl	80097f6 <_Bfree>
 8009250:	9b06      	ldr	r3, [sp, #24]
 8009252:	b9a3      	cbnz	r3, 800927e <_dtoa_r+0xa8e>
 8009254:	9a07      	ldr	r2, [sp, #28]
 8009256:	b992      	cbnz	r2, 800927e <_dtoa_r+0xa8e>
 8009258:	9a05      	ldr	r2, [sp, #20]
 800925a:	b982      	cbnz	r2, 800927e <_dtoa_r+0xa8e>
 800925c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009260:	d029      	beq.n	80092b6 <_dtoa_r+0xac6>
 8009262:	9b00      	ldr	r3, [sp, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	dd01      	ble.n	800926c <_dtoa_r+0xa7c>
 8009268:	f105 0931 	add.w	r9, r5, #49	; 0x31
 800926c:	f108 0501 	add.w	r5, r8, #1
 8009270:	f888 9000 	strb.w	r9, [r8]
 8009274:	e753      	b.n	800911e <_dtoa_r+0x92e>
 8009276:	4638      	mov	r0, r7
 8009278:	e7c2      	b.n	8009200 <_dtoa_r+0xa10>
 800927a:	2301      	movs	r3, #1
 800927c:	e7e3      	b.n	8009246 <_dtoa_r+0xa56>
 800927e:	9a00      	ldr	r2, [sp, #0]
 8009280:	2a00      	cmp	r2, #0
 8009282:	db04      	blt.n	800928e <_dtoa_r+0xa9e>
 8009284:	d125      	bne.n	80092d2 <_dtoa_r+0xae2>
 8009286:	9a07      	ldr	r2, [sp, #28]
 8009288:	bb1a      	cbnz	r2, 80092d2 <_dtoa_r+0xae2>
 800928a:	9a05      	ldr	r2, [sp, #20]
 800928c:	bb0a      	cbnz	r2, 80092d2 <_dtoa_r+0xae2>
 800928e:	2b00      	cmp	r3, #0
 8009290:	ddec      	ble.n	800926c <_dtoa_r+0xa7c>
 8009292:	4651      	mov	r1, sl
 8009294:	2201      	movs	r2, #1
 8009296:	4620      	mov	r0, r4
 8009298:	f000 fc32 	bl	8009b00 <__lshift>
 800929c:	4631      	mov	r1, r6
 800929e:	4682      	mov	sl, r0
 80092a0:	f000 fc7f 	bl	8009ba2 <__mcmp>
 80092a4:	2800      	cmp	r0, #0
 80092a6:	dc03      	bgt.n	80092b0 <_dtoa_r+0xac0>
 80092a8:	d1e0      	bne.n	800926c <_dtoa_r+0xa7c>
 80092aa:	f019 0f01 	tst.w	r9, #1
 80092ae:	d0dd      	beq.n	800926c <_dtoa_r+0xa7c>
 80092b0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80092b4:	d1d8      	bne.n	8009268 <_dtoa_r+0xa78>
 80092b6:	2339      	movs	r3, #57	; 0x39
 80092b8:	f888 3000 	strb.w	r3, [r8]
 80092bc:	f108 0801 	add.w	r8, r8, #1
 80092c0:	4645      	mov	r5, r8
 80092c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80092c6:	2b39      	cmp	r3, #57	; 0x39
 80092c8:	f105 32ff 	add.w	r2, r5, #4294967295
 80092cc:	d03b      	beq.n	8009346 <_dtoa_r+0xb56>
 80092ce:	3301      	adds	r3, #1
 80092d0:	e040      	b.n	8009354 <_dtoa_r+0xb64>
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	f108 0501 	add.w	r5, r8, #1
 80092d8:	dd05      	ble.n	80092e6 <_dtoa_r+0xaf6>
 80092da:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80092de:	d0ea      	beq.n	80092b6 <_dtoa_r+0xac6>
 80092e0:	f109 0901 	add.w	r9, r9, #1
 80092e4:	e7c4      	b.n	8009270 <_dtoa_r+0xa80>
 80092e6:	9b02      	ldr	r3, [sp, #8]
 80092e8:	9a04      	ldr	r2, [sp, #16]
 80092ea:	f805 9c01 	strb.w	r9, [r5, #-1]
 80092ee:	1aeb      	subs	r3, r5, r3
 80092f0:	4293      	cmp	r3, r2
 80092f2:	46a8      	mov	r8, r5
 80092f4:	f43f af4b 	beq.w	800918e <_dtoa_r+0x99e>
 80092f8:	4651      	mov	r1, sl
 80092fa:	2300      	movs	r3, #0
 80092fc:	220a      	movs	r2, #10
 80092fe:	4620      	mov	r0, r4
 8009300:	f000 fa90 	bl	8009824 <__multadd>
 8009304:	9b03      	ldr	r3, [sp, #12]
 8009306:	9903      	ldr	r1, [sp, #12]
 8009308:	42bb      	cmp	r3, r7
 800930a:	4682      	mov	sl, r0
 800930c:	f04f 0300 	mov.w	r3, #0
 8009310:	f04f 020a 	mov.w	r2, #10
 8009314:	4620      	mov	r0, r4
 8009316:	d104      	bne.n	8009322 <_dtoa_r+0xb32>
 8009318:	f000 fa84 	bl	8009824 <__multadd>
 800931c:	9003      	str	r0, [sp, #12]
 800931e:	4607      	mov	r7, r0
 8009320:	e776      	b.n	8009210 <_dtoa_r+0xa20>
 8009322:	f000 fa7f 	bl	8009824 <__multadd>
 8009326:	2300      	movs	r3, #0
 8009328:	9003      	str	r0, [sp, #12]
 800932a:	220a      	movs	r2, #10
 800932c:	4639      	mov	r1, r7
 800932e:	4620      	mov	r0, r4
 8009330:	f000 fa78 	bl	8009824 <__multadd>
 8009334:	e7f3      	b.n	800931e <_dtoa_r+0xb2e>
 8009336:	4651      	mov	r1, sl
 8009338:	2300      	movs	r3, #0
 800933a:	220a      	movs	r2, #10
 800933c:	4620      	mov	r0, r4
 800933e:	f000 fa71 	bl	8009824 <__multadd>
 8009342:	4682      	mov	sl, r0
 8009344:	e70d      	b.n	8009162 <_dtoa_r+0x972>
 8009346:	9b02      	ldr	r3, [sp, #8]
 8009348:	4293      	cmp	r3, r2
 800934a:	d105      	bne.n	8009358 <_dtoa_r+0xb68>
 800934c:	9a02      	ldr	r2, [sp, #8]
 800934e:	f10b 0b01 	add.w	fp, fp, #1
 8009352:	2331      	movs	r3, #49	; 0x31
 8009354:	7013      	strb	r3, [r2, #0]
 8009356:	e6e2      	b.n	800911e <_dtoa_r+0x92e>
 8009358:	4615      	mov	r5, r2
 800935a:	e7b2      	b.n	80092c2 <_dtoa_r+0xad2>
 800935c:	4b09      	ldr	r3, [pc, #36]	; (8009384 <_dtoa_r+0xb94>)
 800935e:	f7ff baae 	b.w	80088be <_dtoa_r+0xce>
 8009362:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009364:	2b00      	cmp	r3, #0
 8009366:	f47f aa88 	bne.w	800887a <_dtoa_r+0x8a>
 800936a:	4b07      	ldr	r3, [pc, #28]	; (8009388 <_dtoa_r+0xb98>)
 800936c:	f7ff baa7 	b.w	80088be <_dtoa_r+0xce>
 8009370:	9b04      	ldr	r3, [sp, #16]
 8009372:	2b00      	cmp	r3, #0
 8009374:	f73f aef4 	bgt.w	8009160 <_dtoa_r+0x970>
 8009378:	9b07      	ldr	r3, [sp, #28]
 800937a:	2b02      	cmp	r3, #2
 800937c:	f77f aef0 	ble.w	8009160 <_dtoa_r+0x970>
 8009380:	e6b8      	b.n	80090f4 <_dtoa_r+0x904>
 8009382:	bf00      	nop
 8009384:	0800a8a4 	.word	0x0800a8a4
 8009388:	0800a8c8 	.word	0x0800a8c8

0800938c <__sflush_r>:
 800938c:	898a      	ldrh	r2, [r1, #12]
 800938e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009392:	4605      	mov	r5, r0
 8009394:	0710      	lsls	r0, r2, #28
 8009396:	460c      	mov	r4, r1
 8009398:	d45a      	bmi.n	8009450 <__sflush_r+0xc4>
 800939a:	684b      	ldr	r3, [r1, #4]
 800939c:	2b00      	cmp	r3, #0
 800939e:	dc05      	bgt.n	80093ac <__sflush_r+0x20>
 80093a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	dc02      	bgt.n	80093ac <__sflush_r+0x20>
 80093a6:	2000      	movs	r0, #0
 80093a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80093ae:	2e00      	cmp	r6, #0
 80093b0:	d0f9      	beq.n	80093a6 <__sflush_r+0x1a>
 80093b2:	2300      	movs	r3, #0
 80093b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80093b8:	682f      	ldr	r7, [r5, #0]
 80093ba:	602b      	str	r3, [r5, #0]
 80093bc:	d033      	beq.n	8009426 <__sflush_r+0x9a>
 80093be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80093c0:	89a3      	ldrh	r3, [r4, #12]
 80093c2:	075a      	lsls	r2, r3, #29
 80093c4:	d505      	bpl.n	80093d2 <__sflush_r+0x46>
 80093c6:	6863      	ldr	r3, [r4, #4]
 80093c8:	1ac0      	subs	r0, r0, r3
 80093ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80093cc:	b10b      	cbz	r3, 80093d2 <__sflush_r+0x46>
 80093ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80093d0:	1ac0      	subs	r0, r0, r3
 80093d2:	2300      	movs	r3, #0
 80093d4:	4602      	mov	r2, r0
 80093d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80093d8:	6a21      	ldr	r1, [r4, #32]
 80093da:	4628      	mov	r0, r5
 80093dc:	47b0      	blx	r6
 80093de:	1c43      	adds	r3, r0, #1
 80093e0:	89a3      	ldrh	r3, [r4, #12]
 80093e2:	d106      	bne.n	80093f2 <__sflush_r+0x66>
 80093e4:	6829      	ldr	r1, [r5, #0]
 80093e6:	291d      	cmp	r1, #29
 80093e8:	d84b      	bhi.n	8009482 <__sflush_r+0xf6>
 80093ea:	4a2b      	ldr	r2, [pc, #172]	; (8009498 <__sflush_r+0x10c>)
 80093ec:	40ca      	lsrs	r2, r1
 80093ee:	07d6      	lsls	r6, r2, #31
 80093f0:	d547      	bpl.n	8009482 <__sflush_r+0xf6>
 80093f2:	2200      	movs	r2, #0
 80093f4:	6062      	str	r2, [r4, #4]
 80093f6:	04d9      	lsls	r1, r3, #19
 80093f8:	6922      	ldr	r2, [r4, #16]
 80093fa:	6022      	str	r2, [r4, #0]
 80093fc:	d504      	bpl.n	8009408 <__sflush_r+0x7c>
 80093fe:	1c42      	adds	r2, r0, #1
 8009400:	d101      	bne.n	8009406 <__sflush_r+0x7a>
 8009402:	682b      	ldr	r3, [r5, #0]
 8009404:	b903      	cbnz	r3, 8009408 <__sflush_r+0x7c>
 8009406:	6560      	str	r0, [r4, #84]	; 0x54
 8009408:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800940a:	602f      	str	r7, [r5, #0]
 800940c:	2900      	cmp	r1, #0
 800940e:	d0ca      	beq.n	80093a6 <__sflush_r+0x1a>
 8009410:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009414:	4299      	cmp	r1, r3
 8009416:	d002      	beq.n	800941e <__sflush_r+0x92>
 8009418:	4628      	mov	r0, r5
 800941a:	f000 fc97 	bl	8009d4c <_free_r>
 800941e:	2000      	movs	r0, #0
 8009420:	6360      	str	r0, [r4, #52]	; 0x34
 8009422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009426:	6a21      	ldr	r1, [r4, #32]
 8009428:	2301      	movs	r3, #1
 800942a:	4628      	mov	r0, r5
 800942c:	47b0      	blx	r6
 800942e:	1c41      	adds	r1, r0, #1
 8009430:	d1c6      	bne.n	80093c0 <__sflush_r+0x34>
 8009432:	682b      	ldr	r3, [r5, #0]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d0c3      	beq.n	80093c0 <__sflush_r+0x34>
 8009438:	2b1d      	cmp	r3, #29
 800943a:	d001      	beq.n	8009440 <__sflush_r+0xb4>
 800943c:	2b16      	cmp	r3, #22
 800943e:	d101      	bne.n	8009444 <__sflush_r+0xb8>
 8009440:	602f      	str	r7, [r5, #0]
 8009442:	e7b0      	b.n	80093a6 <__sflush_r+0x1a>
 8009444:	89a3      	ldrh	r3, [r4, #12]
 8009446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800944a:	81a3      	strh	r3, [r4, #12]
 800944c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009450:	690f      	ldr	r7, [r1, #16]
 8009452:	2f00      	cmp	r7, #0
 8009454:	d0a7      	beq.n	80093a6 <__sflush_r+0x1a>
 8009456:	0793      	lsls	r3, r2, #30
 8009458:	680e      	ldr	r6, [r1, #0]
 800945a:	bf08      	it	eq
 800945c:	694b      	ldreq	r3, [r1, #20]
 800945e:	600f      	str	r7, [r1, #0]
 8009460:	bf18      	it	ne
 8009462:	2300      	movne	r3, #0
 8009464:	eba6 0807 	sub.w	r8, r6, r7
 8009468:	608b      	str	r3, [r1, #8]
 800946a:	f1b8 0f00 	cmp.w	r8, #0
 800946e:	dd9a      	ble.n	80093a6 <__sflush_r+0x1a>
 8009470:	4643      	mov	r3, r8
 8009472:	463a      	mov	r2, r7
 8009474:	6a21      	ldr	r1, [r4, #32]
 8009476:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009478:	4628      	mov	r0, r5
 800947a:	47b0      	blx	r6
 800947c:	2800      	cmp	r0, #0
 800947e:	dc07      	bgt.n	8009490 <__sflush_r+0x104>
 8009480:	89a3      	ldrh	r3, [r4, #12]
 8009482:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009486:	81a3      	strh	r3, [r4, #12]
 8009488:	f04f 30ff 	mov.w	r0, #4294967295
 800948c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009490:	4407      	add	r7, r0
 8009492:	eba8 0800 	sub.w	r8, r8, r0
 8009496:	e7e8      	b.n	800946a <__sflush_r+0xde>
 8009498:	20400001 	.word	0x20400001

0800949c <_fflush_r>:
 800949c:	b538      	push	{r3, r4, r5, lr}
 800949e:	690b      	ldr	r3, [r1, #16]
 80094a0:	4605      	mov	r5, r0
 80094a2:	460c      	mov	r4, r1
 80094a4:	b1db      	cbz	r3, 80094de <_fflush_r+0x42>
 80094a6:	b118      	cbz	r0, 80094b0 <_fflush_r+0x14>
 80094a8:	6983      	ldr	r3, [r0, #24]
 80094aa:	b90b      	cbnz	r3, 80094b0 <_fflush_r+0x14>
 80094ac:	f000 f860 	bl	8009570 <__sinit>
 80094b0:	4b0c      	ldr	r3, [pc, #48]	; (80094e4 <_fflush_r+0x48>)
 80094b2:	429c      	cmp	r4, r3
 80094b4:	d109      	bne.n	80094ca <_fflush_r+0x2e>
 80094b6:	686c      	ldr	r4, [r5, #4]
 80094b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094bc:	b17b      	cbz	r3, 80094de <_fflush_r+0x42>
 80094be:	4621      	mov	r1, r4
 80094c0:	4628      	mov	r0, r5
 80094c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094c6:	f7ff bf61 	b.w	800938c <__sflush_r>
 80094ca:	4b07      	ldr	r3, [pc, #28]	; (80094e8 <_fflush_r+0x4c>)
 80094cc:	429c      	cmp	r4, r3
 80094ce:	d101      	bne.n	80094d4 <_fflush_r+0x38>
 80094d0:	68ac      	ldr	r4, [r5, #8]
 80094d2:	e7f1      	b.n	80094b8 <_fflush_r+0x1c>
 80094d4:	4b05      	ldr	r3, [pc, #20]	; (80094ec <_fflush_r+0x50>)
 80094d6:	429c      	cmp	r4, r3
 80094d8:	bf08      	it	eq
 80094da:	68ec      	ldreq	r4, [r5, #12]
 80094dc:	e7ec      	b.n	80094b8 <_fflush_r+0x1c>
 80094de:	2000      	movs	r0, #0
 80094e0:	bd38      	pop	{r3, r4, r5, pc}
 80094e2:	bf00      	nop
 80094e4:	0800a8f8 	.word	0x0800a8f8
 80094e8:	0800a918 	.word	0x0800a918
 80094ec:	0800a8d8 	.word	0x0800a8d8

080094f0 <_cleanup_r>:
 80094f0:	4901      	ldr	r1, [pc, #4]	; (80094f8 <_cleanup_r+0x8>)
 80094f2:	f000 b8a9 	b.w	8009648 <_fwalk_reent>
 80094f6:	bf00      	nop
 80094f8:	0800949d 	.word	0x0800949d

080094fc <std.isra.0>:
 80094fc:	2300      	movs	r3, #0
 80094fe:	b510      	push	{r4, lr}
 8009500:	4604      	mov	r4, r0
 8009502:	6003      	str	r3, [r0, #0]
 8009504:	6043      	str	r3, [r0, #4]
 8009506:	6083      	str	r3, [r0, #8]
 8009508:	8181      	strh	r1, [r0, #12]
 800950a:	6643      	str	r3, [r0, #100]	; 0x64
 800950c:	81c2      	strh	r2, [r0, #14]
 800950e:	6103      	str	r3, [r0, #16]
 8009510:	6143      	str	r3, [r0, #20]
 8009512:	6183      	str	r3, [r0, #24]
 8009514:	4619      	mov	r1, r3
 8009516:	2208      	movs	r2, #8
 8009518:	305c      	adds	r0, #92	; 0x5c
 800951a:	f7fe fb2b 	bl	8007b74 <memset>
 800951e:	4b05      	ldr	r3, [pc, #20]	; (8009534 <std.isra.0+0x38>)
 8009520:	6263      	str	r3, [r4, #36]	; 0x24
 8009522:	4b05      	ldr	r3, [pc, #20]	; (8009538 <std.isra.0+0x3c>)
 8009524:	62a3      	str	r3, [r4, #40]	; 0x28
 8009526:	4b05      	ldr	r3, [pc, #20]	; (800953c <std.isra.0+0x40>)
 8009528:	62e3      	str	r3, [r4, #44]	; 0x2c
 800952a:	4b05      	ldr	r3, [pc, #20]	; (8009540 <std.isra.0+0x44>)
 800952c:	6224      	str	r4, [r4, #32]
 800952e:	6323      	str	r3, [r4, #48]	; 0x30
 8009530:	bd10      	pop	{r4, pc}
 8009532:	bf00      	nop
 8009534:	0800a145 	.word	0x0800a145
 8009538:	0800a167 	.word	0x0800a167
 800953c:	0800a19f 	.word	0x0800a19f
 8009540:	0800a1c3 	.word	0x0800a1c3

08009544 <__sfmoreglue>:
 8009544:	b570      	push	{r4, r5, r6, lr}
 8009546:	1e4a      	subs	r2, r1, #1
 8009548:	2568      	movs	r5, #104	; 0x68
 800954a:	4355      	muls	r5, r2
 800954c:	460e      	mov	r6, r1
 800954e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009552:	f000 fc49 	bl	8009de8 <_malloc_r>
 8009556:	4604      	mov	r4, r0
 8009558:	b140      	cbz	r0, 800956c <__sfmoreglue+0x28>
 800955a:	2100      	movs	r1, #0
 800955c:	e880 0042 	stmia.w	r0, {r1, r6}
 8009560:	300c      	adds	r0, #12
 8009562:	60a0      	str	r0, [r4, #8]
 8009564:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009568:	f7fe fb04 	bl	8007b74 <memset>
 800956c:	4620      	mov	r0, r4
 800956e:	bd70      	pop	{r4, r5, r6, pc}

08009570 <__sinit>:
 8009570:	6983      	ldr	r3, [r0, #24]
 8009572:	b510      	push	{r4, lr}
 8009574:	4604      	mov	r4, r0
 8009576:	bb33      	cbnz	r3, 80095c6 <__sinit+0x56>
 8009578:	6483      	str	r3, [r0, #72]	; 0x48
 800957a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800957c:	6503      	str	r3, [r0, #80]	; 0x50
 800957e:	4b12      	ldr	r3, [pc, #72]	; (80095c8 <__sinit+0x58>)
 8009580:	4a12      	ldr	r2, [pc, #72]	; (80095cc <__sinit+0x5c>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	6282      	str	r2, [r0, #40]	; 0x28
 8009586:	4298      	cmp	r0, r3
 8009588:	bf04      	itt	eq
 800958a:	2301      	moveq	r3, #1
 800958c:	6183      	streq	r3, [r0, #24]
 800958e:	f000 f81f 	bl	80095d0 <__sfp>
 8009592:	6060      	str	r0, [r4, #4]
 8009594:	4620      	mov	r0, r4
 8009596:	f000 f81b 	bl	80095d0 <__sfp>
 800959a:	60a0      	str	r0, [r4, #8]
 800959c:	4620      	mov	r0, r4
 800959e:	f000 f817 	bl	80095d0 <__sfp>
 80095a2:	2200      	movs	r2, #0
 80095a4:	60e0      	str	r0, [r4, #12]
 80095a6:	2104      	movs	r1, #4
 80095a8:	6860      	ldr	r0, [r4, #4]
 80095aa:	f7ff ffa7 	bl	80094fc <std.isra.0>
 80095ae:	2201      	movs	r2, #1
 80095b0:	2109      	movs	r1, #9
 80095b2:	68a0      	ldr	r0, [r4, #8]
 80095b4:	f7ff ffa2 	bl	80094fc <std.isra.0>
 80095b8:	2202      	movs	r2, #2
 80095ba:	2112      	movs	r1, #18
 80095bc:	68e0      	ldr	r0, [r4, #12]
 80095be:	f7ff ff9d 	bl	80094fc <std.isra.0>
 80095c2:	2301      	movs	r3, #1
 80095c4:	61a3      	str	r3, [r4, #24]
 80095c6:	bd10      	pop	{r4, pc}
 80095c8:	0800a890 	.word	0x0800a890
 80095cc:	080094f1 	.word	0x080094f1

080095d0 <__sfp>:
 80095d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095d2:	4b1c      	ldr	r3, [pc, #112]	; (8009644 <__sfp+0x74>)
 80095d4:	681e      	ldr	r6, [r3, #0]
 80095d6:	69b3      	ldr	r3, [r6, #24]
 80095d8:	4607      	mov	r7, r0
 80095da:	b913      	cbnz	r3, 80095e2 <__sfp+0x12>
 80095dc:	4630      	mov	r0, r6
 80095de:	f7ff ffc7 	bl	8009570 <__sinit>
 80095e2:	3648      	adds	r6, #72	; 0x48
 80095e4:	68b4      	ldr	r4, [r6, #8]
 80095e6:	6873      	ldr	r3, [r6, #4]
 80095e8:	3b01      	subs	r3, #1
 80095ea:	d503      	bpl.n	80095f4 <__sfp+0x24>
 80095ec:	6833      	ldr	r3, [r6, #0]
 80095ee:	b133      	cbz	r3, 80095fe <__sfp+0x2e>
 80095f0:	6836      	ldr	r6, [r6, #0]
 80095f2:	e7f7      	b.n	80095e4 <__sfp+0x14>
 80095f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80095f8:	b16d      	cbz	r5, 8009616 <__sfp+0x46>
 80095fa:	3468      	adds	r4, #104	; 0x68
 80095fc:	e7f4      	b.n	80095e8 <__sfp+0x18>
 80095fe:	2104      	movs	r1, #4
 8009600:	4638      	mov	r0, r7
 8009602:	f7ff ff9f 	bl	8009544 <__sfmoreglue>
 8009606:	6030      	str	r0, [r6, #0]
 8009608:	2800      	cmp	r0, #0
 800960a:	d1f1      	bne.n	80095f0 <__sfp+0x20>
 800960c:	230c      	movs	r3, #12
 800960e:	603b      	str	r3, [r7, #0]
 8009610:	4604      	mov	r4, r0
 8009612:	4620      	mov	r0, r4
 8009614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009616:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800961a:	81e3      	strh	r3, [r4, #14]
 800961c:	2301      	movs	r3, #1
 800961e:	81a3      	strh	r3, [r4, #12]
 8009620:	6665      	str	r5, [r4, #100]	; 0x64
 8009622:	6025      	str	r5, [r4, #0]
 8009624:	60a5      	str	r5, [r4, #8]
 8009626:	6065      	str	r5, [r4, #4]
 8009628:	6125      	str	r5, [r4, #16]
 800962a:	6165      	str	r5, [r4, #20]
 800962c:	61a5      	str	r5, [r4, #24]
 800962e:	2208      	movs	r2, #8
 8009630:	4629      	mov	r1, r5
 8009632:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009636:	f7fe fa9d 	bl	8007b74 <memset>
 800963a:	6365      	str	r5, [r4, #52]	; 0x34
 800963c:	63a5      	str	r5, [r4, #56]	; 0x38
 800963e:	64a5      	str	r5, [r4, #72]	; 0x48
 8009640:	64e5      	str	r5, [r4, #76]	; 0x4c
 8009642:	e7e6      	b.n	8009612 <__sfp+0x42>
 8009644:	0800a890 	.word	0x0800a890

08009648 <_fwalk_reent>:
 8009648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800964c:	4680      	mov	r8, r0
 800964e:	4689      	mov	r9, r1
 8009650:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009654:	2600      	movs	r6, #0
 8009656:	b914      	cbnz	r4, 800965e <_fwalk_reent+0x16>
 8009658:	4630      	mov	r0, r6
 800965a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800965e:	68a5      	ldr	r5, [r4, #8]
 8009660:	6867      	ldr	r7, [r4, #4]
 8009662:	3f01      	subs	r7, #1
 8009664:	d501      	bpl.n	800966a <_fwalk_reent+0x22>
 8009666:	6824      	ldr	r4, [r4, #0]
 8009668:	e7f5      	b.n	8009656 <_fwalk_reent+0xe>
 800966a:	89ab      	ldrh	r3, [r5, #12]
 800966c:	2b01      	cmp	r3, #1
 800966e:	d907      	bls.n	8009680 <_fwalk_reent+0x38>
 8009670:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009674:	3301      	adds	r3, #1
 8009676:	d003      	beq.n	8009680 <_fwalk_reent+0x38>
 8009678:	4629      	mov	r1, r5
 800967a:	4640      	mov	r0, r8
 800967c:	47c8      	blx	r9
 800967e:	4306      	orrs	r6, r0
 8009680:	3568      	adds	r5, #104	; 0x68
 8009682:	e7ee      	b.n	8009662 <_fwalk_reent+0x1a>

08009684 <_localeconv_r>:
 8009684:	4b04      	ldr	r3, [pc, #16]	; (8009698 <_localeconv_r+0x14>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	6a18      	ldr	r0, [r3, #32]
 800968a:	4b04      	ldr	r3, [pc, #16]	; (800969c <_localeconv_r+0x18>)
 800968c:	2800      	cmp	r0, #0
 800968e:	bf08      	it	eq
 8009690:	4618      	moveq	r0, r3
 8009692:	30f0      	adds	r0, #240	; 0xf0
 8009694:	4770      	bx	lr
 8009696:	bf00      	nop
 8009698:	20000008 	.word	0x20000008
 800969c:	2000006c 	.word	0x2000006c

080096a0 <__swhatbuf_r>:
 80096a0:	b570      	push	{r4, r5, r6, lr}
 80096a2:	460e      	mov	r6, r1
 80096a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096a8:	2900      	cmp	r1, #0
 80096aa:	b090      	sub	sp, #64	; 0x40
 80096ac:	4614      	mov	r4, r2
 80096ae:	461d      	mov	r5, r3
 80096b0:	da07      	bge.n	80096c2 <__swhatbuf_r+0x22>
 80096b2:	2300      	movs	r3, #0
 80096b4:	602b      	str	r3, [r5, #0]
 80096b6:	89b3      	ldrh	r3, [r6, #12]
 80096b8:	061a      	lsls	r2, r3, #24
 80096ba:	d410      	bmi.n	80096de <__swhatbuf_r+0x3e>
 80096bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096c0:	e00e      	b.n	80096e0 <__swhatbuf_r+0x40>
 80096c2:	aa01      	add	r2, sp, #4
 80096c4:	f000 fda4 	bl	800a210 <_fstat_r>
 80096c8:	2800      	cmp	r0, #0
 80096ca:	dbf2      	blt.n	80096b2 <__swhatbuf_r+0x12>
 80096cc:	9a02      	ldr	r2, [sp, #8]
 80096ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80096d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80096d6:	425a      	negs	r2, r3
 80096d8:	415a      	adcs	r2, r3
 80096da:	602a      	str	r2, [r5, #0]
 80096dc:	e7ee      	b.n	80096bc <__swhatbuf_r+0x1c>
 80096de:	2340      	movs	r3, #64	; 0x40
 80096e0:	2000      	movs	r0, #0
 80096e2:	6023      	str	r3, [r4, #0]
 80096e4:	b010      	add	sp, #64	; 0x40
 80096e6:	bd70      	pop	{r4, r5, r6, pc}

080096e8 <__smakebuf_r>:
 80096e8:	898b      	ldrh	r3, [r1, #12]
 80096ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80096ec:	079d      	lsls	r5, r3, #30
 80096ee:	4606      	mov	r6, r0
 80096f0:	460c      	mov	r4, r1
 80096f2:	d507      	bpl.n	8009704 <__smakebuf_r+0x1c>
 80096f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80096f8:	6023      	str	r3, [r4, #0]
 80096fa:	6123      	str	r3, [r4, #16]
 80096fc:	2301      	movs	r3, #1
 80096fe:	6163      	str	r3, [r4, #20]
 8009700:	b002      	add	sp, #8
 8009702:	bd70      	pop	{r4, r5, r6, pc}
 8009704:	ab01      	add	r3, sp, #4
 8009706:	466a      	mov	r2, sp
 8009708:	f7ff ffca 	bl	80096a0 <__swhatbuf_r>
 800970c:	9900      	ldr	r1, [sp, #0]
 800970e:	4605      	mov	r5, r0
 8009710:	4630      	mov	r0, r6
 8009712:	f000 fb69 	bl	8009de8 <_malloc_r>
 8009716:	b948      	cbnz	r0, 800972c <__smakebuf_r+0x44>
 8009718:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800971c:	059a      	lsls	r2, r3, #22
 800971e:	d4ef      	bmi.n	8009700 <__smakebuf_r+0x18>
 8009720:	f023 0303 	bic.w	r3, r3, #3
 8009724:	f043 0302 	orr.w	r3, r3, #2
 8009728:	81a3      	strh	r3, [r4, #12]
 800972a:	e7e3      	b.n	80096f4 <__smakebuf_r+0xc>
 800972c:	4b0d      	ldr	r3, [pc, #52]	; (8009764 <__smakebuf_r+0x7c>)
 800972e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009730:	89a3      	ldrh	r3, [r4, #12]
 8009732:	6020      	str	r0, [r4, #0]
 8009734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009738:	81a3      	strh	r3, [r4, #12]
 800973a:	9b00      	ldr	r3, [sp, #0]
 800973c:	6163      	str	r3, [r4, #20]
 800973e:	9b01      	ldr	r3, [sp, #4]
 8009740:	6120      	str	r0, [r4, #16]
 8009742:	b15b      	cbz	r3, 800975c <__smakebuf_r+0x74>
 8009744:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009748:	4630      	mov	r0, r6
 800974a:	f000 fd73 	bl	800a234 <_isatty_r>
 800974e:	b128      	cbz	r0, 800975c <__smakebuf_r+0x74>
 8009750:	89a3      	ldrh	r3, [r4, #12]
 8009752:	f023 0303 	bic.w	r3, r3, #3
 8009756:	f043 0301 	orr.w	r3, r3, #1
 800975a:	81a3      	strh	r3, [r4, #12]
 800975c:	89a3      	ldrh	r3, [r4, #12]
 800975e:	431d      	orrs	r5, r3
 8009760:	81a5      	strh	r5, [r4, #12]
 8009762:	e7cd      	b.n	8009700 <__smakebuf_r+0x18>
 8009764:	080094f1 	.word	0x080094f1

08009768 <malloc>:
 8009768:	4b02      	ldr	r3, [pc, #8]	; (8009774 <malloc+0xc>)
 800976a:	4601      	mov	r1, r0
 800976c:	6818      	ldr	r0, [r3, #0]
 800976e:	f000 bb3b 	b.w	8009de8 <_malloc_r>
 8009772:	bf00      	nop
 8009774:	20000008 	.word	0x20000008

08009778 <memcpy>:
 8009778:	b510      	push	{r4, lr}
 800977a:	1e43      	subs	r3, r0, #1
 800977c:	440a      	add	r2, r1
 800977e:	4291      	cmp	r1, r2
 8009780:	d100      	bne.n	8009784 <memcpy+0xc>
 8009782:	bd10      	pop	{r4, pc}
 8009784:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009788:	f803 4f01 	strb.w	r4, [r3, #1]!
 800978c:	e7f7      	b.n	800977e <memcpy+0x6>

0800978e <_Balloc>:
 800978e:	b570      	push	{r4, r5, r6, lr}
 8009790:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009792:	4604      	mov	r4, r0
 8009794:	460e      	mov	r6, r1
 8009796:	b93d      	cbnz	r5, 80097a8 <_Balloc+0x1a>
 8009798:	2010      	movs	r0, #16
 800979a:	f7ff ffe5 	bl	8009768 <malloc>
 800979e:	6260      	str	r0, [r4, #36]	; 0x24
 80097a0:	6045      	str	r5, [r0, #4]
 80097a2:	6085      	str	r5, [r0, #8]
 80097a4:	6005      	str	r5, [r0, #0]
 80097a6:	60c5      	str	r5, [r0, #12]
 80097a8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80097aa:	68eb      	ldr	r3, [r5, #12]
 80097ac:	b183      	cbz	r3, 80097d0 <_Balloc+0x42>
 80097ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097b0:	68db      	ldr	r3, [r3, #12]
 80097b2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80097b6:	b9b8      	cbnz	r0, 80097e8 <_Balloc+0x5a>
 80097b8:	2101      	movs	r1, #1
 80097ba:	fa01 f506 	lsl.w	r5, r1, r6
 80097be:	1d6a      	adds	r2, r5, #5
 80097c0:	0092      	lsls	r2, r2, #2
 80097c2:	4620      	mov	r0, r4
 80097c4:	f000 fab4 	bl	8009d30 <_calloc_r>
 80097c8:	b160      	cbz	r0, 80097e4 <_Balloc+0x56>
 80097ca:	6046      	str	r6, [r0, #4]
 80097cc:	6085      	str	r5, [r0, #8]
 80097ce:	e00e      	b.n	80097ee <_Balloc+0x60>
 80097d0:	2221      	movs	r2, #33	; 0x21
 80097d2:	2104      	movs	r1, #4
 80097d4:	4620      	mov	r0, r4
 80097d6:	f000 faab 	bl	8009d30 <_calloc_r>
 80097da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097dc:	60e8      	str	r0, [r5, #12]
 80097de:	68db      	ldr	r3, [r3, #12]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d1e4      	bne.n	80097ae <_Balloc+0x20>
 80097e4:	2000      	movs	r0, #0
 80097e6:	bd70      	pop	{r4, r5, r6, pc}
 80097e8:	6802      	ldr	r2, [r0, #0]
 80097ea:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80097ee:	2300      	movs	r3, #0
 80097f0:	6103      	str	r3, [r0, #16]
 80097f2:	60c3      	str	r3, [r0, #12]
 80097f4:	bd70      	pop	{r4, r5, r6, pc}

080097f6 <_Bfree>:
 80097f6:	b570      	push	{r4, r5, r6, lr}
 80097f8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80097fa:	4606      	mov	r6, r0
 80097fc:	460d      	mov	r5, r1
 80097fe:	b93c      	cbnz	r4, 8009810 <_Bfree+0x1a>
 8009800:	2010      	movs	r0, #16
 8009802:	f7ff ffb1 	bl	8009768 <malloc>
 8009806:	6270      	str	r0, [r6, #36]	; 0x24
 8009808:	6044      	str	r4, [r0, #4]
 800980a:	6084      	str	r4, [r0, #8]
 800980c:	6004      	str	r4, [r0, #0]
 800980e:	60c4      	str	r4, [r0, #12]
 8009810:	b13d      	cbz	r5, 8009822 <_Bfree+0x2c>
 8009812:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009814:	686a      	ldr	r2, [r5, #4]
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800981c:	6029      	str	r1, [r5, #0]
 800981e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009822:	bd70      	pop	{r4, r5, r6, pc}

08009824 <__multadd>:
 8009824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009828:	690d      	ldr	r5, [r1, #16]
 800982a:	461f      	mov	r7, r3
 800982c:	4606      	mov	r6, r0
 800982e:	460c      	mov	r4, r1
 8009830:	f101 0e14 	add.w	lr, r1, #20
 8009834:	2300      	movs	r3, #0
 8009836:	f8de 0000 	ldr.w	r0, [lr]
 800983a:	b281      	uxth	r1, r0
 800983c:	fb02 7101 	mla	r1, r2, r1, r7
 8009840:	0c0f      	lsrs	r7, r1, #16
 8009842:	0c00      	lsrs	r0, r0, #16
 8009844:	fb02 7000 	mla	r0, r2, r0, r7
 8009848:	b289      	uxth	r1, r1
 800984a:	3301      	adds	r3, #1
 800984c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009850:	429d      	cmp	r5, r3
 8009852:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009856:	f84e 1b04 	str.w	r1, [lr], #4
 800985a:	dcec      	bgt.n	8009836 <__multadd+0x12>
 800985c:	b1d7      	cbz	r7, 8009894 <__multadd+0x70>
 800985e:	68a3      	ldr	r3, [r4, #8]
 8009860:	429d      	cmp	r5, r3
 8009862:	db12      	blt.n	800988a <__multadd+0x66>
 8009864:	6861      	ldr	r1, [r4, #4]
 8009866:	4630      	mov	r0, r6
 8009868:	3101      	adds	r1, #1
 800986a:	f7ff ff90 	bl	800978e <_Balloc>
 800986e:	6922      	ldr	r2, [r4, #16]
 8009870:	3202      	adds	r2, #2
 8009872:	f104 010c 	add.w	r1, r4, #12
 8009876:	4680      	mov	r8, r0
 8009878:	0092      	lsls	r2, r2, #2
 800987a:	300c      	adds	r0, #12
 800987c:	f7ff ff7c 	bl	8009778 <memcpy>
 8009880:	4621      	mov	r1, r4
 8009882:	4630      	mov	r0, r6
 8009884:	f7ff ffb7 	bl	80097f6 <_Bfree>
 8009888:	4644      	mov	r4, r8
 800988a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800988e:	3501      	adds	r5, #1
 8009890:	615f      	str	r7, [r3, #20]
 8009892:	6125      	str	r5, [r4, #16]
 8009894:	4620      	mov	r0, r4
 8009896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800989a <__hi0bits>:
 800989a:	0c02      	lsrs	r2, r0, #16
 800989c:	0412      	lsls	r2, r2, #16
 800989e:	4603      	mov	r3, r0
 80098a0:	b9b2      	cbnz	r2, 80098d0 <__hi0bits+0x36>
 80098a2:	0403      	lsls	r3, r0, #16
 80098a4:	2010      	movs	r0, #16
 80098a6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80098aa:	bf04      	itt	eq
 80098ac:	021b      	lsleq	r3, r3, #8
 80098ae:	3008      	addeq	r0, #8
 80098b0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80098b4:	bf04      	itt	eq
 80098b6:	011b      	lsleq	r3, r3, #4
 80098b8:	3004      	addeq	r0, #4
 80098ba:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80098be:	bf04      	itt	eq
 80098c0:	009b      	lsleq	r3, r3, #2
 80098c2:	3002      	addeq	r0, #2
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	db06      	blt.n	80098d6 <__hi0bits+0x3c>
 80098c8:	005b      	lsls	r3, r3, #1
 80098ca:	d503      	bpl.n	80098d4 <__hi0bits+0x3a>
 80098cc:	3001      	adds	r0, #1
 80098ce:	4770      	bx	lr
 80098d0:	2000      	movs	r0, #0
 80098d2:	e7e8      	b.n	80098a6 <__hi0bits+0xc>
 80098d4:	2020      	movs	r0, #32
 80098d6:	4770      	bx	lr

080098d8 <__lo0bits>:
 80098d8:	6803      	ldr	r3, [r0, #0]
 80098da:	f013 0207 	ands.w	r2, r3, #7
 80098de:	4601      	mov	r1, r0
 80098e0:	d00b      	beq.n	80098fa <__lo0bits+0x22>
 80098e2:	07da      	lsls	r2, r3, #31
 80098e4:	d423      	bmi.n	800992e <__lo0bits+0x56>
 80098e6:	0798      	lsls	r0, r3, #30
 80098e8:	bf49      	itett	mi
 80098ea:	085b      	lsrmi	r3, r3, #1
 80098ec:	089b      	lsrpl	r3, r3, #2
 80098ee:	2001      	movmi	r0, #1
 80098f0:	600b      	strmi	r3, [r1, #0]
 80098f2:	bf5c      	itt	pl
 80098f4:	600b      	strpl	r3, [r1, #0]
 80098f6:	2002      	movpl	r0, #2
 80098f8:	4770      	bx	lr
 80098fa:	b298      	uxth	r0, r3
 80098fc:	b9a8      	cbnz	r0, 800992a <__lo0bits+0x52>
 80098fe:	0c1b      	lsrs	r3, r3, #16
 8009900:	2010      	movs	r0, #16
 8009902:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009906:	bf04      	itt	eq
 8009908:	0a1b      	lsreq	r3, r3, #8
 800990a:	3008      	addeq	r0, #8
 800990c:	071a      	lsls	r2, r3, #28
 800990e:	bf04      	itt	eq
 8009910:	091b      	lsreq	r3, r3, #4
 8009912:	3004      	addeq	r0, #4
 8009914:	079a      	lsls	r2, r3, #30
 8009916:	bf04      	itt	eq
 8009918:	089b      	lsreq	r3, r3, #2
 800991a:	3002      	addeq	r0, #2
 800991c:	07da      	lsls	r2, r3, #31
 800991e:	d402      	bmi.n	8009926 <__lo0bits+0x4e>
 8009920:	085b      	lsrs	r3, r3, #1
 8009922:	d006      	beq.n	8009932 <__lo0bits+0x5a>
 8009924:	3001      	adds	r0, #1
 8009926:	600b      	str	r3, [r1, #0]
 8009928:	4770      	bx	lr
 800992a:	4610      	mov	r0, r2
 800992c:	e7e9      	b.n	8009902 <__lo0bits+0x2a>
 800992e:	2000      	movs	r0, #0
 8009930:	4770      	bx	lr
 8009932:	2020      	movs	r0, #32
 8009934:	4770      	bx	lr

08009936 <__i2b>:
 8009936:	b510      	push	{r4, lr}
 8009938:	460c      	mov	r4, r1
 800993a:	2101      	movs	r1, #1
 800993c:	f7ff ff27 	bl	800978e <_Balloc>
 8009940:	2201      	movs	r2, #1
 8009942:	6144      	str	r4, [r0, #20]
 8009944:	6102      	str	r2, [r0, #16]
 8009946:	bd10      	pop	{r4, pc}

08009948 <__multiply>:
 8009948:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800994c:	4614      	mov	r4, r2
 800994e:	690a      	ldr	r2, [r1, #16]
 8009950:	6923      	ldr	r3, [r4, #16]
 8009952:	429a      	cmp	r2, r3
 8009954:	bfb8      	it	lt
 8009956:	460b      	movlt	r3, r1
 8009958:	4689      	mov	r9, r1
 800995a:	bfbc      	itt	lt
 800995c:	46a1      	movlt	r9, r4
 800995e:	461c      	movlt	r4, r3
 8009960:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009964:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009968:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800996c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009970:	eb07 060a 	add.w	r6, r7, sl
 8009974:	429e      	cmp	r6, r3
 8009976:	bfc8      	it	gt
 8009978:	3101      	addgt	r1, #1
 800997a:	f7ff ff08 	bl	800978e <_Balloc>
 800997e:	f100 0514 	add.w	r5, r0, #20
 8009982:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009986:	462b      	mov	r3, r5
 8009988:	2200      	movs	r2, #0
 800998a:	4543      	cmp	r3, r8
 800998c:	d316      	bcc.n	80099bc <__multiply+0x74>
 800998e:	f104 0214 	add.w	r2, r4, #20
 8009992:	f109 0114 	add.w	r1, r9, #20
 8009996:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 800999a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800999e:	9301      	str	r3, [sp, #4]
 80099a0:	9c01      	ldr	r4, [sp, #4]
 80099a2:	4294      	cmp	r4, r2
 80099a4:	4613      	mov	r3, r2
 80099a6:	d80c      	bhi.n	80099c2 <__multiply+0x7a>
 80099a8:	2e00      	cmp	r6, #0
 80099aa:	dd03      	ble.n	80099b4 <__multiply+0x6c>
 80099ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d054      	beq.n	8009a5e <__multiply+0x116>
 80099b4:	6106      	str	r6, [r0, #16]
 80099b6:	b003      	add	sp, #12
 80099b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099bc:	f843 2b04 	str.w	r2, [r3], #4
 80099c0:	e7e3      	b.n	800998a <__multiply+0x42>
 80099c2:	f8b3 a000 	ldrh.w	sl, [r3]
 80099c6:	3204      	adds	r2, #4
 80099c8:	f1ba 0f00 	cmp.w	sl, #0
 80099cc:	d020      	beq.n	8009a10 <__multiply+0xc8>
 80099ce:	46ae      	mov	lr, r5
 80099d0:	4689      	mov	r9, r1
 80099d2:	f04f 0c00 	mov.w	ip, #0
 80099d6:	f859 4b04 	ldr.w	r4, [r9], #4
 80099da:	f8be b000 	ldrh.w	fp, [lr]
 80099de:	b2a3      	uxth	r3, r4
 80099e0:	fb0a b303 	mla	r3, sl, r3, fp
 80099e4:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 80099e8:	f8de 4000 	ldr.w	r4, [lr]
 80099ec:	4463      	add	r3, ip
 80099ee:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80099f2:	fb0a c40b 	mla	r4, sl, fp, ip
 80099f6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009a00:	454f      	cmp	r7, r9
 8009a02:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8009a06:	f84e 3b04 	str.w	r3, [lr], #4
 8009a0a:	d8e4      	bhi.n	80099d6 <__multiply+0x8e>
 8009a0c:	f8ce c000 	str.w	ip, [lr]
 8009a10:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8009a14:	f1b9 0f00 	cmp.w	r9, #0
 8009a18:	d01f      	beq.n	8009a5a <__multiply+0x112>
 8009a1a:	682b      	ldr	r3, [r5, #0]
 8009a1c:	46ae      	mov	lr, r5
 8009a1e:	468c      	mov	ip, r1
 8009a20:	f04f 0a00 	mov.w	sl, #0
 8009a24:	f8bc 4000 	ldrh.w	r4, [ip]
 8009a28:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009a2c:	fb09 b404 	mla	r4, r9, r4, fp
 8009a30:	44a2      	add	sl, r4
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8009a38:	f84e 3b04 	str.w	r3, [lr], #4
 8009a3c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009a40:	f8be 4000 	ldrh.w	r4, [lr]
 8009a44:	0c1b      	lsrs	r3, r3, #16
 8009a46:	fb09 4303 	mla	r3, r9, r3, r4
 8009a4a:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8009a4e:	4567      	cmp	r7, ip
 8009a50:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009a54:	d8e6      	bhi.n	8009a24 <__multiply+0xdc>
 8009a56:	f8ce 3000 	str.w	r3, [lr]
 8009a5a:	3504      	adds	r5, #4
 8009a5c:	e7a0      	b.n	80099a0 <__multiply+0x58>
 8009a5e:	3e01      	subs	r6, #1
 8009a60:	e7a2      	b.n	80099a8 <__multiply+0x60>
	...

08009a64 <__pow5mult>:
 8009a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a68:	4615      	mov	r5, r2
 8009a6a:	f012 0203 	ands.w	r2, r2, #3
 8009a6e:	4606      	mov	r6, r0
 8009a70:	460f      	mov	r7, r1
 8009a72:	d007      	beq.n	8009a84 <__pow5mult+0x20>
 8009a74:	3a01      	subs	r2, #1
 8009a76:	4c21      	ldr	r4, [pc, #132]	; (8009afc <__pow5mult+0x98>)
 8009a78:	2300      	movs	r3, #0
 8009a7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a7e:	f7ff fed1 	bl	8009824 <__multadd>
 8009a82:	4607      	mov	r7, r0
 8009a84:	10ad      	asrs	r5, r5, #2
 8009a86:	d035      	beq.n	8009af4 <__pow5mult+0x90>
 8009a88:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009a8a:	b93c      	cbnz	r4, 8009a9c <__pow5mult+0x38>
 8009a8c:	2010      	movs	r0, #16
 8009a8e:	f7ff fe6b 	bl	8009768 <malloc>
 8009a92:	6270      	str	r0, [r6, #36]	; 0x24
 8009a94:	6044      	str	r4, [r0, #4]
 8009a96:	6084      	str	r4, [r0, #8]
 8009a98:	6004      	str	r4, [r0, #0]
 8009a9a:	60c4      	str	r4, [r0, #12]
 8009a9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009aa0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009aa4:	b94c      	cbnz	r4, 8009aba <__pow5mult+0x56>
 8009aa6:	f240 2171 	movw	r1, #625	; 0x271
 8009aaa:	4630      	mov	r0, r6
 8009aac:	f7ff ff43 	bl	8009936 <__i2b>
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	f8c8 0008 	str.w	r0, [r8, #8]
 8009ab6:	4604      	mov	r4, r0
 8009ab8:	6003      	str	r3, [r0, #0]
 8009aba:	f04f 0800 	mov.w	r8, #0
 8009abe:	07eb      	lsls	r3, r5, #31
 8009ac0:	d50a      	bpl.n	8009ad8 <__pow5mult+0x74>
 8009ac2:	4639      	mov	r1, r7
 8009ac4:	4622      	mov	r2, r4
 8009ac6:	4630      	mov	r0, r6
 8009ac8:	f7ff ff3e 	bl	8009948 <__multiply>
 8009acc:	4639      	mov	r1, r7
 8009ace:	4681      	mov	r9, r0
 8009ad0:	4630      	mov	r0, r6
 8009ad2:	f7ff fe90 	bl	80097f6 <_Bfree>
 8009ad6:	464f      	mov	r7, r9
 8009ad8:	106d      	asrs	r5, r5, #1
 8009ada:	d00b      	beq.n	8009af4 <__pow5mult+0x90>
 8009adc:	6820      	ldr	r0, [r4, #0]
 8009ade:	b938      	cbnz	r0, 8009af0 <__pow5mult+0x8c>
 8009ae0:	4622      	mov	r2, r4
 8009ae2:	4621      	mov	r1, r4
 8009ae4:	4630      	mov	r0, r6
 8009ae6:	f7ff ff2f 	bl	8009948 <__multiply>
 8009aea:	6020      	str	r0, [r4, #0]
 8009aec:	f8c0 8000 	str.w	r8, [r0]
 8009af0:	4604      	mov	r4, r0
 8009af2:	e7e4      	b.n	8009abe <__pow5mult+0x5a>
 8009af4:	4638      	mov	r0, r7
 8009af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009afa:	bf00      	nop
 8009afc:	0800aa28 	.word	0x0800aa28

08009b00 <__lshift>:
 8009b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b04:	460c      	mov	r4, r1
 8009b06:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009b0a:	6923      	ldr	r3, [r4, #16]
 8009b0c:	6849      	ldr	r1, [r1, #4]
 8009b0e:	eb0a 0903 	add.w	r9, sl, r3
 8009b12:	68a3      	ldr	r3, [r4, #8]
 8009b14:	4607      	mov	r7, r0
 8009b16:	4616      	mov	r6, r2
 8009b18:	f109 0501 	add.w	r5, r9, #1
 8009b1c:	42ab      	cmp	r3, r5
 8009b1e:	db31      	blt.n	8009b84 <__lshift+0x84>
 8009b20:	4638      	mov	r0, r7
 8009b22:	f7ff fe34 	bl	800978e <_Balloc>
 8009b26:	2200      	movs	r2, #0
 8009b28:	4680      	mov	r8, r0
 8009b2a:	f100 0314 	add.w	r3, r0, #20
 8009b2e:	4611      	mov	r1, r2
 8009b30:	4552      	cmp	r2, sl
 8009b32:	db2a      	blt.n	8009b8a <__lshift+0x8a>
 8009b34:	6920      	ldr	r0, [r4, #16]
 8009b36:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b3a:	f104 0114 	add.w	r1, r4, #20
 8009b3e:	f016 021f 	ands.w	r2, r6, #31
 8009b42:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8009b46:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8009b4a:	d022      	beq.n	8009b92 <__lshift+0x92>
 8009b4c:	f1c2 0c20 	rsb	ip, r2, #32
 8009b50:	2000      	movs	r0, #0
 8009b52:	680e      	ldr	r6, [r1, #0]
 8009b54:	4096      	lsls	r6, r2
 8009b56:	4330      	orrs	r0, r6
 8009b58:	f843 0b04 	str.w	r0, [r3], #4
 8009b5c:	f851 0b04 	ldr.w	r0, [r1], #4
 8009b60:	458e      	cmp	lr, r1
 8009b62:	fa20 f00c 	lsr.w	r0, r0, ip
 8009b66:	d8f4      	bhi.n	8009b52 <__lshift+0x52>
 8009b68:	6018      	str	r0, [r3, #0]
 8009b6a:	b108      	cbz	r0, 8009b70 <__lshift+0x70>
 8009b6c:	f109 0502 	add.w	r5, r9, #2
 8009b70:	3d01      	subs	r5, #1
 8009b72:	4638      	mov	r0, r7
 8009b74:	f8c8 5010 	str.w	r5, [r8, #16]
 8009b78:	4621      	mov	r1, r4
 8009b7a:	f7ff fe3c 	bl	80097f6 <_Bfree>
 8009b7e:	4640      	mov	r0, r8
 8009b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b84:	3101      	adds	r1, #1
 8009b86:	005b      	lsls	r3, r3, #1
 8009b88:	e7c8      	b.n	8009b1c <__lshift+0x1c>
 8009b8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009b8e:	3201      	adds	r2, #1
 8009b90:	e7ce      	b.n	8009b30 <__lshift+0x30>
 8009b92:	3b04      	subs	r3, #4
 8009b94:	f851 2b04 	ldr.w	r2, [r1], #4
 8009b98:	f843 2f04 	str.w	r2, [r3, #4]!
 8009b9c:	458e      	cmp	lr, r1
 8009b9e:	d8f9      	bhi.n	8009b94 <__lshift+0x94>
 8009ba0:	e7e6      	b.n	8009b70 <__lshift+0x70>

08009ba2 <__mcmp>:
 8009ba2:	6903      	ldr	r3, [r0, #16]
 8009ba4:	690a      	ldr	r2, [r1, #16]
 8009ba6:	1a9b      	subs	r3, r3, r2
 8009ba8:	b530      	push	{r4, r5, lr}
 8009baa:	d10c      	bne.n	8009bc6 <__mcmp+0x24>
 8009bac:	0092      	lsls	r2, r2, #2
 8009bae:	3014      	adds	r0, #20
 8009bb0:	3114      	adds	r1, #20
 8009bb2:	1884      	adds	r4, r0, r2
 8009bb4:	4411      	add	r1, r2
 8009bb6:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009bba:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009bbe:	4295      	cmp	r5, r2
 8009bc0:	d003      	beq.n	8009bca <__mcmp+0x28>
 8009bc2:	d305      	bcc.n	8009bd0 <__mcmp+0x2e>
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	bd30      	pop	{r4, r5, pc}
 8009bca:	42a0      	cmp	r0, r4
 8009bcc:	d3f3      	bcc.n	8009bb6 <__mcmp+0x14>
 8009bce:	e7fa      	b.n	8009bc6 <__mcmp+0x24>
 8009bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8009bd4:	e7f7      	b.n	8009bc6 <__mcmp+0x24>

08009bd6 <__mdiff>:
 8009bd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bda:	460d      	mov	r5, r1
 8009bdc:	4607      	mov	r7, r0
 8009bde:	4611      	mov	r1, r2
 8009be0:	4628      	mov	r0, r5
 8009be2:	4614      	mov	r4, r2
 8009be4:	f7ff ffdd 	bl	8009ba2 <__mcmp>
 8009be8:	1e06      	subs	r6, r0, #0
 8009bea:	d108      	bne.n	8009bfe <__mdiff+0x28>
 8009bec:	4631      	mov	r1, r6
 8009bee:	4638      	mov	r0, r7
 8009bf0:	f7ff fdcd 	bl	800978e <_Balloc>
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	6103      	str	r3, [r0, #16]
 8009bf8:	6146      	str	r6, [r0, #20]
 8009bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bfe:	bfa4      	itt	ge
 8009c00:	4623      	movge	r3, r4
 8009c02:	462c      	movge	r4, r5
 8009c04:	4638      	mov	r0, r7
 8009c06:	6861      	ldr	r1, [r4, #4]
 8009c08:	bfa6      	itte	ge
 8009c0a:	461d      	movge	r5, r3
 8009c0c:	2600      	movge	r6, #0
 8009c0e:	2601      	movlt	r6, #1
 8009c10:	f7ff fdbd 	bl	800978e <_Balloc>
 8009c14:	692b      	ldr	r3, [r5, #16]
 8009c16:	60c6      	str	r6, [r0, #12]
 8009c18:	6926      	ldr	r6, [r4, #16]
 8009c1a:	f105 0914 	add.w	r9, r5, #20
 8009c1e:	f104 0214 	add.w	r2, r4, #20
 8009c22:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009c26:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009c2a:	f100 0514 	add.w	r5, r0, #20
 8009c2e:	f04f 0c00 	mov.w	ip, #0
 8009c32:	f852 ab04 	ldr.w	sl, [r2], #4
 8009c36:	f859 4b04 	ldr.w	r4, [r9], #4
 8009c3a:	fa1c f18a 	uxtah	r1, ip, sl
 8009c3e:	b2a3      	uxth	r3, r4
 8009c40:	1ac9      	subs	r1, r1, r3
 8009c42:	0c23      	lsrs	r3, r4, #16
 8009c44:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009c48:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009c4c:	b289      	uxth	r1, r1
 8009c4e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009c52:	45c8      	cmp	r8, r9
 8009c54:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009c58:	4696      	mov	lr, r2
 8009c5a:	f845 3b04 	str.w	r3, [r5], #4
 8009c5e:	d8e8      	bhi.n	8009c32 <__mdiff+0x5c>
 8009c60:	45be      	cmp	lr, r7
 8009c62:	d305      	bcc.n	8009c70 <__mdiff+0x9a>
 8009c64:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009c68:	b18b      	cbz	r3, 8009c8e <__mdiff+0xb8>
 8009c6a:	6106      	str	r6, [r0, #16]
 8009c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c70:	f85e 1b04 	ldr.w	r1, [lr], #4
 8009c74:	fa1c f381 	uxtah	r3, ip, r1
 8009c78:	141a      	asrs	r2, r3, #16
 8009c7a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009c7e:	b29b      	uxth	r3, r3
 8009c80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c84:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009c88:	f845 3b04 	str.w	r3, [r5], #4
 8009c8c:	e7e8      	b.n	8009c60 <__mdiff+0x8a>
 8009c8e:	3e01      	subs	r6, #1
 8009c90:	e7e8      	b.n	8009c64 <__mdiff+0x8e>

08009c92 <__d2b>:
 8009c92:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009c96:	460e      	mov	r6, r1
 8009c98:	2101      	movs	r1, #1
 8009c9a:	ec59 8b10 	vmov	r8, r9, d0
 8009c9e:	4615      	mov	r5, r2
 8009ca0:	f7ff fd75 	bl	800978e <_Balloc>
 8009ca4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009ca8:	4607      	mov	r7, r0
 8009caa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009cae:	bb34      	cbnz	r4, 8009cfe <__d2b+0x6c>
 8009cb0:	9301      	str	r3, [sp, #4]
 8009cb2:	f1b8 0f00 	cmp.w	r8, #0
 8009cb6:	d027      	beq.n	8009d08 <__d2b+0x76>
 8009cb8:	a802      	add	r0, sp, #8
 8009cba:	f840 8d08 	str.w	r8, [r0, #-8]!
 8009cbe:	f7ff fe0b 	bl	80098d8 <__lo0bits>
 8009cc2:	9900      	ldr	r1, [sp, #0]
 8009cc4:	b1f0      	cbz	r0, 8009d04 <__d2b+0x72>
 8009cc6:	9a01      	ldr	r2, [sp, #4]
 8009cc8:	f1c0 0320 	rsb	r3, r0, #32
 8009ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8009cd0:	430b      	orrs	r3, r1
 8009cd2:	40c2      	lsrs	r2, r0
 8009cd4:	617b      	str	r3, [r7, #20]
 8009cd6:	9201      	str	r2, [sp, #4]
 8009cd8:	9b01      	ldr	r3, [sp, #4]
 8009cda:	61bb      	str	r3, [r7, #24]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	bf14      	ite	ne
 8009ce0:	2102      	movne	r1, #2
 8009ce2:	2101      	moveq	r1, #1
 8009ce4:	6139      	str	r1, [r7, #16]
 8009ce6:	b1c4      	cbz	r4, 8009d1a <__d2b+0x88>
 8009ce8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009cec:	4404      	add	r4, r0
 8009cee:	6034      	str	r4, [r6, #0]
 8009cf0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009cf4:	6028      	str	r0, [r5, #0]
 8009cf6:	4638      	mov	r0, r7
 8009cf8:	b003      	add	sp, #12
 8009cfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009cfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d02:	e7d5      	b.n	8009cb0 <__d2b+0x1e>
 8009d04:	6179      	str	r1, [r7, #20]
 8009d06:	e7e7      	b.n	8009cd8 <__d2b+0x46>
 8009d08:	a801      	add	r0, sp, #4
 8009d0a:	f7ff fde5 	bl	80098d8 <__lo0bits>
 8009d0e:	9b01      	ldr	r3, [sp, #4]
 8009d10:	617b      	str	r3, [r7, #20]
 8009d12:	2101      	movs	r1, #1
 8009d14:	6139      	str	r1, [r7, #16]
 8009d16:	3020      	adds	r0, #32
 8009d18:	e7e5      	b.n	8009ce6 <__d2b+0x54>
 8009d1a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009d1e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009d22:	6030      	str	r0, [r6, #0]
 8009d24:	6918      	ldr	r0, [r3, #16]
 8009d26:	f7ff fdb8 	bl	800989a <__hi0bits>
 8009d2a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009d2e:	e7e1      	b.n	8009cf4 <__d2b+0x62>

08009d30 <_calloc_r>:
 8009d30:	b538      	push	{r3, r4, r5, lr}
 8009d32:	fb02 f401 	mul.w	r4, r2, r1
 8009d36:	4621      	mov	r1, r4
 8009d38:	f000 f856 	bl	8009de8 <_malloc_r>
 8009d3c:	4605      	mov	r5, r0
 8009d3e:	b118      	cbz	r0, 8009d48 <_calloc_r+0x18>
 8009d40:	4622      	mov	r2, r4
 8009d42:	2100      	movs	r1, #0
 8009d44:	f7fd ff16 	bl	8007b74 <memset>
 8009d48:	4628      	mov	r0, r5
 8009d4a:	bd38      	pop	{r3, r4, r5, pc}

08009d4c <_free_r>:
 8009d4c:	b538      	push	{r3, r4, r5, lr}
 8009d4e:	4605      	mov	r5, r0
 8009d50:	2900      	cmp	r1, #0
 8009d52:	d045      	beq.n	8009de0 <_free_r+0x94>
 8009d54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d58:	1f0c      	subs	r4, r1, #4
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	bfb8      	it	lt
 8009d5e:	18e4      	addlt	r4, r4, r3
 8009d60:	f000 fa9c 	bl	800a29c <__malloc_lock>
 8009d64:	4a1f      	ldr	r2, [pc, #124]	; (8009de4 <_free_r+0x98>)
 8009d66:	6813      	ldr	r3, [r2, #0]
 8009d68:	4610      	mov	r0, r2
 8009d6a:	b933      	cbnz	r3, 8009d7a <_free_r+0x2e>
 8009d6c:	6063      	str	r3, [r4, #4]
 8009d6e:	6014      	str	r4, [r2, #0]
 8009d70:	4628      	mov	r0, r5
 8009d72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d76:	f000 ba92 	b.w	800a29e <__malloc_unlock>
 8009d7a:	42a3      	cmp	r3, r4
 8009d7c:	d90c      	bls.n	8009d98 <_free_r+0x4c>
 8009d7e:	6821      	ldr	r1, [r4, #0]
 8009d80:	1862      	adds	r2, r4, r1
 8009d82:	4293      	cmp	r3, r2
 8009d84:	bf04      	itt	eq
 8009d86:	681a      	ldreq	r2, [r3, #0]
 8009d88:	685b      	ldreq	r3, [r3, #4]
 8009d8a:	6063      	str	r3, [r4, #4]
 8009d8c:	bf04      	itt	eq
 8009d8e:	1852      	addeq	r2, r2, r1
 8009d90:	6022      	streq	r2, [r4, #0]
 8009d92:	6004      	str	r4, [r0, #0]
 8009d94:	e7ec      	b.n	8009d70 <_free_r+0x24>
 8009d96:	4613      	mov	r3, r2
 8009d98:	685a      	ldr	r2, [r3, #4]
 8009d9a:	b10a      	cbz	r2, 8009da0 <_free_r+0x54>
 8009d9c:	42a2      	cmp	r2, r4
 8009d9e:	d9fa      	bls.n	8009d96 <_free_r+0x4a>
 8009da0:	6819      	ldr	r1, [r3, #0]
 8009da2:	1858      	adds	r0, r3, r1
 8009da4:	42a0      	cmp	r0, r4
 8009da6:	d10b      	bne.n	8009dc0 <_free_r+0x74>
 8009da8:	6820      	ldr	r0, [r4, #0]
 8009daa:	4401      	add	r1, r0
 8009dac:	1858      	adds	r0, r3, r1
 8009dae:	4282      	cmp	r2, r0
 8009db0:	6019      	str	r1, [r3, #0]
 8009db2:	d1dd      	bne.n	8009d70 <_free_r+0x24>
 8009db4:	6810      	ldr	r0, [r2, #0]
 8009db6:	6852      	ldr	r2, [r2, #4]
 8009db8:	605a      	str	r2, [r3, #4]
 8009dba:	4401      	add	r1, r0
 8009dbc:	6019      	str	r1, [r3, #0]
 8009dbe:	e7d7      	b.n	8009d70 <_free_r+0x24>
 8009dc0:	d902      	bls.n	8009dc8 <_free_r+0x7c>
 8009dc2:	230c      	movs	r3, #12
 8009dc4:	602b      	str	r3, [r5, #0]
 8009dc6:	e7d3      	b.n	8009d70 <_free_r+0x24>
 8009dc8:	6820      	ldr	r0, [r4, #0]
 8009dca:	1821      	adds	r1, r4, r0
 8009dcc:	428a      	cmp	r2, r1
 8009dce:	bf04      	itt	eq
 8009dd0:	6811      	ldreq	r1, [r2, #0]
 8009dd2:	6852      	ldreq	r2, [r2, #4]
 8009dd4:	6062      	str	r2, [r4, #4]
 8009dd6:	bf04      	itt	eq
 8009dd8:	1809      	addeq	r1, r1, r0
 8009dda:	6021      	streq	r1, [r4, #0]
 8009ddc:	605c      	str	r4, [r3, #4]
 8009dde:	e7c7      	b.n	8009d70 <_free_r+0x24>
 8009de0:	bd38      	pop	{r3, r4, r5, pc}
 8009de2:	bf00      	nop
 8009de4:	2000025c 	.word	0x2000025c

08009de8 <_malloc_r>:
 8009de8:	b570      	push	{r4, r5, r6, lr}
 8009dea:	1ccd      	adds	r5, r1, #3
 8009dec:	f025 0503 	bic.w	r5, r5, #3
 8009df0:	3508      	adds	r5, #8
 8009df2:	2d0c      	cmp	r5, #12
 8009df4:	bf38      	it	cc
 8009df6:	250c      	movcc	r5, #12
 8009df8:	2d00      	cmp	r5, #0
 8009dfa:	4606      	mov	r6, r0
 8009dfc:	db01      	blt.n	8009e02 <_malloc_r+0x1a>
 8009dfe:	42a9      	cmp	r1, r5
 8009e00:	d903      	bls.n	8009e0a <_malloc_r+0x22>
 8009e02:	230c      	movs	r3, #12
 8009e04:	6033      	str	r3, [r6, #0]
 8009e06:	2000      	movs	r0, #0
 8009e08:	bd70      	pop	{r4, r5, r6, pc}
 8009e0a:	f000 fa47 	bl	800a29c <__malloc_lock>
 8009e0e:	4a23      	ldr	r2, [pc, #140]	; (8009e9c <_malloc_r+0xb4>)
 8009e10:	6814      	ldr	r4, [r2, #0]
 8009e12:	4621      	mov	r1, r4
 8009e14:	b991      	cbnz	r1, 8009e3c <_malloc_r+0x54>
 8009e16:	4c22      	ldr	r4, [pc, #136]	; (8009ea0 <_malloc_r+0xb8>)
 8009e18:	6823      	ldr	r3, [r4, #0]
 8009e1a:	b91b      	cbnz	r3, 8009e24 <_malloc_r+0x3c>
 8009e1c:	4630      	mov	r0, r6
 8009e1e:	f000 f981 	bl	800a124 <_sbrk_r>
 8009e22:	6020      	str	r0, [r4, #0]
 8009e24:	4629      	mov	r1, r5
 8009e26:	4630      	mov	r0, r6
 8009e28:	f000 f97c 	bl	800a124 <_sbrk_r>
 8009e2c:	1c43      	adds	r3, r0, #1
 8009e2e:	d126      	bne.n	8009e7e <_malloc_r+0x96>
 8009e30:	230c      	movs	r3, #12
 8009e32:	6033      	str	r3, [r6, #0]
 8009e34:	4630      	mov	r0, r6
 8009e36:	f000 fa32 	bl	800a29e <__malloc_unlock>
 8009e3a:	e7e4      	b.n	8009e06 <_malloc_r+0x1e>
 8009e3c:	680b      	ldr	r3, [r1, #0]
 8009e3e:	1b5b      	subs	r3, r3, r5
 8009e40:	d41a      	bmi.n	8009e78 <_malloc_r+0x90>
 8009e42:	2b0b      	cmp	r3, #11
 8009e44:	d90f      	bls.n	8009e66 <_malloc_r+0x7e>
 8009e46:	600b      	str	r3, [r1, #0]
 8009e48:	50cd      	str	r5, [r1, r3]
 8009e4a:	18cc      	adds	r4, r1, r3
 8009e4c:	4630      	mov	r0, r6
 8009e4e:	f000 fa26 	bl	800a29e <__malloc_unlock>
 8009e52:	f104 000b 	add.w	r0, r4, #11
 8009e56:	1d23      	adds	r3, r4, #4
 8009e58:	f020 0007 	bic.w	r0, r0, #7
 8009e5c:	1ac3      	subs	r3, r0, r3
 8009e5e:	d01b      	beq.n	8009e98 <_malloc_r+0xb0>
 8009e60:	425a      	negs	r2, r3
 8009e62:	50e2      	str	r2, [r4, r3]
 8009e64:	bd70      	pop	{r4, r5, r6, pc}
 8009e66:	428c      	cmp	r4, r1
 8009e68:	bf0d      	iteet	eq
 8009e6a:	6863      	ldreq	r3, [r4, #4]
 8009e6c:	684b      	ldrne	r3, [r1, #4]
 8009e6e:	6063      	strne	r3, [r4, #4]
 8009e70:	6013      	streq	r3, [r2, #0]
 8009e72:	bf18      	it	ne
 8009e74:	460c      	movne	r4, r1
 8009e76:	e7e9      	b.n	8009e4c <_malloc_r+0x64>
 8009e78:	460c      	mov	r4, r1
 8009e7a:	6849      	ldr	r1, [r1, #4]
 8009e7c:	e7ca      	b.n	8009e14 <_malloc_r+0x2c>
 8009e7e:	1cc4      	adds	r4, r0, #3
 8009e80:	f024 0403 	bic.w	r4, r4, #3
 8009e84:	42a0      	cmp	r0, r4
 8009e86:	d005      	beq.n	8009e94 <_malloc_r+0xac>
 8009e88:	1a21      	subs	r1, r4, r0
 8009e8a:	4630      	mov	r0, r6
 8009e8c:	f000 f94a 	bl	800a124 <_sbrk_r>
 8009e90:	3001      	adds	r0, #1
 8009e92:	d0cd      	beq.n	8009e30 <_malloc_r+0x48>
 8009e94:	6025      	str	r5, [r4, #0]
 8009e96:	e7d9      	b.n	8009e4c <_malloc_r+0x64>
 8009e98:	bd70      	pop	{r4, r5, r6, pc}
 8009e9a:	bf00      	nop
 8009e9c:	2000025c 	.word	0x2000025c
 8009ea0:	20000260 	.word	0x20000260

08009ea4 <__sfputc_r>:
 8009ea4:	6893      	ldr	r3, [r2, #8]
 8009ea6:	3b01      	subs	r3, #1
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	b410      	push	{r4}
 8009eac:	6093      	str	r3, [r2, #8]
 8009eae:	da09      	bge.n	8009ec4 <__sfputc_r+0x20>
 8009eb0:	6994      	ldr	r4, [r2, #24]
 8009eb2:	42a3      	cmp	r3, r4
 8009eb4:	db02      	blt.n	8009ebc <__sfputc_r+0x18>
 8009eb6:	b2cb      	uxtb	r3, r1
 8009eb8:	2b0a      	cmp	r3, #10
 8009eba:	d103      	bne.n	8009ec4 <__sfputc_r+0x20>
 8009ebc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ec0:	f7fe bb48 	b.w	8008554 <__swbuf_r>
 8009ec4:	6813      	ldr	r3, [r2, #0]
 8009ec6:	1c58      	adds	r0, r3, #1
 8009ec8:	6010      	str	r0, [r2, #0]
 8009eca:	7019      	strb	r1, [r3, #0]
 8009ecc:	b2c8      	uxtb	r0, r1
 8009ece:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ed2:	4770      	bx	lr

08009ed4 <__sfputs_r>:
 8009ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ed6:	4606      	mov	r6, r0
 8009ed8:	460f      	mov	r7, r1
 8009eda:	4614      	mov	r4, r2
 8009edc:	18d5      	adds	r5, r2, r3
 8009ede:	42ac      	cmp	r4, r5
 8009ee0:	d101      	bne.n	8009ee6 <__sfputs_r+0x12>
 8009ee2:	2000      	movs	r0, #0
 8009ee4:	e007      	b.n	8009ef6 <__sfputs_r+0x22>
 8009ee6:	463a      	mov	r2, r7
 8009ee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009eec:	4630      	mov	r0, r6
 8009eee:	f7ff ffd9 	bl	8009ea4 <__sfputc_r>
 8009ef2:	1c43      	adds	r3, r0, #1
 8009ef4:	d1f3      	bne.n	8009ede <__sfputs_r+0xa>
 8009ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009ef8 <_vfiprintf_r>:
 8009ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009efc:	b09d      	sub	sp, #116	; 0x74
 8009efe:	460c      	mov	r4, r1
 8009f00:	4617      	mov	r7, r2
 8009f02:	9303      	str	r3, [sp, #12]
 8009f04:	4606      	mov	r6, r0
 8009f06:	b118      	cbz	r0, 8009f10 <_vfiprintf_r+0x18>
 8009f08:	6983      	ldr	r3, [r0, #24]
 8009f0a:	b90b      	cbnz	r3, 8009f10 <_vfiprintf_r+0x18>
 8009f0c:	f7ff fb30 	bl	8009570 <__sinit>
 8009f10:	4b7c      	ldr	r3, [pc, #496]	; (800a104 <_vfiprintf_r+0x20c>)
 8009f12:	429c      	cmp	r4, r3
 8009f14:	d157      	bne.n	8009fc6 <_vfiprintf_r+0xce>
 8009f16:	6874      	ldr	r4, [r6, #4]
 8009f18:	89a3      	ldrh	r3, [r4, #12]
 8009f1a:	0718      	lsls	r0, r3, #28
 8009f1c:	d55d      	bpl.n	8009fda <_vfiprintf_r+0xe2>
 8009f1e:	6923      	ldr	r3, [r4, #16]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d05a      	beq.n	8009fda <_vfiprintf_r+0xe2>
 8009f24:	2300      	movs	r3, #0
 8009f26:	9309      	str	r3, [sp, #36]	; 0x24
 8009f28:	2320      	movs	r3, #32
 8009f2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f2e:	2330      	movs	r3, #48	; 0x30
 8009f30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f34:	f04f 0b01 	mov.w	fp, #1
 8009f38:	46b8      	mov	r8, r7
 8009f3a:	4645      	mov	r5, r8
 8009f3c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d155      	bne.n	8009ff0 <_vfiprintf_r+0xf8>
 8009f44:	ebb8 0a07 	subs.w	sl, r8, r7
 8009f48:	d00b      	beq.n	8009f62 <_vfiprintf_r+0x6a>
 8009f4a:	4653      	mov	r3, sl
 8009f4c:	463a      	mov	r2, r7
 8009f4e:	4621      	mov	r1, r4
 8009f50:	4630      	mov	r0, r6
 8009f52:	f7ff ffbf 	bl	8009ed4 <__sfputs_r>
 8009f56:	3001      	adds	r0, #1
 8009f58:	f000 80c4 	beq.w	800a0e4 <_vfiprintf_r+0x1ec>
 8009f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f5e:	4453      	add	r3, sl
 8009f60:	9309      	str	r3, [sp, #36]	; 0x24
 8009f62:	f898 3000 	ldrb.w	r3, [r8]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	f000 80bc 	beq.w	800a0e4 <_vfiprintf_r+0x1ec>
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8009f72:	9304      	str	r3, [sp, #16]
 8009f74:	9307      	str	r3, [sp, #28]
 8009f76:	9205      	str	r2, [sp, #20]
 8009f78:	9306      	str	r3, [sp, #24]
 8009f7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f7e:	931a      	str	r3, [sp, #104]	; 0x68
 8009f80:	2205      	movs	r2, #5
 8009f82:	7829      	ldrb	r1, [r5, #0]
 8009f84:	4860      	ldr	r0, [pc, #384]	; (800a108 <_vfiprintf_r+0x210>)
 8009f86:	f7f6 f92b 	bl	80001e0 <memchr>
 8009f8a:	f105 0801 	add.w	r8, r5, #1
 8009f8e:	9b04      	ldr	r3, [sp, #16]
 8009f90:	2800      	cmp	r0, #0
 8009f92:	d131      	bne.n	8009ff8 <_vfiprintf_r+0x100>
 8009f94:	06d9      	lsls	r1, r3, #27
 8009f96:	bf44      	itt	mi
 8009f98:	2220      	movmi	r2, #32
 8009f9a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009f9e:	071a      	lsls	r2, r3, #28
 8009fa0:	bf44      	itt	mi
 8009fa2:	222b      	movmi	r2, #43	; 0x2b
 8009fa4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009fa8:	782a      	ldrb	r2, [r5, #0]
 8009faa:	2a2a      	cmp	r2, #42	; 0x2a
 8009fac:	d02c      	beq.n	800a008 <_vfiprintf_r+0x110>
 8009fae:	9a07      	ldr	r2, [sp, #28]
 8009fb0:	2100      	movs	r1, #0
 8009fb2:	200a      	movs	r0, #10
 8009fb4:	46a8      	mov	r8, r5
 8009fb6:	3501      	adds	r5, #1
 8009fb8:	f898 3000 	ldrb.w	r3, [r8]
 8009fbc:	3b30      	subs	r3, #48	; 0x30
 8009fbe:	2b09      	cmp	r3, #9
 8009fc0:	d96d      	bls.n	800a09e <_vfiprintf_r+0x1a6>
 8009fc2:	b371      	cbz	r1, 800a022 <_vfiprintf_r+0x12a>
 8009fc4:	e026      	b.n	800a014 <_vfiprintf_r+0x11c>
 8009fc6:	4b51      	ldr	r3, [pc, #324]	; (800a10c <_vfiprintf_r+0x214>)
 8009fc8:	429c      	cmp	r4, r3
 8009fca:	d101      	bne.n	8009fd0 <_vfiprintf_r+0xd8>
 8009fcc:	68b4      	ldr	r4, [r6, #8]
 8009fce:	e7a3      	b.n	8009f18 <_vfiprintf_r+0x20>
 8009fd0:	4b4f      	ldr	r3, [pc, #316]	; (800a110 <_vfiprintf_r+0x218>)
 8009fd2:	429c      	cmp	r4, r3
 8009fd4:	bf08      	it	eq
 8009fd6:	68f4      	ldreq	r4, [r6, #12]
 8009fd8:	e79e      	b.n	8009f18 <_vfiprintf_r+0x20>
 8009fda:	4621      	mov	r1, r4
 8009fdc:	4630      	mov	r0, r6
 8009fde:	f7fe fb0b 	bl	80085f8 <__swsetup_r>
 8009fe2:	2800      	cmp	r0, #0
 8009fe4:	d09e      	beq.n	8009f24 <_vfiprintf_r+0x2c>
 8009fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8009fea:	b01d      	add	sp, #116	; 0x74
 8009fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ff0:	2b25      	cmp	r3, #37	; 0x25
 8009ff2:	d0a7      	beq.n	8009f44 <_vfiprintf_r+0x4c>
 8009ff4:	46a8      	mov	r8, r5
 8009ff6:	e7a0      	b.n	8009f3a <_vfiprintf_r+0x42>
 8009ff8:	4a43      	ldr	r2, [pc, #268]	; (800a108 <_vfiprintf_r+0x210>)
 8009ffa:	1a80      	subs	r0, r0, r2
 8009ffc:	fa0b f000 	lsl.w	r0, fp, r0
 800a000:	4318      	orrs	r0, r3
 800a002:	9004      	str	r0, [sp, #16]
 800a004:	4645      	mov	r5, r8
 800a006:	e7bb      	b.n	8009f80 <_vfiprintf_r+0x88>
 800a008:	9a03      	ldr	r2, [sp, #12]
 800a00a:	1d11      	adds	r1, r2, #4
 800a00c:	6812      	ldr	r2, [r2, #0]
 800a00e:	9103      	str	r1, [sp, #12]
 800a010:	2a00      	cmp	r2, #0
 800a012:	db01      	blt.n	800a018 <_vfiprintf_r+0x120>
 800a014:	9207      	str	r2, [sp, #28]
 800a016:	e004      	b.n	800a022 <_vfiprintf_r+0x12a>
 800a018:	4252      	negs	r2, r2
 800a01a:	f043 0302 	orr.w	r3, r3, #2
 800a01e:	9207      	str	r2, [sp, #28]
 800a020:	9304      	str	r3, [sp, #16]
 800a022:	f898 3000 	ldrb.w	r3, [r8]
 800a026:	2b2e      	cmp	r3, #46	; 0x2e
 800a028:	d110      	bne.n	800a04c <_vfiprintf_r+0x154>
 800a02a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a02e:	2b2a      	cmp	r3, #42	; 0x2a
 800a030:	f108 0101 	add.w	r1, r8, #1
 800a034:	d137      	bne.n	800a0a6 <_vfiprintf_r+0x1ae>
 800a036:	9b03      	ldr	r3, [sp, #12]
 800a038:	1d1a      	adds	r2, r3, #4
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	9203      	str	r2, [sp, #12]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	bfb8      	it	lt
 800a042:	f04f 33ff 	movlt.w	r3, #4294967295
 800a046:	f108 0802 	add.w	r8, r8, #2
 800a04a:	9305      	str	r3, [sp, #20]
 800a04c:	4d31      	ldr	r5, [pc, #196]	; (800a114 <_vfiprintf_r+0x21c>)
 800a04e:	f898 1000 	ldrb.w	r1, [r8]
 800a052:	2203      	movs	r2, #3
 800a054:	4628      	mov	r0, r5
 800a056:	f7f6 f8c3 	bl	80001e0 <memchr>
 800a05a:	b140      	cbz	r0, 800a06e <_vfiprintf_r+0x176>
 800a05c:	2340      	movs	r3, #64	; 0x40
 800a05e:	1b40      	subs	r0, r0, r5
 800a060:	fa03 f000 	lsl.w	r0, r3, r0
 800a064:	9b04      	ldr	r3, [sp, #16]
 800a066:	4303      	orrs	r3, r0
 800a068:	9304      	str	r3, [sp, #16]
 800a06a:	f108 0801 	add.w	r8, r8, #1
 800a06e:	f898 1000 	ldrb.w	r1, [r8]
 800a072:	4829      	ldr	r0, [pc, #164]	; (800a118 <_vfiprintf_r+0x220>)
 800a074:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a078:	2206      	movs	r2, #6
 800a07a:	f108 0701 	add.w	r7, r8, #1
 800a07e:	f7f6 f8af 	bl	80001e0 <memchr>
 800a082:	2800      	cmp	r0, #0
 800a084:	d034      	beq.n	800a0f0 <_vfiprintf_r+0x1f8>
 800a086:	4b25      	ldr	r3, [pc, #148]	; (800a11c <_vfiprintf_r+0x224>)
 800a088:	bb03      	cbnz	r3, 800a0cc <_vfiprintf_r+0x1d4>
 800a08a:	9b03      	ldr	r3, [sp, #12]
 800a08c:	3307      	adds	r3, #7
 800a08e:	f023 0307 	bic.w	r3, r3, #7
 800a092:	3308      	adds	r3, #8
 800a094:	9303      	str	r3, [sp, #12]
 800a096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a098:	444b      	add	r3, r9
 800a09a:	9309      	str	r3, [sp, #36]	; 0x24
 800a09c:	e74c      	b.n	8009f38 <_vfiprintf_r+0x40>
 800a09e:	fb00 3202 	mla	r2, r0, r2, r3
 800a0a2:	2101      	movs	r1, #1
 800a0a4:	e786      	b.n	8009fb4 <_vfiprintf_r+0xbc>
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	9305      	str	r3, [sp, #20]
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	250a      	movs	r5, #10
 800a0ae:	4688      	mov	r8, r1
 800a0b0:	3101      	adds	r1, #1
 800a0b2:	f898 2000 	ldrb.w	r2, [r8]
 800a0b6:	3a30      	subs	r2, #48	; 0x30
 800a0b8:	2a09      	cmp	r2, #9
 800a0ba:	d903      	bls.n	800a0c4 <_vfiprintf_r+0x1cc>
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d0c5      	beq.n	800a04c <_vfiprintf_r+0x154>
 800a0c0:	9005      	str	r0, [sp, #20]
 800a0c2:	e7c3      	b.n	800a04c <_vfiprintf_r+0x154>
 800a0c4:	fb05 2000 	mla	r0, r5, r0, r2
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	e7f0      	b.n	800a0ae <_vfiprintf_r+0x1b6>
 800a0cc:	ab03      	add	r3, sp, #12
 800a0ce:	9300      	str	r3, [sp, #0]
 800a0d0:	4622      	mov	r2, r4
 800a0d2:	4b13      	ldr	r3, [pc, #76]	; (800a120 <_vfiprintf_r+0x228>)
 800a0d4:	a904      	add	r1, sp, #16
 800a0d6:	4630      	mov	r0, r6
 800a0d8:	f7fd fdea 	bl	8007cb0 <_printf_float>
 800a0dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a0e0:	4681      	mov	r9, r0
 800a0e2:	d1d8      	bne.n	800a096 <_vfiprintf_r+0x19e>
 800a0e4:	89a3      	ldrh	r3, [r4, #12]
 800a0e6:	065b      	lsls	r3, r3, #25
 800a0e8:	f53f af7d 	bmi.w	8009fe6 <_vfiprintf_r+0xee>
 800a0ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0ee:	e77c      	b.n	8009fea <_vfiprintf_r+0xf2>
 800a0f0:	ab03      	add	r3, sp, #12
 800a0f2:	9300      	str	r3, [sp, #0]
 800a0f4:	4622      	mov	r2, r4
 800a0f6:	4b0a      	ldr	r3, [pc, #40]	; (800a120 <_vfiprintf_r+0x228>)
 800a0f8:	a904      	add	r1, sp, #16
 800a0fa:	4630      	mov	r0, r6
 800a0fc:	f7fe f88e 	bl	800821c <_printf_i>
 800a100:	e7ec      	b.n	800a0dc <_vfiprintf_r+0x1e4>
 800a102:	bf00      	nop
 800a104:	0800a8f8 	.word	0x0800a8f8
 800a108:	0800aa34 	.word	0x0800aa34
 800a10c:	0800a918 	.word	0x0800a918
 800a110:	0800a8d8 	.word	0x0800a8d8
 800a114:	0800aa3a 	.word	0x0800aa3a
 800a118:	0800aa3e 	.word	0x0800aa3e
 800a11c:	08007cb1 	.word	0x08007cb1
 800a120:	08009ed5 	.word	0x08009ed5

0800a124 <_sbrk_r>:
 800a124:	b538      	push	{r3, r4, r5, lr}
 800a126:	4c06      	ldr	r4, [pc, #24]	; (800a140 <_sbrk_r+0x1c>)
 800a128:	2300      	movs	r3, #0
 800a12a:	4605      	mov	r5, r0
 800a12c:	4608      	mov	r0, r1
 800a12e:	6023      	str	r3, [r4, #0]
 800a130:	f7fc fbcc 	bl	80068cc <_sbrk>
 800a134:	1c43      	adds	r3, r0, #1
 800a136:	d102      	bne.n	800a13e <_sbrk_r+0x1a>
 800a138:	6823      	ldr	r3, [r4, #0]
 800a13a:	b103      	cbz	r3, 800a13e <_sbrk_r+0x1a>
 800a13c:	602b      	str	r3, [r5, #0]
 800a13e:	bd38      	pop	{r3, r4, r5, pc}
 800a140:	20000460 	.word	0x20000460

0800a144 <__sread>:
 800a144:	b510      	push	{r4, lr}
 800a146:	460c      	mov	r4, r1
 800a148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a14c:	f000 f8a8 	bl	800a2a0 <_read_r>
 800a150:	2800      	cmp	r0, #0
 800a152:	bfab      	itete	ge
 800a154:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a156:	89a3      	ldrhlt	r3, [r4, #12]
 800a158:	181b      	addge	r3, r3, r0
 800a15a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a15e:	bfac      	ite	ge
 800a160:	6563      	strge	r3, [r4, #84]	; 0x54
 800a162:	81a3      	strhlt	r3, [r4, #12]
 800a164:	bd10      	pop	{r4, pc}

0800a166 <__swrite>:
 800a166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a16a:	461f      	mov	r7, r3
 800a16c:	898b      	ldrh	r3, [r1, #12]
 800a16e:	05db      	lsls	r3, r3, #23
 800a170:	4605      	mov	r5, r0
 800a172:	460c      	mov	r4, r1
 800a174:	4616      	mov	r6, r2
 800a176:	d505      	bpl.n	800a184 <__swrite+0x1e>
 800a178:	2302      	movs	r3, #2
 800a17a:	2200      	movs	r2, #0
 800a17c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a180:	f000 f868 	bl	800a254 <_lseek_r>
 800a184:	89a3      	ldrh	r3, [r4, #12]
 800a186:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a18a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a18e:	81a3      	strh	r3, [r4, #12]
 800a190:	4632      	mov	r2, r6
 800a192:	463b      	mov	r3, r7
 800a194:	4628      	mov	r0, r5
 800a196:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a19a:	f000 b817 	b.w	800a1cc <_write_r>

0800a19e <__sseek>:
 800a19e:	b510      	push	{r4, lr}
 800a1a0:	460c      	mov	r4, r1
 800a1a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1a6:	f000 f855 	bl	800a254 <_lseek_r>
 800a1aa:	1c43      	adds	r3, r0, #1
 800a1ac:	89a3      	ldrh	r3, [r4, #12]
 800a1ae:	bf15      	itete	ne
 800a1b0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a1b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a1b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a1ba:	81a3      	strheq	r3, [r4, #12]
 800a1bc:	bf18      	it	ne
 800a1be:	81a3      	strhne	r3, [r4, #12]
 800a1c0:	bd10      	pop	{r4, pc}

0800a1c2 <__sclose>:
 800a1c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1c6:	f000 b813 	b.w	800a1f0 <_close_r>
	...

0800a1cc <_write_r>:
 800a1cc:	b538      	push	{r3, r4, r5, lr}
 800a1ce:	4c07      	ldr	r4, [pc, #28]	; (800a1ec <_write_r+0x20>)
 800a1d0:	4605      	mov	r5, r0
 800a1d2:	4608      	mov	r0, r1
 800a1d4:	4611      	mov	r1, r2
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	6022      	str	r2, [r4, #0]
 800a1da:	461a      	mov	r2, r3
 800a1dc:	f7fc fb5c 	bl	8006898 <_write>
 800a1e0:	1c43      	adds	r3, r0, #1
 800a1e2:	d102      	bne.n	800a1ea <_write_r+0x1e>
 800a1e4:	6823      	ldr	r3, [r4, #0]
 800a1e6:	b103      	cbz	r3, 800a1ea <_write_r+0x1e>
 800a1e8:	602b      	str	r3, [r5, #0]
 800a1ea:	bd38      	pop	{r3, r4, r5, pc}
 800a1ec:	20000460 	.word	0x20000460

0800a1f0 <_close_r>:
 800a1f0:	b538      	push	{r3, r4, r5, lr}
 800a1f2:	4c06      	ldr	r4, [pc, #24]	; (800a20c <_close_r+0x1c>)
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	4605      	mov	r5, r0
 800a1f8:	4608      	mov	r0, r1
 800a1fa:	6023      	str	r3, [r4, #0]
 800a1fc:	f7fc fb80 	bl	8006900 <_close>
 800a200:	1c43      	adds	r3, r0, #1
 800a202:	d102      	bne.n	800a20a <_close_r+0x1a>
 800a204:	6823      	ldr	r3, [r4, #0]
 800a206:	b103      	cbz	r3, 800a20a <_close_r+0x1a>
 800a208:	602b      	str	r3, [r5, #0]
 800a20a:	bd38      	pop	{r3, r4, r5, pc}
 800a20c:	20000460 	.word	0x20000460

0800a210 <_fstat_r>:
 800a210:	b538      	push	{r3, r4, r5, lr}
 800a212:	4c07      	ldr	r4, [pc, #28]	; (800a230 <_fstat_r+0x20>)
 800a214:	2300      	movs	r3, #0
 800a216:	4605      	mov	r5, r0
 800a218:	4608      	mov	r0, r1
 800a21a:	4611      	mov	r1, r2
 800a21c:	6023      	str	r3, [r4, #0]
 800a21e:	f7fc fb72 	bl	8006906 <_fstat>
 800a222:	1c43      	adds	r3, r0, #1
 800a224:	d102      	bne.n	800a22c <_fstat_r+0x1c>
 800a226:	6823      	ldr	r3, [r4, #0]
 800a228:	b103      	cbz	r3, 800a22c <_fstat_r+0x1c>
 800a22a:	602b      	str	r3, [r5, #0]
 800a22c:	bd38      	pop	{r3, r4, r5, pc}
 800a22e:	bf00      	nop
 800a230:	20000460 	.word	0x20000460

0800a234 <_isatty_r>:
 800a234:	b538      	push	{r3, r4, r5, lr}
 800a236:	4c06      	ldr	r4, [pc, #24]	; (800a250 <_isatty_r+0x1c>)
 800a238:	2300      	movs	r3, #0
 800a23a:	4605      	mov	r5, r0
 800a23c:	4608      	mov	r0, r1
 800a23e:	6023      	str	r3, [r4, #0]
 800a240:	f7fc fb66 	bl	8006910 <_isatty>
 800a244:	1c43      	adds	r3, r0, #1
 800a246:	d102      	bne.n	800a24e <_isatty_r+0x1a>
 800a248:	6823      	ldr	r3, [r4, #0]
 800a24a:	b103      	cbz	r3, 800a24e <_isatty_r+0x1a>
 800a24c:	602b      	str	r3, [r5, #0]
 800a24e:	bd38      	pop	{r3, r4, r5, pc}
 800a250:	20000460 	.word	0x20000460

0800a254 <_lseek_r>:
 800a254:	b538      	push	{r3, r4, r5, lr}
 800a256:	4c07      	ldr	r4, [pc, #28]	; (800a274 <_lseek_r+0x20>)
 800a258:	4605      	mov	r5, r0
 800a25a:	4608      	mov	r0, r1
 800a25c:	4611      	mov	r1, r2
 800a25e:	2200      	movs	r2, #0
 800a260:	6022      	str	r2, [r4, #0]
 800a262:	461a      	mov	r2, r3
 800a264:	f7fc fb56 	bl	8006914 <_lseek>
 800a268:	1c43      	adds	r3, r0, #1
 800a26a:	d102      	bne.n	800a272 <_lseek_r+0x1e>
 800a26c:	6823      	ldr	r3, [r4, #0]
 800a26e:	b103      	cbz	r3, 800a272 <_lseek_r+0x1e>
 800a270:	602b      	str	r3, [r5, #0]
 800a272:	bd38      	pop	{r3, r4, r5, pc}
 800a274:	20000460 	.word	0x20000460

0800a278 <__ascii_mbtowc>:
 800a278:	b082      	sub	sp, #8
 800a27a:	b901      	cbnz	r1, 800a27e <__ascii_mbtowc+0x6>
 800a27c:	a901      	add	r1, sp, #4
 800a27e:	b142      	cbz	r2, 800a292 <__ascii_mbtowc+0x1a>
 800a280:	b14b      	cbz	r3, 800a296 <__ascii_mbtowc+0x1e>
 800a282:	7813      	ldrb	r3, [r2, #0]
 800a284:	600b      	str	r3, [r1, #0]
 800a286:	7812      	ldrb	r2, [r2, #0]
 800a288:	1c10      	adds	r0, r2, #0
 800a28a:	bf18      	it	ne
 800a28c:	2001      	movne	r0, #1
 800a28e:	b002      	add	sp, #8
 800a290:	4770      	bx	lr
 800a292:	4610      	mov	r0, r2
 800a294:	e7fb      	b.n	800a28e <__ascii_mbtowc+0x16>
 800a296:	f06f 0001 	mvn.w	r0, #1
 800a29a:	e7f8      	b.n	800a28e <__ascii_mbtowc+0x16>

0800a29c <__malloc_lock>:
 800a29c:	4770      	bx	lr

0800a29e <__malloc_unlock>:
 800a29e:	4770      	bx	lr

0800a2a0 <_read_r>:
 800a2a0:	b538      	push	{r3, r4, r5, lr}
 800a2a2:	4c07      	ldr	r4, [pc, #28]	; (800a2c0 <_read_r+0x20>)
 800a2a4:	4605      	mov	r5, r0
 800a2a6:	4608      	mov	r0, r1
 800a2a8:	4611      	mov	r1, r2
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	6022      	str	r2, [r4, #0]
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	f7fc fae4 	bl	800687c <_read>
 800a2b4:	1c43      	adds	r3, r0, #1
 800a2b6:	d102      	bne.n	800a2be <_read_r+0x1e>
 800a2b8:	6823      	ldr	r3, [r4, #0]
 800a2ba:	b103      	cbz	r3, 800a2be <_read_r+0x1e>
 800a2bc:	602b      	str	r3, [r5, #0]
 800a2be:	bd38      	pop	{r3, r4, r5, pc}
 800a2c0:	20000460 	.word	0x20000460

0800a2c4 <__ascii_wctomb>:
 800a2c4:	b149      	cbz	r1, 800a2da <__ascii_wctomb+0x16>
 800a2c6:	2aff      	cmp	r2, #255	; 0xff
 800a2c8:	bf85      	ittet	hi
 800a2ca:	238a      	movhi	r3, #138	; 0x8a
 800a2cc:	6003      	strhi	r3, [r0, #0]
 800a2ce:	700a      	strbls	r2, [r1, #0]
 800a2d0:	f04f 30ff 	movhi.w	r0, #4294967295
 800a2d4:	bf98      	it	ls
 800a2d6:	2001      	movls	r0, #1
 800a2d8:	4770      	bx	lr
 800a2da:	4608      	mov	r0, r1
 800a2dc:	4770      	bx	lr

0800a2de <abort>:
 800a2de:	b508      	push	{r3, lr}
 800a2e0:	2006      	movs	r0, #6
 800a2e2:	f000 f82b 	bl	800a33c <raise>
 800a2e6:	2001      	movs	r0, #1
 800a2e8:	f7fc fac2 	bl	8006870 <_exit>

0800a2ec <_raise_r>:
 800a2ec:	291f      	cmp	r1, #31
 800a2ee:	b538      	push	{r3, r4, r5, lr}
 800a2f0:	4604      	mov	r4, r0
 800a2f2:	460d      	mov	r5, r1
 800a2f4:	d904      	bls.n	800a300 <_raise_r+0x14>
 800a2f6:	2316      	movs	r3, #22
 800a2f8:	6003      	str	r3, [r0, #0]
 800a2fa:	f04f 30ff 	mov.w	r0, #4294967295
 800a2fe:	bd38      	pop	{r3, r4, r5, pc}
 800a300:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a302:	b112      	cbz	r2, 800a30a <_raise_r+0x1e>
 800a304:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a308:	b94b      	cbnz	r3, 800a31e <_raise_r+0x32>
 800a30a:	4620      	mov	r0, r4
 800a30c:	f000 f830 	bl	800a370 <_getpid_r>
 800a310:	462a      	mov	r2, r5
 800a312:	4601      	mov	r1, r0
 800a314:	4620      	mov	r0, r4
 800a316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a31a:	f000 b817 	b.w	800a34c <_kill_r>
 800a31e:	2b01      	cmp	r3, #1
 800a320:	d00a      	beq.n	800a338 <_raise_r+0x4c>
 800a322:	1c59      	adds	r1, r3, #1
 800a324:	d103      	bne.n	800a32e <_raise_r+0x42>
 800a326:	2316      	movs	r3, #22
 800a328:	6003      	str	r3, [r0, #0]
 800a32a:	2001      	movs	r0, #1
 800a32c:	bd38      	pop	{r3, r4, r5, pc}
 800a32e:	2400      	movs	r4, #0
 800a330:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a334:	4628      	mov	r0, r5
 800a336:	4798      	blx	r3
 800a338:	2000      	movs	r0, #0
 800a33a:	bd38      	pop	{r3, r4, r5, pc}

0800a33c <raise>:
 800a33c:	4b02      	ldr	r3, [pc, #8]	; (800a348 <raise+0xc>)
 800a33e:	4601      	mov	r1, r0
 800a340:	6818      	ldr	r0, [r3, #0]
 800a342:	f7ff bfd3 	b.w	800a2ec <_raise_r>
 800a346:	bf00      	nop
 800a348:	20000008 	.word	0x20000008

0800a34c <_kill_r>:
 800a34c:	b538      	push	{r3, r4, r5, lr}
 800a34e:	4c07      	ldr	r4, [pc, #28]	; (800a36c <_kill_r+0x20>)
 800a350:	2300      	movs	r3, #0
 800a352:	4605      	mov	r5, r0
 800a354:	4608      	mov	r0, r1
 800a356:	4611      	mov	r1, r2
 800a358:	6023      	str	r3, [r4, #0]
 800a35a:	f7fc fa81 	bl	8006860 <_kill>
 800a35e:	1c43      	adds	r3, r0, #1
 800a360:	d102      	bne.n	800a368 <_kill_r+0x1c>
 800a362:	6823      	ldr	r3, [r4, #0]
 800a364:	b103      	cbz	r3, 800a368 <_kill_r+0x1c>
 800a366:	602b      	str	r3, [r5, #0]
 800a368:	bd38      	pop	{r3, r4, r5, pc}
 800a36a:	bf00      	nop
 800a36c:	20000460 	.word	0x20000460

0800a370 <_getpid_r>:
 800a370:	f7fc ba74 	b.w	800685c <_getpid>

0800a374 <_init>:
 800a374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a376:	bf00      	nop
 800a378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a37a:	bc08      	pop	{r3}
 800a37c:	469e      	mov	lr, r3
 800a37e:	4770      	bx	lr

0800a380 <_fini>:
 800a380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a382:	bf00      	nop
 800a384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a386:	bc08      	pop	{r3}
 800a388:	469e      	mov	lr, r3
 800a38a:	4770      	bx	lr
