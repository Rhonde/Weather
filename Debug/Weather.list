
Weather.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007318  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000678  080074a8  080074a8  000174a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007b20  08007b20  00017b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007b28  08007b28  00017b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007b2c  08007b2c  00017b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001d4  20000000  08007b30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002e0  200001d8  08007d04  000201d8  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  200004b8  08007d04  000204b8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b340  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000038db  00000000  00000000  0003b544  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000c0ac  00000000  00000000  0003ee1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000f98  00000000  00000000  0004aed0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001488  00000000  00000000  0004be68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00009563  00000000  00000000  0004d2f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005dc4  00000000  00000000  00056853  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0005c617  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003ad4  00000000  00000000  0005c694  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007490 	.word	0x08007490

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08007490 	.word	0x08007490

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b97a 	b.w	8000eac <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	460d      	mov	r5, r1
 8000bd8:	4604      	mov	r4, r0
 8000bda:	9e08      	ldr	r6, [sp, #32]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d151      	bne.n	8000c84 <__udivmoddi4+0xb4>
 8000be0:	428a      	cmp	r2, r1
 8000be2:	4617      	mov	r7, r2
 8000be4:	d96d      	bls.n	8000cc2 <__udivmoddi4+0xf2>
 8000be6:	fab2 fe82 	clz	lr, r2
 8000bea:	f1be 0f00 	cmp.w	lr, #0
 8000bee:	d00b      	beq.n	8000c08 <__udivmoddi4+0x38>
 8000bf0:	f1ce 0c20 	rsb	ip, lr, #32
 8000bf4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000bf8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000bfc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c00:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c04:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c08:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c0c:	0c25      	lsrs	r5, r4, #16
 8000c0e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c12:	fa1f f987 	uxth.w	r9, r7
 8000c16:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c1a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c1e:	fb08 f309 	mul.w	r3, r8, r9
 8000c22:	42ab      	cmp	r3, r5
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x6c>
 8000c26:	19ed      	adds	r5, r5, r7
 8000c28:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c2c:	f080 8123 	bcs.w	8000e76 <__udivmoddi4+0x2a6>
 8000c30:	42ab      	cmp	r3, r5
 8000c32:	f240 8120 	bls.w	8000e76 <__udivmoddi4+0x2a6>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	443d      	add	r5, r7
 8000c3c:	1aed      	subs	r5, r5, r3
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c44:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c4c:	fb00 f909 	mul.w	r9, r0, r9
 8000c50:	45a1      	cmp	r9, r4
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x98>
 8000c54:	19e4      	adds	r4, r4, r7
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5a:	f080 810a 	bcs.w	8000e72 <__udivmoddi4+0x2a2>
 8000c5e:	45a1      	cmp	r9, r4
 8000c60:	f240 8107 	bls.w	8000e72 <__udivmoddi4+0x2a2>
 8000c64:	3802      	subs	r0, #2
 8000c66:	443c      	add	r4, r7
 8000c68:	eba4 0409 	sub.w	r4, r4, r9
 8000c6c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c70:	2100      	movs	r1, #0
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d061      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000c76:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	6034      	str	r4, [r6, #0]
 8000c7e:	6073      	str	r3, [r6, #4]
 8000c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c84:	428b      	cmp	r3, r1
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0xc8>
 8000c88:	2e00      	cmp	r6, #0
 8000c8a:	d054      	beq.n	8000d36 <__udivmoddi4+0x166>
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000c92:	4608      	mov	r0, r1
 8000c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c98:	fab3 f183 	clz	r1, r3
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	f040 808e 	bne.w	8000dbe <__udivmoddi4+0x1ee>
 8000ca2:	42ab      	cmp	r3, r5
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xdc>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80fa 	bhi.w	8000ea0 <__udivmoddi4+0x2d0>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb65 0503 	sbc.w	r5, r5, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	46ac      	mov	ip, r5
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d03f      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000cba:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	b912      	cbnz	r2, 8000cca <__udivmoddi4+0xfa>
 8000cc4:	2701      	movs	r7, #1
 8000cc6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cca:	fab7 fe87 	clz	lr, r7
 8000cce:	f1be 0f00 	cmp.w	lr, #0
 8000cd2:	d134      	bne.n	8000d3e <__udivmoddi4+0x16e>
 8000cd4:	1beb      	subs	r3, r5, r7
 8000cd6:	0c3a      	lsrs	r2, r7, #16
 8000cd8:	fa1f fc87 	uxth.w	ip, r7
 8000cdc:	2101      	movs	r1, #1
 8000cde:	fbb3 f8f2 	udiv	r8, r3, r2
 8000ce2:	0c25      	lsrs	r5, r4, #16
 8000ce4:	fb02 3318 	mls	r3, r2, r8, r3
 8000ce8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cec:	fb0c f308 	mul.w	r3, ip, r8
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x134>
 8000cf4:	19ed      	adds	r5, r5, r7
 8000cf6:	f108 30ff 	add.w	r0, r8, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x132>
 8000cfc:	42ab      	cmp	r3, r5
 8000cfe:	f200 80d1 	bhi.w	8000ea4 <__udivmoddi4+0x2d4>
 8000d02:	4680      	mov	r8, r0
 8000d04:	1aed      	subs	r5, r5, r3
 8000d06:	b2a3      	uxth	r3, r4
 8000d08:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d0c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d10:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d14:	fb0c fc00 	mul.w	ip, ip, r0
 8000d18:	45a4      	cmp	ip, r4
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x15c>
 8000d1c:	19e4      	adds	r4, r4, r7
 8000d1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x15a>
 8000d24:	45a4      	cmp	ip, r4
 8000d26:	f200 80b8 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	eba4 040c 	sub.w	r4, r4, ip
 8000d30:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d34:	e79d      	b.n	8000c72 <__udivmoddi4+0xa2>
 8000d36:	4631      	mov	r1, r6
 8000d38:	4630      	mov	r0, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	f1ce 0420 	rsb	r4, lr, #32
 8000d42:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d46:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d4a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d4e:	0c3a      	lsrs	r2, r7, #16
 8000d50:	fa25 f404 	lsr.w	r4, r5, r4
 8000d54:	ea48 0803 	orr.w	r8, r8, r3
 8000d58:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d5c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d60:	fb02 4411 	mls	r4, r2, r1, r4
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d6c:	fb01 f30c 	mul.w	r3, r1, ip
 8000d70:	42ab      	cmp	r3, r5
 8000d72:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d76:	d909      	bls.n	8000d8c <__udivmoddi4+0x1bc>
 8000d78:	19ed      	adds	r5, r5, r7
 8000d7a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d7e:	f080 808a 	bcs.w	8000e96 <__udivmoddi4+0x2c6>
 8000d82:	42ab      	cmp	r3, r5
 8000d84:	f240 8087 	bls.w	8000e96 <__udivmoddi4+0x2c6>
 8000d88:	3902      	subs	r1, #2
 8000d8a:	443d      	add	r5, r7
 8000d8c:	1aeb      	subs	r3, r5, r3
 8000d8e:	fa1f f588 	uxth.w	r5, r8
 8000d92:	fbb3 f0f2 	udiv	r0, r3, r2
 8000d96:	fb02 3310 	mls	r3, r2, r0, r3
 8000d9a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d9e:	fb00 f30c 	mul.w	r3, r0, ip
 8000da2:	42ab      	cmp	r3, r5
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x1e6>
 8000da6:	19ed      	adds	r5, r5, r7
 8000da8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dac:	d26f      	bcs.n	8000e8e <__udivmoddi4+0x2be>
 8000dae:	42ab      	cmp	r3, r5
 8000db0:	d96d      	bls.n	8000e8e <__udivmoddi4+0x2be>
 8000db2:	3802      	subs	r0, #2
 8000db4:	443d      	add	r5, r7
 8000db6:	1aeb      	subs	r3, r5, r3
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	e78f      	b.n	8000cde <__udivmoddi4+0x10e>
 8000dbe:	f1c1 0720 	rsb	r7, r1, #32
 8000dc2:	fa22 f807 	lsr.w	r8, r2, r7
 8000dc6:	408b      	lsls	r3, r1
 8000dc8:	fa05 f401 	lsl.w	r4, r5, r1
 8000dcc:	ea48 0303 	orr.w	r3, r8, r3
 8000dd0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000dd4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dde:	fbb5 f9fc 	udiv	r9, r5, ip
 8000de2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000de6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000dea:	fa1f f883 	uxth.w	r8, r3
 8000dee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000df2:	fb09 f408 	mul.w	r4, r9, r8
 8000df6:	42ac      	cmp	r4, r5
 8000df8:	fa02 f201 	lsl.w	r2, r2, r1
 8000dfc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x244>
 8000e02:	18ed      	adds	r5, r5, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e08:	d243      	bcs.n	8000e92 <__udivmoddi4+0x2c2>
 8000e0a:	42ac      	cmp	r4, r5
 8000e0c:	d941      	bls.n	8000e92 <__udivmoddi4+0x2c2>
 8000e0e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e12:	441d      	add	r5, r3
 8000e14:	1b2d      	subs	r5, r5, r4
 8000e16:	fa1f fe8e 	uxth.w	lr, lr
 8000e1a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e1e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e22:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e26:	fb00 f808 	mul.w	r8, r0, r8
 8000e2a:	45a0      	cmp	r8, r4
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x26e>
 8000e2e:	18e4      	adds	r4, r4, r3
 8000e30:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e34:	d229      	bcs.n	8000e8a <__udivmoddi4+0x2ba>
 8000e36:	45a0      	cmp	r8, r4
 8000e38:	d927      	bls.n	8000e8a <__udivmoddi4+0x2ba>
 8000e3a:	3802      	subs	r0, #2
 8000e3c:	441c      	add	r4, r3
 8000e3e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e42:	eba4 0408 	sub.w	r4, r4, r8
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	454c      	cmp	r4, r9
 8000e4c:	46c6      	mov	lr, r8
 8000e4e:	464d      	mov	r5, r9
 8000e50:	d315      	bcc.n	8000e7e <__udivmoddi4+0x2ae>
 8000e52:	d012      	beq.n	8000e7a <__udivmoddi4+0x2aa>
 8000e54:	b156      	cbz	r6, 8000e6c <__udivmoddi4+0x29c>
 8000e56:	ebba 030e 	subs.w	r3, sl, lr
 8000e5a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e62:	40cb      	lsrs	r3, r1
 8000e64:	431f      	orrs	r7, r3
 8000e66:	40cc      	lsrs	r4, r1
 8000e68:	6037      	str	r7, [r6, #0]
 8000e6a:	6074      	str	r4, [r6, #4]
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	4618      	mov	r0, r3
 8000e74:	e6f8      	b.n	8000c68 <__udivmoddi4+0x98>
 8000e76:	4690      	mov	r8, r2
 8000e78:	e6e0      	b.n	8000c3c <__udivmoddi4+0x6c>
 8000e7a:	45c2      	cmp	sl, r8
 8000e7c:	d2ea      	bcs.n	8000e54 <__udivmoddi4+0x284>
 8000e7e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e82:	eb69 0503 	sbc.w	r5, r9, r3
 8000e86:	3801      	subs	r0, #1
 8000e88:	e7e4      	b.n	8000e54 <__udivmoddi4+0x284>
 8000e8a:	4628      	mov	r0, r5
 8000e8c:	e7d7      	b.n	8000e3e <__udivmoddi4+0x26e>
 8000e8e:	4640      	mov	r0, r8
 8000e90:	e791      	b.n	8000db6 <__udivmoddi4+0x1e6>
 8000e92:	4681      	mov	r9, r0
 8000e94:	e7be      	b.n	8000e14 <__udivmoddi4+0x244>
 8000e96:	4601      	mov	r1, r0
 8000e98:	e778      	b.n	8000d8c <__udivmoddi4+0x1bc>
 8000e9a:	3802      	subs	r0, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	e745      	b.n	8000d2c <__udivmoddi4+0x15c>
 8000ea0:	4608      	mov	r0, r1
 8000ea2:	e708      	b.n	8000cb6 <__udivmoddi4+0xe6>
 8000ea4:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea8:	443d      	add	r5, r7
 8000eaa:	e72b      	b.n	8000d04 <__udivmoddi4+0x134>

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <HAL_InitTick+0x2c>)
{
 8000eb4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000eb6:	6818      	ldr	r0, [r3, #0]
 8000eb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ebc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ec0:	f000 fd08 	bl	80018d4 <HAL_SYSTICK_Config>
 8000ec4:	4604      	mov	r4, r0
 8000ec6:	b938      	cbnz	r0, 8000ed8 <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000ec8:	4602      	mov	r2, r0
 8000eca:	4629      	mov	r1, r5
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed0:	f000 fccc 	bl	800186c <HAL_NVIC_SetPriority>
 8000ed4:	4620      	mov	r0, r4
 8000ed6:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8000ed8:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000eda:	bd38      	pop	{r3, r4, r5, pc}
 8000edc:	20000000 	.word	0x20000000

08000ee0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee0:	4a09      	ldr	r2, [pc, #36]	; (8000f08 <HAL_Init+0x28>)
 8000ee2:	6813      	ldr	r3, [r2, #0]
 8000ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8000ee8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eea:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eec:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eee:	f000 fcab 	bl	8001848 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f7ff ffdc 	bl	8000eb0 <HAL_InitTick>
 8000ef8:	4604      	mov	r4, r0
 8000efa:	b918      	cbnz	r0, 8000f04 <HAL_Init+0x24>
    HAL_MspInit();
 8000efc:	f003 fddc 	bl	8004ab8 <HAL_MspInit>
}
 8000f00:	4620      	mov	r0, r4
 8000f02:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000f04:	2401      	movs	r4, #1
 8000f06:	e7fb      	b.n	8000f00 <HAL_Init+0x20>
 8000f08:	40022000 	.word	0x40022000

08000f0c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000f0c:	4a02      	ldr	r2, [pc, #8]	; (8000f18 <HAL_IncTick+0xc>)
 8000f0e:	6813      	ldr	r3, [r2, #0]
 8000f10:	3301      	adds	r3, #1
 8000f12:	6013      	str	r3, [r2, #0]
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	20000200 	.word	0x20000200

08000f1c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f1c:	4b01      	ldr	r3, [pc, #4]	; (8000f24 <HAL_GetTick+0x8>)
 8000f1e:	6818      	ldr	r0, [r3, #0]
}
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	20000200 	.word	0x20000200

08000f28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f28:	b538      	push	{r3, r4, r5, lr}
 8000f2a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f2c:	f7ff fff6 	bl	8000f1c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f30:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000f32:	4605      	mov	r5, r0
  {
    wait++;
 8000f34:	bf18      	it	ne
 8000f36:	3401      	addne	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f38:	f7ff fff0 	bl	8000f1c <HAL_GetTick>
 8000f3c:	1b40      	subs	r0, r0, r5
 8000f3e:	4284      	cmp	r4, r0
 8000f40:	d8fa      	bhi.n	8000f38 <HAL_Delay+0x10>
  {
  }
}
 8000f42:	bd38      	pop	{r3, r4, r5, pc}

08000f44 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000f44:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000f46:	0dcc      	lsrs	r4, r1, #23
 8000f48:	f004 0404 	and.w	r4, r4, #4
 8000f4c:	3014      	adds	r0, #20
  
  MODIFY_REG(*preg,
 8000f4e:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8000f52:	2307      	movs	r3, #7
 8000f54:	fa03 f501 	lsl.w	r5, r3, r1
 8000f58:	5823      	ldr	r3, [r4, r0]
 8000f5a:	fa02 f101 	lsl.w	r1, r2, r1
 8000f5e:	ea23 0305 	bic.w	r3, r3, r5
 8000f62:	4319      	orrs	r1, r3
 8000f64:	5021      	str	r1, [r4, r0]
 8000f66:	bd30      	pop	{r4, r5, pc}

08000f68 <LL_ADC_IsEnabled>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f68:	6880      	ldr	r0, [r0, #8]
}
 8000f6a:	f000 0001 	and.w	r0, r0, #1
 8000f6e:	4770      	bx	lr

08000f70 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f70:	6880      	ldr	r0, [r0, #8]
}
 8000f72:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8000f76:	4770      	bx	lr

08000f78 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f78:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f7e:	4604      	mov	r4, r0
 8000f80:	2800      	cmp	r0, #0
 8000f82:	f000 8085 	beq.w	8001090 <HAL_ADC_Init+0x118>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f86:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8000f88:	b925      	cbnz	r5, 8000f94 <HAL_ADC_Init+0x1c>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f8a:	f003 fa8d 	bl	80044a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f8e:	65a5      	str	r5, [r4, #88]	; 0x58
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000f90:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  }
  
  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if(LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000f94:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f96:	6883      	ldr	r3, [r0, #8]
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	d47b      	bmi.n	8001094 <HAL_ADC_Init+0x11c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f9c:	6883      	ldr	r3, [r0, #8]
 8000f9e:	00dd      	lsls	r5, r3, #3
 8000fa0:	d57f      	bpl.n	80010a2 <HAL_ADC_Init+0x12a>
 8000fa2:	6883      	ldr	r3, [r0, #8]
 8000fa4:	00d9      	lsls	r1, r3, #3
 8000fa6:	f140 808a 	bpl.w	80010be <HAL_ADC_Init+0x146>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000faa:	2100      	movs	r1, #0
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000fac:	f7ff ffe0 	bl	8000f70 <LL_ADC_REG_IsConversionOngoing>
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000fb0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000fb2:	f013 0f10 	tst.w	r3, #16
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fb6:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000fb8:	d167      	bne.n	800108a <HAL_ADC_Init+0x112>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000fba:	2800      	cmp	r0, #0
 8000fbc:	d165      	bne.n	800108a <HAL_ADC_Init+0x112>
    ADC_STATE_CLR_SET(hadc->State,
 8000fbe:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000fc2:	f043 0302 	orr.w	r3, r3, #2
 8000fc6:	6563      	str	r3, [r4, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000fc8:	6820      	ldr	r0, [r4, #0]
 8000fca:	f7ff ffcd 	bl	8000f68 <LL_ADC_IsEnabled>
 8000fce:	b998      	cbnz	r0, 8000ff8 <HAL_ADC_Init+0x80>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000fd0:	4852      	ldr	r0, [pc, #328]	; (800111c <HAL_ADC_Init+0x1a4>)
 8000fd2:	f7ff ffc9 	bl	8000f68 <LL_ADC_IsEnabled>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	4851      	ldr	r0, [pc, #324]	; (8001120 <HAL_ADC_Init+0x1a8>)
 8000fda:	f7ff ffc5 	bl	8000f68 <LL_ADC_IsEnabled>
 8000fde:	4303      	orrs	r3, r0
 8000fe0:	4850      	ldr	r0, [pc, #320]	; (8001124 <HAL_ADC_Init+0x1ac>)
 8000fe2:	f7ff ffc1 	bl	8000f68 <LL_ADC_IsEnabled>
 8000fe6:	4303      	orrs	r3, r0
 8000fe8:	d106      	bne.n	8000ff8 <HAL_ADC_Init+0x80>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000fea:	4a4f      	ldr	r2, [pc, #316]	; (8001128 <HAL_ADC_Init+0x1b0>)
 8000fec:	6860      	ldr	r0, [r4, #4]
 8000fee:	6893      	ldr	r3, [r2, #8]
 8000ff0:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000ff4:	4303      	orrs	r3, r0
 8000ff6:	6093      	str	r3, [r2, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8000ff8:	68e0      	ldr	r0, [r4, #12]
 8000ffa:	6b63      	ldr	r3, [r4, #52]	; 0x34
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode)  );
 8000ffc:	f894 2020 	ldrb.w	r2, [r4, #32]
                hadc->Init.DataAlign                                                   |
 8001000:	4303      	orrs	r3, r0
 8001002:	68a0      	ldr	r0, [r4, #8]
 8001004:	4303      	orrs	r3, r0
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001006:	7e60      	ldrb	r0, [r4, #25]
    
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001008:	2a01      	cmp	r2, #1
                hadc->Init.DataAlign                                                   |
 800100a:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800100e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001012:	bf02      	ittt	eq
 8001014:	6a62      	ldreq	r2, [r4, #36]	; 0x24
 8001016:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800101a:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800101e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001020:	b122      	cbz	r2, 800102c <HAL_ADC_Init+0xb4>
    {
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8001022:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001024:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001028:	4302      	orrs	r2, r0
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800102a:	4313      	orrs	r3, r2
                 );
    }
    
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR); 
 800102c:	6820      	ldr	r0, [r4, #0]
 800102e:	4a3f      	ldr	r2, [pc, #252]	; (800112c <HAL_ADC_Init+0x1b4>)
 8001030:	68c5      	ldr	r5, [r0, #12]
 8001032:	402a      	ands	r2, r5
 8001034:	4313      	orrs	r3, r2
 8001036:	60c3      	str	r3, [r0, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001038:	f7ff ff9a 	bl	8000f70 <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800103c:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800103e:	689a      	ldr	r2, [r3, #8]
 8001040:	0712      	lsls	r2, r2, #28
 8001042:	d546      	bpl.n	80010d2 <HAL_ADC_Init+0x15a>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001044:	6922      	ldr	r2, [r4, #16]
 8001046:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001048:	bf05      	ittet	eq
 800104a:	6b18      	ldreq	r0, [r3, #48]	; 0x30
 800104c:	69e2      	ldreq	r2, [r4, #28]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800104e:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001050:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8001054:	bf06      	itte	eq
 8001056:	f020 000f 	biceq.w	r0, r0, #15
 800105a:	4302      	orreq	r2, r0
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800105c:	f022 020f 	bicne.w	r2, r2, #15
 8001060:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001062:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001064:	f023 0303 	bic.w	r3, r3, #3
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 800106e:	4608      	mov	r0, r1
 8001070:	b003      	add	sp, #12
 8001072:	bd30      	pop	{r4, r5, pc}
      wait_loop_index--;
 8001074:	9b01      	ldr	r3, [sp, #4]
 8001076:	3b01      	subs	r3, #1
 8001078:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 800107a:	9b01      	ldr	r3, [sp, #4]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d1f9      	bne.n	8001074 <HAL_ADC_Init+0xfc>
 8001080:	e78f      	b.n	8000fa2 <HAL_ADC_Init+0x2a>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001082:	691a      	ldr	r2, [r3, #16]
 8001084:	f022 0201 	bic.w	r2, r2, #1
 8001088:	e045      	b.n	8001116 <HAL_ADC_Init+0x19e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800108a:	f043 0310 	orr.w	r3, r3, #16
 800108e:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 8001090:	2101      	movs	r1, #1
 8001092:	e7ec      	b.n	800106e <HAL_ADC_Init+0xf6>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001094:	6883      	ldr	r3, [r0, #8]
 8001096:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800109a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800109e:	6083      	str	r3, [r0, #8]
 80010a0:	e77c      	b.n	8000f9c <HAL_ADC_Init+0x24>
  MODIFY_REG(ADCx->CR,
 80010a2:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80010a4:	4a22      	ldr	r2, [pc, #136]	; (8001130 <HAL_ADC_Init+0x1b8>)
 80010a6:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80010aa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b2:	6083      	str	r3, [r0, #8]
 80010b4:	4b1f      	ldr	r3, [pc, #124]	; (8001134 <HAL_ADC_Init+0x1bc>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80010bc:	e7dc      	b.n	8001078 <HAL_ADC_Init+0x100>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010be:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80010c0:	f043 0310 	orr.w	r3, r3, #16
 80010c4:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 80010ce:	2101      	movs	r1, #1
 80010d0:	e76c      	b.n	8000fac <HAL_ADC_Init+0x34>
    if (   (tmp_adc_is_conversion_on_going_regular == 0UL)
 80010d2:	2800      	cmp	r0, #0
 80010d4:	d1b6      	bne.n	8001044 <HAL_ADC_Init+0xcc>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80010d6:	68d8      	ldr	r0, [r3, #12]
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80010d8:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80010dc:	7e25      	ldrb	r5, [r4, #24]
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80010de:	0052      	lsls	r2, r2, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80010e0:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                            |
 80010e4:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80010e8:	f020 0002 	bic.w	r0, r0, #2
 80010ec:	4302      	orrs	r2, r0
 80010ee:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80010f0:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80010f4:	2a01      	cmp	r2, #1
 80010f6:	d1c4      	bne.n	8001082 <HAL_ADC_Init+0x10a>
        MODIFY_REG(hadc->Instance->CFGR2,
 80010f8:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80010fa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80010fc:	6918      	ldr	r0, [r3, #16]
 80010fe:	432a      	orrs	r2, r5
 8001100:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8001102:	f042 0201 	orr.w	r2, r2, #1
 8001106:	432a      	orrs	r2, r5
 8001108:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800110a:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 800110e:	432a      	orrs	r2, r5
 8001110:	f020 0004 	bic.w	r0, r0, #4
 8001114:	4302      	orrs	r2, r0
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001116:	611a      	str	r2, [r3, #16]
 8001118:	e794      	b.n	8001044 <HAL_ADC_Init+0xcc>
 800111a:	bf00      	nop
 800111c:	50040000 	.word	0x50040000
 8001120:	50040100 	.word	0x50040100
 8001124:	50040200 	.word	0x50040200
 8001128:	50040300 	.word	0x50040300
 800112c:	fff0c007 	.word	0xfff0c007
 8001130:	00030d40 	.word	0x00030d40
 8001134:	20000000 	.word	0x20000000

08001138 <HAL_ADC_PollForConversion>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001138:	4b38      	ldr	r3, [pc, #224]	; (800121c <HAL_ADC_PollForConversion+0xe4>)
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800113a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800113e:	6945      	ldr	r5, [r0, #20]
 8001140:	689e      	ldr	r6, [r3, #8]
 8001142:	2d08      	cmp	r5, #8
{
 8001144:	4604      	mov	r4, r0
 8001146:	460f      	mov	r7, r1
 8001148:	f006 061f 	and.w	r6, r6, #31
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800114c:	d017      	beq.n	800117e <HAL_ADC_PollForConversion+0x46>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (    (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800114e:	2e09      	cmp	r6, #9
 8001150:	d810      	bhi.n	8001174 <HAL_ADC_PollForConversion+0x3c>
 8001152:	f240 2221 	movw	r2, #545	; 0x221
 8001156:	40f2      	lsrs	r2, r6
 8001158:	07d1      	lsls	r1, r2, #31
 800115a:	d50b      	bpl.n	8001174 <HAL_ADC_PollForConversion+0x3c>
         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800115c:	6803      	ldr	r3, [r0, #0]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	f013 0f01 	tst.w	r3, #1
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001164:	d00a      	beq.n	800117c <HAL_ADC_PollForConversion+0x44>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001166:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001168:	f043 0320 	orr.w	r3, r3, #32
 800116c:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 800116e:	2001      	movs	r0, #1
 8001170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001174:	689b      	ldr	r3, [r3, #8]
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001176:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 800117a:	e7f3      	b.n	8001164 <HAL_ADC_PollForConversion+0x2c>
        tmp_Flag_End = (ADC_FLAG_EOC);
 800117c:	2504      	movs	r5, #4
    }
#endif
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800117e:	f7ff fecd 	bl	8000f1c <HAL_GetTick>
 8001182:	4680      	mov	r8, r0
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001184:	6823      	ldr	r3, [r4, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	4215      	tst	r5, r2
 800118a:	d021      	beq.n	80011d0 <HAL_ADC_PollForConversion+0x98>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800118c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800118e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001192:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001194:	68da      	ldr	r2, [r3, #12]
 8001196:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800119a:	d10f      	bne.n	80011bc <HAL_ADC_PollForConversion+0x84>
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(   (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
     && (hadc->Init.ContinuousConvMode == DISABLE)
 800119c:	7e62      	ldrb	r2, [r4, #25]
 800119e:	b96a      	cbnz	r2, 80011bc <HAL_ADC_PollForConversion+0x84>
    )
  {
    /* Check whether end of sequence is reached */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	0710      	lsls	r0, r2, #28
 80011a4:	d50a      	bpl.n	80011bc <HAL_ADC_PollForConversion+0x84>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80011a6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80011a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011ac:	6562      	str	r2, [r4, #84]	; 0x54
      
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80011ae:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80011b0:	04d1      	lsls	r1, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011b2:	bf5e      	ittt	pl
 80011b4:	6d62      	ldrpl	r2, [r4, #84]	; 0x54
 80011b6:	f042 0201 	orrpl.w	r2, r2, #1
 80011ba:	6562      	strpl	r2, [r4, #84]	; 0x54
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80011bc:	4a18      	ldr	r2, [pc, #96]	; (8001220 <HAL_ADC_PollForConversion+0xe8>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d021      	beq.n	8001206 <HAL_ADC_PollForConversion+0xce>
       || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
       || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80011c2:	68d8      	ldr	r0, [r3, #12]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif
  
  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80011c4:	2d08      	cmp	r5, #8
 80011c6:	d117      	bne.n	80011f8 <HAL_ADC_PollForConversion+0xc0>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);  
 80011c8:	601d      	str	r5, [r3, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80011ca:	2000      	movs	r0, #0
 80011cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 80011d0:	1c7a      	adds	r2, r7, #1
 80011d2:	d0d8      	beq.n	8001186 <HAL_ADC_PollForConversion+0x4e>
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80011d4:	f7ff fea2 	bl	8000f1c <HAL_GetTick>
 80011d8:	eba0 0008 	sub.w	r0, r0, r8
 80011dc:	4287      	cmp	r7, r0
 80011de:	d301      	bcc.n	80011e4 <HAL_ADC_PollForConversion+0xac>
 80011e0:	2f00      	cmp	r7, #0
 80011e2:	d1cf      	bne.n	8001184 <HAL_ADC_PollForConversion+0x4c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80011e4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80011e6:	f043 0304 	orr.w	r3, r3, #4
 80011ea:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 80011ec:	2300      	movs	r3, #0
 80011ee:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        return HAL_TIMEOUT;
 80011f2:	2003      	movs	r0, #3
 80011f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80011f8:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 80011fc:	d1e5      	bne.n	80011ca <HAL_ADC_PollForConversion+0x92>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80011fe:	220c      	movs	r2, #12
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001206:	2e09      	cmp	r6, #9
 8001208:	d805      	bhi.n	8001216 <HAL_ADC_PollForConversion+0xde>
 800120a:	f240 2221 	movw	r2, #545	; 0x221
 800120e:	fa22 f606 	lsr.w	r6, r2, r6
 8001212:	07f2      	lsls	r2, r6, #31
 8001214:	d4d5      	bmi.n	80011c2 <HAL_ADC_PollForConversion+0x8a>
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001216:	4a03      	ldr	r2, [pc, #12]	; (8001224 <HAL_ADC_PollForConversion+0xec>)
 8001218:	68d0      	ldr	r0, [r2, #12]
 800121a:	e7d3      	b.n	80011c4 <HAL_ADC_PollForConversion+0x8c>
 800121c:	50040300 	.word	0x50040300
 8001220:	50040100 	.word	0x50040100
 8001224:	50040000 	.word	0x50040000

08001228 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001228:	6803      	ldr	r3, [r0, #0]
 800122a:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 800122c:	4770      	bx	lr
	...

08001230 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001230:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001236:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800123a:	2b01      	cmp	r3, #1
{
 800123c:	4605      	mov	r5, r0
 800123e:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 8001240:	f000 8187 	beq.w	8001552 <HAL_ADC_ConfigChannel+0x322>
 8001244:	2301      	movs	r3, #1
 8001246:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800124a:	6800      	ldr	r0, [r0, #0]
 800124c:	f7ff fe90 	bl	8000f70 <LL_ADC_REG_IsConversionOngoing>
 8001250:	2800      	cmp	r0, #0
 8001252:	f040 8178 	bne.w	8001546 <HAL_ADC_ConfigChannel+0x316>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001256:	684b      	ldr	r3, [r1, #4]
 8001258:	2b05      	cmp	r3, #5
 800125a:	d808      	bhi.n	800126e <HAL_ADC_ConfigChannel+0x3e>
    {
      switch (sConfig->Rank)
 800125c:	3b02      	subs	r3, #2
 800125e:	2b03      	cmp	r3, #3
 8001260:	d865      	bhi.n	800132e <HAL_ADC_ConfigChannel+0xfe>
 8001262:	e8df f003 	tbb	[pc, r3]
 8001266:	5d02      	.short	0x5d02
 8001268:	615f      	.short	0x615f
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 800126a:	230c      	movs	r3, #12
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 800126c:	6063      	str	r3, [r4, #4]
      }
    }
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800126e:	6861      	ldr	r1, [r4, #4]
 8001270:	6828      	ldr	r0, [r5, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001272:	098e      	lsrs	r6, r1, #6
 8001274:	f100 0730 	add.w	r7, r0, #48	; 0x30
 8001278:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 800127c:	f001 011f 	and.w	r1, r1, #31
 8001280:	231f      	movs	r3, #31
 8001282:	fa03 f201 	lsl.w	r2, r3, r1
 8001286:	59f3      	ldr	r3, [r6, r7]
 8001288:	ea23 0302 	bic.w	r3, r3, r2
 800128c:	6822      	ldr	r2, [r4, #0]
 800128e:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001292:	408a      	lsls	r2, r1
 8001294:	4313      	orrs	r3, r2
 8001296:	51f3      	str	r3, [r6, r7]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001298:	f7ff fe6a 	bl	8000f70 <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800129c:	682b      	ldr	r3, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800129e:	689a      	ldr	r2, [r3, #8]
 80012a0:	0711      	lsls	r1, r2, #28
 80012a2:	f140 8158 	bpl.w	8001556 <HAL_ADC_ConfigChannel+0x326>
    }
    
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80012a6:	6828      	ldr	r0, [r5, #0]
 80012a8:	f7ff fe5e 	bl	8000f68 <LL_ADC_IsEnabled>
 80012ac:	2800      	cmp	r0, #0
 80012ae:	f040 80d7 	bne.w	8001460 <HAL_ADC_ConfigChannel+0x230>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80012b2:	68e6      	ldr	r6, [r4, #12]
 80012b4:	6828      	ldr	r0, [r5, #0]
 80012b6:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->DIFSEL,
 80012b8:	4ac3      	ldr	r2, [pc, #780]	; (80015c8 <HAL_ADC_ConfigChannel+0x398>)
 80012ba:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
 80012be:	f006 0e18 	and.w	lr, r6, #24
 80012c2:	f3c3 0712 	ubfx	r7, r3, #0, #19
 80012c6:	fa22 f20e 	lsr.w	r2, r2, lr
 80012ca:	401a      	ands	r2, r3
 80012cc:	ea21 0107 	bic.w	r1, r1, r7
 80012d0:	430a      	orrs	r2, r1
 80012d2:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      
      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80012d6:	4abd      	ldr	r2, [pc, #756]	; (80015cc <HAL_ADC_ConfigChannel+0x39c>)
 80012d8:	4296      	cmp	r6, r2
 80012da:	f040 80c1 	bne.w	8001460 <HAL_ADC_ConfigChannel+0x230>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1UL) & 0x1FUL), sConfig->SamplingTime);
 80012de:	2f00      	cmp	r7, #0
 80012e0:	f040 8093 	bne.w	800140a <HAL_ADC_ConfigChannel+0x1da>
 80012e4:	0e9e      	lsrs	r6, r3, #26
 80012e6:	3601      	adds	r6, #1
 80012e8:	f006 021f 	and.w	r2, r6, #31
 80012ec:	2a09      	cmp	r2, #9
 80012ee:	f04f 0101 	mov.w	r1, #1
 80012f2:	ea4f 6686 	mov.w	r6, r6, lsl #26
 80012f6:	f240 80a2 	bls.w	800143e <HAL_ADC_ConfigChannel+0x20e>
 80012fa:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 80012fe:	4091      	lsls	r1, r2
 8001300:	ea41 0206 	orr.w	r2, r1, r6
 8001304:	2f00      	cmp	r7, #0
 8001306:	f040 80cb 	bne.w	80014a0 <HAL_ADC_ConfigChannel+0x270>
 800130a:	0e9b      	lsrs	r3, r3, #26
 800130c:	3301      	adds	r3, #1
 800130e:	f003 031f 	and.w	r3, r3, #31
 8001312:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8001316:	391e      	subs	r1, #30
 8001318:	0509      	lsls	r1, r1, #20
 800131a:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 800131e:	e09b      	b.n	8001458 <HAL_ADC_ConfigChannel+0x228>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8001320:	2312      	movs	r3, #18
 8001322:	e7a3      	b.n	800126c <HAL_ADC_ConfigChannel+0x3c>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8001324:	2318      	movs	r3, #24
 8001326:	e7a1      	b.n	800126c <HAL_ADC_ConfigChannel+0x3c>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8001328:	f44f 7380 	mov.w	r3, #256	; 0x100
 800132c:	e79e      	b.n	800126c <HAL_ADC_ConfigChannel+0x3c>
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 800132e:	2306      	movs	r3, #6
 8001330:	e79c      	b.n	800126c <HAL_ADC_ConfigChannel+0x3c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001332:	f8de 1060 	ldr.w	r1, [lr, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001336:	f3c3 0012 	ubfx	r0, r3, #0, #19
 800133a:	f3c1 6784 	ubfx	r7, r1, #26, #5
 800133e:	f10e 0664 	add.w	r6, lr, #100	; 0x64
 8001342:	2800      	cmp	r0, #0
 8001344:	d13a      	bne.n	80013bc <HAL_ADC_ConfigChannel+0x18c>
 8001346:	f3c3 6084 	ubfx	r0, r3, #26, #5
 800134a:	4287      	cmp	r7, r0
 800134c:	f040 8128 	bne.w	80015a0 <HAL_ADC_ConfigChannel+0x370>
  MODIFY_REG(*preg,
 8001350:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8001354:	f8ce 1060 	str.w	r1, [lr, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001358:	6823      	ldr	r3, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800135a:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
 800135e:	f3c3 0712 	ubfx	r7, r3, #0, #19
 8001362:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8001366:	bb9f      	cbnz	r7, 80013d0 <HAL_ADC_ConfigChannel+0x1a0>
 8001368:	f3c3 6384 	ubfx	r3, r3, #26, #5
 800136c:	4283      	cmp	r3, r0
 800136e:	f040 811c 	bne.w	80015aa <HAL_ADC_ConfigChannel+0x37a>
  MODIFY_REG(*preg,
 8001372:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8001376:	6031      	str	r1, [r6, #0]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001378:	6823      	ldr	r3, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800137a:	6891      	ldr	r1, [r2, #8]
 800137c:	f3c3 0712 	ubfx	r7, r3, #0, #19
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001380:	f102 0608 	add.w	r6, r2, #8
 8001384:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8001388:	bb77      	cbnz	r7, 80013e8 <HAL_ADC_ConfigChannel+0x1b8>
 800138a:	f3c3 6384 	ubfx	r3, r3, #26, #5
 800138e:	4283      	cmp	r3, r0
 8001390:	f040 8112 	bne.w	80015b8 <HAL_ADC_ConfigChannel+0x388>
  MODIFY_REG(*preg,
 8001394:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8001398:	6031      	str	r1, [r6, #0]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800139a:	6823      	ldr	r3, [r4, #0]
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800139c:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013a0:	68d2      	ldr	r2, [r2, #12]
 80013a2:	f3c3 0612 	ubfx	r6, r3, #0, #19
 80013a6:	f3c2 6184 	ubfx	r1, r2, #26, #5
 80013aa:	bb4e      	cbnz	r6, 8001400 <HAL_ADC_ConfigChannel+0x1d0>
 80013ac:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80013b0:	428b      	cmp	r3, r1
  MODIFY_REG(*preg,
 80013b2:	bf04      	itt	eq
 80013b4:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 80013b8:	6002      	streq	r2, [r0, #0]
 80013ba:	e774      	b.n	80012a6 <HAL_ADC_ConfigChannel+0x76>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013bc:	fa93 f0a3 	rbit	r0, r3
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013c0:	fab0 f080 	clz	r0, r0
 80013c4:	4287      	cmp	r7, r0
 80013c6:	d0c3      	beq.n	8001350 <HAL_ADC_ConfigChannel+0x120>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013c8:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013cc:	f3c1 6084 	ubfx	r0, r1, #26, #5
 80013d0:	fa93 f3a3 	rbit	r3, r3
 80013d4:	fab3 f383 	clz	r3, r3
 80013d8:	4283      	cmp	r3, r0
 80013da:	d0ca      	beq.n	8001372 <HAL_ADC_ConfigChannel+0x142>
 80013dc:	6891      	ldr	r1, [r2, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013de:	6823      	ldr	r3, [r4, #0]
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013e0:	f102 0608 	add.w	r6, r2, #8
 80013e4:	f3c1 6084 	ubfx	r0, r1, #26, #5
 80013e8:	fa93 f3a3 	rbit	r3, r3
 80013ec:	fab3 f383 	clz	r3, r3
 80013f0:	4283      	cmp	r3, r0
 80013f2:	d0cf      	beq.n	8001394 <HAL_ADC_ConfigChannel+0x164>
 80013f4:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013f8:	68d2      	ldr	r2, [r2, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013fa:	6823      	ldr	r3, [r4, #0]
 80013fc:	f3c2 6184 	ubfx	r1, r2, #26, #5
 8001400:	fa93 f3a3 	rbit	r3, r3
 8001404:	fab3 f383 	clz	r3, r3
 8001408:	e7d2      	b.n	80013b0 <HAL_ADC_ConfigChannel+0x180>
 800140a:	fa93 f2a3 	rbit	r2, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1UL) & 0x1FUL), sConfig->SamplingTime);
 800140e:	fab2 f282 	clz	r2, r2
 8001412:	3201      	adds	r2, #1
 8001414:	f002 021f 	and.w	r2, r2, #31
 8001418:	2a09      	cmp	r2, #9
 800141a:	d830      	bhi.n	800147e <HAL_ADC_ConfigChannel+0x24e>
 800141c:	fa93 f6a3 	rbit	r6, r3
 8001420:	fab6 f686 	clz	r6, r6
 8001424:	3601      	adds	r6, #1
 8001426:	06b6      	lsls	r6, r6, #26
 8001428:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 800142c:	fa93 f1a3 	rbit	r1, r3
 8001430:	fab1 f181 	clz	r1, r1
 8001434:	3101      	adds	r1, #1
 8001436:	f001 021f 	and.w	r2, r1, #31
 800143a:	2101      	movs	r1, #1
 800143c:	e001      	b.n	8001442 <HAL_ADC_ConfigChannel+0x212>
 800143e:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8001442:	4091      	lsls	r1, r2
 8001444:	ea41 0206 	orr.w	r2, r1, r6
 8001448:	b9a7      	cbnz	r7, 8001474 <HAL_ADC_ConfigChannel+0x244>
 800144a:	0e99      	lsrs	r1, r3, #26
 800144c:	3101      	adds	r1, #1
 800144e:	f001 011f 	and.w	r1, r1, #31
 8001452:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001456:	0509      	lsls	r1, r1, #20
 8001458:	4311      	orrs	r1, r2
 800145a:	68a2      	ldr	r2, [r4, #8]
 800145c:	f7ff fd72 	bl	8000f44 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */
    
    if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001460:	6822      	ldr	r2, [r4, #0]
 8001462:	4b5b      	ldr	r3, [pc, #364]	; (80015d0 <HAL_ADC_ConfigChannel+0x3a0>)
 8001464:	421a      	tst	r2, r3
 8001466:	d120      	bne.n	80014aa <HAL_ADC_ConfigChannel+0x27a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001468:	2000      	movs	r0, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800146a:	2300      	movs	r3, #0
 800146c:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
  
  /* Return function status */
  return tmp_hal_status;
}
 8001470:	b003      	add	sp, #12
 8001472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001474:	fa93 f1a3 	rbit	r1, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1UL) & 0x1FUL), sConfig->SamplingTime);
 8001478:	fab1 f181 	clz	r1, r1
 800147c:	e7e6      	b.n	800144c <HAL_ADC_ConfigChannel+0x21c>
 800147e:	fa93 f2a3 	rbit	r2, r3
 8001482:	fab2 f282 	clz	r2, r2
 8001486:	3201      	adds	r2, #1
 8001488:	0692      	lsls	r2, r2, #26
 800148a:	f002 46f8 	and.w	r6, r2, #2080374784	; 0x7c000000
 800148e:	fa93 f1a3 	rbit	r1, r3
 8001492:	fab1 f181 	clz	r1, r1
 8001496:	3101      	adds	r1, #1
 8001498:	f001 021f 	and.w	r2, r1, #31
 800149c:	2101      	movs	r1, #1
 800149e:	e72e      	b.n	80012fe <HAL_ADC_ConfigChannel+0xce>
 80014a0:	fa93 f3a3 	rbit	r3, r3
 80014a4:	fab3 f383 	clz	r3, r3
 80014a8:	e730      	b.n	800130c <HAL_ADC_ConfigChannel+0xdc>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80014aa:	494a      	ldr	r1, [pc, #296]	; (80015d4 <HAL_ADC_ConfigChannel+0x3a4>)
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80014ac:	4b4a      	ldr	r3, [pc, #296]	; (80015d8 <HAL_ADC_ConfigChannel+0x3a8>)
 80014ae:	6888      	ldr	r0, [r1, #8]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 80014b6:	460c      	mov	r4, r1
 80014b8:	d11e      	bne.n	80014f8 <HAL_ADC_ConfigChannel+0x2c8>
 80014ba:	0202      	lsls	r2, r0, #8
 80014bc:	d4d4      	bmi.n	8001468 <HAL_ADC_ConfigChannel+0x238>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) 
 80014be:	682b      	ldr	r3, [r5, #0]
 80014c0:	4a46      	ldr	r2, [pc, #280]	; (80015dc <HAL_ADC_ConfigChannel+0x3ac>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d003      	beq.n	80014ce <HAL_ADC_ConfigChannel+0x29e>
 80014c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d1cc      	bne.n	8001468 <HAL_ADC_ConfigChannel+0x238>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80014ce:	68a3      	ldr	r3, [r4, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80014d0:	4a43      	ldr	r2, [pc, #268]	; (80015e0 <HAL_ADC_ConfigChannel+0x3b0>)
 80014d2:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80014d6:	4333      	orrs	r3, r6
 80014d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014dc:	60a3      	str	r3, [r4, #8]
 80014de:	4b41      	ldr	r3, [pc, #260]	; (80015e4 <HAL_ADC_ConfigChannel+0x3b4>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80014e6:	230c      	movs	r3, #12
 80014e8:	4353      	muls	r3, r2
            wait_loop_index--;
 80014ea:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0UL)
 80014ec:	9b01      	ldr	r3, [sp, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0ba      	beq.n	8001468 <HAL_ADC_ConfigChannel+0x238>
            wait_loop_index--;
 80014f2:	9b01      	ldr	r3, [sp, #4]
 80014f4:	3b01      	subs	r3, #1
 80014f6:	e7f8      	b.n	80014ea <HAL_ADC_ConfigChannel+0x2ba>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80014f8:	4b3b      	ldr	r3, [pc, #236]	; (80015e8 <HAL_ADC_ConfigChannel+0x3b8>)
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d111      	bne.n	8001522 <HAL_ADC_ConfigChannel+0x2f2>
 80014fe:	01c3      	lsls	r3, r0, #7
 8001500:	d4b2      	bmi.n	8001468 <HAL_ADC_ConfigChannel+0x238>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001502:	682b      	ldr	r3, [r5, #0]
 8001504:	4a35      	ldr	r2, [pc, #212]	; (80015dc <HAL_ADC_ConfigChannel+0x3ac>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d003      	beq.n	8001512 <HAL_ADC_ConfigChannel+0x2e2>
 800150a:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800150e:	4293      	cmp	r3, r2
 8001510:	d1aa      	bne.n	8001468 <HAL_ADC_ConfigChannel+0x238>
 8001512:	68a3      	ldr	r3, [r4, #8]
 8001514:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8001518:	4333      	orrs	r3, r6
 800151a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800151e:	60a3      	str	r3, [r4, #8]
 8001520:	e7a2      	b.n	8001468 <HAL_ADC_ConfigChannel+0x238>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001522:	4b32      	ldr	r3, [pc, #200]	; (80015ec <HAL_ADC_ConfigChannel+0x3bc>)
 8001524:	429a      	cmp	r2, r3
 8001526:	d19f      	bne.n	8001468 <HAL_ADC_ConfigChannel+0x238>
 8001528:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 800152c:	d19c      	bne.n	8001468 <HAL_ADC_ConfigChannel+0x238>
        if (ADC_VREFINT_INSTANCE(hadc))
 800152e:	682a      	ldr	r2, [r5, #0]
 8001530:	4b2a      	ldr	r3, [pc, #168]	; (80015dc <HAL_ADC_ConfigChannel+0x3ac>)
 8001532:	429a      	cmp	r2, r3
 8001534:	d198      	bne.n	8001468 <HAL_ADC_ConfigChannel+0x238>
 8001536:	688b      	ldr	r3, [r1, #8]
 8001538:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 800153c:	4333      	orrs	r3, r6
 800153e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001542:	608b      	str	r3, [r1, #8]
 8001544:	e791      	b.n	800146a <HAL_ADC_ConfigChannel+0x23a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001546:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8001548:	f042 0220 	orr.w	r2, r2, #32
 800154c:	656a      	str	r2, [r5, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 800154e:	4618      	mov	r0, r3
 8001550:	e78b      	b.n	800146a <HAL_ADC_ConfigChannel+0x23a>
  __HAL_LOCK(hadc);
 8001552:	2002      	movs	r0, #2
 8001554:	e78c      	b.n	8001470 <HAL_ADC_ConfigChannel+0x240>
    if (   (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001556:	2800      	cmp	r0, #0
 8001558:	f47f aea5 	bne.w	80012a6 <HAL_ADC_ConfigChannel+0x76>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800155c:	68a2      	ldr	r2, [r4, #8]
 800155e:	6821      	ldr	r1, [r4, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff fcef 	bl	8000f44 <LL_ADC_SetChannelSamplingTime>
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001566:	6926      	ldr	r6, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001568:	f8d5 e000 	ldr.w	lr, [r5]
 800156c:	6823      	ldr	r3, [r4, #0]
 800156e:	f8de 100c 	ldr.w	r1, [lr, #12]
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001572:	2e04      	cmp	r6, #4
 8001574:	f10e 0260 	add.w	r2, lr, #96	; 0x60
 8001578:	f43f aedb 	beq.w	8001332 <HAL_ADC_ConfigChannel+0x102>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800157c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8001580:	0048      	lsls	r0, r1, #1
 8001582:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(*preg,
 8001584:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 8001588:	4081      	lsls	r1, r0
 800158a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800158e:	4319      	orrs	r1, r3
 8001590:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 8001594:	4b16      	ldr	r3, [pc, #88]	; (80015f0 <HAL_ADC_ConfigChannel+0x3c0>)
 8001596:	4003      	ands	r3, r0
 8001598:	4319      	orrs	r1, r3
 800159a:	f842 1026 	str.w	r1, [r2, r6, lsl #2]
 800159e:	e682      	b.n	80012a6 <HAL_ADC_ConfigChannel+0x76>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80015a0:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80015a4:	f3c1 6084 	ubfx	r0, r1, #26, #5
 80015a8:	e6de      	b.n	8001368 <HAL_ADC_ConfigChannel+0x138>
 80015aa:	6891      	ldr	r1, [r2, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80015ac:	6823      	ldr	r3, [r4, #0]
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015ae:	f102 0608 	add.w	r6, r2, #8
 80015b2:	f3c1 6084 	ubfx	r0, r1, #26, #5
 80015b6:	e6e8      	b.n	800138a <HAL_ADC_ConfigChannel+0x15a>
 80015b8:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80015bc:	68d2      	ldr	r2, [r2, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80015be:	6823      	ldr	r3, [r4, #0]
 80015c0:	f3c2 6184 	ubfx	r1, r2, #26, #5
 80015c4:	e6f2      	b.n	80013ac <HAL_ADC_ConfigChannel+0x17c>
 80015c6:	bf00      	nop
 80015c8:	0007ffff 	.word	0x0007ffff
 80015cc:	407f0000 	.word	0x407f0000
 80015d0:	80080000 	.word	0x80080000
 80015d4:	50040300 	.word	0x50040300
 80015d8:	c7520000 	.word	0xc7520000
 80015dc:	50040000 	.word	0x50040000
 80015e0:	00030d40 	.word	0x00030d40
 80015e4:	20000000 	.word	0x20000000
 80015e8:	cb840000 	.word	0xcb840000
 80015ec:	80000001 	.word	0x80000001
 80015f0:	03fff000 	.word	0x03fff000

080015f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80015f4:	b570      	push	{r4, r5, r6, lr}
 80015f6:	4604      	mov	r4, r0
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015f8:	6800      	ldr	r0, [r0, #0]
 80015fa:	f7ff fcb5 	bl	8000f68 <LL_ADC_IsEnabled>
 80015fe:	b108      	cbz	r0, 8001604 <ADC_Enable+0x10>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001600:	2000      	movs	r0, #0
 8001602:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001604:	6822      	ldr	r2, [r4, #0]
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <ADC_Enable+0x68>)
 8001608:	6891      	ldr	r1, [r2, #8]
 800160a:	4219      	tst	r1, r3
 800160c:	d009      	beq.n	8001622 <ADC_Enable+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800160e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001610:	f043 0310 	orr.w	r3, r3, #16
 8001614:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001616:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 800161e:	2001      	movs	r0, #1
 8001620:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8001622:	6893      	ldr	r3, [r2, #8]
 8001624:	4d0e      	ldr	r5, [pc, #56]	; (8001660 <ADC_Enable+0x6c>)
 8001626:	402b      	ands	r3, r5
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 800162e:	f7ff fc75 	bl	8000f1c <HAL_GetTick>
 8001632:	4606      	mov	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001634:	6820      	ldr	r0, [r4, #0]
 8001636:	6803      	ldr	r3, [r0, #0]
 8001638:	07db      	lsls	r3, r3, #31
 800163a:	d4e1      	bmi.n	8001600 <ADC_Enable+0xc>
      if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800163c:	f7ff fc94 	bl	8000f68 <LL_ADC_IsEnabled>
 8001640:	b928      	cbnz	r0, 800164e <ADC_Enable+0x5a>
        LL_ADC_Enable(hadc->Instance);
 8001642:	6822      	ldr	r2, [r4, #0]
 8001644:	6893      	ldr	r3, [r2, #8]
 8001646:	402b      	ands	r3, r5
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6093      	str	r3, [r2, #8]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800164e:	f7ff fc65 	bl	8000f1c <HAL_GetTick>
 8001652:	1b80      	subs	r0, r0, r6
 8001654:	2802      	cmp	r0, #2
 8001656:	d9ed      	bls.n	8001634 <ADC_Enable+0x40>
 8001658:	e7d9      	b.n	800160e <ADC_Enable+0x1a>
 800165a:	bf00      	nop
 800165c:	8000003f 	.word	0x8000003f
 8001660:	7fffffc0 	.word	0x7fffffc0

08001664 <HAL_ADC_Start>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001664:	4b35      	ldr	r3, [pc, #212]	; (800173c <HAL_ADC_Start+0xd8>)
{
 8001666:	b570      	push	{r4, r5, r6, lr}
 8001668:	4604      	mov	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800166a:	6800      	ldr	r0, [r0, #0]
 800166c:	689e      	ldr	r6, [r3, #8]
 800166e:	f7ff fc7f 	bl	8000f70 <LL_ADC_REG_IsConversionOngoing>
 8001672:	4605      	mov	r5, r0
 8001674:	2800      	cmp	r0, #0
 8001676:	d15a      	bne.n	800172e <HAL_ADC_Start+0xca>
    __HAL_LOCK(hadc);
 8001678:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800167c:	2b01      	cmp	r3, #1
 800167e:	d056      	beq.n	800172e <HAL_ADC_Start+0xca>
 8001680:	2301      	movs	r3, #1
 8001682:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    tmp_hal_status = ADC_Enable(hadc);
 8001686:	4620      	mov	r0, r4
 8001688:	f7ff ffb4 	bl	80015f4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800168c:	2800      	cmp	r0, #0
 800168e:	d14b      	bne.n	8001728 <HAL_ADC_Start+0xc4>
      ADC_STATE_CLR_SET(hadc->State,
 8001690:	6d63      	ldr	r3, [r4, #84]	; 0x54
      if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001692:	4a2b      	ldr	r2, [pc, #172]	; (8001740 <HAL_ADC_Start+0xdc>)
      ADC_STATE_CLR_SET(hadc->State,
 8001694:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001698:	f023 0301 	bic.w	r3, r3, #1
 800169c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a0:	6563      	str	r3, [r4, #84]	; 0x54
      if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80016a2:	6823      	ldr	r3, [r4, #0]
 80016a4:	4293      	cmp	r3, r2
 80016a6:	f006 061f 	and.w	r6, r6, #31
 80016aa:	d042      	beq.n	8001732 <HAL_ADC_Start+0xce>
 80016ac:	461d      	mov	r5, r3
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016ae:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80016b0:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80016b4:	6562      	str	r2, [r4, #84]	; 0x54
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016b6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80016b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80016bc:	bf1c      	itt	ne
 80016be:	6da2      	ldrne	r2, [r4, #88]	; 0x58
 80016c0:	f022 0206 	bicne.w	r2, r2, #6
        ADC_CLEAR_ERRORCODE(hadc); 
 80016c4:	65a2      	str	r2, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80016c6:	221c      	movs	r2, #28
 80016c8:	601a      	str	r2, [r3, #0]
      if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80016ca:	42ab      	cmp	r3, r5
      __HAL_UNLOCK(hadc);
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
      if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80016d4:	d008      	beq.n	80016e8 <HAL_ADC_Start+0x84>
           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80016d6:	2e09      	cmp	r6, #9
 80016d8:	bf9d      	ittte	ls
 80016da:	f240 2221 	movwls	r2, #545	; 0x221
 80016de:	40f2      	lsrls	r2, r6
 80016e0:	43d2      	mvnls	r2, r2
 80016e2:	2201      	movhi	r2, #1
 80016e4:	07d1      	lsls	r1, r2, #31
 80016e6:	d411      	bmi.n	800170c <HAL_ADC_Start+0xa8>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80016e8:	68da      	ldr	r2, [r3, #12]
 80016ea:	0192      	lsls	r2, r2, #6
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80016ec:	bf41      	itttt	mi
 80016ee:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80016f0:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80016f4:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 80016f8:	6562      	strmi	r2, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 80016fa:	689a      	ldr	r2, [r3, #8]
 80016fc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001700:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001704:	f042 0204 	orr.w	r2, r2, #4
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	bd70      	pop	{r4, r5, r6, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800170c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800170e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001712:	6563      	str	r3, [r4, #84]	; 0x54
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001714:	68eb      	ldr	r3, [r5, #12]
 8001716:	019b      	lsls	r3, r3, #6
 8001718:	d50f      	bpl.n	800173a <HAL_ADC_Start+0xd6>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800171a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800171c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001720:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001724:	6563      	str	r3, [r4, #84]	; 0x54
 8001726:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UNLOCK(hadc);
 8001728:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 800172c:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = HAL_BUSY;
 800172e:	2002      	movs	r0, #2
 8001730:	bd70      	pop	{r4, r5, r6, pc}
      if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001732:	4d04      	ldr	r5, [pc, #16]	; (8001744 <HAL_ADC_Start+0xe0>)
           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001734:	2e00      	cmp	r6, #0
 8001736:	d0ba      	beq.n	80016ae <HAL_ADC_Start+0x4a>
 8001738:	e7bd      	b.n	80016b6 <HAL_ADC_Start+0x52>
}
 800173a:	bd70      	pop	{r4, r5, r6, pc}
 800173c:	50040300 	.word	0x50040300
 8001740:	50040100 	.word	0x50040100
 8001744:	50040000 	.word	0x50040000

08001748 <LL_ADC_IsEnabled>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001748:	6880      	ldr	r0, [r0, #8]
}
 800174a:	f000 0001 	and.w	r0, r0, #1
 800174e:	4770      	bx	lr

08001750 <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001750:	6880      	ldr	r0, [r0, #8]
}
 8001752:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8001756:	4770      	bx	lr

08001758 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001758:	b530      	push	{r4, r5, lr}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800175a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800175e:	2b01      	cmp	r3, #1
{
 8001760:	b09b      	sub	sp, #108	; 0x6c
 8001762:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 8001764:	d066      	beq.n	8001834 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
 8001766:	2301      	movs	r3, #1
 8001768:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800176c:	4b32      	ldr	r3, [pc, #200]	; (8001838 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 800176e:	6800      	ldr	r0, [r0, #0]
 8001770:	4298      	cmp	r0, r3
 8001772:	bf0c      	ite	eq
 8001774:	f503 7380 	addeq.w	r3, r3, #256	; 0x100
 8001778:	2300      	movne	r3, #0
 800177a:	9301      	str	r3, [sp, #4]
  
  if (tmphadcSlave.Instance == NULL)
 800177c:	9801      	ldr	r0, [sp, #4]
 800177e:	b940      	cbnz	r0, 8001792 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001780:	6d53      	ldr	r3, [r2, #84]	; 0x54
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001782:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001786:	f043 0320 	orr.w	r3, r3, #32
 800178a:	6553      	str	r3, [r2, #84]	; 0x54
    
    return HAL_ERROR;
 800178c:	2001      	movs	r0, #1
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return tmp_hal_status;
} 
 800178e:	b01b      	add	sp, #108	; 0x6c
 8001790:	bd30      	pop	{r4, r5, pc}
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001792:	f7ff ffdd 	bl	8001750 <LL_ADC_REG_IsConversionOngoing>
 8001796:	4603      	mov	r3, r0
  if ( (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL) 
 8001798:	6810      	ldr	r0, [r2, #0]
 800179a:	f7ff ffd9 	bl	8001750 <LL_ADC_REG_IsConversionOngoing>
 800179e:	2800      	cmp	r0, #0
 80017a0:	d142      	bne.n	8001828 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
    && (tmphadcSlave_conversion_on_going == 0UL) )
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d140      	bne.n	8001828 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80017a6:	680b      	ldr	r3, [r1, #0]
 80017a8:	4c24      	ldr	r4, [pc, #144]	; (800183c <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 80017aa:	b333      	cbz	r3, 80017fa <HAL_ADCEx_MultiModeConfigChannel+0xa2>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG, 
 80017ac:	68a3      	ldr	r3, [r4, #8]
 80017ae:	6848      	ldr	r0, [r1, #4]
 80017b0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80017b4:	4303      	orrs	r3, r0
 80017b6:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
 80017ba:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
 80017be:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80017c0:	481d      	ldr	r0, [pc, #116]	; (8001838 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 80017c2:	f7ff ffc1 	bl	8001748 <LL_ADC_IsEnabled>
 80017c6:	4603      	mov	r3, r0
 80017c8:	481d      	ldr	r0, [pc, #116]	; (8001840 <HAL_ADCEx_MultiModeConfigChannel+0xe8>)
 80017ca:	f7ff ffbd 	bl	8001748 <LL_ADC_IsEnabled>
 80017ce:	4303      	orrs	r3, r0
 80017d0:	481c      	ldr	r0, [pc, #112]	; (8001844 <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 80017d2:	f7ff ffb9 	bl	8001748 <LL_ADC_IsEnabled>
 80017d6:	4318      	orrs	r0, r3
 80017d8:	d004      	beq.n	80017e4 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017da:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80017dc:	2300      	movs	r3, #0
 80017de:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
  return tmp_hal_status;
 80017e2:	e7d4      	b.n	800178e <HAL_ADCEx_MultiModeConfigChannel+0x36>
          MODIFY_REG(tmpADC_Common->CCR,
 80017e4:	680b      	ldr	r3, [r1, #0]
 80017e6:	68a5      	ldr	r5, [r4, #8]
 80017e8:	6889      	ldr	r1, [r1, #8]
 80017ea:	430b      	orrs	r3, r1
 80017ec:	f425 6171 	bic.w	r1, r5, #3856	; 0xf10
 80017f0:	f021 010f 	bic.w	r1, r1, #15
 80017f4:	430b      	orrs	r3, r1
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80017f6:	60a3      	str	r3, [r4, #8]
 80017f8:	e7f0      	b.n	80017dc <HAL_ADCEx_MultiModeConfigChannel+0x84>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80017fa:	68a3      	ldr	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80017fc:	480e      	ldr	r0, [pc, #56]	; (8001838 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80017fe:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001802:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001804:	f7ff ffa0 	bl	8001748 <LL_ADC_IsEnabled>
 8001808:	4603      	mov	r3, r0
 800180a:	480d      	ldr	r0, [pc, #52]	; (8001840 <HAL_ADCEx_MultiModeConfigChannel+0xe8>)
 800180c:	f7ff ff9c 	bl	8001748 <LL_ADC_IsEnabled>
 8001810:	4303      	orrs	r3, r0
 8001812:	480c      	ldr	r0, [pc, #48]	; (8001844 <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 8001814:	f7ff ff98 	bl	8001748 <LL_ADC_IsEnabled>
 8001818:	4318      	orrs	r0, r3
 800181a:	d1de      	bne.n	80017da <HAL_ADCEx_MultiModeConfigChannel+0x82>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800181c:	68a3      	ldr	r3, [r4, #8]
 800181e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001822:	f023 030f 	bic.w	r3, r3, #15
 8001826:	e7e6      	b.n	80017f6 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001828:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800182a:	f043 0320 	orr.w	r3, r3, #32
 800182e:	6553      	str	r3, [r2, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8001830:	2001      	movs	r0, #1
 8001832:	e7d3      	b.n	80017dc <HAL_ADCEx_MultiModeConfigChannel+0x84>
  __HAL_LOCK(hadc);
 8001834:	2002      	movs	r0, #2
 8001836:	e7aa      	b.n	800178e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8001838:	50040000 	.word	0x50040000
 800183c:	50040300 	.word	0x50040300
 8001840:	50040100 	.word	0x50040100
 8001844:	50040200 	.word	0x50040200

08001848 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001848:	4a07      	ldr	r2, [pc, #28]	; (8001868 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800184a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800184c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001850:	041b      	lsls	r3, r3, #16
 8001852:	0c1b      	lsrs	r3, r3, #16
 8001854:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001858:	0200      	lsls	r0, r0, #8
 800185a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800185e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001862:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001864:	60d3      	str	r3, [r2, #12]
 8001866:	4770      	bx	lr
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800186c:	4b17      	ldr	r3, [pc, #92]	; (80018cc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800186e:	b530      	push	{r4, r5, lr}
 8001870:	68dc      	ldr	r4, [r3, #12]
 8001872:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001876:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800187a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800187c:	2b04      	cmp	r3, #4
 800187e:	bf28      	it	cs
 8001880:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001882:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001884:	f04f 0501 	mov.w	r5, #1
 8001888:	fa05 f303 	lsl.w	r3, r5, r3
 800188c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001890:	bf8c      	ite	hi
 8001892:	3c03      	subhi	r4, #3
 8001894:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001896:	4019      	ands	r1, r3
 8001898:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800189a:	fa05 f404 	lsl.w	r4, r5, r4
 800189e:	3c01      	subs	r4, #1
 80018a0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80018a2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a4:	ea42 0201 	orr.w	r2, r2, r1
 80018a8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ac:	bfaf      	iteee	ge
 80018ae:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b2:	f000 000f 	andlt.w	r0, r0, #15
 80018b6:	4b06      	ldrlt	r3, [pc, #24]	; (80018d0 <HAL_NVIC_SetPriority+0x64>)
 80018b8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ba:	bfa5      	ittet	ge
 80018bc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80018c0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80018c8:	bd30      	pop	{r4, r5, pc}
 80018ca:	bf00      	nop
 80018cc:	e000ed00 	.word	0xe000ed00
 80018d0:	e000ed14 	.word	0xe000ed14

080018d4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d4:	3801      	subs	r0, #1
 80018d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80018da:	d20a      	bcs.n	80018f2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018de:	4a07      	ldr	r2, [pc, #28]	; (80018fc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018e0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e2:	21f0      	movs	r1, #240	; 0xf0
 80018e4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ea:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018ec:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80018f2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	e000e010 	.word	0xe000e010
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001904:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001906:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001908:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001ab4 <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800190c:	4c67      	ldr	r4, [pc, #412]	; (8001aac <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800190e:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 8001910:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001912:	9a01      	ldr	r2, [sp, #4]
 8001914:	40da      	lsrs	r2, r3
 8001916:	d102      	bne.n	800191e <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8001918:	b005      	add	sp, #20
 800191a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800191e:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 8001920:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001922:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 8001924:	ea12 0e06 	ands.w	lr, r2, r6
 8001928:	f000 80b1 	beq.w	8001a8e <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800192c:	684a      	ldr	r2, [r1, #4]
 800192e:	f022 0710 	bic.w	r7, r2, #16
 8001932:	2f02      	cmp	r7, #2
 8001934:	d116      	bne.n	8001964 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 8001936:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 800193a:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800193e:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001942:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001946:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800194a:	f04f 0c0f 	mov.w	ip, #15
 800194e:	fa0c fc0a 	lsl.w	ip, ip, sl
 8001952:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001956:	690d      	ldr	r5, [r1, #16]
 8001958:	fa05 f50a 	lsl.w	r5, r5, sl
 800195c:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8001960:	f8c9 5020 	str.w	r5, [r9, #32]
 8001964:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001968:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800196a:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800196e:	fa05 f50c 	lsl.w	r5, r5, ip
 8001972:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001974:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001978:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800197c:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001980:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001982:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001986:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001988:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800198c:	d811      	bhi.n	80019b2 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 800198e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001990:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001994:	68cf      	ldr	r7, [r1, #12]
 8001996:	fa07 f70c 	lsl.w	r7, r7, ip
 800199a:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 800199e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80019a0:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019a2:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80019a6:	f3c2 1700 	ubfx	r7, r2, #4, #1
 80019aa:	409f      	lsls	r7, r3
 80019ac:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 80019b0:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80019b2:	f1ba 0f03 	cmp.w	sl, #3
 80019b6:	d107      	bne.n	80019c8 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 80019b8:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80019ba:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80019be:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 80019c2:	409f      	lsls	r7, r3
 80019c4:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 80019c6:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 80019c8:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80019ca:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019cc:	688e      	ldr	r6, [r1, #8]
 80019ce:	fa06 f60c 	lsl.w	r6, r6, ip
 80019d2:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 80019d4:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019d6:	00d5      	lsls	r5, r2, #3
 80019d8:	d559      	bpl.n	8001a8e <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019da:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 80019de:	f045 0501 	orr.w	r5, r5, #1
 80019e2:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 80019e6:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 80019ea:	f023 0603 	bic.w	r6, r3, #3
 80019ee:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80019f2:	f005 0501 	and.w	r5, r5, #1
 80019f6:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 80019fa:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019fc:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a00:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001a02:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a04:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001a08:	270f      	movs	r7, #15
 8001a0a:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a0e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a12:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a16:	d03c      	beq.n	8001a92 <HAL_GPIO_Init+0x192>
 8001a18:	4d25      	ldr	r5, [pc, #148]	; (8001ab0 <HAL_GPIO_Init+0x1b0>)
 8001a1a:	42a8      	cmp	r0, r5
 8001a1c:	d03b      	beq.n	8001a96 <HAL_GPIO_Init+0x196>
 8001a1e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a22:	42a8      	cmp	r0, r5
 8001a24:	d039      	beq.n	8001a9a <HAL_GPIO_Init+0x19a>
 8001a26:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a2a:	42a8      	cmp	r0, r5
 8001a2c:	d037      	beq.n	8001a9e <HAL_GPIO_Init+0x19e>
 8001a2e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a32:	42a8      	cmp	r0, r5
 8001a34:	d035      	beq.n	8001aa2 <HAL_GPIO_Init+0x1a2>
 8001a36:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a3a:	42a8      	cmp	r0, r5
 8001a3c:	d033      	beq.n	8001aa6 <HAL_GPIO_Init+0x1a6>
 8001a3e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a42:	42a8      	cmp	r0, r5
 8001a44:	bf14      	ite	ne
 8001a46:	2507      	movne	r5, #7
 8001a48:	2506      	moveq	r5, #6
 8001a4a:	fa05 f50c 	lsl.w	r5, r5, ip
 8001a4e:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a50:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 8001a52:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8001a54:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a58:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 8001a5a:	bf54      	ite	pl
 8001a5c:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001a5e:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 8001a62:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8001a64:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a66:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 8001a68:	bf54      	ite	pl
 8001a6a:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001a6c:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8001a70:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 8001a72:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a74:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 8001a76:	bf54      	ite	pl
 8001a78:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001a7a:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 8001a7e:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8001a80:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a82:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 8001a84:	bf54      	ite	pl
 8001a86:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001a88:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 8001a8c:	60e5      	str	r5, [r4, #12]
    position++;
 8001a8e:	3301      	adds	r3, #1
 8001a90:	e73f      	b.n	8001912 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a92:	2500      	movs	r5, #0
 8001a94:	e7d9      	b.n	8001a4a <HAL_GPIO_Init+0x14a>
 8001a96:	2501      	movs	r5, #1
 8001a98:	e7d7      	b.n	8001a4a <HAL_GPIO_Init+0x14a>
 8001a9a:	2502      	movs	r5, #2
 8001a9c:	e7d5      	b.n	8001a4a <HAL_GPIO_Init+0x14a>
 8001a9e:	2503      	movs	r5, #3
 8001aa0:	e7d3      	b.n	8001a4a <HAL_GPIO_Init+0x14a>
 8001aa2:	2504      	movs	r5, #4
 8001aa4:	e7d1      	b.n	8001a4a <HAL_GPIO_Init+0x14a>
 8001aa6:	2505      	movs	r5, #5
 8001aa8:	e7cf      	b.n	8001a4a <HAL_GPIO_Init+0x14a>
 8001aaa:	bf00      	nop
 8001aac:	40010400 	.word	0x40010400
 8001ab0:	48000400 	.word	0x48000400
 8001ab4:	40021000 	.word	0x40021000

08001ab8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ab8:	b10a      	cbz	r2, 8001abe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001aba:	6181      	str	r1, [r0, #24]
 8001abc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001abe:	6281      	str	r1, [r0, #40]	; 0x28
 8001ac0:	4770      	bx	lr

08001ac2 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ac2:	6803      	ldr	r3, [r0, #0]
 8001ac4:	699a      	ldr	r2, [r3, #24]
 8001ac6:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8001ac8:	bf44      	itt	mi
 8001aca:	2200      	movmi	r2, #0
 8001acc:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ace:	699a      	ldr	r2, [r3, #24]
 8001ad0:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001ad2:	bf5e      	ittt	pl
 8001ad4:	699a      	ldrpl	r2, [r3, #24]
 8001ad6:	f042 0201 	orrpl.w	r2, r2, #1
 8001ada:	619a      	strpl	r2, [r3, #24]
 8001adc:	4770      	bx	lr

08001ade <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001ade:	b530      	push	{r4, r5, lr}
 8001ae0:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001ae2:	6805      	ldr	r5, [r0, #0]
 8001ae4:	4323      	orrs	r3, r4
 8001ae6:	0d64      	lsrs	r4, r4, #21
 8001ae8:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8001aec:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8001af0:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8001af4:	6868      	ldr	r0, [r5, #4]
 8001af6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001afa:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8001afe:	4319      	orrs	r1, r3
 8001b00:	f044 0403 	orr.w	r4, r4, #3
 8001b04:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001b08:	ea20 0404 	bic.w	r4, r0, r4
 8001b0c:	4321      	orrs	r1, r4
 8001b0e:	6069      	str	r1, [r5, #4]
 8001b10:	bd30      	pop	{r4, r5, pc}

08001b12 <I2C_WaitOnFlagUntilTimeout>:
{
 8001b12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b16:	9f06      	ldr	r7, [sp, #24]
 8001b18:	4604      	mov	r4, r0
 8001b1a:	4688      	mov	r8, r1
 8001b1c:	4616      	mov	r6, r2
 8001b1e:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b20:	6822      	ldr	r2, [r4, #0]
 8001b22:	6993      	ldr	r3, [r2, #24]
 8001b24:	ea38 0303 	bics.w	r3, r8, r3
 8001b28:	bf0c      	ite	eq
 8001b2a:	2301      	moveq	r3, #1
 8001b2c:	2300      	movne	r3, #0
 8001b2e:	42b3      	cmp	r3, r6
 8001b30:	d002      	beq.n	8001b38 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8001b32:	2000      	movs	r0, #0
}
 8001b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001b38:	1c6b      	adds	r3, r5, #1
 8001b3a:	d0f2      	beq.n	8001b22 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b3c:	f7ff f9ee 	bl	8000f1c <HAL_GetTick>
 8001b40:	1bc0      	subs	r0, r0, r7
 8001b42:	4285      	cmp	r5, r0
 8001b44:	d301      	bcc.n	8001b4a <I2C_WaitOnFlagUntilTimeout+0x38>
 8001b46:	2d00      	cmp	r5, #0
 8001b48:	d1ea      	bne.n	8001b20 <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b4a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001b4c:	f043 0320 	orr.w	r3, r3, #32
 8001b50:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001b52:	2320      	movs	r3, #32
 8001b54:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001b5e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001b62:	2001      	movs	r0, #1
 8001b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001b68 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b68:	6803      	ldr	r3, [r0, #0]
{
 8001b6a:	b570      	push	{r4, r5, r6, lr}
 8001b6c:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b6e:	6998      	ldr	r0, [r3, #24]
 8001b70:	f010 0010 	ands.w	r0, r0, #16
{
 8001b74:	460d      	mov	r5, r1
 8001b76:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b78:	d116      	bne.n	8001ba8 <I2C_IsAcknowledgeFailed+0x40>
 8001b7a:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8001b7c:	1c69      	adds	r1, r5, #1
 8001b7e:	d014      	beq.n	8001baa <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b80:	f7ff f9cc 	bl	8000f1c <HAL_GetTick>
 8001b84:	1b80      	subs	r0, r0, r6
 8001b86:	4285      	cmp	r5, r0
 8001b88:	d300      	bcc.n	8001b8c <I2C_IsAcknowledgeFailed+0x24>
 8001b8a:	b96d      	cbnz	r5, 8001ba8 <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b8c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001b8e:	f043 0320 	orr.w	r3, r3, #32
 8001b92:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001b94:	2320      	movs	r3, #32
 8001b96:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001ba0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8001ba4:	2001      	movs	r0, #1
}
 8001ba6:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ba8:	6823      	ldr	r3, [r4, #0]
 8001baa:	6999      	ldr	r1, [r3, #24]
 8001bac:	068a      	lsls	r2, r1, #26
 8001bae:	d5e5      	bpl.n	8001b7c <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bb0:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bb2:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bb4:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001bb6:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bb8:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001bba:	f7ff ff82 	bl	8001ac2 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001bbe:	6822      	ldr	r2, [r4, #0]
 8001bc0:	6853      	ldr	r3, [r2, #4]
 8001bc2:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001bc6:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001bca:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001bce:	f023 0301 	bic.w	r3, r3, #1
 8001bd2:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001bd4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001bd6:	f043 0304 	orr.w	r3, r3, #4
 8001bda:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001bdc:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 8001be0:	e7db      	b.n	8001b9a <I2C_IsAcknowledgeFailed+0x32>

08001be2 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001be2:	b570      	push	{r4, r5, r6, lr}
 8001be4:	4604      	mov	r4, r0
 8001be6:	460d      	mov	r5, r1
 8001be8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001bea:	6823      	ldr	r3, [r4, #0]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	079b      	lsls	r3, r3, #30
 8001bf0:	d501      	bpl.n	8001bf6 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bf6:	4632      	mov	r2, r6
 8001bf8:	4629      	mov	r1, r5
 8001bfa:	4620      	mov	r0, r4
 8001bfc:	f7ff ffb4 	bl	8001b68 <I2C_IsAcknowledgeFailed>
 8001c00:	b9a0      	cbnz	r0, 8001c2c <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8001c02:	1c6a      	adds	r2, r5, #1
 8001c04:	d0f1      	beq.n	8001bea <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c06:	f7ff f989 	bl	8000f1c <HAL_GetTick>
 8001c0a:	1b80      	subs	r0, r0, r6
 8001c0c:	4285      	cmp	r5, r0
 8001c0e:	d301      	bcc.n	8001c14 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8001c10:	2d00      	cmp	r5, #0
 8001c12:	d1ea      	bne.n	8001bea <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c14:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c16:	f043 0320 	orr.w	r3, r3, #32
 8001c1a:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001c1c:	2320      	movs	r3, #32
 8001c1e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c22:	2300      	movs	r3, #0
 8001c24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001c28:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001c2c:	2001      	movs	r0, #1
}
 8001c2e:	bd70      	pop	{r4, r5, r6, pc}

08001c30 <I2C_RequestMemoryWrite>:
{
 8001c30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001c32:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8001c34:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001c36:	4b16      	ldr	r3, [pc, #88]	; (8001c90 <I2C_RequestMemoryWrite+0x60>)
 8001c38:	9300      	str	r3, [sp, #0]
{
 8001c3a:	4605      	mov	r5, r0
 8001c3c:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001c3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c42:	b2fa      	uxtb	r2, r7
 8001c44:	f7ff ff4b 	bl	8001ade <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c48:	4632      	mov	r2, r6
 8001c4a:	9908      	ldr	r1, [sp, #32]
 8001c4c:	4628      	mov	r0, r5
 8001c4e:	f7ff ffc8 	bl	8001be2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c52:	b110      	cbz	r0, 8001c5a <I2C_RequestMemoryWrite+0x2a>
    return HAL_ERROR;
 8001c54:	2001      	movs	r0, #1
}
 8001c56:	b003      	add	sp, #12
 8001c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c5a:	2f01      	cmp	r7, #1
 8001c5c:	682b      	ldr	r3, [r5, #0]
 8001c5e:	d10c      	bne.n	8001c7a <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c60:	b2e4      	uxtb	r4, r4
 8001c62:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001c64:	9b08      	ldr	r3, [sp, #32]
 8001c66:	9600      	str	r6, [sp, #0]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2180      	movs	r1, #128	; 0x80
 8001c6c:	4628      	mov	r0, r5
 8001c6e:	f7ff ff50 	bl	8001b12 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8001c72:	3000      	adds	r0, #0
 8001c74:	bf18      	it	ne
 8001c76:	2001      	movne	r0, #1
 8001c78:	e7ed      	b.n	8001c56 <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001c7a:	0a22      	lsrs	r2, r4, #8
 8001c7c:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c7e:	9908      	ldr	r1, [sp, #32]
 8001c80:	4632      	mov	r2, r6
 8001c82:	4628      	mov	r0, r5
 8001c84:	f7ff ffad 	bl	8001be2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c88:	2800      	cmp	r0, #0
 8001c8a:	d1e3      	bne.n	8001c54 <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c8c:	682b      	ldr	r3, [r5, #0]
 8001c8e:	e7e7      	b.n	8001c60 <I2C_RequestMemoryWrite+0x30>
 8001c90:	80002000 	.word	0x80002000

08001c94 <I2C_RequestMemoryRead>:
{
 8001c94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001c96:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8001c98:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001c9a:	4b16      	ldr	r3, [pc, #88]	; (8001cf4 <I2C_RequestMemoryRead+0x60>)
 8001c9c:	9300      	str	r3, [sp, #0]
{
 8001c9e:	4605      	mov	r5, r0
 8001ca0:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	b2fa      	uxtb	r2, r7
 8001ca6:	f7ff ff1a 	bl	8001ade <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001caa:	4632      	mov	r2, r6
 8001cac:	9908      	ldr	r1, [sp, #32]
 8001cae:	4628      	mov	r0, r5
 8001cb0:	f7ff ff97 	bl	8001be2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001cb4:	b110      	cbz	r0, 8001cbc <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 8001cb6:	2001      	movs	r0, #1
}
 8001cb8:	b003      	add	sp, #12
 8001cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001cbc:	2f01      	cmp	r7, #1
 8001cbe:	682b      	ldr	r3, [r5, #0]
 8001cc0:	d10c      	bne.n	8001cdc <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001cc2:	b2e4      	uxtb	r4, r4
 8001cc4:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001cc6:	9b08      	ldr	r3, [sp, #32]
 8001cc8:	9600      	str	r6, [sp, #0]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2140      	movs	r1, #64	; 0x40
 8001cce:	4628      	mov	r0, r5
 8001cd0:	f7ff ff1f 	bl	8001b12 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8001cd4:	3000      	adds	r0, #0
 8001cd6:	bf18      	it	ne
 8001cd8:	2001      	movne	r0, #1
 8001cda:	e7ed      	b.n	8001cb8 <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001cdc:	0a22      	lsrs	r2, r4, #8
 8001cde:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ce0:	9908      	ldr	r1, [sp, #32]
 8001ce2:	4632      	mov	r2, r6
 8001ce4:	4628      	mov	r0, r5
 8001ce6:	f7ff ff7c 	bl	8001be2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001cea:	2800      	cmp	r0, #0
 8001cec:	d1e3      	bne.n	8001cb6 <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001cee:	682b      	ldr	r3, [r5, #0]
 8001cf0:	e7e7      	b.n	8001cc2 <I2C_RequestMemoryRead+0x2e>
 8001cf2:	bf00      	nop
 8001cf4:	80002000 	.word	0x80002000

08001cf8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001cf8:	b570      	push	{r4, r5, r6, lr}
 8001cfa:	4604      	mov	r4, r0
 8001cfc:	460d      	mov	r5, r1
 8001cfe:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d00:	6823      	ldr	r3, [r4, #0]
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	069b      	lsls	r3, r3, #26
 8001d06:	d501      	bpl.n	8001d0c <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8001d08:	2000      	movs	r0, #0
 8001d0a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d0c:	4632      	mov	r2, r6
 8001d0e:	4629      	mov	r1, r5
 8001d10:	4620      	mov	r0, r4
 8001d12:	f7ff ff29 	bl	8001b68 <I2C_IsAcknowledgeFailed>
 8001d16:	b990      	cbnz	r0, 8001d3e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d18:	f7ff f900 	bl	8000f1c <HAL_GetTick>
 8001d1c:	1b80      	subs	r0, r0, r6
 8001d1e:	4285      	cmp	r5, r0
 8001d20:	d301      	bcc.n	8001d26 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8001d22:	2d00      	cmp	r5, #0
 8001d24:	d1ec      	bne.n	8001d00 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d26:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001d28:	f043 0320 	orr.w	r3, r3, #32
 8001d2c:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001d2e:	2320      	movs	r3, #32
 8001d30:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d34:	2300      	movs	r3, #0
 8001d36:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001d3a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001d3e:	2001      	movs	r0, #1
}
 8001d40:	bd70      	pop	{r4, r5, r6, pc}

08001d42 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8001d42:	b570      	push	{r4, r5, r6, lr}
 8001d44:	4604      	mov	r4, r0
 8001d46:	460d      	mov	r5, r1
 8001d48:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d4a:	6823      	ldr	r3, [r4, #0]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	075b      	lsls	r3, r3, #29
 8001d50:	d40e      	bmi.n	8001d70 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d52:	4632      	mov	r2, r6
 8001d54:	4629      	mov	r1, r5
 8001d56:	4620      	mov	r0, r4
 8001d58:	f7ff ff06 	bl	8001b68 <I2C_IsAcknowledgeFailed>
 8001d5c:	b9f0      	cbnz	r0, 8001d9c <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001d5e:	6823      	ldr	r3, [r4, #0]
 8001d60:	699a      	ldr	r2, [r3, #24]
 8001d62:	0691      	lsls	r1, r2, #26
 8001d64:	d51c      	bpl.n	8001da0 <I2C_WaitOnRXNEFlagUntilTimeout+0x5e>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001d66:	699a      	ldr	r2, [r3, #24]
 8001d68:	0752      	lsls	r2, r2, #29
 8001d6a:	d503      	bpl.n	8001d74 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
 8001d6c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001d6e:	b10a      	cbz	r2, 8001d74 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        return HAL_OK;
 8001d70:	2000      	movs	r0, #0
 8001d72:	bd70      	pop	{r4, r5, r6, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d74:	2120      	movs	r1, #32
 8001d76:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001d7e:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001d82:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001d86:	f022 0201 	bic.w	r2, r2, #1
 8001d8a:	605a      	str	r2, [r3, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d90:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001d98:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001d9c:	2001      	movs	r0, #1
}
 8001d9e:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001da0:	f7ff f8bc 	bl	8000f1c <HAL_GetTick>
 8001da4:	1b80      	subs	r0, r0, r6
 8001da6:	4285      	cmp	r5, r0
 8001da8:	d301      	bcc.n	8001dae <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
 8001daa:	2d00      	cmp	r5, #0
 8001dac:	d1cd      	bne.n	8001d4a <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001db0:	f043 0320 	orr.w	r3, r3, #32
 8001db4:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001db6:	2320      	movs	r3, #32
 8001db8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	e7eb      	b.n	8001d98 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>

08001dc0 <HAL_I2C_Init>:
{
 8001dc0:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8001dc2:	4604      	mov	r4, r0
 8001dc4:	2800      	cmp	r0, #0
 8001dc6:	d04a      	beq.n	8001e5e <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dc8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001dcc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001dd0:	b91b      	cbnz	r3, 8001dda <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8001dd2:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001dd6:	f002 fc6d 	bl	80046b4 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dda:	2324      	movs	r3, #36	; 0x24
 8001ddc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001de0:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001de2:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	f022 0201 	bic.w	r2, r2, #1
 8001dea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001dec:	6862      	ldr	r2, [r4, #4]
 8001dee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001df2:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001df4:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001df6:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001df8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dfc:	609a      	str	r2, [r3, #8]
 8001dfe:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e00:	d124      	bne.n	8001e4c <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e06:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e08:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001e0a:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e0c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001e10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e14:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e16:	68da      	ldr	r2, [r3, #12]
 8001e18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e1c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001e1e:	6922      	ldr	r2, [r4, #16]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	69a1      	ldr	r1, [r4, #24]
 8001e24:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001e28:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e2a:	6a21      	ldr	r1, [r4, #32]
 8001e2c:	69e2      	ldr	r2, [r4, #28]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	f042 0201 	orr.w	r2, r2, #1
 8001e38:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e3a:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001e3c:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e3e:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e40:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e44:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e46:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8001e4a:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e4c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e50:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e52:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e54:	bf04      	itt	eq
 8001e56:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8001e5a:	605a      	streq	r2, [r3, #4]
 8001e5c:	e7d4      	b.n	8001e08 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8001e5e:	2001      	movs	r0, #1
}
 8001e60:	bd10      	pop	{r4, pc}
	...

08001e64 <HAL_I2C_Master_Transmit>:
{
 8001e64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001e68:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e6a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001e6e:	2b20      	cmp	r3, #32
{
 8001e70:	4604      	mov	r4, r0
 8001e72:	460e      	mov	r6, r1
 8001e74:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e76:	f040 8084 	bne.w	8001f82 <HAL_I2C_Master_Transmit+0x11e>
    __HAL_LOCK(hi2c);
 8001e7a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d07f      	beq.n	8001f82 <HAL_I2C_Master_Transmit+0x11e>
 8001e82:	2701      	movs	r7, #1
 8001e84:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001e88:	f7ff f848 	bl	8000f1c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e8c:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8001e8e:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e90:	9000      	str	r0, [sp, #0]
 8001e92:	463a      	mov	r2, r7
 8001e94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e98:	4620      	mov	r0, r4
 8001e9a:	f7ff fe3a 	bl	8001b12 <I2C_WaitOnFlagUntilTimeout>
 8001e9e:	b118      	cbz	r0, 8001ea8 <HAL_I2C_Master_Transmit+0x44>
      return HAL_ERROR;
 8001ea0:	2001      	movs	r0, #1
}
 8001ea2:	b003      	add	sp, #12
 8001ea4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ea8:	2321      	movs	r3, #33	; 0x21
 8001eaa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001eae:	2310      	movs	r3, #16
 8001eb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eb4:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8001eb6:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001eba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8001ebc:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8001ec4:	6360      	str	r0, [r4, #52]	; 0x34
 8001ec6:	4b30      	ldr	r3, [pc, #192]	; (8001f88 <HAL_I2C_Master_Transmit+0x124>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ec8:	d926      	bls.n	8001f18 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001eca:	22ff      	movs	r2, #255	; 0xff
 8001ecc:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001ece:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001ed0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001ed4:	4631      	mov	r1, r6
 8001ed6:	4620      	mov	r0, r4
 8001ed8:	f7ff fe01 	bl	8001ade <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001edc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ede:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 8001ee0:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ee2:	462a      	mov	r2, r5
 8001ee4:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8001ee6:	b9fb      	cbnz	r3, 8001f28 <HAL_I2C_Master_Transmit+0xc4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ee8:	f7ff ff06 	bl	8001cf8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001eec:	2800      	cmp	r0, #0
 8001eee:	d1d7      	bne.n	8001ea0 <HAL_I2C_Master_Transmit+0x3c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ef0:	6823      	ldr	r3, [r4, #0]
 8001ef2:	2120      	movs	r1, #32
 8001ef4:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001efc:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001f00:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001f04:	f022 0201 	bic.w	r2, r2, #1
 8001f08:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001f0a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001f0e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f12:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001f16:	e7c4      	b.n	8001ea2 <HAL_I2C_Master_Transmit+0x3e>
      hi2c->XferSize = hi2c->XferCount;
 8001f18:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001f1a:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8001f1c:	b292      	uxth	r2, r2
 8001f1e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	e7d5      	b.n	8001ed4 <HAL_I2C_Master_Transmit+0x70>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f28:	f7ff fe5b 	bl	8001be2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f2c:	2800      	cmp	r0, #0
 8001f2e:	d1b7      	bne.n	8001ea0 <HAL_I2C_Master_Transmit+0x3c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f32:	6822      	ldr	r2, [r4, #0]
 8001f34:	f813 1b01 	ldrb.w	r1, [r3], #1
 8001f38:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001f3a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001f3c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001f3e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001f40:	3b01      	subs	r3, #1
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f46:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001f48:	3a01      	subs	r2, #1
 8001f4a:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f4c:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8001f4e:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0c3      	beq.n	8001edc <HAL_I2C_Master_Transmit+0x78>
 8001f54:	2a00      	cmp	r2, #0
 8001f56:	d1c1      	bne.n	8001edc <HAL_I2C_Master_Transmit+0x78>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f58:	9500      	str	r5, [sp, #0]
 8001f5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001f5c:	2180      	movs	r1, #128	; 0x80
 8001f5e:	4620      	mov	r0, r4
 8001f60:	f7ff fdd7 	bl	8001b12 <I2C_WaitOnFlagUntilTimeout>
 8001f64:	2800      	cmp	r0, #0
 8001f66:	d19b      	bne.n	8001ea0 <HAL_I2C_Master_Transmit+0x3c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f68:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	2bff      	cmp	r3, #255	; 0xff
 8001f6e:	d903      	bls.n	8001f78 <HAL_I2C_Master_Transmit+0x114>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f70:	22ff      	movs	r2, #255	; 0xff
 8001f72:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001f74:	9000      	str	r0, [sp, #0]
 8001f76:	e7ab      	b.n	8001ed0 <HAL_I2C_Master_Transmit+0x6c>
          hi2c->XferSize = hi2c->XferCount;
 8001f78:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f7a:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8001f7c:	b292      	uxth	r2, r2
 8001f7e:	8522      	strh	r2, [r4, #40]	; 0x28
 8001f80:	e7ce      	b.n	8001f20 <HAL_I2C_Master_Transmit+0xbc>
    return HAL_BUSY;
 8001f82:	2002      	movs	r0, #2
 8001f84:	e78d      	b.n	8001ea2 <HAL_I2C_Master_Transmit+0x3e>
 8001f86:	bf00      	nop
 8001f88:	80002000 	.word	0x80002000

08001f8c <HAL_I2C_Master_Receive>:
{
 8001f8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001f90:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f92:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001f96:	2b20      	cmp	r3, #32
{
 8001f98:	4604      	mov	r4, r0
 8001f9a:	460e      	mov	r6, r1
 8001f9c:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f9e:	f040 8086 	bne.w	80020ae <HAL_I2C_Master_Receive+0x122>
    __HAL_LOCK(hi2c);
 8001fa2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	f000 8081 	beq.w	80020ae <HAL_I2C_Master_Receive+0x122>
 8001fac:	2701      	movs	r7, #1
 8001fae:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001fb2:	f7fe ffb3 	bl	8000f1c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fb6:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8001fb8:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fba:	9000      	str	r0, [sp, #0]
 8001fbc:	463a      	mov	r2, r7
 8001fbe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fc2:	4620      	mov	r0, r4
 8001fc4:	f7ff fda5 	bl	8001b12 <I2C_WaitOnFlagUntilTimeout>
 8001fc8:	b118      	cbz	r0, 8001fd2 <HAL_I2C_Master_Receive+0x46>
      return HAL_ERROR;
 8001fca:	2001      	movs	r0, #1
}
 8001fcc:	b003      	add	sp, #12
 8001fce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001fd2:	2322      	movs	r3, #34	; 0x22
 8001fd4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001fd8:	2310      	movs	r3, #16
 8001fda:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fde:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8001fe0:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fe4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8001fe6:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8001fee:	6360      	str	r0, [r4, #52]	; 0x34
 8001ff0:	4b30      	ldr	r3, [pc, #192]	; (80020b4 <HAL_I2C_Master_Receive+0x128>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ff2:	d926      	bls.n	8002042 <HAL_I2C_Master_Receive+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ff4:	22ff      	movs	r2, #255	; 0xff
 8001ff6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001ff8:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001ffa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001ffe:	4631      	mov	r1, r6
 8002000:	4620      	mov	r0, r4
 8002002:	f7ff fd6c 	bl	8001ade <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002006:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002008:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 800200a:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800200c:	462a      	mov	r2, r5
 800200e:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8002010:	b9fb      	cbnz	r3, 8002052 <HAL_I2C_Master_Receive+0xc6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002012:	f7ff fe71 	bl	8001cf8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002016:	2800      	cmp	r0, #0
 8002018:	d1d7      	bne.n	8001fca <HAL_I2C_Master_Receive+0x3e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800201a:	6823      	ldr	r3, [r4, #0]
 800201c:	2120      	movs	r1, #32
 800201e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002026:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800202a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800202e:	f022 0201 	bic.w	r2, r2, #1
 8002032:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002034:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002038:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800203c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8002040:	e7c4      	b.n	8001fcc <HAL_I2C_Master_Receive+0x40>
      hi2c->XferSize = hi2c->XferCount;
 8002042:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002044:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8002046:	b292      	uxth	r2, r2
 8002048:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800204a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	e7d5      	b.n	8001ffe <HAL_I2C_Master_Receive+0x72>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002052:	f7ff fe76 	bl	8001d42 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002056:	2800      	cmp	r0, #0
 8002058:	d1b7      	bne.n	8001fca <HAL_I2C_Master_Receive+0x3e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800205a:	6822      	ldr	r2, [r4, #0]
 800205c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800205e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002060:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002062:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002064:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002066:	3301      	adds	r3, #1
 8002068:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800206a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800206c:	3b01      	subs	r3, #1
 800206e:	b29b      	uxth	r3, r3
 8002070:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002072:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002074:	3a01      	subs	r2, #1
 8002076:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002078:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800207a:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0c2      	beq.n	8002006 <HAL_I2C_Master_Receive+0x7a>
 8002080:	2a00      	cmp	r2, #0
 8002082:	d1c0      	bne.n	8002006 <HAL_I2C_Master_Receive+0x7a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002084:	9500      	str	r5, [sp, #0]
 8002086:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002088:	2180      	movs	r1, #128	; 0x80
 800208a:	4620      	mov	r0, r4
 800208c:	f7ff fd41 	bl	8001b12 <I2C_WaitOnFlagUntilTimeout>
 8002090:	2800      	cmp	r0, #0
 8002092:	d19a      	bne.n	8001fca <HAL_I2C_Master_Receive+0x3e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002094:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002096:	b29b      	uxth	r3, r3
 8002098:	2bff      	cmp	r3, #255	; 0xff
 800209a:	d903      	bls.n	80020a4 <HAL_I2C_Master_Receive+0x118>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800209c:	22ff      	movs	r2, #255	; 0xff
 800209e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80020a0:	9000      	str	r0, [sp, #0]
 80020a2:	e7aa      	b.n	8001ffa <HAL_I2C_Master_Receive+0x6e>
          hi2c->XferSize = hi2c->XferCount;
 80020a4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80020a6:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80020a8:	b292      	uxth	r2, r2
 80020aa:	8522      	strh	r2, [r4, #40]	; 0x28
 80020ac:	e7cd      	b.n	800204a <HAL_I2C_Master_Receive+0xbe>
    return HAL_BUSY;
 80020ae:	2002      	movs	r0, #2
 80020b0:	e78c      	b.n	8001fcc <HAL_I2C_Master_Receive+0x40>
 80020b2:	bf00      	nop
 80020b4:	80002400 	.word	0x80002400

080020b8 <HAL_I2C_Mem_Write>:
{
 80020b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020bc:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80020be:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80020c2:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 80020c4:	2b20      	cmp	r3, #32
{
 80020c6:	4604      	mov	r4, r0
 80020c8:	460f      	mov	r7, r1
 80020ca:	9203      	str	r2, [sp, #12]
 80020cc:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 80020d0:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 80020d4:	f040 80a5 	bne.w	8002222 <HAL_I2C_Mem_Write+0x16a>
    if ((pData == NULL) || (Size == 0U))
 80020d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80020da:	b113      	cbz	r3, 80020e2 <HAL_I2C_Mem_Write+0x2a>
 80020dc:	f1ba 0f00 	cmp.w	sl, #0
 80020e0:	d106      	bne.n	80020f0 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80020e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020e6:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80020e8:	2001      	movs	r0, #1
}
 80020ea:	b005      	add	sp, #20
 80020ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80020f0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	f000 8094 	beq.w	8002222 <HAL_I2C_Mem_Write+0x16a>
 80020fa:	2501      	movs	r5, #1
 80020fc:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002100:	f7fe ff0c 	bl	8000f1c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002104:	2319      	movs	r3, #25
 8002106:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8002108:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800210a:	462a      	mov	r2, r5
 800210c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002110:	4620      	mov	r0, r4
 8002112:	f7ff fcfe 	bl	8001b12 <I2C_WaitOnFlagUntilTimeout>
 8002116:	4681      	mov	r9, r0
 8002118:	2800      	cmp	r0, #0
 800211a:	d1e5      	bne.n	80020e8 <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800211c:	2321      	movs	r3, #33	; 0x21
 800211e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002122:	2340      	movs	r3, #64	; 0x40
 8002124:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8002128:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800212a:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800212c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 800212e:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8002130:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002134:	9601      	str	r6, [sp, #4]
 8002136:	f8cd 8000 	str.w	r8, [sp]
 800213a:	465b      	mov	r3, fp
 800213c:	9a03      	ldr	r2, [sp, #12]
 800213e:	4639      	mov	r1, r7
 8002140:	4620      	mov	r0, r4
 8002142:	f7ff fd75 	bl	8001c30 <I2C_RequestMemoryWrite>
 8002146:	b110      	cbz	r0, 800214e <HAL_I2C_Mem_Write+0x96>
      __HAL_UNLOCK(hi2c);
 8002148:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 800214c:	e7cc      	b.n	80020e8 <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800214e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002150:	b29b      	uxth	r3, r3
 8002152:	2bff      	cmp	r3, #255	; 0xff
 8002154:	d955      	bls.n	8002202 <HAL_I2C_Mem_Write+0x14a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002156:	22ff      	movs	r2, #255	; 0xff
 8002158:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800215a:	9000      	str	r0, [sp, #0]
 800215c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002160:	4639      	mov	r1, r7
 8002162:	4620      	mov	r0, r4
 8002164:	f7ff fcbb 	bl	8001ade <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002168:	4632      	mov	r2, r6
 800216a:	4641      	mov	r1, r8
 800216c:	4620      	mov	r0, r4
 800216e:	f7ff fd38 	bl	8001be2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002172:	2800      	cmp	r0, #0
 8002174:	d1b8      	bne.n	80020e8 <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002176:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002178:	6822      	ldr	r2, [r4, #0]
 800217a:	f813 1b01 	ldrb.w	r1, [r3], #1
 800217e:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002180:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002182:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002184:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002186:	3b01      	subs	r3, #1
 8002188:	b29b      	uxth	r3, r3
 800218a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800218c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800218e:	3a01      	subs	r2, #1
 8002190:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002192:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8002194:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002196:	b1ab      	cbz	r3, 80021c4 <HAL_I2C_Mem_Write+0x10c>
 8002198:	b9a2      	cbnz	r2, 80021c4 <HAL_I2C_Mem_Write+0x10c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800219a:	9600      	str	r6, [sp, #0]
 800219c:	4643      	mov	r3, r8
 800219e:	2180      	movs	r1, #128	; 0x80
 80021a0:	4620      	mov	r0, r4
 80021a2:	f7ff fcb6 	bl	8001b12 <I2C_WaitOnFlagUntilTimeout>
 80021a6:	2800      	cmp	r0, #0
 80021a8:	d19e      	bne.n	80020e8 <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021aa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	2bff      	cmp	r3, #255	; 0xff
 80021b0:	d92f      	bls.n	8002212 <HAL_I2C_Mem_Write+0x15a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021b2:	22ff      	movs	r2, #255	; 0xff
 80021b4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80021b6:	9000      	str	r0, [sp, #0]
 80021b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80021bc:	4639      	mov	r1, r7
 80021be:	4620      	mov	r0, r4
 80021c0:	f7ff fc8d 	bl	8001ade <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 80021c4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1cd      	bne.n	8002168 <HAL_I2C_Mem_Write+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021cc:	4632      	mov	r2, r6
 80021ce:	4641      	mov	r1, r8
 80021d0:	4620      	mov	r0, r4
 80021d2:	f7ff fd91 	bl	8001cf8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80021d6:	2800      	cmp	r0, #0
 80021d8:	d186      	bne.n	80020e8 <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021da:	6823      	ldr	r3, [r4, #0]
 80021dc:	2120      	movs	r1, #32
 80021de:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80021e6:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80021ea:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80021ee:	f022 0201 	bic.w	r2, r2, #1
 80021f2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80021f4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80021f8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021fc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8002200:	e773      	b.n	80020ea <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8002202:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002204:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8002206:	b292      	uxth	r2, r2
 8002208:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800220a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	e7a6      	b.n	8002160 <HAL_I2C_Mem_Write+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 8002212:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002214:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8002216:	b292      	uxth	r2, r2
 8002218:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800221a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	e7cc      	b.n	80021bc <HAL_I2C_Mem_Write+0x104>
    return HAL_BUSY;
 8002222:	2002      	movs	r0, #2
 8002224:	e761      	b.n	80020ea <HAL_I2C_Mem_Write+0x32>
	...

08002228 <HAL_I2C_Mem_Read>:
{
 8002228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800222c:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800222e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8002232:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002234:	2b20      	cmp	r3, #32
{
 8002236:	4604      	mov	r4, r0
 8002238:	460f      	mov	r7, r1
 800223a:	9203      	str	r2, [sp, #12]
 800223c:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8002240:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002244:	f040 80a9 	bne.w	800239a <HAL_I2C_Mem_Read+0x172>
    if ((pData == NULL) || (Size == 0U))
 8002248:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800224a:	b113      	cbz	r3, 8002252 <HAL_I2C_Mem_Read+0x2a>
 800224c:	f1ba 0f00 	cmp.w	sl, #0
 8002250:	d106      	bne.n	8002260 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002252:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002256:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8002258:	2001      	movs	r0, #1
}
 800225a:	b005      	add	sp, #20
 800225c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8002260:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002264:	2b01      	cmp	r3, #1
 8002266:	f000 8098 	beq.w	800239a <HAL_I2C_Mem_Read+0x172>
 800226a:	2501      	movs	r5, #1
 800226c:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002270:	f7fe fe54 	bl	8000f1c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002274:	2319      	movs	r3, #25
 8002276:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8002278:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800227a:	462a      	mov	r2, r5
 800227c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002280:	4620      	mov	r0, r4
 8002282:	f7ff fc46 	bl	8001b12 <I2C_WaitOnFlagUntilTimeout>
 8002286:	4681      	mov	r9, r0
 8002288:	2800      	cmp	r0, #0
 800228a:	d1e5      	bne.n	8002258 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800228c:	2322      	movs	r3, #34	; 0x22
 800228e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002292:	2340      	movs	r3, #64	; 0x40
 8002294:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8002298:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800229a:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800229c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 800229e:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 80022a0:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022a4:	9601      	str	r6, [sp, #4]
 80022a6:	f8cd 8000 	str.w	r8, [sp]
 80022aa:	465b      	mov	r3, fp
 80022ac:	9a03      	ldr	r2, [sp, #12]
 80022ae:	4639      	mov	r1, r7
 80022b0:	4620      	mov	r0, r4
 80022b2:	f7ff fcef 	bl	8001c94 <I2C_RequestMemoryRead>
 80022b6:	b110      	cbz	r0, 80022be <HAL_I2C_Mem_Read+0x96>
      __HAL_UNLOCK(hi2c);
 80022b8:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 80022bc:	e7cc      	b.n	8002258 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022be:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	2bff      	cmp	r3, #255	; 0xff
 80022c4:	4b36      	ldr	r3, [pc, #216]	; (80023a0 <HAL_I2C_Mem_Read+0x178>)
 80022c6:	d958      	bls.n	800237a <HAL_I2C_Mem_Read+0x152>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022c8:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80022ca:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022cc:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80022ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80022d2:	4639      	mov	r1, r7
 80022d4:	4620      	mov	r0, r4
 80022d6:	f7ff fc02 	bl	8001ade <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80022da:	9600      	str	r6, [sp, #0]
 80022dc:	4643      	mov	r3, r8
 80022de:	2200      	movs	r2, #0
 80022e0:	2104      	movs	r1, #4
 80022e2:	4620      	mov	r0, r4
 80022e4:	f7ff fc15 	bl	8001b12 <I2C_WaitOnFlagUntilTimeout>
 80022e8:	2800      	cmp	r0, #0
 80022ea:	d1b5      	bne.n	8002258 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80022ec:	6822      	ldr	r2, [r4, #0]
 80022ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80022f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022f2:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80022f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80022f6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80022f8:	3301      	adds	r3, #1
 80022fa:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80022fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80022fe:	3b01      	subs	r3, #1
 8002300:	b29b      	uxth	r3, r3
 8002302:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002304:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002306:	3a01      	subs	r2, #1
 8002308:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800230a:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800230c:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800230e:	b1ab      	cbz	r3, 800233c <HAL_I2C_Mem_Read+0x114>
 8002310:	b9a2      	cbnz	r2, 800233c <HAL_I2C_Mem_Read+0x114>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002312:	9600      	str	r6, [sp, #0]
 8002314:	4643      	mov	r3, r8
 8002316:	2180      	movs	r1, #128	; 0x80
 8002318:	4620      	mov	r0, r4
 800231a:	f7ff fbfa 	bl	8001b12 <I2C_WaitOnFlagUntilTimeout>
 800231e:	2800      	cmp	r0, #0
 8002320:	d19a      	bne.n	8002258 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002322:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002324:	b29b      	uxth	r3, r3
 8002326:	2bff      	cmp	r3, #255	; 0xff
 8002328:	d92f      	bls.n	800238a <HAL_I2C_Mem_Read+0x162>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800232a:	22ff      	movs	r2, #255	; 0xff
 800232c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800232e:	9000      	str	r0, [sp, #0]
 8002330:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002334:	4639      	mov	r1, r7
 8002336:	4620      	mov	r0, r4
 8002338:	f7ff fbd1 	bl	8001ade <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 800233c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800233e:	b29b      	uxth	r3, r3
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1ca      	bne.n	80022da <HAL_I2C_Mem_Read+0xb2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002344:	4632      	mov	r2, r6
 8002346:	4641      	mov	r1, r8
 8002348:	4620      	mov	r0, r4
 800234a:	f7ff fcd5 	bl	8001cf8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800234e:	2800      	cmp	r0, #0
 8002350:	d182      	bne.n	8002258 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002352:	6823      	ldr	r3, [r4, #0]
 8002354:	2120      	movs	r1, #32
 8002356:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800235e:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002362:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002366:	f022 0201 	bic.w	r2, r2, #1
 800236a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800236c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002370:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002374:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8002378:	e76f      	b.n	800225a <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 800237a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800237c:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800237e:	b292      	uxth	r2, r2
 8002380:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002382:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	e7a3      	b.n	80022d2 <HAL_I2C_Mem_Read+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 800238a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800238c:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800238e:	b292      	uxth	r2, r2
 8002390:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002392:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	e7cc      	b.n	8002334 <HAL_I2C_Mem_Read+0x10c>
    return HAL_BUSY;
 800239a:	2002      	movs	r0, #2
 800239c:	e75d      	b.n	800225a <HAL_I2C_Mem_Read+0x32>
 800239e:	bf00      	nop
 80023a0:	80002400 	.word	0x80002400

080023a4 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023a4:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	2a20      	cmp	r2, #32
{
 80023ac:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ae:	d11d      	bne.n	80023ec <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023b0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d019      	beq.n	80023ec <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023b8:	2324      	movs	r3, #36	; 0x24
 80023ba:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023be:	6803      	ldr	r3, [r0, #0]
 80023c0:	681c      	ldr	r4, [r3, #0]
 80023c2:	f024 0401 	bic.w	r4, r4, #1
 80023c6:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80023c8:	681c      	ldr	r4, [r3, #0]
 80023ca:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80023ce:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80023d0:	681c      	ldr	r4, [r3, #0]
 80023d2:	4321      	orrs	r1, r4
 80023d4:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023d6:	6819      	ldr	r1, [r3, #0]
 80023d8:	f041 0101 	orr.w	r1, r1, #1
 80023dc:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023de:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80023e0:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80023e4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80023e8:	4618      	mov	r0, r3
 80023ea:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80023ec:	2002      	movs	r0, #2
  }
}
 80023ee:	bd10      	pop	{r4, pc}

080023f0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80023f0:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023f2:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80023f6:	b2e4      	uxtb	r4, r4
 80023f8:	2c20      	cmp	r4, #32
 80023fa:	d11c      	bne.n	8002436 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023fc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002400:	2b01      	cmp	r3, #1
 8002402:	d018      	beq.n	8002436 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002404:	2324      	movs	r3, #36	; 0x24
 8002406:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800240a:	6803      	ldr	r3, [r0, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	f022 0201 	bic.w	r2, r2, #1
 8002412:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002414:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002416:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800241a:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800241e:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	f042 0201 	orr.w	r2, r2, #1
 8002426:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002428:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800242a:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800242e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002432:	4618      	mov	r0, r3
 8002434:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8002436:	2002      	movs	r0, #2
  }
}
 8002438:	bd10      	pop	{r4, pc}
	...

0800243c <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim: LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 800243c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpcfgr = 0;

  /* Check the LPTIM handle allocation */
  if(hlptim == NULL)
 800243e:	4604      	mov	r4, r0
 8002440:	2800      	cmp	r0, #0
 8002442:	d047      	beq.n	80024d4 <HAL_LPTIM_Init+0x98>

#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if(hlptim->State == HAL_LPTIM_STATE_RESET)
 8002444:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 8002448:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800244c:	b91b      	cbnz	r3, 8002456 <HAL_LPTIM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800244e:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8002452:	f002 f9d5 	bl	8004800 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8002456:	2302      	movs	r3, #2

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8002458:	6820      	ldr	r0, [r4, #0]

  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 800245a:	6865      	ldr	r5, [r4, #4]
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800245c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  tmpcfgr = hlptim->Instance->CFGR;
 8002460:	68c2      	ldr	r2, [r0, #12]
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
  }
  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 8002462:	6961      	ldr	r1, [r4, #20]
  {
    tmpcfgr &= (uint32_t)(~ (LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8002464:	4e1c      	ldr	r6, [pc, #112]	; (80024d8 <HAL_LPTIM_Init+0x9c>)
  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 8002466:	2d01      	cmp	r5, #1
  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 8002468:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800246c:	bf08      	it	eq
 800246e:	f022 021e 	biceq.w	r2, r2, #30
  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 8002472:	4299      	cmp	r1, r3
    tmpcfgr &= (uint32_t)(~ (LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8002474:	bf1c      	itt	ne
 8002476:	f422 4260 	bicne.w	r2, r2, #57344	; 0xe000
 800247a:	f022 02c0 	bicne.w	r2, r2, #192	; 0xc0
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800247e:	4016      	ands	r6, r2
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE ));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002480:	68a2      	ldr	r2, [r4, #8]
 8002482:	ea45 0302 	orr.w	r3, r5, r2
              hlptim->Init.Clock.Prescaler |
 8002486:	6a22      	ldr	r2, [r4, #32]
 8002488:	4313      	orrs	r3, r2
              hlptim->Init.OutputPolarity  |
 800248a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800248c:	4313      	orrs	r3, r2
              hlptim->Init.UpdateMode      |
 800248e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
              hlptim->Init.CounterSource);

  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 8002490:	2d01      	cmp	r5, #1
              hlptim->Init.UpdateMode      |
 8002492:	ea43 0302 	orr.w	r3, r3, r2
  {
    tmpcfgr |=  (hlptim->Init.UltraLowPowerClock.Polarity |
 8002496:	bf04      	itt	eq
 8002498:	6925      	ldreq	r5, [r4, #16]
 800249a:	68e2      	ldreq	r2, [r4, #12]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800249c:	ea43 0306 	orr.w	r3, r3, r6
    tmpcfgr |=  (hlptim->Init.UltraLowPowerClock.Polarity |
 80024a0:	bf04      	itt	eq
 80024a2:	432a      	orreq	r2, r5
 80024a4:	4313      	orreq	r3, r2
                hlptim->Init.UltraLowPowerClock.SampleTime);
  }

  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 80024a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024aa:	4291      	cmp	r1, r2
 80024ac:	d004      	beq.n	80024b8 <HAL_LPTIM_Init+0x7c>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80024ae:	69a2      	ldr	r2, [r4, #24]
 80024b0:	4311      	orrs	r1, r2
                hlptim->Init.Trigger.ActiveEdge |
 80024b2:	69e2      	ldr	r2, [r4, #28]
 80024b4:	4311      	orrs	r1, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80024b6:	430b      	orrs	r3, r1
                hlptim->Init.Trigger.SampleTime);
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80024b8:	60c3      	str	r3, [r0, #12]

  /* Configure LPTIM input sources */
  if(hlptim->Instance == LPTIM1)
 80024ba:	4b08      	ldr	r3, [pc, #32]	; (80024dc <HAL_LPTIM_Init+0xa0>)
 80024bc:	4298      	cmp	r0, r3
    /* Check LPTIM1 Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance,hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance,hlptim->Init.Input2Source));

    /* Configure LPTIM1 Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80024be:	bf08      	it	eq
 80024c0:	6b22      	ldreq	r2, [r4, #48]	; 0x30
 80024c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80024c4:	bf08      	it	eq
 80024c6:	4313      	orreq	r3, r2
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance,hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 80024c8:	6203      	str	r3, [r0, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80024ca:	2301      	movs	r3, #1
 80024cc:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80024d0:	2000      	movs	r0, #0
 80024d2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80024d4:	2001      	movs	r0, #1
}
 80024d6:	bd70      	pop	{r4, r5, r6, pc}
 80024d8:	ff19f1fe 	.word	0xff19f1fe
 80024dc:	40007c00 	.word	0x40007c00

080024e0 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80024e0:	4b02      	ldr	r3, [pc, #8]	; (80024ec <HAL_PWREx_GetVoltageRange+0xc>)
 80024e2:	6818      	ldr	r0, [r3, #0]
#endif
}
 80024e4:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	40007000 	.word	0x40007000

080024f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80024f0:	4b17      	ldr	r3, [pc, #92]	; (8002550 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80024f2:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024f4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80024f8:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024fc:	d11c      	bne.n	8002538 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80024fe:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002502:	d015      	beq.n	8002530 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800250a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800250e:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002510:	4a10      	ldr	r2, [pc, #64]	; (8002554 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8002512:	6811      	ldr	r1, [r2, #0]
 8002514:	2232      	movs	r2, #50	; 0x32
 8002516:	434a      	muls	r2, r1
 8002518:	490f      	ldr	r1, [pc, #60]	; (8002558 <HAL_PWREx_ControlVoltageScaling+0x68>)
 800251a:	fbb2 f2f1 	udiv	r2, r2, r1
 800251e:	4619      	mov	r1, r3
 8002520:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002522:	6958      	ldr	r0, [r3, #20]
 8002524:	0540      	lsls	r0, r0, #21
 8002526:	d500      	bpl.n	800252a <HAL_PWREx_ControlVoltageScaling+0x3a>
 8002528:	b922      	cbnz	r2, 8002534 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800252a:	694b      	ldr	r3, [r1, #20]
 800252c:	055b      	lsls	r3, r3, #21
 800252e:	d40d      	bmi.n	800254c <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002530:	2000      	movs	r0, #0
 8002532:	4770      	bx	lr
        wait_loop_index--;
 8002534:	3a01      	subs	r2, #1
 8002536:	e7f4      	b.n	8002522 <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002538:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800253c:	bf1f      	itttt	ne
 800253e:	681a      	ldrne	r2, [r3, #0]
 8002540:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8002544:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8002548:	601a      	strne	r2, [r3, #0]
 800254a:	e7f1      	b.n	8002530 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 800254c:	2003      	movs	r0, #3
}
 800254e:	4770      	bx	lr
 8002550:	40007000 	.word	0x40007000
 8002554:	20000000 	.word	0x20000000
 8002558:	000f4240 	.word	0x000f4240

0800255c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800255c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800255e:	4d1e      	ldr	r5, [pc, #120]	; (80025d8 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8002560:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002562:	00da      	lsls	r2, r3, #3
{
 8002564:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002566:	d518      	bpl.n	800259a <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002568:	f7ff ffba 	bl	80024e0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800256c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002570:	d123      	bne.n	80025ba <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002572:	2c80      	cmp	r4, #128	; 0x80
 8002574:	d929      	bls.n	80025ca <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002576:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002578:	bf8c      	ite	hi
 800257a:	2002      	movhi	r0, #2
 800257c:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800257e:	4a17      	ldr	r2, [pc, #92]	; (80025dc <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8002580:	6813      	ldr	r3, [r2, #0]
 8002582:	f023 0307 	bic.w	r3, r3, #7
 8002586:	4303      	orrs	r3, r0
 8002588:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800258a:	6813      	ldr	r3, [r2, #0]
 800258c:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8002590:	1a18      	subs	r0, r3, r0
 8002592:	bf18      	it	ne
 8002594:	2001      	movne	r0, #1
 8002596:	b003      	add	sp, #12
 8002598:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800259a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800259c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a0:	65ab      	str	r3, [r5, #88]	; 0x58
 80025a2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80025a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a8:	9301      	str	r3, [sp, #4]
 80025aa:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80025ac:	f7ff ff98 	bl	80024e0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80025b0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80025b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025b6:	65ab      	str	r3, [r5, #88]	; 0x58
 80025b8:	e7d8      	b.n	800256c <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 80025ba:	2c80      	cmp	r4, #128	; 0x80
 80025bc:	d807      	bhi.n	80025ce <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80025be:	d008      	beq.n	80025d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80025c0:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80025c4:	4258      	negs	r0, r3
 80025c6:	4158      	adcs	r0, r3
 80025c8:	e7d9      	b.n	800257e <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025ca:	2000      	movs	r0, #0
 80025cc:	e7d7      	b.n	800257e <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80025ce:	2003      	movs	r0, #3
 80025d0:	e7d5      	b.n	800257e <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80025d2:	2002      	movs	r0, #2
 80025d4:	e7d3      	b.n	800257e <RCC_SetFlashLatencyFromMSIRange+0x22>
 80025d6:	bf00      	nop
 80025d8:	40021000 	.word	0x40021000
 80025dc:	40022000 	.word	0x40022000

080025e0 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025e0:	4b25      	ldr	r3, [pc, #148]	; (8002678 <HAL_RCC_GetSysClockFreq+0x98>)
 80025e2:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025e4:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025e6:	f012 020c 	ands.w	r2, r2, #12
 80025ea:	d005      	beq.n	80025f8 <HAL_RCC_GetSysClockFreq+0x18>
 80025ec:	2a0c      	cmp	r2, #12
 80025ee:	d115      	bne.n	800261c <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025f0:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80025f4:	2901      	cmp	r1, #1
 80025f6:	d118      	bne.n	800262a <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025f8:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 80025fa:	4820      	ldr	r0, [pc, #128]	; (800267c <HAL_RCC_GetSysClockFreq+0x9c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025fc:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025fe:	bf55      	itete	pl
 8002600:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002604:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002606:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800260a:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 800260e:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002612:	b382      	cbz	r2, 8002676 <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002614:	2a0c      	cmp	r2, #12
 8002616:	d009      	beq.n	800262c <HAL_RCC_GetSysClockFreq+0x4c>
 8002618:	2000      	movs	r0, #0
  return sysclockfreq;
 800261a:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800261c:	2a04      	cmp	r2, #4
 800261e:	d029      	beq.n	8002674 <HAL_RCC_GetSysClockFreq+0x94>
 8002620:	2a08      	cmp	r2, #8
 8002622:	4817      	ldr	r0, [pc, #92]	; (8002680 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002624:	bf18      	it	ne
 8002626:	2000      	movne	r0, #0
 8002628:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800262a:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800262c:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800262e:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002630:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002634:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (pllsource)
 8002638:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800263a:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 800263e:	d005      	beq.n	800264c <HAL_RCC_GetSysClockFreq+0x6c>
 8002640:	2903      	cmp	r1, #3
 8002642:	d012      	beq.n	800266a <HAL_RCC_GetSysClockFreq+0x8a>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002644:	68d9      	ldr	r1, [r3, #12]
 8002646:	f3c1 2106 	ubfx	r1, r1, #8, #7
 800264a:	e003      	b.n	8002654 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800264c:	68d9      	ldr	r1, [r3, #12]
 800264e:	480d      	ldr	r0, [pc, #52]	; (8002684 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002650:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002654:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002656:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800265a:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800265e:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002660:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002662:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8002664:	fbb0 f0f3 	udiv	r0, r0, r3
 8002668:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800266a:	68d9      	ldr	r1, [r3, #12]
 800266c:	4804      	ldr	r0, [pc, #16]	; (8002680 <HAL_RCC_GetSysClockFreq+0xa0>)
 800266e:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8002672:	e7ef      	b.n	8002654 <HAL_RCC_GetSysClockFreq+0x74>
    sysclockfreq = HSI_VALUE;
 8002674:	4803      	ldr	r0, [pc, #12]	; (8002684 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8002676:	4770      	bx	lr
 8002678:	40021000 	.word	0x40021000
 800267c:	08007830 	.word	0x08007830
 8002680:	007a1200 	.word	0x007a1200
 8002684:	00f42400 	.word	0x00f42400

08002688 <HAL_RCC_OscConfig>:
{
 8002688:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 800268c:	4605      	mov	r5, r0
 800268e:	b918      	cbnz	r0, 8002698 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8002690:	2001      	movs	r0, #1
}
 8002692:	b003      	add	sp, #12
 8002694:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002698:	4ca5      	ldr	r4, [pc, #660]	; (8002930 <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800269a:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800269c:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800269e:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026a0:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026a2:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026a6:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026aa:	d53c      	bpl.n	8002726 <HAL_RCC_OscConfig+0x9e>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026ac:	b11e      	cbz	r6, 80026b6 <HAL_RCC_OscConfig+0x2e>
 80026ae:	2e0c      	cmp	r6, #12
 80026b0:	d163      	bne.n	800277a <HAL_RCC_OscConfig+0xf2>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80026b2:	2f01      	cmp	r7, #1
 80026b4:	d161      	bne.n	800277a <HAL_RCC_OscConfig+0xf2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026b6:	6823      	ldr	r3, [r4, #0]
 80026b8:	0798      	lsls	r0, r3, #30
 80026ba:	d502      	bpl.n	80026c2 <HAL_RCC_OscConfig+0x3a>
 80026bc:	69ab      	ldr	r3, [r5, #24]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0e6      	beq.n	8002690 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80026c2:	6823      	ldr	r3, [r4, #0]
 80026c4:	6a28      	ldr	r0, [r5, #32]
 80026c6:	0719      	lsls	r1, r3, #28
 80026c8:	bf56      	itet	pl
 80026ca:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 80026ce:	6823      	ldrmi	r3, [r4, #0]
 80026d0:	091b      	lsrpl	r3, r3, #4
 80026d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026d6:	4283      	cmp	r3, r0
 80026d8:	d23a      	bcs.n	8002750 <HAL_RCC_OscConfig+0xc8>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026da:	f7ff ff3f 	bl	800255c <RCC_SetFlashLatencyFromMSIRange>
 80026de:	2800      	cmp	r0, #0
 80026e0:	d1d6      	bne.n	8002690 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026e2:	6823      	ldr	r3, [r4, #0]
 80026e4:	f043 0308 	orr.w	r3, r3, #8
 80026e8:	6023      	str	r3, [r4, #0]
 80026ea:	6823      	ldr	r3, [r4, #0]
 80026ec:	6a2a      	ldr	r2, [r5, #32]
 80026ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026f2:	4313      	orrs	r3, r2
 80026f4:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026f6:	6863      	ldr	r3, [r4, #4]
 80026f8:	69ea      	ldr	r2, [r5, #28]
 80026fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002702:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002704:	f7ff ff6c 	bl	80025e0 <HAL_RCC_GetSysClockFreq>
 8002708:	68a3      	ldr	r3, [r4, #8]
 800270a:	4a8a      	ldr	r2, [pc, #552]	; (8002934 <HAL_RCC_OscConfig+0x2ac>)
 800270c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002710:	5cd3      	ldrb	r3, [r2, r3]
 8002712:	f003 031f 	and.w	r3, r3, #31
 8002716:	40d8      	lsrs	r0, r3
 8002718:	4b87      	ldr	r3, [pc, #540]	; (8002938 <HAL_RCC_OscConfig+0x2b0>)
 800271a:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800271c:	2000      	movs	r0, #0
 800271e:	f7fe fbc7 	bl	8000eb0 <HAL_InitTick>
        if(status != HAL_OK)
 8002722:	2800      	cmp	r0, #0
 8002724:	d1b5      	bne.n	8002692 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002726:	682b      	ldr	r3, [r5, #0]
 8002728:	07d8      	lsls	r0, r3, #31
 800272a:	d45d      	bmi.n	80027e8 <HAL_RCC_OscConfig+0x160>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800272c:	682b      	ldr	r3, [r5, #0]
 800272e:	0799      	lsls	r1, r3, #30
 8002730:	f100 809c 	bmi.w	800286c <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002734:	682b      	ldr	r3, [r5, #0]
 8002736:	0718      	lsls	r0, r3, #28
 8002738:	f100 80d0 	bmi.w	80028dc <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800273c:	682b      	ldr	r3, [r5, #0]
 800273e:	0759      	lsls	r1, r3, #29
 8002740:	f100 80fc 	bmi.w	800293c <HAL_RCC_OscConfig+0x2b4>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002744:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002746:	2b00      	cmp	r3, #0
 8002748:	f040 8165 	bne.w	8002a16 <HAL_RCC_OscConfig+0x38e>
  return HAL_OK;
 800274c:	2000      	movs	r0, #0
 800274e:	e7a0      	b.n	8002692 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002750:	6823      	ldr	r3, [r4, #0]
 8002752:	f043 0308 	orr.w	r3, r3, #8
 8002756:	6023      	str	r3, [r4, #0]
 8002758:	6823      	ldr	r3, [r4, #0]
 800275a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800275e:	4303      	orrs	r3, r0
 8002760:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002762:	6863      	ldr	r3, [r4, #4]
 8002764:	69ea      	ldr	r2, [r5, #28]
 8002766:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800276a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800276e:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002770:	f7ff fef4 	bl	800255c <RCC_SetFlashLatencyFromMSIRange>
 8002774:	2800      	cmp	r0, #0
 8002776:	d0c5      	beq.n	8002704 <HAL_RCC_OscConfig+0x7c>
 8002778:	e78a      	b.n	8002690 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800277a:	69ab      	ldr	r3, [r5, #24]
 800277c:	b31b      	cbz	r3, 80027c6 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_MSI_ENABLE();
 800277e:	6823      	ldr	r3, [r4, #0]
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002786:	f7fe fbc9 	bl	8000f1c <HAL_GetTick>
 800278a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800278c:	6823      	ldr	r3, [r4, #0]
 800278e:	079a      	lsls	r2, r3, #30
 8002790:	d511      	bpl.n	80027b6 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002792:	6823      	ldr	r3, [r4, #0]
 8002794:	f043 0308 	orr.w	r3, r3, #8
 8002798:	6023      	str	r3, [r4, #0]
 800279a:	6823      	ldr	r3, [r4, #0]
 800279c:	6a2a      	ldr	r2, [r5, #32]
 800279e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027a2:	4313      	orrs	r3, r2
 80027a4:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027a6:	6863      	ldr	r3, [r4, #4]
 80027a8:	69ea      	ldr	r2, [r5, #28]
 80027aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80027b2:	6063      	str	r3, [r4, #4]
 80027b4:	e7b7      	b.n	8002726 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027b6:	f7fe fbb1 	bl	8000f1c <HAL_GetTick>
 80027ba:	eba0 0008 	sub.w	r0, r0, r8
 80027be:	2802      	cmp	r0, #2
 80027c0:	d9e4      	bls.n	800278c <HAL_RCC_OscConfig+0x104>
            return HAL_TIMEOUT;
 80027c2:	2003      	movs	r0, #3
 80027c4:	e765      	b.n	8002692 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 80027c6:	6823      	ldr	r3, [r4, #0]
 80027c8:	f023 0301 	bic.w	r3, r3, #1
 80027cc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80027ce:	f7fe fba5 	bl	8000f1c <HAL_GetTick>
 80027d2:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027d4:	6823      	ldr	r3, [r4, #0]
 80027d6:	079b      	lsls	r3, r3, #30
 80027d8:	d5a5      	bpl.n	8002726 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027da:	f7fe fb9f 	bl	8000f1c <HAL_GetTick>
 80027de:	eba0 0008 	sub.w	r0, r0, r8
 80027e2:	2802      	cmp	r0, #2
 80027e4:	d9f6      	bls.n	80027d4 <HAL_RCC_OscConfig+0x14c>
 80027e6:	e7ec      	b.n	80027c2 <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80027e8:	2e08      	cmp	r6, #8
 80027ea:	d003      	beq.n	80027f4 <HAL_RCC_OscConfig+0x16c>
 80027ec:	2e0c      	cmp	r6, #12
 80027ee:	d108      	bne.n	8002802 <HAL_RCC_OscConfig+0x17a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 80027f0:	2f03      	cmp	r7, #3
 80027f2:	d106      	bne.n	8002802 <HAL_RCC_OscConfig+0x17a>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f4:	6823      	ldr	r3, [r4, #0]
 80027f6:	039a      	lsls	r2, r3, #14
 80027f8:	d598      	bpl.n	800272c <HAL_RCC_OscConfig+0xa4>
 80027fa:	686b      	ldr	r3, [r5, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d195      	bne.n	800272c <HAL_RCC_OscConfig+0xa4>
 8002800:	e746      	b.n	8002690 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002802:	686b      	ldr	r3, [r5, #4]
 8002804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002808:	d110      	bne.n	800282c <HAL_RCC_OscConfig+0x1a4>
 800280a:	6823      	ldr	r3, [r4, #0]
 800280c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002810:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002812:	f7fe fb83 	bl	8000f1c <HAL_GetTick>
 8002816:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002818:	6823      	ldr	r3, [r4, #0]
 800281a:	039b      	lsls	r3, r3, #14
 800281c:	d486      	bmi.n	800272c <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800281e:	f7fe fb7d 	bl	8000f1c <HAL_GetTick>
 8002822:	eba0 0008 	sub.w	r0, r0, r8
 8002826:	2864      	cmp	r0, #100	; 0x64
 8002828:	d9f6      	bls.n	8002818 <HAL_RCC_OscConfig+0x190>
 800282a:	e7ca      	b.n	80027c2 <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800282c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002830:	d104      	bne.n	800283c <HAL_RCC_OscConfig+0x1b4>
 8002832:	6823      	ldr	r3, [r4, #0]
 8002834:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002838:	6023      	str	r3, [r4, #0]
 800283a:	e7e6      	b.n	800280a <HAL_RCC_OscConfig+0x182>
 800283c:	6822      	ldr	r2, [r4, #0]
 800283e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002842:	6022      	str	r2, [r4, #0]
 8002844:	6822      	ldr	r2, [r4, #0]
 8002846:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800284a:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1e0      	bne.n	8002812 <HAL_RCC_OscConfig+0x18a>
        tickstart = HAL_GetTick();
 8002850:	f7fe fb64 	bl	8000f1c <HAL_GetTick>
 8002854:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002856:	6823      	ldr	r3, [r4, #0]
 8002858:	0398      	lsls	r0, r3, #14
 800285a:	f57f af67 	bpl.w	800272c <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800285e:	f7fe fb5d 	bl	8000f1c <HAL_GetTick>
 8002862:	eba0 0008 	sub.w	r0, r0, r8
 8002866:	2864      	cmp	r0, #100	; 0x64
 8002868:	d9f5      	bls.n	8002856 <HAL_RCC_OscConfig+0x1ce>
 800286a:	e7aa      	b.n	80027c2 <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800286c:	2e04      	cmp	r6, #4
 800286e:	d003      	beq.n	8002878 <HAL_RCC_OscConfig+0x1f0>
 8002870:	2e0c      	cmp	r6, #12
 8002872:	d110      	bne.n	8002896 <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8002874:	2f02      	cmp	r7, #2
 8002876:	d10e      	bne.n	8002896 <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002878:	6823      	ldr	r3, [r4, #0]
 800287a:	0559      	lsls	r1, r3, #21
 800287c:	d503      	bpl.n	8002886 <HAL_RCC_OscConfig+0x1fe>
 800287e:	68eb      	ldr	r3, [r5, #12]
 8002880:	2b00      	cmp	r3, #0
 8002882:	f43f af05 	beq.w	8002690 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002886:	6863      	ldr	r3, [r4, #4]
 8002888:	692a      	ldr	r2, [r5, #16]
 800288a:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800288e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002892:	6063      	str	r3, [r4, #4]
 8002894:	e74e      	b.n	8002734 <HAL_RCC_OscConfig+0xac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002896:	68eb      	ldr	r3, [r5, #12]
 8002898:	b17b      	cbz	r3, 80028ba <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 800289a:	6823      	ldr	r3, [r4, #0]
 800289c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80028a2:	f7fe fb3b 	bl	8000f1c <HAL_GetTick>
 80028a6:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028a8:	6823      	ldr	r3, [r4, #0]
 80028aa:	055a      	lsls	r2, r3, #21
 80028ac:	d4eb      	bmi.n	8002886 <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ae:	f7fe fb35 	bl	8000f1c <HAL_GetTick>
 80028b2:	1bc0      	subs	r0, r0, r7
 80028b4:	2802      	cmp	r0, #2
 80028b6:	d9f7      	bls.n	80028a8 <HAL_RCC_OscConfig+0x220>
 80028b8:	e783      	b.n	80027c2 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_DISABLE();
 80028ba:	6823      	ldr	r3, [r4, #0]
 80028bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028c0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80028c2:	f7fe fb2b 	bl	8000f1c <HAL_GetTick>
 80028c6:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028c8:	6823      	ldr	r3, [r4, #0]
 80028ca:	055b      	lsls	r3, r3, #21
 80028cc:	f57f af32 	bpl.w	8002734 <HAL_RCC_OscConfig+0xac>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028d0:	f7fe fb24 	bl	8000f1c <HAL_GetTick>
 80028d4:	1bc0      	subs	r0, r0, r7
 80028d6:	2802      	cmp	r0, #2
 80028d8:	d9f6      	bls.n	80028c8 <HAL_RCC_OscConfig+0x240>
 80028da:	e772      	b.n	80027c2 <HAL_RCC_OscConfig+0x13a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028dc:	696b      	ldr	r3, [r5, #20]
 80028de:	b19b      	cbz	r3, 8002908 <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 80028e0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80028ec:	f7fe fb16 	bl	8000f1c <HAL_GetTick>
 80028f0:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028f2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80028f6:	079a      	lsls	r2, r3, #30
 80028f8:	f53f af20 	bmi.w	800273c <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028fc:	f7fe fb0e 	bl	8000f1c <HAL_GetTick>
 8002900:	1bc0      	subs	r0, r0, r7
 8002902:	2802      	cmp	r0, #2
 8002904:	d9f5      	bls.n	80028f2 <HAL_RCC_OscConfig+0x26a>
 8002906:	e75c      	b.n	80027c2 <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_LSI_DISABLE();
 8002908:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800290c:	f023 0301 	bic.w	r3, r3, #1
 8002910:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002914:	f7fe fb02 	bl	8000f1c <HAL_GetTick>
 8002918:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800291a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800291e:	079b      	lsls	r3, r3, #30
 8002920:	f57f af0c 	bpl.w	800273c <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002924:	f7fe fafa 	bl	8000f1c <HAL_GetTick>
 8002928:	1bc0      	subs	r0, r0, r7
 800292a:	2802      	cmp	r0, #2
 800292c:	d9f5      	bls.n	800291a <HAL_RCC_OscConfig+0x292>
 800292e:	e748      	b.n	80027c2 <HAL_RCC_OscConfig+0x13a>
 8002930:	40021000 	.word	0x40021000
 8002934:	08007815 	.word	0x08007815
 8002938:	20000000 	.word	0x20000000
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800293c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800293e:	00d8      	lsls	r0, r3, #3
 8002940:	d429      	bmi.n	8002996 <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002942:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002948:	65a3      	str	r3, [r4, #88]	; 0x58
 800294a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800294c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002950:	9301      	str	r3, [sp, #4]
 8002952:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002954:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002958:	4f5d      	ldr	r7, [pc, #372]	; (8002ad0 <HAL_RCC_OscConfig+0x448>)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	05d9      	lsls	r1, r3, #23
 800295e:	d51d      	bpl.n	800299c <HAL_RCC_OscConfig+0x314>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002960:	68ab      	ldr	r3, [r5, #8]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d12b      	bne.n	80029be <HAL_RCC_OscConfig+0x336>
 8002966:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800296a:	f043 0301 	orr.w	r3, r3, #1
 800296e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8002972:	f7fe fad3 	bl	8000f1c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002976:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800297a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800297c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002980:	079b      	lsls	r3, r3, #30
 8002982:	d542      	bpl.n	8002a0a <HAL_RCC_OscConfig+0x382>
    if(pwrclkchanged == SET)
 8002984:	f1b8 0f00 	cmp.w	r8, #0
 8002988:	f43f aedc 	beq.w	8002744 <HAL_RCC_OscConfig+0xbc>
      __HAL_RCC_PWR_CLK_DISABLE();
 800298c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800298e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002992:	65a3      	str	r3, [r4, #88]	; 0x58
 8002994:	e6d6      	b.n	8002744 <HAL_RCC_OscConfig+0xbc>
    FlagStatus       pwrclkchanged = RESET;
 8002996:	f04f 0800 	mov.w	r8, #0
 800299a:	e7dd      	b.n	8002958 <HAL_RCC_OscConfig+0x2d0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a2:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80029a4:	f7fe faba 	bl	8000f1c <HAL_GetTick>
 80029a8:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	05da      	lsls	r2, r3, #23
 80029ae:	d4d7      	bmi.n	8002960 <HAL_RCC_OscConfig+0x2d8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029b0:	f7fe fab4 	bl	8000f1c <HAL_GetTick>
 80029b4:	eba0 0009 	sub.w	r0, r0, r9
 80029b8:	2802      	cmp	r0, #2
 80029ba:	d9f6      	bls.n	80029aa <HAL_RCC_OscConfig+0x322>
 80029bc:	e701      	b.n	80027c2 <HAL_RCC_OscConfig+0x13a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029be:	2b05      	cmp	r3, #5
 80029c0:	d106      	bne.n	80029d0 <HAL_RCC_OscConfig+0x348>
 80029c2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80029c6:	f043 0304 	orr.w	r3, r3, #4
 80029ca:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80029ce:	e7ca      	b.n	8002966 <HAL_RCC_OscConfig+0x2de>
 80029d0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80029d4:	f022 0201 	bic.w	r2, r2, #1
 80029d8:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 80029dc:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80029e0:	f022 0204 	bic.w	r2, r2, #4
 80029e4:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1c2      	bne.n	8002972 <HAL_RCC_OscConfig+0x2ea>
      tickstart = HAL_GetTick();
 80029ec:	f7fe fa96 	bl	8000f1c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f0:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80029f4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029f6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80029fa:	0798      	lsls	r0, r3, #30
 80029fc:	d5c2      	bpl.n	8002984 <HAL_RCC_OscConfig+0x2fc>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029fe:	f7fe fa8d 	bl	8000f1c <HAL_GetTick>
 8002a02:	1bc0      	subs	r0, r0, r7
 8002a04:	4548      	cmp	r0, r9
 8002a06:	d9f6      	bls.n	80029f6 <HAL_RCC_OscConfig+0x36e>
 8002a08:	e6db      	b.n	80027c2 <HAL_RCC_OscConfig+0x13a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a0a:	f7fe fa87 	bl	8000f1c <HAL_GetTick>
 8002a0e:	1bc0      	subs	r0, r0, r7
 8002a10:	4548      	cmp	r0, r9
 8002a12:	d9b3      	bls.n	800297c <HAL_RCC_OscConfig+0x2f4>
 8002a14:	e6d5      	b.n	80027c2 <HAL_RCC_OscConfig+0x13a>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a16:	2e0c      	cmp	r6, #12
 8002a18:	f43f ae3a 	beq.w	8002690 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a1c:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8002a1e:	6823      	ldr	r3, [r4, #0]
 8002a20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a24:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a26:	d137      	bne.n	8002a98 <HAL_RCC_OscConfig+0x410>
        tickstart = HAL_GetTick();
 8002a28:	f7fe fa78 	bl	8000f1c <HAL_GetTick>
 8002a2c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a2e:	6823      	ldr	r3, [r4, #0]
 8002a30:	0199      	lsls	r1, r3, #6
 8002a32:	d42b      	bmi.n	8002a8c <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a34:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002a36:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002a38:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002a3c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002a3e:	3a01      	subs	r2, #1
 8002a40:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002a44:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8002a46:	0912      	lsrs	r2, r2, #4
 8002a48:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8002a4c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002a4e:	0852      	lsrs	r2, r2, #1
 8002a50:	3a01      	subs	r2, #1
 8002a52:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8002a56:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002a58:	0852      	lsrs	r2, r2, #1
 8002a5a:	3a01      	subs	r2, #1
 8002a5c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002a60:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8002a62:	6823      	ldr	r3, [r4, #0]
 8002a64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a68:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a6a:	68e3      	ldr	r3, [r4, #12]
 8002a6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a70:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8002a72:	f7fe fa53 	bl	8000f1c <HAL_GetTick>
 8002a76:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a78:	6823      	ldr	r3, [r4, #0]
 8002a7a:	019a      	lsls	r2, r3, #6
 8002a7c:	f53f ae66 	bmi.w	800274c <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a80:	f7fe fa4c 	bl	8000f1c <HAL_GetTick>
 8002a84:	1b40      	subs	r0, r0, r5
 8002a86:	2802      	cmp	r0, #2
 8002a88:	d9f6      	bls.n	8002a78 <HAL_RCC_OscConfig+0x3f0>
 8002a8a:	e69a      	b.n	80027c2 <HAL_RCC_OscConfig+0x13a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a8c:	f7fe fa46 	bl	8000f1c <HAL_GetTick>
 8002a90:	1b80      	subs	r0, r0, r6
 8002a92:	2802      	cmp	r0, #2
 8002a94:	d9cb      	bls.n	8002a2e <HAL_RCC_OscConfig+0x3a6>
 8002a96:	e694      	b.n	80027c2 <HAL_RCC_OscConfig+0x13a>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002a98:	6823      	ldr	r3, [r4, #0]
 8002a9a:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002a9e:	bf02      	ittt	eq
 8002aa0:	68e3      	ldreq	r3, [r4, #12]
 8002aa2:	f023 0303 	biceq.w	r3, r3, #3
 8002aa6:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002aa8:	68e3      	ldr	r3, [r4, #12]
 8002aaa:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002aae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ab2:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8002ab4:	f7fe fa32 	bl	8000f1c <HAL_GetTick>
 8002ab8:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aba:	6823      	ldr	r3, [r4, #0]
 8002abc:	019b      	lsls	r3, r3, #6
 8002abe:	f57f ae45 	bpl.w	800274c <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac2:	f7fe fa2b 	bl	8000f1c <HAL_GetTick>
 8002ac6:	1b40      	subs	r0, r0, r5
 8002ac8:	2802      	cmp	r0, #2
 8002aca:	d9f6      	bls.n	8002aba <HAL_RCC_OscConfig+0x432>
 8002acc:	e679      	b.n	80027c2 <HAL_RCC_OscConfig+0x13a>
 8002ace:	bf00      	nop
 8002ad0:	40007000 	.word	0x40007000

08002ad4 <HAL_RCC_ClockConfig>:
{
 8002ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ad8:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8002ada:	4604      	mov	r4, r0
 8002adc:	b910      	cbnz	r0, 8002ae4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002ade:	2001      	movs	r0, #1
 8002ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ae4:	4a40      	ldr	r2, [pc, #256]	; (8002be8 <HAL_RCC_ClockConfig+0x114>)
 8002ae6:	6813      	ldr	r3, [r2, #0]
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	428b      	cmp	r3, r1
 8002aee:	d329      	bcc.n	8002b44 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002af0:	6823      	ldr	r3, [r4, #0]
 8002af2:	07d9      	lsls	r1, r3, #31
 8002af4:	d431      	bmi.n	8002b5a <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002af6:	6821      	ldr	r1, [r4, #0]
 8002af8:	078a      	lsls	r2, r1, #30
 8002afa:	d45b      	bmi.n	8002bb4 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002afc:	4a3a      	ldr	r2, [pc, #232]	; (8002be8 <HAL_RCC_ClockConfig+0x114>)
 8002afe:	6813      	ldr	r3, [r2, #0]
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	429e      	cmp	r6, r3
 8002b06:	d35d      	bcc.n	8002bc4 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b08:	f011 0f04 	tst.w	r1, #4
 8002b0c:	4d37      	ldr	r5, [pc, #220]	; (8002bec <HAL_RCC_ClockConfig+0x118>)
 8002b0e:	d164      	bne.n	8002bda <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b10:	070b      	lsls	r3, r1, #28
 8002b12:	d506      	bpl.n	8002b22 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b14:	68ab      	ldr	r3, [r5, #8]
 8002b16:	6922      	ldr	r2, [r4, #16]
 8002b18:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002b1c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002b20:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b22:	f7ff fd5d 	bl	80025e0 <HAL_RCC_GetSysClockFreq>
 8002b26:	68ab      	ldr	r3, [r5, #8]
 8002b28:	4a31      	ldr	r2, [pc, #196]	; (8002bf0 <HAL_RCC_ClockConfig+0x11c>)
 8002b2a:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8002b2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b32:	5cd3      	ldrb	r3, [r2, r3]
 8002b34:	f003 031f 	and.w	r3, r3, #31
 8002b38:	40d8      	lsrs	r0, r3
 8002b3a:	4b2e      	ldr	r3, [pc, #184]	; (8002bf4 <HAL_RCC_ClockConfig+0x120>)
 8002b3c:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8002b3e:	2000      	movs	r0, #0
 8002b40:	f7fe b9b6 	b.w	8000eb0 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b44:	6813      	ldr	r3, [r2, #0]
 8002b46:	f023 0307 	bic.w	r3, r3, #7
 8002b4a:	430b      	orrs	r3, r1
 8002b4c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4e:	6813      	ldr	r3, [r2, #0]
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	4299      	cmp	r1, r3
 8002b56:	d1c2      	bne.n	8002ade <HAL_RCC_ClockConfig+0xa>
 8002b58:	e7ca      	b.n	8002af0 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b5a:	6862      	ldr	r2, [r4, #4]
 8002b5c:	4d23      	ldr	r5, [pc, #140]	; (8002bec <HAL_RCC_ClockConfig+0x118>)
 8002b5e:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b60:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b62:	d11b      	bne.n	8002b9c <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b64:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b68:	d0b9      	beq.n	8002ade <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b6a:	68ab      	ldr	r3, [r5, #8]
 8002b6c:	f023 0303 	bic.w	r3, r3, #3
 8002b70:	4313      	orrs	r3, r2
 8002b72:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8002b74:	f7fe f9d2 	bl	8000f1c <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b78:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002b7c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b7e:	68ab      	ldr	r3, [r5, #8]
 8002b80:	6862      	ldr	r2, [r4, #4]
 8002b82:	f003 030c 	and.w	r3, r3, #12
 8002b86:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002b8a:	d0b4      	beq.n	8002af6 <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b8c:	f7fe f9c6 	bl	8000f1c <HAL_GetTick>
 8002b90:	1bc0      	subs	r0, r0, r7
 8002b92:	4540      	cmp	r0, r8
 8002b94:	d9f3      	bls.n	8002b7e <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 8002b96:	2003      	movs	r0, #3
}
 8002b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b9c:	2a02      	cmp	r2, #2
 8002b9e:	d102      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ba0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002ba4:	e7e0      	b.n	8002b68 <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ba6:	b912      	cbnz	r2, 8002bae <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ba8:	f013 0f02 	tst.w	r3, #2
 8002bac:	e7dc      	b.n	8002b68 <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bae:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002bb2:	e7d9      	b.n	8002b68 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bb4:	4a0d      	ldr	r2, [pc, #52]	; (8002bec <HAL_RCC_ClockConfig+0x118>)
 8002bb6:	68a0      	ldr	r0, [r4, #8]
 8002bb8:	6893      	ldr	r3, [r2, #8]
 8002bba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bbe:	4303      	orrs	r3, r0
 8002bc0:	6093      	str	r3, [r2, #8]
 8002bc2:	e79b      	b.n	8002afc <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc4:	6813      	ldr	r3, [r2, #0]
 8002bc6:	f023 0307 	bic.w	r3, r3, #7
 8002bca:	4333      	orrs	r3, r6
 8002bcc:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bce:	6813      	ldr	r3, [r2, #0]
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	429e      	cmp	r6, r3
 8002bd6:	d182      	bne.n	8002ade <HAL_RCC_ClockConfig+0xa>
 8002bd8:	e796      	b.n	8002b08 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bda:	68ab      	ldr	r3, [r5, #8]
 8002bdc:	68e2      	ldr	r2, [r4, #12]
 8002bde:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002be2:	4313      	orrs	r3, r2
 8002be4:	60ab      	str	r3, [r5, #8]
 8002be6:	e793      	b.n	8002b10 <HAL_RCC_ClockConfig+0x3c>
 8002be8:	40022000 	.word	0x40022000
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	08007815 	.word	0x08007815
 8002bf4:	20000000 	.word	0x20000000

08002bf8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002bf8:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002bfa:	4a06      	ldr	r2, [pc, #24]	; (8002c14 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002c02:	5cd3      	ldrb	r3, [r2, r3]
 8002c04:	4a04      	ldr	r2, [pc, #16]	; (8002c18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c06:	6810      	ldr	r0, [r2, #0]
 8002c08:	f003 031f 	and.w	r3, r3, #31
}
 8002c0c:	40d8      	lsrs	r0, r3
 8002c0e:	4770      	bx	lr
 8002c10:	40021000 	.word	0x40021000
 8002c14:	08007825 	.word	0x08007825
 8002c18:	20000000 	.word	0x20000000

08002c1c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002c1c:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002c1e:	4a06      	ldr	r2, [pc, #24]	; (8002c38 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002c26:	5cd3      	ldrb	r3, [r2, r3]
 8002c28:	4a04      	ldr	r2, [pc, #16]	; (8002c3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c2a:	6810      	ldr	r0, [r2, #0]
 8002c2c:	f003 031f 	and.w	r3, r3, #31
}
 8002c30:	40d8      	lsrs	r0, r3
 8002c32:	4770      	bx	lr
 8002c34:	40021000 	.word	0x40021000
 8002c38:	08007825 	.word	0x08007825
 8002c3c:	20000000 	.word	0x20000000

08002c40 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c42:	4b45      	ldr	r3, [pc, #276]	; (8002d58 <RCCEx_PLLSAI1_Config+0x118>)
 8002c44:	68da      	ldr	r2, [r3, #12]
 8002c46:	f012 0f03 	tst.w	r2, #3
{
 8002c4a:	4605      	mov	r5, r0
 8002c4c:	460e      	mov	r6, r1
 8002c4e:	461c      	mov	r4, r3
 8002c50:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c52:	d02a      	beq.n	8002caa <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c54:	68da      	ldr	r2, [r3, #12]
 8002c56:	f002 0203 	and.w	r2, r2, #3
 8002c5a:	4282      	cmp	r2, r0
 8002c5c:	d13c      	bne.n	8002cd8 <RCCEx_PLLSAI1_Config+0x98>
       ||
 8002c5e:	2a00      	cmp	r2, #0
 8002c60:	d03a      	beq.n	8002cd8 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c62:	68db      	ldr	r3, [r3, #12]
       ||
 8002c64:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c66:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002c6a:	3301      	adds	r3, #1
       ||
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d133      	bne.n	8002cd8 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c70:	6823      	ldr	r3, [r4, #0]
 8002c72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c76:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c78:	f7fe f950 	bl	8000f1c <HAL_GetTick>
 8002c7c:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c7e:	6823      	ldr	r3, [r4, #0]
 8002c80:	011a      	lsls	r2, r3, #4
 8002c82:	d432      	bmi.n	8002cea <RCCEx_PLLSAI1_Config+0xaa>
 8002c84:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c86:	2e00      	cmp	r6, #0
 8002c88:	d036      	beq.n	8002cf8 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c8a:	2e01      	cmp	r6, #1
 8002c8c:	d150      	bne.n	8002d30 <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c8e:	6922      	ldr	r2, [r4, #16]
 8002c90:	6928      	ldr	r0, [r5, #16]
 8002c92:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002c96:	0840      	lsrs	r0, r0, #1
 8002c98:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8002c9c:	3801      	subs	r0, #1
 8002c9e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8002ca2:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8002ca6:	6122      	str	r2, [r4, #16]
 8002ca8:	e032      	b.n	8002d10 <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 8002caa:	2802      	cmp	r0, #2
 8002cac:	d010      	beq.n	8002cd0 <RCCEx_PLLSAI1_Config+0x90>
 8002cae:	2803      	cmp	r0, #3
 8002cb0:	d014      	beq.n	8002cdc <RCCEx_PLLSAI1_Config+0x9c>
 8002cb2:	2801      	cmp	r0, #1
 8002cb4:	d110      	bne.n	8002cd8 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	079f      	lsls	r7, r3, #30
 8002cba:	d538      	bpl.n	8002d2e <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002cbc:	68e3      	ldr	r3, [r4, #12]
 8002cbe:	686a      	ldr	r2, [r5, #4]
 8002cc0:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8002cc4:	3a01      	subs	r2, #1
 8002cc6:	4318      	orrs	r0, r3
 8002cc8:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8002ccc:	60e0      	str	r0, [r4, #12]
 8002cce:	e7cf      	b.n	8002c70 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002cd6:	d1f1      	bne.n	8002cbc <RCCEx_PLLSAI1_Config+0x7c>
 8002cd8:	2001      	movs	r0, #1
 8002cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	0391      	lsls	r1, r2, #14
 8002ce0:	d4ec      	bmi.n	8002cbc <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002ce8:	e7f5      	b.n	8002cd6 <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cea:	f7fe f917 	bl	8000f1c <HAL_GetTick>
 8002cee:	1bc0      	subs	r0, r0, r7
 8002cf0:	2802      	cmp	r0, #2
 8002cf2:	d9c4      	bls.n	8002c7e <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8002cf4:	2003      	movs	r0, #3
 8002cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cf8:	6921      	ldr	r1, [r4, #16]
 8002cfa:	68eb      	ldr	r3, [r5, #12]
 8002cfc:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8002d00:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8002d04:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8002d08:	091b      	lsrs	r3, r3, #4
 8002d0a:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8002d0e:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d10:	6823      	ldr	r3, [r4, #0]
 8002d12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d16:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d18:	f7fe f900 	bl	8000f1c <HAL_GetTick>
 8002d1c:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d1e:	6823      	ldr	r3, [r4, #0]
 8002d20:	011b      	lsls	r3, r3, #4
 8002d22:	d513      	bpl.n	8002d4c <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d24:	6923      	ldr	r3, [r4, #16]
 8002d26:	69aa      	ldr	r2, [r5, #24]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	6123      	str	r3, [r4, #16]
 8002d2c:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8002d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d30:	6923      	ldr	r3, [r4, #16]
 8002d32:	6968      	ldr	r0, [r5, #20]
 8002d34:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d38:	0840      	lsrs	r0, r0, #1
 8002d3a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d3e:	3801      	subs	r0, #1
 8002d40:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8002d44:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8002d48:	6123      	str	r3, [r4, #16]
 8002d4a:	e7e1      	b.n	8002d10 <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d4c:	f7fe f8e6 	bl	8000f1c <HAL_GetTick>
 8002d50:	1b80      	subs	r0, r0, r6
 8002d52:	2802      	cmp	r0, #2
 8002d54:	d9e3      	bls.n	8002d1e <RCCEx_PLLSAI1_Config+0xde>
 8002d56:	e7cd      	b.n	8002cf4 <RCCEx_PLLSAI1_Config+0xb4>
 8002d58:	40021000 	.word	0x40021000

08002d5c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d5e:	4b3d      	ldr	r3, [pc, #244]	; (8002e54 <RCCEx_PLLSAI2_Config+0xf8>)
 8002d60:	68da      	ldr	r2, [r3, #12]
 8002d62:	f012 0f03 	tst.w	r2, #3
{
 8002d66:	4605      	mov	r5, r0
 8002d68:	460e      	mov	r6, r1
 8002d6a:	461c      	mov	r4, r3
 8002d6c:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d6e:	d028      	beq.n	8002dc2 <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d70:	68da      	ldr	r2, [r3, #12]
 8002d72:	f002 0203 	and.w	r2, r2, #3
 8002d76:	4282      	cmp	r2, r0
 8002d78:	d13a      	bne.n	8002df0 <RCCEx_PLLSAI2_Config+0x94>
       ||
 8002d7a:	2a00      	cmp	r2, #0
 8002d7c:	d038      	beq.n	8002df0 <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002d7e:	68db      	ldr	r3, [r3, #12]
       ||
 8002d80:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002d82:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002d86:	3301      	adds	r3, #1
       ||
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d131      	bne.n	8002df0 <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002d8c:	6823      	ldr	r3, [r4, #0]
 8002d8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d92:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d94:	f7fe f8c2 	bl	8000f1c <HAL_GetTick>
 8002d98:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d9a:	6823      	ldr	r3, [r4, #0]
 8002d9c:	009a      	lsls	r2, r3, #2
 8002d9e:	d430      	bmi.n	8002e02 <RCCEx_PLLSAI2_Config+0xa6>
 8002da0:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002da2:	2e00      	cmp	r6, #0
 8002da4:	d034      	beq.n	8002e10 <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002da6:	6963      	ldr	r3, [r4, #20]
 8002da8:	6929      	ldr	r1, [r5, #16]
 8002daa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002dae:	0849      	lsrs	r1, r1, #1
 8002db0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002db4:	3901      	subs	r1, #1
 8002db6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002dba:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8002dbe:	6163      	str	r3, [r4, #20]
 8002dc0:	e032      	b.n	8002e28 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 8002dc2:	2802      	cmp	r0, #2
 8002dc4:	d010      	beq.n	8002de8 <RCCEx_PLLSAI2_Config+0x8c>
 8002dc6:	2803      	cmp	r0, #3
 8002dc8:	d014      	beq.n	8002df4 <RCCEx_PLLSAI2_Config+0x98>
 8002dca:	2801      	cmp	r0, #1
 8002dcc:	d110      	bne.n	8002df0 <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	079f      	lsls	r7, r3, #30
 8002dd2:	d538      	bpl.n	8002e46 <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002dd4:	68e3      	ldr	r3, [r4, #12]
 8002dd6:	686a      	ldr	r2, [r5, #4]
 8002dd8:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8002ddc:	3a01      	subs	r2, #1
 8002dde:	4318      	orrs	r0, r3
 8002de0:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8002de4:	60e0      	str	r0, [r4, #12]
 8002de6:	e7d1      	b.n	8002d8c <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002dee:	d1f1      	bne.n	8002dd4 <RCCEx_PLLSAI2_Config+0x78>
 8002df0:	2001      	movs	r0, #1
 8002df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	0391      	lsls	r1, r2, #14
 8002df8:	d4ec      	bmi.n	8002dd4 <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002e00:	e7f5      	b.n	8002dee <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e02:	f7fe f88b 	bl	8000f1c <HAL_GetTick>
 8002e06:	1bc0      	subs	r0, r0, r7
 8002e08:	2802      	cmp	r0, #2
 8002e0a:	d9c6      	bls.n	8002d9a <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8002e0c:	2003      	movs	r0, #3
 8002e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e10:	6962      	ldr	r2, [r4, #20]
 8002e12:	68eb      	ldr	r3, [r5, #12]
 8002e14:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8002e18:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002e1c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002e20:	091b      	lsrs	r3, r3, #4
 8002e22:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8002e26:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002e28:	6823      	ldr	r3, [r4, #0]
 8002e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e2e:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e30:	f7fe f874 	bl	8000f1c <HAL_GetTick>
 8002e34:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e36:	6823      	ldr	r3, [r4, #0]
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	d505      	bpl.n	8002e48 <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002e3c:	6963      	ldr	r3, [r4, #20]
 8002e3e:	696a      	ldr	r2, [r5, #20]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	6163      	str	r3, [r4, #20]
 8002e44:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8002e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e48:	f7fe f868 	bl	8000f1c <HAL_GetTick>
 8002e4c:	1b80      	subs	r0, r0, r6
 8002e4e:	2802      	cmp	r0, #2
 8002e50:	d9f1      	bls.n	8002e36 <RCCEx_PLLSAI2_Config+0xda>
 8002e52:	e7db      	b.n	8002e0c <RCCEx_PLLSAI2_Config+0xb0>
 8002e54:	40021000 	.word	0x40021000

08002e58 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002e58:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e5c:	6806      	ldr	r6, [r0, #0]
 8002e5e:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8002e62:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e64:	d024      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002e66:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8002e68:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8002e6c:	d02c      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8002e6e:	d802      	bhi.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002e70:	b1c1      	cbz	r1, 8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 8002e72:	2601      	movs	r6, #1
 8002e74:	e01c      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002e76:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8002e7a:	d00d      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002e7c:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8002e80:	d1f7      	bne.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e82:	4a4d      	ldr	r2, [pc, #308]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e84:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002e86:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002e8a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002e8e:	430b      	orrs	r3, r1
 8002e90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002e94:	2600      	movs	r6, #0
 8002e96:	e00b      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e98:	4a47      	ldr	r2, [pc, #284]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e9a:	68d3      	ldr	r3, [r2, #12]
 8002e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ea0:	60d3      	str	r3, [r2, #12]
      break;
 8002ea2:	e7ee      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ea4:	3004      	adds	r0, #4
 8002ea6:	f7ff fecb 	bl	8002c40 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002eaa:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002eac:	2800      	cmp	r0, #0
 8002eae:	d0e8      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002eb0:	6823      	ldr	r3, [r4, #0]
 8002eb2:	04d8      	lsls	r0, r3, #19
 8002eb4:	d506      	bpl.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002eb6:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002eb8:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8002ebc:	d074      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8002ebe:	d808      	bhi.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002ec0:	b1a9      	cbz	r1, 8002eee <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 8002ec2:	2601      	movs	r6, #1
 8002ec4:	4635      	mov	r5, r6
 8002ec6:	e021      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ec8:	2100      	movs	r1, #0
 8002eca:	3020      	adds	r0, #32
 8002ecc:	f7ff ff46 	bl	8002d5c <RCCEx_PLLSAI2_Config>
 8002ed0:	e7eb      	b.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002ed2:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8002ed6:	d004      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8002ed8:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8002edc:	d1f1      	bne.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002ede:	4635      	mov	r5, r6
 8002ee0:	e009      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ee2:	4a35      	ldr	r2, [pc, #212]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ee4:	68d3      	ldr	r3, [r2, #12]
 8002ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eea:	60d3      	str	r3, [r2, #12]
 8002eec:	e7f7      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002eee:	1d20      	adds	r0, r4, #4
 8002ef0:	f7ff fea6 	bl	8002c40 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ef4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002ef6:	2d00      	cmp	r5, #0
 8002ef8:	d15c      	bne.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002efa:	4a2f      	ldr	r2, [pc, #188]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002efc:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002efe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002f02:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002f06:	430b      	orrs	r3, r1
 8002f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f0c:	6823      	ldr	r3, [r4, #0]
 8002f0e:	0399      	lsls	r1, r3, #14
 8002f10:	f140 814f 	bpl.w	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f14:	4f28      	ldr	r7, [pc, #160]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f18:	00da      	lsls	r2, r3, #3
 8002f1a:	f140 8176 	bpl.w	800320a <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 8002f1e:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f22:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8002fbc <HAL_RCCEx_PeriphCLKConfig+0x164>
 8002f26:	f8d9 3000 	ldr.w	r3, [r9]
 8002f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f2e:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8002f32:	f7fd fff3 	bl	8000f1c <HAL_GetTick>
 8002f36:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f38:	f8d9 3000 	ldr.w	r3, [r9]
 8002f3c:	05db      	lsls	r3, r3, #23
 8002f3e:	d53f      	bpl.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 8002f40:	2d00      	cmp	r5, #0
 8002f42:	d144      	bne.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f48:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002f4c:	d015      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x122>
 8002f4e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d011      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f5a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002f5e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002f62:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f66:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f6e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002f72:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8002f76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f7a:	07d8      	lsls	r0, r3, #31
 8002f7c:	d509      	bpl.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 8002f7e:	f7fd ffcd 	bl	8000f1c <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f82:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002f86:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f8c:	0799      	lsls	r1, r3, #30
 8002f8e:	f140 8109 	bpl.w	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f96:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002f9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002fa4:	4635      	mov	r5, r6
 8002fa6:	e012      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002fa8:	2100      	movs	r1, #0
 8002faa:	f104 0020 	add.w	r0, r4, #32
 8002fae:	f7ff fed5 	bl	8002d5c <RCCEx_PLLSAI2_Config>
 8002fb2:	e79f      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8002fb4:	462e      	mov	r6, r5
 8002fb6:	e7a9      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fc0:	f7fd ffac 	bl	8000f1c <HAL_GetTick>
 8002fc4:	eba0 000a 	sub.w	r0, r0, sl
 8002fc8:	2802      	cmp	r0, #2
 8002fca:	d9b5      	bls.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 8002fcc:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8002fce:	f1b8 0f00 	cmp.w	r8, #0
 8002fd2:	d003      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fda:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fdc:	6823      	ldr	r3, [r4, #0]
 8002fde:	07da      	lsls	r2, r3, #31
 8002fe0:	d508      	bpl.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fe2:	4990      	ldr	r1, [pc, #576]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002fe4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002fe6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002fea:	f022 0203 	bic.w	r2, r2, #3
 8002fee:	4302      	orrs	r2, r0
 8002ff0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ff4:	079f      	lsls	r7, r3, #30
 8002ff6:	d508      	bpl.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ff8:	498a      	ldr	r1, [pc, #552]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002ffa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002ffc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003000:	f022 020c 	bic.w	r2, r2, #12
 8003004:	4302      	orrs	r2, r0
 8003006:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800300a:	075e      	lsls	r6, r3, #29
 800300c:	d508      	bpl.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800300e:	4985      	ldr	r1, [pc, #532]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003010:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003012:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003016:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800301a:	4302      	orrs	r2, r0
 800301c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003020:	0718      	lsls	r0, r3, #28
 8003022:	d508      	bpl.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003024:	497f      	ldr	r1, [pc, #508]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003026:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003028:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800302c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003030:	4302      	orrs	r2, r0
 8003032:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003036:	06d9      	lsls	r1, r3, #27
 8003038:	d508      	bpl.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800303a:	497a      	ldr	r1, [pc, #488]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800303c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800303e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003042:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003046:	4302      	orrs	r2, r0
 8003048:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800304c:	069a      	lsls	r2, r3, #26
 800304e:	d508      	bpl.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003050:	4974      	ldr	r1, [pc, #464]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003052:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003054:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003058:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800305c:	4302      	orrs	r2, r0
 800305e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003062:	059f      	lsls	r7, r3, #22
 8003064:	d508      	bpl.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003066:	496f      	ldr	r1, [pc, #444]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003068:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800306a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800306e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8003072:	4302      	orrs	r2, r0
 8003074:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003078:	055e      	lsls	r6, r3, #21
 800307a:	d508      	bpl.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800307c:	4969      	ldr	r1, [pc, #420]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800307e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003080:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003084:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003088:	4302      	orrs	r2, r0
 800308a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800308e:	0658      	lsls	r0, r3, #25
 8003090:	d508      	bpl.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003092:	4964      	ldr	r1, [pc, #400]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003094:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8003096:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800309a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800309e:	4302      	orrs	r2, r0
 80030a0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030a4:	0619      	lsls	r1, r3, #24
 80030a6:	d508      	bpl.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030a8:	495e      	ldr	r1, [pc, #376]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80030aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80030ac:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80030b0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80030b4:	4302      	orrs	r2, r0
 80030b6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030ba:	05da      	lsls	r2, r3, #23
 80030bc:	d508      	bpl.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030be:	4959      	ldr	r1, [pc, #356]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80030c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030c2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80030c6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80030ca:	4302      	orrs	r2, r0
 80030cc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80030d0:	049b      	lsls	r3, r3, #18
 80030d2:	d50f      	bpl.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030d4:	4a53      	ldr	r2, [pc, #332]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80030d6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80030d8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80030dc:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80030e0:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030e2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030ea:	d164      	bne.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030ec:	68d3      	ldr	r3, [r2, #12]
 80030ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030f2:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80030f4:	6823      	ldr	r3, [r4, #0]
 80030f6:	031f      	lsls	r7, r3, #12
 80030f8:	d50f      	bpl.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80030fa:	4a4a      	ldr	r2, [pc, #296]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80030fc:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80030fe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003102:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003106:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003108:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800310c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003110:	d15c      	bne.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003112:	68d3      	ldr	r3, [r2, #12]
 8003114:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003118:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800311a:	6823      	ldr	r3, [r4, #0]
 800311c:	035e      	lsls	r6, r3, #13
 800311e:	d50f      	bpl.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003120:	4a40      	ldr	r2, [pc, #256]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003122:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8003124:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003128:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800312c:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800312e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003132:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003136:	d154      	bne.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003138:	68d3      	ldr	r3, [r2, #12]
 800313a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800313e:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003140:	6823      	ldr	r3, [r4, #0]
 8003142:	0458      	lsls	r0, r3, #17
 8003144:	d512      	bpl.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003146:	4937      	ldr	r1, [pc, #220]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003148:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800314a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800314e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003152:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003154:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003158:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800315c:	d14c      	bne.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800315e:	2102      	movs	r1, #2
 8003160:	1d20      	adds	r0, r4, #4
 8003162:	f7ff fd6d 	bl	8002c40 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003166:	2800      	cmp	r0, #0
 8003168:	bf18      	it	ne
 800316a:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800316c:	6822      	ldr	r2, [r4, #0]
 800316e:	0411      	lsls	r1, r2, #16
 8003170:	d508      	bpl.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003172:	492c      	ldr	r1, [pc, #176]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003174:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8003176:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800317a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800317e:	4303      	orrs	r3, r0
 8003180:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003184:	03d3      	lsls	r3, r2, #15
 8003186:	d509      	bpl.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003188:	4a26      	ldr	r2, [pc, #152]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800318a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800318e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003192:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003196:	430b      	orrs	r3, r1
 8003198:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800319c:	4628      	mov	r0, r5
 800319e:	b002      	add	sp, #8
 80031a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a4:	f7fd feba 	bl	8000f1c <HAL_GetTick>
 80031a8:	1b40      	subs	r0, r0, r5
 80031aa:	4548      	cmp	r0, r9
 80031ac:	f67f aeec 	bls.w	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x130>
 80031b0:	e70c      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x174>
 80031b2:	4635      	mov	r5, r6
 80031b4:	e712      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80031b6:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80031ba:	d19b      	bne.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031bc:	2101      	movs	r1, #1
 80031be:	1d20      	adds	r0, r4, #4
 80031c0:	f7ff fd3e 	bl	8002c40 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 80031c4:	2800      	cmp	r0, #0
 80031c6:	bf18      	it	ne
 80031c8:	4605      	movne	r5, r0
 80031ca:	e793      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80031cc:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80031d0:	d1a3      	bne.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031d2:	2101      	movs	r1, #1
 80031d4:	1d20      	adds	r0, r4, #4
 80031d6:	f7ff fd33 	bl	8002c40 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80031da:	2800      	cmp	r0, #0
 80031dc:	bf18      	it	ne
 80031de:	4605      	movne	r5, r0
 80031e0:	e79b      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80031e2:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80031e6:	d1ab      	bne.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031e8:	2101      	movs	r1, #1
 80031ea:	1d20      	adds	r0, r4, #4
 80031ec:	f7ff fd28 	bl	8002c40 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80031f0:	2800      	cmp	r0, #0
 80031f2:	bf18      	it	ne
 80031f4:	4605      	movne	r5, r0
 80031f6:	e7a3      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80031f8:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80031fc:	d1b6      	bne.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80031fe:	2102      	movs	r1, #2
 8003200:	f104 0020 	add.w	r0, r4, #32
 8003204:	f7ff fdaa 	bl	8002d5c <RCCEx_PLLSAI2_Config>
 8003208:	e7ad      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800320a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800320c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003210:	65bb      	str	r3, [r7, #88]	; 0x58
 8003212:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003218:	9301      	str	r3, [sp, #4]
 800321a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800321c:	f04f 0801 	mov.w	r8, #1
 8003220:	e67f      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0xca>
 8003222:	bf00      	nop
 8003224:	40021000 	.word	0x40021000

08003228 <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8003228:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800322a:	69c1      	ldr	r1, [r0, #28]
{
 800322c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800322e:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003230:	6883      	ldr	r3, [r0, #8]
 8003232:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003234:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003236:	4303      	orrs	r3, r0
 8003238:	6960      	ldr	r0, [r4, #20]
 800323a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800323c:	48ba      	ldr	r0, [pc, #744]	; (8003528 <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800323e:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003240:	4028      	ands	r0, r5
 8003242:	4303      	orrs	r3, r0
 8003244:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003246:	6853      	ldr	r3, [r2, #4]
 8003248:	68e0      	ldr	r0, [r4, #12]
 800324a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800324e:	4303      	orrs	r3, r0
 8003250:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003252:	4bb6      	ldr	r3, [pc, #728]	; (800352c <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003254:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003256:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003258:	bf1c      	itt	ne
 800325a:	6a23      	ldrne	r3, [r4, #32]
 800325c:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800325e:	6893      	ldr	r3, [r2, #8]
 8003260:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003264:	4303      	orrs	r3, r0
 8003266:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003268:	4bb1      	ldr	r3, [pc, #708]	; (8003530 <UART_SetConfig+0x308>)
 800326a:	429a      	cmp	r2, r3
 800326c:	d119      	bne.n	80032a2 <UART_SetConfig+0x7a>
 800326e:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8003272:	4ab0      	ldr	r2, [pc, #704]	; (8003534 <UART_SetConfig+0x30c>)
 8003274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003278:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800327c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003280:	5cd3      	ldrb	r3, [r2, r3]
 8003282:	f040 8138 	bne.w	80034f6 <UART_SetConfig+0x2ce>
  {
    switch (clocksource)
 8003286:	2b08      	cmp	r3, #8
 8003288:	f200 808f 	bhi.w	80033aa <UART_SetConfig+0x182>
 800328c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003290:	00ca011a 	.word	0x00ca011a
 8003294:	008d00f9 	.word	0x008d00f9
 8003298:	008d0114 	.word	0x008d0114
 800329c:	008d008d 	.word	0x008d008d
 80032a0:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032a2:	4ba5      	ldr	r3, [pc, #660]	; (8003538 <UART_SetConfig+0x310>)
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d107      	bne.n	80032b8 <UART_SetConfig+0x90>
 80032a8:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 80032ac:	4aa3      	ldr	r2, [pc, #652]	; (800353c <UART_SetConfig+0x314>)
 80032ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b2:	f003 030c 	and.w	r3, r3, #12
 80032b6:	e7e1      	b.n	800327c <UART_SetConfig+0x54>
 80032b8:	4ba1      	ldr	r3, [pc, #644]	; (8003540 <UART_SetConfig+0x318>)
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d123      	bne.n	8003306 <UART_SetConfig+0xde>
 80032be:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 80032c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80032ca:	2b10      	cmp	r3, #16
 80032cc:	f000 80f1 	beq.w	80034b2 <UART_SetConfig+0x28a>
 80032d0:	d80b      	bhi.n	80032ea <UART_SetConfig+0xc2>
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 80f3 	beq.w	80034be <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032d8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80032dc:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80032e0:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032e4:	f000 80f8 	beq.w	80034d8 <UART_SetConfig+0x2b0>
 80032e8:	e0a8      	b.n	800343c <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032ea:	2b20      	cmp	r3, #32
 80032ec:	f000 80c6 	beq.w	800347c <UART_SetConfig+0x254>
 80032f0:	2b30      	cmp	r3, #48	; 0x30
 80032f2:	d1f1      	bne.n	80032d8 <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032f4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80032f8:	f040 80b8 	bne.w	800346c <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80032fc:	6860      	ldr	r0, [r4, #4]
 80032fe:	0843      	lsrs	r3, r0, #1
 8003300:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003304:	e0c3      	b.n	800348e <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003306:	4b8f      	ldr	r3, [pc, #572]	; (8003544 <UART_SetConfig+0x31c>)
 8003308:	429a      	cmp	r2, r3
 800330a:	d11e      	bne.n	800334a <UART_SetConfig+0x122>
 800330c:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8003310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003314:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003318:	2b40      	cmp	r3, #64	; 0x40
 800331a:	f000 80bb 	beq.w	8003494 <UART_SetConfig+0x26c>
 800331e:	d80a      	bhi.n	8003336 <UART_SetConfig+0x10e>
 8003320:	b97b      	cbnz	r3, 8003342 <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8003322:	4b82      	ldr	r3, [pc, #520]	; (800352c <UART_SetConfig+0x304>)
 8003324:	429a      	cmp	r2, r3
 8003326:	f040 80ca 	bne.w	80034be <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800332a:	f7ff fc65 	bl	8002bf8 <HAL_RCC_GetPCLK1Freq>
        break;
 800332e:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8003330:	bbb0      	cbnz	r0, 80033a0 <UART_SetConfig+0x178>
 8003332:	4602      	mov	r2, r0
 8003334:	e03a      	b.n	80033ac <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003336:	2b80      	cmp	r3, #128	; 0x80
 8003338:	f000 809d 	beq.w	8003476 <UART_SetConfig+0x24e>
 800333c:	2bc0      	cmp	r3, #192	; 0xc0
 800333e:	f000 80b0 	beq.w	80034a2 <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8003342:	4b7a      	ldr	r3, [pc, #488]	; (800352c <UART_SetConfig+0x304>)
 8003344:	429a      	cmp	r2, r3
 8003346:	d1c7      	bne.n	80032d8 <UART_SetConfig+0xb0>
 8003348:	e02f      	b.n	80033aa <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800334a:	4b7f      	ldr	r3, [pc, #508]	; (8003548 <UART_SetConfig+0x320>)
 800334c:	429a      	cmp	r2, r3
 800334e:	d111      	bne.n	8003374 <UART_SetConfig+0x14c>
 8003350:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8003354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003358:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800335c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003360:	f000 8098 	beq.w	8003494 <UART_SetConfig+0x26c>
 8003364:	d9dc      	bls.n	8003320 <UART_SetConfig+0xf8>
 8003366:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800336a:	f000 8084 	beq.w	8003476 <UART_SetConfig+0x24e>
 800336e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003372:	e7e4      	b.n	800333e <UART_SetConfig+0x116>
 8003374:	4b6d      	ldr	r3, [pc, #436]	; (800352c <UART_SetConfig+0x304>)
 8003376:	429a      	cmp	r2, r3
 8003378:	d1ae      	bne.n	80032d8 <UART_SetConfig+0xb0>
 800337a:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 800337e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003382:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800338a:	f000 8083 	beq.w	8003494 <UART_SetConfig+0x26c>
 800338e:	d9c7      	bls.n	8003320 <UART_SetConfig+0xf8>
 8003390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003394:	d06f      	beq.n	8003476 <UART_SetConfig+0x24e>
 8003396:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800339a:	e7d0      	b.n	800333e <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800339c:	486b      	ldr	r0, [pc, #428]	; (800354c <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 800339e:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 80033a0:	6862      	ldr	r2, [r4, #4]
 80033a2:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80033a6:	4281      	cmp	r1, r0
 80033a8:	d905      	bls.n	80033b6 <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 80033aa:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033ac:	2300      	movs	r3, #0
 80033ae:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80033b0:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 80033b2:	4610      	mov	r0, r2
 80033b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 80033b6:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80033ba:	d8f6      	bhi.n	80033aa <UART_SetConfig+0x182>
        switch (clocksource)
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d82e      	bhi.n	800341e <UART_SetConfig+0x1f6>
 80033c0:	e8df f003 	tbb	[pc, r3]
 80033c4:	2d1c2d05 	.word	0x2d1c2d05
 80033c8:	2d2d2d24 	.word	0x2d2d2d24
 80033cc:	27          	.byte	0x27
 80033cd:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80033ce:	f7ff fc13 	bl	8002bf8 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80033d2:	6862      	ldr	r2, [r4, #4]
 80033d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033d8:	0856      	lsrs	r6, r2, #1
 80033da:	2700      	movs	r7, #0
 80033dc:	fbe1 6700 	umlal	r6, r7, r1, r0
 80033e0:	2300      	movs	r3, #0
 80033e2:	4630      	mov	r0, r6
 80033e4:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80033e6:	f7fd fbdb 	bl	8000ba0 <__aeabi_uldivmod>
            break;
 80033ea:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033ec:	4b58      	ldr	r3, [pc, #352]	; (8003550 <UART_SetConfig+0x328>)
 80033ee:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 80033f2:	4299      	cmp	r1, r3
 80033f4:	d8d9      	bhi.n	80033aa <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 80033f6:	6823      	ldr	r3, [r4, #0]
 80033f8:	60d8      	str	r0, [r3, #12]
 80033fa:	e7d7      	b.n	80033ac <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80033fc:	4855      	ldr	r0, [pc, #340]	; (8003554 <UART_SetConfig+0x32c>)
 80033fe:	0855      	lsrs	r5, r2, #1
 8003400:	2300      	movs	r3, #0
 8003402:	2100      	movs	r1, #0
 8003404:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003406:	f141 0100 	adc.w	r1, r1, #0
 800340a:	e7ec      	b.n	80033e6 <UART_SetConfig+0x1be>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800340c:	f7ff f8e8 	bl	80025e0 <HAL_RCC_GetSysClockFreq>
 8003410:	e7df      	b.n	80033d2 <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003412:	0850      	lsrs	r0, r2, #1
 8003414:	2100      	movs	r1, #0
 8003416:	2300      	movs	r3, #0
 8003418:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 800341c:	e7f3      	b.n	8003406 <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 800341e:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003420:	2000      	movs	r0, #0
 8003422:	e7e3      	b.n	80033ec <UART_SetConfig+0x1c4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003424:	f7ff fbfa 	bl	8002c1c <HAL_RCC_GetPCLK2Freq>
 8003428:	e04e      	b.n	80034c8 <UART_SetConfig+0x2a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800342a:	f7ff fbe5 	bl	8002bf8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800342e:	6862      	ldr	r2, [r4, #4]
 8003430:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8003434:	fbb3 f3f2 	udiv	r3, r3, r2
 8003438:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800343a:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800343c:	f1a3 0010 	sub.w	r0, r3, #16
 8003440:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8003444:	4288      	cmp	r0, r1
 8003446:	d8b0      	bhi.n	80033aa <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 8003448:	6821      	ldr	r1, [r4, #0]
 800344a:	60cb      	str	r3, [r1, #12]
 800344c:	e7ae      	b.n	80033ac <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800344e:	f7ff fbe5 	bl	8002c1c <HAL_RCC_GetPCLK2Freq>
 8003452:	e7ec      	b.n	800342e <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003454:	6860      	ldr	r0, [r4, #4]
 8003456:	0843      	lsrs	r3, r0, #1
 8003458:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800345c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003460:	fbb3 f3f0 	udiv	r3, r3, r0
 8003464:	e7e8      	b.n	8003438 <UART_SetConfig+0x210>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003466:	f7ff f8bb 	bl	80025e0 <HAL_RCC_GetSysClockFreq>
 800346a:	e7e0      	b.n	800342e <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800346c:	6860      	ldr	r0, [r4, #4]
 800346e:	0843      	lsrs	r3, r0, #1
 8003470:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003474:	e7f4      	b.n	8003460 <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 8003476:	4b2d      	ldr	r3, [pc, #180]	; (800352c <UART_SetConfig+0x304>)
 8003478:	429a      	cmp	r2, r3
 800347a:	d08f      	beq.n	800339c <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800347c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003480:	d1e8      	bne.n	8003454 <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003482:	6860      	ldr	r0, [r4, #4]
 8003484:	0843      	lsrs	r3, r0, #1
 8003486:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800348a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800348e:	fbb3 f3f0 	udiv	r3, r3, r0
 8003492:	e01f      	b.n	80034d4 <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 8003494:	4b25      	ldr	r3, [pc, #148]	; (800352c <UART_SetConfig+0x304>)
 8003496:	429a      	cmp	r2, r3
 8003498:	d10b      	bne.n	80034b2 <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800349a:	f7ff f8a1 	bl	80025e0 <HAL_RCC_GetSysClockFreq>
        break;
 800349e:	2304      	movs	r3, #4
 80034a0:	e746      	b.n	8003330 <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 80034a2:	4b22      	ldr	r3, [pc, #136]	; (800352c <UART_SetConfig+0x304>)
 80034a4:	429a      	cmp	r2, r3
 80034a6:	f47f af25 	bne.w	80032f4 <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80034aa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 80034ae:	2308      	movs	r3, #8
 80034b0:	e776      	b.n	80033a0 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034b2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80034b6:	d1d6      	bne.n	8003466 <UART_SetConfig+0x23e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80034b8:	f7ff f892 	bl	80025e0 <HAL_RCC_GetSysClockFreq>
 80034bc:	e004      	b.n	80034c8 <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034be:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80034c2:	d1b2      	bne.n	800342a <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80034c4:	f7ff fb98 	bl	8002bf8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80034c8:	6861      	ldr	r1, [r4, #4]
 80034ca:	084a      	lsrs	r2, r1, #1
 80034cc:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 80034d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80034d4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80034d6:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034d8:	f1a3 0010 	sub.w	r0, r3, #16
 80034dc:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80034e0:	4288      	cmp	r0, r1
 80034e2:	f63f af62 	bhi.w	80033aa <UART_SetConfig+0x182>
      brrtemp = usartdiv & 0xFFF0U;
 80034e6:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 80034ea:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034ec:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 80034f0:	430b      	orrs	r3, r1
 80034f2:	60c3      	str	r3, [r0, #12]
 80034f4:	e75a      	b.n	80033ac <UART_SetConfig+0x184>
    switch (clocksource)
 80034f6:	2b08      	cmp	r3, #8
 80034f8:	f63f af57 	bhi.w	80033aa <UART_SetConfig+0x182>
 80034fc:	a201      	add	r2, pc, #4	; (adr r2, 8003504 <UART_SetConfig+0x2dc>)
 80034fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003502:	bf00      	nop
 8003504:	0800342b 	.word	0x0800342b
 8003508:	0800344f 	.word	0x0800344f
 800350c:	08003455 	.word	0x08003455
 8003510:	080033ab 	.word	0x080033ab
 8003514:	08003467 	.word	0x08003467
 8003518:	080033ab 	.word	0x080033ab
 800351c:	080033ab 	.word	0x080033ab
 8003520:	080033ab 	.word	0x080033ab
 8003524:	0800346d 	.word	0x0800346d
 8003528:	efff69f3 	.word	0xefff69f3
 800352c:	40008000 	.word	0x40008000
 8003530:	40013800 	.word	0x40013800
 8003534:	080074a8 	.word	0x080074a8
 8003538:	40004400 	.word	0x40004400
 800353c:	080074ac 	.word	0x080074ac
 8003540:	40004800 	.word	0x40004800
 8003544:	40004c00 	.word	0x40004c00
 8003548:	40005000 	.word	0x40005000
 800354c:	00f42400 	.word	0x00f42400
 8003550:	000ffcff 	.word	0x000ffcff
 8003554:	f4240000 	.word	0xf4240000

08003558 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003558:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800355a:	07da      	lsls	r2, r3, #31
{
 800355c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800355e:	d506      	bpl.n	800356e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003560:	6801      	ldr	r1, [r0, #0]
 8003562:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003564:	684a      	ldr	r2, [r1, #4]
 8003566:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800356a:	4322      	orrs	r2, r4
 800356c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800356e:	079c      	lsls	r4, r3, #30
 8003570:	d506      	bpl.n	8003580 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003572:	6801      	ldr	r1, [r0, #0]
 8003574:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003576:	684a      	ldr	r2, [r1, #4]
 8003578:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800357c:	4322      	orrs	r2, r4
 800357e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003580:	0759      	lsls	r1, r3, #29
 8003582:	d506      	bpl.n	8003592 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003584:	6801      	ldr	r1, [r0, #0]
 8003586:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003588:	684a      	ldr	r2, [r1, #4]
 800358a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800358e:	4322      	orrs	r2, r4
 8003590:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003592:	071a      	lsls	r2, r3, #28
 8003594:	d506      	bpl.n	80035a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003596:	6801      	ldr	r1, [r0, #0]
 8003598:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800359a:	684a      	ldr	r2, [r1, #4]
 800359c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035a0:	4322      	orrs	r2, r4
 80035a2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035a4:	06dc      	lsls	r4, r3, #27
 80035a6:	d506      	bpl.n	80035b6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035a8:	6801      	ldr	r1, [r0, #0]
 80035aa:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80035ac:	688a      	ldr	r2, [r1, #8]
 80035ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80035b2:	4322      	orrs	r2, r4
 80035b4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035b6:	0699      	lsls	r1, r3, #26
 80035b8:	d506      	bpl.n	80035c8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035ba:	6801      	ldr	r1, [r0, #0]
 80035bc:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80035be:	688a      	ldr	r2, [r1, #8]
 80035c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035c4:	4322      	orrs	r2, r4
 80035c6:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035c8:	065a      	lsls	r2, r3, #25
 80035ca:	d50f      	bpl.n	80035ec <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035cc:	6801      	ldr	r1, [r0, #0]
 80035ce:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80035d0:	684a      	ldr	r2, [r1, #4]
 80035d2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80035d6:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035d8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035dc:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035de:	d105      	bne.n	80035ec <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035e0:	684a      	ldr	r2, [r1, #4]
 80035e2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80035e4:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80035e8:	4322      	orrs	r2, r4
 80035ea:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035ec:	061b      	lsls	r3, r3, #24
 80035ee:	d506      	bpl.n	80035fe <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035f0:	6802      	ldr	r2, [r0, #0]
 80035f2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80035f4:	6853      	ldr	r3, [r2, #4]
 80035f6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80035fa:	430b      	orrs	r3, r1
 80035fc:	6053      	str	r3, [r2, #4]
 80035fe:	bd10      	pop	{r4, pc}

08003600 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003604:	9d06      	ldr	r5, [sp, #24]
 8003606:	4604      	mov	r4, r0
 8003608:	460f      	mov	r7, r1
 800360a:	4616      	mov	r6, r2
 800360c:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800360e:	6821      	ldr	r1, [r4, #0]
 8003610:	69ca      	ldr	r2, [r1, #28]
 8003612:	ea37 0302 	bics.w	r3, r7, r2
 8003616:	bf0c      	ite	eq
 8003618:	2201      	moveq	r2, #1
 800361a:	2200      	movne	r2, #0
 800361c:	42b2      	cmp	r2, r6
 800361e:	d002      	beq.n	8003626 <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003620:	2000      	movs	r0, #0
}
 8003622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8003626:	1c6b      	adds	r3, r5, #1
 8003628:	d0f2      	beq.n	8003610 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800362a:	b99d      	cbnz	r5, 8003654 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800362c:	6823      	ldr	r3, [r4, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003634:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	f022 0201 	bic.w	r2, r2, #1
 800363c:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800363e:	2320      	movs	r3, #32
 8003640:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8003644:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8003648:	2300      	movs	r3, #0
 800364a:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 800364e:	2003      	movs	r0, #3
 8003650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003654:	f7fd fc62 	bl	8000f1c <HAL_GetTick>
 8003658:	eba0 0008 	sub.w	r0, r0, r8
 800365c:	4285      	cmp	r5, r0
 800365e:	d2d6      	bcs.n	800360e <UART_WaitOnFlagUntilTimeout+0xe>
 8003660:	e7e4      	b.n	800362c <UART_WaitOnFlagUntilTimeout+0x2c>

08003662 <UART_CheckIdleState>:
{
 8003662:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003664:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003666:	2600      	movs	r6, #0
 8003668:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 800366a:	f7fd fc57 	bl	8000f1c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800366e:	6823      	ldr	r3, [r4, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8003674:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003676:	d417      	bmi.n	80036a8 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003678:	6823      	ldr	r3, [r4, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	075b      	lsls	r3, r3, #29
 800367e:	d50a      	bpl.n	8003696 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003680:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	2200      	movs	r2, #0
 8003688:	462b      	mov	r3, r5
 800368a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800368e:	4620      	mov	r0, r4
 8003690:	f7ff ffb6 	bl	8003600 <UART_WaitOnFlagUntilTimeout>
 8003694:	b9a0      	cbnz	r0, 80036c0 <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 8003696:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8003698:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800369a:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 800369e:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 80036a2:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 80036a6:	e00c      	b.n	80036c2 <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	4632      	mov	r2, r6
 80036b0:	4603      	mov	r3, r0
 80036b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80036b6:	4620      	mov	r0, r4
 80036b8:	f7ff ffa2 	bl	8003600 <UART_WaitOnFlagUntilTimeout>
 80036bc:	2800      	cmp	r0, #0
 80036be:	d0db      	beq.n	8003678 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80036c0:	2003      	movs	r0, #3
}
 80036c2:	b002      	add	sp, #8
 80036c4:	bd70      	pop	{r4, r5, r6, pc}

080036c6 <HAL_UART_Init>:
{
 80036c6:	b510      	push	{r4, lr}
  if (huart == NULL)
 80036c8:	4604      	mov	r4, r0
 80036ca:	b360      	cbz	r0, 8003726 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 80036cc:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 80036d0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80036d4:	b91b      	cbnz	r3, 80036de <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80036d6:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80036da:	f001 fa9f 	bl	8004c1c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80036de:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80036e0:	2324      	movs	r3, #36	; 0x24
 80036e2:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 80036e6:	6813      	ldr	r3, [r2, #0]
 80036e8:	f023 0301 	bic.w	r3, r3, #1
 80036ec:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036ee:	4620      	mov	r0, r4
 80036f0:	f7ff fd9a 	bl	8003228 <UART_SetConfig>
 80036f4:	2801      	cmp	r0, #1
 80036f6:	d016      	beq.n	8003726 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036fa:	b113      	cbz	r3, 8003702 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80036fc:	4620      	mov	r0, r4
 80036fe:	f7ff ff2b 	bl	8003558 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003702:	6823      	ldr	r3, [r4, #0]
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800370a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800370c:	689a      	ldr	r2, [r3, #8]
 800370e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003712:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800371a:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800371c:	601a      	str	r2, [r3, #0]
}
 800371e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8003722:	f7ff bf9e 	b.w	8003662 <UART_CheckIdleState>
}
 8003726:	2001      	movs	r0, #1
 8003728:	bd10      	pop	{r4, pc}
	...

0800372c <ES2_writeByte>:
// #define ES2_DELAY 100
#define ES2_DELAY 1

// Write one byte via TWI
void ES2_writeByte(uint8_t slaveAddress, uint8_t registerAddress, uint8_t data)
{
 800372c:	b510      	push	{r4, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	ab06      	add	r3, sp, #24
	HAL_I2C_Mem_Write(&hi2c3, slaveAddress << 1, registerAddress, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8003732:	2401      	movs	r4, #1
{
 8003734:	f803 2d01 	strb.w	r2, [r3, #-1]!
	HAL_I2C_Mem_Write(&hi2c3, slaveAddress << 1, registerAddress, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8003738:	2264      	movs	r2, #100	; 0x64
 800373a:	9202      	str	r2, [sp, #8]
 800373c:	e88d 0018 	stmia.w	sp, {r3, r4}
 8003740:	460a      	mov	r2, r1
 8003742:	4623      	mov	r3, r4
 8003744:	fa00 f104 	lsl.w	r1, r0, r4
 8003748:	4803      	ldr	r0, [pc, #12]	; (8003758 <ES2_writeByte+0x2c>)
 800374a:	f7fe fcb5 	bl	80020b8 <HAL_I2C_Mem_Write>

	HAL_Delay(ES2_DELAY);
 800374e:	4620      	mov	r0, r4
 8003750:	f7fd fbea 	bl	8000f28 <HAL_Delay>

	return;
}
 8003754:	b006      	add	sp, #24
 8003756:	bd10      	pop	{r4, pc}
 8003758:	20000314 	.word	0x20000314

0800375c <ES2_readByte>:

// Read one byte via TWI
uint8_t ES2_readByte(uint8_t slaveAddress, uint8_t registerAddress)
{
 800375c:	b510      	push	{r4, lr}
 800375e:	b086      	sub	sp, #24
	uint8_t data;

	HAL_I2C_Mem_Read(&hi2c3, slaveAddress << 1, registerAddress, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8003760:	2364      	movs	r3, #100	; 0x64
 8003762:	2401      	movs	r4, #1
 8003764:	9302      	str	r3, [sp, #8]
 8003766:	f10d 0317 	add.w	r3, sp, #23
 800376a:	460a      	mov	r2, r1
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	fa00 f104 	lsl.w	r1, r0, r4
 8003772:	4623      	mov	r3, r4
 8003774:	9401      	str	r4, [sp, #4]
 8003776:	4805      	ldr	r0, [pc, #20]	; (800378c <ES2_readByte+0x30>)
 8003778:	f7fe fd56 	bl	8002228 <HAL_I2C_Mem_Read>
	HAL_Delay(ES2_DELAY);
 800377c:	4620      	mov	r0, r4
 800377e:	f7fd fbd3 	bl	8000f28 <HAL_Delay>

	return data;
}
 8003782:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8003786:	b006      	add	sp, #24
 8003788:	bd10      	pop	{r4, pc}
 800378a:	bf00      	nop
 800378c:	20000314 	.word	0x20000314

08003790 <ES2_writeCommand>:

// Write standard command to BQ fuel gauge (TI)
void ES2_writeCommand(uint8_t slaveAddress, uint8_t registerAddress, uint16_t dataWord)
{
 8003790:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t buf[2];

	buf[0] = dataWord & 0xFF;
	buf[1] = dataWord >> 8;

	HAL_I2C_Mem_Write(&hi2c3, slaveAddress << 1, registerAddress, I2C_MEMADD_SIZE_8BIT, buf, 2, 100);
 8003792:	2364      	movs	r3, #100	; 0x64
 8003794:	9302      	str	r3, [sp, #8]
 8003796:	2302      	movs	r3, #2
 8003798:	9301      	str	r3, [sp, #4]
 800379a:	ab05      	add	r3, sp, #20
	buf[0] = dataWord & 0xFF;
 800379c:	f88d 2014 	strb.w	r2, [sp, #20]
	HAL_I2C_Mem_Write(&hi2c3, slaveAddress << 1, registerAddress, I2C_MEMADD_SIZE_8BIT, buf, 2, 100);
 80037a0:	9300      	str	r3, [sp, #0]
	buf[1] = dataWord >> 8;
 80037a2:	0a12      	lsrs	r2, r2, #8
	HAL_I2C_Mem_Write(&hi2c3, slaveAddress << 1, registerAddress, I2C_MEMADD_SIZE_8BIT, buf, 2, 100);
 80037a4:	2301      	movs	r3, #1
	buf[1] = dataWord >> 8;
 80037a6:	f88d 2015 	strb.w	r2, [sp, #21]
	HAL_I2C_Mem_Write(&hi2c3, slaveAddress << 1, registerAddress, I2C_MEMADD_SIZE_8BIT, buf, 2, 100);
 80037aa:	460a      	mov	r2, r1
 80037ac:	fa00 f103 	lsl.w	r1, r0, r3
 80037b0:	4804      	ldr	r0, [pc, #16]	; (80037c4 <ES2_writeCommand+0x34>)
 80037b2:	f7fe fc81 	bl	80020b8 <HAL_I2C_Mem_Write>

	HAL_Delay(ES2_DELAY);
 80037b6:	2001      	movs	r0, #1
 80037b8:	f7fd fbb6 	bl	8000f28 <HAL_Delay>

	return;
}
 80037bc:	b007      	add	sp, #28
 80037be:	f85d fb04 	ldr.w	pc, [sp], #4
 80037c2:	bf00      	nop
 80037c4:	20000314 	.word	0x20000314

080037c8 <ES2_readCommand>:

// Read standard command to BQ fuel gauge (TI)
uint16_t ES2_readCommand(uint8_t slaveAddress, uint8_t registerAddress)
{
 80037c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint16_t dataWord;
	uint8_t buf[2];

	HAL_I2C_Mem_Read(&hi2c3, slaveAddress << 1, registerAddress, I2C_MEMADD_SIZE_8BIT, buf, 2, 100);
 80037ca:	2364      	movs	r3, #100	; 0x64
 80037cc:	9302      	str	r3, [sp, #8]
 80037ce:	2302      	movs	r3, #2
 80037d0:	9301      	str	r3, [sp, #4]
 80037d2:	ab05      	add	r3, sp, #20
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	2301      	movs	r3, #1
 80037d8:	460a      	mov	r2, r1
 80037da:	fa00 f103 	lsl.w	r1, r0, r3
 80037de:	4807      	ldr	r0, [pc, #28]	; (80037fc <ES2_readCommand+0x34>)
 80037e0:	f7fe fd22 	bl	8002228 <HAL_I2C_Mem_Read>

	HAL_Delay(ES2_DELAY);
 80037e4:	2001      	movs	r0, #1
 80037e6:	f7fd fb9f 	bl	8000f28 <HAL_Delay>

	dataWord = buf[0];
	dataWord |= buf[1] << 8;
 80037ea:	f89d 0015 	ldrb.w	r0, [sp, #21]
 80037ee:	f89d 3014 	ldrb.w	r3, [sp, #20]

	return dataWord;
}
 80037f2:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80037f6:	b007      	add	sp, #28
 80037f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80037fc:	20000314 	.word	0x20000314

08003800 <ES2_readSubCommand>:

// Read Control() subcommand to BQ fuel gauge (TI)
uint16_t ES2_readSubCommand(uint8_t slaveAddress, uint16_t controlData)
{
 8003800:	b530      	push	{r4, r5, lr}
 8003802:	b085      	sub	sp, #20

	buf[0] = 0;
	buf[1] = controlData & 0xFF;
	buf[2] = controlData >> 8;

	HAL_I2C_Master_Transmit(&hi2c3, slaveAddress << 1, buf, 3, 100);
 8003804:	2364      	movs	r3, #100	; 0x64
	buf[1] = controlData & 0xFF;
 8003806:	f88d 100d 	strb.w	r1, [sp, #13]
	buf[2] = controlData >> 8;
 800380a:	0a09      	lsrs	r1, r1, #8
	HAL_I2C_Master_Transmit(&hi2c3, slaveAddress << 1, buf, 3, 100);
 800380c:	aa03      	add	r2, sp, #12
{
 800380e:	4604      	mov	r4, r0
	buf[0] = 0;
 8003810:	2500      	movs	r5, #0
	buf[2] = controlData >> 8;
 8003812:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit(&hi2c3, slaveAddress << 1, buf, 3, 100);
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	0041      	lsls	r1, r0, #1
 800381a:	2303      	movs	r3, #3
 800381c:	4807      	ldr	r0, [pc, #28]	; (800383c <ES2_readSubCommand+0x3c>)
	buf[0] = 0;
 800381e:	f88d 500c 	strb.w	r5, [sp, #12]
	HAL_I2C_Master_Transmit(&hi2c3, slaveAddress << 1, buf, 3, 100);
 8003822:	f7fe fb1f 	bl	8001e64 <HAL_I2C_Master_Transmit>

	dataWord = ES2_readCommand(slaveAddress, 0x00);
 8003826:	4629      	mov	r1, r5
 8003828:	4620      	mov	r0, r4
 800382a:	f7ff ffcd 	bl	80037c8 <ES2_readCommand>
 800382e:	4604      	mov	r4, r0

	HAL_Delay(ES2_DELAY);
 8003830:	2001      	movs	r0, #1
 8003832:	f7fd fb79 	bl	8000f28 <HAL_Delay>

	return dataWord;
}
 8003836:	4620      	mov	r0, r4
 8003838:	b005      	add	sp, #20
 800383a:	bd30      	pop	{r4, r5, pc}
 800383c:	20000314 	.word	0x20000314

08003840 <ES2_checkIfSealed>:

// Check if fuel gauge is in "Sealed" state
int ES2_checkIfSealed(uint8_t slaveAddress)
{
 8003840:	b508      	push	{r3, lr}
	uint16_t flags;

	flags = ES2_readSubCommand(slaveAddress, 0x0000);
 8003842:	2100      	movs	r1, #0
 8003844:	f7ff ffdc 	bl	8003800 <ES2_readSubCommand>

	return (flags & 0x2000);
}
 8003848:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 800384c:	bd08      	pop	{r3, pc}

0800384e <ES2_setupFuelGauge>:

int ES2_setupFuelGauge(uint8_t slaveAddress, uint16_t newDesignCapacity_mAh,
		uint16_t newTerminationVoltage_mV, uint16_t chargeTerminationCurrent_mA,
		uint8_t alarmSOC)
{
 800384e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003852:	b08b      	sub	sp, #44	; 0x2c
	uint8_t oldCheckSum, tempCheckSum, newCheckSum, checkSum, i;

	uint16_t oldOpConfig, newOpConfig, oldSOC1Set, oldSOC1Clear;

	newDesignEnergy = ((unsigned long) newDesignCapacity_mAh * 37) / 10;
	newTerminationRate = (uint16_t) (newDesignCapacity_mAh * 10)
 8003854:	eb01 0581 	add.w	r5, r1, r1, lsl #2
	newDesignEnergy = ((unsigned long) newDesignCapacity_mAh * 37) / 10;
 8003858:	2625      	movs	r6, #37	; 0x25
	newTerminationRate = (uint16_t) (newDesignCapacity_mAh * 10)
 800385a:	006d      	lsls	r5, r5, #1
{
 800385c:	f89d 8050 	ldrb.w	r8, [sp, #80]	; 0x50
 8003860:	4692      	mov	sl, r2
	newDesignEnergy = ((unsigned long) newDesignCapacity_mAh * 37) / 10;
 8003862:	434e      	muls	r6, r1
 8003864:	220a      	movs	r2, #10
	newTerminationRate = (uint16_t) (newDesignCapacity_mAh * 10)
 8003866:	b2ad      	uxth	r5, r5
	newDesignEnergy = ((unsigned long) newDesignCapacity_mAh * 37) / 10;
 8003868:	fbb6 f6f2 	udiv	r6, r6, r2
	newTerminationRate = (uint16_t) (newDesignCapacity_mAh * 10)
 800386c:	fbb5 f5f3 	udiv	r5, r5, r3
{
 8003870:	4604      	mov	r4, r0
 8003872:	4689      	mov	r9, r1
	newDesignEnergy = ((unsigned long) newDesignCapacity_mAh * 37) / 10;
 8003874:	fa1f fb86 	uxth.w	fp, r6
	newTerminationRate = (uint16_t) (newDesignCapacity_mAh * 10)
 8003878:	2365      	movs	r3, #101	; 0x65
 800387a:	3b01      	subs	r3, #1

	i = 0;
	do
	{
		++i;
		if (i > 100)
 800387c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	f000 817c 	beq.w	8003b7e <ES2_setupFuelGauge+0x330>
			return 1; // Failed
		// Unseal
		ES2_writeCommand(slaveAddress, 0x00, 0x8000);
 8003886:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800388a:	2100      	movs	r1, #0
 800388c:	4620      	mov	r0, r4
 800388e:	f7ff ff7f 	bl	8003790 <ES2_writeCommand>
		ES2_writeCommand(slaveAddress, 0x00, 0x8000);
 8003892:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003896:	2100      	movs	r1, #0
 8003898:	4620      	mov	r0, r4
 800389a:	f7ff ff79 	bl	8003790 <ES2_writeCommand>
//		HAL_Delay(10);
	} while (ES2_checkIfSealed(slaveAddress));
 800389e:	4620      	mov	r0, r4
 80038a0:	f7ff ffce 	bl	8003840 <ES2_checkIfSealed>
 80038a4:	9b00      	ldr	r3, [sp, #0]
 80038a6:	4607      	mov	r7, r0
 80038a8:	2800      	cmp	r0, #0
 80038aa:	d1e6      	bne.n	800387a <ES2_setupFuelGauge+0x2c>

	//Change to CONFIG UPDATE mode
	ES2_writeCommand(slaveAddress, 0x00, 0x0013);
 80038ac:	4601      	mov	r1, r0
 80038ae:	2213      	movs	r2, #19
 80038b0:	4620      	mov	r0, r4
 80038b2:	f7ff ff6d 	bl	8003790 <ES2_writeCommand>
	do
	{
		flags = ES2_readCommand(slaveAddress, 0x06);
 80038b6:	2106      	movs	r1, #6
 80038b8:	4620      	mov	r0, r4
 80038ba:	f7ff ff85 	bl	80037c8 <ES2_readCommand>
	} while (!(flags & 0x0010));
 80038be:	06c3      	lsls	r3, r0, #27
 80038c0:	d5f9      	bpl.n	80038b6 <ES2_setupFuelGauge+0x68>

	// Setup Block RAM update
	ES2_writeByte(slaveAddress, 0x61, 0x00);
 80038c2:	2200      	movs	r2, #0
 80038c4:	2161      	movs	r1, #97	; 0x61
 80038c6:	4620      	mov	r0, r4
 80038c8:	f7ff ff30 	bl	800372c <ES2_writeByte>
	ES2_writeByte(slaveAddress, 0x3E, 0x52);
 80038cc:	2252      	movs	r2, #82	; 0x52
 80038ce:	213e      	movs	r1, #62	; 0x3e
 80038d0:	4620      	mov	r0, r4
 80038d2:	f7ff ff2b 	bl	800372c <ES2_writeByte>
	ES2_writeByte(slaveAddress, 0x3F, 0x00);
 80038d6:	2200      	movs	r2, #0
 80038d8:	213f      	movs	r1, #63	; 0x3f
 80038da:	4620      	mov	r0, r4
 80038dc:	f7ff ff26 	bl	800372c <ES2_writeByte>

	oldCheckSum = ES2_readByte(slaveAddress, 0x60);
 80038e0:	2160      	movs	r1, #96	; 0x60
 80038e2:	4620      	mov	r0, r4
 80038e4:	f7ff ff3a 	bl	800375c <ES2_readByte>
		tempCheckSum -= oldTerminationVoltage & 0xFF;

		tempCheckSum -= oldTaperRate >> 8;
		tempCheckSum -= oldTaperRate & 0xFF;

		ES2_writeByte(slaveAddress, 0x4A, newDesignCapacity_mAh >> 8);
 80038e8:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80038ec:	9300      	str	r3, [sp, #0]
		ES2_writeByte(slaveAddress, 0x4B, newDesignCapacity_mAh & 0xFF);

		ES2_writeByte(slaveAddress, 0x4C, newDesignEnergy >> 8);
 80038ee:	ea4f 231b 	mov.w	r3, fp, lsr #8
 80038f2:	9301      	str	r3, [sp, #4]
		ES2_writeByte(slaveAddress, 0x4D, newDesignEnergy & 0xFF);
 80038f4:	b2f3      	uxtb	r3, r6
 80038f6:	9302      	str	r3, [sp, #8]

		ES2_writeByte(slaveAddress, 0x50, newTerminationVoltage_mV >> 8);
 80038f8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80038fc:	9303      	str	r3, [sp, #12]
		ES2_writeByte(slaveAddress, 0x51, newTerminationVoltage_mV & 0xFF);
 80038fe:	fa5f f38a 	uxtb.w	r3, sl
 8003902:	9304      	str	r3, [sp, #16]

		ES2_writeByte(slaveAddress, 0x5B, newTerminationRate >> 8);
 8003904:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8003908:	9305      	str	r3, [sp, #20]
		ES2_writeByte(slaveAddress, 0x5C, newTerminationRate & 0xFF);
 800390a:	b2eb      	uxtb	r3, r5
 800390c:	9306      	str	r3, [sp, #24]
 800390e:	9a04      	ldr	r2, [sp, #16]
 8003910:	9b03      	ldr	r3, [sp, #12]
		ES2_writeByte(slaveAddress, 0x4B, newDesignCapacity_mAh & 0xFF);
 8003912:	fa5f f989 	uxtb.w	r9, r9
 8003916:	4413      	add	r3, r2
 8003918:	9a00      	ldr	r2, [sp, #0]
 800391a:	444b      	add	r3, r9
 800391c:	4413      	add	r3, r2
 800391e:	9a06      	ldr	r2, [sp, #24]
 8003920:	4413      	add	r3, r2
 8003922:	9a02      	ldr	r2, [sp, #8]
 8003924:	4413      	add	r3, r2
 8003926:	9a05      	ldr	r2, [sp, #20]
 8003928:	4413      	add	r3, r2
 800392a:	9a01      	ldr	r2, [sp, #4]
 800392c:	4413      	add	r3, r2
 800392e:	b2db      	uxtb	r3, r3
		tempCheckSum = 0xFF - oldCheckSum;
 8003930:	43c0      	mvns	r0, r0
 8003932:	9307      	str	r3, [sp, #28]
 8003934:	b2c3      	uxtb	r3, r0
		ES2_writeByte(slaveAddress, 0x5C, newTerminationRate & 0xFF);
 8003936:	2565      	movs	r5, #101	; 0x65
		tempCheckSum = 0xFF - oldCheckSum;
 8003938:	9308      	str	r3, [sp, #32]
 800393a:	3d01      	subs	r5, #1
		if (i > 100)
 800393c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8003940:	d104      	bne.n	800394c <ES2_setupFuelGauge+0xfe>
			return 2; // Failed
 8003942:	2702      	movs	r7, #2

	// Seal fuel gauge
	ES2_writeCommand(slaveAddress, 0x00, 0x0020);

	return 0;
}
 8003944:	4638      	mov	r0, r7
 8003946:	b00b      	add	sp, #44	; 0x2c
 8003948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		oldDesignCapacity = ES2_readCommand(slaveAddress, 0x4A);
 800394c:	214a      	movs	r1, #74	; 0x4a
 800394e:	4620      	mov	r0, r4
 8003950:	f7ff ff3a 	bl	80037c8 <ES2_readCommand>
		oldDesignEnergy = ES2_readCommand(slaveAddress, 0x4C);
 8003954:	214c      	movs	r1, #76	; 0x4c
		oldDesignCapacity = ES2_readCommand(slaveAddress, 0x4A);
 8003956:	9009      	str	r0, [sp, #36]	; 0x24
		oldDesignEnergy = ES2_readCommand(slaveAddress, 0x4C);
 8003958:	4620      	mov	r0, r4
 800395a:	f7ff ff35 	bl	80037c8 <ES2_readCommand>
		oldTerminationVoltage = ES2_readCommand(slaveAddress, 0x50);
 800395e:	2150      	movs	r1, #80	; 0x50
		oldDesignEnergy = ES2_readCommand(slaveAddress, 0x4C);
 8003960:	4683      	mov	fp, r0
		oldTerminationVoltage = ES2_readCommand(slaveAddress, 0x50);
 8003962:	4620      	mov	r0, r4
 8003964:	f7ff ff30 	bl	80037c8 <ES2_readCommand>
		oldTaperRate = ES2_readCommand(slaveAddress, 0x5B);
 8003968:	215b      	movs	r1, #91	; 0x5b
		oldTerminationVoltage = ES2_readCommand(slaveAddress, 0x50);
 800396a:	4682      	mov	sl, r0
		oldTaperRate = ES2_readCommand(slaveAddress, 0x5B);
 800396c:	4620      	mov	r0, r4
 800396e:	f7ff ff2b 	bl	80037c8 <ES2_readCommand>
		tempCheckSum -= oldDesignCapacity >> 8;
 8003972:	9b08      	ldr	r3, [sp, #32]
 8003974:	461a      	mov	r2, r3
 8003976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003978:	eba2 2213 	sub.w	r2, r2, r3, lsr #8
		tempCheckSum -= oldDesignCapacity & 0xFF;
 800397c:	1ad3      	subs	r3, r2, r3
		tempCheckSum -= oldDesignEnergy >> 8;
 800397e:	eba3 231b 	sub.w	r3, r3, fp, lsr #8
		oldTaperRate = ES2_readCommand(slaveAddress, 0x5B);
 8003982:	4606      	mov	r6, r0
		ES2_writeByte(slaveAddress, 0x4A, newDesignCapacity_mAh >> 8);
 8003984:	9a00      	ldr	r2, [sp, #0]
 8003986:	214a      	movs	r1, #74	; 0x4a
 8003988:	4620      	mov	r0, r4
		tempCheckSum -= oldDesignEnergy & 0xFF;
 800398a:	eba3 0b0b 	sub.w	fp, r3, fp
		ES2_writeByte(slaveAddress, 0x4A, newDesignCapacity_mAh >> 8);
 800398e:	f7ff fecd 	bl	800372c <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x4B, newDesignCapacity_mAh & 0xFF);
 8003992:	464a      	mov	r2, r9
 8003994:	214b      	movs	r1, #75	; 0x4b
 8003996:	4620      	mov	r0, r4
 8003998:	f7ff fec8 	bl	800372c <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x4C, newDesignEnergy >> 8);
 800399c:	9a01      	ldr	r2, [sp, #4]
 800399e:	214c      	movs	r1, #76	; 0x4c
 80039a0:	4620      	mov	r0, r4
 80039a2:	f7ff fec3 	bl	800372c <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x4D, newDesignEnergy & 0xFF);
 80039a6:	9a02      	ldr	r2, [sp, #8]
 80039a8:	214d      	movs	r1, #77	; 0x4d
 80039aa:	4620      	mov	r0, r4
 80039ac:	f7ff febe 	bl	800372c <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x50, newTerminationVoltage_mV >> 8);
 80039b0:	9a03      	ldr	r2, [sp, #12]
 80039b2:	2150      	movs	r1, #80	; 0x50
 80039b4:	4620      	mov	r0, r4
 80039b6:	f7ff feb9 	bl	800372c <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x51, newTerminationVoltage_mV & 0xFF);
 80039ba:	9a04      	ldr	r2, [sp, #16]
 80039bc:	2151      	movs	r1, #81	; 0x51
 80039be:	4620      	mov	r0, r4
 80039c0:	f7ff feb4 	bl	800372c <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x5B, newTerminationRate >> 8);
 80039c4:	9a05      	ldr	r2, [sp, #20]
 80039c6:	215b      	movs	r1, #91	; 0x5b
 80039c8:	4620      	mov	r0, r4
 80039ca:	f7ff feaf 	bl	800372c <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x5C, newTerminationRate & 0xFF);
 80039ce:	9a06      	ldr	r2, [sp, #24]
 80039d0:	215c      	movs	r1, #92	; 0x5c
 80039d2:	4620      	mov	r0, r4
 80039d4:	f7ff feaa 	bl	800372c <ES2_writeByte>
		tempCheckSum += newTerminationRate & 0xFF;
 80039d8:	9b07      	ldr	r3, [sp, #28]
		tempCheckSum -= oldTerminationVoltage >> 8;
 80039da:	ebab 2b1a 	sub.w	fp, fp, sl, lsr #8
		tempCheckSum += newTerminationRate & 0xFF;
 80039de:	1b9b      	subs	r3, r3, r6
		tempCheckSum -= oldTerminationVoltage & 0xFF;
 80039e0:	ebab 0a0a 	sub.w	sl, fp, sl
		tempCheckSum += newTerminationRate & 0xFF;
 80039e4:	eba3 2616 	sub.w	r6, r3, r6, lsr #8
		tempCheckSum -= oldTerminationVoltage & 0xFF;
 80039e8:	f00a 0aff 	and.w	sl, sl, #255	; 0xff
		tempCheckSum += newTerminationRate & 0xFF;
 80039ec:	44b2      	add	sl, r6
		newCheckSum = 0xFF - tempCheckSum;
 80039ee:	ea6f 0a0a 	mvn.w	sl, sl
 80039f2:	fa5f fa8a 	uxtb.w	sl, sl
		ES2_writeByte(slaveAddress, 0x60, newCheckSum);
 80039f6:	4652      	mov	r2, sl
 80039f8:	2160      	movs	r1, #96	; 0x60
 80039fa:	4620      	mov	r0, r4
 80039fc:	f7ff fe96 	bl	800372c <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x3E, 0x52);
 8003a00:	2252      	movs	r2, #82	; 0x52
 8003a02:	213e      	movs	r1, #62	; 0x3e
 8003a04:	4620      	mov	r0, r4
 8003a06:	f7ff fe91 	bl	800372c <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x3F, 0x00);
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	213f      	movs	r1, #63	; 0x3f
 8003a0e:	4620      	mov	r0, r4
 8003a10:	f7ff fe8c 	bl	800372c <ES2_writeByte>
		checkSum = ES2_readByte(slaveAddress, 0x60);
 8003a14:	2160      	movs	r1, #96	; 0x60
 8003a16:	4620      	mov	r0, r4
 8003a18:	f7ff fea0 	bl	800375c <ES2_readByte>
	} while (checkSum != newCheckSum);
 8003a1c:	4582      	cmp	sl, r0
 8003a1e:	d18c      	bne.n	800393a <ES2_setupFuelGauge+0xec>
	ES2_writeByte(slaveAddress, 0x61, 0x00); // Enable block access
 8003a20:	2200      	movs	r2, #0
 8003a22:	2161      	movs	r1, #97	; 0x61
 8003a24:	4620      	mov	r0, r4
 8003a26:	f7ff fe81 	bl	800372c <ES2_writeByte>
	ES2_writeByte(slaveAddress, 0x3E, 0x40); // Set subclass ID
 8003a2a:	2240      	movs	r2, #64	; 0x40
 8003a2c:	213e      	movs	r1, #62	; 0x3e
 8003a2e:	4620      	mov	r0, r4
 8003a30:	f7ff fe7c 	bl	800372c <ES2_writeByte>
	ES2_writeByte(slaveAddress, 0x3F, 0x00);  // Set block offset 0 or 32
 8003a34:	2200      	movs	r2, #0
 8003a36:	213f      	movs	r1, #63	; 0x3f
 8003a38:	4620      	mov	r0, r4
 8003a3a:	f7ff fe77 	bl	800372c <ES2_writeByte>
	oldCheckSum = ES2_readByte(slaveAddress, 0x60);
 8003a3e:	2160      	movs	r1, #96	; 0x60
 8003a40:	4620      	mov	r0, r4
 8003a42:	f7ff fe8b 	bl	800375c <ES2_readByte>
		tempCheckSum = 0xFF - oldCheckSum;
 8003a46:	43c0      	mvns	r0, r0
	oldCheckSum = ES2_readByte(slaveAddress, 0x60);
 8003a48:	2665      	movs	r6, #101	; 0x65
		tempCheckSum = 0xFF - oldCheckSum;
 8003a4a:	fa5f f980 	uxtb.w	r9, r0
 8003a4e:	3e01      	subs	r6, #1
		if (i > 100)
 8003a50:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8003a54:	f43f af75 	beq.w	8003942 <ES2_setupFuelGauge+0xf4>
		oldOpConfig = ES2_readCommand(slaveAddress, 0x40);
 8003a58:	2140      	movs	r1, #64	; 0x40
 8003a5a:	4620      	mov	r0, r4
 8003a5c:	f7ff feb4 	bl	80037c8 <ES2_readCommand>
		newOpConfig = oldOpConfig | 0x0004; // Enable BATLOWEN Bit
 8003a60:	f040 0504 	orr.w	r5, r0, #4
 8003a64:	b2ad      	uxth	r5, r5
		if (newOpConfig == oldOpConfig)
 8003a66:	42a8      	cmp	r0, r5
		oldOpConfig = ES2_readCommand(slaveAddress, 0x40);
 8003a68:	4682      	mov	sl, r0
		if (newOpConfig == oldOpConfig)
 8003a6a:	d137      	bne.n	8003adc <ES2_setupFuelGauge+0x28e>
	ES2_writeByte(slaveAddress, 0x3E, 0x31); // Set subclass ID
 8003a6c:	2231      	movs	r2, #49	; 0x31
 8003a6e:	213e      	movs	r1, #62	; 0x3e
 8003a70:	4620      	mov	r0, r4
 8003a72:	f7ff fe5b 	bl	800372c <ES2_writeByte>
	ES2_writeByte(slaveAddress, 0x3F, 0x00);  // Set block offset 0 or 32
 8003a76:	2200      	movs	r2, #0
 8003a78:	213f      	movs	r1, #63	; 0x3f
 8003a7a:	4620      	mov	r0, r4
 8003a7c:	f7ff fe56 	bl	800372c <ES2_writeByte>
	oldCheckSum = ES2_readByte(slaveAddress, 0x60);
 8003a80:	2160      	movs	r1, #96	; 0x60
 8003a82:	4620      	mov	r0, r4
 8003a84:	f7ff fe6a 	bl	800375c <ES2_readByte>
		tempCheckSum = 0xFF - oldCheckSum;
 8003a88:	43c0      	mvns	r0, r0
	oldCheckSum = ES2_readByte(slaveAddress, 0x60);
 8003a8a:	f04f 0965 	mov.w	r9, #101	; 0x65
		tempCheckSum = 0xFF - oldCheckSum;
 8003a8e:	fa5f fa80 	uxtb.w	sl, r0
 8003a92:	f109 39ff 	add.w	r9, r9, #4294967295
		if (i > 100)
 8003a96:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
 8003a9a:	f43f af52 	beq.w	8003942 <ES2_setupFuelGauge+0xf4>
		oldSOC1Set = ES2_readByte(slaveAddress, 0x40);
 8003a9e:	2140      	movs	r1, #64	; 0x40
 8003aa0:	4620      	mov	r0, r4
 8003aa2:	f7ff fe5b 	bl	800375c <ES2_readByte>
		oldSOC1Clear = ES2_readByte(slaveAddress, 0x41);
 8003aa6:	2141      	movs	r1, #65	; 0x41
		oldSOC1Set = ES2_readByte(slaveAddress, 0x40);
 8003aa8:	4605      	mov	r5, r0
		oldSOC1Clear = ES2_readByte(slaveAddress, 0x41);
 8003aaa:	4620      	mov	r0, r4
 8003aac:	f7ff fe56 	bl	800375c <ES2_readByte>
		if (oldSOC1Set == alarmSOC && oldSOC1Clear == alarmSOC)
 8003ab0:	4545      	cmp	r5, r8
		oldSOC1Clear = ES2_readByte(slaveAddress, 0x41);
 8003ab2:	4683      	mov	fp, r0
		if (oldSOC1Set == alarmSOC && oldSOC1Clear == alarmSOC)
 8003ab4:	d139      	bne.n	8003b2a <ES2_setupFuelGauge+0x2dc>
 8003ab6:	4540      	cmp	r0, r8
 8003ab8:	d137      	bne.n	8003b2a <ES2_setupFuelGauge+0x2dc>
	ES2_writeCommand(slaveAddress, 0x00, 0x0042);
 8003aba:	2242      	movs	r2, #66	; 0x42
 8003abc:	2100      	movs	r1, #0
 8003abe:	4620      	mov	r0, r4
 8003ac0:	f7ff fe66 	bl	8003790 <ES2_writeCommand>
		flags = ES2_readCommand(slaveAddress, 0x06);
 8003ac4:	2106      	movs	r1, #6
 8003ac6:	4620      	mov	r0, r4
 8003ac8:	f7ff fe7e 	bl	80037c8 <ES2_readCommand>
	} while (flags & 0x0010);
 8003acc:	f010 0110 	ands.w	r1, r0, #16
 8003ad0:	d1f8      	bne.n	8003ac4 <ES2_setupFuelGauge+0x276>
	ES2_writeCommand(slaveAddress, 0x00, 0x0020);
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	4620      	mov	r0, r4
 8003ad6:	f7ff fe5b 	bl	8003790 <ES2_writeCommand>
	return 0;
 8003ada:	e733      	b.n	8003944 <ES2_setupFuelGauge+0xf6>
		ES2_writeByte(slaveAddress, 0x40, newOpConfig >> 8);
 8003adc:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8003ae0:	2140      	movs	r1, #64	; 0x40
 8003ae2:	4620      	mov	r0, r4
		ES2_writeByte(slaveAddress, 0x41, newOpConfig & 0xFF);
 8003ae4:	b2ed      	uxtb	r5, r5
		ES2_writeByte(slaveAddress, 0x40, newOpConfig >> 8);
 8003ae6:	f7ff fe21 	bl	800372c <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x41, newOpConfig & 0xFF);
 8003aea:	462a      	mov	r2, r5
		tempCheckSum += newOpConfig & 0xFF;
 8003aec:	eba5 050a 	sub.w	r5, r5, sl
 8003af0:	444d      	add	r5, r9
		newCheckSum = 0xFF - tempCheckSum;
 8003af2:	43ed      	mvns	r5, r5
		ES2_writeByte(slaveAddress, 0x41, newOpConfig & 0xFF);
 8003af4:	2141      	movs	r1, #65	; 0x41
 8003af6:	4620      	mov	r0, r4
		newCheckSum = 0xFF - tempCheckSum;
 8003af8:	b2ed      	uxtb	r5, r5
		ES2_writeByte(slaveAddress, 0x41, newOpConfig & 0xFF);
 8003afa:	f7ff fe17 	bl	800372c <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x60, newCheckSum);
 8003afe:	462a      	mov	r2, r5
 8003b00:	2160      	movs	r1, #96	; 0x60
 8003b02:	4620      	mov	r0, r4
 8003b04:	f7ff fe12 	bl	800372c <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x3E, 0x40);
 8003b08:	2240      	movs	r2, #64	; 0x40
 8003b0a:	213e      	movs	r1, #62	; 0x3e
 8003b0c:	4620      	mov	r0, r4
 8003b0e:	f7ff fe0d 	bl	800372c <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x3F, 0x00);
 8003b12:	2200      	movs	r2, #0
 8003b14:	213f      	movs	r1, #63	; 0x3f
 8003b16:	4620      	mov	r0, r4
 8003b18:	f7ff fe08 	bl	800372c <ES2_writeByte>
		checkSum = ES2_readByte(slaveAddress, 0x60);
 8003b1c:	2160      	movs	r1, #96	; 0x60
 8003b1e:	4620      	mov	r0, r4
 8003b20:	f7ff fe1c 	bl	800375c <ES2_readByte>
	} while (checkSum != newCheckSum);
 8003b24:	4285      	cmp	r5, r0
 8003b26:	d192      	bne.n	8003a4e <ES2_setupFuelGauge+0x200>
 8003b28:	e7a0      	b.n	8003a6c <ES2_setupFuelGauge+0x21e>
 8003b2a:	ea4f 0648 	mov.w	r6, r8, lsl #1
 8003b2e:	b2f6      	uxtb	r6, r6
 8003b30:	4456      	add	r6, sl
 8003b32:	1b75      	subs	r5, r6, r5
 8003b34:	b2ed      	uxtb	r5, r5
		tempCheckSum += alarmSOC;
 8003b36:	eba5 050b 	sub.w	r5, r5, fp
		ES2_writeByte(slaveAddress, 0x40, alarmSOC);
 8003b3a:	4642      	mov	r2, r8
 8003b3c:	2140      	movs	r1, #64	; 0x40
 8003b3e:	4620      	mov	r0, r4
		newCheckSum = 0xFF - tempCheckSum;
 8003b40:	43ed      	mvns	r5, r5
		ES2_writeByte(slaveAddress, 0x40, alarmSOC);
 8003b42:	f7ff fdf3 	bl	800372c <ES2_writeByte>
		newCheckSum = 0xFF - tempCheckSum;
 8003b46:	b2ed      	uxtb	r5, r5
		ES2_writeByte(slaveAddress, 0x41, alarmSOC);
 8003b48:	4642      	mov	r2, r8
 8003b4a:	2141      	movs	r1, #65	; 0x41
 8003b4c:	4620      	mov	r0, r4
 8003b4e:	f7ff fded 	bl	800372c <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x60, newCheckSum);
 8003b52:	462a      	mov	r2, r5
 8003b54:	2160      	movs	r1, #96	; 0x60
 8003b56:	4620      	mov	r0, r4
 8003b58:	f7ff fde8 	bl	800372c <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x3E, 0x31);
 8003b5c:	2231      	movs	r2, #49	; 0x31
 8003b5e:	213e      	movs	r1, #62	; 0x3e
 8003b60:	4620      	mov	r0, r4
 8003b62:	f7ff fde3 	bl	800372c <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x3F, 0x00);
 8003b66:	2200      	movs	r2, #0
 8003b68:	213f      	movs	r1, #63	; 0x3f
 8003b6a:	4620      	mov	r0, r4
 8003b6c:	f7ff fdde 	bl	800372c <ES2_writeByte>
		checkSum = ES2_readByte(slaveAddress, 0x60);
 8003b70:	2160      	movs	r1, #96	; 0x60
 8003b72:	4620      	mov	r0, r4
 8003b74:	f7ff fdf2 	bl	800375c <ES2_readByte>
	} while (checkSum != newCheckSum);
 8003b78:	4285      	cmp	r5, r0
 8003b7a:	d18a      	bne.n	8003a92 <ES2_setupFuelGauge+0x244>
 8003b7c:	e79d      	b.n	8003aba <ES2_setupFuelGauge+0x26c>
			return 1; // Failed
 8003b7e:	2701      	movs	r7, #1
 8003b80:	e6e0      	b.n	8003944 <ES2_setupFuelGauge+0xf6>

08003b82 <decodeBCD>:

// Decode tens place, units place formating (BCD)
uint8_t decodeBCD(uint8_t BCD)
{
	uint8_t _value = ((0x70 & BCD) >> 4) * 10 + (0x0F & BCD);
 8003b82:	f3c0 1302 	ubfx	r3, r0, #4, #3
 8003b86:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003b8a:	f000 000f 	and.w	r0, r0, #15

	return _value;
}
 8003b8e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8003b92:	4770      	bx	lr

08003b94 <ES2_readClock>:
	return;
}

// Read current time and date into a local buffer
void ES2_readClock()
{
 8003b94:	b530      	push	{r4, r5, lr}
 8003b96:	b085      	sub	sp, #20

	// Read time and date
//	HAL_Delay(20);

	// read from register 4 to 0xA from RTC
	HAL_I2C_Mem_Read(&hi2c3, RTC_SLAVE_ADDR << 1, 0x04, I2C_MEMADD_SIZE_8BIT, es_timeDate, 7, 100);
 8003b98:	2364      	movs	r3, #100	; 0x64
 8003b9a:	9302      	str	r3, [sp, #8]
 8003b9c:	2307      	movs	r3, #7
 8003b9e:	9301      	str	r3, [sp, #4]
 8003ba0:	4b0b      	ldr	r3, [pc, #44]	; (8003bd0 <ES2_readClock+0x3c>)
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	2204      	movs	r2, #4
 8003ba8:	21a2      	movs	r1, #162	; 0xa2
 8003baa:	480a      	ldr	r0, [pc, #40]	; (8003bd4 <ES2_readClock+0x40>)
 8003bac:	f7fe fb3c 	bl	8002228 <HAL_I2C_Mem_Read>

	// Convert seconds, minutes, hours, day-of-the-month, and year from BCD to binary (skipping day-of-the-week)
	for (i = 0; i < 7; i++)
 8003bb0:	2400      	movs	r4, #0
 8003bb2:	e000      	b.n	8003bb6 <ES2_readClock+0x22>
 8003bb4:	3401      	adds	r4, #1
 8003bb6:	2c06      	cmp	r4, #6
 8003bb8:	dc07      	bgt.n	8003bca <ES2_readClock+0x36>
	{
		if (i != 4)
 8003bba:	2c04      	cmp	r4, #4
 8003bbc:	d0fa      	beq.n	8003bb4 <ES2_readClock+0x20>
			es_timeDate[i] = decodeBCD(es_timeDate[i]);
 8003bbe:	4d04      	ldr	r5, [pc, #16]	; (8003bd0 <ES2_readClock+0x3c>)
 8003bc0:	5d28      	ldrb	r0, [r5, r4]
 8003bc2:	f7ff ffde 	bl	8003b82 <decodeBCD>
 8003bc6:	5528      	strb	r0, [r5, r4]
 8003bc8:	e7f4      	b.n	8003bb4 <ES2_readClock+0x20>
	}

	return;
}
 8003bca:	b005      	add	sp, #20
 8003bcc:	bd30      	pop	{r4, r5, pc}
 8003bce:	bf00      	nop
 8003bd0:	20000430 	.word	0x20000430
 8003bd4:	20000314 	.word	0x20000314

08003bd8 <ES2_second>:

// Returns current second(0-59)
uint8_t ES2_second()
{
	return es_timeDate[0];
}
 8003bd8:	4b01      	ldr	r3, [pc, #4]	; (8003be0 <ES2_second+0x8>)
 8003bda:	7818      	ldrb	r0, [r3, #0]
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	20000430 	.word	0x20000430

08003be4 <ES2_minute>:

// Returns current minute (0-59)
uint8_t ES2_minute()
{
	return es_timeDate[1];
}
 8003be4:	4b01      	ldr	r3, [pc, #4]	; (8003bec <ES2_minute+0x8>)
 8003be6:	7858      	ldrb	r0, [r3, #1]
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	20000430 	.word	0x20000430

08003bf0 <ES2_hour>:

// Returns current hour (0-23)
uint8_t ES2_hour()
{
	return es_timeDate[2];
}
 8003bf0:	4b01      	ldr	r3, [pc, #4]	; (8003bf8 <ES2_hour+0x8>)
 8003bf2:	7898      	ldrb	r0, [r3, #2]
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	20000430 	.word	0x20000430

08003bfc <ES2_dayOfMonth>:

// Returns current day of the month (1-31)
uint8_t ES2_dayOfMonth()
{
	return es_timeDate[3];
}
 8003bfc:	4b01      	ldr	r3, [pc, #4]	; (8003c04 <ES2_dayOfMonth+0x8>)
 8003bfe:	78d8      	ldrb	r0, [r3, #3]
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	20000430 	.word	0x20000430

08003c08 <ES2_month>:

// Returns current month (1-12)
uint8_t ES2_month()
{
	return es_timeDate[5];
}
 8003c08:	4b01      	ldr	r3, [pc, #4]	; (8003c10 <ES2_month+0x8>)
 8003c0a:	7958      	ldrb	r0, [r3, #5]
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	20000430 	.word	0x20000430

08003c14 <ES2_year>:

// Returns current year (00-99)
uint8_t ES2_year()
{
	return es_timeDate[6];
}
 8003c14:	4b01      	ldr	r3, [pc, #4]	; (8003c1c <ES2_year+0x8>)
 8003c16:	7998      	ldrb	r0, [r3, #6]
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	20000430 	.word	0x20000430

08003c20 <ES2_clearAlarms>:

// Clears any active RTC alarms
void ES2_clearAlarms()
{
 8003c20:	b500      	push	{lr}
 8003c22:	b087      	sub	sp, #28
	uint8_t tmp[5];

	for(int i = 0; i < 5; i++)
 8003c24:	2300      	movs	r3, #0
 8003c26:	e005      	b.n	8003c34 <ES2_clearAlarms+0x14>
		tmp[i] = 0xff;
 8003c28:	aa06      	add	r2, sp, #24
 8003c2a:	441a      	add	r2, r3
 8003c2c:	21ff      	movs	r1, #255	; 0xff
 8003c2e:	f802 1c08 	strb.w	r1, [r2, #-8]
	for(int i = 0; i < 5; i++)
 8003c32:	3301      	adds	r3, #1
 8003c34:	2b04      	cmp	r3, #4
 8003c36:	ddf7      	ble.n	8003c28 <ES2_clearAlarms+0x8>

	//HAL_Delay(15);
	HAL_I2C_Mem_Write(&hi2c3, RTC_SLAVE_ADDR << 1, 0x0B, I2C_MEMADD_SIZE_8BIT, tmp, 5, 100);
 8003c38:	2364      	movs	r3, #100	; 0x64
 8003c3a:	9302      	str	r3, [sp, #8]
 8003c3c:	2305      	movs	r3, #5
 8003c3e:	9301      	str	r3, [sp, #4]
 8003c40:	ab04      	add	r3, sp, #16
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	2301      	movs	r3, #1
 8003c46:	220b      	movs	r2, #11
 8003c48:	21a2      	movs	r1, #162	; 0xa2
 8003c4a:	4803      	ldr	r0, [pc, #12]	; (8003c58 <ES2_clearAlarms+0x38>)
 8003c4c:	f7fe fa34 	bl	80020b8 <HAL_I2C_Mem_Write>

	return;
}
 8003c50:	b007      	add	sp, #28
 8003c52:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c56:	bf00      	nop
 8003c58:	20000314 	.word	0x20000314

08003c5c <ES2_readVMPP>:
	}
}

// Read the current VMPP setting from DAC
int ES2_readVMPP()
{
 8003c5c:	b500      	push	{lr}
 8003c5e:	b085      	sub	sp, #20
	uint8_t data[2];
	do
	{
		HAL_I2C_Master_Receive(&hi2c3, DAC_SLAVE_ADDR<<1, data, 2, 100);
 8003c60:	2364      	movs	r3, #100	; 0x64
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	2302      	movs	r3, #2
 8003c66:	aa03      	add	r2, sp, #12
 8003c68:	21c0      	movs	r1, #192	; 0xc0
 8003c6a:	480e      	ldr	r0, [pc, #56]	; (8003ca4 <ES2_readVMPP+0x48>)
 8003c6c:	f7fe f98e 	bl	8001f8c <HAL_I2C_Master_Receive>
	} while (!(data[0] & 0b10000000));
 8003c70:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8003c74:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003c78:	d0f2      	beq.n	8003c60 <ES2_readVMPP+0x4>

	if (data[0] & 0b00000110)
 8003c7a:	f013 0f06 	tst.w	r3, #6
 8003c7e:	d10d      	bne.n	8003c9c <ES2_readVMPP+0x40>
	{
		return -1;
	}
	else
	{
		return ((unsigned long) (357 - (int)(data[1])) << 16) / 984;
 8003c80:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8003c84:	f5c3 73b2 	rsb	r3, r3, #356	; 0x164
 8003c88:	3301      	adds	r3, #1
 8003c8a:	0418      	lsls	r0, r3, #16
 8003c8c:	08c0      	lsrs	r0, r0, #3
 8003c8e:	4b06      	ldr	r3, [pc, #24]	; (8003ca8 <ES2_readVMPP+0x4c>)
 8003c90:	fba3 3000 	umull	r3, r0, r3, r0
 8003c94:	0900      	lsrs	r0, r0, #4
	}
}
 8003c96:	b005      	add	sp, #20
 8003c98:	f85d fb04 	ldr.w	pc, [sp], #4
		return -1;
 8003c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca0:	e7f9      	b.n	8003c96 <ES2_readVMPP+0x3a>
 8003ca2:	bf00      	nop
 8003ca4:	20000314 	.word	0x20000314
 8003ca8:	214d0215 	.word	0x214d0215

08003cac <ES2_setVMPP>:

// Set regulated MPP voltage of solar panel and writes to EEPROM
void ES2_setVMPP(int MPP_Voltage_mV, uint8_t writeEEPROM)
{
 8003cac:	b530      	push	{r4, r5, lr}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	4604      	mov	r4, r0
 8003cb2:	460d      	mov	r5, r1
	uint8_t DAC_setting, Control, Hbyte, Lbyte, data[2];
	uint8_t tmp[3];

	do
	{
		HAL_I2C_Master_Receive(&hi2c3, DAC_SLAVE_ADDR<<1, data, 2, 100);
 8003cb4:	2364      	movs	r3, #100	; 0x64
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	2302      	movs	r3, #2
 8003cba:	aa03      	add	r2, sp, #12
 8003cbc:	21c0      	movs	r1, #192	; 0xc0
 8003cbe:	481c      	ldr	r0, [pc, #112]	; (8003d30 <ES2_setVMPP+0x84>)
 8003cc0:	f7fe f964 	bl	8001f8c <HAL_I2C_Master_Receive>
	} while (!(data[0] & 0b10000000));
 8003cc4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8003cc8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003ccc:	d0f2      	beq.n	8003cb4 <ES2_setVMPP+0x8>


	// Check to see if regulation is already disabled
	if ((MPP_Voltage_mV <= 0) && (data[0] & 0b00000110))
 8003cce:	2c00      	cmp	r4, #0
 8003cd0:	dd21      	ble.n	8003d16 <ES2_setVMPP+0x6a>
		return;

	// Calculates the required DAC voltage to bias the feedback 
	DAC_setting = 357 - ((unsigned long) 984 * MPP_Voltage_mV >> 16);
 8003cd2:	f44f 7376 	mov.w	r3, #984	; 0x3d8
 8003cd6:	fb03 f304 	mul.w	r3, r3, r4
 8003cda:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8003cde:	f1c3 0365 	rsb	r3, r3, #101	; 0x65
 8003ce2:	b2db      	uxtb	r3, r3

	if (data[1] != DAC_setting)
 8003ce4:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d012      	beq.n	8003d12 <ES2_setVMPP+0x66>
	{
		if (MPP_Voltage_mV > 0)
 8003cec:	2c00      	cmp	r4, #0
 8003cee:	dd16      	ble.n	8003d1e <ES2_setVMPP+0x72>
		{
			// Formats data for transmission
			Control = writeEEPROM ? 0x70 : 0x50;
 8003cf0:	b1cd      	cbz	r5, 8003d26 <ES2_setVMPP+0x7a>
 8003cf2:	2270      	movs	r2, #112	; 0x70
			// Sets DAC to high impedance, low power state
			Control = writeEEPROM ? 0x76 : 0x56;
			Hbyte = 0x00;
			Lbyte = 0x00;
		}
		tmp[0] = Control;
 8003cf4:	f88d 2008 	strb.w	r2, [sp, #8]
		tmp[1] = Hbyte;
 8003cf8:	f88d 3009 	strb.w	r3, [sp, #9]
		tmp[2] = Lbyte;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	f88d 300a 	strb.w	r3, [sp, #10]

		// Write value to DAC
		HAL_I2C_Master_Transmit(&hi2c3, DAC_SLAVE_ADDR<<1, tmp, 3, 100);
 8003d02:	2364      	movs	r3, #100	; 0x64
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	2303      	movs	r3, #3
 8003d08:	aa02      	add	r2, sp, #8
 8003d0a:	21c0      	movs	r1, #192	; 0xc0
 8003d0c:	4808      	ldr	r0, [pc, #32]	; (8003d30 <ES2_setVMPP+0x84>)
 8003d0e:	f7fe f8a9 	bl	8001e64 <HAL_I2C_Master_Transmit>
	}

	return;
}
 8003d12:	b005      	add	sp, #20
 8003d14:	bd30      	pop	{r4, r5, pc}
	if ((MPP_Voltage_mV <= 0) && (data[0] & 0b00000110))
 8003d16:	f013 0f06 	tst.w	r3, #6
 8003d1a:	d0da      	beq.n	8003cd2 <ES2_setVMPP+0x26>
 8003d1c:	e7f9      	b.n	8003d12 <ES2_setVMPP+0x66>
			Control = writeEEPROM ? 0x76 : 0x56;
 8003d1e:	b125      	cbz	r5, 8003d2a <ES2_setVMPP+0x7e>
			Hbyte = 0x00;
 8003d20:	2300      	movs	r3, #0
			Control = writeEEPROM ? 0x76 : 0x56;
 8003d22:	2276      	movs	r2, #118	; 0x76
 8003d24:	e7e6      	b.n	8003cf4 <ES2_setVMPP+0x48>
			Control = writeEEPROM ? 0x70 : 0x50;
 8003d26:	2250      	movs	r2, #80	; 0x50
 8003d28:	e7e4      	b.n	8003cf4 <ES2_setVMPP+0x48>
			Hbyte = 0x00;
 8003d2a:	462b      	mov	r3, r5
			Control = writeEEPROM ? 0x76 : 0x56;
 8003d2c:	2256      	movs	r2, #86	; 0x56
 8003d2e:	e7e1      	b.n	8003cf4 <ES2_setVMPP+0x48>
 8003d30:	20000314 	.word	0x20000314

08003d34 <ES2_batteryVoltage>:

// Returns battery voltage from fuel gauge in mV
uint16_t ES2_batteryVoltage()
{
 8003d34:	b508      	push	{r3, lr}
	uint16_t voltage = ES2_readCommand(FG_SLAVE_ADDR, 0x04);
 8003d36:	2104      	movs	r1, #4
 8003d38:	2055      	movs	r0, #85	; 0x55
 8003d3a:	f7ff fd45 	bl	80037c8 <ES2_readCommand>
	return voltage;
}
 8003d3e:	bd08      	pop	{r3, pc}

08003d40 <ES2_batteryCurrent>:

// Returns 1 second average of current from fuel gauge in mA
int16_t ES2_batteryCurrent()
{
 8003d40:	b508      	push	{r3, lr}
	int16_t current = ES2_readCommand(FG_SLAVE_ADDR, 0x10);
 8003d42:	2110      	movs	r1, #16
 8003d44:	2055      	movs	r0, #85	; 0x55
 8003d46:	f7ff fd3f 	bl	80037c8 <ES2_readCommand>
	return current;
}
 8003d4a:	b200      	sxth	r0, r0
 8003d4c:	bd08      	pop	{r3, pc}

08003d4e <ES2_temperature>:

// Returns temperature from fuel gauge in tenths of a degree Celsius (0.1 C)
int16_t ES2_temperature()
{
 8003d4e:	b508      	push	{r3, lr}
	int16_t temp = ES2_readCommand(FG_SLAVE_ADDR, 0x02);
 8003d50:	2102      	movs	r1, #2
 8003d52:	2055      	movs	r0, #85	; 0x55
 8003d54:	f7ff fd38 	bl	80037c8 <ES2_readCommand>
	temp -= 2732;
 8003d58:	f6a0 20ac 	subw	r0, r0, #2732	; 0xaac
	return temp;
}
 8003d5c:	b200      	sxth	r0, r0
 8003d5e:	bd08      	pop	{r3, pc}

08003d60 <ES2_SOC>:

// Returns state-of-charge from fuel gauge in percent of full charge (1%)
uint16_t ES2_SOC()
{
 8003d60:	b508      	push	{r3, lr}
	uint16_t SOC = ES2_readCommand(FG_SLAVE_ADDR, 0x1C);
 8003d62:	211c      	movs	r1, #28
 8003d64:	2055      	movs	r0, #85	; 0x55
 8003d66:	f7ff fd2f 	bl	80037c8 <ES2_readCommand>
	return SOC;
}
 8003d6a:	bd08      	pop	{r3, pc}

08003d6c <ES2_fullChargeCapacity>:

// Returns full-charge capacity from fuel gauge in mAh
uint16_t ES2_fullChargeCapacity()
{
 8003d6c:	b508      	push	{r3, lr}
	uint16_t fullChargeCapacity = ES2_readCommand(FG_SLAVE_ADDR, 0x0E);
 8003d6e:	210e      	movs	r1, #14
 8003d70:	2055      	movs	r0, #85	; 0x55
 8003d72:	f7ff fd29 	bl	80037c8 <ES2_readCommand>
	return fullChargeCapacity;
}
 8003d76:	bd08      	pop	{r3, pc}

08003d78 <ES2_remainingCapacity>:

// Returns remaining capacity from fuel gauge in mAh
uint16_t ES2_remainingCapacity()
{
 8003d78:	b508      	push	{r3, lr}
	uint16_t remainingCapacity = ES2_readCommand(FG_SLAVE_ADDR, 0x0C);
 8003d7a:	210c      	movs	r1, #12
 8003d7c:	2055      	movs	r0, #85	; 0x55
 8003d7e:	f7ff fd23 	bl	80037c8 <ES2_readCommand>
	return remainingCapacity;
}
 8003d82:	bd08      	pop	{r3, pc}

08003d84 <ES2_inputVoltage>:
// Returns solar/adapter input voltage in mV
uint16_t ES2_inputVoltage(uint8_t analogChannel)
{
	uint16_t voltage = 0;

	if (analogChannel == 0) 			// PA0 is configured ADC1_IN5
 8003d84:	b108      	cbz	r0, 8003d8a <ES2_inputVoltage+0x6>
	uint16_t voltage = 0;
 8003d86:	2000      	movs	r0, #0
 8003d88:	4770      	bx	lr
{
 8003d8a:	b538      	push	{r3, r4, r5, lr}
	{
		HAL_ADC_Start(&hadc1);
 8003d8c:	480d      	ldr	r0, [pc, #52]	; (8003dc4 <ES2_inputVoltage+0x40>)
 8003d8e:	f7fd fc69 	bl	8001664 <HAL_ADC_Start>
		for (int ix = 0; ix < 4; ix++)
 8003d92:	2500      	movs	r5, #0
	uint16_t voltage = 0;
 8003d94:	462c      	mov	r4, r5
		for (int ix = 0; ix < 4; ix++)
 8003d96:	e000      	b.n	8003d9a <ES2_inputVoltage+0x16>
 8003d98:	3501      	adds	r5, #1
 8003d9a:	2d03      	cmp	r5, #3
 8003d9c:	dc0c      	bgt.n	8003db8 <ES2_inputVoltage+0x34>
		{
			if (HAL_ADC_PollForConversion(&hadc1, 4000) == HAL_OK)
 8003d9e:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8003da2:	4808      	ldr	r0, [pc, #32]	; (8003dc4 <ES2_inputVoltage+0x40>)
 8003da4:	f7fd f9c8 	bl	8001138 <HAL_ADC_PollForConversion>
 8003da8:	2800      	cmp	r0, #0
 8003daa:	d1f5      	bne.n	8003d98 <ES2_inputVoltage+0x14>
			{
				voltage += HAL_ADC_GetValue(&hadc1);
 8003dac:	4805      	ldr	r0, [pc, #20]	; (8003dc4 <ES2_inputVoltage+0x40>)
 8003dae:	f7fd fa3b 	bl	8001228 <HAL_ADC_GetValue>
 8003db2:	4404      	add	r4, r0
 8003db4:	b2a4      	uxth	r4, r4
 8003db6:	e7ef      	b.n	8003d98 <ES2_inputVoltage+0x14>
			}
		}
		voltage = (unsigned long) (voltage / 4) * 5;
 8003db8:	08a0      	lsrs	r0, r4, #2
 8003dba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003dbe:	b280      	uxth	r0, r0
 8003dc0:	bd38      	pop	{r3, r4, r5, pc}
 8003dc2:	bf00      	nop
 8003dc4:	200002b0 	.word	0x200002b0

08003dc8 <ES2_begin>:
	return voltage;
}

// Set up energyShield 2 for use
int ES2_begin()
{
 8003dc8:	b510      	push	{r4, lr}
 8003dca:	b082      	sub	sp, #8
	int error = 0;

	es_batteryCapacity = BATTERY_CAPACITY;
 8003dcc:	4c0d      	ldr	r4, [pc, #52]	; (8003e04 <ES2_begin+0x3c>)
 8003dce:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8003dd2:	8023      	strh	r3, [r4, #0]


	// Setup RTC
	ES2_writeByte(RTC_SLAVE_ADDR, 0x00, 0x49); // Normal Mode, Run (Not Stop), No Reset, No Correction, 24-Hour, 12.5pF
 8003dd4:	2249      	movs	r2, #73	; 0x49
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	2051      	movs	r0, #81	; 0x51
 8003dda:	f7ff fca7 	bl	800372c <ES2_writeByte>
	ES2_writeByte(RTC_SLAVE_ADDR, 0x01, 0xC7); // Alarm Interrupt Enabled, Leave Alarm Flag Unchanged, Disable MI, HMI, and TF, No CLKOUT
 8003dde:	22c7      	movs	r2, #199	; 0xc7
 8003de0:	2101      	movs	r1, #1
 8003de2:	2051      	movs	r0, #81	; 0x51
 8003de4:	f7ff fca2 	bl	800372c <ES2_writeByte>
	ES2_clearAlarms();
 8003de8:	f7ff ff1a 	bl	8003c20 <ES2_clearAlarms>

	// Setup Fuel Gauge	
	error |= ES2_setupFuelGauge(FG_SLAVE_ADDR, es_batteryCapacity, BATTERY_TERMVOLT_MV, BATTERY_TERMCUR_MA, ALARM_SOC); // Write correct RAM values
 8003dec:	8821      	ldrh	r1, [r4, #0]
 8003dee:	230a      	movs	r3, #10
 8003df0:	9300      	str	r3, [sp, #0]
 8003df2:	2341      	movs	r3, #65	; 0x41
 8003df4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003df8:	2055      	movs	r0, #85	; 0x55
 8003dfa:	f7ff fd28 	bl	800384e <ES2_setupFuelGauge>

	return error;
}
 8003dfe:	b002      	add	sp, #8
 8003e00:	bd10      	pop	{r4, pc}
 8003e02:	bf00      	nop
 8003e04:	20000438 	.word	0x20000438

08003e08 <BMP_ReadBytes>:

bool BMP_ReadBytes(I2C_HandleTypeDef *pI2C, byte registerAddress, byte *values, int8_t length)
// Read an array of bytes from device
// values: external array to hold data. Put starting register in values[0].
// length: number of bytes to read
{
 8003e08:	b570      	push	{r4, r5, r6, lr}
 8003e0a:	b0c4      	sub	sp, #272	; 0x110
 8003e0c:	461c      	mov	r4, r3
	byte buf[255];

	_error = HAL_I2C_Mem_Read(pI2C, BMP180_ADDR << 1, registerAddress, I2C_MEMADD_SIZE_8BIT, buf, length, 500);
 8003e0e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003e12:	9302      	str	r3, [sp, #8]
 8003e14:	ad04      	add	r5, sp, #16
 8003e16:	b2a3      	uxth	r3, r4
 8003e18:	9301      	str	r3, [sp, #4]
{
 8003e1a:	4616      	mov	r6, r2
	_error = HAL_I2C_Mem_Read(pI2C, BMP180_ADDR << 1, registerAddress, I2C_MEMADD_SIZE_8BIT, buf, length, 500);
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	460a      	mov	r2, r1
 8003e20:	9500      	str	r5, [sp, #0]
 8003e22:	21ee      	movs	r1, #238	; 0xee
 8003e24:	f7fe fa00 	bl	8002228 <HAL_I2C_Mem_Read>
 8003e28:	4b06      	ldr	r3, [pc, #24]	; (8003e44 <BMP_ReadBytes+0x3c>)
 8003e2a:	7018      	strb	r0, [r3, #0]

	if (_error == HAL_OK)
 8003e2c:	b940      	cbnz	r0, 8003e40 <BMP_ReadBytes+0x38>
	{
		for(int ix = 0; ix < length; ix++)
 8003e2e:	42a0      	cmp	r0, r4
 8003e30:	db02      	blt.n	8003e38 <BMP_ReadBytes+0x30>
		{
			values[ix] = buf[ix];
		}
		return true;
 8003e32:	2001      	movs	r0, #1
	}
	return false;
}
 8003e34:	b044      	add	sp, #272	; 0x110
 8003e36:	bd70      	pop	{r4, r5, r6, pc}
			values[ix] = buf[ix];
 8003e38:	5c2b      	ldrb	r3, [r5, r0]
 8003e3a:	5433      	strb	r3, [r6, r0]
		for(int ix = 0; ix < length; ix++)
 8003e3c:	3001      	adds	r0, #1
 8003e3e:	e7f6      	b.n	8003e2e <BMP_ReadBytes+0x26>
	return false;
 8003e40:	2000      	movs	r0, #0
 8003e42:	e7f7      	b.n	8003e34 <BMP_ReadBytes+0x2c>
 8003e44:	20000290 	.word	0x20000290

08003e48 <BMP_ReadInt>:

bool BMP_ReadInt(I2C_HandleTypeDef *pI2C, char registerAddress, int16_t *value)
// Read a signed integer (two bytes) from device
// address: register to start reading (plus subsequent register)
// value: external variable to store data (function modifies value)
{
 8003e48:	b530      	push	{r4, r5, lr}
 8003e4a:	b087      	sub	sp, #28
	uint8_t buf[2];

	_error = HAL_I2C_Mem_Read(pI2C, BMP180_ADDR << 1, registerAddress, I2C_MEMADD_SIZE_8BIT, buf, 2, 100);
 8003e4c:	2364      	movs	r3, #100	; 0x64
 8003e4e:	9302      	str	r3, [sp, #8]
 8003e50:	2302      	movs	r3, #2
 8003e52:	9301      	str	r3, [sp, #4]
 8003e54:	ab05      	add	r3, sp, #20
 8003e56:	9300      	str	r3, [sp, #0]
{
 8003e58:	4615      	mov	r5, r2
	_error = HAL_I2C_Mem_Read(pI2C, BMP180_ADDR << 1, registerAddress, I2C_MEMADD_SIZE_8BIT, buf, 2, 100);
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	460a      	mov	r2, r1
 8003e5e:	21ee      	movs	r1, #238	; 0xee
 8003e60:	f7fe f9e2 	bl	8002228 <HAL_I2C_Mem_Read>
 8003e64:	4c09      	ldr	r4, [pc, #36]	; (8003e8c <BMP_ReadInt+0x44>)
 8003e66:	7020      	strb	r0, [r4, #0]

	HAL_Delay(1);
 8003e68:	2001      	movs	r0, #1
 8003e6a:	f7fd f85d 	bl	8000f28 <HAL_Delay>

	if(_error == HAL_OK)
 8003e6e:	7823      	ldrb	r3, [r4, #0]
 8003e70:	b94b      	cbnz	r3, 8003e86 <BMP_ReadInt+0x3e>
	{
		*value = (int16_t)((buf[0]<<8) | buf[1]);
 8003e72:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8003e76:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8003e7a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003e7e:	802b      	strh	r3, [r5, #0]
		return true;
 8003e80:	2001      	movs	r0, #1
	}
	return false;
}
 8003e82:	b007      	add	sp, #28
 8003e84:	bd30      	pop	{r4, r5, pc}
	return false;
 8003e86:	2000      	movs	r0, #0
 8003e88:	e7fb      	b.n	8003e82 <BMP_ReadInt+0x3a>
 8003e8a:	bf00      	nop
 8003e8c:	20000290 	.word	0x20000290

08003e90 <BMP_ReadUInt>:

bool BMP_ReadUInt(I2C_HandleTypeDef *pI2C, char registerAddress, uint16_t *value)
// Read an unsigned integer (two bytes) from device
// address: register to start reading (plus subsequent register)
// value: external variable to store data (function modifies value)
{
 8003e90:	b530      	push	{r4, r5, lr}
 8003e92:	b087      	sub	sp, #28
	uint8_t buf[2];

	_error= HAL_I2C_Mem_Read(pI2C, BMP180_ADDR << 1, registerAddress, I2C_MEMADD_SIZE_8BIT, buf, 2, 100);
 8003e94:	2364      	movs	r3, #100	; 0x64
 8003e96:	9302      	str	r3, [sp, #8]
 8003e98:	2302      	movs	r3, #2
 8003e9a:	9301      	str	r3, [sp, #4]
 8003e9c:	ab05      	add	r3, sp, #20
 8003e9e:	9300      	str	r3, [sp, #0]
{
 8003ea0:	4615      	mov	r5, r2
	_error= HAL_I2C_Mem_Read(pI2C, BMP180_ADDR << 1, registerAddress, I2C_MEMADD_SIZE_8BIT, buf, 2, 100);
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	460a      	mov	r2, r1
 8003ea6:	21ee      	movs	r1, #238	; 0xee
 8003ea8:	f7fe f9be 	bl	8002228 <HAL_I2C_Mem_Read>
 8003eac:	4c09      	ldr	r4, [pc, #36]	; (8003ed4 <BMP_ReadUInt+0x44>)
 8003eae:	7020      	strb	r0, [r4, #0]

	HAL_Delay(1);
 8003eb0:	2001      	movs	r0, #1
 8003eb2:	f7fd f839 	bl	8000f28 <HAL_Delay>

	if(_error == HAL_OK)
 8003eb6:	7823      	ldrb	r3, [r4, #0]
 8003eb8:	b94b      	cbnz	r3, 8003ece <BMP_ReadUInt+0x3e>
	{
		*value = (int16_t)((buf[0]<<8) | buf[1]);
 8003eba:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8003ebe:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8003ec2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003ec6:	802b      	strh	r3, [r5, #0]
		return true;
 8003ec8:	2001      	movs	r0, #1
	}
	return false;
}
 8003eca:	b007      	add	sp, #28
 8003ecc:	bd30      	pop	{r4, r5, pc}
	return false;
 8003ece:	2000      	movs	r0, #0
 8003ed0:	e7fb      	b.n	8003eca <BMP_ReadUInt+0x3a>
 8003ed2:	bf00      	nop
 8003ed4:	20000290 	.word	0x20000290

08003ed8 <BMP_WriteBytes>:
bool BMP_WriteBytes(I2C_HandleTypeDef *pI2C, char registerAddress, byte *values, uint8_t length)
// Write an array of bytes to device
// registerAddress: register to start writing
// values: external array of data to write. Put starting register in values[0].
// length: number of bytes to write
{
 8003ed8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	_error= HAL_I2C_Mem_Write(pI2C, BMP180_ADDR << 1, registerAddress, I2C_MEMADD_SIZE_8BIT, values, length, 500);
 8003eda:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
 8003ede:	e88d 001c 	stmia.w	sp, {r2, r3, r4}
 8003ee2:	460a      	mov	r2, r1
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	21ee      	movs	r1, #238	; 0xee
 8003ee8:	f7fe f8e6 	bl	80020b8 <HAL_I2C_Mem_Write>
 8003eec:	4b03      	ldr	r3, [pc, #12]	; (8003efc <BMP_WriteBytes+0x24>)
 8003eee:	7018      	strb	r0, [r3, #0]

	if (_error == HAL_OK)
		return true;
	else
		return false;
}
 8003ef0:	fab0 f080 	clz	r0, r0
 8003ef4:	0940      	lsrs	r0, r0, #5
 8003ef6:	b004      	add	sp, #16
 8003ef8:	bd10      	pop	{r4, pc}
 8003efa:	bf00      	nop
 8003efc:	20000290 	.word	0x20000290

08003f00 <BMP_Begin>:

/***************************************************************************************************************/

bool BMP_Begin(I2C_HandleTypeDef *pI2C)
// Initialize library for subsequent pressure measurements
{
 8003f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Each device has different numbers, these must be retrieved and
	// used in the calculations when taking pressure measurements.

	// Retrieve calibration data from device:
	
	if (BMP_ReadInt(pI2C,  0xAA, &AC1) &&
 8003f04:	4a05      	ldr	r2, [pc, #20]	; (8003f1c <BMP_Begin+0x1c>)
{
 8003f06:	b089      	sub	sp, #36	; 0x24
	if (BMP_ReadInt(pI2C,  0xAA, &AC1) &&
 8003f08:	21aa      	movs	r1, #170	; 0xaa
{
 8003f0a:	4605      	mov	r5, r0
	if (BMP_ReadInt(pI2C,  0xAA, &AC1) &&
 8003f0c:	f7ff ff9c 	bl	8003e48 <BMP_ReadInt>
 8003f10:	b930      	cbnz	r0, 8003f20 <BMP_Begin+0x20>
		return true;
	}
	else
	{
		// Error reading calibration data; bad component or connection?
		return false;
 8003f12:	2000      	movs	r0, #0
	}
}
 8003f14:	b009      	add	sp, #36	; 0x24
 8003f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f1a:	bf00      	nop
 8003f1c:	20000218 	.word	0x20000218
		BMP_ReadInt(pI2C,  0xAC, &AC2) &&
 8003f20:	4ab5      	ldr	r2, [pc, #724]	; (80041f8 <BMP_Begin+0x2f8>)
 8003f22:	21ac      	movs	r1, #172	; 0xac
 8003f24:	4628      	mov	r0, r5
 8003f26:	f7ff ff8f 	bl	8003e48 <BMP_ReadInt>
	if (BMP_ReadInt(pI2C,  0xAA, &AC1) &&
 8003f2a:	2800      	cmp	r0, #0
 8003f2c:	d0f1      	beq.n	8003f12 <BMP_Begin+0x12>
		BMP_ReadInt(pI2C,  0xAE, &AC3) &&
 8003f2e:	4ab3      	ldr	r2, [pc, #716]	; (80041fc <BMP_Begin+0x2fc>)
 8003f30:	21ae      	movs	r1, #174	; 0xae
 8003f32:	4628      	mov	r0, r5
 8003f34:	f7ff ff88 	bl	8003e48 <BMP_ReadInt>
		BMP_ReadInt(pI2C,  0xAC, &AC2) &&
 8003f38:	2800      	cmp	r0, #0
 8003f3a:	d0ea      	beq.n	8003f12 <BMP_Begin+0x12>
		BMP_ReadUInt(pI2C, 0xB0, &AC4) &&
 8003f3c:	4ab0      	ldr	r2, [pc, #704]	; (8004200 <BMP_Begin+0x300>)
 8003f3e:	21b0      	movs	r1, #176	; 0xb0
 8003f40:	4628      	mov	r0, r5
 8003f42:	f7ff ffa5 	bl	8003e90 <BMP_ReadUInt>
		BMP_ReadInt(pI2C,  0xAE, &AC3) &&
 8003f46:	2800      	cmp	r0, #0
 8003f48:	d0e3      	beq.n	8003f12 <BMP_Begin+0x12>
		BMP_ReadUInt(pI2C, 0xB2, &AC5) &&
 8003f4a:	4aae      	ldr	r2, [pc, #696]	; (8004204 <BMP_Begin+0x304>)
 8003f4c:	21b2      	movs	r1, #178	; 0xb2
 8003f4e:	4628      	mov	r0, r5
 8003f50:	f7ff ff9e 	bl	8003e90 <BMP_ReadUInt>
		BMP_ReadUInt(pI2C, 0xB0, &AC4) &&
 8003f54:	2800      	cmp	r0, #0
 8003f56:	d0dc      	beq.n	8003f12 <BMP_Begin+0x12>
		BMP_ReadUInt(pI2C, 0xB4, &AC6) &&
 8003f58:	4aab      	ldr	r2, [pc, #684]	; (8004208 <BMP_Begin+0x308>)
 8003f5a:	21b4      	movs	r1, #180	; 0xb4
 8003f5c:	4628      	mov	r0, r5
 8003f5e:	f7ff ff97 	bl	8003e90 <BMP_ReadUInt>
		BMP_ReadUInt(pI2C, 0xB2, &AC5) &&
 8003f62:	2800      	cmp	r0, #0
 8003f64:	d0d5      	beq.n	8003f12 <BMP_Begin+0x12>
		BMP_ReadInt(pI2C,  0xB6, &VB1) &&
 8003f66:	4aa9      	ldr	r2, [pc, #676]	; (800420c <BMP_Begin+0x30c>)
 8003f68:	21b6      	movs	r1, #182	; 0xb6
 8003f6a:	4628      	mov	r0, r5
 8003f6c:	f7ff ff6c 	bl	8003e48 <BMP_ReadInt>
		BMP_ReadUInt(pI2C, 0xB4, &AC6) &&
 8003f70:	2800      	cmp	r0, #0
 8003f72:	d0ce      	beq.n	8003f12 <BMP_Begin+0x12>
		BMP_ReadInt(pI2C,  0xB8, &VB2) &&
 8003f74:	4aa6      	ldr	r2, [pc, #664]	; (8004210 <BMP_Begin+0x310>)
 8003f76:	21b8      	movs	r1, #184	; 0xb8
 8003f78:	4628      	mov	r0, r5
 8003f7a:	f7ff ff65 	bl	8003e48 <BMP_ReadInt>
		BMP_ReadInt(pI2C,  0xB6, &VB1) &&
 8003f7e:	2800      	cmp	r0, #0
 8003f80:	d0c7      	beq.n	8003f12 <BMP_Begin+0x12>
		BMP_ReadInt(pI2C,  0xBA, &MB) &&
 8003f82:	4aa4      	ldr	r2, [pc, #656]	; (8004214 <BMP_Begin+0x314>)
 8003f84:	21ba      	movs	r1, #186	; 0xba
 8003f86:	4628      	mov	r0, r5
 8003f88:	f7ff ff5e 	bl	8003e48 <BMP_ReadInt>
		BMP_ReadInt(pI2C,  0xB8, &VB2) &&
 8003f8c:	2800      	cmp	r0, #0
 8003f8e:	d0c0      	beq.n	8003f12 <BMP_Begin+0x12>
		BMP_ReadInt(pI2C,  0xBC, &MC) &&
 8003f90:	4aa1      	ldr	r2, [pc, #644]	; (8004218 <BMP_Begin+0x318>)
 8003f92:	21bc      	movs	r1, #188	; 0xbc
 8003f94:	4628      	mov	r0, r5
 8003f96:	f7ff ff57 	bl	8003e48 <BMP_ReadInt>
		BMP_ReadInt(pI2C,  0xBA, &MB) &&
 8003f9a:	2800      	cmp	r0, #0
 8003f9c:	d0b9      	beq.n	8003f12 <BMP_Begin+0x12>
		BMP_ReadInt(pI2C,  0xBE, &MD))
 8003f9e:	4c9f      	ldr	r4, [pc, #636]	; (800421c <BMP_Begin+0x31c>)
 8003fa0:	21be      	movs	r1, #190	; 0xbe
 8003fa2:	4622      	mov	r2, r4
 8003fa4:	4628      	mov	r0, r5
 8003fa6:	f7ff ff4f 	bl	8003e48 <BMP_ReadInt>
		BMP_ReadInt(pI2C,  0xBC, &MC) &&
 8003faa:	2800      	cmp	r0, #0
 8003fac:	d0b1      	beq.n	8003f12 <BMP_Begin+0x12>
		printf("BMP180: AC1=%d \n", AC1);
 8003fae:	4e9c      	ldr	r6, [pc, #624]	; (8004220 <BMP_Begin+0x320>)
		printf("BMP180: AC2=%d \n", AC2);
 8003fb0:	4d91      	ldr	r5, [pc, #580]	; (80041f8 <BMP_Begin+0x2f8>)
		printf("BMP180: AC1=%d \n", AC1);
 8003fb2:	f9b6 1000 	ldrsh.w	r1, [r6]
 8003fb6:	489b      	ldr	r0, [pc, #620]	; (8004224 <BMP_Begin+0x324>)
		printf("BMP180: AC4=%d \n", AC4);
 8003fb8:	f8df b244 	ldr.w	fp, [pc, #580]	; 8004200 <BMP_Begin+0x300>
		printf("BMP180: AC5=%d \n", AC5);
 8003fbc:	f8df 9244 	ldr.w	r9, [pc, #580]	; 8004204 <BMP_Begin+0x304>
		printf("BMP180: AC6=%d \n", AC6);
 8003fc0:	f8df 8244 	ldr.w	r8, [pc, #580]	; 8004208 <BMP_Begin+0x308>
		printf("BMP180: VB1=%d \n", VB1);
 8003fc4:	f8df a244 	ldr.w	sl, [pc, #580]	; 800420c <BMP_Begin+0x30c>
		printf("BMP180: MC=%d \n", MC);
 8003fc8:	4f93      	ldr	r7, [pc, #588]	; (8004218 <BMP_Begin+0x318>)
		printf("BMP180: AC1=%d \n", AC1);
 8003fca:	f001 fb21 	bl	8005610 <iprintf>
		printf("BMP180: AC2=%d \n", AC2);
 8003fce:	f9b5 1000 	ldrsh.w	r1, [r5]
 8003fd2:	4895      	ldr	r0, [pc, #596]	; (8004228 <BMP_Begin+0x328>)
 8003fd4:	f001 fb1c 	bl	8005610 <iprintf>
		printf("BMP180: AC3=%d \n", AC3);
 8003fd8:	4b88      	ldr	r3, [pc, #544]	; (80041fc <BMP_Begin+0x2fc>)
 8003fda:	4894      	ldr	r0, [pc, #592]	; (800422c <BMP_Begin+0x32c>)
 8003fdc:	f9b3 1000 	ldrsh.w	r1, [r3]
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	f001 fb15 	bl	8005610 <iprintf>
		printf("BMP180: AC4=%d \n", AC4);
 8003fe6:	f8bb 1000 	ldrh.w	r1, [fp]
 8003fea:	4891      	ldr	r0, [pc, #580]	; (8004230 <BMP_Begin+0x330>)
 8003fec:	f001 fb10 	bl	8005610 <iprintf>
		printf("BMP180: AC5=%d \n", AC5);
 8003ff0:	f8b9 1000 	ldrh.w	r1, [r9]
 8003ff4:	488f      	ldr	r0, [pc, #572]	; (8004234 <BMP_Begin+0x334>)
 8003ff6:	f001 fb0b 	bl	8005610 <iprintf>
		printf("BMP180: AC6=%d \n", AC6);
 8003ffa:	f8b8 1000 	ldrh.w	r1, [r8]
 8003ffe:	488e      	ldr	r0, [pc, #568]	; (8004238 <BMP_Begin+0x338>)
 8004000:	f001 fb06 	bl	8005610 <iprintf>
		printf("BMP180: VB1=%d \n", VB1);
 8004004:	f9ba 1000 	ldrsh.w	r1, [sl]
 8004008:	488c      	ldr	r0, [pc, #560]	; (800423c <BMP_Begin+0x33c>)
 800400a:	f001 fb01 	bl	8005610 <iprintf>
		printf("BMP180: VB2=%d \n", VB2);
 800400e:	4b80      	ldr	r3, [pc, #512]	; (8004210 <BMP_Begin+0x310>)
 8004010:	488b      	ldr	r0, [pc, #556]	; (8004240 <BMP_Begin+0x340>)
 8004012:	f9b3 1000 	ldrsh.w	r1, [r3]
 8004016:	f001 fafb 	bl	8005610 <iprintf>
		printf("BMP180: MB=%d \n", MB);
 800401a:	4a7e      	ldr	r2, [pc, #504]	; (8004214 <BMP_Begin+0x314>)
 800401c:	4889      	ldr	r0, [pc, #548]	; (8004244 <BMP_Begin+0x344>)
 800401e:	f9b2 1000 	ldrsh.w	r1, [r2]
 8004022:	f001 faf5 	bl	8005610 <iprintf>
		printf("BMP180: MC=%d \n", MC);
 8004026:	f9b7 1000 	ldrsh.w	r1, [r7]
 800402a:	4887      	ldr	r0, [pc, #540]	; (8004248 <BMP_Begin+0x348>)
 800402c:	f001 faf0 	bl	8005610 <iprintf>
		printf("BMP180: MD=%d \n", MD);
 8004030:	f9b4 1000 	ldrsh.w	r1, [r4]
 8004034:	4885      	ldr	r0, [pc, #532]	; (800424c <BMP_Begin+0x34c>)
 8004036:	f001 faeb 	bl	8005610 <iprintf>
		c3 = 160.0 * pow(2,-15) * AC3;
 800403a:	9b00      	ldr	r3, [sp, #0]
 800403c:	f9b3 0000 	ldrsh.w	r0, [r3]
 8004040:	f7fc fa70 	bl	8000524 <__aeabi_i2d>
 8004044:	2200      	movs	r2, #0
 8004046:	4b82      	ldr	r3, [pc, #520]	; (8004250 <BMP_Begin+0x350>)
 8004048:	f7fc fad2 	bl	80005f0 <__aeabi_dmul>
 800404c:	e9cd 0102 	strd	r0, r1, [sp, #8]
		c4 = pow(10,-3) * pow(2,-15) * AC4;
 8004050:	f8bb 0000 	ldrh.w	r0, [fp]
		bmpY0 = c4 * pow(2,15);
 8004054:	f8df b254 	ldr.w	fp, [pc, #596]	; 80042ac <BMP_Begin+0x3ac>
		c4 = pow(10,-3) * pow(2,-15) * AC4;
 8004058:	f7fc fa64 	bl	8000524 <__aeabi_i2d>
 800405c:	a35a      	add	r3, pc, #360	; (adr r3, 80041c8 <BMP_Begin+0x2c8>)
 800405e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004062:	f7fc fac5 	bl	80005f0 <__aeabi_dmul>
 8004066:	e9cd 0100 	strd	r0, r1, [sp]
		b1 = pow(160,2) * pow(2,-30) * VB1;
 800406a:	f9ba 0000 	ldrsh.w	r0, [sl]
		x2 = pow(160,2) * pow(2,-25) * VB2;
 800406e:	f8df a240 	ldr.w	sl, [pc, #576]	; 80042b0 <BMP_Begin+0x3b0>
		b1 = pow(160,2) * pow(2,-30) * VB1;
 8004072:	f7fc fa57 	bl	8000524 <__aeabi_i2d>
 8004076:	2200      	movs	r2, #0
 8004078:	4b76      	ldr	r3, [pc, #472]	; (8004254 <BMP_Begin+0x354>)
 800407a:	f7fc fab9 	bl	80005f0 <__aeabi_dmul>
 800407e:	e9cd 0104 	strd	r0, r1, [sp, #16]
		c5 = (pow(2,-15) / 160) * AC5;
 8004082:	f8b9 0000 	ldrh.w	r0, [r9]
		x1 = 160.0 * pow(2,-13) * AC2;
 8004086:	f8df 922c 	ldr.w	r9, [pc, #556]	; 80042b4 <BMP_Begin+0x3b4>
		c5 = (pow(2,-15) / 160) * AC5;
 800408a:	f7fc fa4b 	bl	8000524 <__aeabi_i2d>
 800408e:	a350      	add	r3, pc, #320	; (adr r3, 80041d0 <BMP_Begin+0x2d0>)
 8004090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004094:	f7fc faac 	bl	80005f0 <__aeabi_dmul>
 8004098:	4b6f      	ldr	r3, [pc, #444]	; (8004258 <BMP_Begin+0x358>)
 800409a:	e9c3 0100 	strd	r0, r1, [r3]
		c6 = AC6;
 800409e:	f8b8 0000 	ldrh.w	r0, [r8]
		x0 = AC1;
 80040a2:	f8df 8214 	ldr.w	r8, [pc, #532]	; 80042b8 <BMP_Begin+0x3b8>
		c6 = AC6;
 80040a6:	f7fc fa2d 	bl	8000504 <__aeabi_ui2d>
 80040aa:	4b6c      	ldr	r3, [pc, #432]	; (800425c <BMP_Begin+0x35c>)
 80040ac:	e9c3 0100 	strd	r0, r1, [r3]
		mc = (pow(2,11) / pow(160,2)) * MC;
 80040b0:	f9b7 0000 	ldrsh.w	r0, [r7]
		bmpY1 = c4 * c3;
 80040b4:	4f6a      	ldr	r7, [pc, #424]	; (8004260 <BMP_Begin+0x360>)
		mc = (pow(2,11) / pow(160,2)) * MC;
 80040b6:	f7fc fa35 	bl	8000524 <__aeabi_i2d>
 80040ba:	a347      	add	r3, pc, #284	; (adr r3, 80041d8 <BMP_Begin+0x2d8>)
 80040bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c0:	f7fc fa96 	bl	80005f0 <__aeabi_dmul>
 80040c4:	4b67      	ldr	r3, [pc, #412]	; (8004264 <BMP_Begin+0x364>)
 80040c6:	e9c3 0100 	strd	r0, r1, [r3]
		md = MD / 160.0;
 80040ca:	f9b4 0000 	ldrsh.w	r0, [r4]
		bmpP2 = 3038.0 * 100.0 * pow(2,-36);
 80040ce:	4c66      	ldr	r4, [pc, #408]	; (8004268 <BMP_Begin+0x368>)
		md = MD / 160.0;
 80040d0:	f7fc fa28 	bl	8000524 <__aeabi_i2d>
 80040d4:	2200      	movs	r2, #0
 80040d6:	4b65      	ldr	r3, [pc, #404]	; (800426c <BMP_Begin+0x36c>)
 80040d8:	f7fc fbb4 	bl	8000844 <__aeabi_ddiv>
 80040dc:	4b64      	ldr	r3, [pc, #400]	; (8004270 <BMP_Begin+0x370>)
 80040de:	e9c3 0100 	strd	r0, r1, [r3]
		x0 = AC1;
 80040e2:	f9b6 0000 	ldrsh.w	r0, [r6]
		bmpY2 = c4 * b1;
 80040e6:	4e63      	ldr	r6, [pc, #396]	; (8004274 <BMP_Begin+0x374>)
		x0 = AC1;
 80040e8:	f7fc fa1c 	bl	8000524 <__aeabi_i2d>
 80040ec:	e9c8 0100 	strd	r0, r1, [r8]
		x1 = 160.0 * pow(2,-13) * AC2;
 80040f0:	f9b5 0000 	ldrsh.w	r0, [r5]
		bmpP1 = 1.0 - 7357.0 * pow(2,-20);
 80040f4:	4d60      	ldr	r5, [pc, #384]	; (8004278 <BMP_Begin+0x378>)
		x1 = 160.0 * pow(2,-13) * AC2;
 80040f6:	f7fc fa15 	bl	8000524 <__aeabi_i2d>
 80040fa:	2200      	movs	r2, #0
 80040fc:	4b5f      	ldr	r3, [pc, #380]	; (800427c <BMP_Begin+0x37c>)
 80040fe:	f7fc fa77 	bl	80005f0 <__aeabi_dmul>
		x2 = pow(160,2) * pow(2,-25) * VB2;
 8004102:	4b43      	ldr	r3, [pc, #268]	; (8004210 <BMP_Begin+0x310>)
		x1 = 160.0 * pow(2,-13) * AC2;
 8004104:	e9c9 0100 	strd	r0, r1, [r9]
		x2 = pow(160,2) * pow(2,-25) * VB2;
 8004108:	f9b3 0000 	ldrsh.w	r0, [r3]
 800410c:	f7fc fa0a 	bl	8000524 <__aeabi_i2d>
 8004110:	2200      	movs	r2, #0
 8004112:	4b5b      	ldr	r3, [pc, #364]	; (8004280 <BMP_Begin+0x380>)
 8004114:	f7fc fa6c 	bl	80005f0 <__aeabi_dmul>
		bmpY0 = c4 * pow(2,15);
 8004118:	2200      	movs	r2, #0
		x2 = pow(160,2) * pow(2,-25) * VB2;
 800411a:	e9ca 0100 	strd	r0, r1, [sl]
		bmpY0 = c4 * pow(2,15);
 800411e:	4b59      	ldr	r3, [pc, #356]	; (8004284 <BMP_Begin+0x384>)
 8004120:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004124:	f7fc fa64 	bl	80005f0 <__aeabi_dmul>
 8004128:	e9cb 0100 	strd	r0, r1, [fp]
		bmpY1 = c4 * c3;
 800412c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004130:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004134:	f7fc fa5c 	bl	80005f0 <__aeabi_dmul>
		bmpY2 = c4 * b1;
 8004138:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		bmpY1 = c4 * c3;
 800413c:	e9c7 0100 	strd	r0, r1, [r7]
		bmpY2 = c4 * b1;
 8004140:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004144:	f7fc fa54 	bl	80005f0 <__aeabi_dmul>
		bmpP0 = (3791.0 - 8.0) / 1600.0;
 8004148:	a325      	add	r3, pc, #148	; (adr r3, 80041e0 <BMP_Begin+0x2e0>)
 800414a:	e9d3 2300 	ldrd	r2, r3, [r3]
		bmpY2 = c4 * b1;
 800414e:	e9c6 0100 	strd	r0, r1, [r6]
		bmpP0 = (3791.0 - 8.0) / 1600.0;
 8004152:	494d      	ldr	r1, [pc, #308]	; (8004288 <BMP_Begin+0x388>)
		printf("BMP180: c3=%f\n", c3);
 8004154:	484d      	ldr	r0, [pc, #308]	; (800428c <BMP_Begin+0x38c>)
		bmpP0 = (3791.0 - 8.0) / 1600.0;
 8004156:	9107      	str	r1, [sp, #28]
 8004158:	e9c1 2300 	strd	r2, r3, [r1]
		bmpP1 = 1.0 - 7357.0 * pow(2,-20);
 800415c:	a322      	add	r3, pc, #136	; (adr r3, 80041e8 <BMP_Begin+0x2e8>)
 800415e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004162:	e9c5 2300 	strd	r2, r3, [r5]
		bmpP2 = 3038.0 * 100.0 * pow(2,-36);
 8004166:	a322      	add	r3, pc, #136	; (adr r3, 80041f0 <BMP_Begin+0x2f0>)
 8004168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416c:	e9c4 2300 	strd	r2, r3, [r4]
		printf("BMP180: c3=%f\n", c3);
 8004170:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004174:	f001 fa4c 	bl	8005610 <iprintf>
		printf("BMP180: c4=%f\n", c4);
 8004178:	e9dd 2300 	ldrd	r2, r3, [sp]
 800417c:	4844      	ldr	r0, [pc, #272]	; (8004290 <BMP_Begin+0x390>)
 800417e:	f001 fa47 	bl	8005610 <iprintf>
		printf("BMP180: c5=%f\n", c5);
 8004182:	4b35      	ldr	r3, [pc, #212]	; (8004258 <BMP_Begin+0x358>)
 8004184:	4843      	ldr	r0, [pc, #268]	; (8004294 <BMP_Begin+0x394>)
 8004186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418a:	f001 fa41 	bl	8005610 <iprintf>
		printf("BMP180: c6=%f\n", c6);
 800418e:	4b33      	ldr	r3, [pc, #204]	; (800425c <BMP_Begin+0x35c>)
 8004190:	4841      	ldr	r0, [pc, #260]	; (8004298 <BMP_Begin+0x398>)
 8004192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004196:	f001 fa3b 	bl	8005610 <iprintf>
		printf("BMP180: b1=%f\n", b1);
 800419a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800419e:	483f      	ldr	r0, [pc, #252]	; (800429c <BMP_Begin+0x39c>)
 80041a0:	f001 fa36 	bl	8005610 <iprintf>
		printf("BMP180: mc=%f\n", mc);
 80041a4:	4b2f      	ldr	r3, [pc, #188]	; (8004264 <BMP_Begin+0x364>)
 80041a6:	483e      	ldr	r0, [pc, #248]	; (80042a0 <BMP_Begin+0x3a0>)
 80041a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ac:	f001 fa30 	bl	8005610 <iprintf>
		printf("BMP180: md=%f\n", md);
 80041b0:	4b2f      	ldr	r3, [pc, #188]	; (8004270 <BMP_Begin+0x370>)
 80041b2:	483c      	ldr	r0, [pc, #240]	; (80042a4 <BMP_Begin+0x3a4>)
 80041b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b8:	f001 fa2a 	bl	8005610 <iprintf>
		printf("BMP180: x0=%f\n", x0);
 80041bc:	e9d8 2300 	ldrd	r2, r3, [r8]
 80041c0:	4839      	ldr	r0, [pc, #228]	; (80042a8 <BMP_Begin+0x3a8>)
 80041c2:	f001 fa25 	bl	8005610 <iprintf>
 80041c6:	e079      	b.n	80042bc <BMP_Begin+0x3bc>
 80041c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80041cc:	3e60624d 	.word	0x3e60624d
 80041d0:	9999999a 	.word	0x9999999a
 80041d4:	3e899999 	.word	0x3e899999
 80041d8:	47ae147b 	.word	0x47ae147b
 80041dc:	3fb47ae1 	.word	0x3fb47ae1
 80041e0:	70a3d70a 	.word	0x70a3d70a
 80041e4:	4002ea3d 	.word	0x4002ea3d
 80041e8:	00000000 	.word	0x00000000
 80041ec:	3fefc686 	.word	0x3fefc686
 80041f0:	00000000 	.word	0x00000000
 80041f4:	3ed28ae0 	.word	0x3ed28ae0
 80041f8:	20000278 	.word	0x20000278
 80041fc:	2000027a 	.word	0x2000027a
 8004200:	20000268 	.word	0x20000268
 8004204:	20000228 	.word	0x20000228
 8004208:	2000021a 	.word	0x2000021a
 800420c:	20000292 	.word	0x20000292
 8004210:	20000238 	.word	0x20000238
 8004214:	2000026a 	.word	0x2000026a
 8004218:	200002a0 	.word	0x200002a0
 800421c:	20000208 	.word	0x20000208
 8004220:	20000218 	.word	0x20000218
 8004224:	080074b9 	.word	0x080074b9
 8004228:	080074ca 	.word	0x080074ca
 800422c:	080074db 	.word	0x080074db
 8004230:	080074ec 	.word	0x080074ec
 8004234:	080074fd 	.word	0x080074fd
 8004238:	0800750e 	.word	0x0800750e
 800423c:	0800751f 	.word	0x0800751f
 8004240:	08007530 	.word	0x08007530
 8004244:	08007541 	.word	0x08007541
 8004248:	08007551 	.word	0x08007551
 800424c:	08007561 	.word	0x08007561
 8004250:	3f740000 	.word	0x3f740000
 8004254:	3ef90000 	.word	0x3ef90000
 8004258:	20000260 	.word	0x20000260
 800425c:	20000210 	.word	0x20000210
 8004260:	20000220 	.word	0x20000220
 8004264:	20000270 	.word	0x20000270
 8004268:	20000230 	.word	0x20000230
 800426c:	40640000 	.word	0x40640000
 8004270:	20000258 	.word	0x20000258
 8004274:	20000280 	.word	0x20000280
 8004278:	20000298 	.word	0x20000298
 800427c:	3f940000 	.word	0x3f940000
 8004280:	3f490000 	.word	0x3f490000
 8004284:	40e00000 	.word	0x40e00000
 8004288:	20000250 	.word	0x20000250
 800428c:	08007571 	.word	0x08007571
 8004290:	08007580 	.word	0x08007580
 8004294:	0800758f 	.word	0x0800758f
 8004298:	0800759e 	.word	0x0800759e
 800429c:	080075ad 	.word	0x080075ad
 80042a0:	080075bc 	.word	0x080075bc
 80042a4:	080075cb 	.word	0x080075cb
 80042a8:	080075da 	.word	0x080075da
 80042ac:	200002a8 	.word	0x200002a8
 80042b0:	20000240 	.word	0x20000240
 80042b4:	20000288 	.word	0x20000288
 80042b8:	20000248 	.word	0x20000248
		printf("BMP180: x1=%f\n", x1);
 80042bc:	e9d9 2300 	ldrd	r2, r3, [r9]
 80042c0:	4814      	ldr	r0, [pc, #80]	; (8004314 <BMP_Begin+0x414>)
 80042c2:	f001 f9a5 	bl	8005610 <iprintf>
		printf("BMP180: x2=%f\n", x2);
 80042c6:	e9da 2300 	ldrd	r2, r3, [sl]
 80042ca:	4813      	ldr	r0, [pc, #76]	; (8004318 <BMP_Begin+0x418>)
 80042cc:	f001 f9a0 	bl	8005610 <iprintf>
		printf("BMP180: bmpY0=%f\n", bmpY0);
 80042d0:	e9db 2300 	ldrd	r2, r3, [fp]
 80042d4:	4811      	ldr	r0, [pc, #68]	; (800431c <BMP_Begin+0x41c>)
 80042d6:	f001 f99b 	bl	8005610 <iprintf>
		printf("BMP180: bmpY1=%f\n", bmpY1);
 80042da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042de:	4810      	ldr	r0, [pc, #64]	; (8004320 <BMP_Begin+0x420>)
 80042e0:	f001 f996 	bl	8005610 <iprintf>
		printf("BMP180: bmpY2=%f\n", bmpY2);
 80042e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80042e8:	480e      	ldr	r0, [pc, #56]	; (8004324 <BMP_Begin+0x424>)
 80042ea:	f001 f991 	bl	8005610 <iprintf>
		printf("BMP180: bmpP0=%f\n", bmpP0);
 80042ee:	9907      	ldr	r1, [sp, #28]
 80042f0:	480d      	ldr	r0, [pc, #52]	; (8004328 <BMP_Begin+0x428>)
 80042f2:	e9d1 2300 	ldrd	r2, r3, [r1]
 80042f6:	f001 f98b 	bl	8005610 <iprintf>
		printf("BMP180: bmpP1=%f\n", bmpP1);
 80042fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80042fe:	480b      	ldr	r0, [pc, #44]	; (800432c <BMP_Begin+0x42c>)
 8004300:	f001 f986 	bl	8005610 <iprintf>
		printf("BMP180: bmpP2=%f\n", bmpP2);
 8004304:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004308:	4809      	ldr	r0, [pc, #36]	; (8004330 <BMP_Begin+0x430>)
 800430a:	f001 f981 	bl	8005610 <iprintf>
		return true;
 800430e:	2001      	movs	r0, #1
 8004310:	e600      	b.n	8003f14 <BMP_Begin+0x14>
 8004312:	bf00      	nop
 8004314:	080075e9 	.word	0x080075e9
 8004318:	080075f8 	.word	0x080075f8
 800431c:	08007607 	.word	0x08007607
 8004320:	08007619 	.word	0x08007619
 8004324:	0800762b 	.word	0x0800762b
 8004328:	0800763d 	.word	0x0800763d
 800432c:	0800764f 	.word	0x0800764f
 8004330:	08007661 	.word	0x08007661

08004334 <BMP_StartTemperature>:
/***************************************************************************************************************/
int8_t BMP_StartTemperature(I2C_HandleTypeDef *pI2C)
// Begin a temperature reading.
// Will return delay in ms to wait, or 0 if I2C error
{
 8004334:	b507      	push	{r0, r1, r2, lr}
	byte data[1];
	bool result;

	data[0] = BMP180_COMMAND_TEMPERATURE;
 8004336:	aa02      	add	r2, sp, #8
 8004338:	232e      	movs	r3, #46	; 0x2e
 800433a:	f802 3d04 	strb.w	r3, [r2, #-4]!

	result = BMP_WriteBytes(pI2C, BMP180_REG_CONTROL, data, 1);
 800433e:	21f4      	movs	r1, #244	; 0xf4
 8004340:	2301      	movs	r3, #1
 8004342:	f7ff fdc9 	bl	8003ed8 <BMP_WriteBytes>
	
	if (result) // good write?
 8004346:	2800      	cmp	r0, #0
		return 5; // return the delay in ms (rounded up) to wait before retrieving data
	else
		return 0; // or return 0 if there was a problem communicating with the BMP
}
 8004348:	bf14      	ite	ne
 800434a:	2005      	movne	r0, #5
 800434c:	2000      	moveq	r0, #0
 800434e:	b003      	add	sp, #12
 8004350:	f85d fb04 	ldr.w	pc, [sp], #4

08004354 <BMP_GetTemperature>:
// Retrieve a previously-started temperature reading.
// Requires begin() to be called once prior to retrieve calibration parameters.
// Requires startTemperature() to have been called prior and sufficient time elapsed.
// T: external variable to hold result.
// Returns 1 if successful, 0 if I2C error.
{
 8004354:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	byte data[2];
	bool result;
	double tu, a;
	

	result = BMP_ReadBytes(pI2C, BMP180_REG_RESULT, data, 2);
 8004358:	2302      	movs	r3, #2
{
 800435a:	460d      	mov	r5, r1
	result = BMP_ReadBytes(pI2C, BMP180_REG_RESULT, data, 2);
 800435c:	aa01      	add	r2, sp, #4
 800435e:	21f6      	movs	r1, #246	; 0xf6
 8004360:	f7ff fd52 	bl	8003e08 <BMP_ReadBytes>

	if (result) // good read, calculate temperature
 8004364:	4604      	mov	r4, r0
 8004366:	2800      	cmp	r0, #0
 8004368:	d042      	beq.n	80043f0 <BMP_GetTemperature+0x9c>
	{
		tu = (data[0] * 256.0) + data[1];
 800436a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800436e:	f7fc f8d9 	bl	8000524 <__aeabi_i2d>
 8004372:	2200      	movs	r2, #0
 8004374:	4b20      	ldr	r3, [pc, #128]	; (80043f8 <BMP_GetTemperature+0xa4>)
 8004376:	f7fc f93b 	bl	80005f0 <__aeabi_dmul>
 800437a:	4606      	mov	r6, r0
 800437c:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8004380:	460f      	mov	r7, r1
 8004382:	f7fc f8cf 	bl	8000524 <__aeabi_i2d>
 8004386:	4602      	mov	r2, r0
 8004388:	460b      	mov	r3, r1
 800438a:	4630      	mov	r0, r6
 800438c:	4639      	mov	r1, r7
 800438e:	f7fb ff7d 	bl	800028c <__adddf3>
		//tu = 27898;

		//example from http://wmrx00.sourceforge.net/Arduino/BMP085-Calcs.pdf
		//tu = 0x69EC;
		
		a = c5 * (tu - c6);
 8004392:	4b1a      	ldr	r3, [pc, #104]	; (80043fc <BMP_GetTemperature+0xa8>)
 8004394:	e9d3 2300 	ldrd	r2, r3, [r3]
		tu = (data[0] * 256.0) + data[1];
 8004398:	4680      	mov	r8, r0
 800439a:	4689      	mov	r9, r1
		a = c5 * (tu - c6);
 800439c:	f7fb ff74 	bl	8000288 <__aeabi_dsub>
 80043a0:	4b17      	ldr	r3, [pc, #92]	; (8004400 <BMP_GetTemperature+0xac>)
 80043a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a6:	f7fc f923 	bl	80005f0 <__aeabi_dmul>
		*temperature = a + (mc / (a + md));
 80043aa:	4b16      	ldr	r3, [pc, #88]	; (8004404 <BMP_GetTemperature+0xb0>)
 80043ac:	e9d3 2300 	ldrd	r2, r3, [r3]
		a = c5 * (tu - c6);
 80043b0:	4606      	mov	r6, r0
 80043b2:	460f      	mov	r7, r1
		*temperature = a + (mc / (a + md));
 80043b4:	f7fb ff6a 	bl	800028c <__adddf3>
 80043b8:	460b      	mov	r3, r1
 80043ba:	4913      	ldr	r1, [pc, #76]	; (8004408 <BMP_GetTemperature+0xb4>)
 80043bc:	4602      	mov	r2, r0
 80043be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80043c2:	f7fc fa3f 	bl	8000844 <__aeabi_ddiv>
 80043c6:	4632      	mov	r2, r6
 80043c8:	463b      	mov	r3, r7
 80043ca:	f7fb ff5f 	bl	800028c <__adddf3>

		printf("BMP_GetTemperature: tu=%f\n", tu);
 80043ce:	4642      	mov	r2, r8
		*temperature = a + (mc / (a + md));
 80043d0:	e9c5 0100 	strd	r0, r1, [r5]
		printf("BMP_GetTemperature: tu=%f\n", tu);
 80043d4:	464b      	mov	r3, r9
 80043d6:	480d      	ldr	r0, [pc, #52]	; (800440c <BMP_GetTemperature+0xb8>)
 80043d8:	f001 f91a 	bl	8005610 <iprintf>
		printf("BMP_GetTemperature: a=%f\n", a);
 80043dc:	4632      	mov	r2, r6
 80043de:	463b      	mov	r3, r7
 80043e0:	480b      	ldr	r0, [pc, #44]	; (8004410 <BMP_GetTemperature+0xbc>)
 80043e2:	f001 f915 	bl	8005610 <iprintf>
		printf("BMP_GetTemperature: temperature=%f\n", *temperature);
 80043e6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80043ea:	480a      	ldr	r0, [pc, #40]	; (8004414 <BMP_GetTemperature+0xc0>)
 80043ec:	f001 f910 	bl	8005610 <iprintf>
	}

	return(result);
}
 80043f0:	4620      	mov	r0, r4
 80043f2:	b003      	add	sp, #12
 80043f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80043f8:	40700000 	.word	0x40700000
 80043fc:	20000210 	.word	0x20000210
 8004400:	20000260 	.word	0x20000260
 8004404:	20000258 	.word	0x20000258
 8004408:	20000270 	.word	0x20000270
 800440c:	08007673 	.word	0x08007673
 8004410:	0800768e 	.word	0x0800768e
 8004414:	080076a8 	.word	0x080076a8

08004418 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004418:	b510      	push	{r4, lr}
  ADC_MultiModeTypeDef multimode = {0};
 800441a:	2400      	movs	r4, #0
{
 800441c:	b08a      	sub	sp, #40	; 0x28
  ADC_ChannelConfTypeDef sConfig = {0};
 800441e:	2218      	movs	r2, #24
 8004420:	4621      	mov	r1, r4
 8004422:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 8004424:	9401      	str	r4, [sp, #4]
 8004426:	9402      	str	r4, [sp, #8]
 8004428:	9403      	str	r4, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 800442a:	f000 fc7d 	bl	8004d28 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 800442e:	481b      	ldr	r0, [pc, #108]	; (800449c <MX_ADC1_Init+0x84>)
 8004430:	4b1b      	ldr	r3, [pc, #108]	; (80044a0 <MX_ADC1_Init+0x88>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004432:	6084      	str	r4, [r0, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004434:	e880 0018 	stmia.w	r0, {r3, r4}
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004438:	2304      	movs	r3, #4
 800443a:	6143      	str	r3, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
 800443c:	2301      	movs	r3, #1
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800443e:	60c4      	str	r4, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004440:	6104      	str	r4, [r0, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004442:	7604      	strb	r4, [r0, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004444:	7643      	strb	r3, [r0, #25]
  hadc1.Init.NbrOfConversion = 1;
 8004446:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004448:	f880 4020 	strb.w	r4, [r0, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800444c:	6284      	str	r4, [r0, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800444e:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004450:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004454:	6344      	str	r4, [r0, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8004456:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800445a:	f7fc fd8d 	bl	8000f78 <HAL_ADC_Init>
 800445e:	b108      	cbz	r0, 8004464 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8004460:	f000 fb28 	bl	8004ab4 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004464:	a901      	add	r1, sp, #4
 8004466:	480d      	ldr	r0, [pc, #52]	; (800449c <MX_ADC1_Init+0x84>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004468:	9401      	str	r4, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800446a:	f7fd f975 	bl	8001758 <HAL_ADCEx_MultiModeConfigChannel>
 800446e:	b108      	cbz	r0, 8004474 <MX_ADC1_Init+0x5c>
  {
    Error_Handler();
 8004470:	f000 fb20 	bl	8004ab4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8004474:	4b0b      	ldr	r3, [pc, #44]	; (80044a4 <MX_ADC1_Init+0x8c>)
 8004476:	9304      	str	r3, [sp, #16]
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004478:	227f      	movs	r2, #127	; 0x7f
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800447a:	2306      	movs	r3, #6
 800447c:	9305      	str	r3, [sp, #20]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800447e:	9207      	str	r2, [sp, #28]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8004480:	2300      	movs	r3, #0
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004482:	2204      	movs	r2, #4
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004484:	a904      	add	r1, sp, #16
 8004486:	4805      	ldr	r0, [pc, #20]	; (800449c <MX_ADC1_Init+0x84>)
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8004488:	9306      	str	r3, [sp, #24]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800448a:	9208      	str	r2, [sp, #32]
  sConfig.Offset = 0;
 800448c:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800448e:	f7fc fecf 	bl	8001230 <HAL_ADC_ConfigChannel>
 8004492:	b108      	cbz	r0, 8004498 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8004494:	f000 fb0e 	bl	8004ab4 <Error_Handler>
  }

}
 8004498:	b00a      	add	sp, #40	; 0x28
 800449a:	bd10      	pop	{r4, pc}
 800449c:	200002b0 	.word	0x200002b0
 80044a0:	50040000 	.word	0x50040000
 80044a4:	14f00020 	.word	0x14f00020

080044a8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80044a8:	b510      	push	{r4, lr}
 80044aa:	4604      	mov	r4, r0
 80044ac:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044ae:	2214      	movs	r2, #20
 80044b0:	2100      	movs	r1, #0
 80044b2:	a803      	add	r0, sp, #12
 80044b4:	f000 fc38 	bl	8004d28 <memset>
  if(adcHandle->Instance==ADC1)
 80044b8:	6822      	ldr	r2, [r4, #0]
 80044ba:	4b12      	ldr	r3, [pc, #72]	; (8004504 <HAL_ADC_MspInit+0x5c>)
 80044bc:	429a      	cmp	r2, r3
 80044be:	d11e      	bne.n	80044fe <HAL_ADC_MspInit+0x56>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80044c0:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 80044c4:	f5a3 33f8 	sub.w	r3, r3, #126976	; 0x1f000
    PA0     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044c8:	a903      	add	r1, sp, #12
    __HAL_RCC_ADC_CLK_ENABLE();
 80044ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044d0:	64da      	str	r2, [r3, #76]	; 0x4c
 80044d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044d4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80044d8:	9201      	str	r2, [sp, #4]
 80044da:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044de:	f042 0201 	orr.w	r2, r2, #1
 80044e2:	64da      	str	r2, [r3, #76]	; 0x4c
 80044e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	9302      	str	r3, [sp, #8]
 80044ec:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80044ee:	2301      	movs	r3, #1
 80044f0:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80044f6:	230b      	movs	r3, #11
 80044f8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044fa:	f7fd fa01 	bl	8001900 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80044fe:	b008      	add	sp, #32
 8004500:	bd10      	pop	{r4, pc}
 8004502:	bf00      	nop
 8004504:	50040000 	.word	0x50040000

08004508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004508:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800450a:	2214      	movs	r2, #20
{
 800450c:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800450e:	eb0d 0002 	add.w	r0, sp, r2
 8004512:	2100      	movs	r1, #0
 8004514:	f000 fc08 	bl	8004d28 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004518:	4b21      	ldr	r3, [pc, #132]	; (80045a0 <MX_GPIO_Init+0x98>)
 800451a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800451c:	f042 0204 	orr.w	r2, r2, #4
 8004520:	64da      	str	r2, [r3, #76]	; 0x4c
 8004522:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004524:	f002 0204 	and.w	r2, r2, #4
 8004528:	9201      	str	r2, [sp, #4]
 800452a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800452c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800452e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004532:	64da      	str	r2, [r3, #76]	; 0x4c
 8004534:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004536:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800453a:	9202      	str	r2, [sp, #8]
 800453c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800453e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004540:	f042 0201 	orr.w	r2, r2, #1
 8004544:	64da      	str	r2, [r3, #76]	; 0x4c
 8004546:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004548:	f002 0201 	and.w	r2, r2, #1
 800454c:	9203      	str	r2, [sp, #12]
 800454e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004550:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004552:	f042 0202 	orr.w	r2, r2, #2
 8004556:	64da      	str	r2, [r3, #76]	; 0x4c
 8004558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800455a:	f003 0302 	and.w	r3, r3, #2

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800455e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004560:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004562:	2120      	movs	r1, #32
 8004564:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004568:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800456a:	f7fd faa5 	bl	8001ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800456e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004572:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = B1_Pin;
 8004574:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004576:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004578:	4b0a      	ldr	r3, [pc, #40]	; (80045a4 <MX_GPIO_Init+0x9c>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800457a:	480b      	ldr	r0, [pc, #44]	; (80045a8 <MX_GPIO_Init+0xa0>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800457c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800457e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004580:	f7fd f9be 	bl	8001900 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8004584:	2320      	movs	r3, #32
 8004586:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004588:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800458a:	2301      	movs	r3, #1
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800458c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004590:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004592:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004594:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004596:	f7fd f9b3 	bl	8001900 <HAL_GPIO_Init>

}
 800459a:	b00a      	add	sp, #40	; 0x28
 800459c:	bd10      	pop	{r4, pc}
 800459e:	bf00      	nop
 80045a0:	40021000 	.word	0x40021000
 80045a4:	10210000 	.word	0x10210000
 80045a8:	48000800 	.word	0x48000800

080045ac <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80045ac:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 80045ae:	4812      	ldr	r0, [pc, #72]	; (80045f8 <MX_I2C1_Init+0x4c>)
  hi2c1.Init.Timing = 0x10909CEC;
 80045b0:	4b12      	ldr	r3, [pc, #72]	; (80045fc <MX_I2C1_Init+0x50>)
 80045b2:	4913      	ldr	r1, [pc, #76]	; (8004600 <MX_I2C1_Init+0x54>)
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80045b4:	2201      	movs	r2, #1
  hi2c1.Init.Timing = 0x10909CEC;
 80045b6:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c1.Init.OwnAddress1 = 0;
 80045ba:	2300      	movs	r3, #0
 80045bc:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80045be:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80045c0:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80045c2:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80045c4:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80045c6:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80045c8:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80045ca:	f7fd fbf9 	bl	8001dc0 <HAL_I2C_Init>
 80045ce:	b108      	cbz	r0, 80045d4 <MX_I2C1_Init+0x28>
  {
    Error_Handler();
 80045d0:	f000 fa70 	bl	8004ab4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80045d4:	2100      	movs	r1, #0
 80045d6:	4808      	ldr	r0, [pc, #32]	; (80045f8 <MX_I2C1_Init+0x4c>)
 80045d8:	f7fd fee4 	bl	80023a4 <HAL_I2CEx_ConfigAnalogFilter>
 80045dc:	b108      	cbz	r0, 80045e2 <MX_I2C1_Init+0x36>
  {
    Error_Handler();
 80045de:	f000 fa69 	bl	8004ab4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80045e2:	2100      	movs	r1, #0
 80045e4:	4804      	ldr	r0, [pc, #16]	; (80045f8 <MX_I2C1_Init+0x4c>)
 80045e6:	f7fd ff03 	bl	80023f0 <HAL_I2CEx_ConfigDigitalFilter>
 80045ea:	b118      	cbz	r0, 80045f4 <MX_I2C1_Init+0x48>
  {
    Error_Handler();
  }

}
 80045ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80045f0:	f000 ba60 	b.w	8004ab4 <Error_Handler>
 80045f4:	bd08      	pop	{r3, pc}
 80045f6:	bf00      	nop
 80045f8:	20000360 	.word	0x20000360
 80045fc:	10909cec 	.word	0x10909cec
 8004600:	40005400 	.word	0x40005400

08004604 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8004604:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 8004606:	4812      	ldr	r0, [pc, #72]	; (8004650 <MX_I2C2_Init+0x4c>)
  hi2c2.Init.Timing = 0x10909CEC;
 8004608:	4b12      	ldr	r3, [pc, #72]	; (8004654 <MX_I2C2_Init+0x50>)
 800460a:	4913      	ldr	r1, [pc, #76]	; (8004658 <MX_I2C2_Init+0x54>)
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800460c:	2201      	movs	r2, #1
  hi2c2.Init.Timing = 0x10909CEC;
 800460e:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c2.Init.OwnAddress1 = 0;
 8004612:	2300      	movs	r3, #0
 8004614:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004616:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004618:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800461a:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800461c:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800461e:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004620:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004622:	f7fd fbcd 	bl	8001dc0 <HAL_I2C_Init>
 8004626:	b108      	cbz	r0, 800462c <MX_I2C2_Init+0x28>
  {
    Error_Handler();
 8004628:	f000 fa44 	bl	8004ab4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800462c:	2100      	movs	r1, #0
 800462e:	4808      	ldr	r0, [pc, #32]	; (8004650 <MX_I2C2_Init+0x4c>)
 8004630:	f7fd feb8 	bl	80023a4 <HAL_I2CEx_ConfigAnalogFilter>
 8004634:	b108      	cbz	r0, 800463a <MX_I2C2_Init+0x36>
  {
    Error_Handler();
 8004636:	f000 fa3d 	bl	8004ab4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800463a:	2100      	movs	r1, #0
 800463c:	4804      	ldr	r0, [pc, #16]	; (8004650 <MX_I2C2_Init+0x4c>)
 800463e:	f7fd fed7 	bl	80023f0 <HAL_I2CEx_ConfigDigitalFilter>
 8004642:	b118      	cbz	r0, 800464c <MX_I2C2_Init+0x48>
  {
    Error_Handler();
  }

}
 8004644:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8004648:	f000 ba34 	b.w	8004ab4 <Error_Handler>
 800464c:	bd08      	pop	{r3, pc}
 800464e:	bf00      	nop
 8004650:	200003ac 	.word	0x200003ac
 8004654:	10909cec 	.word	0x10909cec
 8004658:	40005800 	.word	0x40005800

0800465c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800465c:	b508      	push	{r3, lr}

  hi2c3.Instance = I2C3;
 800465e:	4812      	ldr	r0, [pc, #72]	; (80046a8 <MX_I2C3_Init+0x4c>)
  hi2c3.Init.Timing = 0x10909CEC;
 8004660:	4b12      	ldr	r3, [pc, #72]	; (80046ac <MX_I2C3_Init+0x50>)
 8004662:	4913      	ldr	r1, [pc, #76]	; (80046b0 <MX_I2C3_Init+0x54>)
  hi2c3.Init.OwnAddress1 = 0;
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004664:	2201      	movs	r2, #1
  hi2c3.Init.Timing = 0x10909CEC;
 8004666:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c3.Init.OwnAddress1 = 0;
 800466a:	2300      	movs	r3, #0
 800466c:	6083      	str	r3, [r0, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800466e:	60c2      	str	r2, [r0, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004670:	6103      	str	r3, [r0, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8004672:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004674:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004676:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004678:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800467a:	f7fd fba1 	bl	8001dc0 <HAL_I2C_Init>
 800467e:	b108      	cbz	r0, 8004684 <MX_I2C3_Init+0x28>
  {
    Error_Handler();
 8004680:	f000 fa18 	bl	8004ab4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004684:	2100      	movs	r1, #0
 8004686:	4808      	ldr	r0, [pc, #32]	; (80046a8 <MX_I2C3_Init+0x4c>)
 8004688:	f7fd fe8c 	bl	80023a4 <HAL_I2CEx_ConfigAnalogFilter>
 800468c:	b108      	cbz	r0, 8004692 <MX_I2C3_Init+0x36>
  {
    Error_Handler();
 800468e:	f000 fa11 	bl	8004ab4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8004692:	2100      	movs	r1, #0
 8004694:	4804      	ldr	r0, [pc, #16]	; (80046a8 <MX_I2C3_Init+0x4c>)
 8004696:	f7fd feab 	bl	80023f0 <HAL_I2CEx_ConfigDigitalFilter>
 800469a:	b118      	cbz	r0, 80046a4 <MX_I2C3_Init+0x48>
  {
    Error_Handler();
  }

}
 800469c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80046a0:	f000 ba08 	b.w	8004ab4 <Error_Handler>
 80046a4:	bd08      	pop	{r3, pc}
 80046a6:	bf00      	nop
 80046a8:	20000314 	.word	0x20000314
 80046ac:	10909cec 	.word	0x10909cec
 80046b0:	40005c00 	.word	0x40005c00

080046b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80046b4:	b510      	push	{r4, lr}
 80046b6:	4604      	mov	r4, r0
 80046b8:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046ba:	2214      	movs	r2, #20
 80046bc:	2100      	movs	r1, #0
 80046be:	a807      	add	r0, sp, #28
 80046c0:	f000 fb32 	bl	8004d28 <memset>
  if(i2cHandle->Instance==I2C1)
 80046c4:	6823      	ldr	r3, [r4, #0]
 80046c6:	4a38      	ldr	r2, [pc, #224]	; (80047a8 <HAL_I2C_MspInit+0xf4>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d122      	bne.n	8004712 <HAL_I2C_MspInit+0x5e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046cc:	4c37      	ldr	r4, [pc, #220]	; (80047ac <HAL_I2C_MspInit+0xf8>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046ce:	4838      	ldr	r0, [pc, #224]	; (80047b0 <HAL_I2C_MspInit+0xfc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046d0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80046d2:	f043 0302 	orr.w	r3, r3, #2
 80046d6:	64e3      	str	r3, [r4, #76]	; 0x4c
 80046d8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	9301      	str	r3, [sp, #4]
 80046e0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80046e2:	23c0      	movs	r3, #192	; 0xc0
 80046e4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80046e6:	2312      	movs	r3, #18
 80046e8:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80046ea:	2301      	movs	r3, #1
 80046ec:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046ee:	2303      	movs	r3, #3
 80046f0:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046f2:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80046f4:	2304      	movs	r3, #4
 80046f6:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046f8:	f7fd f902 	bl	8001900 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80046fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80046fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004702:	65a3      	str	r3, [r4, #88]	; 0x58
 8004704:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004706:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800470a:	9302      	str	r3, [sp, #8]
 800470c:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800470e:	b00c      	add	sp, #48	; 0x30
 8004710:	bd10      	pop	{r4, pc}
  else if(i2cHandle->Instance==I2C2)
 8004712:	4a28      	ldr	r2, [pc, #160]	; (80047b4 <HAL_I2C_MspInit+0x100>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d122      	bne.n	800475e <HAL_I2C_MspInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004718:	4c24      	ldr	r4, [pc, #144]	; (80047ac <HAL_I2C_MspInit+0xf8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800471a:	4825      	ldr	r0, [pc, #148]	; (80047b0 <HAL_I2C_MspInit+0xfc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800471c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800471e:	f043 0302 	orr.w	r3, r3, #2
 8004722:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004724:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	9303      	str	r3, [sp, #12]
 800472c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800472e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004732:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004734:	2312      	movs	r3, #18
 8004736:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004738:	2301      	movs	r3, #1
 800473a:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800473c:	2303      	movs	r3, #3
 800473e:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004740:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004742:	2304      	movs	r3, #4
 8004744:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004746:	f7fd f8db 	bl	8001900 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800474a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800474c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004750:	65a3      	str	r3, [r4, #88]	; 0x58
 8004752:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004754:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004758:	9304      	str	r3, [sp, #16]
 800475a:	9b04      	ldr	r3, [sp, #16]
 800475c:	e7d7      	b.n	800470e <HAL_I2C_MspInit+0x5a>
  else if(i2cHandle->Instance==I2C3)
 800475e:	4a16      	ldr	r2, [pc, #88]	; (80047b8 <HAL_I2C_MspInit+0x104>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d1d4      	bne.n	800470e <HAL_I2C_MspInit+0x5a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004764:	4c11      	ldr	r4, [pc, #68]	; (80047ac <HAL_I2C_MspInit+0xf8>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004766:	4815      	ldr	r0, [pc, #84]	; (80047bc <HAL_I2C_MspInit+0x108>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004768:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800476a:	f043 0304 	orr.w	r3, r3, #4
 800476e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004770:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004772:	f003 0304 	and.w	r3, r3, #4
 8004776:	9305      	str	r3, [sp, #20]
 8004778:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800477a:	2212      	movs	r2, #18
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800477c:	2303      	movs	r3, #3
 800477e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004780:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004782:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004784:	2201      	movs	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004786:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004788:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800478a:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800478c:	9209      	str	r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800478e:	f7fd f8b7 	bl	8001900 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004792:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004794:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004798:	65a3      	str	r3, [r4, #88]	; 0x58
 800479a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800479c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047a0:	9306      	str	r3, [sp, #24]
 80047a2:	9b06      	ldr	r3, [sp, #24]
}
 80047a4:	e7b3      	b.n	800470e <HAL_I2C_MspInit+0x5a>
 80047a6:	bf00      	nop
 80047a8:	40005400 	.word	0x40005400
 80047ac:	40021000 	.word	0x40021000
 80047b0:	48000400 	.word	0x48000400
 80047b4:	40005800 	.word	0x40005800
 80047b8:	40005c00 	.word	0x40005c00
 80047bc:	48000800 	.word	0x48000800

080047c0 <MX_LPTIM1_Init>:

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{

  hlptim1.Instance = LPTIM1;
 80047c0:	480d      	ldr	r0, [pc, #52]	; (80047f8 <MX_LPTIM1_Init+0x38>)
{
 80047c2:	b508      	push	{r3, lr}
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_ULPTIM;
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80047c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
  hlptim1.Instance = LPTIM1;
 80047c8:	4b0c      	ldr	r3, [pc, #48]	; (80047fc <MX_LPTIM1_Init+0x3c>)
 80047ca:	6003      	str	r3, [r0, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_ULPTIM;
 80047cc:	2201      	movs	r2, #1
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80047ce:	2300      	movs	r3, #0
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80047d0:	6141      	str	r1, [r0, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 80047d2:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_ULPTIM;
 80047d6:	6042      	str	r2, [r0, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80047d8:	6083      	str	r3, [r0, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 80047da:	60c3      	str	r3, [r0, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 80047dc:	6103      	str	r3, [r0, #16]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80047de:	6203      	str	r3, [r0, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80047e0:	6243      	str	r3, [r0, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 80047e2:	6281      	str	r1, [r0, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_COMP1;
 80047e4:	62c2      	str	r2, [r0, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80047e6:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80047e8:	f7fd fe28 	bl	800243c <HAL_LPTIM_Init>
 80047ec:	b118      	cbz	r0, 80047f6 <MX_LPTIM1_Init+0x36>
  {
    Error_Handler();
  }

}
 80047ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80047f2:	f000 b95f 	b.w	8004ab4 <Error_Handler>
 80047f6:	bd08      	pop	{r3, pc}
 80047f8:	200003f8 	.word	0x200003f8
 80047fc:	40007c00 	.word	0x40007c00

08004800 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{

  if(lptimHandle->Instance==LPTIM1)
 8004800:	6802      	ldr	r2, [r0, #0]
 8004802:	4b08      	ldr	r3, [pc, #32]	; (8004824 <HAL_LPTIM_MspInit+0x24>)
 8004804:	429a      	cmp	r2, r3
{
 8004806:	b082      	sub	sp, #8
  if(lptimHandle->Instance==LPTIM1)
 8004808:	d10a      	bne.n	8004820 <HAL_LPTIM_MspInit+0x20>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800480a:	f503 33ca 	add.w	r3, r3, #103424	; 0x19400
 800480e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004810:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004814:	659a      	str	r2, [r3, #88]	; 0x58
 8004816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004818:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800481c:	9301      	str	r3, [sp, #4]
 800481e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 8004820:	b002      	add	sp, #8
 8004822:	4770      	bx	lr
 8004824:	40007c00 	.word	0x40007c00

08004828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800482a:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800482c:	2244      	movs	r2, #68	; 0x44
 800482e:	2100      	movs	r1, #0
 8004830:	a805      	add	r0, sp, #20
 8004832:	f000 fa79 	bl	8004d28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004836:	2214      	movs	r2, #20
 8004838:	2100      	movs	r1, #0
 800483a:	4668      	mov	r0, sp
 800483c:	f000 fa74 	bl	8004d28 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004840:	2288      	movs	r2, #136	; 0x88
 8004842:	2100      	movs	r1, #0
 8004844:	a816      	add	r0, sp, #88	; 0x58
 8004846:	f000 fa6f 	bl	8004d28 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800484a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800484e:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004850:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004852:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004854:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004856:	2701      	movs	r7, #1
  RCC_OscInitStruct.PLL.PLLN = 10;
 8004858:	230a      	movs	r3, #10
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800485a:	2607      	movs	r6, #7
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800485c:	a805      	add	r0, sp, #20
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800485e:	2500      	movs	r5, #0
  RCC_OscInitStruct.PLL.PLLN = 10;
 8004860:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004862:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004864:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004866:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004868:	9711      	str	r7, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800486a:	9613      	str	r6, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800486c:	9414      	str	r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800486e:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004870:	f7fd ff0a 	bl	8002688 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004874:	220f      	movs	r2, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004876:	2104      	movs	r1, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004878:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800487a:	4668      	mov	r0, sp
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800487c:	e88d 002c 	stmia.w	sp, {r2, r3, r5}
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004880:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004882:	9504      	str	r5, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004884:	f7fe f926 	bl	8002ad4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPTIM1
 8004888:	f244 33c2 	movw	r3, #17346	; 0x43c2
 800488c:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
  PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800488e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004892:	9334      	str	r3, [sp, #208]	; 0xd0
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8004894:	2308      	movs	r3, #8
 8004896:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004898:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800489a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800489e:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80048a0:	9525      	str	r5, [sp, #148]	; 0x94
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80048a2:	952a      	str	r5, [sp, #168]	; 0xa8
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80048a4:	952b      	str	r5, [sp, #172]	; 0xac
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80048a6:	952c      	str	r5, [sp, #176]	; 0xb0
  PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 80048a8:	952d      	str	r5, [sp, #180]	; 0xb4
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80048aa:	9417      	str	r4, [sp, #92]	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80048ac:	9718      	str	r7, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80048ae:	961a      	str	r6, [sp, #104]	; 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80048b0:	941b      	str	r4, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80048b2:	941c      	str	r4, [sp, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80048b4:	f7fe fad0 	bl	8002e58 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80048b8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80048bc:	f7fd fe18 	bl	80024f0 <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
}
 80048c0:	b039      	add	sp, #228	; 0xe4
 80048c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080048c4 <main>:
{
 80048c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048c8:	ed2d 8b04 	vpush	{d8-d9}
 80048cc:	b087      	sub	sp, #28
  HAL_Init();
 80048ce:	f7fc fb07 	bl	8000ee0 <HAL_Init>
  SystemClock_Config();
 80048d2:	f7ff ffa9 	bl	8004828 <SystemClock_Config>
  MX_GPIO_Init();
 80048d6:	f7ff fe17 	bl	8004508 <MX_GPIO_Init>
  MX_I2C1_Init();
 80048da:	f7ff fe67 	bl	80045ac <MX_I2C1_Init>
  MX_I2C2_Init();
 80048de:	f7ff fe91 	bl	8004604 <MX_I2C2_Init>
  MX_I2C3_Init();
 80048e2:	f7ff febb 	bl	800465c <MX_I2C3_Init>
  MX_LPTIM1_Init();
 80048e6:	f7ff ff6b 	bl	80047c0 <MX_LPTIM1_Init>
  MX_USART2_UART_Init();
 80048ea:	f000 f979 	bl	8004be0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80048ee:	f7ff fd93 	bl	8004418 <MX_ADC1_Init>
  	BMP_Begin(&hi2c3);
 80048f2:	485f      	ldr	r0, [pc, #380]	; (8004a70 <main+0x1ac>)
 80048f4:	f7ff fb04 	bl	8003f00 <BMP_Begin>
  	byte wait = BMP_StartTemperature(&hi2c3);
 80048f8:	485d      	ldr	r0, [pc, #372]	; (8004a70 <main+0x1ac>)
 80048fa:	f7ff fd1b 	bl	8004334 <BMP_StartTemperature>
  	HAL_Delay(wait);
 80048fe:	b2c0      	uxtb	r0, r0
 8004900:	f7fc fb12 	bl	8000f28 <HAL_Delay>
  	double temp = 0.0;
 8004904:	a906      	add	r1, sp, #24
 8004906:	2200      	movs	r2, #0
 8004908:	2300      	movs	r3, #0
 800490a:	e961 2302 	strd	r2, r3, [r1, #-8]!
  	BMP_GetTemperature(&hi2c3, &temp);
 800490e:	4858      	ldr	r0, [pc, #352]	; (8004a70 <main+0x1ac>)
 8004910:	f7ff fd20 	bl	8004354 <BMP_GetTemperature>
  	printf("MAIN: BMP180 temp = %f\n", temp);
 8004914:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004918:	4856      	ldr	r0, [pc, #344]	; (8004a74 <main+0x1b0>)
 800491a:	f000 fe79 	bl	8005610 <iprintf>
    if (ES2_begin())
 800491e:	f7ff fa53 	bl	8003dc8 <ES2_begin>
 8004922:	b118      	cbz	r0, 800492c <main+0x68>
		printf("! ES2 ERROR - Initialization Failed !");
 8004924:	4854      	ldr	r0, [pc, #336]	; (8004a78 <main+0x1b4>)
 8004926:	f000 fe73 	bl	8005610 <iprintf>
 800492a:	e7fe      	b.n	800492a <main+0x66>
	if (ES2_readVMPP() != -1)
 800492c:	f7ff f996 	bl	8003c5c <ES2_readVMPP>
 8004930:	3001      	adds	r0, #1
 8004932:	d004      	beq.n	800493e <main+0x7a>
		ES2_setVMPP(-1, 1); // Disable VMPP regulation to allow charging from any power supply (7V - 23V) and prevent excessive EEPROM writes
 8004934:	2101      	movs	r1, #1
 8004936:	f04f 30ff 	mov.w	r0, #4294967295
 800493a:	f7ff f9b7 	bl	8003cac <ES2_setVMPP>
		printf("Temperature        = %f F\n", (temperature * 9.0 / 5.0) + 32.0);
 800493e:	4f4f      	ldr	r7, [pc, #316]	; (8004a7c <main+0x1b8>)
 8004940:	2600      	movs	r6, #0
		int batVal = ES2_batteryVoltage();
 8004942:	f7ff f9f7 	bl	8003d34 <ES2_batteryVoltage>
 8004946:	4605      	mov	r5, r0
		float batteryCurrent = (float) ES2_batteryCurrent() / 1000.0;
 8004948:	f7ff f9fa 	bl	8003d40 <ES2_batteryCurrent>
 800494c:	ee09 0a90 	vmov	s19, r0
		uint16_t fullCapacity = ES2_fullChargeCapacity();
 8004950:	f7ff fa0c 	bl	8003d6c <ES2_fullChargeCapacity>
 8004954:	4682      	mov	sl, r0
		uint16_t remainingCapacity = ES2_remainingCapacity();
 8004956:	f7ff fa0f 	bl	8003d78 <ES2_remainingCapacity>
 800495a:	4681      	mov	r9, r0
		uint16_t stateOfCharge = ES2_SOC();
 800495c:	f7ff fa00 	bl	8003d60 <ES2_SOC>
 8004960:	4680      	mov	r8, r0
		float inputVoltage = (float) ES2_inputVoltage(0) / 1000;
 8004962:	2000      	movs	r0, #0
 8004964:	f7ff fa0e 	bl	8003d84 <ES2_inputVoltage>
 8004968:	ee09 0a10 	vmov	s18, r0
		float temperature = (float) ES2_temperature() / 10;
 800496c:	f7ff f9ef 	bl	8003d4e <ES2_temperature>
		float batteryVoltage = (float) batVal / 1000.0;
 8004970:	ee07 5a90 	vmov	s15, r5
 8004974:	eddf 8a42 	vldr	s17, [pc, #264]	; 8004a80 <main+0x1bc>
 8004978:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		float temperature = (float) ES2_temperature() / 10;
 800497c:	ee08 0a10 	vmov	s16, r0
		printf("Battery Voltage    = %f V\n", batteryVoltage);
 8004980:	ee87 7aa8 	vdiv.f32	s14, s15, s17
		int nBattVolt = batVal % 1000;
 8004984:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
		printf("Battery Voltage    = %f V\n", batteryVoltage);
 8004988:	ee17 0a10 	vmov	r0, s14
 800498c:	f7fb fddc 	bl	8000548 <__aeabi_f2d>
 8004990:	460b      	mov	r3, r1
 8004992:	4602      	mov	r2, r0
 8004994:	483b      	ldr	r0, [pc, #236]	; (8004a84 <main+0x1c0>)
 8004996:	f000 fe3b 	bl	8005610 <iprintf>
		int nBattVolt = batVal % 1000;
 800499a:	fb95 f1f4 	sdiv	r1, r5, r4
		printf("Battery Voltage    = %d.%03d V\n", iBattVolt, nBattVolt);
 800499e:	483a      	ldr	r0, [pc, #232]	; (8004a88 <main+0x1c4>)
 80049a0:	fb04 5211 	mls	r2, r4, r1, r5
 80049a4:	f000 fe34 	bl	8005610 <iprintf>
		float batteryCurrent = (float) ES2_batteryCurrent() / 1000.0;
 80049a8:	eef8 9ae9 	vcvt.f32.s32	s19, s19
		printf("Battery Current    = %f V\n", batteryCurrent);
 80049ac:	eec9 7aa8 	vdiv.f32	s15, s19, s17
 80049b0:	ee17 0a90 	vmov	r0, s15
 80049b4:	f7fb fdc8 	bl	8000548 <__aeabi_f2d>
 80049b8:	4602      	mov	r2, r0
 80049ba:	460b      	mov	r3, r1
 80049bc:	4833      	ldr	r0, [pc, #204]	; (8004a8c <main+0x1c8>)
 80049be:	f000 fe27 	bl	8005610 <iprintf>
		printf("Full Capacity      = %d mAh\n", fullCapacity);
 80049c2:	4651      	mov	r1, sl
 80049c4:	4832      	ldr	r0, [pc, #200]	; (8004a90 <main+0x1cc>)
 80049c6:	f000 fe23 	bl	8005610 <iprintf>
		printf("Remaining Capacity = %d mAh\n", remainingCapacity);
 80049ca:	4649      	mov	r1, r9
 80049cc:	4831      	ldr	r0, [pc, #196]	; (8004a94 <main+0x1d0>)
 80049ce:	f000 fe1f 	bl	8005610 <iprintf>
		printf("State of Charge    = %d %% \n", stateOfCharge);
 80049d2:	4641      	mov	r1, r8
 80049d4:	4830      	ldr	r0, [pc, #192]	; (8004a98 <main+0x1d4>)
 80049d6:	f000 fe1b 	bl	8005610 <iprintf>
		float inputVoltage = (float) ES2_inputVoltage(0) / 1000;
 80049da:	eeb8 9a49 	vcvt.f32.u32	s18, s18
		printf("Input Voltage      = %f V\n", inputVoltage);
 80049de:	eec9 7a28 	vdiv.f32	s15, s18, s17
 80049e2:	ee17 0a90 	vmov	r0, s15
 80049e6:	f7fb fdaf 	bl	8000548 <__aeabi_f2d>
 80049ea:	4602      	mov	r2, r0
 80049ec:	460b      	mov	r3, r1
 80049ee:	482b      	ldr	r0, [pc, #172]	; (8004a9c <main+0x1d8>)
 80049f0:	f000 fe0e 	bl	8005610 <iprintf>
		float temperature = (float) ES2_temperature() / 10;
 80049f4:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
		printf("Temperature        = %f F\n", (temperature * 9.0 / 5.0) + 32.0);
 80049f8:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80049fc:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8004a00:	ee17 0a10 	vmov	r0, s14
 8004a04:	f7fb fda0 	bl	8000548 <__aeabi_f2d>
 8004a08:	4632      	mov	r2, r6
 8004a0a:	463b      	mov	r3, r7
 8004a0c:	f7fb fdf0 	bl	80005f0 <__aeabi_dmul>
 8004a10:	2200      	movs	r2, #0
 8004a12:	4b23      	ldr	r3, [pc, #140]	; (8004aa0 <main+0x1dc>)
 8004a14:	f7fb ff16 	bl	8000844 <__aeabi_ddiv>
 8004a18:	2200      	movs	r2, #0
 8004a1a:	4b22      	ldr	r3, [pc, #136]	; (8004aa4 <main+0x1e0>)
 8004a1c:	f7fb fc36 	bl	800028c <__adddf3>
 8004a20:	4602      	mov	r2, r0
 8004a22:	460b      	mov	r3, r1
 8004a24:	4820      	ldr	r0, [pc, #128]	; (8004aa8 <main+0x1e4>)
 8004a26:	f000 fdf3 	bl	8005610 <iprintf>
		ES2_readClock();
 8004a2a:	f7ff f8b3 	bl	8003b94 <ES2_readClock>
		printf("\n\tTime:: %d:%d:%d \t Date:: %d-%d-%d\n", ES2_hour(), ES2_minute(),
 8004a2e:	f7ff f8df 	bl	8003bf0 <ES2_hour>
 8004a32:	4605      	mov	r5, r0
 8004a34:	f7ff f8d6 	bl	8003be4 <ES2_minute>
 8004a38:	4680      	mov	r8, r0
				ES2_second(), ES2_month(), ES2_dayOfMonth(), ES2_year());
 8004a3a:	f7ff f8cd 	bl	8003bd8 <ES2_second>
 8004a3e:	4681      	mov	r9, r0
 8004a40:	f7ff f8e2 	bl	8003c08 <ES2_month>
 8004a44:	4682      	mov	sl, r0
 8004a46:	f7ff f8d9 	bl	8003bfc <ES2_dayOfMonth>
 8004a4a:	4683      	mov	fp, r0
 8004a4c:	f7ff f8e2 	bl	8003c14 <ES2_year>
		printf("\n\tTime:: %d:%d:%d \t Date:: %d-%d-%d\n", ES2_hour(), ES2_minute(),
 8004a50:	464b      	mov	r3, r9
 8004a52:	9002      	str	r0, [sp, #8]
 8004a54:	4642      	mov	r2, r8
 8004a56:	4629      	mov	r1, r5
 8004a58:	e88d 0c00 	stmia.w	sp, {sl, fp}
 8004a5c:	4813      	ldr	r0, [pc, #76]	; (8004aac <main+0x1e8>)
 8004a5e:	f000 fdd7 	bl	8005610 <iprintf>
		printf("\n\n\n");
 8004a62:	4813      	ldr	r0, [pc, #76]	; (8004ab0 <main+0x1ec>)
 8004a64:	f000 fe48 	bl	80056f8 <puts>
		HAL_Delay(1000);
 8004a68:	4620      	mov	r0, r4
 8004a6a:	f7fc fa5d 	bl	8000f28 <HAL_Delay>
 8004a6e:	e768      	b.n	8004942 <main+0x7e>
 8004a70:	20000314 	.word	0x20000314
 8004a74:	080076cc 	.word	0x080076cc
 8004a78:	080076e4 	.word	0x080076e4
 8004a7c:	40220000 	.word	0x40220000
 8004a80:	447a0000 	.word	0x447a0000
 8004a84:	0800770a 	.word	0x0800770a
 8004a88:	08007725 	.word	0x08007725
 8004a8c:	08007745 	.word	0x08007745
 8004a90:	08007760 	.word	0x08007760
 8004a94:	0800777d 	.word	0x0800777d
 8004a98:	0800779a 	.word	0x0800779a
 8004a9c:	080077b7 	.word	0x080077b7
 8004aa0:	40140000 	.word	0x40140000
 8004aa4:	40400000 	.word	0x40400000
 8004aa8:	080077d2 	.word	0x080077d2
 8004aac:	080077ed 	.word	0x080077ed
 8004ab0:	08007812 	.word	0x08007812

08004ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004ab4:	4770      	bx	lr
	...

08004ab8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ab8:	4b0a      	ldr	r3, [pc, #40]	; (8004ae4 <HAL_MspInit+0x2c>)
 8004aba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004abc:	f042 0201 	orr.w	r2, r2, #1
 8004ac0:	661a      	str	r2, [r3, #96]	; 0x60
 8004ac2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8004ac4:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ac6:	f002 0201 	and.w	r2, r2, #1
 8004aca:	9200      	str	r2, [sp, #0]
 8004acc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ace:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004ad0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004ad4:	659a      	str	r2, [r3, #88]	; 0x58
 8004ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004adc:	9301      	str	r3, [sp, #4]
 8004ade:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ae0:	b002      	add	sp, #8
 8004ae2:	4770      	bx	lr
 8004ae4:	40021000 	.word	0x40021000

08004ae8 <NMI_Handler>:
 8004ae8:	4770      	bx	lr

08004aea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004aea:	e7fe      	b.n	8004aea <HardFault_Handler>

08004aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004aec:	e7fe      	b.n	8004aec <MemManage_Handler>

08004aee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004aee:	e7fe      	b.n	8004aee <BusFault_Handler>

08004af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004af0:	e7fe      	b.n	8004af0 <UsageFault_Handler>

08004af2 <SVC_Handler>:
 8004af2:	4770      	bx	lr

08004af4 <DebugMon_Handler>:
 8004af4:	4770      	bx	lr

08004af6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004af6:	4770      	bx	lr

08004af8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004af8:	f7fc ba08 	b.w	8000f0c <HAL_IncTick>

08004afc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004afc:	b570      	push	{r4, r5, r6, lr}
 8004afe:	460e      	mov	r6, r1
 8004b00:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b02:	460c      	mov	r4, r1
 8004b04:	1ba3      	subs	r3, r4, r6
 8004b06:	429d      	cmp	r5, r3
 8004b08:	dc01      	bgt.n	8004b0e <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8004b0e:	f3af 8000 	nop.w
 8004b12:	f804 0b01 	strb.w	r0, [r4], #1
 8004b16:	e7f5      	b.n	8004b04 <_read+0x8>

08004b18 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004b18:	b510      	push	{r4, lr}
//	{
//		__io_putchar(*ptr++);
//	}


	for(int i = 0; i < len; i++)
 8004b1a:	2300      	movs	r3, #0
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004b1c:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
 8004b20:	4293      	cmp	r3, r2
 8004b22:	db01      	blt.n	8004b28 <_write+0x10>
		ITM_SendChar((*ptr++));

	return len;
}
 8004b24:	4610      	mov	r0, r2
 8004b26:	bd10      	pop	{r4, pc}
 8004b28:	f8d4 0e80 	ldr.w	r0, [r4, #3712]	; 0xe80
 8004b2c:	07c0      	lsls	r0, r0, #31
 8004b2e:	d503      	bpl.n	8004b38 <_write+0x20>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8004b30:	f8d4 0e00 	ldr.w	r0, [r4, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004b34:	07c0      	lsls	r0, r0, #31
 8004b36:	d402      	bmi.n	8004b3e <_write+0x26>
	for(int i = 0; i < len; i++)
 8004b38:	3301      	adds	r3, #1
 8004b3a:	e7f1      	b.n	8004b20 <_write+0x8>
  __ASM volatile ("nop");
 8004b3c:	bf00      	nop
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8004b3e:	6820      	ldr	r0, [r4, #0]
 8004b40:	2800      	cmp	r0, #0
 8004b42:	d0fb      	beq.n	8004b3c <_write+0x24>
		ITM_SendChar((*ptr++));
 8004b44:	5cc8      	ldrb	r0, [r1, r3]
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8004b46:	7020      	strb	r0, [r4, #0]
 8004b48:	e7f6      	b.n	8004b38 <_write+0x20>
	...

08004b4c <_sbrk>:

caddr_t _sbrk(int incr)
{
 8004b4c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004b4e:	4b0a      	ldr	r3, [pc, #40]	; (8004b78 <_sbrk+0x2c>)
 8004b50:	6819      	ldr	r1, [r3, #0]
{
 8004b52:	4602      	mov	r2, r0
	if (heap_end == 0)
 8004b54:	b909      	cbnz	r1, 8004b5a <_sbrk+0xe>
		heap_end = &end;
 8004b56:	4909      	ldr	r1, [pc, #36]	; (8004b7c <_sbrk+0x30>)
 8004b58:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8004b5a:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8004b5c:	4669      	mov	r1, sp
 8004b5e:	4402      	add	r2, r0
 8004b60:	428a      	cmp	r2, r1
 8004b62:	d906      	bls.n	8004b72 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8004b64:	f000 f8b6 	bl	8004cd4 <__errno>
 8004b68:	230c      	movs	r3, #12
 8004b6a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8004b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b70:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8004b72:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8004b74:	bd08      	pop	{r3, pc}
 8004b76:	bf00      	nop
 8004b78:	200001f4 	.word	0x200001f4
 8004b7c:	200004b8 	.word	0x200004b8

08004b80 <_close>:

int _close(int file)
{
	return -1;
}
 8004b80:	f04f 30ff 	mov.w	r0, #4294967295
 8004b84:	4770      	bx	lr

08004b86 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8004b86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b8a:	604b      	str	r3, [r1, #4]
	return 0;
}
 8004b8c:	2000      	movs	r0, #0
 8004b8e:	4770      	bx	lr

08004b90 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8004b90:	2001      	movs	r0, #1
 8004b92:	4770      	bx	lr

08004b94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8004b94:	2000      	movs	r0, #0
 8004b96:	4770      	bx	lr

08004b98 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b98:	490f      	ldr	r1, [pc, #60]	; (8004bd8 <SystemInit+0x40>)
 8004b9a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004b9e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004ba6:	4b0d      	ldr	r3, [pc, #52]	; (8004bdc <SystemInit+0x44>)
 8004ba8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8004baa:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8004bac:	f042 0201 	orr.w	r2, r2, #1
 8004bb0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8004bb2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8004bba:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8004bbe:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8004bc0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004bc4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004bcc:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004bce:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004bd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004bd4:	608b      	str	r3, [r1, #8]
 8004bd6:	4770      	bx	lr
 8004bd8:	e000ed00 	.word	0xe000ed00
 8004bdc:	40021000 	.word	0x40021000

08004be0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004be0:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8004be2:	480c      	ldr	r0, [pc, #48]	; (8004c14 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 115200;
 8004be4:	4b0c      	ldr	r3, [pc, #48]	; (8004c18 <MX_USART2_UART_Init+0x38>)
 8004be6:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8004bea:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004bee:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004bf4:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004bf6:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004bf8:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004bfa:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004bfc:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004bfe:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004c00:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004c02:	f7fe fd60 	bl	80036c6 <HAL_UART_Init>
 8004c06:	b118      	cbz	r0, 8004c10 <MX_USART2_UART_Init+0x30>
  {
    Error_Handler();
  }

}
 8004c08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8004c0c:	f7ff bf52 	b.w	8004ab4 <Error_Handler>
 8004c10:	bd08      	pop	{r3, pc}
 8004c12:	bf00      	nop
 8004c14:	2000043c 	.word	0x2000043c
 8004c18:	40004400 	.word	0x40004400

08004c1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004c1c:	b510      	push	{r4, lr}
 8004c1e:	4604      	mov	r4, r0
 8004c20:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c22:	2214      	movs	r2, #20
 8004c24:	2100      	movs	r1, #0
 8004c26:	a803      	add	r0, sp, #12
 8004c28:	f000 f87e 	bl	8004d28 <memset>
  if(uartHandle->Instance==USART2)
 8004c2c:	6822      	ldr	r2, [r4, #0]
 8004c2e:	4b13      	ldr	r3, [pc, #76]	; (8004c7c <HAL_UART_MspInit+0x60>)
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d120      	bne.n	8004c76 <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004c34:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c38:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 8004c3a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004c3c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004c40:	659a      	str	r2, [r3, #88]	; 0x58
 8004c42:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004c44:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8004c48:	9201      	str	r2, [sp, #4]
 8004c4a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c4e:	f042 0201 	orr.w	r2, r2, #1
 8004c52:	64da      	str	r2, [r3, #76]	; 0x4c
 8004c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	9302      	str	r3, [sp, #8]
 8004c5c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004c5e:	230c      	movs	r3, #12
 8004c60:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c62:	2302      	movs	r3, #2
 8004c64:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c66:	2303      	movs	r3, #3
 8004c68:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004c6e:	2307      	movs	r3, #7
 8004c70:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c72:	f7fc fe45 	bl	8001900 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004c76:	b008      	add	sp, #32
 8004c78:	bd10      	pop	{r4, pc}
 8004c7a:	bf00      	nop
 8004c7c:	40004400 	.word	0x40004400

08004c80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004c80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004cb8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004c84:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004c86:	e003      	b.n	8004c90 <LoopCopyDataInit>

08004c88 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004c88:	4b0c      	ldr	r3, [pc, #48]	; (8004cbc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004c8a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004c8c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004c8e:	3104      	adds	r1, #4

08004c90 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004c90:	480b      	ldr	r0, [pc, #44]	; (8004cc0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004c92:	4b0c      	ldr	r3, [pc, #48]	; (8004cc4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004c94:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004c96:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004c98:	d3f6      	bcc.n	8004c88 <CopyDataInit>
	ldr	r2, =_sbss
 8004c9a:	4a0b      	ldr	r2, [pc, #44]	; (8004cc8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004c9c:	e002      	b.n	8004ca4 <LoopFillZerobss>

08004c9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004c9e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004ca0:	f842 3b04 	str.w	r3, [r2], #4

08004ca4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004ca4:	4b09      	ldr	r3, [pc, #36]	; (8004ccc <LoopForever+0x16>)
	cmp	r2, r3
 8004ca6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004ca8:	d3f9      	bcc.n	8004c9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004caa:	f7ff ff75 	bl	8004b98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004cae:	f000 f817 	bl	8004ce0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004cb2:	f7ff fe07 	bl	80048c4 <main>

08004cb6 <LoopForever>:

LoopForever:
    b LoopForever
 8004cb6:	e7fe      	b.n	8004cb6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004cb8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8004cbc:	08007b30 	.word	0x08007b30
	ldr	r0, =_sdata
 8004cc0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004cc4:	200001d4 	.word	0x200001d4
	ldr	r2, =_sbss
 8004cc8:	200001d8 	.word	0x200001d8
	ldr	r3, = _ebss
 8004ccc:	200004b8 	.word	0x200004b8

08004cd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004cd0:	e7fe      	b.n	8004cd0 <ADC1_2_IRQHandler>
	...

08004cd4 <__errno>:
 8004cd4:	4b01      	ldr	r3, [pc, #4]	; (8004cdc <__errno+0x8>)
 8004cd6:	6818      	ldr	r0, [r3, #0]
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	20000004 	.word	0x20000004

08004ce0 <__libc_init_array>:
 8004ce0:	b570      	push	{r4, r5, r6, lr}
 8004ce2:	4e0d      	ldr	r6, [pc, #52]	; (8004d18 <__libc_init_array+0x38>)
 8004ce4:	4c0d      	ldr	r4, [pc, #52]	; (8004d1c <__libc_init_array+0x3c>)
 8004ce6:	1ba4      	subs	r4, r4, r6
 8004ce8:	10a4      	asrs	r4, r4, #2
 8004cea:	2500      	movs	r5, #0
 8004cec:	42a5      	cmp	r5, r4
 8004cee:	d109      	bne.n	8004d04 <__libc_init_array+0x24>
 8004cf0:	4e0b      	ldr	r6, [pc, #44]	; (8004d20 <__libc_init_array+0x40>)
 8004cf2:	4c0c      	ldr	r4, [pc, #48]	; (8004d24 <__libc_init_array+0x44>)
 8004cf4:	f002 fbcc 	bl	8007490 <_init>
 8004cf8:	1ba4      	subs	r4, r4, r6
 8004cfa:	10a4      	asrs	r4, r4, #2
 8004cfc:	2500      	movs	r5, #0
 8004cfe:	42a5      	cmp	r5, r4
 8004d00:	d105      	bne.n	8004d0e <__libc_init_array+0x2e>
 8004d02:	bd70      	pop	{r4, r5, r6, pc}
 8004d04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d08:	4798      	blx	r3
 8004d0a:	3501      	adds	r5, #1
 8004d0c:	e7ee      	b.n	8004cec <__libc_init_array+0xc>
 8004d0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d12:	4798      	blx	r3
 8004d14:	3501      	adds	r5, #1
 8004d16:	e7f2      	b.n	8004cfe <__libc_init_array+0x1e>
 8004d18:	08007b28 	.word	0x08007b28
 8004d1c:	08007b28 	.word	0x08007b28
 8004d20:	08007b28 	.word	0x08007b28
 8004d24:	08007b2c 	.word	0x08007b2c

08004d28 <memset>:
 8004d28:	4402      	add	r2, r0
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d100      	bne.n	8004d32 <memset+0xa>
 8004d30:	4770      	bx	lr
 8004d32:	f803 1b01 	strb.w	r1, [r3], #1
 8004d36:	e7f9      	b.n	8004d2c <memset+0x4>

08004d38 <__cvt>:
 8004d38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d3c:	ec55 4b10 	vmov	r4, r5, d0
 8004d40:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004d42:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004d46:	2d00      	cmp	r5, #0
 8004d48:	460e      	mov	r6, r1
 8004d4a:	4691      	mov	r9, r2
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	bfb8      	it	lt
 8004d50:	4622      	movlt	r2, r4
 8004d52:	462b      	mov	r3, r5
 8004d54:	f027 0720 	bic.w	r7, r7, #32
 8004d58:	bfbb      	ittet	lt
 8004d5a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004d5e:	461d      	movlt	r5, r3
 8004d60:	2300      	movge	r3, #0
 8004d62:	232d      	movlt	r3, #45	; 0x2d
 8004d64:	bfb8      	it	lt
 8004d66:	4614      	movlt	r4, r2
 8004d68:	2f46      	cmp	r7, #70	; 0x46
 8004d6a:	700b      	strb	r3, [r1, #0]
 8004d6c:	d004      	beq.n	8004d78 <__cvt+0x40>
 8004d6e:	2f45      	cmp	r7, #69	; 0x45
 8004d70:	d100      	bne.n	8004d74 <__cvt+0x3c>
 8004d72:	3601      	adds	r6, #1
 8004d74:	2102      	movs	r1, #2
 8004d76:	e000      	b.n	8004d7a <__cvt+0x42>
 8004d78:	2103      	movs	r1, #3
 8004d7a:	ab03      	add	r3, sp, #12
 8004d7c:	9301      	str	r3, [sp, #4]
 8004d7e:	ab02      	add	r3, sp, #8
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	4632      	mov	r2, r6
 8004d84:	4653      	mov	r3, sl
 8004d86:	ec45 4b10 	vmov	d0, r4, r5
 8004d8a:	f000 fe09 	bl	80059a0 <_dtoa_r>
 8004d8e:	2f47      	cmp	r7, #71	; 0x47
 8004d90:	4680      	mov	r8, r0
 8004d92:	d102      	bne.n	8004d9a <__cvt+0x62>
 8004d94:	f019 0f01 	tst.w	r9, #1
 8004d98:	d026      	beq.n	8004de8 <__cvt+0xb0>
 8004d9a:	2f46      	cmp	r7, #70	; 0x46
 8004d9c:	eb08 0906 	add.w	r9, r8, r6
 8004da0:	d111      	bne.n	8004dc6 <__cvt+0x8e>
 8004da2:	f898 3000 	ldrb.w	r3, [r8]
 8004da6:	2b30      	cmp	r3, #48	; 0x30
 8004da8:	d10a      	bne.n	8004dc0 <__cvt+0x88>
 8004daa:	2200      	movs	r2, #0
 8004dac:	2300      	movs	r3, #0
 8004dae:	4620      	mov	r0, r4
 8004db0:	4629      	mov	r1, r5
 8004db2:	f7fb fe85 	bl	8000ac0 <__aeabi_dcmpeq>
 8004db6:	b918      	cbnz	r0, 8004dc0 <__cvt+0x88>
 8004db8:	f1c6 0601 	rsb	r6, r6, #1
 8004dbc:	f8ca 6000 	str.w	r6, [sl]
 8004dc0:	f8da 3000 	ldr.w	r3, [sl]
 8004dc4:	4499      	add	r9, r3
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	2300      	movs	r3, #0
 8004dca:	4620      	mov	r0, r4
 8004dcc:	4629      	mov	r1, r5
 8004dce:	f7fb fe77 	bl	8000ac0 <__aeabi_dcmpeq>
 8004dd2:	b938      	cbnz	r0, 8004de4 <__cvt+0xac>
 8004dd4:	2230      	movs	r2, #48	; 0x30
 8004dd6:	9b03      	ldr	r3, [sp, #12]
 8004dd8:	4599      	cmp	r9, r3
 8004dda:	d905      	bls.n	8004de8 <__cvt+0xb0>
 8004ddc:	1c59      	adds	r1, r3, #1
 8004dde:	9103      	str	r1, [sp, #12]
 8004de0:	701a      	strb	r2, [r3, #0]
 8004de2:	e7f8      	b.n	8004dd6 <__cvt+0x9e>
 8004de4:	f8cd 900c 	str.w	r9, [sp, #12]
 8004de8:	9b03      	ldr	r3, [sp, #12]
 8004dea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004dec:	eba3 0308 	sub.w	r3, r3, r8
 8004df0:	4640      	mov	r0, r8
 8004df2:	6013      	str	r3, [r2, #0]
 8004df4:	b004      	add	sp, #16
 8004df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004dfa <__exponent>:
 8004dfa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2900      	cmp	r1, #0
 8004e00:	bfb8      	it	lt
 8004e02:	4249      	neglt	r1, r1
 8004e04:	f803 2b02 	strb.w	r2, [r3], #2
 8004e08:	bfb4      	ite	lt
 8004e0a:	222d      	movlt	r2, #45	; 0x2d
 8004e0c:	222b      	movge	r2, #43	; 0x2b
 8004e0e:	2909      	cmp	r1, #9
 8004e10:	7042      	strb	r2, [r0, #1]
 8004e12:	dd20      	ble.n	8004e56 <__exponent+0x5c>
 8004e14:	f10d 0207 	add.w	r2, sp, #7
 8004e18:	4617      	mov	r7, r2
 8004e1a:	260a      	movs	r6, #10
 8004e1c:	fb91 f5f6 	sdiv	r5, r1, r6
 8004e20:	fb06 1115 	mls	r1, r6, r5, r1
 8004e24:	3130      	adds	r1, #48	; 0x30
 8004e26:	2d09      	cmp	r5, #9
 8004e28:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004e2c:	f102 34ff 	add.w	r4, r2, #4294967295
 8004e30:	4629      	mov	r1, r5
 8004e32:	dc09      	bgt.n	8004e48 <__exponent+0x4e>
 8004e34:	3130      	adds	r1, #48	; 0x30
 8004e36:	3a02      	subs	r2, #2
 8004e38:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004e3c:	42ba      	cmp	r2, r7
 8004e3e:	461c      	mov	r4, r3
 8004e40:	d304      	bcc.n	8004e4c <__exponent+0x52>
 8004e42:	1a20      	subs	r0, r4, r0
 8004e44:	b003      	add	sp, #12
 8004e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e48:	4622      	mov	r2, r4
 8004e4a:	e7e7      	b.n	8004e1c <__exponent+0x22>
 8004e4c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004e50:	f803 1b01 	strb.w	r1, [r3], #1
 8004e54:	e7f2      	b.n	8004e3c <__exponent+0x42>
 8004e56:	2230      	movs	r2, #48	; 0x30
 8004e58:	461c      	mov	r4, r3
 8004e5a:	4411      	add	r1, r2
 8004e5c:	f804 2b02 	strb.w	r2, [r4], #2
 8004e60:	7059      	strb	r1, [r3, #1]
 8004e62:	e7ee      	b.n	8004e42 <__exponent+0x48>

08004e64 <_printf_float>:
 8004e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e68:	b08d      	sub	sp, #52	; 0x34
 8004e6a:	460c      	mov	r4, r1
 8004e6c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004e70:	4616      	mov	r6, r2
 8004e72:	461f      	mov	r7, r3
 8004e74:	4605      	mov	r5, r0
 8004e76:	f001 fcdd 	bl	8006834 <_localeconv_r>
 8004e7a:	6803      	ldr	r3, [r0, #0]
 8004e7c:	9304      	str	r3, [sp, #16]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7fb f9a6 	bl	80001d0 <strlen>
 8004e84:	2300      	movs	r3, #0
 8004e86:	930a      	str	r3, [sp, #40]	; 0x28
 8004e88:	f8d8 3000 	ldr.w	r3, [r8]
 8004e8c:	9005      	str	r0, [sp, #20]
 8004e8e:	3307      	adds	r3, #7
 8004e90:	f023 0307 	bic.w	r3, r3, #7
 8004e94:	f103 0208 	add.w	r2, r3, #8
 8004e98:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004e9c:	f8d4 b000 	ldr.w	fp, [r4]
 8004ea0:	f8c8 2000 	str.w	r2, [r8]
 8004ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004eac:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004eb0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004eb4:	9307      	str	r3, [sp, #28]
 8004eb6:	f8cd 8018 	str.w	r8, [sp, #24]
 8004eba:	f04f 32ff 	mov.w	r2, #4294967295
 8004ebe:	4ba5      	ldr	r3, [pc, #660]	; (8005154 <_printf_float+0x2f0>)
 8004ec0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ec4:	f7fb fe2e 	bl	8000b24 <__aeabi_dcmpun>
 8004ec8:	2800      	cmp	r0, #0
 8004eca:	f040 81fb 	bne.w	80052c4 <_printf_float+0x460>
 8004ece:	f04f 32ff 	mov.w	r2, #4294967295
 8004ed2:	4ba0      	ldr	r3, [pc, #640]	; (8005154 <_printf_float+0x2f0>)
 8004ed4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ed8:	f7fb fe06 	bl	8000ae8 <__aeabi_dcmple>
 8004edc:	2800      	cmp	r0, #0
 8004ede:	f040 81f1 	bne.w	80052c4 <_printf_float+0x460>
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	4640      	mov	r0, r8
 8004ee8:	4649      	mov	r1, r9
 8004eea:	f7fb fdf3 	bl	8000ad4 <__aeabi_dcmplt>
 8004eee:	b110      	cbz	r0, 8004ef6 <_printf_float+0x92>
 8004ef0:	232d      	movs	r3, #45	; 0x2d
 8004ef2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ef6:	4b98      	ldr	r3, [pc, #608]	; (8005158 <_printf_float+0x2f4>)
 8004ef8:	4a98      	ldr	r2, [pc, #608]	; (800515c <_printf_float+0x2f8>)
 8004efa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004efe:	bf8c      	ite	hi
 8004f00:	4690      	movhi	r8, r2
 8004f02:	4698      	movls	r8, r3
 8004f04:	2303      	movs	r3, #3
 8004f06:	f02b 0204 	bic.w	r2, fp, #4
 8004f0a:	6123      	str	r3, [r4, #16]
 8004f0c:	6022      	str	r2, [r4, #0]
 8004f0e:	f04f 0900 	mov.w	r9, #0
 8004f12:	9700      	str	r7, [sp, #0]
 8004f14:	4633      	mov	r3, r6
 8004f16:	aa0b      	add	r2, sp, #44	; 0x2c
 8004f18:	4621      	mov	r1, r4
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	f000 f9e2 	bl	80052e4 <_printf_common>
 8004f20:	3001      	adds	r0, #1
 8004f22:	f040 8093 	bne.w	800504c <_printf_float+0x1e8>
 8004f26:	f04f 30ff 	mov.w	r0, #4294967295
 8004f2a:	b00d      	add	sp, #52	; 0x34
 8004f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f30:	6861      	ldr	r1, [r4, #4]
 8004f32:	1c4b      	adds	r3, r1, #1
 8004f34:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004f38:	d13f      	bne.n	8004fba <_printf_float+0x156>
 8004f3a:	2306      	movs	r3, #6
 8004f3c:	6063      	str	r3, [r4, #4]
 8004f3e:	2300      	movs	r3, #0
 8004f40:	9303      	str	r3, [sp, #12]
 8004f42:	ab0a      	add	r3, sp, #40	; 0x28
 8004f44:	9302      	str	r3, [sp, #8]
 8004f46:	ab09      	add	r3, sp, #36	; 0x24
 8004f48:	9300      	str	r3, [sp, #0]
 8004f4a:	ec49 8b10 	vmov	d0, r8, r9
 8004f4e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004f52:	6022      	str	r2, [r4, #0]
 8004f54:	f8cd a004 	str.w	sl, [sp, #4]
 8004f58:	6861      	ldr	r1, [r4, #4]
 8004f5a:	4628      	mov	r0, r5
 8004f5c:	f7ff feec 	bl	8004d38 <__cvt>
 8004f60:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004f64:	2b47      	cmp	r3, #71	; 0x47
 8004f66:	4680      	mov	r8, r0
 8004f68:	d109      	bne.n	8004f7e <_printf_float+0x11a>
 8004f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f6c:	1cd8      	adds	r0, r3, #3
 8004f6e:	db02      	blt.n	8004f76 <_printf_float+0x112>
 8004f70:	6862      	ldr	r2, [r4, #4]
 8004f72:	4293      	cmp	r3, r2
 8004f74:	dd57      	ble.n	8005026 <_printf_float+0x1c2>
 8004f76:	f1aa 0a02 	sub.w	sl, sl, #2
 8004f7a:	fa5f fa8a 	uxtb.w	sl, sl
 8004f7e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004f82:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f84:	d834      	bhi.n	8004ff0 <_printf_float+0x18c>
 8004f86:	3901      	subs	r1, #1
 8004f88:	4652      	mov	r2, sl
 8004f8a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004f8e:	9109      	str	r1, [sp, #36]	; 0x24
 8004f90:	f7ff ff33 	bl	8004dfa <__exponent>
 8004f94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f96:	1883      	adds	r3, r0, r2
 8004f98:	2a01      	cmp	r2, #1
 8004f9a:	4681      	mov	r9, r0
 8004f9c:	6123      	str	r3, [r4, #16]
 8004f9e:	dc02      	bgt.n	8004fa6 <_printf_float+0x142>
 8004fa0:	6822      	ldr	r2, [r4, #0]
 8004fa2:	07d1      	lsls	r1, r2, #31
 8004fa4:	d501      	bpl.n	8004faa <_printf_float+0x146>
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	6123      	str	r3, [r4, #16]
 8004faa:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d0af      	beq.n	8004f12 <_printf_float+0xae>
 8004fb2:	232d      	movs	r3, #45	; 0x2d
 8004fb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fb8:	e7ab      	b.n	8004f12 <_printf_float+0xae>
 8004fba:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004fbe:	d002      	beq.n	8004fc6 <_printf_float+0x162>
 8004fc0:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004fc4:	d1bb      	bne.n	8004f3e <_printf_float+0xda>
 8004fc6:	b189      	cbz	r1, 8004fec <_printf_float+0x188>
 8004fc8:	2300      	movs	r3, #0
 8004fca:	9303      	str	r3, [sp, #12]
 8004fcc:	ab0a      	add	r3, sp, #40	; 0x28
 8004fce:	9302      	str	r3, [sp, #8]
 8004fd0:	ab09      	add	r3, sp, #36	; 0x24
 8004fd2:	9300      	str	r3, [sp, #0]
 8004fd4:	ec49 8b10 	vmov	d0, r8, r9
 8004fd8:	6022      	str	r2, [r4, #0]
 8004fda:	f8cd a004 	str.w	sl, [sp, #4]
 8004fde:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004fe2:	4628      	mov	r0, r5
 8004fe4:	f7ff fea8 	bl	8004d38 <__cvt>
 8004fe8:	4680      	mov	r8, r0
 8004fea:	e7be      	b.n	8004f6a <_printf_float+0x106>
 8004fec:	2301      	movs	r3, #1
 8004fee:	e7a5      	b.n	8004f3c <_printf_float+0xd8>
 8004ff0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004ff4:	d119      	bne.n	800502a <_printf_float+0x1c6>
 8004ff6:	2900      	cmp	r1, #0
 8004ff8:	6863      	ldr	r3, [r4, #4]
 8004ffa:	dd0c      	ble.n	8005016 <_printf_float+0x1b2>
 8004ffc:	6121      	str	r1, [r4, #16]
 8004ffe:	b913      	cbnz	r3, 8005006 <_printf_float+0x1a2>
 8005000:	6822      	ldr	r2, [r4, #0]
 8005002:	07d2      	lsls	r2, r2, #31
 8005004:	d502      	bpl.n	800500c <_printf_float+0x1a8>
 8005006:	3301      	adds	r3, #1
 8005008:	440b      	add	r3, r1
 800500a:	6123      	str	r3, [r4, #16]
 800500c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800500e:	65a3      	str	r3, [r4, #88]	; 0x58
 8005010:	f04f 0900 	mov.w	r9, #0
 8005014:	e7c9      	b.n	8004faa <_printf_float+0x146>
 8005016:	b913      	cbnz	r3, 800501e <_printf_float+0x1ba>
 8005018:	6822      	ldr	r2, [r4, #0]
 800501a:	07d0      	lsls	r0, r2, #31
 800501c:	d501      	bpl.n	8005022 <_printf_float+0x1be>
 800501e:	3302      	adds	r3, #2
 8005020:	e7f3      	b.n	800500a <_printf_float+0x1a6>
 8005022:	2301      	movs	r3, #1
 8005024:	e7f1      	b.n	800500a <_printf_float+0x1a6>
 8005026:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800502a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800502c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800502e:	4293      	cmp	r3, r2
 8005030:	db05      	blt.n	800503e <_printf_float+0x1da>
 8005032:	6822      	ldr	r2, [r4, #0]
 8005034:	6123      	str	r3, [r4, #16]
 8005036:	07d1      	lsls	r1, r2, #31
 8005038:	d5e8      	bpl.n	800500c <_printf_float+0x1a8>
 800503a:	3301      	adds	r3, #1
 800503c:	e7e5      	b.n	800500a <_printf_float+0x1a6>
 800503e:	2b00      	cmp	r3, #0
 8005040:	bfd4      	ite	le
 8005042:	f1c3 0302 	rsble	r3, r3, #2
 8005046:	2301      	movgt	r3, #1
 8005048:	4413      	add	r3, r2
 800504a:	e7de      	b.n	800500a <_printf_float+0x1a6>
 800504c:	6823      	ldr	r3, [r4, #0]
 800504e:	055a      	lsls	r2, r3, #21
 8005050:	d407      	bmi.n	8005062 <_printf_float+0x1fe>
 8005052:	6923      	ldr	r3, [r4, #16]
 8005054:	4642      	mov	r2, r8
 8005056:	4631      	mov	r1, r6
 8005058:	4628      	mov	r0, r5
 800505a:	47b8      	blx	r7
 800505c:	3001      	adds	r0, #1
 800505e:	d12b      	bne.n	80050b8 <_printf_float+0x254>
 8005060:	e761      	b.n	8004f26 <_printf_float+0xc2>
 8005062:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005066:	f240 80e2 	bls.w	800522e <_printf_float+0x3ca>
 800506a:	2200      	movs	r2, #0
 800506c:	2300      	movs	r3, #0
 800506e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005072:	f7fb fd25 	bl	8000ac0 <__aeabi_dcmpeq>
 8005076:	2800      	cmp	r0, #0
 8005078:	d03c      	beq.n	80050f4 <_printf_float+0x290>
 800507a:	2301      	movs	r3, #1
 800507c:	4a38      	ldr	r2, [pc, #224]	; (8005160 <_printf_float+0x2fc>)
 800507e:	4631      	mov	r1, r6
 8005080:	4628      	mov	r0, r5
 8005082:	47b8      	blx	r7
 8005084:	3001      	adds	r0, #1
 8005086:	f43f af4e 	beq.w	8004f26 <_printf_float+0xc2>
 800508a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800508c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800508e:	429a      	cmp	r2, r3
 8005090:	db02      	blt.n	8005098 <_printf_float+0x234>
 8005092:	6823      	ldr	r3, [r4, #0]
 8005094:	07d8      	lsls	r0, r3, #31
 8005096:	d50f      	bpl.n	80050b8 <_printf_float+0x254>
 8005098:	9b05      	ldr	r3, [sp, #20]
 800509a:	9a04      	ldr	r2, [sp, #16]
 800509c:	4631      	mov	r1, r6
 800509e:	4628      	mov	r0, r5
 80050a0:	47b8      	blx	r7
 80050a2:	3001      	adds	r0, #1
 80050a4:	f43f af3f 	beq.w	8004f26 <_printf_float+0xc2>
 80050a8:	f04f 0800 	mov.w	r8, #0
 80050ac:	f104 091a 	add.w	r9, r4, #26
 80050b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050b2:	3b01      	subs	r3, #1
 80050b4:	4598      	cmp	r8, r3
 80050b6:	db12      	blt.n	80050de <_printf_float+0x27a>
 80050b8:	6823      	ldr	r3, [r4, #0]
 80050ba:	079b      	lsls	r3, r3, #30
 80050bc:	d509      	bpl.n	80050d2 <_printf_float+0x26e>
 80050be:	f04f 0800 	mov.w	r8, #0
 80050c2:	f104 0919 	add.w	r9, r4, #25
 80050c6:	68e3      	ldr	r3, [r4, #12]
 80050c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80050ca:	1a9b      	subs	r3, r3, r2
 80050cc:	4598      	cmp	r8, r3
 80050ce:	f2c0 80ee 	blt.w	80052ae <_printf_float+0x44a>
 80050d2:	68e0      	ldr	r0, [r4, #12]
 80050d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050d6:	4298      	cmp	r0, r3
 80050d8:	bfb8      	it	lt
 80050da:	4618      	movlt	r0, r3
 80050dc:	e725      	b.n	8004f2a <_printf_float+0xc6>
 80050de:	2301      	movs	r3, #1
 80050e0:	464a      	mov	r2, r9
 80050e2:	4631      	mov	r1, r6
 80050e4:	4628      	mov	r0, r5
 80050e6:	47b8      	blx	r7
 80050e8:	3001      	adds	r0, #1
 80050ea:	f43f af1c 	beq.w	8004f26 <_printf_float+0xc2>
 80050ee:	f108 0801 	add.w	r8, r8, #1
 80050f2:	e7dd      	b.n	80050b0 <_printf_float+0x24c>
 80050f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	dc34      	bgt.n	8005164 <_printf_float+0x300>
 80050fa:	2301      	movs	r3, #1
 80050fc:	4a18      	ldr	r2, [pc, #96]	; (8005160 <_printf_float+0x2fc>)
 80050fe:	4631      	mov	r1, r6
 8005100:	4628      	mov	r0, r5
 8005102:	47b8      	blx	r7
 8005104:	3001      	adds	r0, #1
 8005106:	f43f af0e 	beq.w	8004f26 <_printf_float+0xc2>
 800510a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800510c:	b923      	cbnz	r3, 8005118 <_printf_float+0x2b4>
 800510e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005110:	b913      	cbnz	r3, 8005118 <_printf_float+0x2b4>
 8005112:	6823      	ldr	r3, [r4, #0]
 8005114:	07d9      	lsls	r1, r3, #31
 8005116:	d5cf      	bpl.n	80050b8 <_printf_float+0x254>
 8005118:	9b05      	ldr	r3, [sp, #20]
 800511a:	9a04      	ldr	r2, [sp, #16]
 800511c:	4631      	mov	r1, r6
 800511e:	4628      	mov	r0, r5
 8005120:	47b8      	blx	r7
 8005122:	3001      	adds	r0, #1
 8005124:	f43f aeff 	beq.w	8004f26 <_printf_float+0xc2>
 8005128:	f04f 0900 	mov.w	r9, #0
 800512c:	f104 0a1a 	add.w	sl, r4, #26
 8005130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005132:	425b      	negs	r3, r3
 8005134:	4599      	cmp	r9, r3
 8005136:	db01      	blt.n	800513c <_printf_float+0x2d8>
 8005138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800513a:	e78b      	b.n	8005054 <_printf_float+0x1f0>
 800513c:	2301      	movs	r3, #1
 800513e:	4652      	mov	r2, sl
 8005140:	4631      	mov	r1, r6
 8005142:	4628      	mov	r0, r5
 8005144:	47b8      	blx	r7
 8005146:	3001      	adds	r0, #1
 8005148:	f43f aeed 	beq.w	8004f26 <_printf_float+0xc2>
 800514c:	f109 0901 	add.w	r9, r9, #1
 8005150:	e7ee      	b.n	8005130 <_printf_float+0x2cc>
 8005152:	bf00      	nop
 8005154:	7fefffff 	.word	0x7fefffff
 8005158:	08007864 	.word	0x08007864
 800515c:	08007868 	.word	0x08007868
 8005160:	08007874 	.word	0x08007874
 8005164:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005166:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005168:	429a      	cmp	r2, r3
 800516a:	bfa8      	it	ge
 800516c:	461a      	movge	r2, r3
 800516e:	2a00      	cmp	r2, #0
 8005170:	4691      	mov	r9, r2
 8005172:	dc38      	bgt.n	80051e6 <_printf_float+0x382>
 8005174:	f104 031a 	add.w	r3, r4, #26
 8005178:	f04f 0b00 	mov.w	fp, #0
 800517c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005180:	9306      	str	r3, [sp, #24]
 8005182:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005186:	ebaa 0309 	sub.w	r3, sl, r9
 800518a:	459b      	cmp	fp, r3
 800518c:	db33      	blt.n	80051f6 <_printf_float+0x392>
 800518e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005190:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005192:	429a      	cmp	r2, r3
 8005194:	db3a      	blt.n	800520c <_printf_float+0x3a8>
 8005196:	6823      	ldr	r3, [r4, #0]
 8005198:	07da      	lsls	r2, r3, #31
 800519a:	d437      	bmi.n	800520c <_printf_float+0x3a8>
 800519c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800519e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80051a0:	eba3 020a 	sub.w	r2, r3, sl
 80051a4:	eba3 0901 	sub.w	r9, r3, r1
 80051a8:	4591      	cmp	r9, r2
 80051aa:	bfa8      	it	ge
 80051ac:	4691      	movge	r9, r2
 80051ae:	f1b9 0f00 	cmp.w	r9, #0
 80051b2:	dc33      	bgt.n	800521c <_printf_float+0x3b8>
 80051b4:	f04f 0800 	mov.w	r8, #0
 80051b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051bc:	f104 0a1a 	add.w	sl, r4, #26
 80051c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051c4:	1a9b      	subs	r3, r3, r2
 80051c6:	eba3 0309 	sub.w	r3, r3, r9
 80051ca:	4598      	cmp	r8, r3
 80051cc:	f6bf af74 	bge.w	80050b8 <_printf_float+0x254>
 80051d0:	2301      	movs	r3, #1
 80051d2:	4652      	mov	r2, sl
 80051d4:	4631      	mov	r1, r6
 80051d6:	4628      	mov	r0, r5
 80051d8:	47b8      	blx	r7
 80051da:	3001      	adds	r0, #1
 80051dc:	f43f aea3 	beq.w	8004f26 <_printf_float+0xc2>
 80051e0:	f108 0801 	add.w	r8, r8, #1
 80051e4:	e7ec      	b.n	80051c0 <_printf_float+0x35c>
 80051e6:	4613      	mov	r3, r2
 80051e8:	4631      	mov	r1, r6
 80051ea:	4642      	mov	r2, r8
 80051ec:	4628      	mov	r0, r5
 80051ee:	47b8      	blx	r7
 80051f0:	3001      	adds	r0, #1
 80051f2:	d1bf      	bne.n	8005174 <_printf_float+0x310>
 80051f4:	e697      	b.n	8004f26 <_printf_float+0xc2>
 80051f6:	2301      	movs	r3, #1
 80051f8:	9a06      	ldr	r2, [sp, #24]
 80051fa:	4631      	mov	r1, r6
 80051fc:	4628      	mov	r0, r5
 80051fe:	47b8      	blx	r7
 8005200:	3001      	adds	r0, #1
 8005202:	f43f ae90 	beq.w	8004f26 <_printf_float+0xc2>
 8005206:	f10b 0b01 	add.w	fp, fp, #1
 800520a:	e7ba      	b.n	8005182 <_printf_float+0x31e>
 800520c:	9b05      	ldr	r3, [sp, #20]
 800520e:	9a04      	ldr	r2, [sp, #16]
 8005210:	4631      	mov	r1, r6
 8005212:	4628      	mov	r0, r5
 8005214:	47b8      	blx	r7
 8005216:	3001      	adds	r0, #1
 8005218:	d1c0      	bne.n	800519c <_printf_float+0x338>
 800521a:	e684      	b.n	8004f26 <_printf_float+0xc2>
 800521c:	464b      	mov	r3, r9
 800521e:	eb08 020a 	add.w	r2, r8, sl
 8005222:	4631      	mov	r1, r6
 8005224:	4628      	mov	r0, r5
 8005226:	47b8      	blx	r7
 8005228:	3001      	adds	r0, #1
 800522a:	d1c3      	bne.n	80051b4 <_printf_float+0x350>
 800522c:	e67b      	b.n	8004f26 <_printf_float+0xc2>
 800522e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005230:	2a01      	cmp	r2, #1
 8005232:	dc01      	bgt.n	8005238 <_printf_float+0x3d4>
 8005234:	07db      	lsls	r3, r3, #31
 8005236:	d537      	bpl.n	80052a8 <_printf_float+0x444>
 8005238:	2301      	movs	r3, #1
 800523a:	4642      	mov	r2, r8
 800523c:	4631      	mov	r1, r6
 800523e:	4628      	mov	r0, r5
 8005240:	47b8      	blx	r7
 8005242:	3001      	adds	r0, #1
 8005244:	f43f ae6f 	beq.w	8004f26 <_printf_float+0xc2>
 8005248:	9b05      	ldr	r3, [sp, #20]
 800524a:	9a04      	ldr	r2, [sp, #16]
 800524c:	4631      	mov	r1, r6
 800524e:	4628      	mov	r0, r5
 8005250:	47b8      	blx	r7
 8005252:	3001      	adds	r0, #1
 8005254:	f43f ae67 	beq.w	8004f26 <_printf_float+0xc2>
 8005258:	2200      	movs	r2, #0
 800525a:	2300      	movs	r3, #0
 800525c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005260:	f7fb fc2e 	bl	8000ac0 <__aeabi_dcmpeq>
 8005264:	b158      	cbz	r0, 800527e <_printf_float+0x41a>
 8005266:	f04f 0800 	mov.w	r8, #0
 800526a:	f104 0a1a 	add.w	sl, r4, #26
 800526e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005270:	3b01      	subs	r3, #1
 8005272:	4598      	cmp	r8, r3
 8005274:	db0d      	blt.n	8005292 <_printf_float+0x42e>
 8005276:	464b      	mov	r3, r9
 8005278:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800527c:	e6eb      	b.n	8005056 <_printf_float+0x1f2>
 800527e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005280:	f108 0201 	add.w	r2, r8, #1
 8005284:	3b01      	subs	r3, #1
 8005286:	4631      	mov	r1, r6
 8005288:	4628      	mov	r0, r5
 800528a:	47b8      	blx	r7
 800528c:	3001      	adds	r0, #1
 800528e:	d1f2      	bne.n	8005276 <_printf_float+0x412>
 8005290:	e649      	b.n	8004f26 <_printf_float+0xc2>
 8005292:	2301      	movs	r3, #1
 8005294:	4652      	mov	r2, sl
 8005296:	4631      	mov	r1, r6
 8005298:	4628      	mov	r0, r5
 800529a:	47b8      	blx	r7
 800529c:	3001      	adds	r0, #1
 800529e:	f43f ae42 	beq.w	8004f26 <_printf_float+0xc2>
 80052a2:	f108 0801 	add.w	r8, r8, #1
 80052a6:	e7e2      	b.n	800526e <_printf_float+0x40a>
 80052a8:	2301      	movs	r3, #1
 80052aa:	4642      	mov	r2, r8
 80052ac:	e7eb      	b.n	8005286 <_printf_float+0x422>
 80052ae:	2301      	movs	r3, #1
 80052b0:	464a      	mov	r2, r9
 80052b2:	4631      	mov	r1, r6
 80052b4:	4628      	mov	r0, r5
 80052b6:	47b8      	blx	r7
 80052b8:	3001      	adds	r0, #1
 80052ba:	f43f ae34 	beq.w	8004f26 <_printf_float+0xc2>
 80052be:	f108 0801 	add.w	r8, r8, #1
 80052c2:	e700      	b.n	80050c6 <_printf_float+0x262>
 80052c4:	4642      	mov	r2, r8
 80052c6:	464b      	mov	r3, r9
 80052c8:	4640      	mov	r0, r8
 80052ca:	4649      	mov	r1, r9
 80052cc:	f7fb fc2a 	bl	8000b24 <__aeabi_dcmpun>
 80052d0:	2800      	cmp	r0, #0
 80052d2:	f43f ae2d 	beq.w	8004f30 <_printf_float+0xcc>
 80052d6:	4b01      	ldr	r3, [pc, #4]	; (80052dc <_printf_float+0x478>)
 80052d8:	4a01      	ldr	r2, [pc, #4]	; (80052e0 <_printf_float+0x47c>)
 80052da:	e60e      	b.n	8004efa <_printf_float+0x96>
 80052dc:	0800786c 	.word	0x0800786c
 80052e0:	08007870 	.word	0x08007870

080052e4 <_printf_common>:
 80052e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052e8:	4691      	mov	r9, r2
 80052ea:	461f      	mov	r7, r3
 80052ec:	688a      	ldr	r2, [r1, #8]
 80052ee:	690b      	ldr	r3, [r1, #16]
 80052f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052f4:	4293      	cmp	r3, r2
 80052f6:	bfb8      	it	lt
 80052f8:	4613      	movlt	r3, r2
 80052fa:	f8c9 3000 	str.w	r3, [r9]
 80052fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005302:	4606      	mov	r6, r0
 8005304:	460c      	mov	r4, r1
 8005306:	b112      	cbz	r2, 800530e <_printf_common+0x2a>
 8005308:	3301      	adds	r3, #1
 800530a:	f8c9 3000 	str.w	r3, [r9]
 800530e:	6823      	ldr	r3, [r4, #0]
 8005310:	0699      	lsls	r1, r3, #26
 8005312:	bf42      	ittt	mi
 8005314:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005318:	3302      	addmi	r3, #2
 800531a:	f8c9 3000 	strmi.w	r3, [r9]
 800531e:	6825      	ldr	r5, [r4, #0]
 8005320:	f015 0506 	ands.w	r5, r5, #6
 8005324:	d107      	bne.n	8005336 <_printf_common+0x52>
 8005326:	f104 0a19 	add.w	sl, r4, #25
 800532a:	68e3      	ldr	r3, [r4, #12]
 800532c:	f8d9 2000 	ldr.w	r2, [r9]
 8005330:	1a9b      	subs	r3, r3, r2
 8005332:	429d      	cmp	r5, r3
 8005334:	db29      	blt.n	800538a <_printf_common+0xa6>
 8005336:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800533a:	6822      	ldr	r2, [r4, #0]
 800533c:	3300      	adds	r3, #0
 800533e:	bf18      	it	ne
 8005340:	2301      	movne	r3, #1
 8005342:	0692      	lsls	r2, r2, #26
 8005344:	d42e      	bmi.n	80053a4 <_printf_common+0xc0>
 8005346:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800534a:	4639      	mov	r1, r7
 800534c:	4630      	mov	r0, r6
 800534e:	47c0      	blx	r8
 8005350:	3001      	adds	r0, #1
 8005352:	d021      	beq.n	8005398 <_printf_common+0xb4>
 8005354:	6823      	ldr	r3, [r4, #0]
 8005356:	68e5      	ldr	r5, [r4, #12]
 8005358:	f8d9 2000 	ldr.w	r2, [r9]
 800535c:	f003 0306 	and.w	r3, r3, #6
 8005360:	2b04      	cmp	r3, #4
 8005362:	bf08      	it	eq
 8005364:	1aad      	subeq	r5, r5, r2
 8005366:	68a3      	ldr	r3, [r4, #8]
 8005368:	6922      	ldr	r2, [r4, #16]
 800536a:	bf0c      	ite	eq
 800536c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005370:	2500      	movne	r5, #0
 8005372:	4293      	cmp	r3, r2
 8005374:	bfc4      	itt	gt
 8005376:	1a9b      	subgt	r3, r3, r2
 8005378:	18ed      	addgt	r5, r5, r3
 800537a:	f04f 0900 	mov.w	r9, #0
 800537e:	341a      	adds	r4, #26
 8005380:	454d      	cmp	r5, r9
 8005382:	d11b      	bne.n	80053bc <_printf_common+0xd8>
 8005384:	2000      	movs	r0, #0
 8005386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800538a:	2301      	movs	r3, #1
 800538c:	4652      	mov	r2, sl
 800538e:	4639      	mov	r1, r7
 8005390:	4630      	mov	r0, r6
 8005392:	47c0      	blx	r8
 8005394:	3001      	adds	r0, #1
 8005396:	d103      	bne.n	80053a0 <_printf_common+0xbc>
 8005398:	f04f 30ff 	mov.w	r0, #4294967295
 800539c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053a0:	3501      	adds	r5, #1
 80053a2:	e7c2      	b.n	800532a <_printf_common+0x46>
 80053a4:	18e1      	adds	r1, r4, r3
 80053a6:	1c5a      	adds	r2, r3, #1
 80053a8:	2030      	movs	r0, #48	; 0x30
 80053aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053ae:	4422      	add	r2, r4
 80053b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053b8:	3302      	adds	r3, #2
 80053ba:	e7c4      	b.n	8005346 <_printf_common+0x62>
 80053bc:	2301      	movs	r3, #1
 80053be:	4622      	mov	r2, r4
 80053c0:	4639      	mov	r1, r7
 80053c2:	4630      	mov	r0, r6
 80053c4:	47c0      	blx	r8
 80053c6:	3001      	adds	r0, #1
 80053c8:	d0e6      	beq.n	8005398 <_printf_common+0xb4>
 80053ca:	f109 0901 	add.w	r9, r9, #1
 80053ce:	e7d7      	b.n	8005380 <_printf_common+0x9c>

080053d0 <_printf_i>:
 80053d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80053d4:	4617      	mov	r7, r2
 80053d6:	7e0a      	ldrb	r2, [r1, #24]
 80053d8:	b085      	sub	sp, #20
 80053da:	2a6e      	cmp	r2, #110	; 0x6e
 80053dc:	4698      	mov	r8, r3
 80053de:	4606      	mov	r6, r0
 80053e0:	460c      	mov	r4, r1
 80053e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80053e4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80053e8:	f000 80bc 	beq.w	8005564 <_printf_i+0x194>
 80053ec:	d81a      	bhi.n	8005424 <_printf_i+0x54>
 80053ee:	2a63      	cmp	r2, #99	; 0x63
 80053f0:	d02e      	beq.n	8005450 <_printf_i+0x80>
 80053f2:	d80a      	bhi.n	800540a <_printf_i+0x3a>
 80053f4:	2a00      	cmp	r2, #0
 80053f6:	f000 80c8 	beq.w	800558a <_printf_i+0x1ba>
 80053fa:	2a58      	cmp	r2, #88	; 0x58
 80053fc:	f000 808a 	beq.w	8005514 <_printf_i+0x144>
 8005400:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005404:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8005408:	e02a      	b.n	8005460 <_printf_i+0x90>
 800540a:	2a64      	cmp	r2, #100	; 0x64
 800540c:	d001      	beq.n	8005412 <_printf_i+0x42>
 800540e:	2a69      	cmp	r2, #105	; 0x69
 8005410:	d1f6      	bne.n	8005400 <_printf_i+0x30>
 8005412:	6821      	ldr	r1, [r4, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	f011 0f80 	tst.w	r1, #128	; 0x80
 800541a:	d023      	beq.n	8005464 <_printf_i+0x94>
 800541c:	1d11      	adds	r1, r2, #4
 800541e:	6019      	str	r1, [r3, #0]
 8005420:	6813      	ldr	r3, [r2, #0]
 8005422:	e027      	b.n	8005474 <_printf_i+0xa4>
 8005424:	2a73      	cmp	r2, #115	; 0x73
 8005426:	f000 80b4 	beq.w	8005592 <_printf_i+0x1c2>
 800542a:	d808      	bhi.n	800543e <_printf_i+0x6e>
 800542c:	2a6f      	cmp	r2, #111	; 0x6f
 800542e:	d02a      	beq.n	8005486 <_printf_i+0xb6>
 8005430:	2a70      	cmp	r2, #112	; 0x70
 8005432:	d1e5      	bne.n	8005400 <_printf_i+0x30>
 8005434:	680a      	ldr	r2, [r1, #0]
 8005436:	f042 0220 	orr.w	r2, r2, #32
 800543a:	600a      	str	r2, [r1, #0]
 800543c:	e003      	b.n	8005446 <_printf_i+0x76>
 800543e:	2a75      	cmp	r2, #117	; 0x75
 8005440:	d021      	beq.n	8005486 <_printf_i+0xb6>
 8005442:	2a78      	cmp	r2, #120	; 0x78
 8005444:	d1dc      	bne.n	8005400 <_printf_i+0x30>
 8005446:	2278      	movs	r2, #120	; 0x78
 8005448:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800544c:	496e      	ldr	r1, [pc, #440]	; (8005608 <_printf_i+0x238>)
 800544e:	e064      	b.n	800551a <_printf_i+0x14a>
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8005456:	1d11      	adds	r1, r2, #4
 8005458:	6019      	str	r1, [r3, #0]
 800545a:	6813      	ldr	r3, [r2, #0]
 800545c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005460:	2301      	movs	r3, #1
 8005462:	e0a3      	b.n	80055ac <_printf_i+0x1dc>
 8005464:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005468:	f102 0104 	add.w	r1, r2, #4
 800546c:	6019      	str	r1, [r3, #0]
 800546e:	d0d7      	beq.n	8005420 <_printf_i+0x50>
 8005470:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005474:	2b00      	cmp	r3, #0
 8005476:	da03      	bge.n	8005480 <_printf_i+0xb0>
 8005478:	222d      	movs	r2, #45	; 0x2d
 800547a:	425b      	negs	r3, r3
 800547c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005480:	4962      	ldr	r1, [pc, #392]	; (800560c <_printf_i+0x23c>)
 8005482:	220a      	movs	r2, #10
 8005484:	e017      	b.n	80054b6 <_printf_i+0xe6>
 8005486:	6820      	ldr	r0, [r4, #0]
 8005488:	6819      	ldr	r1, [r3, #0]
 800548a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800548e:	d003      	beq.n	8005498 <_printf_i+0xc8>
 8005490:	1d08      	adds	r0, r1, #4
 8005492:	6018      	str	r0, [r3, #0]
 8005494:	680b      	ldr	r3, [r1, #0]
 8005496:	e006      	b.n	80054a6 <_printf_i+0xd6>
 8005498:	f010 0f40 	tst.w	r0, #64	; 0x40
 800549c:	f101 0004 	add.w	r0, r1, #4
 80054a0:	6018      	str	r0, [r3, #0]
 80054a2:	d0f7      	beq.n	8005494 <_printf_i+0xc4>
 80054a4:	880b      	ldrh	r3, [r1, #0]
 80054a6:	4959      	ldr	r1, [pc, #356]	; (800560c <_printf_i+0x23c>)
 80054a8:	2a6f      	cmp	r2, #111	; 0x6f
 80054aa:	bf14      	ite	ne
 80054ac:	220a      	movne	r2, #10
 80054ae:	2208      	moveq	r2, #8
 80054b0:	2000      	movs	r0, #0
 80054b2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80054b6:	6865      	ldr	r5, [r4, #4]
 80054b8:	60a5      	str	r5, [r4, #8]
 80054ba:	2d00      	cmp	r5, #0
 80054bc:	f2c0 809c 	blt.w	80055f8 <_printf_i+0x228>
 80054c0:	6820      	ldr	r0, [r4, #0]
 80054c2:	f020 0004 	bic.w	r0, r0, #4
 80054c6:	6020      	str	r0, [r4, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d13f      	bne.n	800554c <_printf_i+0x17c>
 80054cc:	2d00      	cmp	r5, #0
 80054ce:	f040 8095 	bne.w	80055fc <_printf_i+0x22c>
 80054d2:	4675      	mov	r5, lr
 80054d4:	2a08      	cmp	r2, #8
 80054d6:	d10b      	bne.n	80054f0 <_printf_i+0x120>
 80054d8:	6823      	ldr	r3, [r4, #0]
 80054da:	07da      	lsls	r2, r3, #31
 80054dc:	d508      	bpl.n	80054f0 <_printf_i+0x120>
 80054de:	6923      	ldr	r3, [r4, #16]
 80054e0:	6862      	ldr	r2, [r4, #4]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	bfde      	ittt	le
 80054e6:	2330      	movle	r3, #48	; 0x30
 80054e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80054ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80054f0:	ebae 0305 	sub.w	r3, lr, r5
 80054f4:	6123      	str	r3, [r4, #16]
 80054f6:	f8cd 8000 	str.w	r8, [sp]
 80054fa:	463b      	mov	r3, r7
 80054fc:	aa03      	add	r2, sp, #12
 80054fe:	4621      	mov	r1, r4
 8005500:	4630      	mov	r0, r6
 8005502:	f7ff feef 	bl	80052e4 <_printf_common>
 8005506:	3001      	adds	r0, #1
 8005508:	d155      	bne.n	80055b6 <_printf_i+0x1e6>
 800550a:	f04f 30ff 	mov.w	r0, #4294967295
 800550e:	b005      	add	sp, #20
 8005510:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005514:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005518:	493c      	ldr	r1, [pc, #240]	; (800560c <_printf_i+0x23c>)
 800551a:	6822      	ldr	r2, [r4, #0]
 800551c:	6818      	ldr	r0, [r3, #0]
 800551e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005522:	f100 0504 	add.w	r5, r0, #4
 8005526:	601d      	str	r5, [r3, #0]
 8005528:	d001      	beq.n	800552e <_printf_i+0x15e>
 800552a:	6803      	ldr	r3, [r0, #0]
 800552c:	e002      	b.n	8005534 <_printf_i+0x164>
 800552e:	0655      	lsls	r5, r2, #25
 8005530:	d5fb      	bpl.n	800552a <_printf_i+0x15a>
 8005532:	8803      	ldrh	r3, [r0, #0]
 8005534:	07d0      	lsls	r0, r2, #31
 8005536:	bf44      	itt	mi
 8005538:	f042 0220 	orrmi.w	r2, r2, #32
 800553c:	6022      	strmi	r2, [r4, #0]
 800553e:	b91b      	cbnz	r3, 8005548 <_printf_i+0x178>
 8005540:	6822      	ldr	r2, [r4, #0]
 8005542:	f022 0220 	bic.w	r2, r2, #32
 8005546:	6022      	str	r2, [r4, #0]
 8005548:	2210      	movs	r2, #16
 800554a:	e7b1      	b.n	80054b0 <_printf_i+0xe0>
 800554c:	4675      	mov	r5, lr
 800554e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005552:	fb02 3310 	mls	r3, r2, r0, r3
 8005556:	5ccb      	ldrb	r3, [r1, r3]
 8005558:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800555c:	4603      	mov	r3, r0
 800555e:	2800      	cmp	r0, #0
 8005560:	d1f5      	bne.n	800554e <_printf_i+0x17e>
 8005562:	e7b7      	b.n	80054d4 <_printf_i+0x104>
 8005564:	6808      	ldr	r0, [r1, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	6949      	ldr	r1, [r1, #20]
 800556a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800556e:	d004      	beq.n	800557a <_printf_i+0x1aa>
 8005570:	1d10      	adds	r0, r2, #4
 8005572:	6018      	str	r0, [r3, #0]
 8005574:	6813      	ldr	r3, [r2, #0]
 8005576:	6019      	str	r1, [r3, #0]
 8005578:	e007      	b.n	800558a <_printf_i+0x1ba>
 800557a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800557e:	f102 0004 	add.w	r0, r2, #4
 8005582:	6018      	str	r0, [r3, #0]
 8005584:	6813      	ldr	r3, [r2, #0]
 8005586:	d0f6      	beq.n	8005576 <_printf_i+0x1a6>
 8005588:	8019      	strh	r1, [r3, #0]
 800558a:	2300      	movs	r3, #0
 800558c:	6123      	str	r3, [r4, #16]
 800558e:	4675      	mov	r5, lr
 8005590:	e7b1      	b.n	80054f6 <_printf_i+0x126>
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	1d11      	adds	r1, r2, #4
 8005596:	6019      	str	r1, [r3, #0]
 8005598:	6815      	ldr	r5, [r2, #0]
 800559a:	6862      	ldr	r2, [r4, #4]
 800559c:	2100      	movs	r1, #0
 800559e:	4628      	mov	r0, r5
 80055a0:	f7fa fe1e 	bl	80001e0 <memchr>
 80055a4:	b108      	cbz	r0, 80055aa <_printf_i+0x1da>
 80055a6:	1b40      	subs	r0, r0, r5
 80055a8:	6060      	str	r0, [r4, #4]
 80055aa:	6863      	ldr	r3, [r4, #4]
 80055ac:	6123      	str	r3, [r4, #16]
 80055ae:	2300      	movs	r3, #0
 80055b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055b4:	e79f      	b.n	80054f6 <_printf_i+0x126>
 80055b6:	6923      	ldr	r3, [r4, #16]
 80055b8:	462a      	mov	r2, r5
 80055ba:	4639      	mov	r1, r7
 80055bc:	4630      	mov	r0, r6
 80055be:	47c0      	blx	r8
 80055c0:	3001      	adds	r0, #1
 80055c2:	d0a2      	beq.n	800550a <_printf_i+0x13a>
 80055c4:	6823      	ldr	r3, [r4, #0]
 80055c6:	079b      	lsls	r3, r3, #30
 80055c8:	d507      	bpl.n	80055da <_printf_i+0x20a>
 80055ca:	2500      	movs	r5, #0
 80055cc:	f104 0919 	add.w	r9, r4, #25
 80055d0:	68e3      	ldr	r3, [r4, #12]
 80055d2:	9a03      	ldr	r2, [sp, #12]
 80055d4:	1a9b      	subs	r3, r3, r2
 80055d6:	429d      	cmp	r5, r3
 80055d8:	db05      	blt.n	80055e6 <_printf_i+0x216>
 80055da:	68e0      	ldr	r0, [r4, #12]
 80055dc:	9b03      	ldr	r3, [sp, #12]
 80055de:	4298      	cmp	r0, r3
 80055e0:	bfb8      	it	lt
 80055e2:	4618      	movlt	r0, r3
 80055e4:	e793      	b.n	800550e <_printf_i+0x13e>
 80055e6:	2301      	movs	r3, #1
 80055e8:	464a      	mov	r2, r9
 80055ea:	4639      	mov	r1, r7
 80055ec:	4630      	mov	r0, r6
 80055ee:	47c0      	blx	r8
 80055f0:	3001      	adds	r0, #1
 80055f2:	d08a      	beq.n	800550a <_printf_i+0x13a>
 80055f4:	3501      	adds	r5, #1
 80055f6:	e7eb      	b.n	80055d0 <_printf_i+0x200>
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1a7      	bne.n	800554c <_printf_i+0x17c>
 80055fc:	780b      	ldrb	r3, [r1, #0]
 80055fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005602:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005606:	e765      	b.n	80054d4 <_printf_i+0x104>
 8005608:	08007887 	.word	0x08007887
 800560c:	08007876 	.word	0x08007876

08005610 <iprintf>:
 8005610:	b40f      	push	{r0, r1, r2, r3}
 8005612:	4b0a      	ldr	r3, [pc, #40]	; (800563c <iprintf+0x2c>)
 8005614:	b513      	push	{r0, r1, r4, lr}
 8005616:	681c      	ldr	r4, [r3, #0]
 8005618:	b124      	cbz	r4, 8005624 <iprintf+0x14>
 800561a:	69a3      	ldr	r3, [r4, #24]
 800561c:	b913      	cbnz	r3, 8005624 <iprintf+0x14>
 800561e:	4620      	mov	r0, r4
 8005620:	f001 f87e 	bl	8006720 <__sinit>
 8005624:	ab05      	add	r3, sp, #20
 8005626:	9a04      	ldr	r2, [sp, #16]
 8005628:	68a1      	ldr	r1, [r4, #8]
 800562a:	9301      	str	r3, [sp, #4]
 800562c:	4620      	mov	r0, r4
 800562e:	f001 fd3b 	bl	80070a8 <_vfiprintf_r>
 8005632:	b002      	add	sp, #8
 8005634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005638:	b004      	add	sp, #16
 800563a:	4770      	bx	lr
 800563c:	20000004 	.word	0x20000004

08005640 <_puts_r>:
 8005640:	b570      	push	{r4, r5, r6, lr}
 8005642:	460e      	mov	r6, r1
 8005644:	4605      	mov	r5, r0
 8005646:	b118      	cbz	r0, 8005650 <_puts_r+0x10>
 8005648:	6983      	ldr	r3, [r0, #24]
 800564a:	b90b      	cbnz	r3, 8005650 <_puts_r+0x10>
 800564c:	f001 f868 	bl	8006720 <__sinit>
 8005650:	69ab      	ldr	r3, [r5, #24]
 8005652:	68ac      	ldr	r4, [r5, #8]
 8005654:	b913      	cbnz	r3, 800565c <_puts_r+0x1c>
 8005656:	4628      	mov	r0, r5
 8005658:	f001 f862 	bl	8006720 <__sinit>
 800565c:	4b23      	ldr	r3, [pc, #140]	; (80056ec <_puts_r+0xac>)
 800565e:	429c      	cmp	r4, r3
 8005660:	d117      	bne.n	8005692 <_puts_r+0x52>
 8005662:	686c      	ldr	r4, [r5, #4]
 8005664:	89a3      	ldrh	r3, [r4, #12]
 8005666:	071b      	lsls	r3, r3, #28
 8005668:	d51d      	bpl.n	80056a6 <_puts_r+0x66>
 800566a:	6923      	ldr	r3, [r4, #16]
 800566c:	b1db      	cbz	r3, 80056a6 <_puts_r+0x66>
 800566e:	3e01      	subs	r6, #1
 8005670:	68a3      	ldr	r3, [r4, #8]
 8005672:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005676:	3b01      	subs	r3, #1
 8005678:	60a3      	str	r3, [r4, #8]
 800567a:	b9e9      	cbnz	r1, 80056b8 <_puts_r+0x78>
 800567c:	2b00      	cmp	r3, #0
 800567e:	da2e      	bge.n	80056de <_puts_r+0x9e>
 8005680:	4622      	mov	r2, r4
 8005682:	210a      	movs	r1, #10
 8005684:	4628      	mov	r0, r5
 8005686:	f000 f83f 	bl	8005708 <__swbuf_r>
 800568a:	3001      	adds	r0, #1
 800568c:	d011      	beq.n	80056b2 <_puts_r+0x72>
 800568e:	200a      	movs	r0, #10
 8005690:	bd70      	pop	{r4, r5, r6, pc}
 8005692:	4b17      	ldr	r3, [pc, #92]	; (80056f0 <_puts_r+0xb0>)
 8005694:	429c      	cmp	r4, r3
 8005696:	d101      	bne.n	800569c <_puts_r+0x5c>
 8005698:	68ac      	ldr	r4, [r5, #8]
 800569a:	e7e3      	b.n	8005664 <_puts_r+0x24>
 800569c:	4b15      	ldr	r3, [pc, #84]	; (80056f4 <_puts_r+0xb4>)
 800569e:	429c      	cmp	r4, r3
 80056a0:	bf08      	it	eq
 80056a2:	68ec      	ldreq	r4, [r5, #12]
 80056a4:	e7de      	b.n	8005664 <_puts_r+0x24>
 80056a6:	4621      	mov	r1, r4
 80056a8:	4628      	mov	r0, r5
 80056aa:	f000 f87f 	bl	80057ac <__swsetup_r>
 80056ae:	2800      	cmp	r0, #0
 80056b0:	d0dd      	beq.n	800566e <_puts_r+0x2e>
 80056b2:	f04f 30ff 	mov.w	r0, #4294967295
 80056b6:	bd70      	pop	{r4, r5, r6, pc}
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	da04      	bge.n	80056c6 <_puts_r+0x86>
 80056bc:	69a2      	ldr	r2, [r4, #24]
 80056be:	4293      	cmp	r3, r2
 80056c0:	db06      	blt.n	80056d0 <_puts_r+0x90>
 80056c2:	290a      	cmp	r1, #10
 80056c4:	d004      	beq.n	80056d0 <_puts_r+0x90>
 80056c6:	6823      	ldr	r3, [r4, #0]
 80056c8:	1c5a      	adds	r2, r3, #1
 80056ca:	6022      	str	r2, [r4, #0]
 80056cc:	7019      	strb	r1, [r3, #0]
 80056ce:	e7cf      	b.n	8005670 <_puts_r+0x30>
 80056d0:	4622      	mov	r2, r4
 80056d2:	4628      	mov	r0, r5
 80056d4:	f000 f818 	bl	8005708 <__swbuf_r>
 80056d8:	3001      	adds	r0, #1
 80056da:	d1c9      	bne.n	8005670 <_puts_r+0x30>
 80056dc:	e7e9      	b.n	80056b2 <_puts_r+0x72>
 80056de:	6823      	ldr	r3, [r4, #0]
 80056e0:	200a      	movs	r0, #10
 80056e2:	1c5a      	adds	r2, r3, #1
 80056e4:	6022      	str	r2, [r4, #0]
 80056e6:	7018      	strb	r0, [r3, #0]
 80056e8:	bd70      	pop	{r4, r5, r6, pc}
 80056ea:	bf00      	nop
 80056ec:	080078c8 	.word	0x080078c8
 80056f0:	080078e8 	.word	0x080078e8
 80056f4:	080078a8 	.word	0x080078a8

080056f8 <puts>:
 80056f8:	4b02      	ldr	r3, [pc, #8]	; (8005704 <puts+0xc>)
 80056fa:	4601      	mov	r1, r0
 80056fc:	6818      	ldr	r0, [r3, #0]
 80056fe:	f7ff bf9f 	b.w	8005640 <_puts_r>
 8005702:	bf00      	nop
 8005704:	20000004 	.word	0x20000004

08005708 <__swbuf_r>:
 8005708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800570a:	460e      	mov	r6, r1
 800570c:	4614      	mov	r4, r2
 800570e:	4605      	mov	r5, r0
 8005710:	b118      	cbz	r0, 800571a <__swbuf_r+0x12>
 8005712:	6983      	ldr	r3, [r0, #24]
 8005714:	b90b      	cbnz	r3, 800571a <__swbuf_r+0x12>
 8005716:	f001 f803 	bl	8006720 <__sinit>
 800571a:	4b21      	ldr	r3, [pc, #132]	; (80057a0 <__swbuf_r+0x98>)
 800571c:	429c      	cmp	r4, r3
 800571e:	d12a      	bne.n	8005776 <__swbuf_r+0x6e>
 8005720:	686c      	ldr	r4, [r5, #4]
 8005722:	69a3      	ldr	r3, [r4, #24]
 8005724:	60a3      	str	r3, [r4, #8]
 8005726:	89a3      	ldrh	r3, [r4, #12]
 8005728:	071a      	lsls	r2, r3, #28
 800572a:	d52e      	bpl.n	800578a <__swbuf_r+0x82>
 800572c:	6923      	ldr	r3, [r4, #16]
 800572e:	b363      	cbz	r3, 800578a <__swbuf_r+0x82>
 8005730:	6923      	ldr	r3, [r4, #16]
 8005732:	6820      	ldr	r0, [r4, #0]
 8005734:	1ac0      	subs	r0, r0, r3
 8005736:	6963      	ldr	r3, [r4, #20]
 8005738:	b2f6      	uxtb	r6, r6
 800573a:	4298      	cmp	r0, r3
 800573c:	4637      	mov	r7, r6
 800573e:	db04      	blt.n	800574a <__swbuf_r+0x42>
 8005740:	4621      	mov	r1, r4
 8005742:	4628      	mov	r0, r5
 8005744:	f000 ff82 	bl	800664c <_fflush_r>
 8005748:	bb28      	cbnz	r0, 8005796 <__swbuf_r+0x8e>
 800574a:	68a3      	ldr	r3, [r4, #8]
 800574c:	3b01      	subs	r3, #1
 800574e:	60a3      	str	r3, [r4, #8]
 8005750:	6823      	ldr	r3, [r4, #0]
 8005752:	1c5a      	adds	r2, r3, #1
 8005754:	6022      	str	r2, [r4, #0]
 8005756:	701e      	strb	r6, [r3, #0]
 8005758:	6963      	ldr	r3, [r4, #20]
 800575a:	3001      	adds	r0, #1
 800575c:	4298      	cmp	r0, r3
 800575e:	d004      	beq.n	800576a <__swbuf_r+0x62>
 8005760:	89a3      	ldrh	r3, [r4, #12]
 8005762:	07db      	lsls	r3, r3, #31
 8005764:	d519      	bpl.n	800579a <__swbuf_r+0x92>
 8005766:	2e0a      	cmp	r6, #10
 8005768:	d117      	bne.n	800579a <__swbuf_r+0x92>
 800576a:	4621      	mov	r1, r4
 800576c:	4628      	mov	r0, r5
 800576e:	f000 ff6d 	bl	800664c <_fflush_r>
 8005772:	b190      	cbz	r0, 800579a <__swbuf_r+0x92>
 8005774:	e00f      	b.n	8005796 <__swbuf_r+0x8e>
 8005776:	4b0b      	ldr	r3, [pc, #44]	; (80057a4 <__swbuf_r+0x9c>)
 8005778:	429c      	cmp	r4, r3
 800577a:	d101      	bne.n	8005780 <__swbuf_r+0x78>
 800577c:	68ac      	ldr	r4, [r5, #8]
 800577e:	e7d0      	b.n	8005722 <__swbuf_r+0x1a>
 8005780:	4b09      	ldr	r3, [pc, #36]	; (80057a8 <__swbuf_r+0xa0>)
 8005782:	429c      	cmp	r4, r3
 8005784:	bf08      	it	eq
 8005786:	68ec      	ldreq	r4, [r5, #12]
 8005788:	e7cb      	b.n	8005722 <__swbuf_r+0x1a>
 800578a:	4621      	mov	r1, r4
 800578c:	4628      	mov	r0, r5
 800578e:	f000 f80d 	bl	80057ac <__swsetup_r>
 8005792:	2800      	cmp	r0, #0
 8005794:	d0cc      	beq.n	8005730 <__swbuf_r+0x28>
 8005796:	f04f 37ff 	mov.w	r7, #4294967295
 800579a:	4638      	mov	r0, r7
 800579c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800579e:	bf00      	nop
 80057a0:	080078c8 	.word	0x080078c8
 80057a4:	080078e8 	.word	0x080078e8
 80057a8:	080078a8 	.word	0x080078a8

080057ac <__swsetup_r>:
 80057ac:	4b32      	ldr	r3, [pc, #200]	; (8005878 <__swsetup_r+0xcc>)
 80057ae:	b570      	push	{r4, r5, r6, lr}
 80057b0:	681d      	ldr	r5, [r3, #0]
 80057b2:	4606      	mov	r6, r0
 80057b4:	460c      	mov	r4, r1
 80057b6:	b125      	cbz	r5, 80057c2 <__swsetup_r+0x16>
 80057b8:	69ab      	ldr	r3, [r5, #24]
 80057ba:	b913      	cbnz	r3, 80057c2 <__swsetup_r+0x16>
 80057bc:	4628      	mov	r0, r5
 80057be:	f000 ffaf 	bl	8006720 <__sinit>
 80057c2:	4b2e      	ldr	r3, [pc, #184]	; (800587c <__swsetup_r+0xd0>)
 80057c4:	429c      	cmp	r4, r3
 80057c6:	d10f      	bne.n	80057e8 <__swsetup_r+0x3c>
 80057c8:	686c      	ldr	r4, [r5, #4]
 80057ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	0715      	lsls	r5, r2, #28
 80057d2:	d42c      	bmi.n	800582e <__swsetup_r+0x82>
 80057d4:	06d0      	lsls	r0, r2, #27
 80057d6:	d411      	bmi.n	80057fc <__swsetup_r+0x50>
 80057d8:	2209      	movs	r2, #9
 80057da:	6032      	str	r2, [r6, #0]
 80057dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057e0:	81a3      	strh	r3, [r4, #12]
 80057e2:	f04f 30ff 	mov.w	r0, #4294967295
 80057e6:	bd70      	pop	{r4, r5, r6, pc}
 80057e8:	4b25      	ldr	r3, [pc, #148]	; (8005880 <__swsetup_r+0xd4>)
 80057ea:	429c      	cmp	r4, r3
 80057ec:	d101      	bne.n	80057f2 <__swsetup_r+0x46>
 80057ee:	68ac      	ldr	r4, [r5, #8]
 80057f0:	e7eb      	b.n	80057ca <__swsetup_r+0x1e>
 80057f2:	4b24      	ldr	r3, [pc, #144]	; (8005884 <__swsetup_r+0xd8>)
 80057f4:	429c      	cmp	r4, r3
 80057f6:	bf08      	it	eq
 80057f8:	68ec      	ldreq	r4, [r5, #12]
 80057fa:	e7e6      	b.n	80057ca <__swsetup_r+0x1e>
 80057fc:	0751      	lsls	r1, r2, #29
 80057fe:	d512      	bpl.n	8005826 <__swsetup_r+0x7a>
 8005800:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005802:	b141      	cbz	r1, 8005816 <__swsetup_r+0x6a>
 8005804:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005808:	4299      	cmp	r1, r3
 800580a:	d002      	beq.n	8005812 <__swsetup_r+0x66>
 800580c:	4630      	mov	r0, r6
 800580e:	f001 fb75 	bl	8006efc <_free_r>
 8005812:	2300      	movs	r3, #0
 8005814:	6363      	str	r3, [r4, #52]	; 0x34
 8005816:	89a3      	ldrh	r3, [r4, #12]
 8005818:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800581c:	81a3      	strh	r3, [r4, #12]
 800581e:	2300      	movs	r3, #0
 8005820:	6063      	str	r3, [r4, #4]
 8005822:	6923      	ldr	r3, [r4, #16]
 8005824:	6023      	str	r3, [r4, #0]
 8005826:	89a3      	ldrh	r3, [r4, #12]
 8005828:	f043 0308 	orr.w	r3, r3, #8
 800582c:	81a3      	strh	r3, [r4, #12]
 800582e:	6923      	ldr	r3, [r4, #16]
 8005830:	b94b      	cbnz	r3, 8005846 <__swsetup_r+0x9a>
 8005832:	89a3      	ldrh	r3, [r4, #12]
 8005834:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800583c:	d003      	beq.n	8005846 <__swsetup_r+0x9a>
 800583e:	4621      	mov	r1, r4
 8005840:	4630      	mov	r0, r6
 8005842:	f001 f829 	bl	8006898 <__smakebuf_r>
 8005846:	89a2      	ldrh	r2, [r4, #12]
 8005848:	f012 0301 	ands.w	r3, r2, #1
 800584c:	d00c      	beq.n	8005868 <__swsetup_r+0xbc>
 800584e:	2300      	movs	r3, #0
 8005850:	60a3      	str	r3, [r4, #8]
 8005852:	6963      	ldr	r3, [r4, #20]
 8005854:	425b      	negs	r3, r3
 8005856:	61a3      	str	r3, [r4, #24]
 8005858:	6923      	ldr	r3, [r4, #16]
 800585a:	b953      	cbnz	r3, 8005872 <__swsetup_r+0xc6>
 800585c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005860:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005864:	d1ba      	bne.n	80057dc <__swsetup_r+0x30>
 8005866:	bd70      	pop	{r4, r5, r6, pc}
 8005868:	0792      	lsls	r2, r2, #30
 800586a:	bf58      	it	pl
 800586c:	6963      	ldrpl	r3, [r4, #20]
 800586e:	60a3      	str	r3, [r4, #8]
 8005870:	e7f2      	b.n	8005858 <__swsetup_r+0xac>
 8005872:	2000      	movs	r0, #0
 8005874:	e7f7      	b.n	8005866 <__swsetup_r+0xba>
 8005876:	bf00      	nop
 8005878:	20000004 	.word	0x20000004
 800587c:	080078c8 	.word	0x080078c8
 8005880:	080078e8 	.word	0x080078e8
 8005884:	080078a8 	.word	0x080078a8

08005888 <quorem>:
 8005888:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800588c:	6903      	ldr	r3, [r0, #16]
 800588e:	690c      	ldr	r4, [r1, #16]
 8005890:	429c      	cmp	r4, r3
 8005892:	4680      	mov	r8, r0
 8005894:	f300 8082 	bgt.w	800599c <quorem+0x114>
 8005898:	3c01      	subs	r4, #1
 800589a:	f101 0714 	add.w	r7, r1, #20
 800589e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80058a2:	f100 0614 	add.w	r6, r0, #20
 80058a6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80058aa:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80058ae:	eb06 030e 	add.w	r3, r6, lr
 80058b2:	3501      	adds	r5, #1
 80058b4:	eb07 090e 	add.w	r9, r7, lr
 80058b8:	9301      	str	r3, [sp, #4]
 80058ba:	fbb0 f5f5 	udiv	r5, r0, r5
 80058be:	b395      	cbz	r5, 8005926 <quorem+0x9e>
 80058c0:	f04f 0a00 	mov.w	sl, #0
 80058c4:	4638      	mov	r0, r7
 80058c6:	46b4      	mov	ip, r6
 80058c8:	46d3      	mov	fp, sl
 80058ca:	f850 2b04 	ldr.w	r2, [r0], #4
 80058ce:	b293      	uxth	r3, r2
 80058d0:	fb05 a303 	mla	r3, r5, r3, sl
 80058d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80058d8:	b29b      	uxth	r3, r3
 80058da:	ebab 0303 	sub.w	r3, fp, r3
 80058de:	0c12      	lsrs	r2, r2, #16
 80058e0:	f8bc b000 	ldrh.w	fp, [ip]
 80058e4:	fb05 a202 	mla	r2, r5, r2, sl
 80058e8:	fa13 f38b 	uxtah	r3, r3, fp
 80058ec:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80058f0:	fa1f fb82 	uxth.w	fp, r2
 80058f4:	f8dc 2000 	ldr.w	r2, [ip]
 80058f8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80058fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005900:	b29b      	uxth	r3, r3
 8005902:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005906:	4581      	cmp	r9, r0
 8005908:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800590c:	f84c 3b04 	str.w	r3, [ip], #4
 8005910:	d2db      	bcs.n	80058ca <quorem+0x42>
 8005912:	f856 300e 	ldr.w	r3, [r6, lr]
 8005916:	b933      	cbnz	r3, 8005926 <quorem+0x9e>
 8005918:	9b01      	ldr	r3, [sp, #4]
 800591a:	3b04      	subs	r3, #4
 800591c:	429e      	cmp	r6, r3
 800591e:	461a      	mov	r2, r3
 8005920:	d330      	bcc.n	8005984 <quorem+0xfc>
 8005922:	f8c8 4010 	str.w	r4, [r8, #16]
 8005926:	4640      	mov	r0, r8
 8005928:	f001 fa13 	bl	8006d52 <__mcmp>
 800592c:	2800      	cmp	r0, #0
 800592e:	db25      	blt.n	800597c <quorem+0xf4>
 8005930:	3501      	adds	r5, #1
 8005932:	4630      	mov	r0, r6
 8005934:	f04f 0e00 	mov.w	lr, #0
 8005938:	f857 2b04 	ldr.w	r2, [r7], #4
 800593c:	f8d0 c000 	ldr.w	ip, [r0]
 8005940:	b293      	uxth	r3, r2
 8005942:	ebae 0303 	sub.w	r3, lr, r3
 8005946:	0c12      	lsrs	r2, r2, #16
 8005948:	fa13 f38c 	uxtah	r3, r3, ip
 800594c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005950:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005954:	b29b      	uxth	r3, r3
 8005956:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800595a:	45b9      	cmp	r9, r7
 800595c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005960:	f840 3b04 	str.w	r3, [r0], #4
 8005964:	d2e8      	bcs.n	8005938 <quorem+0xb0>
 8005966:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800596a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800596e:	b92a      	cbnz	r2, 800597c <quorem+0xf4>
 8005970:	3b04      	subs	r3, #4
 8005972:	429e      	cmp	r6, r3
 8005974:	461a      	mov	r2, r3
 8005976:	d30b      	bcc.n	8005990 <quorem+0x108>
 8005978:	f8c8 4010 	str.w	r4, [r8, #16]
 800597c:	4628      	mov	r0, r5
 800597e:	b003      	add	sp, #12
 8005980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005984:	6812      	ldr	r2, [r2, #0]
 8005986:	3b04      	subs	r3, #4
 8005988:	2a00      	cmp	r2, #0
 800598a:	d1ca      	bne.n	8005922 <quorem+0x9a>
 800598c:	3c01      	subs	r4, #1
 800598e:	e7c5      	b.n	800591c <quorem+0x94>
 8005990:	6812      	ldr	r2, [r2, #0]
 8005992:	3b04      	subs	r3, #4
 8005994:	2a00      	cmp	r2, #0
 8005996:	d1ef      	bne.n	8005978 <quorem+0xf0>
 8005998:	3c01      	subs	r4, #1
 800599a:	e7ea      	b.n	8005972 <quorem+0xea>
 800599c:	2000      	movs	r0, #0
 800599e:	e7ee      	b.n	800597e <quorem+0xf6>

080059a0 <_dtoa_r>:
 80059a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059a4:	ec57 6b10 	vmov	r6, r7, d0
 80059a8:	b097      	sub	sp, #92	; 0x5c
 80059aa:	e9cd 6700 	strd	r6, r7, [sp]
 80059ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80059b0:	9107      	str	r1, [sp, #28]
 80059b2:	4604      	mov	r4, r0
 80059b4:	920a      	str	r2, [sp, #40]	; 0x28
 80059b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80059b8:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80059ba:	b93e      	cbnz	r6, 80059cc <_dtoa_r+0x2c>
 80059bc:	2010      	movs	r0, #16
 80059be:	f000 ffab 	bl	8006918 <malloc>
 80059c2:	6260      	str	r0, [r4, #36]	; 0x24
 80059c4:	6046      	str	r6, [r0, #4]
 80059c6:	6086      	str	r6, [r0, #8]
 80059c8:	6006      	str	r6, [r0, #0]
 80059ca:	60c6      	str	r6, [r0, #12]
 80059cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059ce:	6819      	ldr	r1, [r3, #0]
 80059d0:	b151      	cbz	r1, 80059e8 <_dtoa_r+0x48>
 80059d2:	685a      	ldr	r2, [r3, #4]
 80059d4:	604a      	str	r2, [r1, #4]
 80059d6:	2301      	movs	r3, #1
 80059d8:	4093      	lsls	r3, r2
 80059da:	608b      	str	r3, [r1, #8]
 80059dc:	4620      	mov	r0, r4
 80059de:	f000 ffe2 	bl	80069a6 <_Bfree>
 80059e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059e4:	2200      	movs	r2, #0
 80059e6:	601a      	str	r2, [r3, #0]
 80059e8:	9b01      	ldr	r3, [sp, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	bfbf      	itttt	lt
 80059ee:	2301      	movlt	r3, #1
 80059f0:	602b      	strlt	r3, [r5, #0]
 80059f2:	9b01      	ldrlt	r3, [sp, #4]
 80059f4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80059f8:	bfb2      	itee	lt
 80059fa:	9301      	strlt	r3, [sp, #4]
 80059fc:	2300      	movge	r3, #0
 80059fe:	602b      	strge	r3, [r5, #0]
 8005a00:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005a04:	4ba8      	ldr	r3, [pc, #672]	; (8005ca8 <_dtoa_r+0x308>)
 8005a06:	ea33 0308 	bics.w	r3, r3, r8
 8005a0a:	d11b      	bne.n	8005a44 <_dtoa_r+0xa4>
 8005a0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005a0e:	f242 730f 	movw	r3, #9999	; 0x270f
 8005a12:	6013      	str	r3, [r2, #0]
 8005a14:	9b00      	ldr	r3, [sp, #0]
 8005a16:	b923      	cbnz	r3, 8005a22 <_dtoa_r+0x82>
 8005a18:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005a1c:	2800      	cmp	r0, #0
 8005a1e:	f000 8578 	beq.w	8006512 <_dtoa_r+0xb72>
 8005a22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a24:	b953      	cbnz	r3, 8005a3c <_dtoa_r+0x9c>
 8005a26:	4ba1      	ldr	r3, [pc, #644]	; (8005cac <_dtoa_r+0x30c>)
 8005a28:	e021      	b.n	8005a6e <_dtoa_r+0xce>
 8005a2a:	4ba1      	ldr	r3, [pc, #644]	; (8005cb0 <_dtoa_r+0x310>)
 8005a2c:	9302      	str	r3, [sp, #8]
 8005a2e:	3308      	adds	r3, #8
 8005a30:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005a32:	6013      	str	r3, [r2, #0]
 8005a34:	9802      	ldr	r0, [sp, #8]
 8005a36:	b017      	add	sp, #92	; 0x5c
 8005a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a3c:	4b9b      	ldr	r3, [pc, #620]	; (8005cac <_dtoa_r+0x30c>)
 8005a3e:	9302      	str	r3, [sp, #8]
 8005a40:	3303      	adds	r3, #3
 8005a42:	e7f5      	b.n	8005a30 <_dtoa_r+0x90>
 8005a44:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	4630      	mov	r0, r6
 8005a4e:	4639      	mov	r1, r7
 8005a50:	f7fb f836 	bl	8000ac0 <__aeabi_dcmpeq>
 8005a54:	4681      	mov	r9, r0
 8005a56:	b160      	cbz	r0, 8005a72 <_dtoa_r+0xd2>
 8005a58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	6013      	str	r3, [r2, #0]
 8005a5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f000 8553 	beq.w	800650c <_dtoa_r+0xb6c>
 8005a66:	4b93      	ldr	r3, [pc, #588]	; (8005cb4 <_dtoa_r+0x314>)
 8005a68:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005a6a:	6013      	str	r3, [r2, #0]
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	9302      	str	r3, [sp, #8]
 8005a70:	e7e0      	b.n	8005a34 <_dtoa_r+0x94>
 8005a72:	aa14      	add	r2, sp, #80	; 0x50
 8005a74:	a915      	add	r1, sp, #84	; 0x54
 8005a76:	ec47 6b10 	vmov	d0, r6, r7
 8005a7a:	4620      	mov	r0, r4
 8005a7c:	f001 f9e1 	bl	8006e42 <__d2b>
 8005a80:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005a84:	4682      	mov	sl, r0
 8005a86:	2d00      	cmp	r5, #0
 8005a88:	d07e      	beq.n	8005b88 <_dtoa_r+0x1e8>
 8005a8a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005a8e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005a92:	4630      	mov	r0, r6
 8005a94:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005a98:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005a9c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	4b85      	ldr	r3, [pc, #532]	; (8005cb8 <_dtoa_r+0x318>)
 8005aa4:	f7fa fbf0 	bl	8000288 <__aeabi_dsub>
 8005aa8:	a379      	add	r3, pc, #484	; (adr r3, 8005c90 <_dtoa_r+0x2f0>)
 8005aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aae:	f7fa fd9f 	bl	80005f0 <__aeabi_dmul>
 8005ab2:	a379      	add	r3, pc, #484	; (adr r3, 8005c98 <_dtoa_r+0x2f8>)
 8005ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab8:	f7fa fbe8 	bl	800028c <__adddf3>
 8005abc:	4606      	mov	r6, r0
 8005abe:	4628      	mov	r0, r5
 8005ac0:	460f      	mov	r7, r1
 8005ac2:	f7fa fd2f 	bl	8000524 <__aeabi_i2d>
 8005ac6:	a376      	add	r3, pc, #472	; (adr r3, 8005ca0 <_dtoa_r+0x300>)
 8005ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005acc:	f7fa fd90 	bl	80005f0 <__aeabi_dmul>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	4630      	mov	r0, r6
 8005ad6:	4639      	mov	r1, r7
 8005ad8:	f7fa fbd8 	bl	800028c <__adddf3>
 8005adc:	4606      	mov	r6, r0
 8005ade:	460f      	mov	r7, r1
 8005ae0:	f7fb f836 	bl	8000b50 <__aeabi_d2iz>
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	4683      	mov	fp, r0
 8005ae8:	2300      	movs	r3, #0
 8005aea:	4630      	mov	r0, r6
 8005aec:	4639      	mov	r1, r7
 8005aee:	f7fa fff1 	bl	8000ad4 <__aeabi_dcmplt>
 8005af2:	b158      	cbz	r0, 8005b0c <_dtoa_r+0x16c>
 8005af4:	4658      	mov	r0, fp
 8005af6:	f7fa fd15 	bl	8000524 <__aeabi_i2d>
 8005afa:	4602      	mov	r2, r0
 8005afc:	460b      	mov	r3, r1
 8005afe:	4630      	mov	r0, r6
 8005b00:	4639      	mov	r1, r7
 8005b02:	f7fa ffdd 	bl	8000ac0 <__aeabi_dcmpeq>
 8005b06:	b908      	cbnz	r0, 8005b0c <_dtoa_r+0x16c>
 8005b08:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005b0c:	f1bb 0f16 	cmp.w	fp, #22
 8005b10:	d859      	bhi.n	8005bc6 <_dtoa_r+0x226>
 8005b12:	496a      	ldr	r1, [pc, #424]	; (8005cbc <_dtoa_r+0x31c>)
 8005b14:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8005b18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b20:	f7fa fff6 	bl	8000b10 <__aeabi_dcmpgt>
 8005b24:	2800      	cmp	r0, #0
 8005b26:	d050      	beq.n	8005bca <_dtoa_r+0x22a>
 8005b28:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	930e      	str	r3, [sp, #56]	; 0x38
 8005b30:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005b32:	1b5d      	subs	r5, r3, r5
 8005b34:	1e6b      	subs	r3, r5, #1
 8005b36:	9306      	str	r3, [sp, #24]
 8005b38:	bf45      	ittet	mi
 8005b3a:	f1c5 0301 	rsbmi	r3, r5, #1
 8005b3e:	9305      	strmi	r3, [sp, #20]
 8005b40:	2300      	movpl	r3, #0
 8005b42:	2300      	movmi	r3, #0
 8005b44:	bf4c      	ite	mi
 8005b46:	9306      	strmi	r3, [sp, #24]
 8005b48:	9305      	strpl	r3, [sp, #20]
 8005b4a:	f1bb 0f00 	cmp.w	fp, #0
 8005b4e:	db3e      	blt.n	8005bce <_dtoa_r+0x22e>
 8005b50:	9b06      	ldr	r3, [sp, #24]
 8005b52:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005b56:	445b      	add	r3, fp
 8005b58:	9306      	str	r3, [sp, #24]
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	9308      	str	r3, [sp, #32]
 8005b5e:	9b07      	ldr	r3, [sp, #28]
 8005b60:	2b09      	cmp	r3, #9
 8005b62:	f200 80af 	bhi.w	8005cc4 <_dtoa_r+0x324>
 8005b66:	2b05      	cmp	r3, #5
 8005b68:	bfc4      	itt	gt
 8005b6a:	3b04      	subgt	r3, #4
 8005b6c:	9307      	strgt	r3, [sp, #28]
 8005b6e:	9b07      	ldr	r3, [sp, #28]
 8005b70:	f1a3 0302 	sub.w	r3, r3, #2
 8005b74:	bfcc      	ite	gt
 8005b76:	2600      	movgt	r6, #0
 8005b78:	2601      	movle	r6, #1
 8005b7a:	2b03      	cmp	r3, #3
 8005b7c:	f200 80ae 	bhi.w	8005cdc <_dtoa_r+0x33c>
 8005b80:	e8df f003 	tbb	[pc, r3]
 8005b84:	772f8482 	.word	0x772f8482
 8005b88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005b8a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8005b8c:	441d      	add	r5, r3
 8005b8e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005b92:	2b20      	cmp	r3, #32
 8005b94:	dd11      	ble.n	8005bba <_dtoa_r+0x21a>
 8005b96:	9a00      	ldr	r2, [sp, #0]
 8005b98:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005b9c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8005ba0:	fa22 f000 	lsr.w	r0, r2, r0
 8005ba4:	fa08 f303 	lsl.w	r3, r8, r3
 8005ba8:	4318      	orrs	r0, r3
 8005baa:	f7fa fcab 	bl	8000504 <__aeabi_ui2d>
 8005bae:	2301      	movs	r3, #1
 8005bb0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005bb4:	3d01      	subs	r5, #1
 8005bb6:	9312      	str	r3, [sp, #72]	; 0x48
 8005bb8:	e772      	b.n	8005aa0 <_dtoa_r+0x100>
 8005bba:	f1c3 0020 	rsb	r0, r3, #32
 8005bbe:	9b00      	ldr	r3, [sp, #0]
 8005bc0:	fa03 f000 	lsl.w	r0, r3, r0
 8005bc4:	e7f1      	b.n	8005baa <_dtoa_r+0x20a>
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e7b1      	b.n	8005b2e <_dtoa_r+0x18e>
 8005bca:	900e      	str	r0, [sp, #56]	; 0x38
 8005bcc:	e7b0      	b.n	8005b30 <_dtoa_r+0x190>
 8005bce:	9b05      	ldr	r3, [sp, #20]
 8005bd0:	eba3 030b 	sub.w	r3, r3, fp
 8005bd4:	9305      	str	r3, [sp, #20]
 8005bd6:	f1cb 0300 	rsb	r3, fp, #0
 8005bda:	9308      	str	r3, [sp, #32]
 8005bdc:	2300      	movs	r3, #0
 8005bde:	930b      	str	r3, [sp, #44]	; 0x2c
 8005be0:	e7bd      	b.n	8005b5e <_dtoa_r+0x1be>
 8005be2:	2301      	movs	r3, #1
 8005be4:	9309      	str	r3, [sp, #36]	; 0x24
 8005be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	dd7a      	ble.n	8005ce2 <_dtoa_r+0x342>
 8005bec:	9304      	str	r3, [sp, #16]
 8005bee:	9303      	str	r3, [sp, #12]
 8005bf0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	606a      	str	r2, [r5, #4]
 8005bf6:	2104      	movs	r1, #4
 8005bf8:	f101 0214 	add.w	r2, r1, #20
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d975      	bls.n	8005cec <_dtoa_r+0x34c>
 8005c00:	6869      	ldr	r1, [r5, #4]
 8005c02:	4620      	mov	r0, r4
 8005c04:	f000 fe9b 	bl	800693e <_Balloc>
 8005c08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c0a:	6028      	str	r0, [r5, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	9302      	str	r3, [sp, #8]
 8005c10:	9b03      	ldr	r3, [sp, #12]
 8005c12:	2b0e      	cmp	r3, #14
 8005c14:	f200 80e5 	bhi.w	8005de2 <_dtoa_r+0x442>
 8005c18:	2e00      	cmp	r6, #0
 8005c1a:	f000 80e2 	beq.w	8005de2 <_dtoa_r+0x442>
 8005c1e:	ed9d 7b00 	vldr	d7, [sp]
 8005c22:	f1bb 0f00 	cmp.w	fp, #0
 8005c26:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8005c2a:	dd74      	ble.n	8005d16 <_dtoa_r+0x376>
 8005c2c:	4a23      	ldr	r2, [pc, #140]	; (8005cbc <_dtoa_r+0x31c>)
 8005c2e:	f00b 030f 	and.w	r3, fp, #15
 8005c32:	ea4f 162b 	mov.w	r6, fp, asr #4
 8005c36:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005c3a:	06f0      	lsls	r0, r6, #27
 8005c3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c40:	d559      	bpl.n	8005cf6 <_dtoa_r+0x356>
 8005c42:	4b1f      	ldr	r3, [pc, #124]	; (8005cc0 <_dtoa_r+0x320>)
 8005c44:	ec51 0b17 	vmov	r0, r1, d7
 8005c48:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005c4c:	f7fa fdfa 	bl	8000844 <__aeabi_ddiv>
 8005c50:	e9cd 0100 	strd	r0, r1, [sp]
 8005c54:	f006 060f 	and.w	r6, r6, #15
 8005c58:	2503      	movs	r5, #3
 8005c5a:	4f19      	ldr	r7, [pc, #100]	; (8005cc0 <_dtoa_r+0x320>)
 8005c5c:	2e00      	cmp	r6, #0
 8005c5e:	d14c      	bne.n	8005cfa <_dtoa_r+0x35a>
 8005c60:	4642      	mov	r2, r8
 8005c62:	464b      	mov	r3, r9
 8005c64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c68:	f7fa fdec 	bl	8000844 <__aeabi_ddiv>
 8005c6c:	e9cd 0100 	strd	r0, r1, [sp]
 8005c70:	e06a      	b.n	8005d48 <_dtoa_r+0x3a8>
 8005c72:	2301      	movs	r3, #1
 8005c74:	9309      	str	r3, [sp, #36]	; 0x24
 8005c76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c78:	445b      	add	r3, fp
 8005c7a:	9304      	str	r3, [sp, #16]
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	9303      	str	r3, [sp, #12]
 8005c82:	bfb8      	it	lt
 8005c84:	2301      	movlt	r3, #1
 8005c86:	e7b3      	b.n	8005bf0 <_dtoa_r+0x250>
 8005c88:	2300      	movs	r3, #0
 8005c8a:	e7ab      	b.n	8005be4 <_dtoa_r+0x244>
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	e7f1      	b.n	8005c74 <_dtoa_r+0x2d4>
 8005c90:	636f4361 	.word	0x636f4361
 8005c94:	3fd287a7 	.word	0x3fd287a7
 8005c98:	8b60c8b3 	.word	0x8b60c8b3
 8005c9c:	3fc68a28 	.word	0x3fc68a28
 8005ca0:	509f79fb 	.word	0x509f79fb
 8005ca4:	3fd34413 	.word	0x3fd34413
 8005ca8:	7ff00000 	.word	0x7ff00000
 8005cac:	080078a1 	.word	0x080078a1
 8005cb0:	08007898 	.word	0x08007898
 8005cb4:	08007875 	.word	0x08007875
 8005cb8:	3ff80000 	.word	0x3ff80000
 8005cbc:	08007930 	.word	0x08007930
 8005cc0:	08007908 	.word	0x08007908
 8005cc4:	2601      	movs	r6, #1
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	9307      	str	r3, [sp, #28]
 8005cca:	9609      	str	r6, [sp, #36]	; 0x24
 8005ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8005cd0:	9304      	str	r3, [sp, #16]
 8005cd2:	9303      	str	r3, [sp, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	2312      	movs	r3, #18
 8005cd8:	920a      	str	r2, [sp, #40]	; 0x28
 8005cda:	e789      	b.n	8005bf0 <_dtoa_r+0x250>
 8005cdc:	2301      	movs	r3, #1
 8005cde:	9309      	str	r3, [sp, #36]	; 0x24
 8005ce0:	e7f4      	b.n	8005ccc <_dtoa_r+0x32c>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	9304      	str	r3, [sp, #16]
 8005ce6:	9303      	str	r3, [sp, #12]
 8005ce8:	461a      	mov	r2, r3
 8005cea:	e7f5      	b.n	8005cd8 <_dtoa_r+0x338>
 8005cec:	686a      	ldr	r2, [r5, #4]
 8005cee:	3201      	adds	r2, #1
 8005cf0:	606a      	str	r2, [r5, #4]
 8005cf2:	0049      	lsls	r1, r1, #1
 8005cf4:	e780      	b.n	8005bf8 <_dtoa_r+0x258>
 8005cf6:	2502      	movs	r5, #2
 8005cf8:	e7af      	b.n	8005c5a <_dtoa_r+0x2ba>
 8005cfa:	07f1      	lsls	r1, r6, #31
 8005cfc:	d508      	bpl.n	8005d10 <_dtoa_r+0x370>
 8005cfe:	4640      	mov	r0, r8
 8005d00:	4649      	mov	r1, r9
 8005d02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d06:	f7fa fc73 	bl	80005f0 <__aeabi_dmul>
 8005d0a:	3501      	adds	r5, #1
 8005d0c:	4680      	mov	r8, r0
 8005d0e:	4689      	mov	r9, r1
 8005d10:	1076      	asrs	r6, r6, #1
 8005d12:	3708      	adds	r7, #8
 8005d14:	e7a2      	b.n	8005c5c <_dtoa_r+0x2bc>
 8005d16:	f000 809d 	beq.w	8005e54 <_dtoa_r+0x4b4>
 8005d1a:	f1cb 0600 	rsb	r6, fp, #0
 8005d1e:	4b9f      	ldr	r3, [pc, #636]	; (8005f9c <_dtoa_r+0x5fc>)
 8005d20:	4f9f      	ldr	r7, [pc, #636]	; (8005fa0 <_dtoa_r+0x600>)
 8005d22:	f006 020f 	and.w	r2, r6, #15
 8005d26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d32:	f7fa fc5d 	bl	80005f0 <__aeabi_dmul>
 8005d36:	e9cd 0100 	strd	r0, r1, [sp]
 8005d3a:	1136      	asrs	r6, r6, #4
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	2502      	movs	r5, #2
 8005d40:	2e00      	cmp	r6, #0
 8005d42:	d17c      	bne.n	8005e3e <_dtoa_r+0x49e>
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d191      	bne.n	8005c6c <_dtoa_r+0x2cc>
 8005d48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f000 8084 	beq.w	8005e58 <_dtoa_r+0x4b8>
 8005d50:	e9dd 8900 	ldrd	r8, r9, [sp]
 8005d54:	2200      	movs	r2, #0
 8005d56:	4b93      	ldr	r3, [pc, #588]	; (8005fa4 <_dtoa_r+0x604>)
 8005d58:	4640      	mov	r0, r8
 8005d5a:	4649      	mov	r1, r9
 8005d5c:	f7fa feba 	bl	8000ad4 <__aeabi_dcmplt>
 8005d60:	2800      	cmp	r0, #0
 8005d62:	d079      	beq.n	8005e58 <_dtoa_r+0x4b8>
 8005d64:	9b03      	ldr	r3, [sp, #12]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d076      	beq.n	8005e58 <_dtoa_r+0x4b8>
 8005d6a:	9b04      	ldr	r3, [sp, #16]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	dd34      	ble.n	8005dda <_dtoa_r+0x43a>
 8005d70:	2200      	movs	r2, #0
 8005d72:	4b8d      	ldr	r3, [pc, #564]	; (8005fa8 <_dtoa_r+0x608>)
 8005d74:	4640      	mov	r0, r8
 8005d76:	4649      	mov	r1, r9
 8005d78:	f7fa fc3a 	bl	80005f0 <__aeabi_dmul>
 8005d7c:	e9cd 0100 	strd	r0, r1, [sp]
 8005d80:	9e04      	ldr	r6, [sp, #16]
 8005d82:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005d86:	3501      	adds	r5, #1
 8005d88:	4628      	mov	r0, r5
 8005d8a:	f7fa fbcb 	bl	8000524 <__aeabi_i2d>
 8005d8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d92:	f7fa fc2d 	bl	80005f0 <__aeabi_dmul>
 8005d96:	2200      	movs	r2, #0
 8005d98:	4b84      	ldr	r3, [pc, #528]	; (8005fac <_dtoa_r+0x60c>)
 8005d9a:	f7fa fa77 	bl	800028c <__adddf3>
 8005d9e:	4680      	mov	r8, r0
 8005da0:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8005da4:	2e00      	cmp	r6, #0
 8005da6:	d15a      	bne.n	8005e5e <_dtoa_r+0x4be>
 8005da8:	2200      	movs	r2, #0
 8005daa:	4b81      	ldr	r3, [pc, #516]	; (8005fb0 <_dtoa_r+0x610>)
 8005dac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005db0:	f7fa fa6a 	bl	8000288 <__aeabi_dsub>
 8005db4:	4642      	mov	r2, r8
 8005db6:	464b      	mov	r3, r9
 8005db8:	e9cd 0100 	strd	r0, r1, [sp]
 8005dbc:	f7fa fea8 	bl	8000b10 <__aeabi_dcmpgt>
 8005dc0:	2800      	cmp	r0, #0
 8005dc2:	f040 829b 	bne.w	80062fc <_dtoa_r+0x95c>
 8005dc6:	4642      	mov	r2, r8
 8005dc8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005dcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005dd0:	f7fa fe80 	bl	8000ad4 <__aeabi_dcmplt>
 8005dd4:	2800      	cmp	r0, #0
 8005dd6:	f040 828f 	bne.w	80062f8 <_dtoa_r+0x958>
 8005dda:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005dde:	e9cd 2300 	strd	r2, r3, [sp]
 8005de2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f2c0 8150 	blt.w	800608a <_dtoa_r+0x6ea>
 8005dea:	f1bb 0f0e 	cmp.w	fp, #14
 8005dee:	f300 814c 	bgt.w	800608a <_dtoa_r+0x6ea>
 8005df2:	4b6a      	ldr	r3, [pc, #424]	; (8005f9c <_dtoa_r+0x5fc>)
 8005df4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005df8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005dfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f280 80da 	bge.w	8005fb8 <_dtoa_r+0x618>
 8005e04:	9b03      	ldr	r3, [sp, #12]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f300 80d6 	bgt.w	8005fb8 <_dtoa_r+0x618>
 8005e0c:	f040 8273 	bne.w	80062f6 <_dtoa_r+0x956>
 8005e10:	2200      	movs	r2, #0
 8005e12:	4b67      	ldr	r3, [pc, #412]	; (8005fb0 <_dtoa_r+0x610>)
 8005e14:	4640      	mov	r0, r8
 8005e16:	4649      	mov	r1, r9
 8005e18:	f7fa fbea 	bl	80005f0 <__aeabi_dmul>
 8005e1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e20:	f7fa fe6c 	bl	8000afc <__aeabi_dcmpge>
 8005e24:	9e03      	ldr	r6, [sp, #12]
 8005e26:	4637      	mov	r7, r6
 8005e28:	2800      	cmp	r0, #0
 8005e2a:	f040 824a 	bne.w	80062c2 <_dtoa_r+0x922>
 8005e2e:	9b02      	ldr	r3, [sp, #8]
 8005e30:	9a02      	ldr	r2, [sp, #8]
 8005e32:	1c5d      	adds	r5, r3, #1
 8005e34:	2331      	movs	r3, #49	; 0x31
 8005e36:	7013      	strb	r3, [r2, #0]
 8005e38:	f10b 0b01 	add.w	fp, fp, #1
 8005e3c:	e245      	b.n	80062ca <_dtoa_r+0x92a>
 8005e3e:	07f2      	lsls	r2, r6, #31
 8005e40:	d505      	bpl.n	8005e4e <_dtoa_r+0x4ae>
 8005e42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e46:	f7fa fbd3 	bl	80005f0 <__aeabi_dmul>
 8005e4a:	3501      	adds	r5, #1
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	1076      	asrs	r6, r6, #1
 8005e50:	3708      	adds	r7, #8
 8005e52:	e775      	b.n	8005d40 <_dtoa_r+0x3a0>
 8005e54:	2502      	movs	r5, #2
 8005e56:	e777      	b.n	8005d48 <_dtoa_r+0x3a8>
 8005e58:	465f      	mov	r7, fp
 8005e5a:	9e03      	ldr	r6, [sp, #12]
 8005e5c:	e794      	b.n	8005d88 <_dtoa_r+0x3e8>
 8005e5e:	9a02      	ldr	r2, [sp, #8]
 8005e60:	4b4e      	ldr	r3, [pc, #312]	; (8005f9c <_dtoa_r+0x5fc>)
 8005e62:	4432      	add	r2, r6
 8005e64:	9213      	str	r2, [sp, #76]	; 0x4c
 8005e66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e68:	1e71      	subs	r1, r6, #1
 8005e6a:	2a00      	cmp	r2, #0
 8005e6c:	d048      	beq.n	8005f00 <_dtoa_r+0x560>
 8005e6e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e76:	2000      	movs	r0, #0
 8005e78:	494e      	ldr	r1, [pc, #312]	; (8005fb4 <_dtoa_r+0x614>)
 8005e7a:	f7fa fce3 	bl	8000844 <__aeabi_ddiv>
 8005e7e:	4642      	mov	r2, r8
 8005e80:	464b      	mov	r3, r9
 8005e82:	f7fa fa01 	bl	8000288 <__aeabi_dsub>
 8005e86:	9d02      	ldr	r5, [sp, #8]
 8005e88:	4680      	mov	r8, r0
 8005e8a:	4689      	mov	r9, r1
 8005e8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e90:	f7fa fe5e 	bl	8000b50 <__aeabi_d2iz>
 8005e94:	4606      	mov	r6, r0
 8005e96:	f7fa fb45 	bl	8000524 <__aeabi_i2d>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ea2:	f7fa f9f1 	bl	8000288 <__aeabi_dsub>
 8005ea6:	3630      	adds	r6, #48	; 0x30
 8005ea8:	f805 6b01 	strb.w	r6, [r5], #1
 8005eac:	4642      	mov	r2, r8
 8005eae:	464b      	mov	r3, r9
 8005eb0:	e9cd 0100 	strd	r0, r1, [sp]
 8005eb4:	f7fa fe0e 	bl	8000ad4 <__aeabi_dcmplt>
 8005eb8:	2800      	cmp	r0, #0
 8005eba:	d165      	bne.n	8005f88 <_dtoa_r+0x5e8>
 8005ebc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ec0:	2000      	movs	r0, #0
 8005ec2:	4938      	ldr	r1, [pc, #224]	; (8005fa4 <_dtoa_r+0x604>)
 8005ec4:	f7fa f9e0 	bl	8000288 <__aeabi_dsub>
 8005ec8:	4642      	mov	r2, r8
 8005eca:	464b      	mov	r3, r9
 8005ecc:	f7fa fe02 	bl	8000ad4 <__aeabi_dcmplt>
 8005ed0:	2800      	cmp	r0, #0
 8005ed2:	f040 80ba 	bne.w	800604a <_dtoa_r+0x6aa>
 8005ed6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005ed8:	429d      	cmp	r5, r3
 8005eda:	f43f af7e 	beq.w	8005dda <_dtoa_r+0x43a>
 8005ede:	2200      	movs	r2, #0
 8005ee0:	4b31      	ldr	r3, [pc, #196]	; (8005fa8 <_dtoa_r+0x608>)
 8005ee2:	4640      	mov	r0, r8
 8005ee4:	4649      	mov	r1, r9
 8005ee6:	f7fa fb83 	bl	80005f0 <__aeabi_dmul>
 8005eea:	2200      	movs	r2, #0
 8005eec:	4680      	mov	r8, r0
 8005eee:	4689      	mov	r9, r1
 8005ef0:	4b2d      	ldr	r3, [pc, #180]	; (8005fa8 <_dtoa_r+0x608>)
 8005ef2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ef6:	f7fa fb7b 	bl	80005f0 <__aeabi_dmul>
 8005efa:	e9cd 0100 	strd	r0, r1, [sp]
 8005efe:	e7c5      	b.n	8005e8c <_dtoa_r+0x4ec>
 8005f00:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8005f04:	4642      	mov	r2, r8
 8005f06:	464b      	mov	r3, r9
 8005f08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f0c:	f7fa fb70 	bl	80005f0 <__aeabi_dmul>
 8005f10:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005f14:	9d02      	ldr	r5, [sp, #8]
 8005f16:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f1a:	f7fa fe19 	bl	8000b50 <__aeabi_d2iz>
 8005f1e:	4606      	mov	r6, r0
 8005f20:	f7fa fb00 	bl	8000524 <__aeabi_i2d>
 8005f24:	3630      	adds	r6, #48	; 0x30
 8005f26:	4602      	mov	r2, r0
 8005f28:	460b      	mov	r3, r1
 8005f2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f2e:	f7fa f9ab 	bl	8000288 <__aeabi_dsub>
 8005f32:	f805 6b01 	strb.w	r6, [r5], #1
 8005f36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005f38:	42ab      	cmp	r3, r5
 8005f3a:	4680      	mov	r8, r0
 8005f3c:	4689      	mov	r9, r1
 8005f3e:	f04f 0200 	mov.w	r2, #0
 8005f42:	d125      	bne.n	8005f90 <_dtoa_r+0x5f0>
 8005f44:	4b1b      	ldr	r3, [pc, #108]	; (8005fb4 <_dtoa_r+0x614>)
 8005f46:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005f4a:	f7fa f99f 	bl	800028c <__adddf3>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	460b      	mov	r3, r1
 8005f52:	4640      	mov	r0, r8
 8005f54:	4649      	mov	r1, r9
 8005f56:	f7fa fddb 	bl	8000b10 <__aeabi_dcmpgt>
 8005f5a:	2800      	cmp	r0, #0
 8005f5c:	d175      	bne.n	800604a <_dtoa_r+0x6aa>
 8005f5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005f62:	2000      	movs	r0, #0
 8005f64:	4913      	ldr	r1, [pc, #76]	; (8005fb4 <_dtoa_r+0x614>)
 8005f66:	f7fa f98f 	bl	8000288 <__aeabi_dsub>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	4640      	mov	r0, r8
 8005f70:	4649      	mov	r1, r9
 8005f72:	f7fa fdaf 	bl	8000ad4 <__aeabi_dcmplt>
 8005f76:	2800      	cmp	r0, #0
 8005f78:	f43f af2f 	beq.w	8005dda <_dtoa_r+0x43a>
 8005f7c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005f80:	2b30      	cmp	r3, #48	; 0x30
 8005f82:	f105 32ff 	add.w	r2, r5, #4294967295
 8005f86:	d001      	beq.n	8005f8c <_dtoa_r+0x5ec>
 8005f88:	46bb      	mov	fp, r7
 8005f8a:	e04d      	b.n	8006028 <_dtoa_r+0x688>
 8005f8c:	4615      	mov	r5, r2
 8005f8e:	e7f5      	b.n	8005f7c <_dtoa_r+0x5dc>
 8005f90:	4b05      	ldr	r3, [pc, #20]	; (8005fa8 <_dtoa_r+0x608>)
 8005f92:	f7fa fb2d 	bl	80005f0 <__aeabi_dmul>
 8005f96:	e9cd 0100 	strd	r0, r1, [sp]
 8005f9a:	e7bc      	b.n	8005f16 <_dtoa_r+0x576>
 8005f9c:	08007930 	.word	0x08007930
 8005fa0:	08007908 	.word	0x08007908
 8005fa4:	3ff00000 	.word	0x3ff00000
 8005fa8:	40240000 	.word	0x40240000
 8005fac:	401c0000 	.word	0x401c0000
 8005fb0:	40140000 	.word	0x40140000
 8005fb4:	3fe00000 	.word	0x3fe00000
 8005fb8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005fbc:	9d02      	ldr	r5, [sp, #8]
 8005fbe:	4642      	mov	r2, r8
 8005fc0:	464b      	mov	r3, r9
 8005fc2:	4630      	mov	r0, r6
 8005fc4:	4639      	mov	r1, r7
 8005fc6:	f7fa fc3d 	bl	8000844 <__aeabi_ddiv>
 8005fca:	f7fa fdc1 	bl	8000b50 <__aeabi_d2iz>
 8005fce:	9000      	str	r0, [sp, #0]
 8005fd0:	f7fa faa8 	bl	8000524 <__aeabi_i2d>
 8005fd4:	4642      	mov	r2, r8
 8005fd6:	464b      	mov	r3, r9
 8005fd8:	f7fa fb0a 	bl	80005f0 <__aeabi_dmul>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	460b      	mov	r3, r1
 8005fe0:	4630      	mov	r0, r6
 8005fe2:	4639      	mov	r1, r7
 8005fe4:	f7fa f950 	bl	8000288 <__aeabi_dsub>
 8005fe8:	9e00      	ldr	r6, [sp, #0]
 8005fea:	9f03      	ldr	r7, [sp, #12]
 8005fec:	3630      	adds	r6, #48	; 0x30
 8005fee:	f805 6b01 	strb.w	r6, [r5], #1
 8005ff2:	9e02      	ldr	r6, [sp, #8]
 8005ff4:	1bae      	subs	r6, r5, r6
 8005ff6:	42b7      	cmp	r7, r6
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	d138      	bne.n	8006070 <_dtoa_r+0x6d0>
 8005ffe:	f7fa f945 	bl	800028c <__adddf3>
 8006002:	4606      	mov	r6, r0
 8006004:	460f      	mov	r7, r1
 8006006:	4602      	mov	r2, r0
 8006008:	460b      	mov	r3, r1
 800600a:	4640      	mov	r0, r8
 800600c:	4649      	mov	r1, r9
 800600e:	f7fa fd61 	bl	8000ad4 <__aeabi_dcmplt>
 8006012:	b9c8      	cbnz	r0, 8006048 <_dtoa_r+0x6a8>
 8006014:	4632      	mov	r2, r6
 8006016:	463b      	mov	r3, r7
 8006018:	4640      	mov	r0, r8
 800601a:	4649      	mov	r1, r9
 800601c:	f7fa fd50 	bl	8000ac0 <__aeabi_dcmpeq>
 8006020:	b110      	cbz	r0, 8006028 <_dtoa_r+0x688>
 8006022:	9b00      	ldr	r3, [sp, #0]
 8006024:	07db      	lsls	r3, r3, #31
 8006026:	d40f      	bmi.n	8006048 <_dtoa_r+0x6a8>
 8006028:	4651      	mov	r1, sl
 800602a:	4620      	mov	r0, r4
 800602c:	f000 fcbb 	bl	80069a6 <_Bfree>
 8006030:	2300      	movs	r3, #0
 8006032:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006034:	702b      	strb	r3, [r5, #0]
 8006036:	f10b 0301 	add.w	r3, fp, #1
 800603a:	6013      	str	r3, [r2, #0]
 800603c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800603e:	2b00      	cmp	r3, #0
 8006040:	f43f acf8 	beq.w	8005a34 <_dtoa_r+0x94>
 8006044:	601d      	str	r5, [r3, #0]
 8006046:	e4f5      	b.n	8005a34 <_dtoa_r+0x94>
 8006048:	465f      	mov	r7, fp
 800604a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800604e:	2a39      	cmp	r2, #57	; 0x39
 8006050:	f105 33ff 	add.w	r3, r5, #4294967295
 8006054:	d106      	bne.n	8006064 <_dtoa_r+0x6c4>
 8006056:	9a02      	ldr	r2, [sp, #8]
 8006058:	429a      	cmp	r2, r3
 800605a:	d107      	bne.n	800606c <_dtoa_r+0x6cc>
 800605c:	2330      	movs	r3, #48	; 0x30
 800605e:	7013      	strb	r3, [r2, #0]
 8006060:	3701      	adds	r7, #1
 8006062:	4613      	mov	r3, r2
 8006064:	781a      	ldrb	r2, [r3, #0]
 8006066:	3201      	adds	r2, #1
 8006068:	701a      	strb	r2, [r3, #0]
 800606a:	e78d      	b.n	8005f88 <_dtoa_r+0x5e8>
 800606c:	461d      	mov	r5, r3
 800606e:	e7ec      	b.n	800604a <_dtoa_r+0x6aa>
 8006070:	2200      	movs	r2, #0
 8006072:	4ba4      	ldr	r3, [pc, #656]	; (8006304 <_dtoa_r+0x964>)
 8006074:	f7fa fabc 	bl	80005f0 <__aeabi_dmul>
 8006078:	2200      	movs	r2, #0
 800607a:	2300      	movs	r3, #0
 800607c:	4606      	mov	r6, r0
 800607e:	460f      	mov	r7, r1
 8006080:	f7fa fd1e 	bl	8000ac0 <__aeabi_dcmpeq>
 8006084:	2800      	cmp	r0, #0
 8006086:	d09a      	beq.n	8005fbe <_dtoa_r+0x61e>
 8006088:	e7ce      	b.n	8006028 <_dtoa_r+0x688>
 800608a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800608c:	2a00      	cmp	r2, #0
 800608e:	f000 80cd 	beq.w	800622c <_dtoa_r+0x88c>
 8006092:	9a07      	ldr	r2, [sp, #28]
 8006094:	2a01      	cmp	r2, #1
 8006096:	f300 80af 	bgt.w	80061f8 <_dtoa_r+0x858>
 800609a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800609c:	2a00      	cmp	r2, #0
 800609e:	f000 80a7 	beq.w	80061f0 <_dtoa_r+0x850>
 80060a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80060a6:	9e08      	ldr	r6, [sp, #32]
 80060a8:	9d05      	ldr	r5, [sp, #20]
 80060aa:	9a05      	ldr	r2, [sp, #20]
 80060ac:	441a      	add	r2, r3
 80060ae:	9205      	str	r2, [sp, #20]
 80060b0:	9a06      	ldr	r2, [sp, #24]
 80060b2:	2101      	movs	r1, #1
 80060b4:	441a      	add	r2, r3
 80060b6:	4620      	mov	r0, r4
 80060b8:	9206      	str	r2, [sp, #24]
 80060ba:	f000 fd14 	bl	8006ae6 <__i2b>
 80060be:	4607      	mov	r7, r0
 80060c0:	2d00      	cmp	r5, #0
 80060c2:	dd0c      	ble.n	80060de <_dtoa_r+0x73e>
 80060c4:	9b06      	ldr	r3, [sp, #24]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	dd09      	ble.n	80060de <_dtoa_r+0x73e>
 80060ca:	42ab      	cmp	r3, r5
 80060cc:	9a05      	ldr	r2, [sp, #20]
 80060ce:	bfa8      	it	ge
 80060d0:	462b      	movge	r3, r5
 80060d2:	1ad2      	subs	r2, r2, r3
 80060d4:	9205      	str	r2, [sp, #20]
 80060d6:	9a06      	ldr	r2, [sp, #24]
 80060d8:	1aed      	subs	r5, r5, r3
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	9306      	str	r3, [sp, #24]
 80060de:	9b08      	ldr	r3, [sp, #32]
 80060e0:	b1f3      	cbz	r3, 8006120 <_dtoa_r+0x780>
 80060e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f000 80a5 	beq.w	8006234 <_dtoa_r+0x894>
 80060ea:	2e00      	cmp	r6, #0
 80060ec:	dd10      	ble.n	8006110 <_dtoa_r+0x770>
 80060ee:	4639      	mov	r1, r7
 80060f0:	4632      	mov	r2, r6
 80060f2:	4620      	mov	r0, r4
 80060f4:	f000 fd8e 	bl	8006c14 <__pow5mult>
 80060f8:	4652      	mov	r2, sl
 80060fa:	4601      	mov	r1, r0
 80060fc:	4607      	mov	r7, r0
 80060fe:	4620      	mov	r0, r4
 8006100:	f000 fcfa 	bl	8006af8 <__multiply>
 8006104:	4651      	mov	r1, sl
 8006106:	4680      	mov	r8, r0
 8006108:	4620      	mov	r0, r4
 800610a:	f000 fc4c 	bl	80069a6 <_Bfree>
 800610e:	46c2      	mov	sl, r8
 8006110:	9b08      	ldr	r3, [sp, #32]
 8006112:	1b9a      	subs	r2, r3, r6
 8006114:	d004      	beq.n	8006120 <_dtoa_r+0x780>
 8006116:	4651      	mov	r1, sl
 8006118:	4620      	mov	r0, r4
 800611a:	f000 fd7b 	bl	8006c14 <__pow5mult>
 800611e:	4682      	mov	sl, r0
 8006120:	2101      	movs	r1, #1
 8006122:	4620      	mov	r0, r4
 8006124:	f000 fcdf 	bl	8006ae6 <__i2b>
 8006128:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800612a:	2b00      	cmp	r3, #0
 800612c:	4606      	mov	r6, r0
 800612e:	f340 8083 	ble.w	8006238 <_dtoa_r+0x898>
 8006132:	461a      	mov	r2, r3
 8006134:	4601      	mov	r1, r0
 8006136:	4620      	mov	r0, r4
 8006138:	f000 fd6c 	bl	8006c14 <__pow5mult>
 800613c:	9b07      	ldr	r3, [sp, #28]
 800613e:	2b01      	cmp	r3, #1
 8006140:	4606      	mov	r6, r0
 8006142:	dd7c      	ble.n	800623e <_dtoa_r+0x89e>
 8006144:	f04f 0800 	mov.w	r8, #0
 8006148:	6933      	ldr	r3, [r6, #16]
 800614a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800614e:	6918      	ldr	r0, [r3, #16]
 8006150:	f000 fc7b 	bl	8006a4a <__hi0bits>
 8006154:	f1c0 0020 	rsb	r0, r0, #32
 8006158:	9b06      	ldr	r3, [sp, #24]
 800615a:	4418      	add	r0, r3
 800615c:	f010 001f 	ands.w	r0, r0, #31
 8006160:	f000 8096 	beq.w	8006290 <_dtoa_r+0x8f0>
 8006164:	f1c0 0320 	rsb	r3, r0, #32
 8006168:	2b04      	cmp	r3, #4
 800616a:	f340 8087 	ble.w	800627c <_dtoa_r+0x8dc>
 800616e:	9b05      	ldr	r3, [sp, #20]
 8006170:	f1c0 001c 	rsb	r0, r0, #28
 8006174:	4403      	add	r3, r0
 8006176:	9305      	str	r3, [sp, #20]
 8006178:	9b06      	ldr	r3, [sp, #24]
 800617a:	4405      	add	r5, r0
 800617c:	4403      	add	r3, r0
 800617e:	9306      	str	r3, [sp, #24]
 8006180:	9b05      	ldr	r3, [sp, #20]
 8006182:	2b00      	cmp	r3, #0
 8006184:	dd05      	ble.n	8006192 <_dtoa_r+0x7f2>
 8006186:	4651      	mov	r1, sl
 8006188:	461a      	mov	r2, r3
 800618a:	4620      	mov	r0, r4
 800618c:	f000 fd90 	bl	8006cb0 <__lshift>
 8006190:	4682      	mov	sl, r0
 8006192:	9b06      	ldr	r3, [sp, #24]
 8006194:	2b00      	cmp	r3, #0
 8006196:	dd05      	ble.n	80061a4 <_dtoa_r+0x804>
 8006198:	4631      	mov	r1, r6
 800619a:	461a      	mov	r2, r3
 800619c:	4620      	mov	r0, r4
 800619e:	f000 fd87 	bl	8006cb0 <__lshift>
 80061a2:	4606      	mov	r6, r0
 80061a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d074      	beq.n	8006294 <_dtoa_r+0x8f4>
 80061aa:	4631      	mov	r1, r6
 80061ac:	4650      	mov	r0, sl
 80061ae:	f000 fdd0 	bl	8006d52 <__mcmp>
 80061b2:	2800      	cmp	r0, #0
 80061b4:	da6e      	bge.n	8006294 <_dtoa_r+0x8f4>
 80061b6:	2300      	movs	r3, #0
 80061b8:	4651      	mov	r1, sl
 80061ba:	220a      	movs	r2, #10
 80061bc:	4620      	mov	r0, r4
 80061be:	f000 fc09 	bl	80069d4 <__multadd>
 80061c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80061c8:	4682      	mov	sl, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	f000 81a8 	beq.w	8006520 <_dtoa_r+0xb80>
 80061d0:	2300      	movs	r3, #0
 80061d2:	4639      	mov	r1, r7
 80061d4:	220a      	movs	r2, #10
 80061d6:	4620      	mov	r0, r4
 80061d8:	f000 fbfc 	bl	80069d4 <__multadd>
 80061dc:	9b04      	ldr	r3, [sp, #16]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	4607      	mov	r7, r0
 80061e2:	f300 80c8 	bgt.w	8006376 <_dtoa_r+0x9d6>
 80061e6:	9b07      	ldr	r3, [sp, #28]
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	f340 80c4 	ble.w	8006376 <_dtoa_r+0x9d6>
 80061ee:	e059      	b.n	80062a4 <_dtoa_r+0x904>
 80061f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80061f2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80061f6:	e756      	b.n	80060a6 <_dtoa_r+0x706>
 80061f8:	9b03      	ldr	r3, [sp, #12]
 80061fa:	1e5e      	subs	r6, r3, #1
 80061fc:	9b08      	ldr	r3, [sp, #32]
 80061fe:	42b3      	cmp	r3, r6
 8006200:	bfbf      	itttt	lt
 8006202:	9b08      	ldrlt	r3, [sp, #32]
 8006204:	9608      	strlt	r6, [sp, #32]
 8006206:	1af2      	sublt	r2, r6, r3
 8006208:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800620a:	bfb6      	itet	lt
 800620c:	189b      	addlt	r3, r3, r2
 800620e:	1b9e      	subge	r6, r3, r6
 8006210:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8006212:	9b03      	ldr	r3, [sp, #12]
 8006214:	bfb8      	it	lt
 8006216:	2600      	movlt	r6, #0
 8006218:	2b00      	cmp	r3, #0
 800621a:	bfb9      	ittee	lt
 800621c:	9b05      	ldrlt	r3, [sp, #20]
 800621e:	9a03      	ldrlt	r2, [sp, #12]
 8006220:	9d05      	ldrge	r5, [sp, #20]
 8006222:	9b03      	ldrge	r3, [sp, #12]
 8006224:	bfbc      	itt	lt
 8006226:	1a9d      	sublt	r5, r3, r2
 8006228:	2300      	movlt	r3, #0
 800622a:	e73e      	b.n	80060aa <_dtoa_r+0x70a>
 800622c:	9e08      	ldr	r6, [sp, #32]
 800622e:	9d05      	ldr	r5, [sp, #20]
 8006230:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006232:	e745      	b.n	80060c0 <_dtoa_r+0x720>
 8006234:	9a08      	ldr	r2, [sp, #32]
 8006236:	e76e      	b.n	8006116 <_dtoa_r+0x776>
 8006238:	9b07      	ldr	r3, [sp, #28]
 800623a:	2b01      	cmp	r3, #1
 800623c:	dc19      	bgt.n	8006272 <_dtoa_r+0x8d2>
 800623e:	9b00      	ldr	r3, [sp, #0]
 8006240:	b9bb      	cbnz	r3, 8006272 <_dtoa_r+0x8d2>
 8006242:	9b01      	ldr	r3, [sp, #4]
 8006244:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006248:	b99b      	cbnz	r3, 8006272 <_dtoa_r+0x8d2>
 800624a:	9b01      	ldr	r3, [sp, #4]
 800624c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006250:	0d1b      	lsrs	r3, r3, #20
 8006252:	051b      	lsls	r3, r3, #20
 8006254:	b183      	cbz	r3, 8006278 <_dtoa_r+0x8d8>
 8006256:	9b05      	ldr	r3, [sp, #20]
 8006258:	3301      	adds	r3, #1
 800625a:	9305      	str	r3, [sp, #20]
 800625c:	9b06      	ldr	r3, [sp, #24]
 800625e:	3301      	adds	r3, #1
 8006260:	9306      	str	r3, [sp, #24]
 8006262:	f04f 0801 	mov.w	r8, #1
 8006266:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006268:	2b00      	cmp	r3, #0
 800626a:	f47f af6d 	bne.w	8006148 <_dtoa_r+0x7a8>
 800626e:	2001      	movs	r0, #1
 8006270:	e772      	b.n	8006158 <_dtoa_r+0x7b8>
 8006272:	f04f 0800 	mov.w	r8, #0
 8006276:	e7f6      	b.n	8006266 <_dtoa_r+0x8c6>
 8006278:	4698      	mov	r8, r3
 800627a:	e7f4      	b.n	8006266 <_dtoa_r+0x8c6>
 800627c:	d080      	beq.n	8006180 <_dtoa_r+0x7e0>
 800627e:	9a05      	ldr	r2, [sp, #20]
 8006280:	331c      	adds	r3, #28
 8006282:	441a      	add	r2, r3
 8006284:	9205      	str	r2, [sp, #20]
 8006286:	9a06      	ldr	r2, [sp, #24]
 8006288:	441a      	add	r2, r3
 800628a:	441d      	add	r5, r3
 800628c:	4613      	mov	r3, r2
 800628e:	e776      	b.n	800617e <_dtoa_r+0x7de>
 8006290:	4603      	mov	r3, r0
 8006292:	e7f4      	b.n	800627e <_dtoa_r+0x8de>
 8006294:	9b03      	ldr	r3, [sp, #12]
 8006296:	2b00      	cmp	r3, #0
 8006298:	dc36      	bgt.n	8006308 <_dtoa_r+0x968>
 800629a:	9b07      	ldr	r3, [sp, #28]
 800629c:	2b02      	cmp	r3, #2
 800629e:	dd33      	ble.n	8006308 <_dtoa_r+0x968>
 80062a0:	9b03      	ldr	r3, [sp, #12]
 80062a2:	9304      	str	r3, [sp, #16]
 80062a4:	9b04      	ldr	r3, [sp, #16]
 80062a6:	b963      	cbnz	r3, 80062c2 <_dtoa_r+0x922>
 80062a8:	4631      	mov	r1, r6
 80062aa:	2205      	movs	r2, #5
 80062ac:	4620      	mov	r0, r4
 80062ae:	f000 fb91 	bl	80069d4 <__multadd>
 80062b2:	4601      	mov	r1, r0
 80062b4:	4606      	mov	r6, r0
 80062b6:	4650      	mov	r0, sl
 80062b8:	f000 fd4b 	bl	8006d52 <__mcmp>
 80062bc:	2800      	cmp	r0, #0
 80062be:	f73f adb6 	bgt.w	8005e2e <_dtoa_r+0x48e>
 80062c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062c4:	9d02      	ldr	r5, [sp, #8]
 80062c6:	ea6f 0b03 	mvn.w	fp, r3
 80062ca:	2300      	movs	r3, #0
 80062cc:	9303      	str	r3, [sp, #12]
 80062ce:	4631      	mov	r1, r6
 80062d0:	4620      	mov	r0, r4
 80062d2:	f000 fb68 	bl	80069a6 <_Bfree>
 80062d6:	2f00      	cmp	r7, #0
 80062d8:	f43f aea6 	beq.w	8006028 <_dtoa_r+0x688>
 80062dc:	9b03      	ldr	r3, [sp, #12]
 80062de:	b12b      	cbz	r3, 80062ec <_dtoa_r+0x94c>
 80062e0:	42bb      	cmp	r3, r7
 80062e2:	d003      	beq.n	80062ec <_dtoa_r+0x94c>
 80062e4:	4619      	mov	r1, r3
 80062e6:	4620      	mov	r0, r4
 80062e8:	f000 fb5d 	bl	80069a6 <_Bfree>
 80062ec:	4639      	mov	r1, r7
 80062ee:	4620      	mov	r0, r4
 80062f0:	f000 fb59 	bl	80069a6 <_Bfree>
 80062f4:	e698      	b.n	8006028 <_dtoa_r+0x688>
 80062f6:	2600      	movs	r6, #0
 80062f8:	4637      	mov	r7, r6
 80062fa:	e7e2      	b.n	80062c2 <_dtoa_r+0x922>
 80062fc:	46bb      	mov	fp, r7
 80062fe:	4637      	mov	r7, r6
 8006300:	e595      	b.n	8005e2e <_dtoa_r+0x48e>
 8006302:	bf00      	nop
 8006304:	40240000 	.word	0x40240000
 8006308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800630a:	bb93      	cbnz	r3, 8006372 <_dtoa_r+0x9d2>
 800630c:	9b03      	ldr	r3, [sp, #12]
 800630e:	9304      	str	r3, [sp, #16]
 8006310:	9d02      	ldr	r5, [sp, #8]
 8006312:	4631      	mov	r1, r6
 8006314:	4650      	mov	r0, sl
 8006316:	f7ff fab7 	bl	8005888 <quorem>
 800631a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800631e:	f805 9b01 	strb.w	r9, [r5], #1
 8006322:	9b02      	ldr	r3, [sp, #8]
 8006324:	9a04      	ldr	r2, [sp, #16]
 8006326:	1aeb      	subs	r3, r5, r3
 8006328:	429a      	cmp	r2, r3
 800632a:	f300 80dc 	bgt.w	80064e6 <_dtoa_r+0xb46>
 800632e:	9b02      	ldr	r3, [sp, #8]
 8006330:	2a01      	cmp	r2, #1
 8006332:	bfac      	ite	ge
 8006334:	189b      	addge	r3, r3, r2
 8006336:	3301      	addlt	r3, #1
 8006338:	4698      	mov	r8, r3
 800633a:	2300      	movs	r3, #0
 800633c:	9303      	str	r3, [sp, #12]
 800633e:	4651      	mov	r1, sl
 8006340:	2201      	movs	r2, #1
 8006342:	4620      	mov	r0, r4
 8006344:	f000 fcb4 	bl	8006cb0 <__lshift>
 8006348:	4631      	mov	r1, r6
 800634a:	4682      	mov	sl, r0
 800634c:	f000 fd01 	bl	8006d52 <__mcmp>
 8006350:	2800      	cmp	r0, #0
 8006352:	f300 808d 	bgt.w	8006470 <_dtoa_r+0xad0>
 8006356:	d103      	bne.n	8006360 <_dtoa_r+0x9c0>
 8006358:	f019 0f01 	tst.w	r9, #1
 800635c:	f040 8088 	bne.w	8006470 <_dtoa_r+0xad0>
 8006360:	4645      	mov	r5, r8
 8006362:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006366:	2b30      	cmp	r3, #48	; 0x30
 8006368:	f105 32ff 	add.w	r2, r5, #4294967295
 800636c:	d1af      	bne.n	80062ce <_dtoa_r+0x92e>
 800636e:	4615      	mov	r5, r2
 8006370:	e7f7      	b.n	8006362 <_dtoa_r+0x9c2>
 8006372:	9b03      	ldr	r3, [sp, #12]
 8006374:	9304      	str	r3, [sp, #16]
 8006376:	2d00      	cmp	r5, #0
 8006378:	dd05      	ble.n	8006386 <_dtoa_r+0x9e6>
 800637a:	4639      	mov	r1, r7
 800637c:	462a      	mov	r2, r5
 800637e:	4620      	mov	r0, r4
 8006380:	f000 fc96 	bl	8006cb0 <__lshift>
 8006384:	4607      	mov	r7, r0
 8006386:	f1b8 0f00 	cmp.w	r8, #0
 800638a:	d04c      	beq.n	8006426 <_dtoa_r+0xa86>
 800638c:	6879      	ldr	r1, [r7, #4]
 800638e:	4620      	mov	r0, r4
 8006390:	f000 fad5 	bl	800693e <_Balloc>
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	3202      	adds	r2, #2
 8006398:	4605      	mov	r5, r0
 800639a:	0092      	lsls	r2, r2, #2
 800639c:	f107 010c 	add.w	r1, r7, #12
 80063a0:	300c      	adds	r0, #12
 80063a2:	f000 fac1 	bl	8006928 <memcpy>
 80063a6:	2201      	movs	r2, #1
 80063a8:	4629      	mov	r1, r5
 80063aa:	4620      	mov	r0, r4
 80063ac:	f000 fc80 	bl	8006cb0 <__lshift>
 80063b0:	9b00      	ldr	r3, [sp, #0]
 80063b2:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80063b6:	9703      	str	r7, [sp, #12]
 80063b8:	f003 0301 	and.w	r3, r3, #1
 80063bc:	4607      	mov	r7, r0
 80063be:	9305      	str	r3, [sp, #20]
 80063c0:	4631      	mov	r1, r6
 80063c2:	4650      	mov	r0, sl
 80063c4:	f7ff fa60 	bl	8005888 <quorem>
 80063c8:	9903      	ldr	r1, [sp, #12]
 80063ca:	4605      	mov	r5, r0
 80063cc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80063d0:	4650      	mov	r0, sl
 80063d2:	f000 fcbe 	bl	8006d52 <__mcmp>
 80063d6:	463a      	mov	r2, r7
 80063d8:	9000      	str	r0, [sp, #0]
 80063da:	4631      	mov	r1, r6
 80063dc:	4620      	mov	r0, r4
 80063de:	f000 fcd2 	bl	8006d86 <__mdiff>
 80063e2:	68c3      	ldr	r3, [r0, #12]
 80063e4:	4602      	mov	r2, r0
 80063e6:	bb03      	cbnz	r3, 800642a <_dtoa_r+0xa8a>
 80063e8:	4601      	mov	r1, r0
 80063ea:	9006      	str	r0, [sp, #24]
 80063ec:	4650      	mov	r0, sl
 80063ee:	f000 fcb0 	bl	8006d52 <__mcmp>
 80063f2:	9a06      	ldr	r2, [sp, #24]
 80063f4:	4603      	mov	r3, r0
 80063f6:	4611      	mov	r1, r2
 80063f8:	4620      	mov	r0, r4
 80063fa:	9306      	str	r3, [sp, #24]
 80063fc:	f000 fad3 	bl	80069a6 <_Bfree>
 8006400:	9b06      	ldr	r3, [sp, #24]
 8006402:	b9a3      	cbnz	r3, 800642e <_dtoa_r+0xa8e>
 8006404:	9a07      	ldr	r2, [sp, #28]
 8006406:	b992      	cbnz	r2, 800642e <_dtoa_r+0xa8e>
 8006408:	9a05      	ldr	r2, [sp, #20]
 800640a:	b982      	cbnz	r2, 800642e <_dtoa_r+0xa8e>
 800640c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006410:	d029      	beq.n	8006466 <_dtoa_r+0xac6>
 8006412:	9b00      	ldr	r3, [sp, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	dd01      	ble.n	800641c <_dtoa_r+0xa7c>
 8006418:	f105 0931 	add.w	r9, r5, #49	; 0x31
 800641c:	f108 0501 	add.w	r5, r8, #1
 8006420:	f888 9000 	strb.w	r9, [r8]
 8006424:	e753      	b.n	80062ce <_dtoa_r+0x92e>
 8006426:	4638      	mov	r0, r7
 8006428:	e7c2      	b.n	80063b0 <_dtoa_r+0xa10>
 800642a:	2301      	movs	r3, #1
 800642c:	e7e3      	b.n	80063f6 <_dtoa_r+0xa56>
 800642e:	9a00      	ldr	r2, [sp, #0]
 8006430:	2a00      	cmp	r2, #0
 8006432:	db04      	blt.n	800643e <_dtoa_r+0xa9e>
 8006434:	d125      	bne.n	8006482 <_dtoa_r+0xae2>
 8006436:	9a07      	ldr	r2, [sp, #28]
 8006438:	bb1a      	cbnz	r2, 8006482 <_dtoa_r+0xae2>
 800643a:	9a05      	ldr	r2, [sp, #20]
 800643c:	bb0a      	cbnz	r2, 8006482 <_dtoa_r+0xae2>
 800643e:	2b00      	cmp	r3, #0
 8006440:	ddec      	ble.n	800641c <_dtoa_r+0xa7c>
 8006442:	4651      	mov	r1, sl
 8006444:	2201      	movs	r2, #1
 8006446:	4620      	mov	r0, r4
 8006448:	f000 fc32 	bl	8006cb0 <__lshift>
 800644c:	4631      	mov	r1, r6
 800644e:	4682      	mov	sl, r0
 8006450:	f000 fc7f 	bl	8006d52 <__mcmp>
 8006454:	2800      	cmp	r0, #0
 8006456:	dc03      	bgt.n	8006460 <_dtoa_r+0xac0>
 8006458:	d1e0      	bne.n	800641c <_dtoa_r+0xa7c>
 800645a:	f019 0f01 	tst.w	r9, #1
 800645e:	d0dd      	beq.n	800641c <_dtoa_r+0xa7c>
 8006460:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006464:	d1d8      	bne.n	8006418 <_dtoa_r+0xa78>
 8006466:	2339      	movs	r3, #57	; 0x39
 8006468:	f888 3000 	strb.w	r3, [r8]
 800646c:	f108 0801 	add.w	r8, r8, #1
 8006470:	4645      	mov	r5, r8
 8006472:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006476:	2b39      	cmp	r3, #57	; 0x39
 8006478:	f105 32ff 	add.w	r2, r5, #4294967295
 800647c:	d03b      	beq.n	80064f6 <_dtoa_r+0xb56>
 800647e:	3301      	adds	r3, #1
 8006480:	e040      	b.n	8006504 <_dtoa_r+0xb64>
 8006482:	2b00      	cmp	r3, #0
 8006484:	f108 0501 	add.w	r5, r8, #1
 8006488:	dd05      	ble.n	8006496 <_dtoa_r+0xaf6>
 800648a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800648e:	d0ea      	beq.n	8006466 <_dtoa_r+0xac6>
 8006490:	f109 0901 	add.w	r9, r9, #1
 8006494:	e7c4      	b.n	8006420 <_dtoa_r+0xa80>
 8006496:	9b02      	ldr	r3, [sp, #8]
 8006498:	9a04      	ldr	r2, [sp, #16]
 800649a:	f805 9c01 	strb.w	r9, [r5, #-1]
 800649e:	1aeb      	subs	r3, r5, r3
 80064a0:	4293      	cmp	r3, r2
 80064a2:	46a8      	mov	r8, r5
 80064a4:	f43f af4b 	beq.w	800633e <_dtoa_r+0x99e>
 80064a8:	4651      	mov	r1, sl
 80064aa:	2300      	movs	r3, #0
 80064ac:	220a      	movs	r2, #10
 80064ae:	4620      	mov	r0, r4
 80064b0:	f000 fa90 	bl	80069d4 <__multadd>
 80064b4:	9b03      	ldr	r3, [sp, #12]
 80064b6:	9903      	ldr	r1, [sp, #12]
 80064b8:	42bb      	cmp	r3, r7
 80064ba:	4682      	mov	sl, r0
 80064bc:	f04f 0300 	mov.w	r3, #0
 80064c0:	f04f 020a 	mov.w	r2, #10
 80064c4:	4620      	mov	r0, r4
 80064c6:	d104      	bne.n	80064d2 <_dtoa_r+0xb32>
 80064c8:	f000 fa84 	bl	80069d4 <__multadd>
 80064cc:	9003      	str	r0, [sp, #12]
 80064ce:	4607      	mov	r7, r0
 80064d0:	e776      	b.n	80063c0 <_dtoa_r+0xa20>
 80064d2:	f000 fa7f 	bl	80069d4 <__multadd>
 80064d6:	2300      	movs	r3, #0
 80064d8:	9003      	str	r0, [sp, #12]
 80064da:	220a      	movs	r2, #10
 80064dc:	4639      	mov	r1, r7
 80064de:	4620      	mov	r0, r4
 80064e0:	f000 fa78 	bl	80069d4 <__multadd>
 80064e4:	e7f3      	b.n	80064ce <_dtoa_r+0xb2e>
 80064e6:	4651      	mov	r1, sl
 80064e8:	2300      	movs	r3, #0
 80064ea:	220a      	movs	r2, #10
 80064ec:	4620      	mov	r0, r4
 80064ee:	f000 fa71 	bl	80069d4 <__multadd>
 80064f2:	4682      	mov	sl, r0
 80064f4:	e70d      	b.n	8006312 <_dtoa_r+0x972>
 80064f6:	9b02      	ldr	r3, [sp, #8]
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d105      	bne.n	8006508 <_dtoa_r+0xb68>
 80064fc:	9a02      	ldr	r2, [sp, #8]
 80064fe:	f10b 0b01 	add.w	fp, fp, #1
 8006502:	2331      	movs	r3, #49	; 0x31
 8006504:	7013      	strb	r3, [r2, #0]
 8006506:	e6e2      	b.n	80062ce <_dtoa_r+0x92e>
 8006508:	4615      	mov	r5, r2
 800650a:	e7b2      	b.n	8006472 <_dtoa_r+0xad2>
 800650c:	4b09      	ldr	r3, [pc, #36]	; (8006534 <_dtoa_r+0xb94>)
 800650e:	f7ff baae 	b.w	8005a6e <_dtoa_r+0xce>
 8006512:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006514:	2b00      	cmp	r3, #0
 8006516:	f47f aa88 	bne.w	8005a2a <_dtoa_r+0x8a>
 800651a:	4b07      	ldr	r3, [pc, #28]	; (8006538 <_dtoa_r+0xb98>)
 800651c:	f7ff baa7 	b.w	8005a6e <_dtoa_r+0xce>
 8006520:	9b04      	ldr	r3, [sp, #16]
 8006522:	2b00      	cmp	r3, #0
 8006524:	f73f aef4 	bgt.w	8006310 <_dtoa_r+0x970>
 8006528:	9b07      	ldr	r3, [sp, #28]
 800652a:	2b02      	cmp	r3, #2
 800652c:	f77f aef0 	ble.w	8006310 <_dtoa_r+0x970>
 8006530:	e6b8      	b.n	80062a4 <_dtoa_r+0x904>
 8006532:	bf00      	nop
 8006534:	08007874 	.word	0x08007874
 8006538:	08007898 	.word	0x08007898

0800653c <__sflush_r>:
 800653c:	898a      	ldrh	r2, [r1, #12]
 800653e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006542:	4605      	mov	r5, r0
 8006544:	0710      	lsls	r0, r2, #28
 8006546:	460c      	mov	r4, r1
 8006548:	d45a      	bmi.n	8006600 <__sflush_r+0xc4>
 800654a:	684b      	ldr	r3, [r1, #4]
 800654c:	2b00      	cmp	r3, #0
 800654e:	dc05      	bgt.n	800655c <__sflush_r+0x20>
 8006550:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006552:	2b00      	cmp	r3, #0
 8006554:	dc02      	bgt.n	800655c <__sflush_r+0x20>
 8006556:	2000      	movs	r0, #0
 8006558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800655c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800655e:	2e00      	cmp	r6, #0
 8006560:	d0f9      	beq.n	8006556 <__sflush_r+0x1a>
 8006562:	2300      	movs	r3, #0
 8006564:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006568:	682f      	ldr	r7, [r5, #0]
 800656a:	602b      	str	r3, [r5, #0]
 800656c:	d033      	beq.n	80065d6 <__sflush_r+0x9a>
 800656e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006570:	89a3      	ldrh	r3, [r4, #12]
 8006572:	075a      	lsls	r2, r3, #29
 8006574:	d505      	bpl.n	8006582 <__sflush_r+0x46>
 8006576:	6863      	ldr	r3, [r4, #4]
 8006578:	1ac0      	subs	r0, r0, r3
 800657a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800657c:	b10b      	cbz	r3, 8006582 <__sflush_r+0x46>
 800657e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006580:	1ac0      	subs	r0, r0, r3
 8006582:	2300      	movs	r3, #0
 8006584:	4602      	mov	r2, r0
 8006586:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006588:	6a21      	ldr	r1, [r4, #32]
 800658a:	4628      	mov	r0, r5
 800658c:	47b0      	blx	r6
 800658e:	1c43      	adds	r3, r0, #1
 8006590:	89a3      	ldrh	r3, [r4, #12]
 8006592:	d106      	bne.n	80065a2 <__sflush_r+0x66>
 8006594:	6829      	ldr	r1, [r5, #0]
 8006596:	291d      	cmp	r1, #29
 8006598:	d84b      	bhi.n	8006632 <__sflush_r+0xf6>
 800659a:	4a2b      	ldr	r2, [pc, #172]	; (8006648 <__sflush_r+0x10c>)
 800659c:	40ca      	lsrs	r2, r1
 800659e:	07d6      	lsls	r6, r2, #31
 80065a0:	d547      	bpl.n	8006632 <__sflush_r+0xf6>
 80065a2:	2200      	movs	r2, #0
 80065a4:	6062      	str	r2, [r4, #4]
 80065a6:	04d9      	lsls	r1, r3, #19
 80065a8:	6922      	ldr	r2, [r4, #16]
 80065aa:	6022      	str	r2, [r4, #0]
 80065ac:	d504      	bpl.n	80065b8 <__sflush_r+0x7c>
 80065ae:	1c42      	adds	r2, r0, #1
 80065b0:	d101      	bne.n	80065b6 <__sflush_r+0x7a>
 80065b2:	682b      	ldr	r3, [r5, #0]
 80065b4:	b903      	cbnz	r3, 80065b8 <__sflush_r+0x7c>
 80065b6:	6560      	str	r0, [r4, #84]	; 0x54
 80065b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065ba:	602f      	str	r7, [r5, #0]
 80065bc:	2900      	cmp	r1, #0
 80065be:	d0ca      	beq.n	8006556 <__sflush_r+0x1a>
 80065c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80065c4:	4299      	cmp	r1, r3
 80065c6:	d002      	beq.n	80065ce <__sflush_r+0x92>
 80065c8:	4628      	mov	r0, r5
 80065ca:	f000 fc97 	bl	8006efc <_free_r>
 80065ce:	2000      	movs	r0, #0
 80065d0:	6360      	str	r0, [r4, #52]	; 0x34
 80065d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065d6:	6a21      	ldr	r1, [r4, #32]
 80065d8:	2301      	movs	r3, #1
 80065da:	4628      	mov	r0, r5
 80065dc:	47b0      	blx	r6
 80065de:	1c41      	adds	r1, r0, #1
 80065e0:	d1c6      	bne.n	8006570 <__sflush_r+0x34>
 80065e2:	682b      	ldr	r3, [r5, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d0c3      	beq.n	8006570 <__sflush_r+0x34>
 80065e8:	2b1d      	cmp	r3, #29
 80065ea:	d001      	beq.n	80065f0 <__sflush_r+0xb4>
 80065ec:	2b16      	cmp	r3, #22
 80065ee:	d101      	bne.n	80065f4 <__sflush_r+0xb8>
 80065f0:	602f      	str	r7, [r5, #0]
 80065f2:	e7b0      	b.n	8006556 <__sflush_r+0x1a>
 80065f4:	89a3      	ldrh	r3, [r4, #12]
 80065f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065fa:	81a3      	strh	r3, [r4, #12]
 80065fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006600:	690f      	ldr	r7, [r1, #16]
 8006602:	2f00      	cmp	r7, #0
 8006604:	d0a7      	beq.n	8006556 <__sflush_r+0x1a>
 8006606:	0793      	lsls	r3, r2, #30
 8006608:	680e      	ldr	r6, [r1, #0]
 800660a:	bf08      	it	eq
 800660c:	694b      	ldreq	r3, [r1, #20]
 800660e:	600f      	str	r7, [r1, #0]
 8006610:	bf18      	it	ne
 8006612:	2300      	movne	r3, #0
 8006614:	eba6 0807 	sub.w	r8, r6, r7
 8006618:	608b      	str	r3, [r1, #8]
 800661a:	f1b8 0f00 	cmp.w	r8, #0
 800661e:	dd9a      	ble.n	8006556 <__sflush_r+0x1a>
 8006620:	4643      	mov	r3, r8
 8006622:	463a      	mov	r2, r7
 8006624:	6a21      	ldr	r1, [r4, #32]
 8006626:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006628:	4628      	mov	r0, r5
 800662a:	47b0      	blx	r6
 800662c:	2800      	cmp	r0, #0
 800662e:	dc07      	bgt.n	8006640 <__sflush_r+0x104>
 8006630:	89a3      	ldrh	r3, [r4, #12]
 8006632:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006636:	81a3      	strh	r3, [r4, #12]
 8006638:	f04f 30ff 	mov.w	r0, #4294967295
 800663c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006640:	4407      	add	r7, r0
 8006642:	eba8 0800 	sub.w	r8, r8, r0
 8006646:	e7e8      	b.n	800661a <__sflush_r+0xde>
 8006648:	20400001 	.word	0x20400001

0800664c <_fflush_r>:
 800664c:	b538      	push	{r3, r4, r5, lr}
 800664e:	690b      	ldr	r3, [r1, #16]
 8006650:	4605      	mov	r5, r0
 8006652:	460c      	mov	r4, r1
 8006654:	b1db      	cbz	r3, 800668e <_fflush_r+0x42>
 8006656:	b118      	cbz	r0, 8006660 <_fflush_r+0x14>
 8006658:	6983      	ldr	r3, [r0, #24]
 800665a:	b90b      	cbnz	r3, 8006660 <_fflush_r+0x14>
 800665c:	f000 f860 	bl	8006720 <__sinit>
 8006660:	4b0c      	ldr	r3, [pc, #48]	; (8006694 <_fflush_r+0x48>)
 8006662:	429c      	cmp	r4, r3
 8006664:	d109      	bne.n	800667a <_fflush_r+0x2e>
 8006666:	686c      	ldr	r4, [r5, #4]
 8006668:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800666c:	b17b      	cbz	r3, 800668e <_fflush_r+0x42>
 800666e:	4621      	mov	r1, r4
 8006670:	4628      	mov	r0, r5
 8006672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006676:	f7ff bf61 	b.w	800653c <__sflush_r>
 800667a:	4b07      	ldr	r3, [pc, #28]	; (8006698 <_fflush_r+0x4c>)
 800667c:	429c      	cmp	r4, r3
 800667e:	d101      	bne.n	8006684 <_fflush_r+0x38>
 8006680:	68ac      	ldr	r4, [r5, #8]
 8006682:	e7f1      	b.n	8006668 <_fflush_r+0x1c>
 8006684:	4b05      	ldr	r3, [pc, #20]	; (800669c <_fflush_r+0x50>)
 8006686:	429c      	cmp	r4, r3
 8006688:	bf08      	it	eq
 800668a:	68ec      	ldreq	r4, [r5, #12]
 800668c:	e7ec      	b.n	8006668 <_fflush_r+0x1c>
 800668e:	2000      	movs	r0, #0
 8006690:	bd38      	pop	{r3, r4, r5, pc}
 8006692:	bf00      	nop
 8006694:	080078c8 	.word	0x080078c8
 8006698:	080078e8 	.word	0x080078e8
 800669c:	080078a8 	.word	0x080078a8

080066a0 <_cleanup_r>:
 80066a0:	4901      	ldr	r1, [pc, #4]	; (80066a8 <_cleanup_r+0x8>)
 80066a2:	f000 b8a9 	b.w	80067f8 <_fwalk_reent>
 80066a6:	bf00      	nop
 80066a8:	0800664d 	.word	0x0800664d

080066ac <std.isra.0>:
 80066ac:	2300      	movs	r3, #0
 80066ae:	b510      	push	{r4, lr}
 80066b0:	4604      	mov	r4, r0
 80066b2:	6003      	str	r3, [r0, #0]
 80066b4:	6043      	str	r3, [r0, #4]
 80066b6:	6083      	str	r3, [r0, #8]
 80066b8:	8181      	strh	r1, [r0, #12]
 80066ba:	6643      	str	r3, [r0, #100]	; 0x64
 80066bc:	81c2      	strh	r2, [r0, #14]
 80066be:	6103      	str	r3, [r0, #16]
 80066c0:	6143      	str	r3, [r0, #20]
 80066c2:	6183      	str	r3, [r0, #24]
 80066c4:	4619      	mov	r1, r3
 80066c6:	2208      	movs	r2, #8
 80066c8:	305c      	adds	r0, #92	; 0x5c
 80066ca:	f7fe fb2d 	bl	8004d28 <memset>
 80066ce:	4b05      	ldr	r3, [pc, #20]	; (80066e4 <std.isra.0+0x38>)
 80066d0:	6263      	str	r3, [r4, #36]	; 0x24
 80066d2:	4b05      	ldr	r3, [pc, #20]	; (80066e8 <std.isra.0+0x3c>)
 80066d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80066d6:	4b05      	ldr	r3, [pc, #20]	; (80066ec <std.isra.0+0x40>)
 80066d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80066da:	4b05      	ldr	r3, [pc, #20]	; (80066f0 <std.isra.0+0x44>)
 80066dc:	6224      	str	r4, [r4, #32]
 80066de:	6323      	str	r3, [r4, #48]	; 0x30
 80066e0:	bd10      	pop	{r4, pc}
 80066e2:	bf00      	nop
 80066e4:	080072f5 	.word	0x080072f5
 80066e8:	08007317 	.word	0x08007317
 80066ec:	0800734f 	.word	0x0800734f
 80066f0:	08007373 	.word	0x08007373

080066f4 <__sfmoreglue>:
 80066f4:	b570      	push	{r4, r5, r6, lr}
 80066f6:	1e4a      	subs	r2, r1, #1
 80066f8:	2568      	movs	r5, #104	; 0x68
 80066fa:	4355      	muls	r5, r2
 80066fc:	460e      	mov	r6, r1
 80066fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006702:	f000 fc49 	bl	8006f98 <_malloc_r>
 8006706:	4604      	mov	r4, r0
 8006708:	b140      	cbz	r0, 800671c <__sfmoreglue+0x28>
 800670a:	2100      	movs	r1, #0
 800670c:	e880 0042 	stmia.w	r0, {r1, r6}
 8006710:	300c      	adds	r0, #12
 8006712:	60a0      	str	r0, [r4, #8]
 8006714:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006718:	f7fe fb06 	bl	8004d28 <memset>
 800671c:	4620      	mov	r0, r4
 800671e:	bd70      	pop	{r4, r5, r6, pc}

08006720 <__sinit>:
 8006720:	6983      	ldr	r3, [r0, #24]
 8006722:	b510      	push	{r4, lr}
 8006724:	4604      	mov	r4, r0
 8006726:	bb33      	cbnz	r3, 8006776 <__sinit+0x56>
 8006728:	6483      	str	r3, [r0, #72]	; 0x48
 800672a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800672c:	6503      	str	r3, [r0, #80]	; 0x50
 800672e:	4b12      	ldr	r3, [pc, #72]	; (8006778 <__sinit+0x58>)
 8006730:	4a12      	ldr	r2, [pc, #72]	; (800677c <__sinit+0x5c>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	6282      	str	r2, [r0, #40]	; 0x28
 8006736:	4298      	cmp	r0, r3
 8006738:	bf04      	itt	eq
 800673a:	2301      	moveq	r3, #1
 800673c:	6183      	streq	r3, [r0, #24]
 800673e:	f000 f81f 	bl	8006780 <__sfp>
 8006742:	6060      	str	r0, [r4, #4]
 8006744:	4620      	mov	r0, r4
 8006746:	f000 f81b 	bl	8006780 <__sfp>
 800674a:	60a0      	str	r0, [r4, #8]
 800674c:	4620      	mov	r0, r4
 800674e:	f000 f817 	bl	8006780 <__sfp>
 8006752:	2200      	movs	r2, #0
 8006754:	60e0      	str	r0, [r4, #12]
 8006756:	2104      	movs	r1, #4
 8006758:	6860      	ldr	r0, [r4, #4]
 800675a:	f7ff ffa7 	bl	80066ac <std.isra.0>
 800675e:	2201      	movs	r2, #1
 8006760:	2109      	movs	r1, #9
 8006762:	68a0      	ldr	r0, [r4, #8]
 8006764:	f7ff ffa2 	bl	80066ac <std.isra.0>
 8006768:	2202      	movs	r2, #2
 800676a:	2112      	movs	r1, #18
 800676c:	68e0      	ldr	r0, [r4, #12]
 800676e:	f7ff ff9d 	bl	80066ac <std.isra.0>
 8006772:	2301      	movs	r3, #1
 8006774:	61a3      	str	r3, [r4, #24]
 8006776:	bd10      	pop	{r4, pc}
 8006778:	08007860 	.word	0x08007860
 800677c:	080066a1 	.word	0x080066a1

08006780 <__sfp>:
 8006780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006782:	4b1c      	ldr	r3, [pc, #112]	; (80067f4 <__sfp+0x74>)
 8006784:	681e      	ldr	r6, [r3, #0]
 8006786:	69b3      	ldr	r3, [r6, #24]
 8006788:	4607      	mov	r7, r0
 800678a:	b913      	cbnz	r3, 8006792 <__sfp+0x12>
 800678c:	4630      	mov	r0, r6
 800678e:	f7ff ffc7 	bl	8006720 <__sinit>
 8006792:	3648      	adds	r6, #72	; 0x48
 8006794:	68b4      	ldr	r4, [r6, #8]
 8006796:	6873      	ldr	r3, [r6, #4]
 8006798:	3b01      	subs	r3, #1
 800679a:	d503      	bpl.n	80067a4 <__sfp+0x24>
 800679c:	6833      	ldr	r3, [r6, #0]
 800679e:	b133      	cbz	r3, 80067ae <__sfp+0x2e>
 80067a0:	6836      	ldr	r6, [r6, #0]
 80067a2:	e7f7      	b.n	8006794 <__sfp+0x14>
 80067a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80067a8:	b16d      	cbz	r5, 80067c6 <__sfp+0x46>
 80067aa:	3468      	adds	r4, #104	; 0x68
 80067ac:	e7f4      	b.n	8006798 <__sfp+0x18>
 80067ae:	2104      	movs	r1, #4
 80067b0:	4638      	mov	r0, r7
 80067b2:	f7ff ff9f 	bl	80066f4 <__sfmoreglue>
 80067b6:	6030      	str	r0, [r6, #0]
 80067b8:	2800      	cmp	r0, #0
 80067ba:	d1f1      	bne.n	80067a0 <__sfp+0x20>
 80067bc:	230c      	movs	r3, #12
 80067be:	603b      	str	r3, [r7, #0]
 80067c0:	4604      	mov	r4, r0
 80067c2:	4620      	mov	r0, r4
 80067c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80067ca:	81e3      	strh	r3, [r4, #14]
 80067cc:	2301      	movs	r3, #1
 80067ce:	81a3      	strh	r3, [r4, #12]
 80067d0:	6665      	str	r5, [r4, #100]	; 0x64
 80067d2:	6025      	str	r5, [r4, #0]
 80067d4:	60a5      	str	r5, [r4, #8]
 80067d6:	6065      	str	r5, [r4, #4]
 80067d8:	6125      	str	r5, [r4, #16]
 80067da:	6165      	str	r5, [r4, #20]
 80067dc:	61a5      	str	r5, [r4, #24]
 80067de:	2208      	movs	r2, #8
 80067e0:	4629      	mov	r1, r5
 80067e2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80067e6:	f7fe fa9f 	bl	8004d28 <memset>
 80067ea:	6365      	str	r5, [r4, #52]	; 0x34
 80067ec:	63a5      	str	r5, [r4, #56]	; 0x38
 80067ee:	64a5      	str	r5, [r4, #72]	; 0x48
 80067f0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80067f2:	e7e6      	b.n	80067c2 <__sfp+0x42>
 80067f4:	08007860 	.word	0x08007860

080067f8 <_fwalk_reent>:
 80067f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067fc:	4680      	mov	r8, r0
 80067fe:	4689      	mov	r9, r1
 8006800:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006804:	2600      	movs	r6, #0
 8006806:	b914      	cbnz	r4, 800680e <_fwalk_reent+0x16>
 8006808:	4630      	mov	r0, r6
 800680a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800680e:	68a5      	ldr	r5, [r4, #8]
 8006810:	6867      	ldr	r7, [r4, #4]
 8006812:	3f01      	subs	r7, #1
 8006814:	d501      	bpl.n	800681a <_fwalk_reent+0x22>
 8006816:	6824      	ldr	r4, [r4, #0]
 8006818:	e7f5      	b.n	8006806 <_fwalk_reent+0xe>
 800681a:	89ab      	ldrh	r3, [r5, #12]
 800681c:	2b01      	cmp	r3, #1
 800681e:	d907      	bls.n	8006830 <_fwalk_reent+0x38>
 8006820:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006824:	3301      	adds	r3, #1
 8006826:	d003      	beq.n	8006830 <_fwalk_reent+0x38>
 8006828:	4629      	mov	r1, r5
 800682a:	4640      	mov	r0, r8
 800682c:	47c8      	blx	r9
 800682e:	4306      	orrs	r6, r0
 8006830:	3568      	adds	r5, #104	; 0x68
 8006832:	e7ee      	b.n	8006812 <_fwalk_reent+0x1a>

08006834 <_localeconv_r>:
 8006834:	4b04      	ldr	r3, [pc, #16]	; (8006848 <_localeconv_r+0x14>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	6a18      	ldr	r0, [r3, #32]
 800683a:	4b04      	ldr	r3, [pc, #16]	; (800684c <_localeconv_r+0x18>)
 800683c:	2800      	cmp	r0, #0
 800683e:	bf08      	it	eq
 8006840:	4618      	moveq	r0, r3
 8006842:	30f0      	adds	r0, #240	; 0xf0
 8006844:	4770      	bx	lr
 8006846:	bf00      	nop
 8006848:	20000004 	.word	0x20000004
 800684c:	20000068 	.word	0x20000068

08006850 <__swhatbuf_r>:
 8006850:	b570      	push	{r4, r5, r6, lr}
 8006852:	460e      	mov	r6, r1
 8006854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006858:	2900      	cmp	r1, #0
 800685a:	b090      	sub	sp, #64	; 0x40
 800685c:	4614      	mov	r4, r2
 800685e:	461d      	mov	r5, r3
 8006860:	da07      	bge.n	8006872 <__swhatbuf_r+0x22>
 8006862:	2300      	movs	r3, #0
 8006864:	602b      	str	r3, [r5, #0]
 8006866:	89b3      	ldrh	r3, [r6, #12]
 8006868:	061a      	lsls	r2, r3, #24
 800686a:	d410      	bmi.n	800688e <__swhatbuf_r+0x3e>
 800686c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006870:	e00e      	b.n	8006890 <__swhatbuf_r+0x40>
 8006872:	aa01      	add	r2, sp, #4
 8006874:	f000 fda4 	bl	80073c0 <_fstat_r>
 8006878:	2800      	cmp	r0, #0
 800687a:	dbf2      	blt.n	8006862 <__swhatbuf_r+0x12>
 800687c:	9a02      	ldr	r2, [sp, #8]
 800687e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006882:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006886:	425a      	negs	r2, r3
 8006888:	415a      	adcs	r2, r3
 800688a:	602a      	str	r2, [r5, #0]
 800688c:	e7ee      	b.n	800686c <__swhatbuf_r+0x1c>
 800688e:	2340      	movs	r3, #64	; 0x40
 8006890:	2000      	movs	r0, #0
 8006892:	6023      	str	r3, [r4, #0]
 8006894:	b010      	add	sp, #64	; 0x40
 8006896:	bd70      	pop	{r4, r5, r6, pc}

08006898 <__smakebuf_r>:
 8006898:	898b      	ldrh	r3, [r1, #12]
 800689a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800689c:	079d      	lsls	r5, r3, #30
 800689e:	4606      	mov	r6, r0
 80068a0:	460c      	mov	r4, r1
 80068a2:	d507      	bpl.n	80068b4 <__smakebuf_r+0x1c>
 80068a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80068a8:	6023      	str	r3, [r4, #0]
 80068aa:	6123      	str	r3, [r4, #16]
 80068ac:	2301      	movs	r3, #1
 80068ae:	6163      	str	r3, [r4, #20]
 80068b0:	b002      	add	sp, #8
 80068b2:	bd70      	pop	{r4, r5, r6, pc}
 80068b4:	ab01      	add	r3, sp, #4
 80068b6:	466a      	mov	r2, sp
 80068b8:	f7ff ffca 	bl	8006850 <__swhatbuf_r>
 80068bc:	9900      	ldr	r1, [sp, #0]
 80068be:	4605      	mov	r5, r0
 80068c0:	4630      	mov	r0, r6
 80068c2:	f000 fb69 	bl	8006f98 <_malloc_r>
 80068c6:	b948      	cbnz	r0, 80068dc <__smakebuf_r+0x44>
 80068c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068cc:	059a      	lsls	r2, r3, #22
 80068ce:	d4ef      	bmi.n	80068b0 <__smakebuf_r+0x18>
 80068d0:	f023 0303 	bic.w	r3, r3, #3
 80068d4:	f043 0302 	orr.w	r3, r3, #2
 80068d8:	81a3      	strh	r3, [r4, #12]
 80068da:	e7e3      	b.n	80068a4 <__smakebuf_r+0xc>
 80068dc:	4b0d      	ldr	r3, [pc, #52]	; (8006914 <__smakebuf_r+0x7c>)
 80068de:	62b3      	str	r3, [r6, #40]	; 0x28
 80068e0:	89a3      	ldrh	r3, [r4, #12]
 80068e2:	6020      	str	r0, [r4, #0]
 80068e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068e8:	81a3      	strh	r3, [r4, #12]
 80068ea:	9b00      	ldr	r3, [sp, #0]
 80068ec:	6163      	str	r3, [r4, #20]
 80068ee:	9b01      	ldr	r3, [sp, #4]
 80068f0:	6120      	str	r0, [r4, #16]
 80068f2:	b15b      	cbz	r3, 800690c <__smakebuf_r+0x74>
 80068f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068f8:	4630      	mov	r0, r6
 80068fa:	f000 fd73 	bl	80073e4 <_isatty_r>
 80068fe:	b128      	cbz	r0, 800690c <__smakebuf_r+0x74>
 8006900:	89a3      	ldrh	r3, [r4, #12]
 8006902:	f023 0303 	bic.w	r3, r3, #3
 8006906:	f043 0301 	orr.w	r3, r3, #1
 800690a:	81a3      	strh	r3, [r4, #12]
 800690c:	89a3      	ldrh	r3, [r4, #12]
 800690e:	431d      	orrs	r5, r3
 8006910:	81a5      	strh	r5, [r4, #12]
 8006912:	e7cd      	b.n	80068b0 <__smakebuf_r+0x18>
 8006914:	080066a1 	.word	0x080066a1

08006918 <malloc>:
 8006918:	4b02      	ldr	r3, [pc, #8]	; (8006924 <malloc+0xc>)
 800691a:	4601      	mov	r1, r0
 800691c:	6818      	ldr	r0, [r3, #0]
 800691e:	f000 bb3b 	b.w	8006f98 <_malloc_r>
 8006922:	bf00      	nop
 8006924:	20000004 	.word	0x20000004

08006928 <memcpy>:
 8006928:	b510      	push	{r4, lr}
 800692a:	1e43      	subs	r3, r0, #1
 800692c:	440a      	add	r2, r1
 800692e:	4291      	cmp	r1, r2
 8006930:	d100      	bne.n	8006934 <memcpy+0xc>
 8006932:	bd10      	pop	{r4, pc}
 8006934:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006938:	f803 4f01 	strb.w	r4, [r3, #1]!
 800693c:	e7f7      	b.n	800692e <memcpy+0x6>

0800693e <_Balloc>:
 800693e:	b570      	push	{r4, r5, r6, lr}
 8006940:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006942:	4604      	mov	r4, r0
 8006944:	460e      	mov	r6, r1
 8006946:	b93d      	cbnz	r5, 8006958 <_Balloc+0x1a>
 8006948:	2010      	movs	r0, #16
 800694a:	f7ff ffe5 	bl	8006918 <malloc>
 800694e:	6260      	str	r0, [r4, #36]	; 0x24
 8006950:	6045      	str	r5, [r0, #4]
 8006952:	6085      	str	r5, [r0, #8]
 8006954:	6005      	str	r5, [r0, #0]
 8006956:	60c5      	str	r5, [r0, #12]
 8006958:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800695a:	68eb      	ldr	r3, [r5, #12]
 800695c:	b183      	cbz	r3, 8006980 <_Balloc+0x42>
 800695e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006966:	b9b8      	cbnz	r0, 8006998 <_Balloc+0x5a>
 8006968:	2101      	movs	r1, #1
 800696a:	fa01 f506 	lsl.w	r5, r1, r6
 800696e:	1d6a      	adds	r2, r5, #5
 8006970:	0092      	lsls	r2, r2, #2
 8006972:	4620      	mov	r0, r4
 8006974:	f000 fab4 	bl	8006ee0 <_calloc_r>
 8006978:	b160      	cbz	r0, 8006994 <_Balloc+0x56>
 800697a:	6046      	str	r6, [r0, #4]
 800697c:	6085      	str	r5, [r0, #8]
 800697e:	e00e      	b.n	800699e <_Balloc+0x60>
 8006980:	2221      	movs	r2, #33	; 0x21
 8006982:	2104      	movs	r1, #4
 8006984:	4620      	mov	r0, r4
 8006986:	f000 faab 	bl	8006ee0 <_calloc_r>
 800698a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800698c:	60e8      	str	r0, [r5, #12]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d1e4      	bne.n	800695e <_Balloc+0x20>
 8006994:	2000      	movs	r0, #0
 8006996:	bd70      	pop	{r4, r5, r6, pc}
 8006998:	6802      	ldr	r2, [r0, #0]
 800699a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800699e:	2300      	movs	r3, #0
 80069a0:	6103      	str	r3, [r0, #16]
 80069a2:	60c3      	str	r3, [r0, #12]
 80069a4:	bd70      	pop	{r4, r5, r6, pc}

080069a6 <_Bfree>:
 80069a6:	b570      	push	{r4, r5, r6, lr}
 80069a8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80069aa:	4606      	mov	r6, r0
 80069ac:	460d      	mov	r5, r1
 80069ae:	b93c      	cbnz	r4, 80069c0 <_Bfree+0x1a>
 80069b0:	2010      	movs	r0, #16
 80069b2:	f7ff ffb1 	bl	8006918 <malloc>
 80069b6:	6270      	str	r0, [r6, #36]	; 0x24
 80069b8:	6044      	str	r4, [r0, #4]
 80069ba:	6084      	str	r4, [r0, #8]
 80069bc:	6004      	str	r4, [r0, #0]
 80069be:	60c4      	str	r4, [r0, #12]
 80069c0:	b13d      	cbz	r5, 80069d2 <_Bfree+0x2c>
 80069c2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80069c4:	686a      	ldr	r2, [r5, #4]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80069cc:	6029      	str	r1, [r5, #0]
 80069ce:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80069d2:	bd70      	pop	{r4, r5, r6, pc}

080069d4 <__multadd>:
 80069d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069d8:	690d      	ldr	r5, [r1, #16]
 80069da:	461f      	mov	r7, r3
 80069dc:	4606      	mov	r6, r0
 80069de:	460c      	mov	r4, r1
 80069e0:	f101 0e14 	add.w	lr, r1, #20
 80069e4:	2300      	movs	r3, #0
 80069e6:	f8de 0000 	ldr.w	r0, [lr]
 80069ea:	b281      	uxth	r1, r0
 80069ec:	fb02 7101 	mla	r1, r2, r1, r7
 80069f0:	0c0f      	lsrs	r7, r1, #16
 80069f2:	0c00      	lsrs	r0, r0, #16
 80069f4:	fb02 7000 	mla	r0, r2, r0, r7
 80069f8:	b289      	uxth	r1, r1
 80069fa:	3301      	adds	r3, #1
 80069fc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006a00:	429d      	cmp	r5, r3
 8006a02:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006a06:	f84e 1b04 	str.w	r1, [lr], #4
 8006a0a:	dcec      	bgt.n	80069e6 <__multadd+0x12>
 8006a0c:	b1d7      	cbz	r7, 8006a44 <__multadd+0x70>
 8006a0e:	68a3      	ldr	r3, [r4, #8]
 8006a10:	429d      	cmp	r5, r3
 8006a12:	db12      	blt.n	8006a3a <__multadd+0x66>
 8006a14:	6861      	ldr	r1, [r4, #4]
 8006a16:	4630      	mov	r0, r6
 8006a18:	3101      	adds	r1, #1
 8006a1a:	f7ff ff90 	bl	800693e <_Balloc>
 8006a1e:	6922      	ldr	r2, [r4, #16]
 8006a20:	3202      	adds	r2, #2
 8006a22:	f104 010c 	add.w	r1, r4, #12
 8006a26:	4680      	mov	r8, r0
 8006a28:	0092      	lsls	r2, r2, #2
 8006a2a:	300c      	adds	r0, #12
 8006a2c:	f7ff ff7c 	bl	8006928 <memcpy>
 8006a30:	4621      	mov	r1, r4
 8006a32:	4630      	mov	r0, r6
 8006a34:	f7ff ffb7 	bl	80069a6 <_Bfree>
 8006a38:	4644      	mov	r4, r8
 8006a3a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006a3e:	3501      	adds	r5, #1
 8006a40:	615f      	str	r7, [r3, #20]
 8006a42:	6125      	str	r5, [r4, #16]
 8006a44:	4620      	mov	r0, r4
 8006a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006a4a <__hi0bits>:
 8006a4a:	0c02      	lsrs	r2, r0, #16
 8006a4c:	0412      	lsls	r2, r2, #16
 8006a4e:	4603      	mov	r3, r0
 8006a50:	b9b2      	cbnz	r2, 8006a80 <__hi0bits+0x36>
 8006a52:	0403      	lsls	r3, r0, #16
 8006a54:	2010      	movs	r0, #16
 8006a56:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006a5a:	bf04      	itt	eq
 8006a5c:	021b      	lsleq	r3, r3, #8
 8006a5e:	3008      	addeq	r0, #8
 8006a60:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006a64:	bf04      	itt	eq
 8006a66:	011b      	lsleq	r3, r3, #4
 8006a68:	3004      	addeq	r0, #4
 8006a6a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006a6e:	bf04      	itt	eq
 8006a70:	009b      	lsleq	r3, r3, #2
 8006a72:	3002      	addeq	r0, #2
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	db06      	blt.n	8006a86 <__hi0bits+0x3c>
 8006a78:	005b      	lsls	r3, r3, #1
 8006a7a:	d503      	bpl.n	8006a84 <__hi0bits+0x3a>
 8006a7c:	3001      	adds	r0, #1
 8006a7e:	4770      	bx	lr
 8006a80:	2000      	movs	r0, #0
 8006a82:	e7e8      	b.n	8006a56 <__hi0bits+0xc>
 8006a84:	2020      	movs	r0, #32
 8006a86:	4770      	bx	lr

08006a88 <__lo0bits>:
 8006a88:	6803      	ldr	r3, [r0, #0]
 8006a8a:	f013 0207 	ands.w	r2, r3, #7
 8006a8e:	4601      	mov	r1, r0
 8006a90:	d00b      	beq.n	8006aaa <__lo0bits+0x22>
 8006a92:	07da      	lsls	r2, r3, #31
 8006a94:	d423      	bmi.n	8006ade <__lo0bits+0x56>
 8006a96:	0798      	lsls	r0, r3, #30
 8006a98:	bf49      	itett	mi
 8006a9a:	085b      	lsrmi	r3, r3, #1
 8006a9c:	089b      	lsrpl	r3, r3, #2
 8006a9e:	2001      	movmi	r0, #1
 8006aa0:	600b      	strmi	r3, [r1, #0]
 8006aa2:	bf5c      	itt	pl
 8006aa4:	600b      	strpl	r3, [r1, #0]
 8006aa6:	2002      	movpl	r0, #2
 8006aa8:	4770      	bx	lr
 8006aaa:	b298      	uxth	r0, r3
 8006aac:	b9a8      	cbnz	r0, 8006ada <__lo0bits+0x52>
 8006aae:	0c1b      	lsrs	r3, r3, #16
 8006ab0:	2010      	movs	r0, #16
 8006ab2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006ab6:	bf04      	itt	eq
 8006ab8:	0a1b      	lsreq	r3, r3, #8
 8006aba:	3008      	addeq	r0, #8
 8006abc:	071a      	lsls	r2, r3, #28
 8006abe:	bf04      	itt	eq
 8006ac0:	091b      	lsreq	r3, r3, #4
 8006ac2:	3004      	addeq	r0, #4
 8006ac4:	079a      	lsls	r2, r3, #30
 8006ac6:	bf04      	itt	eq
 8006ac8:	089b      	lsreq	r3, r3, #2
 8006aca:	3002      	addeq	r0, #2
 8006acc:	07da      	lsls	r2, r3, #31
 8006ace:	d402      	bmi.n	8006ad6 <__lo0bits+0x4e>
 8006ad0:	085b      	lsrs	r3, r3, #1
 8006ad2:	d006      	beq.n	8006ae2 <__lo0bits+0x5a>
 8006ad4:	3001      	adds	r0, #1
 8006ad6:	600b      	str	r3, [r1, #0]
 8006ad8:	4770      	bx	lr
 8006ada:	4610      	mov	r0, r2
 8006adc:	e7e9      	b.n	8006ab2 <__lo0bits+0x2a>
 8006ade:	2000      	movs	r0, #0
 8006ae0:	4770      	bx	lr
 8006ae2:	2020      	movs	r0, #32
 8006ae4:	4770      	bx	lr

08006ae6 <__i2b>:
 8006ae6:	b510      	push	{r4, lr}
 8006ae8:	460c      	mov	r4, r1
 8006aea:	2101      	movs	r1, #1
 8006aec:	f7ff ff27 	bl	800693e <_Balloc>
 8006af0:	2201      	movs	r2, #1
 8006af2:	6144      	str	r4, [r0, #20]
 8006af4:	6102      	str	r2, [r0, #16]
 8006af6:	bd10      	pop	{r4, pc}

08006af8 <__multiply>:
 8006af8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006afc:	4614      	mov	r4, r2
 8006afe:	690a      	ldr	r2, [r1, #16]
 8006b00:	6923      	ldr	r3, [r4, #16]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	bfb8      	it	lt
 8006b06:	460b      	movlt	r3, r1
 8006b08:	4689      	mov	r9, r1
 8006b0a:	bfbc      	itt	lt
 8006b0c:	46a1      	movlt	r9, r4
 8006b0e:	461c      	movlt	r4, r3
 8006b10:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006b14:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006b18:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8006b1c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006b20:	eb07 060a 	add.w	r6, r7, sl
 8006b24:	429e      	cmp	r6, r3
 8006b26:	bfc8      	it	gt
 8006b28:	3101      	addgt	r1, #1
 8006b2a:	f7ff ff08 	bl	800693e <_Balloc>
 8006b2e:	f100 0514 	add.w	r5, r0, #20
 8006b32:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006b36:	462b      	mov	r3, r5
 8006b38:	2200      	movs	r2, #0
 8006b3a:	4543      	cmp	r3, r8
 8006b3c:	d316      	bcc.n	8006b6c <__multiply+0x74>
 8006b3e:	f104 0214 	add.w	r2, r4, #20
 8006b42:	f109 0114 	add.w	r1, r9, #20
 8006b46:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8006b4a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006b4e:	9301      	str	r3, [sp, #4]
 8006b50:	9c01      	ldr	r4, [sp, #4]
 8006b52:	4294      	cmp	r4, r2
 8006b54:	4613      	mov	r3, r2
 8006b56:	d80c      	bhi.n	8006b72 <__multiply+0x7a>
 8006b58:	2e00      	cmp	r6, #0
 8006b5a:	dd03      	ble.n	8006b64 <__multiply+0x6c>
 8006b5c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d054      	beq.n	8006c0e <__multiply+0x116>
 8006b64:	6106      	str	r6, [r0, #16]
 8006b66:	b003      	add	sp, #12
 8006b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b6c:	f843 2b04 	str.w	r2, [r3], #4
 8006b70:	e7e3      	b.n	8006b3a <__multiply+0x42>
 8006b72:	f8b3 a000 	ldrh.w	sl, [r3]
 8006b76:	3204      	adds	r2, #4
 8006b78:	f1ba 0f00 	cmp.w	sl, #0
 8006b7c:	d020      	beq.n	8006bc0 <__multiply+0xc8>
 8006b7e:	46ae      	mov	lr, r5
 8006b80:	4689      	mov	r9, r1
 8006b82:	f04f 0c00 	mov.w	ip, #0
 8006b86:	f859 4b04 	ldr.w	r4, [r9], #4
 8006b8a:	f8be b000 	ldrh.w	fp, [lr]
 8006b8e:	b2a3      	uxth	r3, r4
 8006b90:	fb0a b303 	mla	r3, sl, r3, fp
 8006b94:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8006b98:	f8de 4000 	ldr.w	r4, [lr]
 8006b9c:	4463      	add	r3, ip
 8006b9e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8006ba2:	fb0a c40b 	mla	r4, sl, fp, ip
 8006ba6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006bb0:	454f      	cmp	r7, r9
 8006bb2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8006bb6:	f84e 3b04 	str.w	r3, [lr], #4
 8006bba:	d8e4      	bhi.n	8006b86 <__multiply+0x8e>
 8006bbc:	f8ce c000 	str.w	ip, [lr]
 8006bc0:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8006bc4:	f1b9 0f00 	cmp.w	r9, #0
 8006bc8:	d01f      	beq.n	8006c0a <__multiply+0x112>
 8006bca:	682b      	ldr	r3, [r5, #0]
 8006bcc:	46ae      	mov	lr, r5
 8006bce:	468c      	mov	ip, r1
 8006bd0:	f04f 0a00 	mov.w	sl, #0
 8006bd4:	f8bc 4000 	ldrh.w	r4, [ip]
 8006bd8:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006bdc:	fb09 b404 	mla	r4, r9, r4, fp
 8006be0:	44a2      	add	sl, r4
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8006be8:	f84e 3b04 	str.w	r3, [lr], #4
 8006bec:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006bf0:	f8be 4000 	ldrh.w	r4, [lr]
 8006bf4:	0c1b      	lsrs	r3, r3, #16
 8006bf6:	fb09 4303 	mla	r3, r9, r3, r4
 8006bfa:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8006bfe:	4567      	cmp	r7, ip
 8006c00:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006c04:	d8e6      	bhi.n	8006bd4 <__multiply+0xdc>
 8006c06:	f8ce 3000 	str.w	r3, [lr]
 8006c0a:	3504      	adds	r5, #4
 8006c0c:	e7a0      	b.n	8006b50 <__multiply+0x58>
 8006c0e:	3e01      	subs	r6, #1
 8006c10:	e7a2      	b.n	8006b58 <__multiply+0x60>
	...

08006c14 <__pow5mult>:
 8006c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c18:	4615      	mov	r5, r2
 8006c1a:	f012 0203 	ands.w	r2, r2, #3
 8006c1e:	4606      	mov	r6, r0
 8006c20:	460f      	mov	r7, r1
 8006c22:	d007      	beq.n	8006c34 <__pow5mult+0x20>
 8006c24:	3a01      	subs	r2, #1
 8006c26:	4c21      	ldr	r4, [pc, #132]	; (8006cac <__pow5mult+0x98>)
 8006c28:	2300      	movs	r3, #0
 8006c2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006c2e:	f7ff fed1 	bl	80069d4 <__multadd>
 8006c32:	4607      	mov	r7, r0
 8006c34:	10ad      	asrs	r5, r5, #2
 8006c36:	d035      	beq.n	8006ca4 <__pow5mult+0x90>
 8006c38:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006c3a:	b93c      	cbnz	r4, 8006c4c <__pow5mult+0x38>
 8006c3c:	2010      	movs	r0, #16
 8006c3e:	f7ff fe6b 	bl	8006918 <malloc>
 8006c42:	6270      	str	r0, [r6, #36]	; 0x24
 8006c44:	6044      	str	r4, [r0, #4]
 8006c46:	6084      	str	r4, [r0, #8]
 8006c48:	6004      	str	r4, [r0, #0]
 8006c4a:	60c4      	str	r4, [r0, #12]
 8006c4c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006c50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006c54:	b94c      	cbnz	r4, 8006c6a <__pow5mult+0x56>
 8006c56:	f240 2171 	movw	r1, #625	; 0x271
 8006c5a:	4630      	mov	r0, r6
 8006c5c:	f7ff ff43 	bl	8006ae6 <__i2b>
 8006c60:	2300      	movs	r3, #0
 8006c62:	f8c8 0008 	str.w	r0, [r8, #8]
 8006c66:	4604      	mov	r4, r0
 8006c68:	6003      	str	r3, [r0, #0]
 8006c6a:	f04f 0800 	mov.w	r8, #0
 8006c6e:	07eb      	lsls	r3, r5, #31
 8006c70:	d50a      	bpl.n	8006c88 <__pow5mult+0x74>
 8006c72:	4639      	mov	r1, r7
 8006c74:	4622      	mov	r2, r4
 8006c76:	4630      	mov	r0, r6
 8006c78:	f7ff ff3e 	bl	8006af8 <__multiply>
 8006c7c:	4639      	mov	r1, r7
 8006c7e:	4681      	mov	r9, r0
 8006c80:	4630      	mov	r0, r6
 8006c82:	f7ff fe90 	bl	80069a6 <_Bfree>
 8006c86:	464f      	mov	r7, r9
 8006c88:	106d      	asrs	r5, r5, #1
 8006c8a:	d00b      	beq.n	8006ca4 <__pow5mult+0x90>
 8006c8c:	6820      	ldr	r0, [r4, #0]
 8006c8e:	b938      	cbnz	r0, 8006ca0 <__pow5mult+0x8c>
 8006c90:	4622      	mov	r2, r4
 8006c92:	4621      	mov	r1, r4
 8006c94:	4630      	mov	r0, r6
 8006c96:	f7ff ff2f 	bl	8006af8 <__multiply>
 8006c9a:	6020      	str	r0, [r4, #0]
 8006c9c:	f8c0 8000 	str.w	r8, [r0]
 8006ca0:	4604      	mov	r4, r0
 8006ca2:	e7e4      	b.n	8006c6e <__pow5mult+0x5a>
 8006ca4:	4638      	mov	r0, r7
 8006ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006caa:	bf00      	nop
 8006cac:	080079f8 	.word	0x080079f8

08006cb0 <__lshift>:
 8006cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cb4:	460c      	mov	r4, r1
 8006cb6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006cba:	6923      	ldr	r3, [r4, #16]
 8006cbc:	6849      	ldr	r1, [r1, #4]
 8006cbe:	eb0a 0903 	add.w	r9, sl, r3
 8006cc2:	68a3      	ldr	r3, [r4, #8]
 8006cc4:	4607      	mov	r7, r0
 8006cc6:	4616      	mov	r6, r2
 8006cc8:	f109 0501 	add.w	r5, r9, #1
 8006ccc:	42ab      	cmp	r3, r5
 8006cce:	db31      	blt.n	8006d34 <__lshift+0x84>
 8006cd0:	4638      	mov	r0, r7
 8006cd2:	f7ff fe34 	bl	800693e <_Balloc>
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	4680      	mov	r8, r0
 8006cda:	f100 0314 	add.w	r3, r0, #20
 8006cde:	4611      	mov	r1, r2
 8006ce0:	4552      	cmp	r2, sl
 8006ce2:	db2a      	blt.n	8006d3a <__lshift+0x8a>
 8006ce4:	6920      	ldr	r0, [r4, #16]
 8006ce6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006cea:	f104 0114 	add.w	r1, r4, #20
 8006cee:	f016 021f 	ands.w	r2, r6, #31
 8006cf2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8006cf6:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8006cfa:	d022      	beq.n	8006d42 <__lshift+0x92>
 8006cfc:	f1c2 0c20 	rsb	ip, r2, #32
 8006d00:	2000      	movs	r0, #0
 8006d02:	680e      	ldr	r6, [r1, #0]
 8006d04:	4096      	lsls	r6, r2
 8006d06:	4330      	orrs	r0, r6
 8006d08:	f843 0b04 	str.w	r0, [r3], #4
 8006d0c:	f851 0b04 	ldr.w	r0, [r1], #4
 8006d10:	458e      	cmp	lr, r1
 8006d12:	fa20 f00c 	lsr.w	r0, r0, ip
 8006d16:	d8f4      	bhi.n	8006d02 <__lshift+0x52>
 8006d18:	6018      	str	r0, [r3, #0]
 8006d1a:	b108      	cbz	r0, 8006d20 <__lshift+0x70>
 8006d1c:	f109 0502 	add.w	r5, r9, #2
 8006d20:	3d01      	subs	r5, #1
 8006d22:	4638      	mov	r0, r7
 8006d24:	f8c8 5010 	str.w	r5, [r8, #16]
 8006d28:	4621      	mov	r1, r4
 8006d2a:	f7ff fe3c 	bl	80069a6 <_Bfree>
 8006d2e:	4640      	mov	r0, r8
 8006d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d34:	3101      	adds	r1, #1
 8006d36:	005b      	lsls	r3, r3, #1
 8006d38:	e7c8      	b.n	8006ccc <__lshift+0x1c>
 8006d3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006d3e:	3201      	adds	r2, #1
 8006d40:	e7ce      	b.n	8006ce0 <__lshift+0x30>
 8006d42:	3b04      	subs	r3, #4
 8006d44:	f851 2b04 	ldr.w	r2, [r1], #4
 8006d48:	f843 2f04 	str.w	r2, [r3, #4]!
 8006d4c:	458e      	cmp	lr, r1
 8006d4e:	d8f9      	bhi.n	8006d44 <__lshift+0x94>
 8006d50:	e7e6      	b.n	8006d20 <__lshift+0x70>

08006d52 <__mcmp>:
 8006d52:	6903      	ldr	r3, [r0, #16]
 8006d54:	690a      	ldr	r2, [r1, #16]
 8006d56:	1a9b      	subs	r3, r3, r2
 8006d58:	b530      	push	{r4, r5, lr}
 8006d5a:	d10c      	bne.n	8006d76 <__mcmp+0x24>
 8006d5c:	0092      	lsls	r2, r2, #2
 8006d5e:	3014      	adds	r0, #20
 8006d60:	3114      	adds	r1, #20
 8006d62:	1884      	adds	r4, r0, r2
 8006d64:	4411      	add	r1, r2
 8006d66:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006d6a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006d6e:	4295      	cmp	r5, r2
 8006d70:	d003      	beq.n	8006d7a <__mcmp+0x28>
 8006d72:	d305      	bcc.n	8006d80 <__mcmp+0x2e>
 8006d74:	2301      	movs	r3, #1
 8006d76:	4618      	mov	r0, r3
 8006d78:	bd30      	pop	{r4, r5, pc}
 8006d7a:	42a0      	cmp	r0, r4
 8006d7c:	d3f3      	bcc.n	8006d66 <__mcmp+0x14>
 8006d7e:	e7fa      	b.n	8006d76 <__mcmp+0x24>
 8006d80:	f04f 33ff 	mov.w	r3, #4294967295
 8006d84:	e7f7      	b.n	8006d76 <__mcmp+0x24>

08006d86 <__mdiff>:
 8006d86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d8a:	460d      	mov	r5, r1
 8006d8c:	4607      	mov	r7, r0
 8006d8e:	4611      	mov	r1, r2
 8006d90:	4628      	mov	r0, r5
 8006d92:	4614      	mov	r4, r2
 8006d94:	f7ff ffdd 	bl	8006d52 <__mcmp>
 8006d98:	1e06      	subs	r6, r0, #0
 8006d9a:	d108      	bne.n	8006dae <__mdiff+0x28>
 8006d9c:	4631      	mov	r1, r6
 8006d9e:	4638      	mov	r0, r7
 8006da0:	f7ff fdcd 	bl	800693e <_Balloc>
 8006da4:	2301      	movs	r3, #1
 8006da6:	6103      	str	r3, [r0, #16]
 8006da8:	6146      	str	r6, [r0, #20]
 8006daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dae:	bfa4      	itt	ge
 8006db0:	4623      	movge	r3, r4
 8006db2:	462c      	movge	r4, r5
 8006db4:	4638      	mov	r0, r7
 8006db6:	6861      	ldr	r1, [r4, #4]
 8006db8:	bfa6      	itte	ge
 8006dba:	461d      	movge	r5, r3
 8006dbc:	2600      	movge	r6, #0
 8006dbe:	2601      	movlt	r6, #1
 8006dc0:	f7ff fdbd 	bl	800693e <_Balloc>
 8006dc4:	692b      	ldr	r3, [r5, #16]
 8006dc6:	60c6      	str	r6, [r0, #12]
 8006dc8:	6926      	ldr	r6, [r4, #16]
 8006dca:	f105 0914 	add.w	r9, r5, #20
 8006dce:	f104 0214 	add.w	r2, r4, #20
 8006dd2:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006dd6:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006dda:	f100 0514 	add.w	r5, r0, #20
 8006dde:	f04f 0c00 	mov.w	ip, #0
 8006de2:	f852 ab04 	ldr.w	sl, [r2], #4
 8006de6:	f859 4b04 	ldr.w	r4, [r9], #4
 8006dea:	fa1c f18a 	uxtah	r1, ip, sl
 8006dee:	b2a3      	uxth	r3, r4
 8006df0:	1ac9      	subs	r1, r1, r3
 8006df2:	0c23      	lsrs	r3, r4, #16
 8006df4:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006df8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006dfc:	b289      	uxth	r1, r1
 8006dfe:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006e02:	45c8      	cmp	r8, r9
 8006e04:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006e08:	4696      	mov	lr, r2
 8006e0a:	f845 3b04 	str.w	r3, [r5], #4
 8006e0e:	d8e8      	bhi.n	8006de2 <__mdiff+0x5c>
 8006e10:	45be      	cmp	lr, r7
 8006e12:	d305      	bcc.n	8006e20 <__mdiff+0x9a>
 8006e14:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006e18:	b18b      	cbz	r3, 8006e3e <__mdiff+0xb8>
 8006e1a:	6106      	str	r6, [r0, #16]
 8006e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e20:	f85e 1b04 	ldr.w	r1, [lr], #4
 8006e24:	fa1c f381 	uxtah	r3, ip, r1
 8006e28:	141a      	asrs	r2, r3, #16
 8006e2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e34:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006e38:	f845 3b04 	str.w	r3, [r5], #4
 8006e3c:	e7e8      	b.n	8006e10 <__mdiff+0x8a>
 8006e3e:	3e01      	subs	r6, #1
 8006e40:	e7e8      	b.n	8006e14 <__mdiff+0x8e>

08006e42 <__d2b>:
 8006e42:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006e46:	460e      	mov	r6, r1
 8006e48:	2101      	movs	r1, #1
 8006e4a:	ec59 8b10 	vmov	r8, r9, d0
 8006e4e:	4615      	mov	r5, r2
 8006e50:	f7ff fd75 	bl	800693e <_Balloc>
 8006e54:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006e58:	4607      	mov	r7, r0
 8006e5a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e5e:	bb34      	cbnz	r4, 8006eae <__d2b+0x6c>
 8006e60:	9301      	str	r3, [sp, #4]
 8006e62:	f1b8 0f00 	cmp.w	r8, #0
 8006e66:	d027      	beq.n	8006eb8 <__d2b+0x76>
 8006e68:	a802      	add	r0, sp, #8
 8006e6a:	f840 8d08 	str.w	r8, [r0, #-8]!
 8006e6e:	f7ff fe0b 	bl	8006a88 <__lo0bits>
 8006e72:	9900      	ldr	r1, [sp, #0]
 8006e74:	b1f0      	cbz	r0, 8006eb4 <__d2b+0x72>
 8006e76:	9a01      	ldr	r2, [sp, #4]
 8006e78:	f1c0 0320 	rsb	r3, r0, #32
 8006e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e80:	430b      	orrs	r3, r1
 8006e82:	40c2      	lsrs	r2, r0
 8006e84:	617b      	str	r3, [r7, #20]
 8006e86:	9201      	str	r2, [sp, #4]
 8006e88:	9b01      	ldr	r3, [sp, #4]
 8006e8a:	61bb      	str	r3, [r7, #24]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	bf14      	ite	ne
 8006e90:	2102      	movne	r1, #2
 8006e92:	2101      	moveq	r1, #1
 8006e94:	6139      	str	r1, [r7, #16]
 8006e96:	b1c4      	cbz	r4, 8006eca <__d2b+0x88>
 8006e98:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006e9c:	4404      	add	r4, r0
 8006e9e:	6034      	str	r4, [r6, #0]
 8006ea0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006ea4:	6028      	str	r0, [r5, #0]
 8006ea6:	4638      	mov	r0, r7
 8006ea8:	b003      	add	sp, #12
 8006eaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006eae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006eb2:	e7d5      	b.n	8006e60 <__d2b+0x1e>
 8006eb4:	6179      	str	r1, [r7, #20]
 8006eb6:	e7e7      	b.n	8006e88 <__d2b+0x46>
 8006eb8:	a801      	add	r0, sp, #4
 8006eba:	f7ff fde5 	bl	8006a88 <__lo0bits>
 8006ebe:	9b01      	ldr	r3, [sp, #4]
 8006ec0:	617b      	str	r3, [r7, #20]
 8006ec2:	2101      	movs	r1, #1
 8006ec4:	6139      	str	r1, [r7, #16]
 8006ec6:	3020      	adds	r0, #32
 8006ec8:	e7e5      	b.n	8006e96 <__d2b+0x54>
 8006eca:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006ece:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006ed2:	6030      	str	r0, [r6, #0]
 8006ed4:	6918      	ldr	r0, [r3, #16]
 8006ed6:	f7ff fdb8 	bl	8006a4a <__hi0bits>
 8006eda:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006ede:	e7e1      	b.n	8006ea4 <__d2b+0x62>

08006ee0 <_calloc_r>:
 8006ee0:	b538      	push	{r3, r4, r5, lr}
 8006ee2:	fb02 f401 	mul.w	r4, r2, r1
 8006ee6:	4621      	mov	r1, r4
 8006ee8:	f000 f856 	bl	8006f98 <_malloc_r>
 8006eec:	4605      	mov	r5, r0
 8006eee:	b118      	cbz	r0, 8006ef8 <_calloc_r+0x18>
 8006ef0:	4622      	mov	r2, r4
 8006ef2:	2100      	movs	r1, #0
 8006ef4:	f7fd ff18 	bl	8004d28 <memset>
 8006ef8:	4628      	mov	r0, r5
 8006efa:	bd38      	pop	{r3, r4, r5, pc}

08006efc <_free_r>:
 8006efc:	b538      	push	{r3, r4, r5, lr}
 8006efe:	4605      	mov	r5, r0
 8006f00:	2900      	cmp	r1, #0
 8006f02:	d045      	beq.n	8006f90 <_free_r+0x94>
 8006f04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f08:	1f0c      	subs	r4, r1, #4
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	bfb8      	it	lt
 8006f0e:	18e4      	addlt	r4, r4, r3
 8006f10:	f000 fa9c 	bl	800744c <__malloc_lock>
 8006f14:	4a1f      	ldr	r2, [pc, #124]	; (8006f94 <_free_r+0x98>)
 8006f16:	6813      	ldr	r3, [r2, #0]
 8006f18:	4610      	mov	r0, r2
 8006f1a:	b933      	cbnz	r3, 8006f2a <_free_r+0x2e>
 8006f1c:	6063      	str	r3, [r4, #4]
 8006f1e:	6014      	str	r4, [r2, #0]
 8006f20:	4628      	mov	r0, r5
 8006f22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f26:	f000 ba92 	b.w	800744e <__malloc_unlock>
 8006f2a:	42a3      	cmp	r3, r4
 8006f2c:	d90c      	bls.n	8006f48 <_free_r+0x4c>
 8006f2e:	6821      	ldr	r1, [r4, #0]
 8006f30:	1862      	adds	r2, r4, r1
 8006f32:	4293      	cmp	r3, r2
 8006f34:	bf04      	itt	eq
 8006f36:	681a      	ldreq	r2, [r3, #0]
 8006f38:	685b      	ldreq	r3, [r3, #4]
 8006f3a:	6063      	str	r3, [r4, #4]
 8006f3c:	bf04      	itt	eq
 8006f3e:	1852      	addeq	r2, r2, r1
 8006f40:	6022      	streq	r2, [r4, #0]
 8006f42:	6004      	str	r4, [r0, #0]
 8006f44:	e7ec      	b.n	8006f20 <_free_r+0x24>
 8006f46:	4613      	mov	r3, r2
 8006f48:	685a      	ldr	r2, [r3, #4]
 8006f4a:	b10a      	cbz	r2, 8006f50 <_free_r+0x54>
 8006f4c:	42a2      	cmp	r2, r4
 8006f4e:	d9fa      	bls.n	8006f46 <_free_r+0x4a>
 8006f50:	6819      	ldr	r1, [r3, #0]
 8006f52:	1858      	adds	r0, r3, r1
 8006f54:	42a0      	cmp	r0, r4
 8006f56:	d10b      	bne.n	8006f70 <_free_r+0x74>
 8006f58:	6820      	ldr	r0, [r4, #0]
 8006f5a:	4401      	add	r1, r0
 8006f5c:	1858      	adds	r0, r3, r1
 8006f5e:	4282      	cmp	r2, r0
 8006f60:	6019      	str	r1, [r3, #0]
 8006f62:	d1dd      	bne.n	8006f20 <_free_r+0x24>
 8006f64:	6810      	ldr	r0, [r2, #0]
 8006f66:	6852      	ldr	r2, [r2, #4]
 8006f68:	605a      	str	r2, [r3, #4]
 8006f6a:	4401      	add	r1, r0
 8006f6c:	6019      	str	r1, [r3, #0]
 8006f6e:	e7d7      	b.n	8006f20 <_free_r+0x24>
 8006f70:	d902      	bls.n	8006f78 <_free_r+0x7c>
 8006f72:	230c      	movs	r3, #12
 8006f74:	602b      	str	r3, [r5, #0]
 8006f76:	e7d3      	b.n	8006f20 <_free_r+0x24>
 8006f78:	6820      	ldr	r0, [r4, #0]
 8006f7a:	1821      	adds	r1, r4, r0
 8006f7c:	428a      	cmp	r2, r1
 8006f7e:	bf04      	itt	eq
 8006f80:	6811      	ldreq	r1, [r2, #0]
 8006f82:	6852      	ldreq	r2, [r2, #4]
 8006f84:	6062      	str	r2, [r4, #4]
 8006f86:	bf04      	itt	eq
 8006f88:	1809      	addeq	r1, r1, r0
 8006f8a:	6021      	streq	r1, [r4, #0]
 8006f8c:	605c      	str	r4, [r3, #4]
 8006f8e:	e7c7      	b.n	8006f20 <_free_r+0x24>
 8006f90:	bd38      	pop	{r3, r4, r5, pc}
 8006f92:	bf00      	nop
 8006f94:	200001f8 	.word	0x200001f8

08006f98 <_malloc_r>:
 8006f98:	b570      	push	{r4, r5, r6, lr}
 8006f9a:	1ccd      	adds	r5, r1, #3
 8006f9c:	f025 0503 	bic.w	r5, r5, #3
 8006fa0:	3508      	adds	r5, #8
 8006fa2:	2d0c      	cmp	r5, #12
 8006fa4:	bf38      	it	cc
 8006fa6:	250c      	movcc	r5, #12
 8006fa8:	2d00      	cmp	r5, #0
 8006faa:	4606      	mov	r6, r0
 8006fac:	db01      	blt.n	8006fb2 <_malloc_r+0x1a>
 8006fae:	42a9      	cmp	r1, r5
 8006fb0:	d903      	bls.n	8006fba <_malloc_r+0x22>
 8006fb2:	230c      	movs	r3, #12
 8006fb4:	6033      	str	r3, [r6, #0]
 8006fb6:	2000      	movs	r0, #0
 8006fb8:	bd70      	pop	{r4, r5, r6, pc}
 8006fba:	f000 fa47 	bl	800744c <__malloc_lock>
 8006fbe:	4a23      	ldr	r2, [pc, #140]	; (800704c <_malloc_r+0xb4>)
 8006fc0:	6814      	ldr	r4, [r2, #0]
 8006fc2:	4621      	mov	r1, r4
 8006fc4:	b991      	cbnz	r1, 8006fec <_malloc_r+0x54>
 8006fc6:	4c22      	ldr	r4, [pc, #136]	; (8007050 <_malloc_r+0xb8>)
 8006fc8:	6823      	ldr	r3, [r4, #0]
 8006fca:	b91b      	cbnz	r3, 8006fd4 <_malloc_r+0x3c>
 8006fcc:	4630      	mov	r0, r6
 8006fce:	f000 f981 	bl	80072d4 <_sbrk_r>
 8006fd2:	6020      	str	r0, [r4, #0]
 8006fd4:	4629      	mov	r1, r5
 8006fd6:	4630      	mov	r0, r6
 8006fd8:	f000 f97c 	bl	80072d4 <_sbrk_r>
 8006fdc:	1c43      	adds	r3, r0, #1
 8006fde:	d126      	bne.n	800702e <_malloc_r+0x96>
 8006fe0:	230c      	movs	r3, #12
 8006fe2:	6033      	str	r3, [r6, #0]
 8006fe4:	4630      	mov	r0, r6
 8006fe6:	f000 fa32 	bl	800744e <__malloc_unlock>
 8006fea:	e7e4      	b.n	8006fb6 <_malloc_r+0x1e>
 8006fec:	680b      	ldr	r3, [r1, #0]
 8006fee:	1b5b      	subs	r3, r3, r5
 8006ff0:	d41a      	bmi.n	8007028 <_malloc_r+0x90>
 8006ff2:	2b0b      	cmp	r3, #11
 8006ff4:	d90f      	bls.n	8007016 <_malloc_r+0x7e>
 8006ff6:	600b      	str	r3, [r1, #0]
 8006ff8:	50cd      	str	r5, [r1, r3]
 8006ffa:	18cc      	adds	r4, r1, r3
 8006ffc:	4630      	mov	r0, r6
 8006ffe:	f000 fa26 	bl	800744e <__malloc_unlock>
 8007002:	f104 000b 	add.w	r0, r4, #11
 8007006:	1d23      	adds	r3, r4, #4
 8007008:	f020 0007 	bic.w	r0, r0, #7
 800700c:	1ac3      	subs	r3, r0, r3
 800700e:	d01b      	beq.n	8007048 <_malloc_r+0xb0>
 8007010:	425a      	negs	r2, r3
 8007012:	50e2      	str	r2, [r4, r3]
 8007014:	bd70      	pop	{r4, r5, r6, pc}
 8007016:	428c      	cmp	r4, r1
 8007018:	bf0d      	iteet	eq
 800701a:	6863      	ldreq	r3, [r4, #4]
 800701c:	684b      	ldrne	r3, [r1, #4]
 800701e:	6063      	strne	r3, [r4, #4]
 8007020:	6013      	streq	r3, [r2, #0]
 8007022:	bf18      	it	ne
 8007024:	460c      	movne	r4, r1
 8007026:	e7e9      	b.n	8006ffc <_malloc_r+0x64>
 8007028:	460c      	mov	r4, r1
 800702a:	6849      	ldr	r1, [r1, #4]
 800702c:	e7ca      	b.n	8006fc4 <_malloc_r+0x2c>
 800702e:	1cc4      	adds	r4, r0, #3
 8007030:	f024 0403 	bic.w	r4, r4, #3
 8007034:	42a0      	cmp	r0, r4
 8007036:	d005      	beq.n	8007044 <_malloc_r+0xac>
 8007038:	1a21      	subs	r1, r4, r0
 800703a:	4630      	mov	r0, r6
 800703c:	f000 f94a 	bl	80072d4 <_sbrk_r>
 8007040:	3001      	adds	r0, #1
 8007042:	d0cd      	beq.n	8006fe0 <_malloc_r+0x48>
 8007044:	6025      	str	r5, [r4, #0]
 8007046:	e7d9      	b.n	8006ffc <_malloc_r+0x64>
 8007048:	bd70      	pop	{r4, r5, r6, pc}
 800704a:	bf00      	nop
 800704c:	200001f8 	.word	0x200001f8
 8007050:	200001fc 	.word	0x200001fc

08007054 <__sfputc_r>:
 8007054:	6893      	ldr	r3, [r2, #8]
 8007056:	3b01      	subs	r3, #1
 8007058:	2b00      	cmp	r3, #0
 800705a:	b410      	push	{r4}
 800705c:	6093      	str	r3, [r2, #8]
 800705e:	da09      	bge.n	8007074 <__sfputc_r+0x20>
 8007060:	6994      	ldr	r4, [r2, #24]
 8007062:	42a3      	cmp	r3, r4
 8007064:	db02      	blt.n	800706c <__sfputc_r+0x18>
 8007066:	b2cb      	uxtb	r3, r1
 8007068:	2b0a      	cmp	r3, #10
 800706a:	d103      	bne.n	8007074 <__sfputc_r+0x20>
 800706c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007070:	f7fe bb4a 	b.w	8005708 <__swbuf_r>
 8007074:	6813      	ldr	r3, [r2, #0]
 8007076:	1c58      	adds	r0, r3, #1
 8007078:	6010      	str	r0, [r2, #0]
 800707a:	7019      	strb	r1, [r3, #0]
 800707c:	b2c8      	uxtb	r0, r1
 800707e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007082:	4770      	bx	lr

08007084 <__sfputs_r>:
 8007084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007086:	4606      	mov	r6, r0
 8007088:	460f      	mov	r7, r1
 800708a:	4614      	mov	r4, r2
 800708c:	18d5      	adds	r5, r2, r3
 800708e:	42ac      	cmp	r4, r5
 8007090:	d101      	bne.n	8007096 <__sfputs_r+0x12>
 8007092:	2000      	movs	r0, #0
 8007094:	e007      	b.n	80070a6 <__sfputs_r+0x22>
 8007096:	463a      	mov	r2, r7
 8007098:	f814 1b01 	ldrb.w	r1, [r4], #1
 800709c:	4630      	mov	r0, r6
 800709e:	f7ff ffd9 	bl	8007054 <__sfputc_r>
 80070a2:	1c43      	adds	r3, r0, #1
 80070a4:	d1f3      	bne.n	800708e <__sfputs_r+0xa>
 80070a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080070a8 <_vfiprintf_r>:
 80070a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070ac:	b09d      	sub	sp, #116	; 0x74
 80070ae:	460c      	mov	r4, r1
 80070b0:	4617      	mov	r7, r2
 80070b2:	9303      	str	r3, [sp, #12]
 80070b4:	4606      	mov	r6, r0
 80070b6:	b118      	cbz	r0, 80070c0 <_vfiprintf_r+0x18>
 80070b8:	6983      	ldr	r3, [r0, #24]
 80070ba:	b90b      	cbnz	r3, 80070c0 <_vfiprintf_r+0x18>
 80070bc:	f7ff fb30 	bl	8006720 <__sinit>
 80070c0:	4b7c      	ldr	r3, [pc, #496]	; (80072b4 <_vfiprintf_r+0x20c>)
 80070c2:	429c      	cmp	r4, r3
 80070c4:	d157      	bne.n	8007176 <_vfiprintf_r+0xce>
 80070c6:	6874      	ldr	r4, [r6, #4]
 80070c8:	89a3      	ldrh	r3, [r4, #12]
 80070ca:	0718      	lsls	r0, r3, #28
 80070cc:	d55d      	bpl.n	800718a <_vfiprintf_r+0xe2>
 80070ce:	6923      	ldr	r3, [r4, #16]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d05a      	beq.n	800718a <_vfiprintf_r+0xe2>
 80070d4:	2300      	movs	r3, #0
 80070d6:	9309      	str	r3, [sp, #36]	; 0x24
 80070d8:	2320      	movs	r3, #32
 80070da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070de:	2330      	movs	r3, #48	; 0x30
 80070e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070e4:	f04f 0b01 	mov.w	fp, #1
 80070e8:	46b8      	mov	r8, r7
 80070ea:	4645      	mov	r5, r8
 80070ec:	f815 3b01 	ldrb.w	r3, [r5], #1
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d155      	bne.n	80071a0 <_vfiprintf_r+0xf8>
 80070f4:	ebb8 0a07 	subs.w	sl, r8, r7
 80070f8:	d00b      	beq.n	8007112 <_vfiprintf_r+0x6a>
 80070fa:	4653      	mov	r3, sl
 80070fc:	463a      	mov	r2, r7
 80070fe:	4621      	mov	r1, r4
 8007100:	4630      	mov	r0, r6
 8007102:	f7ff ffbf 	bl	8007084 <__sfputs_r>
 8007106:	3001      	adds	r0, #1
 8007108:	f000 80c4 	beq.w	8007294 <_vfiprintf_r+0x1ec>
 800710c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800710e:	4453      	add	r3, sl
 8007110:	9309      	str	r3, [sp, #36]	; 0x24
 8007112:	f898 3000 	ldrb.w	r3, [r8]
 8007116:	2b00      	cmp	r3, #0
 8007118:	f000 80bc 	beq.w	8007294 <_vfiprintf_r+0x1ec>
 800711c:	2300      	movs	r3, #0
 800711e:	f04f 32ff 	mov.w	r2, #4294967295
 8007122:	9304      	str	r3, [sp, #16]
 8007124:	9307      	str	r3, [sp, #28]
 8007126:	9205      	str	r2, [sp, #20]
 8007128:	9306      	str	r3, [sp, #24]
 800712a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800712e:	931a      	str	r3, [sp, #104]	; 0x68
 8007130:	2205      	movs	r2, #5
 8007132:	7829      	ldrb	r1, [r5, #0]
 8007134:	4860      	ldr	r0, [pc, #384]	; (80072b8 <_vfiprintf_r+0x210>)
 8007136:	f7f9 f853 	bl	80001e0 <memchr>
 800713a:	f105 0801 	add.w	r8, r5, #1
 800713e:	9b04      	ldr	r3, [sp, #16]
 8007140:	2800      	cmp	r0, #0
 8007142:	d131      	bne.n	80071a8 <_vfiprintf_r+0x100>
 8007144:	06d9      	lsls	r1, r3, #27
 8007146:	bf44      	itt	mi
 8007148:	2220      	movmi	r2, #32
 800714a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800714e:	071a      	lsls	r2, r3, #28
 8007150:	bf44      	itt	mi
 8007152:	222b      	movmi	r2, #43	; 0x2b
 8007154:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007158:	782a      	ldrb	r2, [r5, #0]
 800715a:	2a2a      	cmp	r2, #42	; 0x2a
 800715c:	d02c      	beq.n	80071b8 <_vfiprintf_r+0x110>
 800715e:	9a07      	ldr	r2, [sp, #28]
 8007160:	2100      	movs	r1, #0
 8007162:	200a      	movs	r0, #10
 8007164:	46a8      	mov	r8, r5
 8007166:	3501      	adds	r5, #1
 8007168:	f898 3000 	ldrb.w	r3, [r8]
 800716c:	3b30      	subs	r3, #48	; 0x30
 800716e:	2b09      	cmp	r3, #9
 8007170:	d96d      	bls.n	800724e <_vfiprintf_r+0x1a6>
 8007172:	b371      	cbz	r1, 80071d2 <_vfiprintf_r+0x12a>
 8007174:	e026      	b.n	80071c4 <_vfiprintf_r+0x11c>
 8007176:	4b51      	ldr	r3, [pc, #324]	; (80072bc <_vfiprintf_r+0x214>)
 8007178:	429c      	cmp	r4, r3
 800717a:	d101      	bne.n	8007180 <_vfiprintf_r+0xd8>
 800717c:	68b4      	ldr	r4, [r6, #8]
 800717e:	e7a3      	b.n	80070c8 <_vfiprintf_r+0x20>
 8007180:	4b4f      	ldr	r3, [pc, #316]	; (80072c0 <_vfiprintf_r+0x218>)
 8007182:	429c      	cmp	r4, r3
 8007184:	bf08      	it	eq
 8007186:	68f4      	ldreq	r4, [r6, #12]
 8007188:	e79e      	b.n	80070c8 <_vfiprintf_r+0x20>
 800718a:	4621      	mov	r1, r4
 800718c:	4630      	mov	r0, r6
 800718e:	f7fe fb0d 	bl	80057ac <__swsetup_r>
 8007192:	2800      	cmp	r0, #0
 8007194:	d09e      	beq.n	80070d4 <_vfiprintf_r+0x2c>
 8007196:	f04f 30ff 	mov.w	r0, #4294967295
 800719a:	b01d      	add	sp, #116	; 0x74
 800719c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071a0:	2b25      	cmp	r3, #37	; 0x25
 80071a2:	d0a7      	beq.n	80070f4 <_vfiprintf_r+0x4c>
 80071a4:	46a8      	mov	r8, r5
 80071a6:	e7a0      	b.n	80070ea <_vfiprintf_r+0x42>
 80071a8:	4a43      	ldr	r2, [pc, #268]	; (80072b8 <_vfiprintf_r+0x210>)
 80071aa:	1a80      	subs	r0, r0, r2
 80071ac:	fa0b f000 	lsl.w	r0, fp, r0
 80071b0:	4318      	orrs	r0, r3
 80071b2:	9004      	str	r0, [sp, #16]
 80071b4:	4645      	mov	r5, r8
 80071b6:	e7bb      	b.n	8007130 <_vfiprintf_r+0x88>
 80071b8:	9a03      	ldr	r2, [sp, #12]
 80071ba:	1d11      	adds	r1, r2, #4
 80071bc:	6812      	ldr	r2, [r2, #0]
 80071be:	9103      	str	r1, [sp, #12]
 80071c0:	2a00      	cmp	r2, #0
 80071c2:	db01      	blt.n	80071c8 <_vfiprintf_r+0x120>
 80071c4:	9207      	str	r2, [sp, #28]
 80071c6:	e004      	b.n	80071d2 <_vfiprintf_r+0x12a>
 80071c8:	4252      	negs	r2, r2
 80071ca:	f043 0302 	orr.w	r3, r3, #2
 80071ce:	9207      	str	r2, [sp, #28]
 80071d0:	9304      	str	r3, [sp, #16]
 80071d2:	f898 3000 	ldrb.w	r3, [r8]
 80071d6:	2b2e      	cmp	r3, #46	; 0x2e
 80071d8:	d110      	bne.n	80071fc <_vfiprintf_r+0x154>
 80071da:	f898 3001 	ldrb.w	r3, [r8, #1]
 80071de:	2b2a      	cmp	r3, #42	; 0x2a
 80071e0:	f108 0101 	add.w	r1, r8, #1
 80071e4:	d137      	bne.n	8007256 <_vfiprintf_r+0x1ae>
 80071e6:	9b03      	ldr	r3, [sp, #12]
 80071e8:	1d1a      	adds	r2, r3, #4
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	9203      	str	r2, [sp, #12]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	bfb8      	it	lt
 80071f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80071f6:	f108 0802 	add.w	r8, r8, #2
 80071fa:	9305      	str	r3, [sp, #20]
 80071fc:	4d31      	ldr	r5, [pc, #196]	; (80072c4 <_vfiprintf_r+0x21c>)
 80071fe:	f898 1000 	ldrb.w	r1, [r8]
 8007202:	2203      	movs	r2, #3
 8007204:	4628      	mov	r0, r5
 8007206:	f7f8 ffeb 	bl	80001e0 <memchr>
 800720a:	b140      	cbz	r0, 800721e <_vfiprintf_r+0x176>
 800720c:	2340      	movs	r3, #64	; 0x40
 800720e:	1b40      	subs	r0, r0, r5
 8007210:	fa03 f000 	lsl.w	r0, r3, r0
 8007214:	9b04      	ldr	r3, [sp, #16]
 8007216:	4303      	orrs	r3, r0
 8007218:	9304      	str	r3, [sp, #16]
 800721a:	f108 0801 	add.w	r8, r8, #1
 800721e:	f898 1000 	ldrb.w	r1, [r8]
 8007222:	4829      	ldr	r0, [pc, #164]	; (80072c8 <_vfiprintf_r+0x220>)
 8007224:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007228:	2206      	movs	r2, #6
 800722a:	f108 0701 	add.w	r7, r8, #1
 800722e:	f7f8 ffd7 	bl	80001e0 <memchr>
 8007232:	2800      	cmp	r0, #0
 8007234:	d034      	beq.n	80072a0 <_vfiprintf_r+0x1f8>
 8007236:	4b25      	ldr	r3, [pc, #148]	; (80072cc <_vfiprintf_r+0x224>)
 8007238:	bb03      	cbnz	r3, 800727c <_vfiprintf_r+0x1d4>
 800723a:	9b03      	ldr	r3, [sp, #12]
 800723c:	3307      	adds	r3, #7
 800723e:	f023 0307 	bic.w	r3, r3, #7
 8007242:	3308      	adds	r3, #8
 8007244:	9303      	str	r3, [sp, #12]
 8007246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007248:	444b      	add	r3, r9
 800724a:	9309      	str	r3, [sp, #36]	; 0x24
 800724c:	e74c      	b.n	80070e8 <_vfiprintf_r+0x40>
 800724e:	fb00 3202 	mla	r2, r0, r2, r3
 8007252:	2101      	movs	r1, #1
 8007254:	e786      	b.n	8007164 <_vfiprintf_r+0xbc>
 8007256:	2300      	movs	r3, #0
 8007258:	9305      	str	r3, [sp, #20]
 800725a:	4618      	mov	r0, r3
 800725c:	250a      	movs	r5, #10
 800725e:	4688      	mov	r8, r1
 8007260:	3101      	adds	r1, #1
 8007262:	f898 2000 	ldrb.w	r2, [r8]
 8007266:	3a30      	subs	r2, #48	; 0x30
 8007268:	2a09      	cmp	r2, #9
 800726a:	d903      	bls.n	8007274 <_vfiprintf_r+0x1cc>
 800726c:	2b00      	cmp	r3, #0
 800726e:	d0c5      	beq.n	80071fc <_vfiprintf_r+0x154>
 8007270:	9005      	str	r0, [sp, #20]
 8007272:	e7c3      	b.n	80071fc <_vfiprintf_r+0x154>
 8007274:	fb05 2000 	mla	r0, r5, r0, r2
 8007278:	2301      	movs	r3, #1
 800727a:	e7f0      	b.n	800725e <_vfiprintf_r+0x1b6>
 800727c:	ab03      	add	r3, sp, #12
 800727e:	9300      	str	r3, [sp, #0]
 8007280:	4622      	mov	r2, r4
 8007282:	4b13      	ldr	r3, [pc, #76]	; (80072d0 <_vfiprintf_r+0x228>)
 8007284:	a904      	add	r1, sp, #16
 8007286:	4630      	mov	r0, r6
 8007288:	f7fd fdec 	bl	8004e64 <_printf_float>
 800728c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007290:	4681      	mov	r9, r0
 8007292:	d1d8      	bne.n	8007246 <_vfiprintf_r+0x19e>
 8007294:	89a3      	ldrh	r3, [r4, #12]
 8007296:	065b      	lsls	r3, r3, #25
 8007298:	f53f af7d 	bmi.w	8007196 <_vfiprintf_r+0xee>
 800729c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800729e:	e77c      	b.n	800719a <_vfiprintf_r+0xf2>
 80072a0:	ab03      	add	r3, sp, #12
 80072a2:	9300      	str	r3, [sp, #0]
 80072a4:	4622      	mov	r2, r4
 80072a6:	4b0a      	ldr	r3, [pc, #40]	; (80072d0 <_vfiprintf_r+0x228>)
 80072a8:	a904      	add	r1, sp, #16
 80072aa:	4630      	mov	r0, r6
 80072ac:	f7fe f890 	bl	80053d0 <_printf_i>
 80072b0:	e7ec      	b.n	800728c <_vfiprintf_r+0x1e4>
 80072b2:	bf00      	nop
 80072b4:	080078c8 	.word	0x080078c8
 80072b8:	08007a04 	.word	0x08007a04
 80072bc:	080078e8 	.word	0x080078e8
 80072c0:	080078a8 	.word	0x080078a8
 80072c4:	08007a0a 	.word	0x08007a0a
 80072c8:	08007a0e 	.word	0x08007a0e
 80072cc:	08004e65 	.word	0x08004e65
 80072d0:	08007085 	.word	0x08007085

080072d4 <_sbrk_r>:
 80072d4:	b538      	push	{r3, r4, r5, lr}
 80072d6:	4c06      	ldr	r4, [pc, #24]	; (80072f0 <_sbrk_r+0x1c>)
 80072d8:	2300      	movs	r3, #0
 80072da:	4605      	mov	r5, r0
 80072dc:	4608      	mov	r0, r1
 80072de:	6023      	str	r3, [r4, #0]
 80072e0:	f7fd fc34 	bl	8004b4c <_sbrk>
 80072e4:	1c43      	adds	r3, r0, #1
 80072e6:	d102      	bne.n	80072ee <_sbrk_r+0x1a>
 80072e8:	6823      	ldr	r3, [r4, #0]
 80072ea:	b103      	cbz	r3, 80072ee <_sbrk_r+0x1a>
 80072ec:	602b      	str	r3, [r5, #0]
 80072ee:	bd38      	pop	{r3, r4, r5, pc}
 80072f0:	200004b4 	.word	0x200004b4

080072f4 <__sread>:
 80072f4:	b510      	push	{r4, lr}
 80072f6:	460c      	mov	r4, r1
 80072f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072fc:	f000 f8a8 	bl	8007450 <_read_r>
 8007300:	2800      	cmp	r0, #0
 8007302:	bfab      	itete	ge
 8007304:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007306:	89a3      	ldrhlt	r3, [r4, #12]
 8007308:	181b      	addge	r3, r3, r0
 800730a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800730e:	bfac      	ite	ge
 8007310:	6563      	strge	r3, [r4, #84]	; 0x54
 8007312:	81a3      	strhlt	r3, [r4, #12]
 8007314:	bd10      	pop	{r4, pc}

08007316 <__swrite>:
 8007316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800731a:	461f      	mov	r7, r3
 800731c:	898b      	ldrh	r3, [r1, #12]
 800731e:	05db      	lsls	r3, r3, #23
 8007320:	4605      	mov	r5, r0
 8007322:	460c      	mov	r4, r1
 8007324:	4616      	mov	r6, r2
 8007326:	d505      	bpl.n	8007334 <__swrite+0x1e>
 8007328:	2302      	movs	r3, #2
 800732a:	2200      	movs	r2, #0
 800732c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007330:	f000 f868 	bl	8007404 <_lseek_r>
 8007334:	89a3      	ldrh	r3, [r4, #12]
 8007336:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800733a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800733e:	81a3      	strh	r3, [r4, #12]
 8007340:	4632      	mov	r2, r6
 8007342:	463b      	mov	r3, r7
 8007344:	4628      	mov	r0, r5
 8007346:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800734a:	f000 b817 	b.w	800737c <_write_r>

0800734e <__sseek>:
 800734e:	b510      	push	{r4, lr}
 8007350:	460c      	mov	r4, r1
 8007352:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007356:	f000 f855 	bl	8007404 <_lseek_r>
 800735a:	1c43      	adds	r3, r0, #1
 800735c:	89a3      	ldrh	r3, [r4, #12]
 800735e:	bf15      	itete	ne
 8007360:	6560      	strne	r0, [r4, #84]	; 0x54
 8007362:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007366:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800736a:	81a3      	strheq	r3, [r4, #12]
 800736c:	bf18      	it	ne
 800736e:	81a3      	strhne	r3, [r4, #12]
 8007370:	bd10      	pop	{r4, pc}

08007372 <__sclose>:
 8007372:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007376:	f000 b813 	b.w	80073a0 <_close_r>
	...

0800737c <_write_r>:
 800737c:	b538      	push	{r3, r4, r5, lr}
 800737e:	4c07      	ldr	r4, [pc, #28]	; (800739c <_write_r+0x20>)
 8007380:	4605      	mov	r5, r0
 8007382:	4608      	mov	r0, r1
 8007384:	4611      	mov	r1, r2
 8007386:	2200      	movs	r2, #0
 8007388:	6022      	str	r2, [r4, #0]
 800738a:	461a      	mov	r2, r3
 800738c:	f7fd fbc4 	bl	8004b18 <_write>
 8007390:	1c43      	adds	r3, r0, #1
 8007392:	d102      	bne.n	800739a <_write_r+0x1e>
 8007394:	6823      	ldr	r3, [r4, #0]
 8007396:	b103      	cbz	r3, 800739a <_write_r+0x1e>
 8007398:	602b      	str	r3, [r5, #0]
 800739a:	bd38      	pop	{r3, r4, r5, pc}
 800739c:	200004b4 	.word	0x200004b4

080073a0 <_close_r>:
 80073a0:	b538      	push	{r3, r4, r5, lr}
 80073a2:	4c06      	ldr	r4, [pc, #24]	; (80073bc <_close_r+0x1c>)
 80073a4:	2300      	movs	r3, #0
 80073a6:	4605      	mov	r5, r0
 80073a8:	4608      	mov	r0, r1
 80073aa:	6023      	str	r3, [r4, #0]
 80073ac:	f7fd fbe8 	bl	8004b80 <_close>
 80073b0:	1c43      	adds	r3, r0, #1
 80073b2:	d102      	bne.n	80073ba <_close_r+0x1a>
 80073b4:	6823      	ldr	r3, [r4, #0]
 80073b6:	b103      	cbz	r3, 80073ba <_close_r+0x1a>
 80073b8:	602b      	str	r3, [r5, #0]
 80073ba:	bd38      	pop	{r3, r4, r5, pc}
 80073bc:	200004b4 	.word	0x200004b4

080073c0 <_fstat_r>:
 80073c0:	b538      	push	{r3, r4, r5, lr}
 80073c2:	4c07      	ldr	r4, [pc, #28]	; (80073e0 <_fstat_r+0x20>)
 80073c4:	2300      	movs	r3, #0
 80073c6:	4605      	mov	r5, r0
 80073c8:	4608      	mov	r0, r1
 80073ca:	4611      	mov	r1, r2
 80073cc:	6023      	str	r3, [r4, #0]
 80073ce:	f7fd fbda 	bl	8004b86 <_fstat>
 80073d2:	1c43      	adds	r3, r0, #1
 80073d4:	d102      	bne.n	80073dc <_fstat_r+0x1c>
 80073d6:	6823      	ldr	r3, [r4, #0]
 80073d8:	b103      	cbz	r3, 80073dc <_fstat_r+0x1c>
 80073da:	602b      	str	r3, [r5, #0]
 80073dc:	bd38      	pop	{r3, r4, r5, pc}
 80073de:	bf00      	nop
 80073e0:	200004b4 	.word	0x200004b4

080073e4 <_isatty_r>:
 80073e4:	b538      	push	{r3, r4, r5, lr}
 80073e6:	4c06      	ldr	r4, [pc, #24]	; (8007400 <_isatty_r+0x1c>)
 80073e8:	2300      	movs	r3, #0
 80073ea:	4605      	mov	r5, r0
 80073ec:	4608      	mov	r0, r1
 80073ee:	6023      	str	r3, [r4, #0]
 80073f0:	f7fd fbce 	bl	8004b90 <_isatty>
 80073f4:	1c43      	adds	r3, r0, #1
 80073f6:	d102      	bne.n	80073fe <_isatty_r+0x1a>
 80073f8:	6823      	ldr	r3, [r4, #0]
 80073fa:	b103      	cbz	r3, 80073fe <_isatty_r+0x1a>
 80073fc:	602b      	str	r3, [r5, #0]
 80073fe:	bd38      	pop	{r3, r4, r5, pc}
 8007400:	200004b4 	.word	0x200004b4

08007404 <_lseek_r>:
 8007404:	b538      	push	{r3, r4, r5, lr}
 8007406:	4c07      	ldr	r4, [pc, #28]	; (8007424 <_lseek_r+0x20>)
 8007408:	4605      	mov	r5, r0
 800740a:	4608      	mov	r0, r1
 800740c:	4611      	mov	r1, r2
 800740e:	2200      	movs	r2, #0
 8007410:	6022      	str	r2, [r4, #0]
 8007412:	461a      	mov	r2, r3
 8007414:	f7fd fbbe 	bl	8004b94 <_lseek>
 8007418:	1c43      	adds	r3, r0, #1
 800741a:	d102      	bne.n	8007422 <_lseek_r+0x1e>
 800741c:	6823      	ldr	r3, [r4, #0]
 800741e:	b103      	cbz	r3, 8007422 <_lseek_r+0x1e>
 8007420:	602b      	str	r3, [r5, #0]
 8007422:	bd38      	pop	{r3, r4, r5, pc}
 8007424:	200004b4 	.word	0x200004b4

08007428 <__ascii_mbtowc>:
 8007428:	b082      	sub	sp, #8
 800742a:	b901      	cbnz	r1, 800742e <__ascii_mbtowc+0x6>
 800742c:	a901      	add	r1, sp, #4
 800742e:	b142      	cbz	r2, 8007442 <__ascii_mbtowc+0x1a>
 8007430:	b14b      	cbz	r3, 8007446 <__ascii_mbtowc+0x1e>
 8007432:	7813      	ldrb	r3, [r2, #0]
 8007434:	600b      	str	r3, [r1, #0]
 8007436:	7812      	ldrb	r2, [r2, #0]
 8007438:	1c10      	adds	r0, r2, #0
 800743a:	bf18      	it	ne
 800743c:	2001      	movne	r0, #1
 800743e:	b002      	add	sp, #8
 8007440:	4770      	bx	lr
 8007442:	4610      	mov	r0, r2
 8007444:	e7fb      	b.n	800743e <__ascii_mbtowc+0x16>
 8007446:	f06f 0001 	mvn.w	r0, #1
 800744a:	e7f8      	b.n	800743e <__ascii_mbtowc+0x16>

0800744c <__malloc_lock>:
 800744c:	4770      	bx	lr

0800744e <__malloc_unlock>:
 800744e:	4770      	bx	lr

08007450 <_read_r>:
 8007450:	b538      	push	{r3, r4, r5, lr}
 8007452:	4c07      	ldr	r4, [pc, #28]	; (8007470 <_read_r+0x20>)
 8007454:	4605      	mov	r5, r0
 8007456:	4608      	mov	r0, r1
 8007458:	4611      	mov	r1, r2
 800745a:	2200      	movs	r2, #0
 800745c:	6022      	str	r2, [r4, #0]
 800745e:	461a      	mov	r2, r3
 8007460:	f7fd fb4c 	bl	8004afc <_read>
 8007464:	1c43      	adds	r3, r0, #1
 8007466:	d102      	bne.n	800746e <_read_r+0x1e>
 8007468:	6823      	ldr	r3, [r4, #0]
 800746a:	b103      	cbz	r3, 800746e <_read_r+0x1e>
 800746c:	602b      	str	r3, [r5, #0]
 800746e:	bd38      	pop	{r3, r4, r5, pc}
 8007470:	200004b4 	.word	0x200004b4

08007474 <__ascii_wctomb>:
 8007474:	b149      	cbz	r1, 800748a <__ascii_wctomb+0x16>
 8007476:	2aff      	cmp	r2, #255	; 0xff
 8007478:	bf85      	ittet	hi
 800747a:	238a      	movhi	r3, #138	; 0x8a
 800747c:	6003      	strhi	r3, [r0, #0]
 800747e:	700a      	strbls	r2, [r1, #0]
 8007480:	f04f 30ff 	movhi.w	r0, #4294967295
 8007484:	bf98      	it	ls
 8007486:	2001      	movls	r0, #1
 8007488:	4770      	bx	lr
 800748a:	4608      	mov	r0, r1
 800748c:	4770      	bx	lr
	...

08007490 <_init>:
 8007490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007492:	bf00      	nop
 8007494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007496:	bc08      	pop	{r3}
 8007498:	469e      	mov	lr, r3
 800749a:	4770      	bx	lr

0800749c <_fini>:
 800749c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800749e:	bf00      	nop
 80074a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074a2:	bc08      	pop	{r3}
 80074a4:	469e      	mov	lr, r3
 80074a6:	4770      	bx	lr
