
Weather.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005278  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08005408  08005408  00015408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005600  08005600  00015600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005608  08005608  00015608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800560c  0800560c  0001560c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000068  20000000  08005610  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000234  20000068  08005678  00020068  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000029c  08005678  0002029c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019a08  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000036f9  00000000  00000000  00039aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000bc55  00000000  00000000  0003d199  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000f48  00000000  00000000  00048df0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001430  00000000  00000000  00049d38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000090b3  00000000  00000000  0004b168  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005bc5  00000000  00000000  0005421b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00059de0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000033d0  00000000  00000000  00059e5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080053f0 	.word	0x080053f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080053f0 	.word	0x080053f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f092 0f00 	teq	r2, #0
 800055a:	bf14      	ite	ne
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000568:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800056c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000570:	e720      	b.n	80003b4 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_ul2d>:
 8000574:	ea50 0201 	orrs.w	r2, r0, r1
 8000578:	bf08      	it	eq
 800057a:	4770      	bxeq	lr
 800057c:	b530      	push	{r4, r5, lr}
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	e00a      	b.n	800059a <__aeabi_l2d+0x16>

08000584 <__aeabi_l2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000592:	d502      	bpl.n	800059a <__aeabi_l2d+0x16>
 8000594:	4240      	negs	r0, r0
 8000596:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800059a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005a6:	f43f aedc 	beq.w	8000362 <__adddf3+0xe6>
 80005aa:	f04f 0203 	mov.w	r2, #3
 80005ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b2:	bf18      	it	ne
 80005b4:	3203      	addne	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005c2:	f1c2 0320 	rsb	r3, r2, #32
 80005c6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ca:	fa20 f002 	lsr.w	r0, r0, r2
 80005ce:	fa01 fe03 	lsl.w	lr, r1, r3
 80005d2:	ea40 000e 	orr.w	r0, r0, lr
 80005d6:	fa21 f102 	lsr.w	r1, r1, r2
 80005da:	4414      	add	r4, r2
 80005dc:	e6c1      	b.n	8000362 <__adddf3+0xe6>
 80005de:	bf00      	nop

080005e0 <__aeabi_dmul>:
 80005e0:	b570      	push	{r4, r5, r6, lr}
 80005e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ee:	bf1d      	ittte	ne
 80005f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005f4:	ea94 0f0c 	teqne	r4, ip
 80005f8:	ea95 0f0c 	teqne	r5, ip
 80005fc:	f000 f8de 	bleq	80007bc <__aeabi_dmul+0x1dc>
 8000600:	442c      	add	r4, r5
 8000602:	ea81 0603 	eor.w	r6, r1, r3
 8000606:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800060a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800060e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000612:	bf18      	it	ne
 8000614:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000618:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800061c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000620:	d038      	beq.n	8000694 <__aeabi_dmul+0xb4>
 8000622:	fba0 ce02 	umull	ip, lr, r0, r2
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800062e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000632:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000636:	f04f 0600 	mov.w	r6, #0
 800063a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800063e:	f09c 0f00 	teq	ip, #0
 8000642:	bf18      	it	ne
 8000644:	f04e 0e01 	orrne.w	lr, lr, #1
 8000648:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800064c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000650:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000654:	d204      	bcs.n	8000660 <__aeabi_dmul+0x80>
 8000656:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800065a:	416d      	adcs	r5, r5
 800065c:	eb46 0606 	adc.w	r6, r6, r6
 8000660:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000664:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000668:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800066c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000670:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000674:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000678:	bf88      	it	hi
 800067a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800067e:	d81e      	bhi.n	80006be <__aeabi_dmul+0xde>
 8000680:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000684:	bf08      	it	eq
 8000686:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800068a:	f150 0000 	adcs.w	r0, r0, #0
 800068e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000698:	ea46 0101 	orr.w	r1, r6, r1
 800069c:	ea40 0002 	orr.w	r0, r0, r2
 80006a0:	ea81 0103 	eor.w	r1, r1, r3
 80006a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006a8:	bfc2      	ittt	gt
 80006aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	popgt	{r4, r5, r6, pc}
 80006b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b8:	f04f 0e00 	mov.w	lr, #0
 80006bc:	3c01      	subs	r4, #1
 80006be:	f300 80ab 	bgt.w	8000818 <__aeabi_dmul+0x238>
 80006c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006c6:	bfde      	ittt	le
 80006c8:	2000      	movle	r0, #0
 80006ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ce:	bd70      	pople	{r4, r5, r6, pc}
 80006d0:	f1c4 0400 	rsb	r4, r4, #0
 80006d4:	3c20      	subs	r4, #32
 80006d6:	da35      	bge.n	8000744 <__aeabi_dmul+0x164>
 80006d8:	340c      	adds	r4, #12
 80006da:	dc1b      	bgt.n	8000714 <__aeabi_dmul+0x134>
 80006dc:	f104 0414 	add.w	r4, r4, #20
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f305 	lsl.w	r3, r0, r5
 80006e8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000700:	fa21 f604 	lsr.w	r6, r1, r4
 8000704:	eb42 0106 	adc.w	r1, r2, r6
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 040c 	rsb	r4, r4, #12
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f304 	lsl.w	r3, r0, r4
 8000720:	fa20 f005 	lsr.w	r0, r0, r5
 8000724:	fa01 f204 	lsl.w	r2, r1, r4
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000730:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000734:	f141 0100 	adc.w	r1, r1, #0
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f205 	lsl.w	r2, r0, r5
 800074c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000750:	fa20 f304 	lsr.w	r3, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea43 0302 	orr.w	r3, r3, r2
 800075c:	fa21 f004 	lsr.w	r0, r1, r4
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	fa21 f204 	lsr.w	r2, r1, r4
 8000768:	ea20 0002 	bic.w	r0, r0, r2
 800076c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f094 0f00 	teq	r4, #0
 8000780:	d10f      	bne.n	80007a2 <__aeabi_dmul+0x1c2>
 8000782:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000786:	0040      	lsls	r0, r0, #1
 8000788:	eb41 0101 	adc.w	r1, r1, r1
 800078c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000790:	bf08      	it	eq
 8000792:	3c01      	subeq	r4, #1
 8000794:	d0f7      	beq.n	8000786 <__aeabi_dmul+0x1a6>
 8000796:	ea41 0106 	orr.w	r1, r1, r6
 800079a:	f095 0f00 	teq	r5, #0
 800079e:	bf18      	it	ne
 80007a0:	4770      	bxne	lr
 80007a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007a6:	0052      	lsls	r2, r2, #1
 80007a8:	eb43 0303 	adc.w	r3, r3, r3
 80007ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3d01      	subeq	r5, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1c6>
 80007b6:	ea43 0306 	orr.w	r3, r3, r6
 80007ba:	4770      	bx	lr
 80007bc:	ea94 0f0c 	teq	r4, ip
 80007c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007c4:	bf18      	it	ne
 80007c6:	ea95 0f0c 	teqne	r5, ip
 80007ca:	d00c      	beq.n	80007e6 <__aeabi_dmul+0x206>
 80007cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d0:	bf18      	it	ne
 80007d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d6:	d1d1      	bne.n	800077c <__aeabi_dmul+0x19c>
 80007d8:	ea81 0103 	eor.w	r1, r1, r3
 80007dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e0:	f04f 0000 	mov.w	r0, #0
 80007e4:	bd70      	pop	{r4, r5, r6, pc}
 80007e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ea:	bf06      	itte	eq
 80007ec:	4610      	moveq	r0, r2
 80007ee:	4619      	moveq	r1, r3
 80007f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f4:	d019      	beq.n	800082a <__aeabi_dmul+0x24a>
 80007f6:	ea94 0f0c 	teq	r4, ip
 80007fa:	d102      	bne.n	8000802 <__aeabi_dmul+0x222>
 80007fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000800:	d113      	bne.n	800082a <__aeabi_dmul+0x24a>
 8000802:	ea95 0f0c 	teq	r5, ip
 8000806:	d105      	bne.n	8000814 <__aeabi_dmul+0x234>
 8000808:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800080c:	bf1c      	itt	ne
 800080e:	4610      	movne	r0, r2
 8000810:	4619      	movne	r1, r3
 8000812:	d10a      	bne.n	800082a <__aeabi_dmul+0x24a>
 8000814:	ea81 0103 	eor.w	r1, r1, r3
 8000818:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800081c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000820:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000824:	f04f 0000 	mov.w	r0, #0
 8000828:	bd70      	pop	{r4, r5, r6, pc}
 800082a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000832:	bd70      	pop	{r4, r5, r6, pc}

08000834 <__aeabi_ddiv>:
 8000834:	b570      	push	{r4, r5, r6, lr}
 8000836:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800083a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800083e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000842:	bf1d      	ittte	ne
 8000844:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000848:	ea94 0f0c 	teqne	r4, ip
 800084c:	ea95 0f0c 	teqne	r5, ip
 8000850:	f000 f8a7 	bleq	80009a2 <__aeabi_ddiv+0x16e>
 8000854:	eba4 0405 	sub.w	r4, r4, r5
 8000858:	ea81 0e03 	eor.w	lr, r1, r3
 800085c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000860:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000864:	f000 8088 	beq.w	8000978 <__aeabi_ddiv+0x144>
 8000868:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800086c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000870:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000874:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000878:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800087c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000880:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000884:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000888:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800088c:	429d      	cmp	r5, r3
 800088e:	bf08      	it	eq
 8000890:	4296      	cmpeq	r6, r2
 8000892:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000896:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800089a:	d202      	bcs.n	80008a2 <__aeabi_ddiv+0x6e>
 800089c:	085b      	lsrs	r3, r3, #1
 800089e:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a2:	1ab6      	subs	r6, r6, r2
 80008a4:	eb65 0503 	sbc.w	r5, r5, r3
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008b2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000910:	ea55 0e06 	orrs.w	lr, r5, r6
 8000914:	d018      	beq.n	8000948 <__aeabi_ddiv+0x114>
 8000916:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800091a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800091e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000922:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000926:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800092a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800092e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000932:	d1c0      	bne.n	80008b6 <__aeabi_ddiv+0x82>
 8000934:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000938:	d10b      	bne.n	8000952 <__aeabi_ddiv+0x11e>
 800093a:	ea41 0100 	orr.w	r1, r1, r0
 800093e:	f04f 0000 	mov.w	r0, #0
 8000942:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000946:	e7b6      	b.n	80008b6 <__aeabi_ddiv+0x82>
 8000948:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800094c:	bf04      	itt	eq
 800094e:	4301      	orreq	r1, r0
 8000950:	2000      	moveq	r0, #0
 8000952:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000956:	bf88      	it	hi
 8000958:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800095c:	f63f aeaf 	bhi.w	80006be <__aeabi_dmul+0xde>
 8000960:	ebb5 0c03 	subs.w	ip, r5, r3
 8000964:	bf04      	itt	eq
 8000966:	ebb6 0c02 	subseq.w	ip, r6, r2
 800096a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800096e:	f150 0000 	adcs.w	r0, r0, #0
 8000972:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000976:	bd70      	pop	{r4, r5, r6, pc}
 8000978:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800097c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000980:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000984:	bfc2      	ittt	gt
 8000986:	ebd4 050c 	rsbsgt	r5, r4, ip
 800098a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800098e:	bd70      	popgt	{r4, r5, r6, pc}
 8000990:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000994:	f04f 0e00 	mov.w	lr, #0
 8000998:	3c01      	subs	r4, #1
 800099a:	e690      	b.n	80006be <__aeabi_dmul+0xde>
 800099c:	ea45 0e06 	orr.w	lr, r5, r6
 80009a0:	e68d      	b.n	80006be <__aeabi_dmul+0xde>
 80009a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009a6:	ea94 0f0c 	teq	r4, ip
 80009aa:	bf08      	it	eq
 80009ac:	ea95 0f0c 	teqeq	r5, ip
 80009b0:	f43f af3b 	beq.w	800082a <__aeabi_dmul+0x24a>
 80009b4:	ea94 0f0c 	teq	r4, ip
 80009b8:	d10a      	bne.n	80009d0 <__aeabi_ddiv+0x19c>
 80009ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009be:	f47f af34 	bne.w	800082a <__aeabi_dmul+0x24a>
 80009c2:	ea95 0f0c 	teq	r5, ip
 80009c6:	f47f af25 	bne.w	8000814 <__aeabi_dmul+0x234>
 80009ca:	4610      	mov	r0, r2
 80009cc:	4619      	mov	r1, r3
 80009ce:	e72c      	b.n	800082a <__aeabi_dmul+0x24a>
 80009d0:	ea95 0f0c 	teq	r5, ip
 80009d4:	d106      	bne.n	80009e4 <__aeabi_ddiv+0x1b0>
 80009d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009da:	f43f aefd 	beq.w	80007d8 <__aeabi_dmul+0x1f8>
 80009de:	4610      	mov	r0, r2
 80009e0:	4619      	mov	r1, r3
 80009e2:	e722      	b.n	800082a <__aeabi_dmul+0x24a>
 80009e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ee:	f47f aec5 	bne.w	800077c <__aeabi_dmul+0x19c>
 80009f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009f6:	f47f af0d 	bne.w	8000814 <__aeabi_dmul+0x234>
 80009fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009fe:	f47f aeeb 	bne.w	80007d8 <__aeabi_dmul+0x1f8>
 8000a02:	e712      	b.n	800082a <__aeabi_dmul+0x24a>

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b97a 	b.w	8000d10 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	468c      	mov	ip, r1
 8000a3a:	460d      	mov	r5, r1
 8000a3c:	4604      	mov	r4, r0
 8000a3e:	9e08      	ldr	r6, [sp, #32]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d151      	bne.n	8000ae8 <__udivmoddi4+0xb4>
 8000a44:	428a      	cmp	r2, r1
 8000a46:	4617      	mov	r7, r2
 8000a48:	d96d      	bls.n	8000b26 <__udivmoddi4+0xf2>
 8000a4a:	fab2 fe82 	clz	lr, r2
 8000a4e:	f1be 0f00 	cmp.w	lr, #0
 8000a52:	d00b      	beq.n	8000a6c <__udivmoddi4+0x38>
 8000a54:	f1ce 0c20 	rsb	ip, lr, #32
 8000a58:	fa01 f50e 	lsl.w	r5, r1, lr
 8000a5c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000a60:	fa02 f70e 	lsl.w	r7, r2, lr
 8000a64:	ea4c 0c05 	orr.w	ip, ip, r5
 8000a68:	fa00 f40e 	lsl.w	r4, r0, lr
 8000a6c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000a70:	0c25      	lsrs	r5, r4, #16
 8000a72:	fbbc f8fa 	udiv	r8, ip, sl
 8000a76:	fa1f f987 	uxth.w	r9, r7
 8000a7a:	fb0a cc18 	mls	ip, sl, r8, ip
 8000a7e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000a82:	fb08 f309 	mul.w	r3, r8, r9
 8000a86:	42ab      	cmp	r3, r5
 8000a88:	d90a      	bls.n	8000aa0 <__udivmoddi4+0x6c>
 8000a8a:	19ed      	adds	r5, r5, r7
 8000a8c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000a90:	f080 8123 	bcs.w	8000cda <__udivmoddi4+0x2a6>
 8000a94:	42ab      	cmp	r3, r5
 8000a96:	f240 8120 	bls.w	8000cda <__udivmoddi4+0x2a6>
 8000a9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000a9e:	443d      	add	r5, r7
 8000aa0:	1aed      	subs	r5, r5, r3
 8000aa2:	b2a4      	uxth	r4, r4
 8000aa4:	fbb5 f0fa 	udiv	r0, r5, sl
 8000aa8:	fb0a 5510 	mls	r5, sl, r0, r5
 8000aac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ab0:	fb00 f909 	mul.w	r9, r0, r9
 8000ab4:	45a1      	cmp	r9, r4
 8000ab6:	d909      	bls.n	8000acc <__udivmoddi4+0x98>
 8000ab8:	19e4      	adds	r4, r4, r7
 8000aba:	f100 33ff 	add.w	r3, r0, #4294967295
 8000abe:	f080 810a 	bcs.w	8000cd6 <__udivmoddi4+0x2a2>
 8000ac2:	45a1      	cmp	r9, r4
 8000ac4:	f240 8107 	bls.w	8000cd6 <__udivmoddi4+0x2a2>
 8000ac8:	3802      	subs	r0, #2
 8000aca:	443c      	add	r4, r7
 8000acc:	eba4 0409 	sub.w	r4, r4, r9
 8000ad0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	2e00      	cmp	r6, #0
 8000ad8:	d061      	beq.n	8000b9e <__udivmoddi4+0x16a>
 8000ada:	fa24 f40e 	lsr.w	r4, r4, lr
 8000ade:	2300      	movs	r3, #0
 8000ae0:	6034      	str	r4, [r6, #0]
 8000ae2:	6073      	str	r3, [r6, #4]
 8000ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae8:	428b      	cmp	r3, r1
 8000aea:	d907      	bls.n	8000afc <__udivmoddi4+0xc8>
 8000aec:	2e00      	cmp	r6, #0
 8000aee:	d054      	beq.n	8000b9a <__udivmoddi4+0x166>
 8000af0:	2100      	movs	r1, #0
 8000af2:	e886 0021 	stmia.w	r6, {r0, r5}
 8000af6:	4608      	mov	r0, r1
 8000af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000afc:	fab3 f183 	clz	r1, r3
 8000b00:	2900      	cmp	r1, #0
 8000b02:	f040 808e 	bne.w	8000c22 <__udivmoddi4+0x1ee>
 8000b06:	42ab      	cmp	r3, r5
 8000b08:	d302      	bcc.n	8000b10 <__udivmoddi4+0xdc>
 8000b0a:	4282      	cmp	r2, r0
 8000b0c:	f200 80fa 	bhi.w	8000d04 <__udivmoddi4+0x2d0>
 8000b10:	1a84      	subs	r4, r0, r2
 8000b12:	eb65 0503 	sbc.w	r5, r5, r3
 8000b16:	2001      	movs	r0, #1
 8000b18:	46ac      	mov	ip, r5
 8000b1a:	2e00      	cmp	r6, #0
 8000b1c:	d03f      	beq.n	8000b9e <__udivmoddi4+0x16a>
 8000b1e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b26:	b912      	cbnz	r2, 8000b2e <__udivmoddi4+0xfa>
 8000b28:	2701      	movs	r7, #1
 8000b2a:	fbb7 f7f2 	udiv	r7, r7, r2
 8000b2e:	fab7 fe87 	clz	lr, r7
 8000b32:	f1be 0f00 	cmp.w	lr, #0
 8000b36:	d134      	bne.n	8000ba2 <__udivmoddi4+0x16e>
 8000b38:	1beb      	subs	r3, r5, r7
 8000b3a:	0c3a      	lsrs	r2, r7, #16
 8000b3c:	fa1f fc87 	uxth.w	ip, r7
 8000b40:	2101      	movs	r1, #1
 8000b42:	fbb3 f8f2 	udiv	r8, r3, r2
 8000b46:	0c25      	lsrs	r5, r4, #16
 8000b48:	fb02 3318 	mls	r3, r2, r8, r3
 8000b4c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000b50:	fb0c f308 	mul.w	r3, ip, r8
 8000b54:	42ab      	cmp	r3, r5
 8000b56:	d907      	bls.n	8000b68 <__udivmoddi4+0x134>
 8000b58:	19ed      	adds	r5, r5, r7
 8000b5a:	f108 30ff 	add.w	r0, r8, #4294967295
 8000b5e:	d202      	bcs.n	8000b66 <__udivmoddi4+0x132>
 8000b60:	42ab      	cmp	r3, r5
 8000b62:	f200 80d1 	bhi.w	8000d08 <__udivmoddi4+0x2d4>
 8000b66:	4680      	mov	r8, r0
 8000b68:	1aed      	subs	r5, r5, r3
 8000b6a:	b2a3      	uxth	r3, r4
 8000b6c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000b70:	fb02 5510 	mls	r5, r2, r0, r5
 8000b74:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000b78:	fb0c fc00 	mul.w	ip, ip, r0
 8000b7c:	45a4      	cmp	ip, r4
 8000b7e:	d907      	bls.n	8000b90 <__udivmoddi4+0x15c>
 8000b80:	19e4      	adds	r4, r4, r7
 8000b82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b86:	d202      	bcs.n	8000b8e <__udivmoddi4+0x15a>
 8000b88:	45a4      	cmp	ip, r4
 8000b8a:	f200 80b8 	bhi.w	8000cfe <__udivmoddi4+0x2ca>
 8000b8e:	4618      	mov	r0, r3
 8000b90:	eba4 040c 	sub.w	r4, r4, ip
 8000b94:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b98:	e79d      	b.n	8000ad6 <__udivmoddi4+0xa2>
 8000b9a:	4631      	mov	r1, r6
 8000b9c:	4630      	mov	r0, r6
 8000b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba2:	f1ce 0420 	rsb	r4, lr, #32
 8000ba6:	fa05 f30e 	lsl.w	r3, r5, lr
 8000baa:	fa07 f70e 	lsl.w	r7, r7, lr
 8000bae:	fa20 f804 	lsr.w	r8, r0, r4
 8000bb2:	0c3a      	lsrs	r2, r7, #16
 8000bb4:	fa25 f404 	lsr.w	r4, r5, r4
 8000bb8:	ea48 0803 	orr.w	r8, r8, r3
 8000bbc:	fbb4 f1f2 	udiv	r1, r4, r2
 8000bc0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000bc4:	fb02 4411 	mls	r4, r2, r1, r4
 8000bc8:	fa1f fc87 	uxth.w	ip, r7
 8000bcc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000bd0:	fb01 f30c 	mul.w	r3, r1, ip
 8000bd4:	42ab      	cmp	r3, r5
 8000bd6:	fa00 f40e 	lsl.w	r4, r0, lr
 8000bda:	d909      	bls.n	8000bf0 <__udivmoddi4+0x1bc>
 8000bdc:	19ed      	adds	r5, r5, r7
 8000bde:	f101 30ff 	add.w	r0, r1, #4294967295
 8000be2:	f080 808a 	bcs.w	8000cfa <__udivmoddi4+0x2c6>
 8000be6:	42ab      	cmp	r3, r5
 8000be8:	f240 8087 	bls.w	8000cfa <__udivmoddi4+0x2c6>
 8000bec:	3902      	subs	r1, #2
 8000bee:	443d      	add	r5, r7
 8000bf0:	1aeb      	subs	r3, r5, r3
 8000bf2:	fa1f f588 	uxth.w	r5, r8
 8000bf6:	fbb3 f0f2 	udiv	r0, r3, r2
 8000bfa:	fb02 3310 	mls	r3, r2, r0, r3
 8000bfe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c02:	fb00 f30c 	mul.w	r3, r0, ip
 8000c06:	42ab      	cmp	r3, r5
 8000c08:	d907      	bls.n	8000c1a <__udivmoddi4+0x1e6>
 8000c0a:	19ed      	adds	r5, r5, r7
 8000c0c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c10:	d26f      	bcs.n	8000cf2 <__udivmoddi4+0x2be>
 8000c12:	42ab      	cmp	r3, r5
 8000c14:	d96d      	bls.n	8000cf2 <__udivmoddi4+0x2be>
 8000c16:	3802      	subs	r0, #2
 8000c18:	443d      	add	r5, r7
 8000c1a:	1aeb      	subs	r3, r5, r3
 8000c1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c20:	e78f      	b.n	8000b42 <__udivmoddi4+0x10e>
 8000c22:	f1c1 0720 	rsb	r7, r1, #32
 8000c26:	fa22 f807 	lsr.w	r8, r2, r7
 8000c2a:	408b      	lsls	r3, r1
 8000c2c:	fa05 f401 	lsl.w	r4, r5, r1
 8000c30:	ea48 0303 	orr.w	r3, r8, r3
 8000c34:	fa20 fe07 	lsr.w	lr, r0, r7
 8000c38:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000c3c:	40fd      	lsrs	r5, r7
 8000c3e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000c42:	fbb5 f9fc 	udiv	r9, r5, ip
 8000c46:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000c4a:	fb0c 5519 	mls	r5, ip, r9, r5
 8000c4e:	fa1f f883 	uxth.w	r8, r3
 8000c52:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000c56:	fb09 f408 	mul.w	r4, r9, r8
 8000c5a:	42ac      	cmp	r4, r5
 8000c5c:	fa02 f201 	lsl.w	r2, r2, r1
 8000c60:	fa00 fa01 	lsl.w	sl, r0, r1
 8000c64:	d908      	bls.n	8000c78 <__udivmoddi4+0x244>
 8000c66:	18ed      	adds	r5, r5, r3
 8000c68:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c6c:	d243      	bcs.n	8000cf6 <__udivmoddi4+0x2c2>
 8000c6e:	42ac      	cmp	r4, r5
 8000c70:	d941      	bls.n	8000cf6 <__udivmoddi4+0x2c2>
 8000c72:	f1a9 0902 	sub.w	r9, r9, #2
 8000c76:	441d      	add	r5, r3
 8000c78:	1b2d      	subs	r5, r5, r4
 8000c7a:	fa1f fe8e 	uxth.w	lr, lr
 8000c7e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000c82:	fb0c 5510 	mls	r5, ip, r0, r5
 8000c86:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000c8a:	fb00 f808 	mul.w	r8, r0, r8
 8000c8e:	45a0      	cmp	r8, r4
 8000c90:	d907      	bls.n	8000ca2 <__udivmoddi4+0x26e>
 8000c92:	18e4      	adds	r4, r4, r3
 8000c94:	f100 35ff 	add.w	r5, r0, #4294967295
 8000c98:	d229      	bcs.n	8000cee <__udivmoddi4+0x2ba>
 8000c9a:	45a0      	cmp	r8, r4
 8000c9c:	d927      	bls.n	8000cee <__udivmoddi4+0x2ba>
 8000c9e:	3802      	subs	r0, #2
 8000ca0:	441c      	add	r4, r3
 8000ca2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ca6:	eba4 0408 	sub.w	r4, r4, r8
 8000caa:	fba0 8902 	umull	r8, r9, r0, r2
 8000cae:	454c      	cmp	r4, r9
 8000cb0:	46c6      	mov	lr, r8
 8000cb2:	464d      	mov	r5, r9
 8000cb4:	d315      	bcc.n	8000ce2 <__udivmoddi4+0x2ae>
 8000cb6:	d012      	beq.n	8000cde <__udivmoddi4+0x2aa>
 8000cb8:	b156      	cbz	r6, 8000cd0 <__udivmoddi4+0x29c>
 8000cba:	ebba 030e 	subs.w	r3, sl, lr
 8000cbe:	eb64 0405 	sbc.w	r4, r4, r5
 8000cc2:	fa04 f707 	lsl.w	r7, r4, r7
 8000cc6:	40cb      	lsrs	r3, r1
 8000cc8:	431f      	orrs	r7, r3
 8000cca:	40cc      	lsrs	r4, r1
 8000ccc:	6037      	str	r7, [r6, #0]
 8000cce:	6074      	str	r4, [r6, #4]
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	e6f8      	b.n	8000acc <__udivmoddi4+0x98>
 8000cda:	4690      	mov	r8, r2
 8000cdc:	e6e0      	b.n	8000aa0 <__udivmoddi4+0x6c>
 8000cde:	45c2      	cmp	sl, r8
 8000ce0:	d2ea      	bcs.n	8000cb8 <__udivmoddi4+0x284>
 8000ce2:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ce6:	eb69 0503 	sbc.w	r5, r9, r3
 8000cea:	3801      	subs	r0, #1
 8000cec:	e7e4      	b.n	8000cb8 <__udivmoddi4+0x284>
 8000cee:	4628      	mov	r0, r5
 8000cf0:	e7d7      	b.n	8000ca2 <__udivmoddi4+0x26e>
 8000cf2:	4640      	mov	r0, r8
 8000cf4:	e791      	b.n	8000c1a <__udivmoddi4+0x1e6>
 8000cf6:	4681      	mov	r9, r0
 8000cf8:	e7be      	b.n	8000c78 <__udivmoddi4+0x244>
 8000cfa:	4601      	mov	r1, r0
 8000cfc:	e778      	b.n	8000bf0 <__udivmoddi4+0x1bc>
 8000cfe:	3802      	subs	r0, #2
 8000d00:	443c      	add	r4, r7
 8000d02:	e745      	b.n	8000b90 <__udivmoddi4+0x15c>
 8000d04:	4608      	mov	r0, r1
 8000d06:	e708      	b.n	8000b1a <__udivmoddi4+0xe6>
 8000d08:	f1a8 0802 	sub.w	r8, r8, #2
 8000d0c:	443d      	add	r5, r7
 8000d0e:	e72b      	b.n	8000b68 <__udivmoddi4+0x134>

08000d10 <__aeabi_idiv0>:
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop

08000d14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d14:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000d16:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <HAL_InitTick+0x2c>)
{
 8000d18:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000d1a:	6818      	ldr	r0, [r3, #0]
 8000d1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d20:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d24:	f000 fd08 	bl	8001738 <HAL_SYSTICK_Config>
 8000d28:	4604      	mov	r4, r0
 8000d2a:	b938      	cbnz	r0, 8000d3c <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	4629      	mov	r1, r5
 8000d30:	f04f 30ff 	mov.w	r0, #4294967295
 8000d34:	f000 fccc 	bl	80016d0 <HAL_NVIC_SetPriority>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8000d3c:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000d3e:	bd38      	pop	{r3, r4, r5, pc}
 8000d40:	20000000 	.word	0x20000000

08000d44 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d44:	4a09      	ldr	r2, [pc, #36]	; (8000d6c <HAL_Init+0x28>)
 8000d46:	6813      	ldr	r3, [r2, #0]
 8000d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8000d4c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d4e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d50:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d52:	f000 fcab 	bl	80016ac <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d56:	2000      	movs	r0, #0
 8000d58:	f7ff ffdc 	bl	8000d14 <HAL_InitTick>
 8000d5c:	4604      	mov	r4, r0
 8000d5e:	b918      	cbnz	r0, 8000d68 <HAL_Init+0x24>
    HAL_MspInit();
 8000d60:	f003 faaa 	bl	80042b8 <HAL_MspInit>
}
 8000d64:	4620      	mov	r0, r4
 8000d66:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000d68:	2401      	movs	r4, #1
 8000d6a:	e7fb      	b.n	8000d64 <HAL_Init+0x20>
 8000d6c:	40022000 	.word	0x40022000

08000d70 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000d70:	4a02      	ldr	r2, [pc, #8]	; (8000d7c <HAL_IncTick+0xc>)
 8000d72:	6813      	ldr	r3, [r2, #0]
 8000d74:	3301      	adds	r3, #1
 8000d76:	6013      	str	r3, [r2, #0]
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	20000090 	.word	0x20000090

08000d80 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d80:	4b01      	ldr	r3, [pc, #4]	; (8000d88 <HAL_GetTick+0x8>)
 8000d82:	6818      	ldr	r0, [r3, #0]
}
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	20000090 	.word	0x20000090

08000d8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d8c:	b538      	push	{r3, r4, r5, lr}
 8000d8e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000d90:	f7ff fff6 	bl	8000d80 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d94:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000d96:	4605      	mov	r5, r0
  {
    wait++;
 8000d98:	bf18      	it	ne
 8000d9a:	3401      	addne	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d9c:	f7ff fff0 	bl	8000d80 <HAL_GetTick>
 8000da0:	1b40      	subs	r0, r0, r5
 8000da2:	4284      	cmp	r4, r0
 8000da4:	d8fa      	bhi.n	8000d9c <HAL_Delay+0x10>
  {
  }
}
 8000da6:	bd38      	pop	{r3, r4, r5, pc}

08000da8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000da8:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000daa:	0dcc      	lsrs	r4, r1, #23
 8000dac:	f004 0404 	and.w	r4, r4, #4
 8000db0:	3014      	adds	r0, #20
  
  MODIFY_REG(*preg,
 8000db2:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8000db6:	2307      	movs	r3, #7
 8000db8:	fa03 f501 	lsl.w	r5, r3, r1
 8000dbc:	5823      	ldr	r3, [r4, r0]
 8000dbe:	fa02 f101 	lsl.w	r1, r2, r1
 8000dc2:	ea23 0305 	bic.w	r3, r3, r5
 8000dc6:	4319      	orrs	r1, r3
 8000dc8:	5021      	str	r1, [r4, r0]
 8000dca:	bd30      	pop	{r4, r5, pc}

08000dcc <LL_ADC_IsEnabled>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000dcc:	6880      	ldr	r0, [r0, #8]
}
 8000dce:	f000 0001 	and.w	r0, r0, #1
 8000dd2:	4770      	bx	lr

08000dd4 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000dd4:	6880      	ldr	r0, [r0, #8]
}
 8000dd6:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8000dda:	4770      	bx	lr

08000ddc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ddc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000de2:	4604      	mov	r4, r0
 8000de4:	2800      	cmp	r0, #0
 8000de6:	f000 8085 	beq.w	8000ef4 <HAL_ADC_Init+0x118>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000dea:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8000dec:	b925      	cbnz	r5, 8000df8 <HAL_ADC_Init+0x1c>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dee:	f002 ff7b 	bl	8003ce8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000df2:	65a5      	str	r5, [r4, #88]	; 0x58
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000df4:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  }
  
  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if(LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000df8:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000dfa:	6883      	ldr	r3, [r0, #8]
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	d47b      	bmi.n	8000ef8 <HAL_ADC_Init+0x11c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000e00:	6883      	ldr	r3, [r0, #8]
 8000e02:	00dd      	lsls	r5, r3, #3
 8000e04:	d57f      	bpl.n	8000f06 <HAL_ADC_Init+0x12a>
 8000e06:	6883      	ldr	r3, [r0, #8]
 8000e08:	00d9      	lsls	r1, r3, #3
 8000e0a:	f140 808a 	bpl.w	8000f22 <HAL_ADC_Init+0x146>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e0e:	2100      	movs	r1, #0
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000e10:	f7ff ffe0 	bl	8000dd4 <LL_ADC_REG_IsConversionOngoing>
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000e14:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000e16:	f013 0f10 	tst.w	r3, #16
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e1a:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000e1c:	d167      	bne.n	8000eee <HAL_ADC_Init+0x112>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000e1e:	2800      	cmp	r0, #0
 8000e20:	d165      	bne.n	8000eee <HAL_ADC_Init+0x112>
    ADC_STATE_CLR_SET(hadc->State,
 8000e22:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000e26:	f043 0302 	orr.w	r3, r3, #2
 8000e2a:	6563      	str	r3, [r4, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000e2c:	6820      	ldr	r0, [r4, #0]
 8000e2e:	f7ff ffcd 	bl	8000dcc <LL_ADC_IsEnabled>
 8000e32:	b998      	cbnz	r0, 8000e5c <HAL_ADC_Init+0x80>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000e34:	4852      	ldr	r0, [pc, #328]	; (8000f80 <HAL_ADC_Init+0x1a4>)
 8000e36:	f7ff ffc9 	bl	8000dcc <LL_ADC_IsEnabled>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	4851      	ldr	r0, [pc, #324]	; (8000f84 <HAL_ADC_Init+0x1a8>)
 8000e3e:	f7ff ffc5 	bl	8000dcc <LL_ADC_IsEnabled>
 8000e42:	4303      	orrs	r3, r0
 8000e44:	4850      	ldr	r0, [pc, #320]	; (8000f88 <HAL_ADC_Init+0x1ac>)
 8000e46:	f7ff ffc1 	bl	8000dcc <LL_ADC_IsEnabled>
 8000e4a:	4303      	orrs	r3, r0
 8000e4c:	d106      	bne.n	8000e5c <HAL_ADC_Init+0x80>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000e4e:	4a4f      	ldr	r2, [pc, #316]	; (8000f8c <HAL_ADC_Init+0x1b0>)
 8000e50:	6860      	ldr	r0, [r4, #4]
 8000e52:	6893      	ldr	r3, [r2, #8]
 8000e54:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000e58:	4303      	orrs	r3, r0
 8000e5a:	6093      	str	r3, [r2, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8000e5c:	68e0      	ldr	r0, [r4, #12]
 8000e5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode)  );
 8000e60:	f894 2020 	ldrb.w	r2, [r4, #32]
                hadc->Init.DataAlign                                                   |
 8000e64:	4303      	orrs	r3, r0
 8000e66:	68a0      	ldr	r0, [r4, #8]
 8000e68:	4303      	orrs	r3, r0
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000e6a:	7e60      	ldrb	r0, [r4, #25]
    
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e6c:	2a01      	cmp	r2, #1
                hadc->Init.DataAlign                                                   |
 8000e6e:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000e72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000e76:	bf02      	ittt	eq
 8000e78:	6a62      	ldreq	r2, [r4, #36]	; 0x24
 8000e7a:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8000e7e:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e82:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000e84:	b122      	cbz	r2, 8000e90 <HAL_ADC_Init+0xb4>
    {
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8000e86:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000e88:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000e8c:	4302      	orrs	r2, r0
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000e8e:	4313      	orrs	r3, r2
                 );
    }
    
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR); 
 8000e90:	6820      	ldr	r0, [r4, #0]
 8000e92:	4a3f      	ldr	r2, [pc, #252]	; (8000f90 <HAL_ADC_Init+0x1b4>)
 8000e94:	68c5      	ldr	r5, [r0, #12]
 8000e96:	402a      	ands	r2, r5
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	60c3      	str	r3, [r0, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000e9c:	f7ff ff9a 	bl	8000dd4 <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000ea0:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000ea2:	689a      	ldr	r2, [r3, #8]
 8000ea4:	0712      	lsls	r2, r2, #28
 8000ea6:	d546      	bpl.n	8000f36 <HAL_ADC_Init+0x15a>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000ea8:	6922      	ldr	r2, [r4, #16]
 8000eaa:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000eac:	bf05      	ittet	eq
 8000eae:	6b18      	ldreq	r0, [r3, #48]	; 0x30
 8000eb0:	69e2      	ldreq	r2, [r4, #28]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000eb2:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000eb4:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8000eb8:	bf06      	itte	eq
 8000eba:	f020 000f 	biceq.w	r0, r0, #15
 8000ebe:	4302      	orreq	r2, r0
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000ec0:	f022 020f 	bicne.w	r2, r2, #15
 8000ec4:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000ec6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000ec8:	f023 0303 	bic.w	r3, r3, #3
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8000ed2:	4608      	mov	r0, r1
 8000ed4:	b003      	add	sp, #12
 8000ed6:	bd30      	pop	{r4, r5, pc}
      wait_loop_index--;
 8000ed8:	9b01      	ldr	r3, [sp, #4]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 8000ede:	9b01      	ldr	r3, [sp, #4]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d1f9      	bne.n	8000ed8 <HAL_ADC_Init+0xfc>
 8000ee4:	e78f      	b.n	8000e06 <HAL_ADC_Init+0x2a>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000ee6:	691a      	ldr	r2, [r3, #16]
 8000ee8:	f022 0201 	bic.w	r2, r2, #1
 8000eec:	e045      	b.n	8000f7a <HAL_ADC_Init+0x19e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000eee:	f043 0310 	orr.w	r3, r3, #16
 8000ef2:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	e7ec      	b.n	8000ed2 <HAL_ADC_Init+0xf6>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000ef8:	6883      	ldr	r3, [r0, #8]
 8000efa:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000efe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f02:	6083      	str	r3, [r0, #8]
 8000f04:	e77c      	b.n	8000e00 <HAL_ADC_Init+0x24>
  MODIFY_REG(ADCx->CR,
 8000f06:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000f08:	4a22      	ldr	r2, [pc, #136]	; (8000f94 <HAL_ADC_Init+0x1b8>)
 8000f0a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000f0e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f16:	6083      	str	r3, [r0, #8]
 8000f18:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <HAL_ADC_Init+0x1bc>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f20:	e7dc      	b.n	8000edc <HAL_ADC_Init+0x100>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f22:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000f24:	f043 0310 	orr.w	r3, r3, #16
 8000f28:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8000f32:	2101      	movs	r1, #1
 8000f34:	e76c      	b.n	8000e10 <HAL_ADC_Init+0x34>
    if (   (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000f36:	2800      	cmp	r0, #0
 8000f38:	d1b6      	bne.n	8000ea8 <HAL_ADC_Init+0xcc>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000f3a:	68d8      	ldr	r0, [r3, #12]
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000f3c:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000f40:	7e25      	ldrb	r5, [r4, #24]
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000f42:	0052      	lsls	r2, r2, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000f44:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                            |
 8000f48:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000f4c:	f020 0002 	bic.w	r0, r0, #2
 8000f50:	4302      	orrs	r2, r0
 8000f52:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8000f54:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8000f58:	2a01      	cmp	r2, #1
 8000f5a:	d1c4      	bne.n	8000ee6 <HAL_ADC_Init+0x10a>
        MODIFY_REG(hadc->Instance->CFGR2,
 8000f5c:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8000f5e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000f60:	6918      	ldr	r0, [r3, #16]
 8000f62:	432a      	orrs	r2, r5
 8000f64:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8000f66:	f042 0201 	orr.w	r2, r2, #1
 8000f6a:	432a      	orrs	r2, r5
 8000f6c:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8000f6e:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8000f72:	432a      	orrs	r2, r5
 8000f74:	f020 0004 	bic.w	r0, r0, #4
 8000f78:	4302      	orrs	r2, r0
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000f7a:	611a      	str	r2, [r3, #16]
 8000f7c:	e794      	b.n	8000ea8 <HAL_ADC_Init+0xcc>
 8000f7e:	bf00      	nop
 8000f80:	50040000 	.word	0x50040000
 8000f84:	50040100 	.word	0x50040100
 8000f88:	50040200 	.word	0x50040200
 8000f8c:	50040300 	.word	0x50040300
 8000f90:	fff0c007 	.word	0xfff0c007
 8000f94:	00030d40 	.word	0x00030d40
 8000f98:	20000000 	.word	0x20000000

08000f9c <HAL_ADC_PollForConversion>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000f9c:	4b38      	ldr	r3, [pc, #224]	; (8001080 <HAL_ADC_PollForConversion+0xe4>)
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000f9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000fa2:	6945      	ldr	r5, [r0, #20]
 8000fa4:	689e      	ldr	r6, [r3, #8]
 8000fa6:	2d08      	cmp	r5, #8
{
 8000fa8:	4604      	mov	r4, r0
 8000faa:	460f      	mov	r7, r1
 8000fac:	f006 061f 	and.w	r6, r6, #31
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000fb0:	d017      	beq.n	8000fe2 <HAL_ADC_PollForConversion+0x46>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (    (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000fb2:	2e09      	cmp	r6, #9
 8000fb4:	d810      	bhi.n	8000fd8 <HAL_ADC_PollForConversion+0x3c>
 8000fb6:	f240 2221 	movw	r2, #545	; 0x221
 8000fba:	40f2      	lsrs	r2, r6
 8000fbc:	07d1      	lsls	r1, r2, #31
 8000fbe:	d50b      	bpl.n	8000fd8 <HAL_ADC_PollForConversion+0x3c>
         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8000fc0:	6803      	ldr	r3, [r0, #0]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	f013 0f01 	tst.w	r3, #1
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8000fc8:	d00a      	beq.n	8000fe0 <HAL_ADC_PollForConversion+0x44>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fca:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000fcc:	f043 0320 	orr.w	r3, r3, #32
 8000fd0:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000fd8:	689b      	ldr	r3, [r3, #8]
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8000fda:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 8000fde:	e7f3      	b.n	8000fc8 <HAL_ADC_PollForConversion+0x2c>
        tmp_Flag_End = (ADC_FLAG_EOC);
 8000fe0:	2504      	movs	r5, #4
    }
#endif
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000fe2:	f7ff fecd 	bl	8000d80 <HAL_GetTick>
 8000fe6:	4680      	mov	r8, r0
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000fe8:	6823      	ldr	r3, [r4, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4215      	tst	r5, r2
 8000fee:	d021      	beq.n	8001034 <HAL_ADC_PollForConversion+0x98>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ff0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000ff2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ff6:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000ff8:	68da      	ldr	r2, [r3, #12]
 8000ffa:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8000ffe:	d10f      	bne.n	8001020 <HAL_ADC_PollForConversion+0x84>
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(   (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
     && (hadc->Init.ContinuousConvMode == DISABLE)
 8001000:	7e62      	ldrb	r2, [r4, #25]
 8001002:	b96a      	cbnz	r2, 8001020 <HAL_ADC_PollForConversion+0x84>
    )
  {
    /* Check whether end of sequence is reached */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	0710      	lsls	r0, r2, #28
 8001008:	d50a      	bpl.n	8001020 <HAL_ADC_PollForConversion+0x84>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800100a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800100c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001010:	6562      	str	r2, [r4, #84]	; 0x54
      
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001012:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001014:	04d1      	lsls	r1, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001016:	bf5e      	ittt	pl
 8001018:	6d62      	ldrpl	r2, [r4, #84]	; 0x54
 800101a:	f042 0201 	orrpl.w	r2, r2, #1
 800101e:	6562      	strpl	r2, [r4, #84]	; 0x54
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001020:	4a18      	ldr	r2, [pc, #96]	; (8001084 <HAL_ADC_PollForConversion+0xe8>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d021      	beq.n	800106a <HAL_ADC_PollForConversion+0xce>
       || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
       || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001026:	68d8      	ldr	r0, [r3, #12]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif
  
  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001028:	2d08      	cmp	r5, #8
 800102a:	d117      	bne.n	800105c <HAL_ADC_PollForConversion+0xc0>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);  
 800102c:	601d      	str	r5, [r3, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800102e:	2000      	movs	r0, #0
 8001030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001034:	1c7a      	adds	r2, r7, #1
 8001036:	d0d8      	beq.n	8000fea <HAL_ADC_PollForConversion+0x4e>
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001038:	f7ff fea2 	bl	8000d80 <HAL_GetTick>
 800103c:	eba0 0008 	sub.w	r0, r0, r8
 8001040:	4287      	cmp	r7, r0
 8001042:	d301      	bcc.n	8001048 <HAL_ADC_PollForConversion+0xac>
 8001044:	2f00      	cmp	r7, #0
 8001046:	d1cf      	bne.n	8000fe8 <HAL_ADC_PollForConversion+0x4c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001048:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800104a:	f043 0304 	orr.w	r3, r3, #4
 800104e:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8001050:	2300      	movs	r3, #0
 8001052:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        return HAL_TIMEOUT;
 8001056:	2003      	movs	r0, #3
 8001058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800105c:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 8001060:	d1e5      	bne.n	800102e <HAL_ADC_PollForConversion+0x92>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001062:	220c      	movs	r2, #12
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800106a:	2e09      	cmp	r6, #9
 800106c:	d805      	bhi.n	800107a <HAL_ADC_PollForConversion+0xde>
 800106e:	f240 2221 	movw	r2, #545	; 0x221
 8001072:	fa22 f606 	lsr.w	r6, r2, r6
 8001076:	07f2      	lsls	r2, r6, #31
 8001078:	d4d5      	bmi.n	8001026 <HAL_ADC_PollForConversion+0x8a>
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800107a:	4a03      	ldr	r2, [pc, #12]	; (8001088 <HAL_ADC_PollForConversion+0xec>)
 800107c:	68d0      	ldr	r0, [r2, #12]
 800107e:	e7d3      	b.n	8001028 <HAL_ADC_PollForConversion+0x8c>
 8001080:	50040300 	.word	0x50040300
 8001084:	50040100 	.word	0x50040100
 8001088:	50040000 	.word	0x50040000

0800108c <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800108c:	6803      	ldr	r3, [r0, #0]
 800108e:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8001090:	4770      	bx	lr
	...

08001094 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001094:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800109a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800109e:	2b01      	cmp	r3, #1
{
 80010a0:	4605      	mov	r5, r0
 80010a2:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 80010a4:	f000 8187 	beq.w	80013b6 <HAL_ADC_ConfigChannel+0x322>
 80010a8:	2301      	movs	r3, #1
 80010aa:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80010ae:	6800      	ldr	r0, [r0, #0]
 80010b0:	f7ff fe90 	bl	8000dd4 <LL_ADC_REG_IsConversionOngoing>
 80010b4:	2800      	cmp	r0, #0
 80010b6:	f040 8178 	bne.w	80013aa <HAL_ADC_ConfigChannel+0x316>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80010ba:	684b      	ldr	r3, [r1, #4]
 80010bc:	2b05      	cmp	r3, #5
 80010be:	d808      	bhi.n	80010d2 <HAL_ADC_ConfigChannel+0x3e>
    {
      switch (sConfig->Rank)
 80010c0:	3b02      	subs	r3, #2
 80010c2:	2b03      	cmp	r3, #3
 80010c4:	d865      	bhi.n	8001192 <HAL_ADC_ConfigChannel+0xfe>
 80010c6:	e8df f003 	tbb	[pc, r3]
 80010ca:	5d02      	.short	0x5d02
 80010cc:	615f      	.short	0x615f
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 80010ce:	230c      	movs	r3, #12
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 80010d0:	6063      	str	r3, [r4, #4]
      }
    }
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80010d2:	6861      	ldr	r1, [r4, #4]
 80010d4:	6828      	ldr	r0, [r5, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80010d6:	098e      	lsrs	r6, r1, #6
 80010d8:	f100 0730 	add.w	r7, r0, #48	; 0x30
 80010dc:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 80010e0:	f001 011f 	and.w	r1, r1, #31
 80010e4:	231f      	movs	r3, #31
 80010e6:	fa03 f201 	lsl.w	r2, r3, r1
 80010ea:	59f3      	ldr	r3, [r6, r7]
 80010ec:	ea23 0302 	bic.w	r3, r3, r2
 80010f0:	6822      	ldr	r2, [r4, #0]
 80010f2:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80010f6:	408a      	lsls	r2, r1
 80010f8:	4313      	orrs	r3, r2
 80010fa:	51f3      	str	r3, [r6, r7]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010fc:	f7ff fe6a 	bl	8000dd4 <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001100:	682b      	ldr	r3, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001102:	689a      	ldr	r2, [r3, #8]
 8001104:	0711      	lsls	r1, r2, #28
 8001106:	f140 8158 	bpl.w	80013ba <HAL_ADC_ConfigChannel+0x326>
    }
    
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800110a:	6828      	ldr	r0, [r5, #0]
 800110c:	f7ff fe5e 	bl	8000dcc <LL_ADC_IsEnabled>
 8001110:	2800      	cmp	r0, #0
 8001112:	f040 80d7 	bne.w	80012c4 <HAL_ADC_ConfigChannel+0x230>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001116:	68e6      	ldr	r6, [r4, #12]
 8001118:	6828      	ldr	r0, [r5, #0]
 800111a:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->DIFSEL,
 800111c:	4ac3      	ldr	r2, [pc, #780]	; (800142c <HAL_ADC_ConfigChannel+0x398>)
 800111e:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
 8001122:	f006 0e18 	and.w	lr, r6, #24
 8001126:	f3c3 0712 	ubfx	r7, r3, #0, #19
 800112a:	fa22 f20e 	lsr.w	r2, r2, lr
 800112e:	401a      	ands	r2, r3
 8001130:	ea21 0107 	bic.w	r1, r1, r7
 8001134:	430a      	orrs	r2, r1
 8001136:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      
      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800113a:	4abd      	ldr	r2, [pc, #756]	; (8001430 <HAL_ADC_ConfigChannel+0x39c>)
 800113c:	4296      	cmp	r6, r2
 800113e:	f040 80c1 	bne.w	80012c4 <HAL_ADC_ConfigChannel+0x230>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1UL) & 0x1FUL), sConfig->SamplingTime);
 8001142:	2f00      	cmp	r7, #0
 8001144:	f040 8093 	bne.w	800126e <HAL_ADC_ConfigChannel+0x1da>
 8001148:	0e9e      	lsrs	r6, r3, #26
 800114a:	3601      	adds	r6, #1
 800114c:	f006 021f 	and.w	r2, r6, #31
 8001150:	2a09      	cmp	r2, #9
 8001152:	f04f 0101 	mov.w	r1, #1
 8001156:	ea4f 6686 	mov.w	r6, r6, lsl #26
 800115a:	f240 80a2 	bls.w	80012a2 <HAL_ADC_ConfigChannel+0x20e>
 800115e:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8001162:	4091      	lsls	r1, r2
 8001164:	ea41 0206 	orr.w	r2, r1, r6
 8001168:	2f00      	cmp	r7, #0
 800116a:	f040 80cb 	bne.w	8001304 <HAL_ADC_ConfigChannel+0x270>
 800116e:	0e9b      	lsrs	r3, r3, #26
 8001170:	3301      	adds	r3, #1
 8001172:	f003 031f 	and.w	r3, r3, #31
 8001176:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800117a:	391e      	subs	r1, #30
 800117c:	0509      	lsls	r1, r1, #20
 800117e:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8001182:	e09b      	b.n	80012bc <HAL_ADC_ConfigChannel+0x228>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8001184:	2312      	movs	r3, #18
 8001186:	e7a3      	b.n	80010d0 <HAL_ADC_ConfigChannel+0x3c>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8001188:	2318      	movs	r3, #24
 800118a:	e7a1      	b.n	80010d0 <HAL_ADC_ConfigChannel+0x3c>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 800118c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001190:	e79e      	b.n	80010d0 <HAL_ADC_ConfigChannel+0x3c>
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8001192:	2306      	movs	r3, #6
 8001194:	e79c      	b.n	80010d0 <HAL_ADC_ConfigChannel+0x3c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001196:	f8de 1060 	ldr.w	r1, [lr, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800119a:	f3c3 0012 	ubfx	r0, r3, #0, #19
 800119e:	f3c1 6784 	ubfx	r7, r1, #26, #5
 80011a2:	f10e 0664 	add.w	r6, lr, #100	; 0x64
 80011a6:	2800      	cmp	r0, #0
 80011a8:	d13a      	bne.n	8001220 <HAL_ADC_ConfigChannel+0x18c>
 80011aa:	f3c3 6084 	ubfx	r0, r3, #26, #5
 80011ae:	4287      	cmp	r7, r0
 80011b0:	f040 8128 	bne.w	8001404 <HAL_ADC_ConfigChannel+0x370>
  MODIFY_REG(*preg,
 80011b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80011b8:	f8ce 1060 	str.w	r1, [lr, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80011bc:	6823      	ldr	r3, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80011be:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
 80011c2:	f3c3 0712 	ubfx	r7, r3, #0, #19
 80011c6:	f3c1 6084 	ubfx	r0, r1, #26, #5
 80011ca:	bb9f      	cbnz	r7, 8001234 <HAL_ADC_ConfigChannel+0x1a0>
 80011cc:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80011d0:	4283      	cmp	r3, r0
 80011d2:	f040 811c 	bne.w	800140e <HAL_ADC_ConfigChannel+0x37a>
  MODIFY_REG(*preg,
 80011d6:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80011da:	6031      	str	r1, [r6, #0]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80011dc:	6823      	ldr	r3, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80011de:	6891      	ldr	r1, [r2, #8]
 80011e0:	f3c3 0712 	ubfx	r7, r3, #0, #19
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011e4:	f102 0608 	add.w	r6, r2, #8
 80011e8:	f3c1 6084 	ubfx	r0, r1, #26, #5
 80011ec:	bb77      	cbnz	r7, 800124c <HAL_ADC_ConfigChannel+0x1b8>
 80011ee:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80011f2:	4283      	cmp	r3, r0
 80011f4:	f040 8112 	bne.w	800141c <HAL_ADC_ConfigChannel+0x388>
  MODIFY_REG(*preg,
 80011f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80011fc:	6031      	str	r1, [r6, #0]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80011fe:	6823      	ldr	r3, [r4, #0]
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001200:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001204:	68d2      	ldr	r2, [r2, #12]
 8001206:	f3c3 0612 	ubfx	r6, r3, #0, #19
 800120a:	f3c2 6184 	ubfx	r1, r2, #26, #5
 800120e:	bb4e      	cbnz	r6, 8001264 <HAL_ADC_ConfigChannel+0x1d0>
 8001210:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001214:	428b      	cmp	r3, r1
  MODIFY_REG(*preg,
 8001216:	bf04      	itt	eq
 8001218:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 800121c:	6002      	streq	r2, [r0, #0]
 800121e:	e774      	b.n	800110a <HAL_ADC_ConfigChannel+0x76>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001220:	fa93 f0a3 	rbit	r0, r3
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001224:	fab0 f080 	clz	r0, r0
 8001228:	4287      	cmp	r7, r0
 800122a:	d0c3      	beq.n	80011b4 <HAL_ADC_ConfigChannel+0x120>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800122c:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001230:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8001234:	fa93 f3a3 	rbit	r3, r3
 8001238:	fab3 f383 	clz	r3, r3
 800123c:	4283      	cmp	r3, r0
 800123e:	d0ca      	beq.n	80011d6 <HAL_ADC_ConfigChannel+0x142>
 8001240:	6891      	ldr	r1, [r2, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001242:	6823      	ldr	r3, [r4, #0]
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001244:	f102 0608 	add.w	r6, r2, #8
 8001248:	f3c1 6084 	ubfx	r0, r1, #26, #5
 800124c:	fa93 f3a3 	rbit	r3, r3
 8001250:	fab3 f383 	clz	r3, r3
 8001254:	4283      	cmp	r3, r0
 8001256:	d0cf      	beq.n	80011f8 <HAL_ADC_ConfigChannel+0x164>
 8001258:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800125c:	68d2      	ldr	r2, [r2, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800125e:	6823      	ldr	r3, [r4, #0]
 8001260:	f3c2 6184 	ubfx	r1, r2, #26, #5
 8001264:	fa93 f3a3 	rbit	r3, r3
 8001268:	fab3 f383 	clz	r3, r3
 800126c:	e7d2      	b.n	8001214 <HAL_ADC_ConfigChannel+0x180>
 800126e:	fa93 f2a3 	rbit	r2, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1UL) & 0x1FUL), sConfig->SamplingTime);
 8001272:	fab2 f282 	clz	r2, r2
 8001276:	3201      	adds	r2, #1
 8001278:	f002 021f 	and.w	r2, r2, #31
 800127c:	2a09      	cmp	r2, #9
 800127e:	d830      	bhi.n	80012e2 <HAL_ADC_ConfigChannel+0x24e>
 8001280:	fa93 f6a3 	rbit	r6, r3
 8001284:	fab6 f686 	clz	r6, r6
 8001288:	3601      	adds	r6, #1
 800128a:	06b6      	lsls	r6, r6, #26
 800128c:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8001290:	fa93 f1a3 	rbit	r1, r3
 8001294:	fab1 f181 	clz	r1, r1
 8001298:	3101      	adds	r1, #1
 800129a:	f001 021f 	and.w	r2, r1, #31
 800129e:	2101      	movs	r1, #1
 80012a0:	e001      	b.n	80012a6 <HAL_ADC_ConfigChannel+0x212>
 80012a2:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 80012a6:	4091      	lsls	r1, r2
 80012a8:	ea41 0206 	orr.w	r2, r1, r6
 80012ac:	b9a7      	cbnz	r7, 80012d8 <HAL_ADC_ConfigChannel+0x244>
 80012ae:	0e99      	lsrs	r1, r3, #26
 80012b0:	3101      	adds	r1, #1
 80012b2:	f001 011f 	and.w	r1, r1, #31
 80012b6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80012ba:	0509      	lsls	r1, r1, #20
 80012bc:	4311      	orrs	r1, r2
 80012be:	68a2      	ldr	r2, [r4, #8]
 80012c0:	f7ff fd72 	bl	8000da8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */
    
    if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80012c4:	6822      	ldr	r2, [r4, #0]
 80012c6:	4b5b      	ldr	r3, [pc, #364]	; (8001434 <HAL_ADC_ConfigChannel+0x3a0>)
 80012c8:	421a      	tst	r2, r3
 80012ca:	d120      	bne.n	800130e <HAL_ADC_ConfigChannel+0x27a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012cc:	2000      	movs	r0, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012ce:	2300      	movs	r3, #0
 80012d0:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
  
  /* Return function status */
  return tmp_hal_status;
}
 80012d4:	b003      	add	sp, #12
 80012d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012d8:	fa93 f1a3 	rbit	r1, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1UL) & 0x1FUL), sConfig->SamplingTime);
 80012dc:	fab1 f181 	clz	r1, r1
 80012e0:	e7e6      	b.n	80012b0 <HAL_ADC_ConfigChannel+0x21c>
 80012e2:	fa93 f2a3 	rbit	r2, r3
 80012e6:	fab2 f282 	clz	r2, r2
 80012ea:	3201      	adds	r2, #1
 80012ec:	0692      	lsls	r2, r2, #26
 80012ee:	f002 46f8 	and.w	r6, r2, #2080374784	; 0x7c000000
 80012f2:	fa93 f1a3 	rbit	r1, r3
 80012f6:	fab1 f181 	clz	r1, r1
 80012fa:	3101      	adds	r1, #1
 80012fc:	f001 021f 	and.w	r2, r1, #31
 8001300:	2101      	movs	r1, #1
 8001302:	e72e      	b.n	8001162 <HAL_ADC_ConfigChannel+0xce>
 8001304:	fa93 f3a3 	rbit	r3, r3
 8001308:	fab3 f383 	clz	r3, r3
 800130c:	e730      	b.n	8001170 <HAL_ADC_ConfigChannel+0xdc>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800130e:	494a      	ldr	r1, [pc, #296]	; (8001438 <HAL_ADC_ConfigChannel+0x3a4>)
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001310:	4b4a      	ldr	r3, [pc, #296]	; (800143c <HAL_ADC_ConfigChannel+0x3a8>)
 8001312:	6888      	ldr	r0, [r1, #8]
 8001314:	429a      	cmp	r2, r3
 8001316:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 800131a:	460c      	mov	r4, r1
 800131c:	d11e      	bne.n	800135c <HAL_ADC_ConfigChannel+0x2c8>
 800131e:	0202      	lsls	r2, r0, #8
 8001320:	d4d4      	bmi.n	80012cc <HAL_ADC_ConfigChannel+0x238>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) 
 8001322:	682b      	ldr	r3, [r5, #0]
 8001324:	4a46      	ldr	r2, [pc, #280]	; (8001440 <HAL_ADC_ConfigChannel+0x3ac>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d003      	beq.n	8001332 <HAL_ADC_ConfigChannel+0x29e>
 800132a:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800132e:	4293      	cmp	r3, r2
 8001330:	d1cc      	bne.n	80012cc <HAL_ADC_ConfigChannel+0x238>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001332:	68a3      	ldr	r3, [r4, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001334:	4a43      	ldr	r2, [pc, #268]	; (8001444 <HAL_ADC_ConfigChannel+0x3b0>)
 8001336:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 800133a:	4333      	orrs	r3, r6
 800133c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001340:	60a3      	str	r3, [r4, #8]
 8001342:	4b41      	ldr	r3, [pc, #260]	; (8001448 <HAL_ADC_ConfigChannel+0x3b4>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	fbb3 f2f2 	udiv	r2, r3, r2
 800134a:	230c      	movs	r3, #12
 800134c:	4353      	muls	r3, r2
            wait_loop_index--;
 800134e:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0UL)
 8001350:	9b01      	ldr	r3, [sp, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d0ba      	beq.n	80012cc <HAL_ADC_ConfigChannel+0x238>
            wait_loop_index--;
 8001356:	9b01      	ldr	r3, [sp, #4]
 8001358:	3b01      	subs	r3, #1
 800135a:	e7f8      	b.n	800134e <HAL_ADC_ConfigChannel+0x2ba>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800135c:	4b3b      	ldr	r3, [pc, #236]	; (800144c <HAL_ADC_ConfigChannel+0x3b8>)
 800135e:	429a      	cmp	r2, r3
 8001360:	d111      	bne.n	8001386 <HAL_ADC_ConfigChannel+0x2f2>
 8001362:	01c3      	lsls	r3, r0, #7
 8001364:	d4b2      	bmi.n	80012cc <HAL_ADC_ConfigChannel+0x238>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001366:	682b      	ldr	r3, [r5, #0]
 8001368:	4a35      	ldr	r2, [pc, #212]	; (8001440 <HAL_ADC_ConfigChannel+0x3ac>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d003      	beq.n	8001376 <HAL_ADC_ConfigChannel+0x2e2>
 800136e:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8001372:	4293      	cmp	r3, r2
 8001374:	d1aa      	bne.n	80012cc <HAL_ADC_ConfigChannel+0x238>
 8001376:	68a3      	ldr	r3, [r4, #8]
 8001378:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 800137c:	4333      	orrs	r3, r6
 800137e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001382:	60a3      	str	r3, [r4, #8]
 8001384:	e7a2      	b.n	80012cc <HAL_ADC_ConfigChannel+0x238>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001386:	4b32      	ldr	r3, [pc, #200]	; (8001450 <HAL_ADC_ConfigChannel+0x3bc>)
 8001388:	429a      	cmp	r2, r3
 800138a:	d19f      	bne.n	80012cc <HAL_ADC_ConfigChannel+0x238>
 800138c:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8001390:	d19c      	bne.n	80012cc <HAL_ADC_ConfigChannel+0x238>
        if (ADC_VREFINT_INSTANCE(hadc))
 8001392:	682a      	ldr	r2, [r5, #0]
 8001394:	4b2a      	ldr	r3, [pc, #168]	; (8001440 <HAL_ADC_ConfigChannel+0x3ac>)
 8001396:	429a      	cmp	r2, r3
 8001398:	d198      	bne.n	80012cc <HAL_ADC_ConfigChannel+0x238>
 800139a:	688b      	ldr	r3, [r1, #8]
 800139c:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80013a0:	4333      	orrs	r3, r6
 80013a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013a6:	608b      	str	r3, [r1, #8]
 80013a8:	e791      	b.n	80012ce <HAL_ADC_ConfigChannel+0x23a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013aa:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 80013ac:	f042 0220 	orr.w	r2, r2, #32
 80013b0:	656a      	str	r2, [r5, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80013b2:	4618      	mov	r0, r3
 80013b4:	e78b      	b.n	80012ce <HAL_ADC_ConfigChannel+0x23a>
  __HAL_LOCK(hadc);
 80013b6:	2002      	movs	r0, #2
 80013b8:	e78c      	b.n	80012d4 <HAL_ADC_ConfigChannel+0x240>
    if (   (tmp_adc_is_conversion_on_going_regular == 0UL)
 80013ba:	2800      	cmp	r0, #0
 80013bc:	f47f aea5 	bne.w	800110a <HAL_ADC_ConfigChannel+0x76>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80013c0:	68a2      	ldr	r2, [r4, #8]
 80013c2:	6821      	ldr	r1, [r4, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fcef 	bl	8000da8 <LL_ADC_SetChannelSamplingTime>
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80013ca:	6926      	ldr	r6, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80013cc:	f8d5 e000 	ldr.w	lr, [r5]
 80013d0:	6823      	ldr	r3, [r4, #0]
 80013d2:	f8de 100c 	ldr.w	r1, [lr, #12]
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80013d6:	2e04      	cmp	r6, #4
 80013d8:	f10e 0260 	add.w	r2, lr, #96	; 0x60
 80013dc:	f43f aedb 	beq.w	8001196 <HAL_ADC_ConfigChannel+0x102>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80013e0:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 80013e4:	0048      	lsls	r0, r1, #1
 80013e6:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(*preg,
 80013e8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 80013ec:	4081      	lsls	r1, r0
 80013ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80013f2:	4319      	orrs	r1, r3
 80013f4:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 80013f8:	4b16      	ldr	r3, [pc, #88]	; (8001454 <HAL_ADC_ConfigChannel+0x3c0>)
 80013fa:	4003      	ands	r3, r0
 80013fc:	4319      	orrs	r1, r3
 80013fe:	f842 1026 	str.w	r1, [r2, r6, lsl #2]
 8001402:	e682      	b.n	800110a <HAL_ADC_ConfigChannel+0x76>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001404:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001408:	f3c1 6084 	ubfx	r0, r1, #26, #5
 800140c:	e6de      	b.n	80011cc <HAL_ADC_ConfigChannel+0x138>
 800140e:	6891      	ldr	r1, [r2, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001410:	6823      	ldr	r3, [r4, #0]
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001412:	f102 0608 	add.w	r6, r2, #8
 8001416:	f3c1 6084 	ubfx	r0, r1, #26, #5
 800141a:	e6e8      	b.n	80011ee <HAL_ADC_ConfigChannel+0x15a>
 800141c:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001420:	68d2      	ldr	r2, [r2, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001422:	6823      	ldr	r3, [r4, #0]
 8001424:	f3c2 6184 	ubfx	r1, r2, #26, #5
 8001428:	e6f2      	b.n	8001210 <HAL_ADC_ConfigChannel+0x17c>
 800142a:	bf00      	nop
 800142c:	0007ffff 	.word	0x0007ffff
 8001430:	407f0000 	.word	0x407f0000
 8001434:	80080000 	.word	0x80080000
 8001438:	50040300 	.word	0x50040300
 800143c:	c7520000 	.word	0xc7520000
 8001440:	50040000 	.word	0x50040000
 8001444:	00030d40 	.word	0x00030d40
 8001448:	20000000 	.word	0x20000000
 800144c:	cb840000 	.word	0xcb840000
 8001450:	80000001 	.word	0x80000001
 8001454:	03fff000 	.word	0x03fff000

08001458 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001458:	b570      	push	{r4, r5, r6, lr}
 800145a:	4604      	mov	r4, r0
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800145c:	6800      	ldr	r0, [r0, #0]
 800145e:	f7ff fcb5 	bl	8000dcc <LL_ADC_IsEnabled>
 8001462:	b108      	cbz	r0, 8001468 <ADC_Enable+0x10>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001464:	2000      	movs	r0, #0
 8001466:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001468:	6822      	ldr	r2, [r4, #0]
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <ADC_Enable+0x68>)
 800146c:	6891      	ldr	r1, [r2, #8]
 800146e:	4219      	tst	r1, r3
 8001470:	d009      	beq.n	8001486 <ADC_Enable+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001472:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001474:	f043 0310 	orr.w	r3, r3, #16
 8001478:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800147a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8001482:	2001      	movs	r0, #1
 8001484:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8001486:	6893      	ldr	r3, [r2, #8]
 8001488:	4d0e      	ldr	r5, [pc, #56]	; (80014c4 <ADC_Enable+0x6c>)
 800148a:	402b      	ands	r3, r5
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8001492:	f7ff fc75 	bl	8000d80 <HAL_GetTick>
 8001496:	4606      	mov	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001498:	6820      	ldr	r0, [r4, #0]
 800149a:	6803      	ldr	r3, [r0, #0]
 800149c:	07db      	lsls	r3, r3, #31
 800149e:	d4e1      	bmi.n	8001464 <ADC_Enable+0xc>
      if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014a0:	f7ff fc94 	bl	8000dcc <LL_ADC_IsEnabled>
 80014a4:	b928      	cbnz	r0, 80014b2 <ADC_Enable+0x5a>
        LL_ADC_Enable(hadc->Instance);
 80014a6:	6822      	ldr	r2, [r4, #0]
 80014a8:	6893      	ldr	r3, [r2, #8]
 80014aa:	402b      	ands	r3, r5
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6093      	str	r3, [r2, #8]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80014b2:	f7ff fc65 	bl	8000d80 <HAL_GetTick>
 80014b6:	1b80      	subs	r0, r0, r6
 80014b8:	2802      	cmp	r0, #2
 80014ba:	d9ed      	bls.n	8001498 <ADC_Enable+0x40>
 80014bc:	e7d9      	b.n	8001472 <ADC_Enable+0x1a>
 80014be:	bf00      	nop
 80014c0:	8000003f 	.word	0x8000003f
 80014c4:	7fffffc0 	.word	0x7fffffc0

080014c8 <HAL_ADC_Start>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80014c8:	4b35      	ldr	r3, [pc, #212]	; (80015a0 <HAL_ADC_Start+0xd8>)
{
 80014ca:	b570      	push	{r4, r5, r6, lr}
 80014cc:	4604      	mov	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014ce:	6800      	ldr	r0, [r0, #0]
 80014d0:	689e      	ldr	r6, [r3, #8]
 80014d2:	f7ff fc7f 	bl	8000dd4 <LL_ADC_REG_IsConversionOngoing>
 80014d6:	4605      	mov	r5, r0
 80014d8:	2800      	cmp	r0, #0
 80014da:	d15a      	bne.n	8001592 <HAL_ADC_Start+0xca>
    __HAL_LOCK(hadc);
 80014dc:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d056      	beq.n	8001592 <HAL_ADC_Start+0xca>
 80014e4:	2301      	movs	r3, #1
 80014e6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    tmp_hal_status = ADC_Enable(hadc);
 80014ea:	4620      	mov	r0, r4
 80014ec:	f7ff ffb4 	bl	8001458 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80014f0:	2800      	cmp	r0, #0
 80014f2:	d14b      	bne.n	800158c <HAL_ADC_Start+0xc4>
      ADC_STATE_CLR_SET(hadc->State,
 80014f4:	6d63      	ldr	r3, [r4, #84]	; 0x54
      if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80014f6:	4a2b      	ldr	r2, [pc, #172]	; (80015a4 <HAL_ADC_Start+0xdc>)
      ADC_STATE_CLR_SET(hadc->State,
 80014f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80014fc:	f023 0301 	bic.w	r3, r3, #1
 8001500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001504:	6563      	str	r3, [r4, #84]	; 0x54
      if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001506:	6823      	ldr	r3, [r4, #0]
 8001508:	4293      	cmp	r3, r2
 800150a:	f006 061f 	and.w	r6, r6, #31
 800150e:	d042      	beq.n	8001596 <HAL_ADC_Start+0xce>
 8001510:	461d      	mov	r5, r3
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001512:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001514:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001518:	6562      	str	r2, [r4, #84]	; 0x54
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800151a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800151c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001520:	bf1c      	itt	ne
 8001522:	6da2      	ldrne	r2, [r4, #88]	; 0x58
 8001524:	f022 0206 	bicne.w	r2, r2, #6
        ADC_CLEAR_ERRORCODE(hadc); 
 8001528:	65a2      	str	r2, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800152a:	221c      	movs	r2, #28
 800152c:	601a      	str	r2, [r3, #0]
      if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800152e:	42ab      	cmp	r3, r5
      __HAL_UNLOCK(hadc);
 8001530:	f04f 0200 	mov.w	r2, #0
 8001534:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
      if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001538:	d008      	beq.n	800154c <HAL_ADC_Start+0x84>
           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800153a:	2e09      	cmp	r6, #9
 800153c:	bf9d      	ittte	ls
 800153e:	f240 2221 	movwls	r2, #545	; 0x221
 8001542:	40f2      	lsrls	r2, r6
 8001544:	43d2      	mvnls	r2, r2
 8001546:	2201      	movhi	r2, #1
 8001548:	07d1      	lsls	r1, r2, #31
 800154a:	d411      	bmi.n	8001570 <HAL_ADC_Start+0xa8>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800154c:	68da      	ldr	r2, [r3, #12]
 800154e:	0192      	lsls	r2, r2, #6
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001550:	bf41      	itttt	mi
 8001552:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8001554:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8001558:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 800155c:	6562      	strmi	r2, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 800155e:	689a      	ldr	r2, [r3, #8]
 8001560:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001564:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001568:	f042 0204 	orr.w	r2, r2, #4
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	bd70      	pop	{r4, r5, r6, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001570:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001572:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001576:	6563      	str	r3, [r4, #84]	; 0x54
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001578:	68eb      	ldr	r3, [r5, #12]
 800157a:	019b      	lsls	r3, r3, #6
 800157c:	d50f      	bpl.n	800159e <HAL_ADC_Start+0xd6>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800157e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001580:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001584:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001588:	6563      	str	r3, [r4, #84]	; 0x54
 800158a:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UNLOCK(hadc);
 800158c:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8001590:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = HAL_BUSY;
 8001592:	2002      	movs	r0, #2
 8001594:	bd70      	pop	{r4, r5, r6, pc}
      if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001596:	4d04      	ldr	r5, [pc, #16]	; (80015a8 <HAL_ADC_Start+0xe0>)
           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001598:	2e00      	cmp	r6, #0
 800159a:	d0ba      	beq.n	8001512 <HAL_ADC_Start+0x4a>
 800159c:	e7bd      	b.n	800151a <HAL_ADC_Start+0x52>
}
 800159e:	bd70      	pop	{r4, r5, r6, pc}
 80015a0:	50040300 	.word	0x50040300
 80015a4:	50040100 	.word	0x50040100
 80015a8:	50040000 	.word	0x50040000

080015ac <LL_ADC_IsEnabled>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80015ac:	6880      	ldr	r0, [r0, #8]
}
 80015ae:	f000 0001 	and.w	r0, r0, #1
 80015b2:	4770      	bx	lr

080015b4 <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80015b4:	6880      	ldr	r0, [r0, #8]
}
 80015b6:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80015ba:	4770      	bx	lr

080015bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80015bc:	b530      	push	{r4, r5, lr}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015be:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80015c2:	2b01      	cmp	r3, #1
{
 80015c4:	b09b      	sub	sp, #108	; 0x6c
 80015c6:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 80015c8:	d066      	beq.n	8001698 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
 80015ca:	2301      	movs	r3, #1
 80015cc:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80015d0:	4b32      	ldr	r3, [pc, #200]	; (800169c <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 80015d2:	6800      	ldr	r0, [r0, #0]
 80015d4:	4298      	cmp	r0, r3
 80015d6:	bf0c      	ite	eq
 80015d8:	f503 7380 	addeq.w	r3, r3, #256	; 0x100
 80015dc:	2300      	movne	r3, #0
 80015de:	9301      	str	r3, [sp, #4]
  
  if (tmphadcSlave.Instance == NULL)
 80015e0:	9801      	ldr	r0, [sp, #4]
 80015e2:	b940      	cbnz	r0, 80015f6 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015e4:	6d53      	ldr	r3, [r2, #84]	; 0x54
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80015e6:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015ea:	f043 0320 	orr.w	r3, r3, #32
 80015ee:	6553      	str	r3, [r2, #84]	; 0x54
    
    return HAL_ERROR;
 80015f0:	2001      	movs	r0, #1
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return tmp_hal_status;
} 
 80015f2:	b01b      	add	sp, #108	; 0x6c
 80015f4:	bd30      	pop	{r4, r5, pc}
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80015f6:	f7ff ffdd 	bl	80015b4 <LL_ADC_REG_IsConversionOngoing>
 80015fa:	4603      	mov	r3, r0
  if ( (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL) 
 80015fc:	6810      	ldr	r0, [r2, #0]
 80015fe:	f7ff ffd9 	bl	80015b4 <LL_ADC_REG_IsConversionOngoing>
 8001602:	2800      	cmp	r0, #0
 8001604:	d142      	bne.n	800168c <HAL_ADCEx_MultiModeConfigChannel+0xd0>
    && (tmphadcSlave_conversion_on_going == 0UL) )
 8001606:	2b00      	cmp	r3, #0
 8001608:	d140      	bne.n	800168c <HAL_ADCEx_MultiModeConfigChannel+0xd0>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800160a:	680b      	ldr	r3, [r1, #0]
 800160c:	4c24      	ldr	r4, [pc, #144]	; (80016a0 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 800160e:	b333      	cbz	r3, 800165e <HAL_ADCEx_MultiModeConfigChannel+0xa2>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG, 
 8001610:	68a3      	ldr	r3, [r4, #8]
 8001612:	6848      	ldr	r0, [r1, #4]
 8001614:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001618:	4303      	orrs	r3, r0
 800161a:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
 800161e:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
 8001622:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001624:	481d      	ldr	r0, [pc, #116]	; (800169c <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 8001626:	f7ff ffc1 	bl	80015ac <LL_ADC_IsEnabled>
 800162a:	4603      	mov	r3, r0
 800162c:	481d      	ldr	r0, [pc, #116]	; (80016a4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>)
 800162e:	f7ff ffbd 	bl	80015ac <LL_ADC_IsEnabled>
 8001632:	4303      	orrs	r3, r0
 8001634:	481c      	ldr	r0, [pc, #112]	; (80016a8 <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 8001636:	f7ff ffb9 	bl	80015ac <LL_ADC_IsEnabled>
 800163a:	4318      	orrs	r0, r3
 800163c:	d004      	beq.n	8001648 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800163e:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8001640:	2300      	movs	r3, #0
 8001642:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
  return tmp_hal_status;
 8001646:	e7d4      	b.n	80015f2 <HAL_ADCEx_MultiModeConfigChannel+0x36>
          MODIFY_REG(tmpADC_Common->CCR,
 8001648:	680b      	ldr	r3, [r1, #0]
 800164a:	68a5      	ldr	r5, [r4, #8]
 800164c:	6889      	ldr	r1, [r1, #8]
 800164e:	430b      	orrs	r3, r1
 8001650:	f425 6171 	bic.w	r1, r5, #3856	; 0xf10
 8001654:	f021 010f 	bic.w	r1, r1, #15
 8001658:	430b      	orrs	r3, r1
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800165a:	60a3      	str	r3, [r4, #8]
 800165c:	e7f0      	b.n	8001640 <HAL_ADCEx_MultiModeConfigChannel+0x84>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800165e:	68a3      	ldr	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001660:	480e      	ldr	r0, [pc, #56]	; (800169c <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001662:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001666:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001668:	f7ff ffa0 	bl	80015ac <LL_ADC_IsEnabled>
 800166c:	4603      	mov	r3, r0
 800166e:	480d      	ldr	r0, [pc, #52]	; (80016a4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>)
 8001670:	f7ff ff9c 	bl	80015ac <LL_ADC_IsEnabled>
 8001674:	4303      	orrs	r3, r0
 8001676:	480c      	ldr	r0, [pc, #48]	; (80016a8 <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 8001678:	f7ff ff98 	bl	80015ac <LL_ADC_IsEnabled>
 800167c:	4318      	orrs	r0, r3
 800167e:	d1de      	bne.n	800163e <HAL_ADCEx_MultiModeConfigChannel+0x82>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001680:	68a3      	ldr	r3, [r4, #8]
 8001682:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001686:	f023 030f 	bic.w	r3, r3, #15
 800168a:	e7e6      	b.n	800165a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800168c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800168e:	f043 0320 	orr.w	r3, r3, #32
 8001692:	6553      	str	r3, [r2, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8001694:	2001      	movs	r0, #1
 8001696:	e7d3      	b.n	8001640 <HAL_ADCEx_MultiModeConfigChannel+0x84>
  __HAL_LOCK(hadc);
 8001698:	2002      	movs	r0, #2
 800169a:	e7aa      	b.n	80015f2 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 800169c:	50040000 	.word	0x50040000
 80016a0:	50040300 	.word	0x50040300
 80016a4:	50040100 	.word	0x50040100
 80016a8:	50040200 	.word	0x50040200

080016ac <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016ac:	4a07      	ldr	r2, [pc, #28]	; (80016cc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80016ae:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016b0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80016b4:	041b      	lsls	r3, r3, #16
 80016b6:	0c1b      	lsrs	r3, r3, #16
 80016b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80016bc:	0200      	lsls	r0, r0, #8
 80016be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80016c6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80016c8:	60d3      	str	r3, [r2, #12]
 80016ca:	4770      	bx	lr
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d0:	4b17      	ldr	r3, [pc, #92]	; (8001730 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d2:	b530      	push	{r4, r5, lr}
 80016d4:	68dc      	ldr	r4, [r3, #12]
 80016d6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016da:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016de:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e0:	2b04      	cmp	r3, #4
 80016e2:	bf28      	it	cs
 80016e4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e8:	f04f 0501 	mov.w	r5, #1
 80016ec:	fa05 f303 	lsl.w	r3, r5, r3
 80016f0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f4:	bf8c      	ite	hi
 80016f6:	3c03      	subhi	r4, #3
 80016f8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016fa:	4019      	ands	r1, r3
 80016fc:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016fe:	fa05 f404 	lsl.w	r4, r5, r4
 8001702:	3c01      	subs	r4, #1
 8001704:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001706:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001708:	ea42 0201 	orr.w	r2, r2, r1
 800170c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001710:	bfaf      	iteee	ge
 8001712:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001716:	f000 000f 	andlt.w	r0, r0, #15
 800171a:	4b06      	ldrlt	r3, [pc, #24]	; (8001734 <HAL_NVIC_SetPriority+0x64>)
 800171c:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171e:	bfa5      	ittet	ge
 8001720:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001724:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001726:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001728:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800172c:	bd30      	pop	{r4, r5, pc}
 800172e:	bf00      	nop
 8001730:	e000ed00 	.word	0xe000ed00
 8001734:	e000ed14 	.word	0xe000ed14

08001738 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001738:	3801      	subs	r0, #1
 800173a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800173e:	d20a      	bcs.n	8001756 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001742:	4a07      	ldr	r2, [pc, #28]	; (8001760 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001744:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001746:	21f0      	movs	r1, #240	; 0xf0
 8001748:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800174c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800174e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001750:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001756:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	e000e010 	.word	0xe000e010
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001768:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800176a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800176c:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001918 <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001770:	4c67      	ldr	r4, [pc, #412]	; (8001910 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001772:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 8001774:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001776:	9a01      	ldr	r2, [sp, #4]
 8001778:	40da      	lsrs	r2, r3
 800177a:	d102      	bne.n	8001782 <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 800177c:	b005      	add	sp, #20
 800177e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001782:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 8001784:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001786:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 8001788:	ea12 0e06 	ands.w	lr, r2, r6
 800178c:	f000 80b1 	beq.w	80018f2 <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001790:	684a      	ldr	r2, [r1, #4]
 8001792:	f022 0710 	bic.w	r7, r2, #16
 8001796:	2f02      	cmp	r7, #2
 8001798:	d116      	bne.n	80017c8 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 800179a:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 800179e:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017a2:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80017a6:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017aa:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80017ae:	f04f 0c0f 	mov.w	ip, #15
 80017b2:	fa0c fc0a 	lsl.w	ip, ip, sl
 80017b6:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017ba:	690d      	ldr	r5, [r1, #16]
 80017bc:	fa05 f50a 	lsl.w	r5, r5, sl
 80017c0:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 80017c4:	f8c9 5020 	str.w	r5, [r9, #32]
 80017c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017cc:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80017ce:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017d2:	fa05 f50c 	lsl.w	r5, r5, ip
 80017d6:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017d8:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017dc:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017e0:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017e4:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017e6:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017ea:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80017ec:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017f0:	d811      	bhi.n	8001816 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80017f2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017f4:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017f8:	68cf      	ldr	r7, [r1, #12]
 80017fa:	fa07 f70c 	lsl.w	r7, r7, ip
 80017fe:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8001802:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001804:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001806:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800180a:	f3c2 1700 	ubfx	r7, r2, #4, #1
 800180e:	409f      	lsls	r7, r3
 8001810:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8001814:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001816:	f1ba 0f03 	cmp.w	sl, #3
 800181a:	d107      	bne.n	800182c <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 800181c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800181e:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001822:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 8001826:	409f      	lsls	r7, r3
 8001828:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 800182a:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 800182c:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800182e:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001830:	688e      	ldr	r6, [r1, #8]
 8001832:	fa06 f60c 	lsl.w	r6, r6, ip
 8001836:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8001838:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800183a:	00d5      	lsls	r5, r2, #3
 800183c:	d559      	bpl.n	80018f2 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183e:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8001842:	f045 0501 	orr.w	r5, r5, #1
 8001846:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 800184a:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 800184e:	f023 0603 	bic.w	r6, r3, #3
 8001852:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001856:	f005 0501 	and.w	r5, r5, #1
 800185a:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 800185e:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001860:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001864:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001866:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001868:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800186c:	270f      	movs	r7, #15
 800186e:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001872:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001876:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800187a:	d03c      	beq.n	80018f6 <HAL_GPIO_Init+0x192>
 800187c:	4d25      	ldr	r5, [pc, #148]	; (8001914 <HAL_GPIO_Init+0x1b0>)
 800187e:	42a8      	cmp	r0, r5
 8001880:	d03b      	beq.n	80018fa <HAL_GPIO_Init+0x196>
 8001882:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001886:	42a8      	cmp	r0, r5
 8001888:	d039      	beq.n	80018fe <HAL_GPIO_Init+0x19a>
 800188a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800188e:	42a8      	cmp	r0, r5
 8001890:	d037      	beq.n	8001902 <HAL_GPIO_Init+0x19e>
 8001892:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001896:	42a8      	cmp	r0, r5
 8001898:	d035      	beq.n	8001906 <HAL_GPIO_Init+0x1a2>
 800189a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800189e:	42a8      	cmp	r0, r5
 80018a0:	d033      	beq.n	800190a <HAL_GPIO_Init+0x1a6>
 80018a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80018a6:	42a8      	cmp	r0, r5
 80018a8:	bf14      	ite	ne
 80018aa:	2507      	movne	r5, #7
 80018ac:	2506      	moveq	r5, #6
 80018ae:	fa05 f50c 	lsl.w	r5, r5, ip
 80018b2:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018b4:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 80018b6:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80018b8:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018bc:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 80018be:	bf54      	ite	pl
 80018c0:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80018c2:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 80018c6:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 80018c8:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018ca:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 80018cc:	bf54      	ite	pl
 80018ce:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80018d0:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 80018d4:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 80018d6:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018d8:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 80018da:	bf54      	ite	pl
 80018dc:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80018de:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 80018e2:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 80018e4:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018e6:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 80018e8:	bf54      	ite	pl
 80018ea:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80018ec:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 80018f0:	60e5      	str	r5, [r4, #12]
    position++;
 80018f2:	3301      	adds	r3, #1
 80018f4:	e73f      	b.n	8001776 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018f6:	2500      	movs	r5, #0
 80018f8:	e7d9      	b.n	80018ae <HAL_GPIO_Init+0x14a>
 80018fa:	2501      	movs	r5, #1
 80018fc:	e7d7      	b.n	80018ae <HAL_GPIO_Init+0x14a>
 80018fe:	2502      	movs	r5, #2
 8001900:	e7d5      	b.n	80018ae <HAL_GPIO_Init+0x14a>
 8001902:	2503      	movs	r5, #3
 8001904:	e7d3      	b.n	80018ae <HAL_GPIO_Init+0x14a>
 8001906:	2504      	movs	r5, #4
 8001908:	e7d1      	b.n	80018ae <HAL_GPIO_Init+0x14a>
 800190a:	2505      	movs	r5, #5
 800190c:	e7cf      	b.n	80018ae <HAL_GPIO_Init+0x14a>
 800190e:	bf00      	nop
 8001910:	40010400 	.word	0x40010400
 8001914:	48000400 	.word	0x48000400
 8001918:	40021000 	.word	0x40021000

0800191c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800191c:	b10a      	cbz	r2, 8001922 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800191e:	6181      	str	r1, [r0, #24]
 8001920:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001922:	6281      	str	r1, [r0, #40]	; 0x28
 8001924:	4770      	bx	lr

08001926 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001926:	6803      	ldr	r3, [r0, #0]
 8001928:	699a      	ldr	r2, [r3, #24]
 800192a:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 800192c:	bf44      	itt	mi
 800192e:	2200      	movmi	r2, #0
 8001930:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001932:	699a      	ldr	r2, [r3, #24]
 8001934:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001936:	bf5e      	ittt	pl
 8001938:	699a      	ldrpl	r2, [r3, #24]
 800193a:	f042 0201 	orrpl.w	r2, r2, #1
 800193e:	619a      	strpl	r2, [r3, #24]
 8001940:	4770      	bx	lr

08001942 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001942:	b530      	push	{r4, r5, lr}
 8001944:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001946:	6805      	ldr	r5, [r0, #0]
 8001948:	4323      	orrs	r3, r4
 800194a:	0d64      	lsrs	r4, r4, #21
 800194c:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8001950:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8001954:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8001958:	6868      	ldr	r0, [r5, #4]
 800195a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800195e:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8001962:	4319      	orrs	r1, r3
 8001964:	f044 0403 	orr.w	r4, r4, #3
 8001968:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800196c:	ea20 0404 	bic.w	r4, r0, r4
 8001970:	4321      	orrs	r1, r4
 8001972:	6069      	str	r1, [r5, #4]
 8001974:	bd30      	pop	{r4, r5, pc}

08001976 <I2C_WaitOnFlagUntilTimeout>:
{
 8001976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800197a:	9f06      	ldr	r7, [sp, #24]
 800197c:	4604      	mov	r4, r0
 800197e:	4688      	mov	r8, r1
 8001980:	4616      	mov	r6, r2
 8001982:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001984:	6822      	ldr	r2, [r4, #0]
 8001986:	6993      	ldr	r3, [r2, #24]
 8001988:	ea38 0303 	bics.w	r3, r8, r3
 800198c:	bf0c      	ite	eq
 800198e:	2301      	moveq	r3, #1
 8001990:	2300      	movne	r3, #0
 8001992:	42b3      	cmp	r3, r6
 8001994:	d002      	beq.n	800199c <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8001996:	2000      	movs	r0, #0
}
 8001998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800199c:	1c6b      	adds	r3, r5, #1
 800199e:	d0f2      	beq.n	8001986 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019a0:	f7ff f9ee 	bl	8000d80 <HAL_GetTick>
 80019a4:	1bc0      	subs	r0, r0, r7
 80019a6:	4285      	cmp	r5, r0
 80019a8:	d301      	bcc.n	80019ae <I2C_WaitOnFlagUntilTimeout+0x38>
 80019aa:	2d00      	cmp	r5, #0
 80019ac:	d1ea      	bne.n	8001984 <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80019b0:	f043 0320 	orr.w	r3, r3, #32
 80019b4:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80019b6:	2320      	movs	r3, #32
 80019b8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80019bc:	2300      	movs	r3, #0
 80019be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80019c2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80019c6:	2001      	movs	r0, #1
 80019c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080019cc <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80019cc:	6803      	ldr	r3, [r0, #0]
{
 80019ce:	b570      	push	{r4, r5, r6, lr}
 80019d0:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80019d2:	6998      	ldr	r0, [r3, #24]
 80019d4:	f010 0010 	ands.w	r0, r0, #16
{
 80019d8:	460d      	mov	r5, r1
 80019da:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80019dc:	d116      	bne.n	8001a0c <I2C_IsAcknowledgeFailed+0x40>
 80019de:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 80019e0:	1c69      	adds	r1, r5, #1
 80019e2:	d014      	beq.n	8001a0e <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019e4:	f7ff f9cc 	bl	8000d80 <HAL_GetTick>
 80019e8:	1b80      	subs	r0, r0, r6
 80019ea:	4285      	cmp	r5, r0
 80019ec:	d300      	bcc.n	80019f0 <I2C_IsAcknowledgeFailed+0x24>
 80019ee:	b96d      	cbnz	r5, 8001a0c <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80019f2:	f043 0320 	orr.w	r3, r3, #32
 80019f6:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80019f8:	2320      	movs	r3, #32
 80019fa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019fe:	2300      	movs	r3, #0
 8001a00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001a04:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8001a08:	2001      	movs	r0, #1
}
 8001a0a:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a0c:	6823      	ldr	r3, [r4, #0]
 8001a0e:	6999      	ldr	r1, [r3, #24]
 8001a10:	068a      	lsls	r2, r1, #26
 8001a12:	d5e5      	bpl.n	80019e0 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a14:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a16:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a18:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001a1a:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a1c:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001a1e:	f7ff ff82 	bl	8001926 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001a22:	6822      	ldr	r2, [r4, #0]
 8001a24:	6853      	ldr	r3, [r2, #4]
 8001a26:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001a2a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001a2e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001a32:	f023 0301 	bic.w	r3, r3, #1
 8001a36:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001a38:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a3a:	f043 0304 	orr.w	r3, r3, #4
 8001a3e:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001a40:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 8001a44:	e7db      	b.n	80019fe <I2C_IsAcknowledgeFailed+0x32>

08001a46 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001a46:	b570      	push	{r4, r5, r6, lr}
 8001a48:	4604      	mov	r4, r0
 8001a4a:	460d      	mov	r5, r1
 8001a4c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a4e:	6823      	ldr	r3, [r4, #0]
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	079b      	lsls	r3, r3, #30
 8001a54:	d501      	bpl.n	8001a5a <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8001a56:	2000      	movs	r0, #0
 8001a58:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a5a:	4632      	mov	r2, r6
 8001a5c:	4629      	mov	r1, r5
 8001a5e:	4620      	mov	r0, r4
 8001a60:	f7ff ffb4 	bl	80019cc <I2C_IsAcknowledgeFailed>
 8001a64:	b9a0      	cbnz	r0, 8001a90 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8001a66:	1c6a      	adds	r2, r5, #1
 8001a68:	d0f1      	beq.n	8001a4e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a6a:	f7ff f989 	bl	8000d80 <HAL_GetTick>
 8001a6e:	1b80      	subs	r0, r0, r6
 8001a70:	4285      	cmp	r5, r0
 8001a72:	d301      	bcc.n	8001a78 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8001a74:	2d00      	cmp	r5, #0
 8001a76:	d1ea      	bne.n	8001a4e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a78:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a7a:	f043 0320 	orr.w	r3, r3, #32
 8001a7e:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001a80:	2320      	movs	r3, #32
 8001a82:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a86:	2300      	movs	r3, #0
 8001a88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001a8c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001a90:	2001      	movs	r0, #1
}
 8001a92:	bd70      	pop	{r4, r5, r6, pc}

08001a94 <I2C_RequestMemoryWrite>:
{
 8001a94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001a96:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8001a98:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001a9a:	4b16      	ldr	r3, [pc, #88]	; (8001af4 <I2C_RequestMemoryWrite+0x60>)
 8001a9c:	9300      	str	r3, [sp, #0]
{
 8001a9e:	4605      	mov	r5, r0
 8001aa0:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001aa2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001aa6:	b2fa      	uxtb	r2, r7
 8001aa8:	f7ff ff4b 	bl	8001942 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001aac:	4632      	mov	r2, r6
 8001aae:	9908      	ldr	r1, [sp, #32]
 8001ab0:	4628      	mov	r0, r5
 8001ab2:	f7ff ffc8 	bl	8001a46 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ab6:	b110      	cbz	r0, 8001abe <I2C_RequestMemoryWrite+0x2a>
    return HAL_ERROR;
 8001ab8:	2001      	movs	r0, #1
}
 8001aba:	b003      	add	sp, #12
 8001abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001abe:	2f01      	cmp	r7, #1
 8001ac0:	682b      	ldr	r3, [r5, #0]
 8001ac2:	d10c      	bne.n	8001ade <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ac4:	b2e4      	uxtb	r4, r4
 8001ac6:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001ac8:	9b08      	ldr	r3, [sp, #32]
 8001aca:	9600      	str	r6, [sp, #0]
 8001acc:	2200      	movs	r2, #0
 8001ace:	2180      	movs	r1, #128	; 0x80
 8001ad0:	4628      	mov	r0, r5
 8001ad2:	f7ff ff50 	bl	8001976 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8001ad6:	3000      	adds	r0, #0
 8001ad8:	bf18      	it	ne
 8001ada:	2001      	movne	r0, #1
 8001adc:	e7ed      	b.n	8001aba <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001ade:	0a22      	lsrs	r2, r4, #8
 8001ae0:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ae2:	9908      	ldr	r1, [sp, #32]
 8001ae4:	4632      	mov	r2, r6
 8001ae6:	4628      	mov	r0, r5
 8001ae8:	f7ff ffad 	bl	8001a46 <I2C_WaitOnTXISFlagUntilTimeout>
 8001aec:	2800      	cmp	r0, #0
 8001aee:	d1e3      	bne.n	8001ab8 <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001af0:	682b      	ldr	r3, [r5, #0]
 8001af2:	e7e7      	b.n	8001ac4 <I2C_RequestMemoryWrite+0x30>
 8001af4:	80002000 	.word	0x80002000

08001af8 <I2C_RequestMemoryRead>:
{
 8001af8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001afa:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8001afc:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001afe:	4b16      	ldr	r3, [pc, #88]	; (8001b58 <I2C_RequestMemoryRead+0x60>)
 8001b00:	9300      	str	r3, [sp, #0]
{
 8001b02:	4605      	mov	r5, r0
 8001b04:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001b06:	2300      	movs	r3, #0
 8001b08:	b2fa      	uxtb	r2, r7
 8001b0a:	f7ff ff1a 	bl	8001942 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b0e:	4632      	mov	r2, r6
 8001b10:	9908      	ldr	r1, [sp, #32]
 8001b12:	4628      	mov	r0, r5
 8001b14:	f7ff ff97 	bl	8001a46 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b18:	b110      	cbz	r0, 8001b20 <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 8001b1a:	2001      	movs	r0, #1
}
 8001b1c:	b003      	add	sp, #12
 8001b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b20:	2f01      	cmp	r7, #1
 8001b22:	682b      	ldr	r3, [r5, #0]
 8001b24:	d10c      	bne.n	8001b40 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b26:	b2e4      	uxtb	r4, r4
 8001b28:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001b2a:	9b08      	ldr	r3, [sp, #32]
 8001b2c:	9600      	str	r6, [sp, #0]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2140      	movs	r1, #64	; 0x40
 8001b32:	4628      	mov	r0, r5
 8001b34:	f7ff ff1f 	bl	8001976 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8001b38:	3000      	adds	r0, #0
 8001b3a:	bf18      	it	ne
 8001b3c:	2001      	movne	r0, #1
 8001b3e:	e7ed      	b.n	8001b1c <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001b40:	0a22      	lsrs	r2, r4, #8
 8001b42:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b44:	9908      	ldr	r1, [sp, #32]
 8001b46:	4632      	mov	r2, r6
 8001b48:	4628      	mov	r0, r5
 8001b4a:	f7ff ff7c 	bl	8001a46 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b4e:	2800      	cmp	r0, #0
 8001b50:	d1e3      	bne.n	8001b1a <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b52:	682b      	ldr	r3, [r5, #0]
 8001b54:	e7e7      	b.n	8001b26 <I2C_RequestMemoryRead+0x2e>
 8001b56:	bf00      	nop
 8001b58:	80002000 	.word	0x80002000

08001b5c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001b5c:	b570      	push	{r4, r5, r6, lr}
 8001b5e:	4604      	mov	r4, r0
 8001b60:	460d      	mov	r5, r1
 8001b62:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b64:	6823      	ldr	r3, [r4, #0]
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	069b      	lsls	r3, r3, #26
 8001b6a:	d501      	bpl.n	8001b70 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b70:	4632      	mov	r2, r6
 8001b72:	4629      	mov	r1, r5
 8001b74:	4620      	mov	r0, r4
 8001b76:	f7ff ff29 	bl	80019cc <I2C_IsAcknowledgeFailed>
 8001b7a:	b990      	cbnz	r0, 8001ba2 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b7c:	f7ff f900 	bl	8000d80 <HAL_GetTick>
 8001b80:	1b80      	subs	r0, r0, r6
 8001b82:	4285      	cmp	r5, r0
 8001b84:	d301      	bcc.n	8001b8a <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8001b86:	2d00      	cmp	r5, #0
 8001b88:	d1ec      	bne.n	8001b64 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b8a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001b8c:	f043 0320 	orr.w	r3, r3, #32
 8001b90:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001b92:	2320      	movs	r3, #32
 8001b94:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001b9e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001ba2:	2001      	movs	r0, #1
}
 8001ba4:	bd70      	pop	{r4, r5, r6, pc}

08001ba6 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8001ba6:	b570      	push	{r4, r5, r6, lr}
 8001ba8:	4604      	mov	r4, r0
 8001baa:	460d      	mov	r5, r1
 8001bac:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001bae:	6823      	ldr	r3, [r4, #0]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	075b      	lsls	r3, r3, #29
 8001bb4:	d40e      	bmi.n	8001bd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bb6:	4632      	mov	r2, r6
 8001bb8:	4629      	mov	r1, r5
 8001bba:	4620      	mov	r0, r4
 8001bbc:	f7ff ff06 	bl	80019cc <I2C_IsAcknowledgeFailed>
 8001bc0:	b9f0      	cbnz	r0, 8001c00 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001bc2:	6823      	ldr	r3, [r4, #0]
 8001bc4:	699a      	ldr	r2, [r3, #24]
 8001bc6:	0691      	lsls	r1, r2, #26
 8001bc8:	d51c      	bpl.n	8001c04 <I2C_WaitOnRXNEFlagUntilTimeout+0x5e>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001bca:	699a      	ldr	r2, [r3, #24]
 8001bcc:	0752      	lsls	r2, r2, #29
 8001bce:	d503      	bpl.n	8001bd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
 8001bd0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001bd2:	b10a      	cbz	r2, 8001bd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        return HAL_OK;
 8001bd4:	2000      	movs	r0, #0
 8001bd6:	bd70      	pop	{r4, r5, r6, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bd8:	2120      	movs	r1, #32
 8001bda:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8001bdc:	685a      	ldr	r2, [r3, #4]
 8001bde:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001be2:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001be6:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001bea:	f022 0201 	bic.w	r2, r2, #1
 8001bee:	605a      	str	r2, [r3, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001bf4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001bfc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001c00:	2001      	movs	r0, #1
}
 8001c02:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c04:	f7ff f8bc 	bl	8000d80 <HAL_GetTick>
 8001c08:	1b80      	subs	r0, r0, r6
 8001c0a:	4285      	cmp	r5, r0
 8001c0c:	d301      	bcc.n	8001c12 <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
 8001c0e:	2d00      	cmp	r5, #0
 8001c10:	d1cd      	bne.n	8001bae <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c12:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c14:	f043 0320 	orr.w	r3, r3, #32
 8001c18:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001c1a:	2320      	movs	r3, #32
 8001c1c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8001c20:	2300      	movs	r3, #0
 8001c22:	e7eb      	b.n	8001bfc <I2C_WaitOnRXNEFlagUntilTimeout+0x56>

08001c24 <HAL_I2C_Init>:
{
 8001c24:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8001c26:	4604      	mov	r4, r0
 8001c28:	2800      	cmp	r0, #0
 8001c2a:	d04a      	beq.n	8001cc2 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c2c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001c30:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c34:	b91b      	cbnz	r3, 8001c3e <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8001c36:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001c3a:	f002 f95b 	bl	8003ef4 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c3e:	2324      	movs	r3, #36	; 0x24
 8001c40:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001c44:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c46:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	f022 0201 	bic.w	r2, r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c50:	6862      	ldr	r2, [r4, #4]
 8001c52:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c56:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c58:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c5a:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c60:	609a      	str	r2, [r3, #8]
 8001c62:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c64:	d124      	bne.n	8001cb0 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c6a:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c6c:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001c6e:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c70:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001c74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c78:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c7a:	68da      	ldr	r2, [r3, #12]
 8001c7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c80:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001c82:	6922      	ldr	r2, [r4, #16]
 8001c84:	430a      	orrs	r2, r1
 8001c86:	69a1      	ldr	r1, [r4, #24]
 8001c88:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001c8c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c8e:	6a21      	ldr	r1, [r4, #32]
 8001c90:	69e2      	ldr	r2, [r4, #28]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	f042 0201 	orr.w	r2, r2, #1
 8001c9c:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c9e:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001ca0:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ca2:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ca4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ca8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001caa:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8001cae:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001cb0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cb4:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001cb6:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001cb8:	bf04      	itt	eq
 8001cba:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8001cbe:	605a      	streq	r2, [r3, #4]
 8001cc0:	e7d4      	b.n	8001c6c <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8001cc2:	2001      	movs	r0, #1
}
 8001cc4:	bd10      	pop	{r4, pc}
	...

08001cc8 <HAL_I2C_Master_Transmit>:
{
 8001cc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001ccc:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cce:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001cd2:	2b20      	cmp	r3, #32
{
 8001cd4:	4604      	mov	r4, r0
 8001cd6:	460e      	mov	r6, r1
 8001cd8:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cda:	f040 8084 	bne.w	8001de6 <HAL_I2C_Master_Transmit+0x11e>
    __HAL_LOCK(hi2c);
 8001cde:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d07f      	beq.n	8001de6 <HAL_I2C_Master_Transmit+0x11e>
 8001ce6:	2701      	movs	r7, #1
 8001ce8:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001cec:	f7ff f848 	bl	8000d80 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001cf0:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8001cf2:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001cf4:	9000      	str	r0, [sp, #0]
 8001cf6:	463a      	mov	r2, r7
 8001cf8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cfc:	4620      	mov	r0, r4
 8001cfe:	f7ff fe3a 	bl	8001976 <I2C_WaitOnFlagUntilTimeout>
 8001d02:	b118      	cbz	r0, 8001d0c <HAL_I2C_Master_Transmit+0x44>
      return HAL_ERROR;
 8001d04:	2001      	movs	r0, #1
}
 8001d06:	b003      	add	sp, #12
 8001d08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d0c:	2321      	movs	r3, #33	; 0x21
 8001d0e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d12:	2310      	movs	r3, #16
 8001d14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d18:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8001d1a:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d1e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8001d20:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8001d28:	6360      	str	r0, [r4, #52]	; 0x34
 8001d2a:	4b30      	ldr	r3, [pc, #192]	; (8001dec <HAL_I2C_Master_Transmit+0x124>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d2c:	d926      	bls.n	8001d7c <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d2e:	22ff      	movs	r2, #255	; 0xff
 8001d30:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001d32:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001d34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d38:	4631      	mov	r1, r6
 8001d3a:	4620      	mov	r0, r4
 8001d3c:	f7ff fe01 	bl	8001942 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001d40:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d42:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 8001d44:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d46:	462a      	mov	r2, r5
 8001d48:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8001d4a:	b9fb      	cbnz	r3, 8001d8c <HAL_I2C_Master_Transmit+0xc4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d4c:	f7ff ff06 	bl	8001b5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d50:	2800      	cmp	r0, #0
 8001d52:	d1d7      	bne.n	8001d04 <HAL_I2C_Master_Transmit+0x3c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d54:	6823      	ldr	r3, [r4, #0]
 8001d56:	2120      	movs	r1, #32
 8001d58:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001d60:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001d64:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001d68:	f022 0201 	bic.w	r2, r2, #1
 8001d6c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001d6e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001d72:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d76:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001d7a:	e7c4      	b.n	8001d06 <HAL_I2C_Master_Transmit+0x3e>
      hi2c->XferSize = hi2c->XferCount;
 8001d7c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001d7e:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8001d80:	b292      	uxth	r2, r2
 8001d82:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	e7d5      	b.n	8001d38 <HAL_I2C_Master_Transmit+0x70>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d8c:	f7ff fe5b 	bl	8001a46 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d90:	2800      	cmp	r0, #0
 8001d92:	d1b7      	bne.n	8001d04 <HAL_I2C_Master_Transmit+0x3c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d96:	6822      	ldr	r2, [r4, #0]
 8001d98:	f813 1b01 	ldrb.w	r1, [r3], #1
 8001d9c:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001d9e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001da0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001da2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001da4:	3b01      	subs	r3, #1
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001daa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001dac:	3a01      	subs	r2, #1
 8001dae:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001db0:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8001db2:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0c3      	beq.n	8001d40 <HAL_I2C_Master_Transmit+0x78>
 8001db8:	2a00      	cmp	r2, #0
 8001dba:	d1c1      	bne.n	8001d40 <HAL_I2C_Master_Transmit+0x78>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001dbc:	9500      	str	r5, [sp, #0]
 8001dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001dc0:	2180      	movs	r1, #128	; 0x80
 8001dc2:	4620      	mov	r0, r4
 8001dc4:	f7ff fdd7 	bl	8001976 <I2C_WaitOnFlagUntilTimeout>
 8001dc8:	2800      	cmp	r0, #0
 8001dca:	d19b      	bne.n	8001d04 <HAL_I2C_Master_Transmit+0x3c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dcc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	2bff      	cmp	r3, #255	; 0xff
 8001dd2:	d903      	bls.n	8001ddc <HAL_I2C_Master_Transmit+0x114>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dd4:	22ff      	movs	r2, #255	; 0xff
 8001dd6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001dd8:	9000      	str	r0, [sp, #0]
 8001dda:	e7ab      	b.n	8001d34 <HAL_I2C_Master_Transmit+0x6c>
          hi2c->XferSize = hi2c->XferCount;
 8001ddc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001dde:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8001de0:	b292      	uxth	r2, r2
 8001de2:	8522      	strh	r2, [r4, #40]	; 0x28
 8001de4:	e7ce      	b.n	8001d84 <HAL_I2C_Master_Transmit+0xbc>
    return HAL_BUSY;
 8001de6:	2002      	movs	r0, #2
 8001de8:	e78d      	b.n	8001d06 <HAL_I2C_Master_Transmit+0x3e>
 8001dea:	bf00      	nop
 8001dec:	80002000 	.word	0x80002000

08001df0 <HAL_I2C_Master_Receive>:
{
 8001df0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001df4:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001df6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001dfa:	2b20      	cmp	r3, #32
{
 8001dfc:	4604      	mov	r4, r0
 8001dfe:	460e      	mov	r6, r1
 8001e00:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e02:	f040 8086 	bne.w	8001f12 <HAL_I2C_Master_Receive+0x122>
    __HAL_LOCK(hi2c);
 8001e06:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	f000 8081 	beq.w	8001f12 <HAL_I2C_Master_Receive+0x122>
 8001e10:	2701      	movs	r7, #1
 8001e12:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001e16:	f7fe ffb3 	bl	8000d80 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e1a:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8001e1c:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e1e:	9000      	str	r0, [sp, #0]
 8001e20:	463a      	mov	r2, r7
 8001e22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e26:	4620      	mov	r0, r4
 8001e28:	f7ff fda5 	bl	8001976 <I2C_WaitOnFlagUntilTimeout>
 8001e2c:	b118      	cbz	r0, 8001e36 <HAL_I2C_Master_Receive+0x46>
      return HAL_ERROR;
 8001e2e:	2001      	movs	r0, #1
}
 8001e30:	b003      	add	sp, #12
 8001e32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e36:	2322      	movs	r3, #34	; 0x22
 8001e38:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001e3c:	2310      	movs	r3, #16
 8001e3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e42:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8001e44:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e48:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8001e4a:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8001e52:	6360      	str	r0, [r4, #52]	; 0x34
 8001e54:	4b30      	ldr	r3, [pc, #192]	; (8001f18 <HAL_I2C_Master_Receive+0x128>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e56:	d926      	bls.n	8001ea6 <HAL_I2C_Master_Receive+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e58:	22ff      	movs	r2, #255	; 0xff
 8001e5a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001e5c:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001e5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001e62:	4631      	mov	r1, r6
 8001e64:	4620      	mov	r0, r4
 8001e66:	f7ff fd6c 	bl	8001942 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001e6a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e6c:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 8001e6e:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e70:	462a      	mov	r2, r5
 8001e72:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8001e74:	b9fb      	cbnz	r3, 8001eb6 <HAL_I2C_Master_Receive+0xc6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e76:	f7ff fe71 	bl	8001b5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e7a:	2800      	cmp	r0, #0
 8001e7c:	d1d7      	bne.n	8001e2e <HAL_I2C_Master_Receive+0x3e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e7e:	6823      	ldr	r3, [r4, #0]
 8001e80:	2120      	movs	r1, #32
 8001e82:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001e84:	685a      	ldr	r2, [r3, #4]
 8001e86:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001e8a:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001e8e:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001e92:	f022 0201 	bic.w	r2, r2, #1
 8001e96:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001e98:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001e9c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ea0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001ea4:	e7c4      	b.n	8001e30 <HAL_I2C_Master_Receive+0x40>
      hi2c->XferSize = hi2c->XferCount;
 8001ea6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001ea8:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8001eaa:	b292      	uxth	r2, r2
 8001eac:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001eae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	e7d5      	b.n	8001e62 <HAL_I2C_Master_Receive+0x72>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eb6:	f7ff fe76 	bl	8001ba6 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001eba:	2800      	cmp	r0, #0
 8001ebc:	d1b7      	bne.n	8001e2e <HAL_I2C_Master_Receive+0x3e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ebe:	6822      	ldr	r2, [r4, #0]
 8001ec0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ec2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ec4:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001ec6:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001ec8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001eca:	3301      	adds	r3, #1
 8001ecc:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001ece:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ed6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001ed8:	3a01      	subs	r2, #1
 8001eda:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001edc:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8001ede:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0c2      	beq.n	8001e6a <HAL_I2C_Master_Receive+0x7a>
 8001ee4:	2a00      	cmp	r2, #0
 8001ee6:	d1c0      	bne.n	8001e6a <HAL_I2C_Master_Receive+0x7a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ee8:	9500      	str	r5, [sp, #0]
 8001eea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001eec:	2180      	movs	r1, #128	; 0x80
 8001eee:	4620      	mov	r0, r4
 8001ef0:	f7ff fd41 	bl	8001976 <I2C_WaitOnFlagUntilTimeout>
 8001ef4:	2800      	cmp	r0, #0
 8001ef6:	d19a      	bne.n	8001e2e <HAL_I2C_Master_Receive+0x3e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ef8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	2bff      	cmp	r3, #255	; 0xff
 8001efe:	d903      	bls.n	8001f08 <HAL_I2C_Master_Receive+0x118>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f00:	22ff      	movs	r2, #255	; 0xff
 8001f02:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001f04:	9000      	str	r0, [sp, #0]
 8001f06:	e7aa      	b.n	8001e5e <HAL_I2C_Master_Receive+0x6e>
          hi2c->XferSize = hi2c->XferCount;
 8001f08:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f0a:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8001f0c:	b292      	uxth	r2, r2
 8001f0e:	8522      	strh	r2, [r4, #40]	; 0x28
 8001f10:	e7cd      	b.n	8001eae <HAL_I2C_Master_Receive+0xbe>
    return HAL_BUSY;
 8001f12:	2002      	movs	r0, #2
 8001f14:	e78c      	b.n	8001e30 <HAL_I2C_Master_Receive+0x40>
 8001f16:	bf00      	nop
 8001f18:	80002400 	.word	0x80002400

08001f1c <HAL_I2C_Mem_Write>:
{
 8001f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f20:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f22:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8001f26:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f28:	2b20      	cmp	r3, #32
{
 8001f2a:	4604      	mov	r4, r0
 8001f2c:	460f      	mov	r7, r1
 8001f2e:	9203      	str	r2, [sp, #12]
 8001f30:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8001f34:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f38:	f040 80a5 	bne.w	8002086 <HAL_I2C_Mem_Write+0x16a>
    if ((pData == NULL) || (Size == 0U))
 8001f3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001f3e:	b113      	cbz	r3, 8001f46 <HAL_I2C_Mem_Write+0x2a>
 8001f40:	f1ba 0f00 	cmp.w	sl, #0
 8001f44:	d106      	bne.n	8001f54 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001f46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f4a:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8001f4c:	2001      	movs	r0, #1
}
 8001f4e:	b005      	add	sp, #20
 8001f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8001f54:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	f000 8094 	beq.w	8002086 <HAL_I2C_Mem_Write+0x16a>
 8001f5e:	2501      	movs	r5, #1
 8001f60:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001f64:	f7fe ff0c 	bl	8000d80 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f68:	2319      	movs	r3, #25
 8001f6a:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8001f6c:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f6e:	462a      	mov	r2, r5
 8001f70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f74:	4620      	mov	r0, r4
 8001f76:	f7ff fcfe 	bl	8001976 <I2C_WaitOnFlagUntilTimeout>
 8001f7a:	4681      	mov	r9, r0
 8001f7c:	2800      	cmp	r0, #0
 8001f7e:	d1e5      	bne.n	8001f4c <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f80:	2321      	movs	r3, #33	; 0x21
 8001f82:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f86:	2340      	movs	r3, #64	; 0x40
 8001f88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8001f8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f8e:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001f90:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8001f92:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8001f94:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f98:	9601      	str	r6, [sp, #4]
 8001f9a:	f8cd 8000 	str.w	r8, [sp]
 8001f9e:	465b      	mov	r3, fp
 8001fa0:	9a03      	ldr	r2, [sp, #12]
 8001fa2:	4639      	mov	r1, r7
 8001fa4:	4620      	mov	r0, r4
 8001fa6:	f7ff fd75 	bl	8001a94 <I2C_RequestMemoryWrite>
 8001faa:	b110      	cbz	r0, 8001fb2 <HAL_I2C_Mem_Write+0x96>
      __HAL_UNLOCK(hi2c);
 8001fac:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 8001fb0:	e7cc      	b.n	8001f4c <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fb2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	2bff      	cmp	r3, #255	; 0xff
 8001fb8:	d955      	bls.n	8002066 <HAL_I2C_Mem_Write+0x14a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fba:	22ff      	movs	r2, #255	; 0xff
 8001fbc:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001fbe:	9000      	str	r0, [sp, #0]
 8001fc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001fc4:	4639      	mov	r1, r7
 8001fc6:	4620      	mov	r0, r4
 8001fc8:	f7ff fcbb 	bl	8001942 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fcc:	4632      	mov	r2, r6
 8001fce:	4641      	mov	r1, r8
 8001fd0:	4620      	mov	r0, r4
 8001fd2:	f7ff fd38 	bl	8001a46 <I2C_WaitOnTXISFlagUntilTimeout>
 8001fd6:	2800      	cmp	r0, #0
 8001fd8:	d1b8      	bne.n	8001f4c <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001fda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001fdc:	6822      	ldr	r2, [r4, #0]
 8001fde:	f813 1b01 	ldrb.w	r1, [r3], #1
 8001fe2:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001fe4:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001fe6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001fe8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001fea:	3b01      	subs	r3, #1
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ff0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001ff2:	3a01      	subs	r2, #1
 8001ff4:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ff6:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8001ff8:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ffa:	b1ab      	cbz	r3, 8002028 <HAL_I2C_Mem_Write+0x10c>
 8001ffc:	b9a2      	cbnz	r2, 8002028 <HAL_I2C_Mem_Write+0x10c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ffe:	9600      	str	r6, [sp, #0]
 8002000:	4643      	mov	r3, r8
 8002002:	2180      	movs	r1, #128	; 0x80
 8002004:	4620      	mov	r0, r4
 8002006:	f7ff fcb6 	bl	8001976 <I2C_WaitOnFlagUntilTimeout>
 800200a:	2800      	cmp	r0, #0
 800200c:	d19e      	bne.n	8001f4c <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800200e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002010:	b29b      	uxth	r3, r3
 8002012:	2bff      	cmp	r3, #255	; 0xff
 8002014:	d92f      	bls.n	8002076 <HAL_I2C_Mem_Write+0x15a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002016:	22ff      	movs	r2, #255	; 0xff
 8002018:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800201a:	9000      	str	r0, [sp, #0]
 800201c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002020:	4639      	mov	r1, r7
 8002022:	4620      	mov	r0, r4
 8002024:	f7ff fc8d 	bl	8001942 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8002028:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800202a:	b29b      	uxth	r3, r3
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1cd      	bne.n	8001fcc <HAL_I2C_Mem_Write+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002030:	4632      	mov	r2, r6
 8002032:	4641      	mov	r1, r8
 8002034:	4620      	mov	r0, r4
 8002036:	f7ff fd91 	bl	8001b5c <I2C_WaitOnSTOPFlagUntilTimeout>
 800203a:	2800      	cmp	r0, #0
 800203c:	d186      	bne.n	8001f4c <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800203e:	6823      	ldr	r3, [r4, #0]
 8002040:	2120      	movs	r1, #32
 8002042:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800204a:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800204e:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002052:	f022 0201 	bic.w	r2, r2, #1
 8002056:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002058:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800205c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002060:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8002064:	e773      	b.n	8001f4e <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8002066:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002068:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800206a:	b292      	uxth	r2, r2
 800206c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800206e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	e7a6      	b.n	8001fc4 <HAL_I2C_Mem_Write+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 8002076:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002078:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800207a:	b292      	uxth	r2, r2
 800207c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800207e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	e7cc      	b.n	8002020 <HAL_I2C_Mem_Write+0x104>
    return HAL_BUSY;
 8002086:	2002      	movs	r0, #2
 8002088:	e761      	b.n	8001f4e <HAL_I2C_Mem_Write+0x32>
	...

0800208c <HAL_I2C_Mem_Read>:
{
 800208c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002090:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002092:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8002096:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002098:	2b20      	cmp	r3, #32
{
 800209a:	4604      	mov	r4, r0
 800209c:	460f      	mov	r7, r1
 800209e:	9203      	str	r2, [sp, #12]
 80020a0:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 80020a4:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 80020a8:	f040 80a9 	bne.w	80021fe <HAL_I2C_Mem_Read+0x172>
    if ((pData == NULL) || (Size == 0U))
 80020ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80020ae:	b113      	cbz	r3, 80020b6 <HAL_I2C_Mem_Read+0x2a>
 80020b0:	f1ba 0f00 	cmp.w	sl, #0
 80020b4:	d106      	bne.n	80020c4 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80020b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020ba:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80020bc:	2001      	movs	r0, #1
}
 80020be:	b005      	add	sp, #20
 80020c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80020c4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	f000 8098 	beq.w	80021fe <HAL_I2C_Mem_Read+0x172>
 80020ce:	2501      	movs	r5, #1
 80020d0:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80020d4:	f7fe fe54 	bl	8000d80 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020d8:	2319      	movs	r3, #25
 80020da:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80020dc:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020de:	462a      	mov	r2, r5
 80020e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020e4:	4620      	mov	r0, r4
 80020e6:	f7ff fc46 	bl	8001976 <I2C_WaitOnFlagUntilTimeout>
 80020ea:	4681      	mov	r9, r0
 80020ec:	2800      	cmp	r0, #0
 80020ee:	d1e5      	bne.n	80020bc <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80020f0:	2322      	movs	r3, #34	; 0x22
 80020f2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020f6:	2340      	movs	r3, #64	; 0x40
 80020f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80020fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020fe:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002100:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8002102:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8002104:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002108:	9601      	str	r6, [sp, #4]
 800210a:	f8cd 8000 	str.w	r8, [sp]
 800210e:	465b      	mov	r3, fp
 8002110:	9a03      	ldr	r2, [sp, #12]
 8002112:	4639      	mov	r1, r7
 8002114:	4620      	mov	r0, r4
 8002116:	f7ff fcef 	bl	8001af8 <I2C_RequestMemoryRead>
 800211a:	b110      	cbz	r0, 8002122 <HAL_I2C_Mem_Read+0x96>
      __HAL_UNLOCK(hi2c);
 800211c:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 8002120:	e7cc      	b.n	80020bc <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002122:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002124:	b29b      	uxth	r3, r3
 8002126:	2bff      	cmp	r3, #255	; 0xff
 8002128:	4b36      	ldr	r3, [pc, #216]	; (8002204 <HAL_I2C_Mem_Read+0x178>)
 800212a:	d958      	bls.n	80021de <HAL_I2C_Mem_Read+0x152>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800212c:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800212e:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002130:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002132:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002136:	4639      	mov	r1, r7
 8002138:	4620      	mov	r0, r4
 800213a:	f7ff fc02 	bl	8001942 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800213e:	9600      	str	r6, [sp, #0]
 8002140:	4643      	mov	r3, r8
 8002142:	2200      	movs	r2, #0
 8002144:	2104      	movs	r1, #4
 8002146:	4620      	mov	r0, r4
 8002148:	f7ff fc15 	bl	8001976 <I2C_WaitOnFlagUntilTimeout>
 800214c:	2800      	cmp	r0, #0
 800214e:	d1b5      	bne.n	80020bc <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002150:	6822      	ldr	r2, [r4, #0]
 8002152:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002154:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002156:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002158:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800215a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800215c:	3301      	adds	r3, #1
 800215e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002160:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002162:	3b01      	subs	r3, #1
 8002164:	b29b      	uxth	r3, r3
 8002166:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002168:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800216a:	3a01      	subs	r2, #1
 800216c:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800216e:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8002170:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002172:	b1ab      	cbz	r3, 80021a0 <HAL_I2C_Mem_Read+0x114>
 8002174:	b9a2      	cbnz	r2, 80021a0 <HAL_I2C_Mem_Read+0x114>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002176:	9600      	str	r6, [sp, #0]
 8002178:	4643      	mov	r3, r8
 800217a:	2180      	movs	r1, #128	; 0x80
 800217c:	4620      	mov	r0, r4
 800217e:	f7ff fbfa 	bl	8001976 <I2C_WaitOnFlagUntilTimeout>
 8002182:	2800      	cmp	r0, #0
 8002184:	d19a      	bne.n	80020bc <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002186:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002188:	b29b      	uxth	r3, r3
 800218a:	2bff      	cmp	r3, #255	; 0xff
 800218c:	d92f      	bls.n	80021ee <HAL_I2C_Mem_Read+0x162>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800218e:	22ff      	movs	r2, #255	; 0xff
 8002190:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002192:	9000      	str	r0, [sp, #0]
 8002194:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002198:	4639      	mov	r1, r7
 800219a:	4620      	mov	r0, r4
 800219c:	f7ff fbd1 	bl	8001942 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 80021a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1ca      	bne.n	800213e <HAL_I2C_Mem_Read+0xb2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021a8:	4632      	mov	r2, r6
 80021aa:	4641      	mov	r1, r8
 80021ac:	4620      	mov	r0, r4
 80021ae:	f7ff fcd5 	bl	8001b5c <I2C_WaitOnSTOPFlagUntilTimeout>
 80021b2:	2800      	cmp	r0, #0
 80021b4:	d182      	bne.n	80020bc <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021b6:	6823      	ldr	r3, [r4, #0]
 80021b8:	2120      	movs	r1, #32
 80021ba:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80021c2:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80021c6:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80021ca:	f022 0201 	bic.w	r2, r2, #1
 80021ce:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80021d0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80021d4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021d8:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80021dc:	e76f      	b.n	80020be <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 80021de:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80021e0:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80021e2:	b292      	uxth	r2, r2
 80021e4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80021e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	e7a3      	b.n	8002136 <HAL_I2C_Mem_Read+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 80021ee:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80021f0:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80021f2:	b292      	uxth	r2, r2
 80021f4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80021f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021fa:	b2d2      	uxtb	r2, r2
 80021fc:	e7cc      	b.n	8002198 <HAL_I2C_Mem_Read+0x10c>
    return HAL_BUSY;
 80021fe:	2002      	movs	r0, #2
 8002200:	e75d      	b.n	80020be <HAL_I2C_Mem_Read+0x32>
 8002202:	bf00      	nop
 8002204:	80002400 	.word	0x80002400

08002208 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002208:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800220c:	b2d2      	uxtb	r2, r2
 800220e:	2a20      	cmp	r2, #32
{
 8002210:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002212:	d11d      	bne.n	8002250 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002214:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002218:	2b01      	cmp	r3, #1
 800221a:	d019      	beq.n	8002250 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800221c:	2324      	movs	r3, #36	; 0x24
 800221e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002222:	6803      	ldr	r3, [r0, #0]
 8002224:	681c      	ldr	r4, [r3, #0]
 8002226:	f024 0401 	bic.w	r4, r4, #1
 800222a:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800222c:	681c      	ldr	r4, [r3, #0]
 800222e:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8002232:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002234:	681c      	ldr	r4, [r3, #0]
 8002236:	4321      	orrs	r1, r4
 8002238:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800223a:	6819      	ldr	r1, [r3, #0]
 800223c:	f041 0101 	orr.w	r1, r1, #1
 8002240:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002242:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002244:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002248:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800224c:	4618      	mov	r0, r3
 800224e:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8002250:	2002      	movs	r0, #2
  }
}
 8002252:	bd10      	pop	{r4, pc}

08002254 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002254:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002256:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 800225a:	b2e4      	uxtb	r4, r4
 800225c:	2c20      	cmp	r4, #32
 800225e:	d11c      	bne.n	800229a <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002260:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002264:	2b01      	cmp	r3, #1
 8002266:	d018      	beq.n	800229a <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002268:	2324      	movs	r3, #36	; 0x24
 800226a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800226e:	6803      	ldr	r3, [r0, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	f022 0201 	bic.w	r2, r2, #1
 8002276:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002278:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800227a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800227e:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002282:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	f042 0201 	orr.w	r2, r2, #1
 800228a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800228c:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800228e:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002292:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002296:	4618      	mov	r0, r3
 8002298:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 800229a:	2002      	movs	r0, #2
  }
}
 800229c:	bd10      	pop	{r4, pc}
	...

080022a0 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim: LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80022a0:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpcfgr = 0;

  /* Check the LPTIM handle allocation */
  if(hlptim == NULL)
 80022a2:	4604      	mov	r4, r0
 80022a4:	2800      	cmp	r0, #0
 80022a6:	d047      	beq.n	8002338 <HAL_LPTIM_Init+0x98>

#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if(hlptim->State == HAL_LPTIM_STATE_RESET)
 80022a8:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 80022ac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80022b0:	b91b      	cbnz	r3, 80022ba <HAL_LPTIM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80022b2:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80022b6:	f001 fec3 	bl	8004040 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80022ba:	2302      	movs	r3, #2

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80022bc:	6820      	ldr	r0, [r4, #0]

  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 80022be:	6865      	ldr	r5, [r4, #4]
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80022c0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  tmpcfgr = hlptim->Instance->CFGR;
 80022c4:	68c2      	ldr	r2, [r0, #12]
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
  }
  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 80022c6:	6961      	ldr	r1, [r4, #20]
  {
    tmpcfgr &= (uint32_t)(~ (LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80022c8:	4e1c      	ldr	r6, [pc, #112]	; (800233c <HAL_LPTIM_Init+0x9c>)
  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 80022ca:	2d01      	cmp	r5, #1
  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 80022cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80022d0:	bf08      	it	eq
 80022d2:	f022 021e 	biceq.w	r2, r2, #30
  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 80022d6:	4299      	cmp	r1, r3
    tmpcfgr &= (uint32_t)(~ (LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80022d8:	bf1c      	itt	ne
 80022da:	f422 4260 	bicne.w	r2, r2, #57344	; 0xe000
 80022de:	f022 02c0 	bicne.w	r2, r2, #192	; 0xc0
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80022e2:	4016      	ands	r6, r2
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE ));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80022e4:	68a2      	ldr	r2, [r4, #8]
 80022e6:	ea45 0302 	orr.w	r3, r5, r2
              hlptim->Init.Clock.Prescaler |
 80022ea:	6a22      	ldr	r2, [r4, #32]
 80022ec:	4313      	orrs	r3, r2
              hlptim->Init.OutputPolarity  |
 80022ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80022f0:	4313      	orrs	r3, r2
              hlptim->Init.UpdateMode      |
 80022f2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
              hlptim->Init.CounterSource);

  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 80022f4:	2d01      	cmp	r5, #1
              hlptim->Init.UpdateMode      |
 80022f6:	ea43 0302 	orr.w	r3, r3, r2
  {
    tmpcfgr |=  (hlptim->Init.UltraLowPowerClock.Polarity |
 80022fa:	bf04      	itt	eq
 80022fc:	6925      	ldreq	r5, [r4, #16]
 80022fe:	68e2      	ldreq	r2, [r4, #12]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002300:	ea43 0306 	orr.w	r3, r3, r6
    tmpcfgr |=  (hlptim->Init.UltraLowPowerClock.Polarity |
 8002304:	bf04      	itt	eq
 8002306:	432a      	orreq	r2, r5
 8002308:	4313      	orreq	r3, r2
                hlptim->Init.UltraLowPowerClock.SampleTime);
  }

  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 800230a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800230e:	4291      	cmp	r1, r2
 8002310:	d004      	beq.n	800231c <HAL_LPTIM_Init+0x7c>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002312:	69a2      	ldr	r2, [r4, #24]
 8002314:	4311      	orrs	r1, r2
                hlptim->Init.Trigger.ActiveEdge |
 8002316:	69e2      	ldr	r2, [r4, #28]
 8002318:	4311      	orrs	r1, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800231a:	430b      	orrs	r3, r1
                hlptim->Init.Trigger.SampleTime);
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800231c:	60c3      	str	r3, [r0, #12]

  /* Configure LPTIM input sources */
  if(hlptim->Instance == LPTIM1)
 800231e:	4b08      	ldr	r3, [pc, #32]	; (8002340 <HAL_LPTIM_Init+0xa0>)
 8002320:	4298      	cmp	r0, r3
    /* Check LPTIM1 Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance,hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance,hlptim->Init.Input2Source));

    /* Configure LPTIM1 Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8002322:	bf08      	it	eq
 8002324:	6b22      	ldreq	r2, [r4, #48]	; 0x30
 8002326:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002328:	bf08      	it	eq
 800232a:	4313      	orreq	r3, r2
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance,hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 800232c:	6203      	str	r3, [r0, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800232e:	2301      	movs	r3, #1
 8002330:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8002334:	2000      	movs	r0, #0
 8002336:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002338:	2001      	movs	r0, #1
}
 800233a:	bd70      	pop	{r4, r5, r6, pc}
 800233c:	ff19f1fe 	.word	0xff19f1fe
 8002340:	40007c00 	.word	0x40007c00

08002344 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002344:	4b02      	ldr	r3, [pc, #8]	; (8002350 <HAL_PWREx_GetVoltageRange+0xc>)
 8002346:	6818      	ldr	r0, [r3, #0]
#endif
}
 8002348:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	40007000 	.word	0x40007000

08002354 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002354:	4b17      	ldr	r3, [pc, #92]	; (80023b4 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002356:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002358:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800235c:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002360:	d11c      	bne.n	800239c <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002362:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002366:	d015      	beq.n	8002394 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800236e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002372:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002374:	4a10      	ldr	r2, [pc, #64]	; (80023b8 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8002376:	6811      	ldr	r1, [r2, #0]
 8002378:	2232      	movs	r2, #50	; 0x32
 800237a:	434a      	muls	r2, r1
 800237c:	490f      	ldr	r1, [pc, #60]	; (80023bc <HAL_PWREx_ControlVoltageScaling+0x68>)
 800237e:	fbb2 f2f1 	udiv	r2, r2, r1
 8002382:	4619      	mov	r1, r3
 8002384:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002386:	6958      	ldr	r0, [r3, #20]
 8002388:	0540      	lsls	r0, r0, #21
 800238a:	d500      	bpl.n	800238e <HAL_PWREx_ControlVoltageScaling+0x3a>
 800238c:	b922      	cbnz	r2, 8002398 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800238e:	694b      	ldr	r3, [r1, #20]
 8002390:	055b      	lsls	r3, r3, #21
 8002392:	d40d      	bmi.n	80023b0 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002394:	2000      	movs	r0, #0
 8002396:	4770      	bx	lr
        wait_loop_index--;
 8002398:	3a01      	subs	r2, #1
 800239a:	e7f4      	b.n	8002386 <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800239c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023a0:	bf1f      	itttt	ne
 80023a2:	681a      	ldrne	r2, [r3, #0]
 80023a4:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 80023a8:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 80023ac:	601a      	strne	r2, [r3, #0]
 80023ae:	e7f1      	b.n	8002394 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 80023b0:	2003      	movs	r0, #3
}
 80023b2:	4770      	bx	lr
 80023b4:	40007000 	.word	0x40007000
 80023b8:	20000000 	.word	0x20000000
 80023bc:	000f4240 	.word	0x000f4240

080023c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80023c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80023c2:	4d1e      	ldr	r5, [pc, #120]	; (800243c <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80023c4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80023c6:	00da      	lsls	r2, r3, #3
{
 80023c8:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80023ca:	d518      	bpl.n	80023fe <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80023cc:	f7ff ffba 	bl	8002344 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023d0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80023d4:	d123      	bne.n	800241e <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023d6:	2c80      	cmp	r4, #128	; 0x80
 80023d8:	d929      	bls.n	800242e <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023da:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023dc:	bf8c      	ite	hi
 80023de:	2002      	movhi	r0, #2
 80023e0:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023e2:	4a17      	ldr	r2, [pc, #92]	; (8002440 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 80023e4:	6813      	ldr	r3, [r2, #0]
 80023e6:	f023 0307 	bic.w	r3, r3, #7
 80023ea:	4303      	orrs	r3, r0
 80023ec:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80023ee:	6813      	ldr	r3, [r2, #0]
 80023f0:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80023f4:	1a18      	subs	r0, r3, r0
 80023f6:	bf18      	it	ne
 80023f8:	2001      	movne	r0, #1
 80023fa:	b003      	add	sp, #12
 80023fc:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80023fe:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002404:	65ab      	str	r3, [r5, #88]	; 0x58
 8002406:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240c:	9301      	str	r3, [sp, #4]
 800240e:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8002410:	f7ff ff98 	bl	8002344 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8002414:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002416:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800241a:	65ab      	str	r3, [r5, #88]	; 0x58
 800241c:	e7d8      	b.n	80023d0 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 800241e:	2c80      	cmp	r4, #128	; 0x80
 8002420:	d807      	bhi.n	8002432 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8002422:	d008      	beq.n	8002436 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8002424:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8002428:	4258      	negs	r0, r3
 800242a:	4158      	adcs	r0, r3
 800242c:	e7d9      	b.n	80023e2 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800242e:	2000      	movs	r0, #0
 8002430:	e7d7      	b.n	80023e2 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8002432:	2003      	movs	r0, #3
 8002434:	e7d5      	b.n	80023e2 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8002436:	2002      	movs	r0, #2
 8002438:	e7d3      	b.n	80023e2 <RCC_SetFlashLatencyFromMSIRange+0x22>
 800243a:	bf00      	nop
 800243c:	40021000 	.word	0x40021000
 8002440:	40022000 	.word	0x40022000

08002444 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002444:	4b25      	ldr	r3, [pc, #148]	; (80024dc <HAL_RCC_GetSysClockFreq+0x98>)
 8002446:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002448:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800244a:	f012 020c 	ands.w	r2, r2, #12
 800244e:	d005      	beq.n	800245c <HAL_RCC_GetSysClockFreq+0x18>
 8002450:	2a0c      	cmp	r2, #12
 8002452:	d115      	bne.n	8002480 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002454:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002458:	2901      	cmp	r1, #1
 800245a:	d118      	bne.n	800248e <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800245c:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 800245e:	4820      	ldr	r0, [pc, #128]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x9c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002460:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002462:	bf55      	itete	pl
 8002464:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002468:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800246a:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800246e:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8002472:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002476:	b382      	cbz	r2, 80024da <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002478:	2a0c      	cmp	r2, #12
 800247a:	d009      	beq.n	8002490 <HAL_RCC_GetSysClockFreq+0x4c>
 800247c:	2000      	movs	r0, #0
  return sysclockfreq;
 800247e:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002480:	2a04      	cmp	r2, #4
 8002482:	d029      	beq.n	80024d8 <HAL_RCC_GetSysClockFreq+0x94>
 8002484:	2a08      	cmp	r2, #8
 8002486:	4817      	ldr	r0, [pc, #92]	; (80024e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002488:	bf18      	it	ne
 800248a:	2000      	movne	r0, #0
 800248c:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800248e:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002490:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002492:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002494:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002498:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (pllsource)
 800249c:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800249e:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 80024a2:	d005      	beq.n	80024b0 <HAL_RCC_GetSysClockFreq+0x6c>
 80024a4:	2903      	cmp	r1, #3
 80024a6:	d012      	beq.n	80024ce <HAL_RCC_GetSysClockFreq+0x8a>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024a8:	68d9      	ldr	r1, [r3, #12]
 80024aa:	f3c1 2106 	ubfx	r1, r1, #8, #7
 80024ae:	e003      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024b0:	68d9      	ldr	r1, [r3, #12]
 80024b2:	480d      	ldr	r0, [pc, #52]	; (80024e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80024b4:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024b8:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024ba:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024be:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80024c2:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024c4:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024c6:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 80024c8:	fbb0 f0f3 	udiv	r0, r0, r3
 80024cc:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024ce:	68d9      	ldr	r1, [r3, #12]
 80024d0:	4804      	ldr	r0, [pc, #16]	; (80024e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024d2:	f3c1 2106 	ubfx	r1, r1, #8, #7
 80024d6:	e7ef      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x74>
    sysclockfreq = HSI_VALUE;
 80024d8:	4803      	ldr	r0, [pc, #12]	; (80024e8 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 80024da:	4770      	bx	lr
 80024dc:	40021000 	.word	0x40021000
 80024e0:	08005538 	.word	0x08005538
 80024e4:	007a1200 	.word	0x007a1200
 80024e8:	00f42400 	.word	0x00f42400

080024ec <HAL_RCC_OscConfig>:
{
 80024ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 80024f0:	4605      	mov	r5, r0
 80024f2:	b918      	cbnz	r0, 80024fc <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 80024f4:	2001      	movs	r0, #1
}
 80024f6:	b003      	add	sp, #12
 80024f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024fc:	4ca5      	ldr	r4, [pc, #660]	; (8002794 <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024fe:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002500:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002502:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002504:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002506:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800250a:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800250e:	d53c      	bpl.n	800258a <HAL_RCC_OscConfig+0x9e>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002510:	b11e      	cbz	r6, 800251a <HAL_RCC_OscConfig+0x2e>
 8002512:	2e0c      	cmp	r6, #12
 8002514:	d163      	bne.n	80025de <HAL_RCC_OscConfig+0xf2>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002516:	2f01      	cmp	r7, #1
 8002518:	d161      	bne.n	80025de <HAL_RCC_OscConfig+0xf2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800251a:	6823      	ldr	r3, [r4, #0]
 800251c:	0798      	lsls	r0, r3, #30
 800251e:	d502      	bpl.n	8002526 <HAL_RCC_OscConfig+0x3a>
 8002520:	69ab      	ldr	r3, [r5, #24]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d0e6      	beq.n	80024f4 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002526:	6823      	ldr	r3, [r4, #0]
 8002528:	6a28      	ldr	r0, [r5, #32]
 800252a:	0719      	lsls	r1, r3, #28
 800252c:	bf56      	itet	pl
 800252e:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8002532:	6823      	ldrmi	r3, [r4, #0]
 8002534:	091b      	lsrpl	r3, r3, #4
 8002536:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800253a:	4283      	cmp	r3, r0
 800253c:	d23a      	bcs.n	80025b4 <HAL_RCC_OscConfig+0xc8>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800253e:	f7ff ff3f 	bl	80023c0 <RCC_SetFlashLatencyFromMSIRange>
 8002542:	2800      	cmp	r0, #0
 8002544:	d1d6      	bne.n	80024f4 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002546:	6823      	ldr	r3, [r4, #0]
 8002548:	f043 0308 	orr.w	r3, r3, #8
 800254c:	6023      	str	r3, [r4, #0]
 800254e:	6823      	ldr	r3, [r4, #0]
 8002550:	6a2a      	ldr	r2, [r5, #32]
 8002552:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002556:	4313      	orrs	r3, r2
 8002558:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800255a:	6863      	ldr	r3, [r4, #4]
 800255c:	69ea      	ldr	r2, [r5, #28]
 800255e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002562:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002566:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002568:	f7ff ff6c 	bl	8002444 <HAL_RCC_GetSysClockFreq>
 800256c:	68a3      	ldr	r3, [r4, #8]
 800256e:	4a8a      	ldr	r2, [pc, #552]	; (8002798 <HAL_RCC_OscConfig+0x2ac>)
 8002570:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002574:	5cd3      	ldrb	r3, [r2, r3]
 8002576:	f003 031f 	and.w	r3, r3, #31
 800257a:	40d8      	lsrs	r0, r3
 800257c:	4b87      	ldr	r3, [pc, #540]	; (800279c <HAL_RCC_OscConfig+0x2b0>)
 800257e:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8002580:	2000      	movs	r0, #0
 8002582:	f7fe fbc7 	bl	8000d14 <HAL_InitTick>
        if(status != HAL_OK)
 8002586:	2800      	cmp	r0, #0
 8002588:	d1b5      	bne.n	80024f6 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800258a:	682b      	ldr	r3, [r5, #0]
 800258c:	07d8      	lsls	r0, r3, #31
 800258e:	d45d      	bmi.n	800264c <HAL_RCC_OscConfig+0x160>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002590:	682b      	ldr	r3, [r5, #0]
 8002592:	0799      	lsls	r1, r3, #30
 8002594:	f100 809c 	bmi.w	80026d0 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002598:	682b      	ldr	r3, [r5, #0]
 800259a:	0718      	lsls	r0, r3, #28
 800259c:	f100 80d0 	bmi.w	8002740 <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025a0:	682b      	ldr	r3, [r5, #0]
 80025a2:	0759      	lsls	r1, r3, #29
 80025a4:	f100 80fc 	bmi.w	80027a0 <HAL_RCC_OscConfig+0x2b4>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025a8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f040 8165 	bne.w	800287a <HAL_RCC_OscConfig+0x38e>
  return HAL_OK;
 80025b0:	2000      	movs	r0, #0
 80025b2:	e7a0      	b.n	80024f6 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025b4:	6823      	ldr	r3, [r4, #0]
 80025b6:	f043 0308 	orr.w	r3, r3, #8
 80025ba:	6023      	str	r3, [r4, #0]
 80025bc:	6823      	ldr	r3, [r4, #0]
 80025be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025c2:	4303      	orrs	r3, r0
 80025c4:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025c6:	6863      	ldr	r3, [r4, #4]
 80025c8:	69ea      	ldr	r2, [r5, #28]
 80025ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80025d2:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025d4:	f7ff fef4 	bl	80023c0 <RCC_SetFlashLatencyFromMSIRange>
 80025d8:	2800      	cmp	r0, #0
 80025da:	d0c5      	beq.n	8002568 <HAL_RCC_OscConfig+0x7c>
 80025dc:	e78a      	b.n	80024f4 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025de:	69ab      	ldr	r3, [r5, #24]
 80025e0:	b31b      	cbz	r3, 800262a <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_MSI_ENABLE();
 80025e2:	6823      	ldr	r3, [r4, #0]
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80025ea:	f7fe fbc9 	bl	8000d80 <HAL_GetTick>
 80025ee:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025f0:	6823      	ldr	r3, [r4, #0]
 80025f2:	079a      	lsls	r2, r3, #30
 80025f4:	d511      	bpl.n	800261a <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025f6:	6823      	ldr	r3, [r4, #0]
 80025f8:	f043 0308 	orr.w	r3, r3, #8
 80025fc:	6023      	str	r3, [r4, #0]
 80025fe:	6823      	ldr	r3, [r4, #0]
 8002600:	6a2a      	ldr	r2, [r5, #32]
 8002602:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002606:	4313      	orrs	r3, r2
 8002608:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800260a:	6863      	ldr	r3, [r4, #4]
 800260c:	69ea      	ldr	r2, [r5, #28]
 800260e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002612:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002616:	6063      	str	r3, [r4, #4]
 8002618:	e7b7      	b.n	800258a <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800261a:	f7fe fbb1 	bl	8000d80 <HAL_GetTick>
 800261e:	eba0 0008 	sub.w	r0, r0, r8
 8002622:	2802      	cmp	r0, #2
 8002624:	d9e4      	bls.n	80025f0 <HAL_RCC_OscConfig+0x104>
            return HAL_TIMEOUT;
 8002626:	2003      	movs	r0, #3
 8002628:	e765      	b.n	80024f6 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 800262a:	6823      	ldr	r3, [r4, #0]
 800262c:	f023 0301 	bic.w	r3, r3, #1
 8002630:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002632:	f7fe fba5 	bl	8000d80 <HAL_GetTick>
 8002636:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002638:	6823      	ldr	r3, [r4, #0]
 800263a:	079b      	lsls	r3, r3, #30
 800263c:	d5a5      	bpl.n	800258a <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800263e:	f7fe fb9f 	bl	8000d80 <HAL_GetTick>
 8002642:	eba0 0008 	sub.w	r0, r0, r8
 8002646:	2802      	cmp	r0, #2
 8002648:	d9f6      	bls.n	8002638 <HAL_RCC_OscConfig+0x14c>
 800264a:	e7ec      	b.n	8002626 <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800264c:	2e08      	cmp	r6, #8
 800264e:	d003      	beq.n	8002658 <HAL_RCC_OscConfig+0x16c>
 8002650:	2e0c      	cmp	r6, #12
 8002652:	d108      	bne.n	8002666 <HAL_RCC_OscConfig+0x17a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8002654:	2f03      	cmp	r7, #3
 8002656:	d106      	bne.n	8002666 <HAL_RCC_OscConfig+0x17a>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002658:	6823      	ldr	r3, [r4, #0]
 800265a:	039a      	lsls	r2, r3, #14
 800265c:	d598      	bpl.n	8002590 <HAL_RCC_OscConfig+0xa4>
 800265e:	686b      	ldr	r3, [r5, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d195      	bne.n	8002590 <HAL_RCC_OscConfig+0xa4>
 8002664:	e746      	b.n	80024f4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002666:	686b      	ldr	r3, [r5, #4]
 8002668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800266c:	d110      	bne.n	8002690 <HAL_RCC_OscConfig+0x1a4>
 800266e:	6823      	ldr	r3, [r4, #0]
 8002670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002674:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002676:	f7fe fb83 	bl	8000d80 <HAL_GetTick>
 800267a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800267c:	6823      	ldr	r3, [r4, #0]
 800267e:	039b      	lsls	r3, r3, #14
 8002680:	d486      	bmi.n	8002590 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002682:	f7fe fb7d 	bl	8000d80 <HAL_GetTick>
 8002686:	eba0 0008 	sub.w	r0, r0, r8
 800268a:	2864      	cmp	r0, #100	; 0x64
 800268c:	d9f6      	bls.n	800267c <HAL_RCC_OscConfig+0x190>
 800268e:	e7ca      	b.n	8002626 <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002690:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002694:	d104      	bne.n	80026a0 <HAL_RCC_OscConfig+0x1b4>
 8002696:	6823      	ldr	r3, [r4, #0]
 8002698:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800269c:	6023      	str	r3, [r4, #0]
 800269e:	e7e6      	b.n	800266e <HAL_RCC_OscConfig+0x182>
 80026a0:	6822      	ldr	r2, [r4, #0]
 80026a2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80026a6:	6022      	str	r2, [r4, #0]
 80026a8:	6822      	ldr	r2, [r4, #0]
 80026aa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026ae:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1e0      	bne.n	8002676 <HAL_RCC_OscConfig+0x18a>
        tickstart = HAL_GetTick();
 80026b4:	f7fe fb64 	bl	8000d80 <HAL_GetTick>
 80026b8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026ba:	6823      	ldr	r3, [r4, #0]
 80026bc:	0398      	lsls	r0, r3, #14
 80026be:	f57f af67 	bpl.w	8002590 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026c2:	f7fe fb5d 	bl	8000d80 <HAL_GetTick>
 80026c6:	eba0 0008 	sub.w	r0, r0, r8
 80026ca:	2864      	cmp	r0, #100	; 0x64
 80026cc:	d9f5      	bls.n	80026ba <HAL_RCC_OscConfig+0x1ce>
 80026ce:	e7aa      	b.n	8002626 <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80026d0:	2e04      	cmp	r6, #4
 80026d2:	d003      	beq.n	80026dc <HAL_RCC_OscConfig+0x1f0>
 80026d4:	2e0c      	cmp	r6, #12
 80026d6:	d110      	bne.n	80026fa <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 80026d8:	2f02      	cmp	r7, #2
 80026da:	d10e      	bne.n	80026fa <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026dc:	6823      	ldr	r3, [r4, #0]
 80026de:	0559      	lsls	r1, r3, #21
 80026e0:	d503      	bpl.n	80026ea <HAL_RCC_OscConfig+0x1fe>
 80026e2:	68eb      	ldr	r3, [r5, #12]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f43f af05 	beq.w	80024f4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ea:	6863      	ldr	r3, [r4, #4]
 80026ec:	692a      	ldr	r2, [r5, #16]
 80026ee:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80026f2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80026f6:	6063      	str	r3, [r4, #4]
 80026f8:	e74e      	b.n	8002598 <HAL_RCC_OscConfig+0xac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026fa:	68eb      	ldr	r3, [r5, #12]
 80026fc:	b17b      	cbz	r3, 800271e <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 80026fe:	6823      	ldr	r3, [r4, #0]
 8002700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002704:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002706:	f7fe fb3b 	bl	8000d80 <HAL_GetTick>
 800270a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800270c:	6823      	ldr	r3, [r4, #0]
 800270e:	055a      	lsls	r2, r3, #21
 8002710:	d4eb      	bmi.n	80026ea <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002712:	f7fe fb35 	bl	8000d80 <HAL_GetTick>
 8002716:	1bc0      	subs	r0, r0, r7
 8002718:	2802      	cmp	r0, #2
 800271a:	d9f7      	bls.n	800270c <HAL_RCC_OscConfig+0x220>
 800271c:	e783      	b.n	8002626 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_DISABLE();
 800271e:	6823      	ldr	r3, [r4, #0]
 8002720:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002724:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002726:	f7fe fb2b 	bl	8000d80 <HAL_GetTick>
 800272a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800272c:	6823      	ldr	r3, [r4, #0]
 800272e:	055b      	lsls	r3, r3, #21
 8002730:	f57f af32 	bpl.w	8002598 <HAL_RCC_OscConfig+0xac>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002734:	f7fe fb24 	bl	8000d80 <HAL_GetTick>
 8002738:	1bc0      	subs	r0, r0, r7
 800273a:	2802      	cmp	r0, #2
 800273c:	d9f6      	bls.n	800272c <HAL_RCC_OscConfig+0x240>
 800273e:	e772      	b.n	8002626 <HAL_RCC_OscConfig+0x13a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002740:	696b      	ldr	r3, [r5, #20]
 8002742:	b19b      	cbz	r3, 800276c <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 8002744:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002748:	f043 0301 	orr.w	r3, r3, #1
 800274c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002750:	f7fe fb16 	bl	8000d80 <HAL_GetTick>
 8002754:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002756:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800275a:	079a      	lsls	r2, r3, #30
 800275c:	f53f af20 	bmi.w	80025a0 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002760:	f7fe fb0e 	bl	8000d80 <HAL_GetTick>
 8002764:	1bc0      	subs	r0, r0, r7
 8002766:	2802      	cmp	r0, #2
 8002768:	d9f5      	bls.n	8002756 <HAL_RCC_OscConfig+0x26a>
 800276a:	e75c      	b.n	8002626 <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_LSI_DISABLE();
 800276c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002770:	f023 0301 	bic.w	r3, r3, #1
 8002774:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002778:	f7fe fb02 	bl	8000d80 <HAL_GetTick>
 800277c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800277e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002782:	079b      	lsls	r3, r3, #30
 8002784:	f57f af0c 	bpl.w	80025a0 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002788:	f7fe fafa 	bl	8000d80 <HAL_GetTick>
 800278c:	1bc0      	subs	r0, r0, r7
 800278e:	2802      	cmp	r0, #2
 8002790:	d9f5      	bls.n	800277e <HAL_RCC_OscConfig+0x292>
 8002792:	e748      	b.n	8002626 <HAL_RCC_OscConfig+0x13a>
 8002794:	40021000 	.word	0x40021000
 8002798:	0800551d 	.word	0x0800551d
 800279c:	20000000 	.word	0x20000000
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80027a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80027a2:	00d8      	lsls	r0, r3, #3
 80027a4:	d429      	bmi.n	80027fa <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80027a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80027a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ac:	65a3      	str	r3, [r4, #88]	; 0x58
 80027ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80027b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b4:	9301      	str	r3, [sp, #4]
 80027b6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80027b8:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027bc:	4f5d      	ldr	r7, [pc, #372]	; (8002934 <HAL_RCC_OscConfig+0x448>)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	05d9      	lsls	r1, r3, #23
 80027c2:	d51d      	bpl.n	8002800 <HAL_RCC_OscConfig+0x314>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027c4:	68ab      	ldr	r3, [r5, #8]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d12b      	bne.n	8002822 <HAL_RCC_OscConfig+0x336>
 80027ca:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80027ce:	f043 0301 	orr.w	r3, r3, #1
 80027d2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 80027d6:	f7fe fad3 	bl	8000d80 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027da:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80027de:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027e0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80027e4:	079b      	lsls	r3, r3, #30
 80027e6:	d542      	bpl.n	800286e <HAL_RCC_OscConfig+0x382>
    if(pwrclkchanged == SET)
 80027e8:	f1b8 0f00 	cmp.w	r8, #0
 80027ec:	f43f aedc 	beq.w	80025a8 <HAL_RCC_OscConfig+0xbc>
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80027f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027f6:	65a3      	str	r3, [r4, #88]	; 0x58
 80027f8:	e6d6      	b.n	80025a8 <HAL_RCC_OscConfig+0xbc>
    FlagStatus       pwrclkchanged = RESET;
 80027fa:	f04f 0800 	mov.w	r8, #0
 80027fe:	e7dd      	b.n	80027bc <HAL_RCC_OscConfig+0x2d0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002806:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002808:	f7fe faba 	bl	8000d80 <HAL_GetTick>
 800280c:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	05da      	lsls	r2, r3, #23
 8002812:	d4d7      	bmi.n	80027c4 <HAL_RCC_OscConfig+0x2d8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002814:	f7fe fab4 	bl	8000d80 <HAL_GetTick>
 8002818:	eba0 0009 	sub.w	r0, r0, r9
 800281c:	2802      	cmp	r0, #2
 800281e:	d9f6      	bls.n	800280e <HAL_RCC_OscConfig+0x322>
 8002820:	e701      	b.n	8002626 <HAL_RCC_OscConfig+0x13a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002822:	2b05      	cmp	r3, #5
 8002824:	d106      	bne.n	8002834 <HAL_RCC_OscConfig+0x348>
 8002826:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800282a:	f043 0304 	orr.w	r3, r3, #4
 800282e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8002832:	e7ca      	b.n	80027ca <HAL_RCC_OscConfig+0x2de>
 8002834:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002838:	f022 0201 	bic.w	r2, r2, #1
 800283c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8002840:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002844:	f022 0204 	bic.w	r2, r2, #4
 8002848:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1c2      	bne.n	80027d6 <HAL_RCC_OscConfig+0x2ea>
      tickstart = HAL_GetTick();
 8002850:	f7fe fa96 	bl	8000d80 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002854:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002858:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800285a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800285e:	0798      	lsls	r0, r3, #30
 8002860:	d5c2      	bpl.n	80027e8 <HAL_RCC_OscConfig+0x2fc>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002862:	f7fe fa8d 	bl	8000d80 <HAL_GetTick>
 8002866:	1bc0      	subs	r0, r0, r7
 8002868:	4548      	cmp	r0, r9
 800286a:	d9f6      	bls.n	800285a <HAL_RCC_OscConfig+0x36e>
 800286c:	e6db      	b.n	8002626 <HAL_RCC_OscConfig+0x13a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800286e:	f7fe fa87 	bl	8000d80 <HAL_GetTick>
 8002872:	1bc0      	subs	r0, r0, r7
 8002874:	4548      	cmp	r0, r9
 8002876:	d9b3      	bls.n	80027e0 <HAL_RCC_OscConfig+0x2f4>
 8002878:	e6d5      	b.n	8002626 <HAL_RCC_OscConfig+0x13a>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800287a:	2e0c      	cmp	r6, #12
 800287c:	f43f ae3a 	beq.w	80024f4 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002880:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8002882:	6823      	ldr	r3, [r4, #0]
 8002884:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002888:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800288a:	d137      	bne.n	80028fc <HAL_RCC_OscConfig+0x410>
        tickstart = HAL_GetTick();
 800288c:	f7fe fa78 	bl	8000d80 <HAL_GetTick>
 8002890:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002892:	6823      	ldr	r3, [r4, #0]
 8002894:	0199      	lsls	r1, r3, #6
 8002896:	d42b      	bmi.n	80028f0 <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002898:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800289a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800289c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80028a0:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80028a2:	3a01      	subs	r2, #1
 80028a4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80028a8:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80028aa:	0912      	lsrs	r2, r2, #4
 80028ac:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80028b0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80028b2:	0852      	lsrs	r2, r2, #1
 80028b4:	3a01      	subs	r2, #1
 80028b6:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80028ba:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80028bc:	0852      	lsrs	r2, r2, #1
 80028be:	3a01      	subs	r2, #1
 80028c0:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80028c4:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80028c6:	6823      	ldr	r3, [r4, #0]
 80028c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028cc:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028ce:	68e3      	ldr	r3, [r4, #12]
 80028d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028d4:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80028d6:	f7fe fa53 	bl	8000d80 <HAL_GetTick>
 80028da:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028dc:	6823      	ldr	r3, [r4, #0]
 80028de:	019a      	lsls	r2, r3, #6
 80028e0:	f53f ae66 	bmi.w	80025b0 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e4:	f7fe fa4c 	bl	8000d80 <HAL_GetTick>
 80028e8:	1b40      	subs	r0, r0, r5
 80028ea:	2802      	cmp	r0, #2
 80028ec:	d9f6      	bls.n	80028dc <HAL_RCC_OscConfig+0x3f0>
 80028ee:	e69a      	b.n	8002626 <HAL_RCC_OscConfig+0x13a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f0:	f7fe fa46 	bl	8000d80 <HAL_GetTick>
 80028f4:	1b80      	subs	r0, r0, r6
 80028f6:	2802      	cmp	r0, #2
 80028f8:	d9cb      	bls.n	8002892 <HAL_RCC_OscConfig+0x3a6>
 80028fa:	e694      	b.n	8002626 <HAL_RCC_OscConfig+0x13a>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80028fc:	6823      	ldr	r3, [r4, #0]
 80028fe:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002902:	bf02      	ittt	eq
 8002904:	68e3      	ldreq	r3, [r4, #12]
 8002906:	f023 0303 	biceq.w	r3, r3, #3
 800290a:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800290c:	68e3      	ldr	r3, [r4, #12]
 800290e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002916:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8002918:	f7fe fa32 	bl	8000d80 <HAL_GetTick>
 800291c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800291e:	6823      	ldr	r3, [r4, #0]
 8002920:	019b      	lsls	r3, r3, #6
 8002922:	f57f ae45 	bpl.w	80025b0 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002926:	f7fe fa2b 	bl	8000d80 <HAL_GetTick>
 800292a:	1b40      	subs	r0, r0, r5
 800292c:	2802      	cmp	r0, #2
 800292e:	d9f6      	bls.n	800291e <HAL_RCC_OscConfig+0x432>
 8002930:	e679      	b.n	8002626 <HAL_RCC_OscConfig+0x13a>
 8002932:	bf00      	nop
 8002934:	40007000 	.word	0x40007000

08002938 <HAL_RCC_ClockConfig>:
{
 8002938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800293c:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 800293e:	4604      	mov	r4, r0
 8002940:	b910      	cbnz	r0, 8002948 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002942:	2001      	movs	r0, #1
 8002944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002948:	4a40      	ldr	r2, [pc, #256]	; (8002a4c <HAL_RCC_ClockConfig+0x114>)
 800294a:	6813      	ldr	r3, [r2, #0]
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	428b      	cmp	r3, r1
 8002952:	d329      	bcc.n	80029a8 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002954:	6823      	ldr	r3, [r4, #0]
 8002956:	07d9      	lsls	r1, r3, #31
 8002958:	d431      	bmi.n	80029be <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800295a:	6821      	ldr	r1, [r4, #0]
 800295c:	078a      	lsls	r2, r1, #30
 800295e:	d45b      	bmi.n	8002a18 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002960:	4a3a      	ldr	r2, [pc, #232]	; (8002a4c <HAL_RCC_ClockConfig+0x114>)
 8002962:	6813      	ldr	r3, [r2, #0]
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	429e      	cmp	r6, r3
 800296a:	d35d      	bcc.n	8002a28 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800296c:	f011 0f04 	tst.w	r1, #4
 8002970:	4d37      	ldr	r5, [pc, #220]	; (8002a50 <HAL_RCC_ClockConfig+0x118>)
 8002972:	d164      	bne.n	8002a3e <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002974:	070b      	lsls	r3, r1, #28
 8002976:	d506      	bpl.n	8002986 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002978:	68ab      	ldr	r3, [r5, #8]
 800297a:	6922      	ldr	r2, [r4, #16]
 800297c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002980:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002984:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002986:	f7ff fd5d 	bl	8002444 <HAL_RCC_GetSysClockFreq>
 800298a:	68ab      	ldr	r3, [r5, #8]
 800298c:	4a31      	ldr	r2, [pc, #196]	; (8002a54 <HAL_RCC_ClockConfig+0x11c>)
 800298e:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8002992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002996:	5cd3      	ldrb	r3, [r2, r3]
 8002998:	f003 031f 	and.w	r3, r3, #31
 800299c:	40d8      	lsrs	r0, r3
 800299e:	4b2e      	ldr	r3, [pc, #184]	; (8002a58 <HAL_RCC_ClockConfig+0x120>)
 80029a0:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 80029a2:	2000      	movs	r0, #0
 80029a4:	f7fe b9b6 	b.w	8000d14 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a8:	6813      	ldr	r3, [r2, #0]
 80029aa:	f023 0307 	bic.w	r3, r3, #7
 80029ae:	430b      	orrs	r3, r1
 80029b0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b2:	6813      	ldr	r3, [r2, #0]
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	4299      	cmp	r1, r3
 80029ba:	d1c2      	bne.n	8002942 <HAL_RCC_ClockConfig+0xa>
 80029bc:	e7ca      	b.n	8002954 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029be:	6862      	ldr	r2, [r4, #4]
 80029c0:	4d23      	ldr	r5, [pc, #140]	; (8002a50 <HAL_RCC_ClockConfig+0x118>)
 80029c2:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029c4:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029c6:	d11b      	bne.n	8002a00 <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029c8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029cc:	d0b9      	beq.n	8002942 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029ce:	68ab      	ldr	r3, [r5, #8]
 80029d0:	f023 0303 	bic.w	r3, r3, #3
 80029d4:	4313      	orrs	r3, r2
 80029d6:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 80029d8:	f7fe f9d2 	bl	8000d80 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029dc:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80029e0:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e2:	68ab      	ldr	r3, [r5, #8]
 80029e4:	6862      	ldr	r2, [r4, #4]
 80029e6:	f003 030c 	and.w	r3, r3, #12
 80029ea:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80029ee:	d0b4      	beq.n	800295a <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029f0:	f7fe f9c6 	bl	8000d80 <HAL_GetTick>
 80029f4:	1bc0      	subs	r0, r0, r7
 80029f6:	4540      	cmp	r0, r8
 80029f8:	d9f3      	bls.n	80029e2 <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 80029fa:	2003      	movs	r0, #3
}
 80029fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a00:	2a02      	cmp	r2, #2
 8002a02:	d102      	bne.n	8002a0a <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a04:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002a08:	e7e0      	b.n	80029cc <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a0a:	b912      	cbnz	r2, 8002a12 <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a0c:	f013 0f02 	tst.w	r3, #2
 8002a10:	e7dc      	b.n	80029cc <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a12:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002a16:	e7d9      	b.n	80029cc <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a18:	4a0d      	ldr	r2, [pc, #52]	; (8002a50 <HAL_RCC_ClockConfig+0x118>)
 8002a1a:	68a0      	ldr	r0, [r4, #8]
 8002a1c:	6893      	ldr	r3, [r2, #8]
 8002a1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a22:	4303      	orrs	r3, r0
 8002a24:	6093      	str	r3, [r2, #8]
 8002a26:	e79b      	b.n	8002960 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a28:	6813      	ldr	r3, [r2, #0]
 8002a2a:	f023 0307 	bic.w	r3, r3, #7
 8002a2e:	4333      	orrs	r3, r6
 8002a30:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a32:	6813      	ldr	r3, [r2, #0]
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	429e      	cmp	r6, r3
 8002a3a:	d182      	bne.n	8002942 <HAL_RCC_ClockConfig+0xa>
 8002a3c:	e796      	b.n	800296c <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a3e:	68ab      	ldr	r3, [r5, #8]
 8002a40:	68e2      	ldr	r2, [r4, #12]
 8002a42:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002a46:	4313      	orrs	r3, r2
 8002a48:	60ab      	str	r3, [r5, #8]
 8002a4a:	e793      	b.n	8002974 <HAL_RCC_ClockConfig+0x3c>
 8002a4c:	40022000 	.word	0x40022000
 8002a50:	40021000 	.word	0x40021000
 8002a54:	0800551d 	.word	0x0800551d
 8002a58:	20000000 	.word	0x20000000

08002a5c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a5c:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002a5e:	4a06      	ldr	r2, [pc, #24]	; (8002a78 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002a66:	5cd3      	ldrb	r3, [r2, r3]
 8002a68:	4a04      	ldr	r2, [pc, #16]	; (8002a7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a6a:	6810      	ldr	r0, [r2, #0]
 8002a6c:	f003 031f 	and.w	r3, r3, #31
}
 8002a70:	40d8      	lsrs	r0, r3
 8002a72:	4770      	bx	lr
 8002a74:	40021000 	.word	0x40021000
 8002a78:	0800552d 	.word	0x0800552d
 8002a7c:	20000000 	.word	0x20000000

08002a80 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a80:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002a82:	4a06      	ldr	r2, [pc, #24]	; (8002a9c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002a8a:	5cd3      	ldrb	r3, [r2, r3]
 8002a8c:	4a04      	ldr	r2, [pc, #16]	; (8002aa0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a8e:	6810      	ldr	r0, [r2, #0]
 8002a90:	f003 031f 	and.w	r3, r3, #31
}
 8002a94:	40d8      	lsrs	r0, r3
 8002a96:	4770      	bx	lr
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	0800552d 	.word	0x0800552d
 8002aa0:	20000000 	.word	0x20000000

08002aa4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002aa6:	4b45      	ldr	r3, [pc, #276]	; (8002bbc <RCCEx_PLLSAI1_Config+0x118>)
 8002aa8:	68da      	ldr	r2, [r3, #12]
 8002aaa:	f012 0f03 	tst.w	r2, #3
{
 8002aae:	4605      	mov	r5, r0
 8002ab0:	460e      	mov	r6, r1
 8002ab2:	461c      	mov	r4, r3
 8002ab4:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ab6:	d02a      	beq.n	8002b0e <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ab8:	68da      	ldr	r2, [r3, #12]
 8002aba:	f002 0203 	and.w	r2, r2, #3
 8002abe:	4282      	cmp	r2, r0
 8002ac0:	d13c      	bne.n	8002b3c <RCCEx_PLLSAI1_Config+0x98>
       ||
 8002ac2:	2a00      	cmp	r2, #0
 8002ac4:	d03a      	beq.n	8002b3c <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002ac6:	68db      	ldr	r3, [r3, #12]
       ||
 8002ac8:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002aca:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002ace:	3301      	adds	r3, #1
       ||
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d133      	bne.n	8002b3c <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ad4:	6823      	ldr	r3, [r4, #0]
 8002ad6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ada:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002adc:	f7fe f950 	bl	8000d80 <HAL_GetTick>
 8002ae0:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ae2:	6823      	ldr	r3, [r4, #0]
 8002ae4:	011a      	lsls	r2, r3, #4
 8002ae6:	d432      	bmi.n	8002b4e <RCCEx_PLLSAI1_Config+0xaa>
 8002ae8:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002aea:	2e00      	cmp	r6, #0
 8002aec:	d036      	beq.n	8002b5c <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002aee:	2e01      	cmp	r6, #1
 8002af0:	d150      	bne.n	8002b94 <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002af2:	6922      	ldr	r2, [r4, #16]
 8002af4:	6928      	ldr	r0, [r5, #16]
 8002af6:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002afa:	0840      	lsrs	r0, r0, #1
 8002afc:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8002b00:	3801      	subs	r0, #1
 8002b02:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8002b06:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8002b0a:	6122      	str	r2, [r4, #16]
 8002b0c:	e032      	b.n	8002b74 <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 8002b0e:	2802      	cmp	r0, #2
 8002b10:	d010      	beq.n	8002b34 <RCCEx_PLLSAI1_Config+0x90>
 8002b12:	2803      	cmp	r0, #3
 8002b14:	d014      	beq.n	8002b40 <RCCEx_PLLSAI1_Config+0x9c>
 8002b16:	2801      	cmp	r0, #1
 8002b18:	d110      	bne.n	8002b3c <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	079f      	lsls	r7, r3, #30
 8002b1e:	d538      	bpl.n	8002b92 <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b20:	68e3      	ldr	r3, [r4, #12]
 8002b22:	686a      	ldr	r2, [r5, #4]
 8002b24:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8002b28:	3a01      	subs	r2, #1
 8002b2a:	4318      	orrs	r0, r3
 8002b2c:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8002b30:	60e0      	str	r0, [r4, #12]
 8002b32:	e7cf      	b.n	8002ad4 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b3a:	d1f1      	bne.n	8002b20 <RCCEx_PLLSAI1_Config+0x7c>
 8002b3c:	2001      	movs	r0, #1
 8002b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	0391      	lsls	r1, r2, #14
 8002b44:	d4ec      	bmi.n	8002b20 <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002b4c:	e7f5      	b.n	8002b3a <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b4e:	f7fe f917 	bl	8000d80 <HAL_GetTick>
 8002b52:	1bc0      	subs	r0, r0, r7
 8002b54:	2802      	cmp	r0, #2
 8002b56:	d9c4      	bls.n	8002ae2 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8002b58:	2003      	movs	r0, #3
 8002b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b5c:	6921      	ldr	r1, [r4, #16]
 8002b5e:	68eb      	ldr	r3, [r5, #12]
 8002b60:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8002b64:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8002b68:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8002b6c:	091b      	lsrs	r3, r3, #4
 8002b6e:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8002b72:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b74:	6823      	ldr	r3, [r4, #0]
 8002b76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b7a:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b7c:	f7fe f900 	bl	8000d80 <HAL_GetTick>
 8002b80:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b82:	6823      	ldr	r3, [r4, #0]
 8002b84:	011b      	lsls	r3, r3, #4
 8002b86:	d513      	bpl.n	8002bb0 <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b88:	6923      	ldr	r3, [r4, #16]
 8002b8a:	69aa      	ldr	r2, [r5, #24]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	6123      	str	r3, [r4, #16]
 8002b90:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8002b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b94:	6923      	ldr	r3, [r4, #16]
 8002b96:	6968      	ldr	r0, [r5, #20]
 8002b98:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b9c:	0840      	lsrs	r0, r0, #1
 8002b9e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ba2:	3801      	subs	r0, #1
 8002ba4:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8002ba8:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8002bac:	6123      	str	r3, [r4, #16]
 8002bae:	e7e1      	b.n	8002b74 <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bb0:	f7fe f8e6 	bl	8000d80 <HAL_GetTick>
 8002bb4:	1b80      	subs	r0, r0, r6
 8002bb6:	2802      	cmp	r0, #2
 8002bb8:	d9e3      	bls.n	8002b82 <RCCEx_PLLSAI1_Config+0xde>
 8002bba:	e7cd      	b.n	8002b58 <RCCEx_PLLSAI1_Config+0xb4>
 8002bbc:	40021000 	.word	0x40021000

08002bc0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bc2:	4b3d      	ldr	r3, [pc, #244]	; (8002cb8 <RCCEx_PLLSAI2_Config+0xf8>)
 8002bc4:	68da      	ldr	r2, [r3, #12]
 8002bc6:	f012 0f03 	tst.w	r2, #3
{
 8002bca:	4605      	mov	r5, r0
 8002bcc:	460e      	mov	r6, r1
 8002bce:	461c      	mov	r4, r3
 8002bd0:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bd2:	d028      	beq.n	8002c26 <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002bd4:	68da      	ldr	r2, [r3, #12]
 8002bd6:	f002 0203 	and.w	r2, r2, #3
 8002bda:	4282      	cmp	r2, r0
 8002bdc:	d13a      	bne.n	8002c54 <RCCEx_PLLSAI2_Config+0x94>
       ||
 8002bde:	2a00      	cmp	r2, #0
 8002be0:	d038      	beq.n	8002c54 <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002be2:	68db      	ldr	r3, [r3, #12]
       ||
 8002be4:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002be6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002bea:	3301      	adds	r3, #1
       ||
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d131      	bne.n	8002c54 <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002bf0:	6823      	ldr	r3, [r4, #0]
 8002bf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bf6:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bf8:	f7fe f8c2 	bl	8000d80 <HAL_GetTick>
 8002bfc:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bfe:	6823      	ldr	r3, [r4, #0]
 8002c00:	009a      	lsls	r2, r3, #2
 8002c02:	d430      	bmi.n	8002c66 <RCCEx_PLLSAI2_Config+0xa6>
 8002c04:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c06:	2e00      	cmp	r6, #0
 8002c08:	d034      	beq.n	8002c74 <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c0a:	6963      	ldr	r3, [r4, #20]
 8002c0c:	6929      	ldr	r1, [r5, #16]
 8002c0e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c12:	0849      	lsrs	r1, r1, #1
 8002c14:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c18:	3901      	subs	r1, #1
 8002c1a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002c1e:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8002c22:	6163      	str	r3, [r4, #20]
 8002c24:	e032      	b.n	8002c8c <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 8002c26:	2802      	cmp	r0, #2
 8002c28:	d010      	beq.n	8002c4c <RCCEx_PLLSAI2_Config+0x8c>
 8002c2a:	2803      	cmp	r0, #3
 8002c2c:	d014      	beq.n	8002c58 <RCCEx_PLLSAI2_Config+0x98>
 8002c2e:	2801      	cmp	r0, #1
 8002c30:	d110      	bne.n	8002c54 <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	079f      	lsls	r7, r3, #30
 8002c36:	d538      	bpl.n	8002caa <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c38:	68e3      	ldr	r3, [r4, #12]
 8002c3a:	686a      	ldr	r2, [r5, #4]
 8002c3c:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8002c40:	3a01      	subs	r2, #1
 8002c42:	4318      	orrs	r0, r3
 8002c44:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8002c48:	60e0      	str	r0, [r4, #12]
 8002c4a:	e7d1      	b.n	8002bf0 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c52:	d1f1      	bne.n	8002c38 <RCCEx_PLLSAI2_Config+0x78>
 8002c54:	2001      	movs	r0, #1
 8002c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	0391      	lsls	r1, r2, #14
 8002c5c:	d4ec      	bmi.n	8002c38 <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002c64:	e7f5      	b.n	8002c52 <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c66:	f7fe f88b 	bl	8000d80 <HAL_GetTick>
 8002c6a:	1bc0      	subs	r0, r0, r7
 8002c6c:	2802      	cmp	r0, #2
 8002c6e:	d9c6      	bls.n	8002bfe <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8002c70:	2003      	movs	r0, #3
 8002c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c74:	6962      	ldr	r2, [r4, #20]
 8002c76:	68eb      	ldr	r3, [r5, #12]
 8002c78:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8002c7c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002c80:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002c84:	091b      	lsrs	r3, r3, #4
 8002c86:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8002c8a:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c8c:	6823      	ldr	r3, [r4, #0]
 8002c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c92:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c94:	f7fe f874 	bl	8000d80 <HAL_GetTick>
 8002c98:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c9a:	6823      	ldr	r3, [r4, #0]
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	d505      	bpl.n	8002cac <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002ca0:	6963      	ldr	r3, [r4, #20]
 8002ca2:	696a      	ldr	r2, [r5, #20]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	6163      	str	r3, [r4, #20]
 8002ca8:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8002caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002cac:	f7fe f868 	bl	8000d80 <HAL_GetTick>
 8002cb0:	1b80      	subs	r0, r0, r6
 8002cb2:	2802      	cmp	r0, #2
 8002cb4:	d9f1      	bls.n	8002c9a <RCCEx_PLLSAI2_Config+0xda>
 8002cb6:	e7db      	b.n	8002c70 <RCCEx_PLLSAI2_Config+0xb0>
 8002cb8:	40021000 	.word	0x40021000

08002cbc <HAL_RCCEx_PeriphCLKConfig>:
{
 8002cbc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002cc0:	6806      	ldr	r6, [r0, #0]
 8002cc2:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8002cc6:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002cc8:	d024      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002cca:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8002ccc:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8002cd0:	d02c      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x70>
 8002cd2:	d802      	bhi.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002cd4:	b1c1      	cbz	r1, 8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 8002cd6:	2601      	movs	r6, #1
 8002cd8:	e01c      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002cda:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8002cde:	d00d      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002ce0:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8002ce4:	d1f7      	bne.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ce6:	4a4d      	ldr	r2, [pc, #308]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ce8:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002cea:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002cee:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002cf2:	430b      	orrs	r3, r1
 8002cf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002cf8:	2600      	movs	r6, #0
 8002cfa:	e00b      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002cfc:	4a47      	ldr	r2, [pc, #284]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cfe:	68d3      	ldr	r3, [r2, #12]
 8002d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d04:	60d3      	str	r3, [r2, #12]
      break;
 8002d06:	e7ee      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d08:	3004      	adds	r0, #4
 8002d0a:	f7ff fecb 	bl	8002aa4 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d0e:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002d10:	2800      	cmp	r0, #0
 8002d12:	d0e8      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002d14:	6823      	ldr	r3, [r4, #0]
 8002d16:	04d8      	lsls	r0, r3, #19
 8002d18:	d506      	bpl.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002d1a:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002d1c:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8002d20:	d074      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x150>
 8002d22:	d808      	bhi.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002d24:	b1a9      	cbz	r1, 8002d52 <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 8002d26:	2601      	movs	r6, #1
 8002d28:	4635      	mov	r5, r6
 8002d2a:	e021      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	3020      	adds	r0, #32
 8002d30:	f7ff ff46 	bl	8002bc0 <RCCEx_PLLSAI2_Config>
 8002d34:	e7eb      	b.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002d36:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8002d3a:	d004      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8002d3c:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8002d40:	d1f1      	bne.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002d42:	4635      	mov	r5, r6
 8002d44:	e009      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d46:	4a35      	ldr	r2, [pc, #212]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d48:	68d3      	ldr	r3, [r2, #12]
 8002d4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d4e:	60d3      	str	r3, [r2, #12]
 8002d50:	e7f7      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d52:	1d20      	adds	r0, r4, #4
 8002d54:	f7ff fea6 	bl	8002aa4 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d58:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002d5a:	2d00      	cmp	r5, #0
 8002d5c:	d15c      	bne.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d5e:	4a2f      	ldr	r2, [pc, #188]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d60:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002d62:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002d66:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002d6a:	430b      	orrs	r3, r1
 8002d6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d70:	6823      	ldr	r3, [r4, #0]
 8002d72:	0399      	lsls	r1, r3, #14
 8002d74:	f140 814f 	bpl.w	8003016 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d78:	4f28      	ldr	r7, [pc, #160]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d7c:	00da      	lsls	r2, r3, #3
 8002d7e:	f140 8176 	bpl.w	800306e <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 8002d82:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d86:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8002e20 <HAL_RCCEx_PeriphCLKConfig+0x164>
 8002d8a:	f8d9 3000 	ldr.w	r3, [r9]
 8002d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d92:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8002d96:	f7fd fff3 	bl	8000d80 <HAL_GetTick>
 8002d9a:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d9c:	f8d9 3000 	ldr.w	r3, [r9]
 8002da0:	05db      	lsls	r3, r3, #23
 8002da2:	d53f      	bpl.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 8002da4:	2d00      	cmp	r5, #0
 8002da6:	d144      	bne.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002da8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002dac:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002db0:	d015      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x122>
 8002db2:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d011      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002dba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8002dbe:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002dc2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002dc6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002dca:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002dce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002dd2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002dd6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8002dda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002dde:	07d8      	lsls	r0, r3, #31
 8002de0:	d509      	bpl.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 8002de2:	f7fd ffcd 	bl	8000d80 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002de6:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002dea:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002df0:	0799      	lsls	r1, r3, #30
 8002df2:	f140 8109 	bpl.w	8003008 <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002df6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002dfa:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002dfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e02:	4313      	orrs	r3, r2
 8002e04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e08:	4635      	mov	r5, r6
 8002e0a:	e012      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	f104 0020 	add.w	r0, r4, #32
 8002e12:	f7ff fed5 	bl	8002bc0 <RCCEx_PLLSAI2_Config>
 8002e16:	e79f      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8002e18:	462e      	mov	r6, r5
 8002e1a:	e7a9      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e24:	f7fd ffac 	bl	8000d80 <HAL_GetTick>
 8002e28:	eba0 000a 	sub.w	r0, r0, sl
 8002e2c:	2802      	cmp	r0, #2
 8002e2e:	d9b5      	bls.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 8002e30:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8002e32:	f1b8 0f00 	cmp.w	r8, #0
 8002e36:	d003      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e3e:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e40:	6823      	ldr	r3, [r4, #0]
 8002e42:	07da      	lsls	r2, r3, #31
 8002e44:	d508      	bpl.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e46:	4990      	ldr	r1, [pc, #576]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002e48:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002e4a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002e4e:	f022 0203 	bic.w	r2, r2, #3
 8002e52:	4302      	orrs	r2, r0
 8002e54:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e58:	079f      	lsls	r7, r3, #30
 8002e5a:	d508      	bpl.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e5c:	498a      	ldr	r1, [pc, #552]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002e5e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002e60:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002e64:	f022 020c 	bic.w	r2, r2, #12
 8002e68:	4302      	orrs	r2, r0
 8002e6a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e6e:	075e      	lsls	r6, r3, #29
 8002e70:	d508      	bpl.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e72:	4985      	ldr	r1, [pc, #532]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002e74:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002e76:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002e7a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002e7e:	4302      	orrs	r2, r0
 8002e80:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e84:	0718      	lsls	r0, r3, #28
 8002e86:	d508      	bpl.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e88:	497f      	ldr	r1, [pc, #508]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002e8a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002e8c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002e90:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002e94:	4302      	orrs	r2, r0
 8002e96:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e9a:	06d9      	lsls	r1, r3, #27
 8002e9c:	d508      	bpl.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e9e:	497a      	ldr	r1, [pc, #488]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002ea0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002ea2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002ea6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002eaa:	4302      	orrs	r2, r0
 8002eac:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002eb0:	069a      	lsls	r2, r3, #26
 8002eb2:	d508      	bpl.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002eb4:	4974      	ldr	r1, [pc, #464]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002eb6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002eb8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002ebc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002ec0:	4302      	orrs	r2, r0
 8002ec2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ec6:	059f      	lsls	r7, r3, #22
 8002ec8:	d508      	bpl.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002eca:	496f      	ldr	r1, [pc, #444]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002ecc:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002ece:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002ed2:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002ed6:	4302      	orrs	r2, r0
 8002ed8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002edc:	055e      	lsls	r6, r3, #21
 8002ede:	d508      	bpl.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ee0:	4969      	ldr	r1, [pc, #420]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002ee2:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002ee4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002ee8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002eec:	4302      	orrs	r2, r0
 8002eee:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ef2:	0658      	lsls	r0, r3, #25
 8002ef4:	d508      	bpl.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ef6:	4964      	ldr	r1, [pc, #400]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002ef8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002efa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002efe:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002f02:	4302      	orrs	r2, r0
 8002f04:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f08:	0619      	lsls	r1, r3, #24
 8002f0a:	d508      	bpl.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f0c:	495e      	ldr	r1, [pc, #376]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002f0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f10:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002f14:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002f18:	4302      	orrs	r2, r0
 8002f1a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f1e:	05da      	lsls	r2, r3, #23
 8002f20:	d508      	bpl.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f22:	4959      	ldr	r1, [pc, #356]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002f24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f26:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002f2a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002f2e:	4302      	orrs	r2, r0
 8002f30:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f34:	049b      	lsls	r3, r3, #18
 8002f36:	d50f      	bpl.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f38:	4a53      	ldr	r2, [pc, #332]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002f3a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002f3c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002f40:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002f44:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f46:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f4a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f4e:	d164      	bne.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f50:	68d3      	ldr	r3, [r2, #12]
 8002f52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f56:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002f58:	6823      	ldr	r3, [r4, #0]
 8002f5a:	031f      	lsls	r7, r3, #12
 8002f5c:	d50f      	bpl.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f5e:	4a4a      	ldr	r2, [pc, #296]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002f60:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8002f62:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002f66:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002f6a:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002f6c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002f74:	d15c      	bne.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f76:	68d3      	ldr	r3, [r2, #12]
 8002f78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f7c:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f7e:	6823      	ldr	r3, [r4, #0]
 8002f80:	035e      	lsls	r6, r3, #13
 8002f82:	d50f      	bpl.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f84:	4a40      	ldr	r2, [pc, #256]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002f86:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002f88:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002f8c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002f90:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f92:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f96:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f9a:	d154      	bne.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f9c:	68d3      	ldr	r3, [r2, #12]
 8002f9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fa2:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fa4:	6823      	ldr	r3, [r4, #0]
 8002fa6:	0458      	lsls	r0, r3, #17
 8002fa8:	d512      	bpl.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002faa:	4937      	ldr	r1, [pc, #220]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002fac:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8002fae:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002fb2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002fb6:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002fb8:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002fc0:	d14c      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002fc2:	2102      	movs	r1, #2
 8002fc4:	1d20      	adds	r0, r4, #4
 8002fc6:	f7ff fd6d 	bl	8002aa4 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002fca:	2800      	cmp	r0, #0
 8002fcc:	bf18      	it	ne
 8002fce:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002fd0:	6822      	ldr	r2, [r4, #0]
 8002fd2:	0411      	lsls	r1, r2, #16
 8002fd4:	d508      	bpl.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002fd6:	492c      	ldr	r1, [pc, #176]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002fd8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002fda:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002fde:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002fe2:	4303      	orrs	r3, r0
 8002fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002fe8:	03d3      	lsls	r3, r2, #15
 8002fea:	d509      	bpl.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002fec:	4a26      	ldr	r2, [pc, #152]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002fee:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002ff2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002ff6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ffa:	430b      	orrs	r3, r1
 8002ffc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8003000:	4628      	mov	r0, r5
 8003002:	b002      	add	sp, #8
 8003004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003008:	f7fd feba 	bl	8000d80 <HAL_GetTick>
 800300c:	1b40      	subs	r0, r0, r5
 800300e:	4548      	cmp	r0, r9
 8003010:	f67f aeec 	bls.w	8002dec <HAL_RCCEx_PeriphCLKConfig+0x130>
 8003014:	e70c      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8003016:	4635      	mov	r5, r6
 8003018:	e712      	b.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800301a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800301e:	d19b      	bne.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003020:	2101      	movs	r1, #1
 8003022:	1d20      	adds	r0, r4, #4
 8003024:	f7ff fd3e 	bl	8002aa4 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8003028:	2800      	cmp	r0, #0
 800302a:	bf18      	it	ne
 800302c:	4605      	movne	r5, r0
 800302e:	e793      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003030:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8003034:	d1a3      	bne.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003036:	2101      	movs	r1, #1
 8003038:	1d20      	adds	r0, r4, #4
 800303a:	f7ff fd33 	bl	8002aa4 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800303e:	2800      	cmp	r0, #0
 8003040:	bf18      	it	ne
 8003042:	4605      	movne	r5, r0
 8003044:	e79b      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003046:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800304a:	d1ab      	bne.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800304c:	2101      	movs	r1, #1
 800304e:	1d20      	adds	r0, r4, #4
 8003050:	f7ff fd28 	bl	8002aa4 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003054:	2800      	cmp	r0, #0
 8003056:	bf18      	it	ne
 8003058:	4605      	movne	r5, r0
 800305a:	e7a3      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800305c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8003060:	d1b6      	bne.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003062:	2102      	movs	r1, #2
 8003064:	f104 0020 	add.w	r0, r4, #32
 8003068:	f7ff fdaa 	bl	8002bc0 <RCCEx_PLLSAI2_Config>
 800306c:	e7ad      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800306e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003074:	65bb      	str	r3, [r7, #88]	; 0x58
 8003076:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307c:	9301      	str	r3, [sp, #4]
 800307e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003080:	f04f 0801 	mov.w	r8, #1
 8003084:	e67f      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0xca>
 8003086:	bf00      	nop
 8003088:	40021000 	.word	0x40021000

0800308c <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800308c:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800308e:	69c1      	ldr	r1, [r0, #28]
{
 8003090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003092:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003094:	6883      	ldr	r3, [r0, #8]
 8003096:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003098:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800309a:	4303      	orrs	r3, r0
 800309c:	6960      	ldr	r0, [r4, #20]
 800309e:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030a0:	48ba      	ldr	r0, [pc, #744]	; (800338c <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030a2:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030a4:	4028      	ands	r0, r5
 80030a6:	4303      	orrs	r3, r0
 80030a8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030aa:	6853      	ldr	r3, [r2, #4]
 80030ac:	68e0      	ldr	r0, [r4, #12]
 80030ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030b2:	4303      	orrs	r3, r0
 80030b4:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030b6:	4bb6      	ldr	r3, [pc, #728]	; (8003390 <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030b8:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030ba:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 80030bc:	bf1c      	itt	ne
 80030be:	6a23      	ldrne	r3, [r4, #32]
 80030c0:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030c2:	6893      	ldr	r3, [r2, #8]
 80030c4:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80030c8:	4303      	orrs	r3, r0
 80030ca:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030cc:	4bb1      	ldr	r3, [pc, #708]	; (8003394 <UART_SetConfig+0x308>)
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d119      	bne.n	8003106 <UART_SetConfig+0x7a>
 80030d2:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80030d6:	4ab0      	ldr	r2, [pc, #704]	; (8003398 <UART_SetConfig+0x30c>)
 80030d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030dc:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030e0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80030e4:	5cd3      	ldrb	r3, [r2, r3]
 80030e6:	f040 8138 	bne.w	800335a <UART_SetConfig+0x2ce>
  {
    switch (clocksource)
 80030ea:	2b08      	cmp	r3, #8
 80030ec:	f200 808f 	bhi.w	800320e <UART_SetConfig+0x182>
 80030f0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80030f4:	00ca011a 	.word	0x00ca011a
 80030f8:	008d00f9 	.word	0x008d00f9
 80030fc:	008d0114 	.word	0x008d0114
 8003100:	008d008d 	.word	0x008d008d
 8003104:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003106:	4ba5      	ldr	r3, [pc, #660]	; (800339c <UART_SetConfig+0x310>)
 8003108:	429a      	cmp	r2, r3
 800310a:	d107      	bne.n	800311c <UART_SetConfig+0x90>
 800310c:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8003110:	4aa3      	ldr	r2, [pc, #652]	; (80033a0 <UART_SetConfig+0x314>)
 8003112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003116:	f003 030c 	and.w	r3, r3, #12
 800311a:	e7e1      	b.n	80030e0 <UART_SetConfig+0x54>
 800311c:	4ba1      	ldr	r3, [pc, #644]	; (80033a4 <UART_SetConfig+0x318>)
 800311e:	429a      	cmp	r2, r3
 8003120:	d123      	bne.n	800316a <UART_SetConfig+0xde>
 8003122:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8003126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800312a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800312e:	2b10      	cmp	r3, #16
 8003130:	f000 80f1 	beq.w	8003316 <UART_SetConfig+0x28a>
 8003134:	d80b      	bhi.n	800314e <UART_SetConfig+0xc2>
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 80f3 	beq.w	8003322 <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800313c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003140:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003144:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003148:	f000 80f8 	beq.w	800333c <UART_SetConfig+0x2b0>
 800314c:	e0a8      	b.n	80032a0 <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800314e:	2b20      	cmp	r3, #32
 8003150:	f000 80c6 	beq.w	80032e0 <UART_SetConfig+0x254>
 8003154:	2b30      	cmp	r3, #48	; 0x30
 8003156:	d1f1      	bne.n	800313c <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003158:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800315c:	f040 80b8 	bne.w	80032d0 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003160:	6860      	ldr	r0, [r4, #4]
 8003162:	0843      	lsrs	r3, r0, #1
 8003164:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003168:	e0c3      	b.n	80032f2 <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800316a:	4b8f      	ldr	r3, [pc, #572]	; (80033a8 <UART_SetConfig+0x31c>)
 800316c:	429a      	cmp	r2, r3
 800316e:	d11e      	bne.n	80031ae <UART_SetConfig+0x122>
 8003170:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8003174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003178:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800317c:	2b40      	cmp	r3, #64	; 0x40
 800317e:	f000 80bb 	beq.w	80032f8 <UART_SetConfig+0x26c>
 8003182:	d80a      	bhi.n	800319a <UART_SetConfig+0x10e>
 8003184:	b97b      	cbnz	r3, 80031a6 <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8003186:	4b82      	ldr	r3, [pc, #520]	; (8003390 <UART_SetConfig+0x304>)
 8003188:	429a      	cmp	r2, r3
 800318a:	f040 80ca 	bne.w	8003322 <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800318e:	f7ff fc65 	bl	8002a5c <HAL_RCC_GetPCLK1Freq>
        break;
 8003192:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8003194:	bbb0      	cbnz	r0, 8003204 <UART_SetConfig+0x178>
 8003196:	4602      	mov	r2, r0
 8003198:	e03a      	b.n	8003210 <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800319a:	2b80      	cmp	r3, #128	; 0x80
 800319c:	f000 809d 	beq.w	80032da <UART_SetConfig+0x24e>
 80031a0:	2bc0      	cmp	r3, #192	; 0xc0
 80031a2:	f000 80b0 	beq.w	8003306 <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 80031a6:	4b7a      	ldr	r3, [pc, #488]	; (8003390 <UART_SetConfig+0x304>)
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d1c7      	bne.n	800313c <UART_SetConfig+0xb0>
 80031ac:	e02f      	b.n	800320e <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031ae:	4b7f      	ldr	r3, [pc, #508]	; (80033ac <UART_SetConfig+0x320>)
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d111      	bne.n	80031d8 <UART_SetConfig+0x14c>
 80031b4:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 80031b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031c4:	f000 8098 	beq.w	80032f8 <UART_SetConfig+0x26c>
 80031c8:	d9dc      	bls.n	8003184 <UART_SetConfig+0xf8>
 80031ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031ce:	f000 8084 	beq.w	80032da <UART_SetConfig+0x24e>
 80031d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031d6:	e7e4      	b.n	80031a2 <UART_SetConfig+0x116>
 80031d8:	4b6d      	ldr	r3, [pc, #436]	; (8003390 <UART_SetConfig+0x304>)
 80031da:	429a      	cmp	r2, r3
 80031dc:	d1ae      	bne.n	800313c <UART_SetConfig+0xb0>
 80031de:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 80031e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80031ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ee:	f000 8083 	beq.w	80032f8 <UART_SetConfig+0x26c>
 80031f2:	d9c7      	bls.n	8003184 <UART_SetConfig+0xf8>
 80031f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031f8:	d06f      	beq.n	80032da <UART_SetConfig+0x24e>
 80031fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031fe:	e7d0      	b.n	80031a2 <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003200:	486b      	ldr	r0, [pc, #428]	; (80033b0 <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 8003202:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8003204:	6862      	ldr	r2, [r4, #4]
 8003206:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800320a:	4281      	cmp	r1, r0
 800320c:	d905      	bls.n	800321a <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 800320e:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003210:	2300      	movs	r3, #0
 8003212:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8003214:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8003216:	4610      	mov	r0, r2
 8003218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 800321a:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800321e:	d8f6      	bhi.n	800320e <UART_SetConfig+0x182>
        switch (clocksource)
 8003220:	2b08      	cmp	r3, #8
 8003222:	d82e      	bhi.n	8003282 <UART_SetConfig+0x1f6>
 8003224:	e8df f003 	tbb	[pc, r3]
 8003228:	2d1c2d05 	.word	0x2d1c2d05
 800322c:	2d2d2d24 	.word	0x2d2d2d24
 8003230:	27          	.byte	0x27
 8003231:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003232:	f7ff fc13 	bl	8002a5c <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003236:	6862      	ldr	r2, [r4, #4]
 8003238:	f44f 7180 	mov.w	r1, #256	; 0x100
 800323c:	0856      	lsrs	r6, r2, #1
 800323e:	2700      	movs	r7, #0
 8003240:	fbe1 6700 	umlal	r6, r7, r1, r0
 8003244:	2300      	movs	r3, #0
 8003246:	4630      	mov	r0, r6
 8003248:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800324a:	f7fd fbdb 	bl	8000a04 <__aeabi_uldivmod>
            break;
 800324e:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003250:	4b58      	ldr	r3, [pc, #352]	; (80033b4 <UART_SetConfig+0x328>)
 8003252:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8003256:	4299      	cmp	r1, r3
 8003258:	d8d9      	bhi.n	800320e <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 800325a:	6823      	ldr	r3, [r4, #0]
 800325c:	60d8      	str	r0, [r3, #12]
 800325e:	e7d7      	b.n	8003210 <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8003260:	4855      	ldr	r0, [pc, #340]	; (80033b8 <UART_SetConfig+0x32c>)
 8003262:	0855      	lsrs	r5, r2, #1
 8003264:	2300      	movs	r3, #0
 8003266:	2100      	movs	r1, #0
 8003268:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800326a:	f141 0100 	adc.w	r1, r1, #0
 800326e:	e7ec      	b.n	800324a <UART_SetConfig+0x1be>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003270:	f7ff f8e8 	bl	8002444 <HAL_RCC_GetSysClockFreq>
 8003274:	e7df      	b.n	8003236 <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003276:	0850      	lsrs	r0, r2, #1
 8003278:	2100      	movs	r1, #0
 800327a:	2300      	movs	r3, #0
 800327c:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8003280:	e7f3      	b.n	800326a <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 8003282:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003284:	2000      	movs	r0, #0
 8003286:	e7e3      	b.n	8003250 <UART_SetConfig+0x1c4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003288:	f7ff fbfa 	bl	8002a80 <HAL_RCC_GetPCLK2Freq>
 800328c:	e04e      	b.n	800332c <UART_SetConfig+0x2a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800328e:	f7ff fbe5 	bl	8002a5c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003292:	6862      	ldr	r2, [r4, #4]
 8003294:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8003298:	fbb3 f3f2 	udiv	r3, r3, r2
 800329c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800329e:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032a0:	f1a3 0010 	sub.w	r0, r3, #16
 80032a4:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80032a8:	4288      	cmp	r0, r1
 80032aa:	d8b0      	bhi.n	800320e <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 80032ac:	6821      	ldr	r1, [r4, #0]
 80032ae:	60cb      	str	r3, [r1, #12]
 80032b0:	e7ae      	b.n	8003210 <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80032b2:	f7ff fbe5 	bl	8002a80 <HAL_RCC_GetPCLK2Freq>
 80032b6:	e7ec      	b.n	8003292 <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80032b8:	6860      	ldr	r0, [r4, #4]
 80032ba:	0843      	lsrs	r3, r0, #1
 80032bc:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80032c0:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80032c4:	fbb3 f3f0 	udiv	r3, r3, r0
 80032c8:	e7e8      	b.n	800329c <UART_SetConfig+0x210>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80032ca:	f7ff f8bb 	bl	8002444 <HAL_RCC_GetSysClockFreq>
 80032ce:	e7e0      	b.n	8003292 <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80032d0:	6860      	ldr	r0, [r4, #4]
 80032d2:	0843      	lsrs	r3, r0, #1
 80032d4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80032d8:	e7f4      	b.n	80032c4 <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 80032da:	4b2d      	ldr	r3, [pc, #180]	; (8003390 <UART_SetConfig+0x304>)
 80032dc:	429a      	cmp	r2, r3
 80032de:	d08f      	beq.n	8003200 <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032e0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80032e4:	d1e8      	bne.n	80032b8 <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80032e6:	6860      	ldr	r0, [r4, #4]
 80032e8:	0843      	lsrs	r3, r0, #1
 80032ea:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80032ee:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80032f2:	fbb3 f3f0 	udiv	r3, r3, r0
 80032f6:	e01f      	b.n	8003338 <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 80032f8:	4b25      	ldr	r3, [pc, #148]	; (8003390 <UART_SetConfig+0x304>)
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d10b      	bne.n	8003316 <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80032fe:	f7ff f8a1 	bl	8002444 <HAL_RCC_GetSysClockFreq>
        break;
 8003302:	2304      	movs	r3, #4
 8003304:	e746      	b.n	8003194 <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 8003306:	4b22      	ldr	r3, [pc, #136]	; (8003390 <UART_SetConfig+0x304>)
 8003308:	429a      	cmp	r2, r3
 800330a:	f47f af25 	bne.w	8003158 <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800330e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 8003312:	2308      	movs	r3, #8
 8003314:	e776      	b.n	8003204 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003316:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800331a:	d1d6      	bne.n	80032ca <UART_SetConfig+0x23e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800331c:	f7ff f892 	bl	8002444 <HAL_RCC_GetSysClockFreq>
 8003320:	e004      	b.n	800332c <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003322:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003326:	d1b2      	bne.n	800328e <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003328:	f7ff fb98 	bl	8002a5c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800332c:	6861      	ldr	r1, [r4, #4]
 800332e:	084a      	lsrs	r2, r1, #1
 8003330:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8003334:	fbb3 f3f1 	udiv	r3, r3, r1
 8003338:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800333a:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800333c:	f1a3 0010 	sub.w	r0, r3, #16
 8003340:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8003344:	4288      	cmp	r0, r1
 8003346:	f63f af62 	bhi.w	800320e <UART_SetConfig+0x182>
      brrtemp = usartdiv & 0xFFF0U;
 800334a:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 800334e:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003350:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8003354:	430b      	orrs	r3, r1
 8003356:	60c3      	str	r3, [r0, #12]
 8003358:	e75a      	b.n	8003210 <UART_SetConfig+0x184>
    switch (clocksource)
 800335a:	2b08      	cmp	r3, #8
 800335c:	f63f af57 	bhi.w	800320e <UART_SetConfig+0x182>
 8003360:	a201      	add	r2, pc, #4	; (adr r2, 8003368 <UART_SetConfig+0x2dc>)
 8003362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003366:	bf00      	nop
 8003368:	0800328f 	.word	0x0800328f
 800336c:	080032b3 	.word	0x080032b3
 8003370:	080032b9 	.word	0x080032b9
 8003374:	0800320f 	.word	0x0800320f
 8003378:	080032cb 	.word	0x080032cb
 800337c:	0800320f 	.word	0x0800320f
 8003380:	0800320f 	.word	0x0800320f
 8003384:	0800320f 	.word	0x0800320f
 8003388:	080032d1 	.word	0x080032d1
 800338c:	efff69f3 	.word	0xefff69f3
 8003390:	40008000 	.word	0x40008000
 8003394:	40013800 	.word	0x40013800
 8003398:	08005408 	.word	0x08005408
 800339c:	40004400 	.word	0x40004400
 80033a0:	0800540c 	.word	0x0800540c
 80033a4:	40004800 	.word	0x40004800
 80033a8:	40004c00 	.word	0x40004c00
 80033ac:	40005000 	.word	0x40005000
 80033b0:	00f42400 	.word	0x00f42400
 80033b4:	000ffcff 	.word	0x000ffcff
 80033b8:	f4240000 	.word	0xf4240000

080033bc <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80033be:	07da      	lsls	r2, r3, #31
{
 80033c0:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033c2:	d506      	bpl.n	80033d2 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033c4:	6801      	ldr	r1, [r0, #0]
 80033c6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80033c8:	684a      	ldr	r2, [r1, #4]
 80033ca:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80033ce:	4322      	orrs	r2, r4
 80033d0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033d2:	079c      	lsls	r4, r3, #30
 80033d4:	d506      	bpl.n	80033e4 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033d6:	6801      	ldr	r1, [r0, #0]
 80033d8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80033da:	684a      	ldr	r2, [r1, #4]
 80033dc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80033e0:	4322      	orrs	r2, r4
 80033e2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033e4:	0759      	lsls	r1, r3, #29
 80033e6:	d506      	bpl.n	80033f6 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033e8:	6801      	ldr	r1, [r0, #0]
 80033ea:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80033ec:	684a      	ldr	r2, [r1, #4]
 80033ee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80033f2:	4322      	orrs	r2, r4
 80033f4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033f6:	071a      	lsls	r2, r3, #28
 80033f8:	d506      	bpl.n	8003408 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033fa:	6801      	ldr	r1, [r0, #0]
 80033fc:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80033fe:	684a      	ldr	r2, [r1, #4]
 8003400:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003404:	4322      	orrs	r2, r4
 8003406:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003408:	06dc      	lsls	r4, r3, #27
 800340a:	d506      	bpl.n	800341a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800340c:	6801      	ldr	r1, [r0, #0]
 800340e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003410:	688a      	ldr	r2, [r1, #8]
 8003412:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003416:	4322      	orrs	r2, r4
 8003418:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800341a:	0699      	lsls	r1, r3, #26
 800341c:	d506      	bpl.n	800342c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800341e:	6801      	ldr	r1, [r0, #0]
 8003420:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003422:	688a      	ldr	r2, [r1, #8]
 8003424:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003428:	4322      	orrs	r2, r4
 800342a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800342c:	065a      	lsls	r2, r3, #25
 800342e:	d50f      	bpl.n	8003450 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003430:	6801      	ldr	r1, [r0, #0]
 8003432:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003434:	684a      	ldr	r2, [r1, #4]
 8003436:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800343a:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800343c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003440:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003442:	d105      	bne.n	8003450 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003444:	684a      	ldr	r2, [r1, #4]
 8003446:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003448:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800344c:	4322      	orrs	r2, r4
 800344e:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003450:	061b      	lsls	r3, r3, #24
 8003452:	d506      	bpl.n	8003462 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003454:	6802      	ldr	r2, [r0, #0]
 8003456:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003458:	6853      	ldr	r3, [r2, #4]
 800345a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800345e:	430b      	orrs	r3, r1
 8003460:	6053      	str	r3, [r2, #4]
 8003462:	bd10      	pop	{r4, pc}

08003464 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003468:	9d06      	ldr	r5, [sp, #24]
 800346a:	4604      	mov	r4, r0
 800346c:	460f      	mov	r7, r1
 800346e:	4616      	mov	r6, r2
 8003470:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003472:	6821      	ldr	r1, [r4, #0]
 8003474:	69ca      	ldr	r2, [r1, #28]
 8003476:	ea37 0302 	bics.w	r3, r7, r2
 800347a:	bf0c      	ite	eq
 800347c:	2201      	moveq	r2, #1
 800347e:	2200      	movne	r2, #0
 8003480:	42b2      	cmp	r2, r6
 8003482:	d002      	beq.n	800348a <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003484:	2000      	movs	r0, #0
}
 8003486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800348a:	1c6b      	adds	r3, r5, #1
 800348c:	d0f2      	beq.n	8003474 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800348e:	b99d      	cbnz	r5, 80034b8 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003490:	6823      	ldr	r3, [r4, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003498:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	f022 0201 	bic.w	r2, r2, #1
 80034a0:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80034a2:	2320      	movs	r3, #32
 80034a4:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 80034a8:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 80034ac:	2300      	movs	r3, #0
 80034ae:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 80034b2:	2003      	movs	r0, #3
 80034b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80034b8:	f7fd fc62 	bl	8000d80 <HAL_GetTick>
 80034bc:	eba0 0008 	sub.w	r0, r0, r8
 80034c0:	4285      	cmp	r5, r0
 80034c2:	d2d6      	bcs.n	8003472 <UART_WaitOnFlagUntilTimeout+0xe>
 80034c4:	e7e4      	b.n	8003490 <UART_WaitOnFlagUntilTimeout+0x2c>

080034c6 <UART_CheckIdleState>:
{
 80034c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80034c8:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ca:	2600      	movs	r6, #0
 80034cc:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 80034ce:	f7fd fc57 	bl	8000d80 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034d2:	6823      	ldr	r3, [r4, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 80034d8:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034da:	d417      	bmi.n	800350c <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034dc:	6823      	ldr	r3, [r4, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	075b      	lsls	r3, r3, #29
 80034e2:	d50a      	bpl.n	80034fa <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	2200      	movs	r2, #0
 80034ec:	462b      	mov	r3, r5
 80034ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034f2:	4620      	mov	r0, r4
 80034f4:	f7ff ffb6 	bl	8003464 <UART_WaitOnFlagUntilTimeout>
 80034f8:	b9a0      	cbnz	r0, 8003524 <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 80034fa:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80034fc:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80034fe:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 8003502:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8003506:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 800350a:	e00c      	b.n	8003526 <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800350c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	4632      	mov	r2, r6
 8003514:	4603      	mov	r3, r0
 8003516:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800351a:	4620      	mov	r0, r4
 800351c:	f7ff ffa2 	bl	8003464 <UART_WaitOnFlagUntilTimeout>
 8003520:	2800      	cmp	r0, #0
 8003522:	d0db      	beq.n	80034dc <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8003524:	2003      	movs	r0, #3
}
 8003526:	b002      	add	sp, #8
 8003528:	bd70      	pop	{r4, r5, r6, pc}

0800352a <HAL_UART_Init>:
{
 800352a:	b510      	push	{r4, lr}
  if (huart == NULL)
 800352c:	4604      	mov	r4, r0
 800352e:	b360      	cbz	r0, 800358a <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003530:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8003534:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003538:	b91b      	cbnz	r3, 8003542 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800353a:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800353e:	f000 ff6d 	bl	800441c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003542:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003544:	2324      	movs	r3, #36	; 0x24
 8003546:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 800354a:	6813      	ldr	r3, [r2, #0]
 800354c:	f023 0301 	bic.w	r3, r3, #1
 8003550:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003552:	4620      	mov	r0, r4
 8003554:	f7ff fd9a 	bl	800308c <UART_SetConfig>
 8003558:	2801      	cmp	r0, #1
 800355a:	d016      	beq.n	800358a <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800355c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800355e:	b113      	cbz	r3, 8003566 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8003560:	4620      	mov	r0, r4
 8003562:	f7ff ff2b 	bl	80033bc <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003566:	6823      	ldr	r3, [r4, #0]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800356e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003570:	689a      	ldr	r2, [r3, #8]
 8003572:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003576:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800357e:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8003580:	601a      	str	r2, [r3, #0]
}
 8003582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8003586:	f7ff bf9e 	b.w	80034c6 <UART_CheckIdleState>
}
 800358a:	2001      	movs	r0, #1
 800358c:	bd10      	pop	{r4, pc}
	...

08003590 <ES2_writeByte>:

#define ES2_DELAY 100

// Write one byte via TWI
void ES2_writeByte(uint8_t slaveAddress, uint8_t registerAddress, uint8_t data)
{
 8003590:	b530      	push	{r4, r5, lr}
 8003592:	b087      	sub	sp, #28
 8003594:	ac06      	add	r4, sp, #24
	HAL_I2C_Mem_Write(&hi2c3, slaveAddress << 1, registerAddress, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8003596:	2301      	movs	r3, #1
{
 8003598:	f804 2d01 	strb.w	r2, [r4, #-1]!
	HAL_I2C_Mem_Write(&hi2c3, slaveAddress << 1, registerAddress, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 800359c:	2564      	movs	r5, #100	; 0x64
 800359e:	460a      	mov	r2, r1
 80035a0:	9301      	str	r3, [sp, #4]
 80035a2:	fa00 f103 	lsl.w	r1, r0, r3
 80035a6:	9502      	str	r5, [sp, #8]
 80035a8:	9400      	str	r4, [sp, #0]
 80035aa:	4804      	ldr	r0, [pc, #16]	; (80035bc <ES2_writeByte+0x2c>)
 80035ac:	f7fe fcb6 	bl	8001f1c <HAL_I2C_Mem_Write>

	HAL_Delay(ES2_DELAY);
 80035b0:	4628      	mov	r0, r5
 80035b2:	f7fd fbeb 	bl	8000d8c <HAL_Delay>

	return;
}
 80035b6:	b007      	add	sp, #28
 80035b8:	bd30      	pop	{r4, r5, pc}
 80035ba:	bf00      	nop
 80035bc:	200000f8 	.word	0x200000f8

080035c0 <ES2_readByte>:

// Read one byte via TWI
uint8_t ES2_readByte(uint8_t slaveAddress, uint8_t registerAddress)
{
 80035c0:	b510      	push	{r4, lr}
 80035c2:	b086      	sub	sp, #24
	uint8_t data;

	HAL_I2C_Mem_Read(&hi2c3, slaveAddress << 1, registerAddress, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 80035c4:	2301      	movs	r3, #1
 80035c6:	2464      	movs	r4, #100	; 0x64
 80035c8:	f10d 0217 	add.w	r2, sp, #23
 80035cc:	9301      	str	r3, [sp, #4]
 80035ce:	9200      	str	r2, [sp, #0]
 80035d0:	9402      	str	r4, [sp, #8]
 80035d2:	460a      	mov	r2, r1
 80035d4:	fa00 f103 	lsl.w	r1, r0, r3
 80035d8:	4804      	ldr	r0, [pc, #16]	; (80035ec <ES2_readByte+0x2c>)
 80035da:	f7fe fd57 	bl	800208c <HAL_I2C_Mem_Read>
	HAL_Delay(ES2_DELAY);
 80035de:	4620      	mov	r0, r4
 80035e0:	f7fd fbd4 	bl	8000d8c <HAL_Delay>

	return data;
}
 80035e4:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80035e8:	b006      	add	sp, #24
 80035ea:	bd10      	pop	{r4, pc}
 80035ec:	200000f8 	.word	0x200000f8

080035f0 <ES2_writeCommand>:

// Write standard command to BQ fuel gauge (TI)
void ES2_writeCommand(uint8_t slaveAddress, uint8_t registerAddress, uint16_t dataWord)
{
 80035f0:	b510      	push	{r4, lr}
 80035f2:	b086      	sub	sp, #24
	uint8_t buf[2];

	buf[0] = dataWord & 0xFF;
	buf[1] = dataWord >> 8;

	HAL_I2C_Mem_Write(&hi2c3, slaveAddress << 1, registerAddress, I2C_MEMADD_SIZE_8BIT, buf, 2, 100);
 80035f4:	2302      	movs	r3, #2
 80035f6:	9301      	str	r3, [sp, #4]
 80035f8:	ab05      	add	r3, sp, #20
	buf[0] = dataWord & 0xFF;
 80035fa:	f88d 2014 	strb.w	r2, [sp, #20]
	HAL_I2C_Mem_Write(&hi2c3, slaveAddress << 1, registerAddress, I2C_MEMADD_SIZE_8BIT, buf, 2, 100);
 80035fe:	2464      	movs	r4, #100	; 0x64
 8003600:	9300      	str	r3, [sp, #0]
	buf[1] = dataWord >> 8;
 8003602:	0a12      	lsrs	r2, r2, #8
	HAL_I2C_Mem_Write(&hi2c3, slaveAddress << 1, registerAddress, I2C_MEMADD_SIZE_8BIT, buf, 2, 100);
 8003604:	2301      	movs	r3, #1
	buf[1] = dataWord >> 8;
 8003606:	f88d 2015 	strb.w	r2, [sp, #21]
	HAL_I2C_Mem_Write(&hi2c3, slaveAddress << 1, registerAddress, I2C_MEMADD_SIZE_8BIT, buf, 2, 100);
 800360a:	9402      	str	r4, [sp, #8]
 800360c:	460a      	mov	r2, r1
 800360e:	fa00 f103 	lsl.w	r1, r0, r3
 8003612:	4804      	ldr	r0, [pc, #16]	; (8003624 <ES2_writeCommand+0x34>)
 8003614:	f7fe fc82 	bl	8001f1c <HAL_I2C_Mem_Write>

	HAL_Delay(ES2_DELAY);
 8003618:	4620      	mov	r0, r4
 800361a:	f7fd fbb7 	bl	8000d8c <HAL_Delay>

	return;
}
 800361e:	b006      	add	sp, #24
 8003620:	bd10      	pop	{r4, pc}
 8003622:	bf00      	nop
 8003624:	200000f8 	.word	0x200000f8

08003628 <ES2_readCommand>:

// Read standard command to BQ fuel gauge (TI)
uint16_t ES2_readCommand(uint8_t slaveAddress, uint8_t registerAddress)
{
 8003628:	b510      	push	{r4, lr}
 800362a:	b086      	sub	sp, #24
	uint16_t dataWord;
	uint8_t buf[2];

	HAL_I2C_Mem_Read(&hi2c3, slaveAddress << 1, registerAddress, I2C_MEMADD_SIZE_8BIT, buf, 2, 100);
 800362c:	2302      	movs	r3, #2
 800362e:	9301      	str	r3, [sp, #4]
 8003630:	ab05      	add	r3, sp, #20
 8003632:	2464      	movs	r4, #100	; 0x64
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	2301      	movs	r3, #1
 8003638:	460a      	mov	r2, r1
 800363a:	9402      	str	r4, [sp, #8]
 800363c:	fa00 f103 	lsl.w	r1, r0, r3
 8003640:	4806      	ldr	r0, [pc, #24]	; (800365c <ES2_readCommand+0x34>)
 8003642:	f7fe fd23 	bl	800208c <HAL_I2C_Mem_Read>

	HAL_Delay(ES2_DELAY);
 8003646:	4620      	mov	r0, r4
 8003648:	f7fd fba0 	bl	8000d8c <HAL_Delay>

	dataWord = buf[0];
	dataWord |= buf[1] << 8;
 800364c:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8003650:	f89d 3014 	ldrb.w	r3, [sp, #20]

	return dataWord;
}
 8003654:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8003658:	b006      	add	sp, #24
 800365a:	bd10      	pop	{r4, pc}
 800365c:	200000f8 	.word	0x200000f8

08003660 <ES2_readSubCommand>:

// Read Control() subcommand to BQ fuel gauge (TI)
uint16_t ES2_readSubCommand(uint8_t slaveAddress, uint16_t controlData)
{
 8003660:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

	buf[0] = 0;
	buf[1] = controlData & 0xFF;
	buf[2] = controlData >> 8;

	HAL_I2C_Master_Transmit(&hi2c3, slaveAddress << 1, buf, 3, 100);
 8003662:	2464      	movs	r4, #100	; 0x64
	buf[1] = controlData & 0xFF;
 8003664:	f88d 100d 	strb.w	r1, [sp, #13]
	buf[2] = controlData >> 8;
 8003668:	0a09      	lsrs	r1, r1, #8
	HAL_I2C_Master_Transmit(&hi2c3, slaveAddress << 1, buf, 3, 100);
 800366a:	2303      	movs	r3, #3
 800366c:	aa03      	add	r2, sp, #12
{
 800366e:	4605      	mov	r5, r0
	buf[0] = 0;
 8003670:	2600      	movs	r6, #0
	buf[2] = controlData >> 8;
 8003672:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit(&hi2c3, slaveAddress << 1, buf, 3, 100);
 8003676:	9400      	str	r4, [sp, #0]
 8003678:	0041      	lsls	r1, r0, #1
 800367a:	4808      	ldr	r0, [pc, #32]	; (800369c <ES2_readSubCommand+0x3c>)
	buf[0] = 0;
 800367c:	f88d 600c 	strb.w	r6, [sp, #12]
	HAL_I2C_Master_Transmit(&hi2c3, slaveAddress << 1, buf, 3, 100);
 8003680:	f7fe fb22 	bl	8001cc8 <HAL_I2C_Master_Transmit>

	dataWord = ES2_readCommand(slaveAddress, 0x00);
 8003684:	4631      	mov	r1, r6
 8003686:	4628      	mov	r0, r5
 8003688:	f7ff ffce 	bl	8003628 <ES2_readCommand>
 800368c:	4605      	mov	r5, r0

	HAL_Delay(ES2_DELAY);
 800368e:	4620      	mov	r0, r4
 8003690:	f7fd fb7c 	bl	8000d8c <HAL_Delay>

	return dataWord;
}
 8003694:	4628      	mov	r0, r5
 8003696:	b004      	add	sp, #16
 8003698:	bd70      	pop	{r4, r5, r6, pc}
 800369a:	bf00      	nop
 800369c:	200000f8 	.word	0x200000f8

080036a0 <ES2_checkIfSealed>:

// Check if fuel gauge is in "Sealed" state
int ES2_checkIfSealed(uint8_t slaveAddress)
{
 80036a0:	b508      	push	{r3, lr}
	uint16_t flags;

	flags = ES2_readSubCommand(slaveAddress, 0x0000);
 80036a2:	2100      	movs	r1, #0
 80036a4:	f7ff ffdc 	bl	8003660 <ES2_readSubCommand>

	return (flags & 0x2000);
}
 80036a8:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 80036ac:	bd08      	pop	{r3, pc}

080036ae <ES2_setupFuelGauge>:

int ES2_setupFuelGauge(uint8_t slaveAddress, uint16_t newDesignCapacity_mAh,
		uint16_t newTerminationVoltage_mV, uint16_t chargeTerminationCurrent_mA,
		uint8_t alarmSOC)
{
 80036ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036b2:	b08b      	sub	sp, #44	; 0x2c
	uint8_t oldCheckSum, tempCheckSum, newCheckSum, checkSum, i;

	uint16_t oldOpConfig, newOpConfig, oldSOC1Set, oldSOC1Clear;

	newDesignEnergy = ((unsigned long) newDesignCapacity_mAh * 37) / 10;
	newTerminationRate = (uint16_t) (newDesignCapacity_mAh * 10)
 80036b4:	eb01 0581 	add.w	r5, r1, r1, lsl #2
	newDesignEnergy = ((unsigned long) newDesignCapacity_mAh * 37) / 10;
 80036b8:	2625      	movs	r6, #37	; 0x25
	newTerminationRate = (uint16_t) (newDesignCapacity_mAh * 10)
 80036ba:	006d      	lsls	r5, r5, #1
{
 80036bc:	f89d 8050 	ldrb.w	r8, [sp, #80]	; 0x50
 80036c0:	4692      	mov	sl, r2
	newDesignEnergy = ((unsigned long) newDesignCapacity_mAh * 37) / 10;
 80036c2:	434e      	muls	r6, r1
 80036c4:	220a      	movs	r2, #10
	newTerminationRate = (uint16_t) (newDesignCapacity_mAh * 10)
 80036c6:	b2ad      	uxth	r5, r5
	newDesignEnergy = ((unsigned long) newDesignCapacity_mAh * 37) / 10;
 80036c8:	fbb6 f6f2 	udiv	r6, r6, r2
	newTerminationRate = (uint16_t) (newDesignCapacity_mAh * 10)
 80036cc:	fbb5 f5f3 	udiv	r5, r5, r3
{
 80036d0:	4604      	mov	r4, r0
 80036d2:	4689      	mov	r9, r1
	newDesignEnergy = ((unsigned long) newDesignCapacity_mAh * 37) / 10;
 80036d4:	fa1f fb86 	uxth.w	fp, r6
	newTerminationRate = (uint16_t) (newDesignCapacity_mAh * 10)
 80036d8:	2365      	movs	r3, #101	; 0x65
 80036da:	3b01      	subs	r3, #1

	i = 0;
	do
	{
		++i;
		if (i > 100)
 80036dc:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80036e0:	9300      	str	r3, [sp, #0]
 80036e2:	f000 817f 	beq.w	80039e4 <ES2_setupFuelGauge+0x336>
			return 1; // Failed
		// Unseal
		ES2_writeCommand(slaveAddress, 0x00, 0x8000);
 80036e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80036ea:	2100      	movs	r1, #0
 80036ec:	4620      	mov	r0, r4
 80036ee:	f7ff ff7f 	bl	80035f0 <ES2_writeCommand>
		ES2_writeCommand(slaveAddress, 0x00, 0x8000);
 80036f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80036f6:	2100      	movs	r1, #0
 80036f8:	4620      	mov	r0, r4
 80036fa:	f7ff ff79 	bl	80035f0 <ES2_writeCommand>
		HAL_Delay(10);
 80036fe:	200a      	movs	r0, #10
 8003700:	f7fd fb44 	bl	8000d8c <HAL_Delay>
	} while (ES2_checkIfSealed(slaveAddress));
 8003704:	4620      	mov	r0, r4
 8003706:	f7ff ffcb 	bl	80036a0 <ES2_checkIfSealed>
 800370a:	9b00      	ldr	r3, [sp, #0]
 800370c:	4607      	mov	r7, r0
 800370e:	2800      	cmp	r0, #0
 8003710:	d1e3      	bne.n	80036da <ES2_setupFuelGauge+0x2c>

	//Change to CONFIG UPDATE mode
	ES2_writeCommand(slaveAddress, 0x00, 0x0013);
 8003712:	4601      	mov	r1, r0
 8003714:	2213      	movs	r2, #19
 8003716:	4620      	mov	r0, r4
 8003718:	f7ff ff6a 	bl	80035f0 <ES2_writeCommand>
	do
	{
		flags = ES2_readCommand(slaveAddress, 0x06);
 800371c:	2106      	movs	r1, #6
 800371e:	4620      	mov	r0, r4
 8003720:	f7ff ff82 	bl	8003628 <ES2_readCommand>
	} while (!(flags & 0x0010));
 8003724:	06c3      	lsls	r3, r0, #27
 8003726:	d5f9      	bpl.n	800371c <ES2_setupFuelGauge+0x6e>

	// Setup Block RAM update
	ES2_writeByte(slaveAddress, 0x61, 0x00);
 8003728:	2200      	movs	r2, #0
 800372a:	2161      	movs	r1, #97	; 0x61
 800372c:	4620      	mov	r0, r4
 800372e:	f7ff ff2f 	bl	8003590 <ES2_writeByte>
	ES2_writeByte(slaveAddress, 0x3E, 0x52);
 8003732:	2252      	movs	r2, #82	; 0x52
 8003734:	213e      	movs	r1, #62	; 0x3e
 8003736:	4620      	mov	r0, r4
 8003738:	f7ff ff2a 	bl	8003590 <ES2_writeByte>
	ES2_writeByte(slaveAddress, 0x3F, 0x00);
 800373c:	2200      	movs	r2, #0
 800373e:	213f      	movs	r1, #63	; 0x3f
 8003740:	4620      	mov	r0, r4
 8003742:	f7ff ff25 	bl	8003590 <ES2_writeByte>

	oldCheckSum = ES2_readByte(slaveAddress, 0x60);
 8003746:	2160      	movs	r1, #96	; 0x60
 8003748:	4620      	mov	r0, r4
 800374a:	f7ff ff39 	bl	80035c0 <ES2_readByte>
		tempCheckSum -= oldTerminationVoltage & 0xFF;

		tempCheckSum -= oldTaperRate >> 8;
		tempCheckSum -= oldTaperRate & 0xFF;

		ES2_writeByte(slaveAddress, 0x4A, newDesignCapacity_mAh >> 8);
 800374e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8003752:	9300      	str	r3, [sp, #0]
		ES2_writeByte(slaveAddress, 0x4B, newDesignCapacity_mAh & 0xFF);

		ES2_writeByte(slaveAddress, 0x4C, newDesignEnergy >> 8);
 8003754:	ea4f 231b 	mov.w	r3, fp, lsr #8
 8003758:	9301      	str	r3, [sp, #4]
		ES2_writeByte(slaveAddress, 0x4D, newDesignEnergy & 0xFF);
 800375a:	b2f3      	uxtb	r3, r6
 800375c:	9302      	str	r3, [sp, #8]

		ES2_writeByte(slaveAddress, 0x50, newTerminationVoltage_mV >> 8);
 800375e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8003762:	9303      	str	r3, [sp, #12]
		ES2_writeByte(slaveAddress, 0x51, newTerminationVoltage_mV & 0xFF);
 8003764:	fa5f f38a 	uxtb.w	r3, sl
 8003768:	9304      	str	r3, [sp, #16]

		ES2_writeByte(slaveAddress, 0x5B, newTerminationRate >> 8);
 800376a:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800376e:	9305      	str	r3, [sp, #20]
		ES2_writeByte(slaveAddress, 0x5C, newTerminationRate & 0xFF);
 8003770:	b2eb      	uxtb	r3, r5
 8003772:	9306      	str	r3, [sp, #24]
 8003774:	9a04      	ldr	r2, [sp, #16]
 8003776:	9b03      	ldr	r3, [sp, #12]
		ES2_writeByte(slaveAddress, 0x4B, newDesignCapacity_mAh & 0xFF);
 8003778:	fa5f f989 	uxtb.w	r9, r9
 800377c:	4413      	add	r3, r2
 800377e:	9a00      	ldr	r2, [sp, #0]
 8003780:	444b      	add	r3, r9
 8003782:	4413      	add	r3, r2
 8003784:	9a06      	ldr	r2, [sp, #24]
 8003786:	4413      	add	r3, r2
 8003788:	9a02      	ldr	r2, [sp, #8]
 800378a:	4413      	add	r3, r2
 800378c:	9a05      	ldr	r2, [sp, #20]
 800378e:	4413      	add	r3, r2
 8003790:	9a01      	ldr	r2, [sp, #4]
 8003792:	4413      	add	r3, r2
 8003794:	b2db      	uxtb	r3, r3
		tempCheckSum = 0xFF - oldCheckSum;
 8003796:	43c0      	mvns	r0, r0
 8003798:	9307      	str	r3, [sp, #28]
 800379a:	b2c3      	uxtb	r3, r0
		ES2_writeByte(slaveAddress, 0x5C, newTerminationRate & 0xFF);
 800379c:	2565      	movs	r5, #101	; 0x65
		tempCheckSum = 0xFF - oldCheckSum;
 800379e:	9308      	str	r3, [sp, #32]
 80037a0:	3d01      	subs	r5, #1
		if (i > 100)
 80037a2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80037a6:	d104      	bne.n	80037b2 <ES2_setupFuelGauge+0x104>
			return 2; // Failed
 80037a8:	2702      	movs	r7, #2

	// Seal fuel gauge
	ES2_writeCommand(slaveAddress, 0x00, 0x0020);

	return 0;
}
 80037aa:	4638      	mov	r0, r7
 80037ac:	b00b      	add	sp, #44	; 0x2c
 80037ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		oldDesignCapacity = ES2_readCommand(slaveAddress, 0x4A);
 80037b2:	214a      	movs	r1, #74	; 0x4a
 80037b4:	4620      	mov	r0, r4
 80037b6:	f7ff ff37 	bl	8003628 <ES2_readCommand>
		oldDesignEnergy = ES2_readCommand(slaveAddress, 0x4C);
 80037ba:	214c      	movs	r1, #76	; 0x4c
		oldDesignCapacity = ES2_readCommand(slaveAddress, 0x4A);
 80037bc:	9009      	str	r0, [sp, #36]	; 0x24
		oldDesignEnergy = ES2_readCommand(slaveAddress, 0x4C);
 80037be:	4620      	mov	r0, r4
 80037c0:	f7ff ff32 	bl	8003628 <ES2_readCommand>
		oldTerminationVoltage = ES2_readCommand(slaveAddress, 0x50);
 80037c4:	2150      	movs	r1, #80	; 0x50
		oldDesignEnergy = ES2_readCommand(slaveAddress, 0x4C);
 80037c6:	4683      	mov	fp, r0
		oldTerminationVoltage = ES2_readCommand(slaveAddress, 0x50);
 80037c8:	4620      	mov	r0, r4
 80037ca:	f7ff ff2d 	bl	8003628 <ES2_readCommand>
		oldTaperRate = ES2_readCommand(slaveAddress, 0x5B);
 80037ce:	215b      	movs	r1, #91	; 0x5b
		oldTerminationVoltage = ES2_readCommand(slaveAddress, 0x50);
 80037d0:	4682      	mov	sl, r0
		oldTaperRate = ES2_readCommand(slaveAddress, 0x5B);
 80037d2:	4620      	mov	r0, r4
 80037d4:	f7ff ff28 	bl	8003628 <ES2_readCommand>
		tempCheckSum -= oldDesignCapacity >> 8;
 80037d8:	9b08      	ldr	r3, [sp, #32]
 80037da:	461a      	mov	r2, r3
 80037dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037de:	eba2 2213 	sub.w	r2, r2, r3, lsr #8
		tempCheckSum -= oldDesignCapacity & 0xFF;
 80037e2:	1ad3      	subs	r3, r2, r3
		tempCheckSum -= oldDesignEnergy >> 8;
 80037e4:	eba3 231b 	sub.w	r3, r3, fp, lsr #8
		oldTaperRate = ES2_readCommand(slaveAddress, 0x5B);
 80037e8:	4606      	mov	r6, r0
		ES2_writeByte(slaveAddress, 0x4A, newDesignCapacity_mAh >> 8);
 80037ea:	9a00      	ldr	r2, [sp, #0]
 80037ec:	214a      	movs	r1, #74	; 0x4a
 80037ee:	4620      	mov	r0, r4
		tempCheckSum -= oldDesignEnergy & 0xFF;
 80037f0:	eba3 0b0b 	sub.w	fp, r3, fp
		ES2_writeByte(slaveAddress, 0x4A, newDesignCapacity_mAh >> 8);
 80037f4:	f7ff fecc 	bl	8003590 <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x4B, newDesignCapacity_mAh & 0xFF);
 80037f8:	464a      	mov	r2, r9
 80037fa:	214b      	movs	r1, #75	; 0x4b
 80037fc:	4620      	mov	r0, r4
 80037fe:	f7ff fec7 	bl	8003590 <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x4C, newDesignEnergy >> 8);
 8003802:	9a01      	ldr	r2, [sp, #4]
 8003804:	214c      	movs	r1, #76	; 0x4c
 8003806:	4620      	mov	r0, r4
 8003808:	f7ff fec2 	bl	8003590 <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x4D, newDesignEnergy & 0xFF);
 800380c:	9a02      	ldr	r2, [sp, #8]
 800380e:	214d      	movs	r1, #77	; 0x4d
 8003810:	4620      	mov	r0, r4
 8003812:	f7ff febd 	bl	8003590 <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x50, newTerminationVoltage_mV >> 8);
 8003816:	9a03      	ldr	r2, [sp, #12]
 8003818:	2150      	movs	r1, #80	; 0x50
 800381a:	4620      	mov	r0, r4
 800381c:	f7ff feb8 	bl	8003590 <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x51, newTerminationVoltage_mV & 0xFF);
 8003820:	9a04      	ldr	r2, [sp, #16]
 8003822:	2151      	movs	r1, #81	; 0x51
 8003824:	4620      	mov	r0, r4
 8003826:	f7ff feb3 	bl	8003590 <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x5B, newTerminationRate >> 8);
 800382a:	9a05      	ldr	r2, [sp, #20]
 800382c:	215b      	movs	r1, #91	; 0x5b
 800382e:	4620      	mov	r0, r4
 8003830:	f7ff feae 	bl	8003590 <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x5C, newTerminationRate & 0xFF);
 8003834:	9a06      	ldr	r2, [sp, #24]
 8003836:	215c      	movs	r1, #92	; 0x5c
 8003838:	4620      	mov	r0, r4
 800383a:	f7ff fea9 	bl	8003590 <ES2_writeByte>
		tempCheckSum += newTerminationRate & 0xFF;
 800383e:	9b07      	ldr	r3, [sp, #28]
		tempCheckSum -= oldTerminationVoltage >> 8;
 8003840:	ebab 2b1a 	sub.w	fp, fp, sl, lsr #8
		tempCheckSum += newTerminationRate & 0xFF;
 8003844:	1b9b      	subs	r3, r3, r6
		tempCheckSum -= oldTerminationVoltage & 0xFF;
 8003846:	ebab 0a0a 	sub.w	sl, fp, sl
		tempCheckSum += newTerminationRate & 0xFF;
 800384a:	eba3 2616 	sub.w	r6, r3, r6, lsr #8
		tempCheckSum -= oldTerminationVoltage & 0xFF;
 800384e:	f00a 0aff 	and.w	sl, sl, #255	; 0xff
		tempCheckSum += newTerminationRate & 0xFF;
 8003852:	44b2      	add	sl, r6
		newCheckSum = 0xFF - tempCheckSum;
 8003854:	ea6f 0a0a 	mvn.w	sl, sl
 8003858:	fa5f fa8a 	uxtb.w	sl, sl
		ES2_writeByte(slaveAddress, 0x60, newCheckSum);
 800385c:	4652      	mov	r2, sl
 800385e:	2160      	movs	r1, #96	; 0x60
 8003860:	4620      	mov	r0, r4
 8003862:	f7ff fe95 	bl	8003590 <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x3E, 0x52);
 8003866:	2252      	movs	r2, #82	; 0x52
 8003868:	213e      	movs	r1, #62	; 0x3e
 800386a:	4620      	mov	r0, r4
 800386c:	f7ff fe90 	bl	8003590 <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x3F, 0x00);
 8003870:	2200      	movs	r2, #0
 8003872:	213f      	movs	r1, #63	; 0x3f
 8003874:	4620      	mov	r0, r4
 8003876:	f7ff fe8b 	bl	8003590 <ES2_writeByte>
		checkSum = ES2_readByte(slaveAddress, 0x60);
 800387a:	2160      	movs	r1, #96	; 0x60
 800387c:	4620      	mov	r0, r4
 800387e:	f7ff fe9f 	bl	80035c0 <ES2_readByte>
	} while (checkSum != newCheckSum);
 8003882:	4582      	cmp	sl, r0
 8003884:	d18c      	bne.n	80037a0 <ES2_setupFuelGauge+0xf2>
	ES2_writeByte(slaveAddress, 0x61, 0x00); // Enable block access
 8003886:	2200      	movs	r2, #0
 8003888:	2161      	movs	r1, #97	; 0x61
 800388a:	4620      	mov	r0, r4
 800388c:	f7ff fe80 	bl	8003590 <ES2_writeByte>
	ES2_writeByte(slaveAddress, 0x3E, 0x40); // Set subclass ID
 8003890:	2240      	movs	r2, #64	; 0x40
 8003892:	213e      	movs	r1, #62	; 0x3e
 8003894:	4620      	mov	r0, r4
 8003896:	f7ff fe7b 	bl	8003590 <ES2_writeByte>
	ES2_writeByte(slaveAddress, 0x3F, 0x00);  // Set block offset 0 or 32
 800389a:	2200      	movs	r2, #0
 800389c:	213f      	movs	r1, #63	; 0x3f
 800389e:	4620      	mov	r0, r4
 80038a0:	f7ff fe76 	bl	8003590 <ES2_writeByte>
	oldCheckSum = ES2_readByte(slaveAddress, 0x60);
 80038a4:	2160      	movs	r1, #96	; 0x60
 80038a6:	4620      	mov	r0, r4
 80038a8:	f7ff fe8a 	bl	80035c0 <ES2_readByte>
		tempCheckSum = 0xFF - oldCheckSum;
 80038ac:	43c0      	mvns	r0, r0
	oldCheckSum = ES2_readByte(slaveAddress, 0x60);
 80038ae:	2665      	movs	r6, #101	; 0x65
		tempCheckSum = 0xFF - oldCheckSum;
 80038b0:	fa5f f980 	uxtb.w	r9, r0
 80038b4:	3e01      	subs	r6, #1
		if (i > 100)
 80038b6:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 80038ba:	f43f af75 	beq.w	80037a8 <ES2_setupFuelGauge+0xfa>
		oldOpConfig = ES2_readCommand(slaveAddress, 0x40);
 80038be:	2140      	movs	r1, #64	; 0x40
 80038c0:	4620      	mov	r0, r4
 80038c2:	f7ff feb1 	bl	8003628 <ES2_readCommand>
		newOpConfig = oldOpConfig | 0x0004; // Enable BATLOWEN Bit
 80038c6:	f040 0504 	orr.w	r5, r0, #4
 80038ca:	b2ad      	uxth	r5, r5
		if (newOpConfig == oldOpConfig)
 80038cc:	42a8      	cmp	r0, r5
		oldOpConfig = ES2_readCommand(slaveAddress, 0x40);
 80038ce:	4682      	mov	sl, r0
		if (newOpConfig == oldOpConfig)
 80038d0:	d137      	bne.n	8003942 <ES2_setupFuelGauge+0x294>
	ES2_writeByte(slaveAddress, 0x3E, 0x31); // Set subclass ID
 80038d2:	2231      	movs	r2, #49	; 0x31
 80038d4:	213e      	movs	r1, #62	; 0x3e
 80038d6:	4620      	mov	r0, r4
 80038d8:	f7ff fe5a 	bl	8003590 <ES2_writeByte>
	ES2_writeByte(slaveAddress, 0x3F, 0x00);  // Set block offset 0 or 32
 80038dc:	2200      	movs	r2, #0
 80038de:	213f      	movs	r1, #63	; 0x3f
 80038e0:	4620      	mov	r0, r4
 80038e2:	f7ff fe55 	bl	8003590 <ES2_writeByte>
	oldCheckSum = ES2_readByte(slaveAddress, 0x60);
 80038e6:	2160      	movs	r1, #96	; 0x60
 80038e8:	4620      	mov	r0, r4
 80038ea:	f7ff fe69 	bl	80035c0 <ES2_readByte>
		tempCheckSum = 0xFF - oldCheckSum;
 80038ee:	43c0      	mvns	r0, r0
	oldCheckSum = ES2_readByte(slaveAddress, 0x60);
 80038f0:	f04f 0965 	mov.w	r9, #101	; 0x65
		tempCheckSum = 0xFF - oldCheckSum;
 80038f4:	fa5f fa80 	uxtb.w	sl, r0
 80038f8:	f109 39ff 	add.w	r9, r9, #4294967295
		if (i > 100)
 80038fc:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
 8003900:	f43f af52 	beq.w	80037a8 <ES2_setupFuelGauge+0xfa>
		oldSOC1Set = ES2_readByte(slaveAddress, 0x40);
 8003904:	2140      	movs	r1, #64	; 0x40
 8003906:	4620      	mov	r0, r4
 8003908:	f7ff fe5a 	bl	80035c0 <ES2_readByte>
		oldSOC1Clear = ES2_readByte(slaveAddress, 0x41);
 800390c:	2141      	movs	r1, #65	; 0x41
		oldSOC1Set = ES2_readByte(slaveAddress, 0x40);
 800390e:	4605      	mov	r5, r0
		oldSOC1Clear = ES2_readByte(slaveAddress, 0x41);
 8003910:	4620      	mov	r0, r4
 8003912:	f7ff fe55 	bl	80035c0 <ES2_readByte>
		if (oldSOC1Set == alarmSOC && oldSOC1Clear == alarmSOC)
 8003916:	4545      	cmp	r5, r8
		oldSOC1Clear = ES2_readByte(slaveAddress, 0x41);
 8003918:	4683      	mov	fp, r0
		if (oldSOC1Set == alarmSOC && oldSOC1Clear == alarmSOC)
 800391a:	d139      	bne.n	8003990 <ES2_setupFuelGauge+0x2e2>
 800391c:	4540      	cmp	r0, r8
 800391e:	d137      	bne.n	8003990 <ES2_setupFuelGauge+0x2e2>
	ES2_writeCommand(slaveAddress, 0x00, 0x0042);
 8003920:	2242      	movs	r2, #66	; 0x42
 8003922:	2100      	movs	r1, #0
 8003924:	4620      	mov	r0, r4
 8003926:	f7ff fe63 	bl	80035f0 <ES2_writeCommand>
		flags = ES2_readCommand(slaveAddress, 0x06);
 800392a:	2106      	movs	r1, #6
 800392c:	4620      	mov	r0, r4
 800392e:	f7ff fe7b 	bl	8003628 <ES2_readCommand>
	} while (flags & 0x0010);
 8003932:	f010 0110 	ands.w	r1, r0, #16
 8003936:	d1f8      	bne.n	800392a <ES2_setupFuelGauge+0x27c>
	ES2_writeCommand(slaveAddress, 0x00, 0x0020);
 8003938:	2220      	movs	r2, #32
 800393a:	4620      	mov	r0, r4
 800393c:	f7ff fe58 	bl	80035f0 <ES2_writeCommand>
	return 0;
 8003940:	e733      	b.n	80037aa <ES2_setupFuelGauge+0xfc>
		ES2_writeByte(slaveAddress, 0x40, newOpConfig >> 8);
 8003942:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8003946:	2140      	movs	r1, #64	; 0x40
 8003948:	4620      	mov	r0, r4
		ES2_writeByte(slaveAddress, 0x41, newOpConfig & 0xFF);
 800394a:	b2ed      	uxtb	r5, r5
		ES2_writeByte(slaveAddress, 0x40, newOpConfig >> 8);
 800394c:	f7ff fe20 	bl	8003590 <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x41, newOpConfig & 0xFF);
 8003950:	462a      	mov	r2, r5
		tempCheckSum += newOpConfig & 0xFF;
 8003952:	eba5 050a 	sub.w	r5, r5, sl
 8003956:	444d      	add	r5, r9
		newCheckSum = 0xFF - tempCheckSum;
 8003958:	43ed      	mvns	r5, r5
		ES2_writeByte(slaveAddress, 0x41, newOpConfig & 0xFF);
 800395a:	2141      	movs	r1, #65	; 0x41
 800395c:	4620      	mov	r0, r4
		newCheckSum = 0xFF - tempCheckSum;
 800395e:	b2ed      	uxtb	r5, r5
		ES2_writeByte(slaveAddress, 0x41, newOpConfig & 0xFF);
 8003960:	f7ff fe16 	bl	8003590 <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x60, newCheckSum);
 8003964:	462a      	mov	r2, r5
 8003966:	2160      	movs	r1, #96	; 0x60
 8003968:	4620      	mov	r0, r4
 800396a:	f7ff fe11 	bl	8003590 <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x3E, 0x40);
 800396e:	2240      	movs	r2, #64	; 0x40
 8003970:	213e      	movs	r1, #62	; 0x3e
 8003972:	4620      	mov	r0, r4
 8003974:	f7ff fe0c 	bl	8003590 <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x3F, 0x00);
 8003978:	2200      	movs	r2, #0
 800397a:	213f      	movs	r1, #63	; 0x3f
 800397c:	4620      	mov	r0, r4
 800397e:	f7ff fe07 	bl	8003590 <ES2_writeByte>
		checkSum = ES2_readByte(slaveAddress, 0x60);
 8003982:	2160      	movs	r1, #96	; 0x60
 8003984:	4620      	mov	r0, r4
 8003986:	f7ff fe1b 	bl	80035c0 <ES2_readByte>
	} while (checkSum != newCheckSum);
 800398a:	4285      	cmp	r5, r0
 800398c:	d192      	bne.n	80038b4 <ES2_setupFuelGauge+0x206>
 800398e:	e7a0      	b.n	80038d2 <ES2_setupFuelGauge+0x224>
 8003990:	ea4f 0648 	mov.w	r6, r8, lsl #1
 8003994:	b2f6      	uxtb	r6, r6
 8003996:	4456      	add	r6, sl
 8003998:	1b75      	subs	r5, r6, r5
 800399a:	b2ed      	uxtb	r5, r5
		tempCheckSum += alarmSOC;
 800399c:	eba5 050b 	sub.w	r5, r5, fp
		ES2_writeByte(slaveAddress, 0x40, alarmSOC);
 80039a0:	4642      	mov	r2, r8
 80039a2:	2140      	movs	r1, #64	; 0x40
 80039a4:	4620      	mov	r0, r4
		newCheckSum = 0xFF - tempCheckSum;
 80039a6:	43ed      	mvns	r5, r5
		ES2_writeByte(slaveAddress, 0x40, alarmSOC);
 80039a8:	f7ff fdf2 	bl	8003590 <ES2_writeByte>
		newCheckSum = 0xFF - tempCheckSum;
 80039ac:	b2ed      	uxtb	r5, r5
		ES2_writeByte(slaveAddress, 0x41, alarmSOC);
 80039ae:	4642      	mov	r2, r8
 80039b0:	2141      	movs	r1, #65	; 0x41
 80039b2:	4620      	mov	r0, r4
 80039b4:	f7ff fdec 	bl	8003590 <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x60, newCheckSum);
 80039b8:	462a      	mov	r2, r5
 80039ba:	2160      	movs	r1, #96	; 0x60
 80039bc:	4620      	mov	r0, r4
 80039be:	f7ff fde7 	bl	8003590 <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x3E, 0x31);
 80039c2:	2231      	movs	r2, #49	; 0x31
 80039c4:	213e      	movs	r1, #62	; 0x3e
 80039c6:	4620      	mov	r0, r4
 80039c8:	f7ff fde2 	bl	8003590 <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x3F, 0x00);
 80039cc:	2200      	movs	r2, #0
 80039ce:	213f      	movs	r1, #63	; 0x3f
 80039d0:	4620      	mov	r0, r4
 80039d2:	f7ff fddd 	bl	8003590 <ES2_writeByte>
		checkSum = ES2_readByte(slaveAddress, 0x60);
 80039d6:	2160      	movs	r1, #96	; 0x60
 80039d8:	4620      	mov	r0, r4
 80039da:	f7ff fdf1 	bl	80035c0 <ES2_readByte>
	} while (checkSum != newCheckSum);
 80039de:	4285      	cmp	r5, r0
 80039e0:	d18a      	bne.n	80038f8 <ES2_setupFuelGauge+0x24a>
 80039e2:	e79d      	b.n	8003920 <ES2_setupFuelGauge+0x272>
			return 1; // Failed
 80039e4:	2701      	movs	r7, #1
 80039e6:	e6e0      	b.n	80037aa <ES2_setupFuelGauge+0xfc>

080039e8 <decodeBCD>:

// Decode tens place, units place formating (BCD)
uint8_t decodeBCD(uint8_t BCD)
{
	uint8_t _value = ((0x70 & BCD) >> 4) * 10 + (0x0F & BCD);
 80039e8:	f3c0 1302 	ubfx	r3, r0, #4, #3
 80039ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80039f0:	f000 000f 	and.w	r0, r0, #15

	return _value;
}
 80039f4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80039f8:	4770      	bx	lr
	...

080039fc <ES2_readClock>:
	return;
}

// Read current time and date into a local buffer
void ES2_readClock()
{
 80039fc:	b530      	push	{r4, r5, lr}
	int i = 0;

	// Read time and date
	HAL_Delay(20);
 80039fe:	2014      	movs	r0, #20
{
 8003a00:	b085      	sub	sp, #20
	HAL_Delay(20);
 8003a02:	f7fd f9c3 	bl	8000d8c <HAL_Delay>

	// read from register 4 to 0xA from RTC
	HAL_I2C_Mem_Read(&hi2c3, RTC_SLAVE_ADDR << 1, 0x04, I2C_MEMADD_SIZE_8BIT, es_timeDate, 7, 100);
 8003a06:	2364      	movs	r3, #100	; 0x64
 8003a08:	9302      	str	r3, [sp, #8]
 8003a0a:	4d0b      	ldr	r5, [pc, #44]	; (8003a38 <ES2_readClock+0x3c>)
 8003a0c:	9500      	str	r5, [sp, #0]
 8003a0e:	2307      	movs	r3, #7
 8003a10:	9301      	str	r3, [sp, #4]
 8003a12:	2204      	movs	r2, #4
 8003a14:	2301      	movs	r3, #1
 8003a16:	21a2      	movs	r1, #162	; 0xa2
 8003a18:	4808      	ldr	r0, [pc, #32]	; (8003a3c <ES2_readClock+0x40>)
 8003a1a:	f7fe fb37 	bl	800208c <HAL_I2C_Mem_Read>

	// Convert seconds, minutes, hours, day-of-the-month, and year from BCD to binary (skipping day-of-the-week)
	for (i = 0; i < 7; i++)
 8003a1e:	2400      	movs	r4, #0
	{
		if (i != 4)
 8003a20:	2c04      	cmp	r4, #4
 8003a22:	d003      	beq.n	8003a2c <ES2_readClock+0x30>
			es_timeDate[i] = decodeBCD(es_timeDate[i]);
 8003a24:	5d28      	ldrb	r0, [r5, r4]
 8003a26:	f7ff ffdf 	bl	80039e8 <decodeBCD>
 8003a2a:	5528      	strb	r0, [r5, r4]
	for (i = 0; i < 7; i++)
 8003a2c:	3401      	adds	r4, #1
 8003a2e:	2c07      	cmp	r4, #7
 8003a30:	d1f6      	bne.n	8003a20 <ES2_readClock+0x24>
	}

	return;
}
 8003a32:	b005      	add	sp, #20
 8003a34:	bd30      	pop	{r4, r5, pc}
 8003a36:	bf00      	nop
 8003a38:	20000214 	.word	0x20000214
 8003a3c:	200000f8 	.word	0x200000f8

08003a40 <ES2_second>:

// Returns current second(0-59)
uint8_t ES2_second()
{
	return es_timeDate[0];
}
 8003a40:	4b01      	ldr	r3, [pc, #4]	; (8003a48 <ES2_second+0x8>)
 8003a42:	7818      	ldrb	r0, [r3, #0]
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	20000214 	.word	0x20000214

08003a4c <ES2_minute>:

// Returns current minute (0-59)
uint8_t ES2_minute()
{
	return es_timeDate[1];
}
 8003a4c:	4b01      	ldr	r3, [pc, #4]	; (8003a54 <ES2_minute+0x8>)
 8003a4e:	7858      	ldrb	r0, [r3, #1]
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	20000214 	.word	0x20000214

08003a58 <ES2_hour>:

// Returns current hour (0-23)
uint8_t ES2_hour()
{
	return es_timeDate[2];
}
 8003a58:	4b01      	ldr	r3, [pc, #4]	; (8003a60 <ES2_hour+0x8>)
 8003a5a:	7898      	ldrb	r0, [r3, #2]
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	20000214 	.word	0x20000214

08003a64 <ES2_dayOfMonth>:

// Returns current day of the month (1-31)
uint8_t ES2_dayOfMonth()
{
	return es_timeDate[3];
}
 8003a64:	4b01      	ldr	r3, [pc, #4]	; (8003a6c <ES2_dayOfMonth+0x8>)
 8003a66:	78d8      	ldrb	r0, [r3, #3]
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	20000214 	.word	0x20000214

08003a70 <ES2_month>:

// Returns current month (1-12)
uint8_t ES2_month()
{
	return es_timeDate[5];
}
 8003a70:	4b01      	ldr	r3, [pc, #4]	; (8003a78 <ES2_month+0x8>)
 8003a72:	7958      	ldrb	r0, [r3, #5]
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	20000214 	.word	0x20000214

08003a7c <ES2_year>:

// Returns current year (00-99)
uint8_t ES2_year()
{
	return es_timeDate[6];
}
 8003a7c:	4b01      	ldr	r3, [pc, #4]	; (8003a84 <ES2_year+0x8>)
 8003a7e:	7998      	ldrb	r0, [r3, #6]
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	20000214 	.word	0x20000214

08003a88 <ES2_clearAlarms>:

// Clears any active RTC alarms
void ES2_clearAlarms()
{
 8003a88:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t tmp[5];

	for(int i = 0; i < 5; i++)
		tmp[i] = 0xff;
 8003a8a:	23ff      	movs	r3, #255	; 0xff

	HAL_Delay(15);
 8003a8c:	200f      	movs	r0, #15
		tmp[i] = 0xff;
 8003a8e:	f88d 3010 	strb.w	r3, [sp, #16]
 8003a92:	f88d 3011 	strb.w	r3, [sp, #17]
 8003a96:	f88d 3012 	strb.w	r3, [sp, #18]
 8003a9a:	f88d 3013 	strb.w	r3, [sp, #19]
 8003a9e:	f88d 3014 	strb.w	r3, [sp, #20]
	HAL_Delay(15);
 8003aa2:	f7fd f973 	bl	8000d8c <HAL_Delay>
	HAL_I2C_Mem_Write(&hi2c3, RTC_SLAVE_ADDR << 1, 0x0B, I2C_MEMADD_SIZE_8BIT, tmp, 5, 100);
 8003aa6:	2364      	movs	r3, #100	; 0x64
 8003aa8:	9302      	str	r3, [sp, #8]
 8003aaa:	2305      	movs	r3, #5
 8003aac:	9301      	str	r3, [sp, #4]
 8003aae:	ab04      	add	r3, sp, #16
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	220b      	movs	r2, #11
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	21a2      	movs	r1, #162	; 0xa2
 8003ab8:	4802      	ldr	r0, [pc, #8]	; (8003ac4 <ES2_clearAlarms+0x3c>)
 8003aba:	f7fe fa2f 	bl	8001f1c <HAL_I2C_Mem_Write>

	return;
}
 8003abe:	b007      	add	sp, #28
 8003ac0:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ac4:	200000f8 	.word	0x200000f8

08003ac8 <ES2_readVMPP>:
	}
}

// Read the current VMPP setting from DAC
int ES2_readVMPP()
{
 8003ac8:	b530      	push	{r4, r5, lr}
	uint8_t data[2];
	do
	{
		HAL_I2C_Master_Receive(&hi2c3, DAC_SLAVE_ADDR<<1, data, 2, 100);
 8003aca:	4c10      	ldr	r4, [pc, #64]	; (8003b0c <ES2_readVMPP+0x44>)
{
 8003acc:	b085      	sub	sp, #20
		HAL_I2C_Master_Receive(&hi2c3, DAC_SLAVE_ADDR<<1, data, 2, 100);
 8003ace:	2564      	movs	r5, #100	; 0x64
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	aa03      	add	r2, sp, #12
 8003ad4:	9500      	str	r5, [sp, #0]
 8003ad6:	21c0      	movs	r1, #192	; 0xc0
 8003ad8:	4620      	mov	r0, r4
 8003ada:	f7fe f989 	bl	8001df0 <HAL_I2C_Master_Receive>
	} while (!(data[0] & 0b10000000));
 8003ade:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8003ae2:	061a      	lsls	r2, r3, #24
 8003ae4:	d5f4      	bpl.n	8003ad0 <ES2_readVMPP+0x8>

	if (data[0] & 0b00000110)
 8003ae6:	f013 0f06 	tst.w	r3, #6
	{
		return -1;
	}
	else
	{
		return ((unsigned long) (357 - (int)(data[1])) << 16) / 984;
 8003aea:	bf01      	itttt	eq
 8003aec:	f89d 000d 	ldrbeq.w	r0, [sp, #13]
 8003af0:	f5c0 70b2 	rsbeq	r0, r0, #356	; 0x164
 8003af4:	3001      	addeq	r0, #1
 8003af6:	0400      	lsleq	r0, r0, #16
 8003af8:	bf0a      	itet	eq
 8003afa:	f44f 7376 	moveq.w	r3, #984	; 0x3d8
		return -1;
 8003afe:	f04f 30ff 	movne.w	r0, #4294967295
		return ((unsigned long) (357 - (int)(data[1])) << 16) / 984;
 8003b02:	fbb0 f0f3 	udiveq	r0, r0, r3
	}
}
 8003b06:	b005      	add	sp, #20
 8003b08:	bd30      	pop	{r4, r5, pc}
 8003b0a:	bf00      	nop
 8003b0c:	200000f8 	.word	0x200000f8

08003b10 <ES2_setVMPP>:

// Set regulated MPP voltage of solar panel and writes to EEPROM
void ES2_setVMPP(int MPP_Voltage_mV, uint8_t writeEEPROM)
{
 8003b10:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t DAC_setting, Control, Hbyte, Lbyte, data[2];
	uint8_t tmp[3];

	do
	{
		HAL_I2C_Master_Receive(&hi2c3, DAC_SLAVE_ADDR<<1, data, 2, 100);
 8003b12:	4e1f      	ldr	r6, [pc, #124]	; (8003b90 <ES2_setVMPP+0x80>)
{
 8003b14:	b085      	sub	sp, #20
 8003b16:	4604      	mov	r4, r0
 8003b18:	460d      	mov	r5, r1
		HAL_I2C_Master_Receive(&hi2c3, DAC_SLAVE_ADDR<<1, data, 2, 100);
 8003b1a:	2764      	movs	r7, #100	; 0x64
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	aa02      	add	r2, sp, #8
 8003b20:	9700      	str	r7, [sp, #0]
 8003b22:	21c0      	movs	r1, #192	; 0xc0
 8003b24:	4630      	mov	r0, r6
 8003b26:	f7fe f963 	bl	8001df0 <HAL_I2C_Master_Receive>
	} while (!(data[0] & 0b10000000));
 8003b2a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003b2e:	061a      	lsls	r2, r3, #24
 8003b30:	d5f4      	bpl.n	8003b1c <ES2_setVMPP+0xc>


	// Check to see if regulation is already disabled
	if ((MPP_Voltage_mV <= 0) && (data[0] & 0b00000110))
 8003b32:	2c00      	cmp	r4, #0
 8003b34:	dc02      	bgt.n	8003b3c <ES2_setVMPP+0x2c>
 8003b36:	f013 0f06 	tst.w	r3, #6
 8003b3a:	d11f      	bne.n	8003b7c <ES2_setVMPP+0x6c>
		return;

	// Calculates the required DAC voltage to bias the feedback 
	DAC_setting = 357 - ((unsigned long) 984 * MPP_Voltage_mV >> 16);
 8003b3c:	f44f 7376 	mov.w	r3, #984	; 0x3d8
 8003b40:	4363      	muls	r3, r4
 8003b42:	0c1b      	lsrs	r3, r3, #16
 8003b44:	f1c3 0365 	rsb	r3, r3, #101	; 0x65

	if (data[1] != DAC_setting)
 8003b48:	f89d 2009 	ldrb.w	r2, [sp, #9]
	DAC_setting = 357 - ((unsigned long) 984 * MPP_Voltage_mV >> 16);
 8003b4c:	b2db      	uxtb	r3, r3
	if (data[1] != DAC_setting)
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d014      	beq.n	8003b7c <ES2_setVMPP+0x6c>
	{
		if (MPP_Voltage_mV > 0)
 8003b52:	2c00      	cmp	r4, #0
 8003b54:	dd14      	ble.n	8003b80 <ES2_setVMPP+0x70>
		{
			// Formats data for transmission
			Control = writeEEPROM ? 0x70 : 0x50;
 8003b56:	2d00      	cmp	r5, #0
 8003b58:	bf14      	ite	ne
 8003b5a:	2270      	movne	r2, #112	; 0x70
 8003b5c:	2250      	moveq	r2, #80	; 0x50
			Control = writeEEPROM ? 0x76 : 0x56;
			Hbyte = 0x00;
			Lbyte = 0x00;
		}
		tmp[0] = Control;
		tmp[1] = Hbyte;
 8003b5e:	f88d 300d 	strb.w	r3, [sp, #13]
		tmp[2] = Lbyte;
 8003b62:	2300      	movs	r3, #0
 8003b64:	f88d 300e 	strb.w	r3, [sp, #14]

		// Write value to DAC
		HAL_I2C_Master_Transmit(&hi2c3, DAC_SLAVE_ADDR<<1, tmp, 3, 100);
 8003b68:	2364      	movs	r3, #100	; 0x64
		tmp[0] = Control;
 8003b6a:	f88d 200c 	strb.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(&hi2c3, DAC_SLAVE_ADDR<<1, tmp, 3, 100);
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	aa03      	add	r2, sp, #12
 8003b72:	2303      	movs	r3, #3
 8003b74:	21c0      	movs	r1, #192	; 0xc0
 8003b76:	4806      	ldr	r0, [pc, #24]	; (8003b90 <ES2_setVMPP+0x80>)
 8003b78:	f7fe f8a6 	bl	8001cc8 <HAL_I2C_Master_Transmit>
	}

	return;
}
 8003b7c:	b005      	add	sp, #20
 8003b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Hbyte = 0x00;
 8003b80:	2d00      	cmp	r5, #0
 8003b82:	f04f 0300 	mov.w	r3, #0
 8003b86:	bf14      	ite	ne
 8003b88:	2276      	movne	r2, #118	; 0x76
 8003b8a:	2256      	moveq	r2, #86	; 0x56
 8003b8c:	e7e7      	b.n	8003b5e <ES2_setVMPP+0x4e>
 8003b8e:	bf00      	nop
 8003b90:	200000f8 	.word	0x200000f8

08003b94 <ES2_batteryVoltage>:

// Returns battery voltage from fuel gauge in mV
uint16_t ES2_batteryVoltage()
{
	uint16_t voltage = ES2_readCommand(FG_SLAVE_ADDR, 0x04);
 8003b94:	2104      	movs	r1, #4
 8003b96:	2055      	movs	r0, #85	; 0x55
 8003b98:	f7ff bd46 	b.w	8003628 <ES2_readCommand>

08003b9c <ES2_batteryCurrent>:
	return voltage;
}

// Returns 1 second average of current from fuel gauge in mA
int16_t ES2_batteryCurrent()
{
 8003b9c:	b508      	push	{r3, lr}
	int16_t current = ES2_readCommand(FG_SLAVE_ADDR, 0x10);
 8003b9e:	2110      	movs	r1, #16
 8003ba0:	2055      	movs	r0, #85	; 0x55
 8003ba2:	f7ff fd41 	bl	8003628 <ES2_readCommand>
	return current;
}
 8003ba6:	b200      	sxth	r0, r0
 8003ba8:	bd08      	pop	{r3, pc}

08003baa <ES2_temperature>:

// Returns temperature from fuel gauge in tenths of a degree Celsius (0.1 C)
int16_t ES2_temperature()
{
 8003baa:	b508      	push	{r3, lr}
	int16_t temp = ES2_readCommand(FG_SLAVE_ADDR, 0x02);
 8003bac:	2102      	movs	r1, #2
 8003bae:	2055      	movs	r0, #85	; 0x55
 8003bb0:	f7ff fd3a 	bl	8003628 <ES2_readCommand>
	temp -= 2732;
 8003bb4:	f6a0 20ac 	subw	r0, r0, #2732	; 0xaac
	return temp;
}
 8003bb8:	b200      	sxth	r0, r0
 8003bba:	bd08      	pop	{r3, pc}

08003bbc <ES2_SOC>:

// Returns state-of-charge from fuel gauge in percent of full charge (1%)
uint16_t ES2_SOC()
{
	uint16_t SOC = ES2_readCommand(FG_SLAVE_ADDR, 0x1C);
 8003bbc:	211c      	movs	r1, #28
 8003bbe:	2055      	movs	r0, #85	; 0x55
 8003bc0:	f7ff bd32 	b.w	8003628 <ES2_readCommand>

08003bc4 <ES2_fullChargeCapacity>:
}

// Returns full-charge capacity from fuel gauge in mAh
uint16_t ES2_fullChargeCapacity()
{
	uint16_t fullChargeCapacity = ES2_readCommand(FG_SLAVE_ADDR, 0x0E);
 8003bc4:	210e      	movs	r1, #14
 8003bc6:	2055      	movs	r0, #85	; 0x55
 8003bc8:	f7ff bd2e 	b.w	8003628 <ES2_readCommand>

08003bcc <ES2_remainingCapacity>:
}

// Returns remaining capacity from fuel gauge in mAh
uint16_t ES2_remainingCapacity()
{
	uint16_t remainingCapacity = ES2_readCommand(FG_SLAVE_ADDR, 0x0C);
 8003bcc:	210c      	movs	r1, #12
 8003bce:	2055      	movs	r0, #85	; 0x55
 8003bd0:	f7ff bd2a 	b.w	8003628 <ES2_readCommand>

08003bd4 <ES2_inputVoltage>:
	return 0;
}

// Returns solar/adapter input voltage in mV
uint16_t ES2_inputVoltage(uint8_t analogChannel)
{
 8003bd4:	b570      	push	{r4, r5, r6, lr}
	uint16_t voltage = 0;

	if(analogChannel == 0) 			// PA0 is configured ADC1_IN5
 8003bd6:	4604      	mov	r4, r0
 8003bd8:	b9d8      	cbnz	r0, 8003c12 <ES2_inputVoltage+0x3e>
	{
		 HAL_ADC_Start(&hadc1);
 8003bda:	480f      	ldr	r0, [pc, #60]	; (8003c18 <ES2_inputVoltage+0x44>)

		// Oversample ADC to achieve 12-bit measurement
		for (int i = 0; i < 16; i++)
		{
			if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK)
 8003bdc:	4e0e      	ldr	r6, [pc, #56]	; (8003c18 <ES2_inputVoltage+0x44>)
		 HAL_ADC_Start(&hadc1);
 8003bde:	f7fd fc73 	bl	80014c8 <HAL_ADC_Start>
 8003be2:	2510      	movs	r5, #16
			if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK)
 8003be4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003be8:	4630      	mov	r0, r6
 8003bea:	f7fd f9d7 	bl	8000f9c <HAL_ADC_PollForConversion>
 8003bee:	b920      	cbnz	r0, 8003bfa <ES2_inputVoltage+0x26>
			{
				voltage += HAL_ADC_GetValue(&hadc1);
 8003bf0:	4630      	mov	r0, r6
 8003bf2:	f7fd fa4b 	bl	800108c <HAL_ADC_GetValue>
 8003bf6:	4404      	add	r4, r0
 8003bf8:	b2a4      	uxth	r4, r4
		for (int i = 0; i < 16; i++)
 8003bfa:	3d01      	subs	r5, #1
 8003bfc:	d1f2      	bne.n	8003be4 <ES2_inputVoltage+0x10>
			}
		}
		voltage = voltage >> 2;
		voltage = (unsigned long) (25000UL * voltage) / 4095;
 8003bfe:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8003c02:	08a4      	lsrs	r4, r4, #2
 8003c04:	4344      	muls	r4, r0
 8003c06:	f640 70ff 	movw	r0, #4095	; 0xfff
 8003c0a:	fbb4 f0f0 	udiv	r0, r4, r0
 8003c0e:	b280      	uxth	r0, r0
 8003c10:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t voltage = 0;
 8003c12:	2000      	movs	r0, #0
	}

	return voltage;
}
 8003c14:	bd70      	pop	{r4, r5, r6, pc}
 8003c16:	bf00      	nop
 8003c18:	20000094 	.word	0x20000094

08003c1c <ES2_begin>:

// Set up energyShield 2 for use
int ES2_begin()
{
 8003c1c:	b513      	push	{r0, r1, r4, lr}
	int error = 0;

	es_batteryCapacity = BATTERY_CAPACITY;
 8003c1e:	4c0d      	ldr	r4, [pc, #52]	; (8003c54 <ES2_begin+0x38>)
 8003c20:	f44f 63e1 	mov.w	r3, #1800	; 0x708


	// Setup RTC
	ES2_writeByte(RTC_SLAVE_ADDR, 0x00, 0x49); // Normal Mode, Run (Not Stop), No Reset, No Correction, 24-Hour, 12.5pF
 8003c24:	2249      	movs	r2, #73	; 0x49
 8003c26:	2100      	movs	r1, #0
 8003c28:	2051      	movs	r0, #81	; 0x51
	es_batteryCapacity = BATTERY_CAPACITY;
 8003c2a:	8023      	strh	r3, [r4, #0]
	ES2_writeByte(RTC_SLAVE_ADDR, 0x00, 0x49); // Normal Mode, Run (Not Stop), No Reset, No Correction, 24-Hour, 12.5pF
 8003c2c:	f7ff fcb0 	bl	8003590 <ES2_writeByte>
	ES2_writeByte(RTC_SLAVE_ADDR, 0x01, 0xC7); // Alarm Interrupt Enabled, Leave Alarm Flag Unchanged, Disable MI, HMI, and TF, No CLKOUT
 8003c30:	22c7      	movs	r2, #199	; 0xc7
 8003c32:	2101      	movs	r1, #1
 8003c34:	2051      	movs	r0, #81	; 0x51
 8003c36:	f7ff fcab 	bl	8003590 <ES2_writeByte>
	ES2_clearAlarms();
 8003c3a:	f7ff ff25 	bl	8003a88 <ES2_clearAlarms>

	// Setup Fuel Gauge	
	error |= ES2_setupFuelGauge(FG_SLAVE_ADDR, es_batteryCapacity, BATTERY_TERMVOLT_MV, BATTERY_TERMCUR_MA, ALARM_SOC); // Write correct RAM values
 8003c3e:	230a      	movs	r3, #10
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	8821      	ldrh	r1, [r4, #0]
 8003c44:	2341      	movs	r3, #65	; 0x41
 8003c46:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003c4a:	2055      	movs	r0, #85	; 0x55
 8003c4c:	f7ff fd2f 	bl	80036ae <ES2_setupFuelGauge>

	return error;
}
 8003c50:	b002      	add	sp, #8
 8003c52:	bd10      	pop	{r4, pc}
 8003c54:	2000021c 	.word	0x2000021c

08003c58 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003c58:	b510      	push	{r4, lr}
  ADC_MultiModeTypeDef multimode = {0};
 8003c5a:	2400      	movs	r4, #0
{
 8003c5c:	b08a      	sub	sp, #40	; 0x28
  ADC_ChannelConfTypeDef sConfig = {0};
 8003c5e:	2218      	movs	r2, #24
 8003c60:	4621      	mov	r1, r4
 8003c62:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 8003c64:	9401      	str	r4, [sp, #4]
 8003c66:	9402      	str	r4, [sp, #8]
 8003c68:	9403      	str	r4, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003c6a:	f000 fc5d 	bl	8004528 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8003c6e:	481b      	ldr	r0, [pc, #108]	; (8003cdc <MX_ADC1_Init+0x84>)
 8003c70:	4b1b      	ldr	r3, [pc, #108]	; (8003ce0 <MX_ADC1_Init+0x88>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003c72:	6084      	str	r4, [r0, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003c74:	e880 0018 	stmia.w	r0, {r3, r4}
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003c78:	2304      	movs	r3, #4
 8003c7a:	6143      	str	r3, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
 8003c7c:	2301      	movs	r3, #1
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003c7e:	60c4      	str	r4, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003c80:	6104      	str	r4, [r0, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003c82:	7604      	strb	r4, [r0, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003c84:	7644      	strb	r4, [r0, #25]
  hadc1.Init.NbrOfConversion = 1;
 8003c86:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003c88:	f880 4020 	strb.w	r4, [r0, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003c8c:	6284      	str	r4, [r0, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003c8e:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003c90:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003c94:	6344      	str	r4, [r0, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8003c96:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003c9a:	f7fd f89f 	bl	8000ddc <HAL_ADC_Init>
 8003c9e:	b108      	cbz	r0, 8003ca4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8003ca0:	f000 fb08 	bl	80042b4 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003ca4:	a901      	add	r1, sp, #4
 8003ca6:	480d      	ldr	r0, [pc, #52]	; (8003cdc <MX_ADC1_Init+0x84>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003ca8:	9401      	str	r4, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003caa:	f7fd fc87 	bl	80015bc <HAL_ADCEx_MultiModeConfigChannel>
 8003cae:	b108      	cbz	r0, 8003cb4 <MX_ADC1_Init+0x5c>
  {
    Error_Handler();
 8003cb0:	f000 fb00 	bl	80042b4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003cb4:	4b0b      	ldr	r3, [pc, #44]	; (8003ce4 <MX_ADC1_Init+0x8c>)
 8003cb6:	9304      	str	r3, [sp, #16]
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003cb8:	227f      	movs	r2, #127	; 0x7f
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003cba:	2306      	movs	r3, #6
 8003cbc:	9305      	str	r3, [sp, #20]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003cbe:	9207      	str	r2, [sp, #28]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003cc0:	2300      	movs	r3, #0
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003cc2:	2204      	movs	r2, #4
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003cc4:	a904      	add	r1, sp, #16
 8003cc6:	4805      	ldr	r0, [pc, #20]	; (8003cdc <MX_ADC1_Init+0x84>)
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003cc8:	9306      	str	r3, [sp, #24]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003cca:	9208      	str	r2, [sp, #32]
  sConfig.Offset = 0;
 8003ccc:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003cce:	f7fd f9e1 	bl	8001094 <HAL_ADC_ConfigChannel>
 8003cd2:	b108      	cbz	r0, 8003cd8 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8003cd4:	f000 faee 	bl	80042b4 <Error_Handler>
  }

}
 8003cd8:	b00a      	add	sp, #40	; 0x28
 8003cda:	bd10      	pop	{r4, pc}
 8003cdc:	20000094 	.word	0x20000094
 8003ce0:	50040000 	.word	0x50040000
 8003ce4:	14f00020 	.word	0x14f00020

08003ce8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003ce8:	b510      	push	{r4, lr}
 8003cea:	4604      	mov	r4, r0
 8003cec:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cee:	2214      	movs	r2, #20
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	a803      	add	r0, sp, #12
 8003cf4:	f000 fc18 	bl	8004528 <memset>
  if(adcHandle->Instance==ADC1)
 8003cf8:	6822      	ldr	r2, [r4, #0]
 8003cfa:	4b12      	ldr	r3, [pc, #72]	; (8003d44 <HAL_ADC_MspInit+0x5c>)
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d11e      	bne.n	8003d3e <HAL_ADC_MspInit+0x56>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003d00:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8003d04:	f5a3 33f8 	sub.w	r3, r3, #126976	; 0x1f000
    PA0     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d08:	a903      	add	r1, sp, #12
    __HAL_RCC_ADC_CLK_ENABLE();
 8003d0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d10:	64da      	str	r2, [r3, #76]	; 0x4c
 8003d12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d14:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003d18:	9201      	str	r2, [sp, #4]
 8003d1a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d1e:	f042 0201 	orr.w	r2, r2, #1
 8003d22:	64da      	str	r2, [r3, #76]	; 0x4c
 8003d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	9302      	str	r3, [sp, #8]
 8003d2c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003d36:	230b      	movs	r3, #11
 8003d38:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d3a:	f7fd fd13 	bl	8001764 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003d3e:	b008      	add	sp, #32
 8003d40:	bd10      	pop	{r4, pc}
 8003d42:	bf00      	nop
 8003d44:	50040000 	.word	0x50040000

08003d48 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003d48:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d4a:	2214      	movs	r2, #20
{
 8003d4c:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d4e:	eb0d 0002 	add.w	r0, sp, r2
 8003d52:	2100      	movs	r1, #0
 8003d54:	f000 fbe8 	bl	8004528 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d58:	4b21      	ldr	r3, [pc, #132]	; (8003de0 <MX_GPIO_Init+0x98>)
 8003d5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d5c:	f042 0204 	orr.w	r2, r2, #4
 8003d60:	64da      	str	r2, [r3, #76]	; 0x4c
 8003d62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d64:	f002 0204 	and.w	r2, r2, #4
 8003d68:	9201      	str	r2, [sp, #4]
 8003d6a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003d6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d72:	64da      	str	r2, [r3, #76]	; 0x4c
 8003d74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d76:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003d7a:	9202      	str	r2, [sp, #8]
 8003d7c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d80:	f042 0201 	orr.w	r2, r2, #1
 8003d84:	64da      	str	r2, [r3, #76]	; 0x4c
 8003d86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d88:	f002 0201 	and.w	r2, r2, #1
 8003d8c:	9203      	str	r2, [sp, #12]
 8003d8e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d92:	f042 0202 	orr.w	r2, r2, #2
 8003d96:	64da      	str	r2, [r3, #76]	; 0x4c
 8003d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d9a:	f003 0302 	and.w	r3, r3, #2

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003d9e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003da0:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003da2:	2120      	movs	r1, #32
 8003da4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003da8:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003daa:	f7fd fdb7 	bl	800191c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003dae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db2:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = B1_Pin;
 8003db4:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003db6:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003db8:	4b0a      	ldr	r3, [pc, #40]	; (8003de4 <MX_GPIO_Init+0x9c>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003dba:	480b      	ldr	r0, [pc, #44]	; (8003de8 <MX_GPIO_Init+0xa0>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003dbc:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dbe:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003dc0:	f7fd fcd0 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003dc4:	2320      	movs	r3, #32
 8003dc6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003dc8:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dca:	2301      	movs	r3, #1
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003dcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dd0:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd2:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dd4:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003dd6:	f7fd fcc5 	bl	8001764 <HAL_GPIO_Init>

}
 8003dda:	b00a      	add	sp, #40	; 0x28
 8003ddc:	bd10      	pop	{r4, pc}
 8003dde:	bf00      	nop
 8003de0:	40021000 	.word	0x40021000
 8003de4:	10210000 	.word	0x10210000
 8003de8:	48000800 	.word	0x48000800

08003dec <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003dec:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8003dee:	4812      	ldr	r0, [pc, #72]	; (8003e38 <MX_I2C1_Init+0x4c>)
  hi2c1.Init.Timing = 0x10909CEC;
 8003df0:	4b12      	ldr	r3, [pc, #72]	; (8003e3c <MX_I2C1_Init+0x50>)
 8003df2:	4913      	ldr	r1, [pc, #76]	; (8003e40 <MX_I2C1_Init+0x54>)
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003df4:	2201      	movs	r2, #1
  hi2c1.Init.Timing = 0x10909CEC;
 8003df6:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c1.Init.OwnAddress1 = 0;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003dfe:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003e00:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003e02:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003e04:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e06:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e08:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003e0a:	f7fd ff0b 	bl	8001c24 <HAL_I2C_Init>
 8003e0e:	b108      	cbz	r0, 8003e14 <MX_I2C1_Init+0x28>
  {
    Error_Handler();
 8003e10:	f000 fa50 	bl	80042b4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003e14:	2100      	movs	r1, #0
 8003e16:	4808      	ldr	r0, [pc, #32]	; (8003e38 <MX_I2C1_Init+0x4c>)
 8003e18:	f7fe f9f6 	bl	8002208 <HAL_I2CEx_ConfigAnalogFilter>
 8003e1c:	b108      	cbz	r0, 8003e22 <MX_I2C1_Init+0x36>
  {
    Error_Handler();
 8003e1e:	f000 fa49 	bl	80042b4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003e22:	2100      	movs	r1, #0
 8003e24:	4804      	ldr	r0, [pc, #16]	; (8003e38 <MX_I2C1_Init+0x4c>)
 8003e26:	f7fe fa15 	bl	8002254 <HAL_I2CEx_ConfigDigitalFilter>
 8003e2a:	b118      	cbz	r0, 8003e34 <MX_I2C1_Init+0x48>
  {
    Error_Handler();
  }

}
 8003e2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003e30:	f000 ba40 	b.w	80042b4 <Error_Handler>
 8003e34:	bd08      	pop	{r3, pc}
 8003e36:	bf00      	nop
 8003e38:	20000144 	.word	0x20000144
 8003e3c:	10909cec 	.word	0x10909cec
 8003e40:	40005400 	.word	0x40005400

08003e44 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8003e44:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 8003e46:	4812      	ldr	r0, [pc, #72]	; (8003e90 <MX_I2C2_Init+0x4c>)
  hi2c2.Init.Timing = 0x10909CEC;
 8003e48:	4b12      	ldr	r3, [pc, #72]	; (8003e94 <MX_I2C2_Init+0x50>)
 8003e4a:	4913      	ldr	r1, [pc, #76]	; (8003e98 <MX_I2C2_Init+0x54>)
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e4c:	2201      	movs	r2, #1
  hi2c2.Init.Timing = 0x10909CEC;
 8003e4e:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c2.Init.OwnAddress1 = 0;
 8003e52:	2300      	movs	r3, #0
 8003e54:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e56:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003e58:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003e5a:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003e5c:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e5e:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e60:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003e62:	f7fd fedf 	bl	8001c24 <HAL_I2C_Init>
 8003e66:	b108      	cbz	r0, 8003e6c <MX_I2C2_Init+0x28>
  {
    Error_Handler();
 8003e68:	f000 fa24 	bl	80042b4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	4808      	ldr	r0, [pc, #32]	; (8003e90 <MX_I2C2_Init+0x4c>)
 8003e70:	f7fe f9ca 	bl	8002208 <HAL_I2CEx_ConfigAnalogFilter>
 8003e74:	b108      	cbz	r0, 8003e7a <MX_I2C2_Init+0x36>
  {
    Error_Handler();
 8003e76:	f000 fa1d 	bl	80042b4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	4804      	ldr	r0, [pc, #16]	; (8003e90 <MX_I2C2_Init+0x4c>)
 8003e7e:	f7fe f9e9 	bl	8002254 <HAL_I2CEx_ConfigDigitalFilter>
 8003e82:	b118      	cbz	r0, 8003e8c <MX_I2C2_Init+0x48>
  {
    Error_Handler();
  }

}
 8003e84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003e88:	f000 ba14 	b.w	80042b4 <Error_Handler>
 8003e8c:	bd08      	pop	{r3, pc}
 8003e8e:	bf00      	nop
 8003e90:	20000190 	.word	0x20000190
 8003e94:	10909cec 	.word	0x10909cec
 8003e98:	40005800 	.word	0x40005800

08003e9c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8003e9c:	b508      	push	{r3, lr}

  hi2c3.Instance = I2C3;
 8003e9e:	4812      	ldr	r0, [pc, #72]	; (8003ee8 <MX_I2C3_Init+0x4c>)
  hi2c3.Init.Timing = 0x10909CEC;
 8003ea0:	4b12      	ldr	r3, [pc, #72]	; (8003eec <MX_I2C3_Init+0x50>)
 8003ea2:	4913      	ldr	r1, [pc, #76]	; (8003ef0 <MX_I2C3_Init+0x54>)
  hi2c3.Init.OwnAddress1 = 0;
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ea4:	2201      	movs	r2, #1
  hi2c3.Init.Timing = 0x10909CEC;
 8003ea6:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c3.Init.OwnAddress1 = 0;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	6083      	str	r3, [r0, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003eae:	60c2      	str	r2, [r0, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003eb0:	6103      	str	r3, [r0, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8003eb2:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003eb4:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003eb6:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003eb8:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003eba:	f7fd feb3 	bl	8001c24 <HAL_I2C_Init>
 8003ebe:	b108      	cbz	r0, 8003ec4 <MX_I2C3_Init+0x28>
  {
    Error_Handler();
 8003ec0:	f000 f9f8 	bl	80042b4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003ec4:	2100      	movs	r1, #0
 8003ec6:	4808      	ldr	r0, [pc, #32]	; (8003ee8 <MX_I2C3_Init+0x4c>)
 8003ec8:	f7fe f99e 	bl	8002208 <HAL_I2CEx_ConfigAnalogFilter>
 8003ecc:	b108      	cbz	r0, 8003ed2 <MX_I2C3_Init+0x36>
  {
    Error_Handler();
 8003ece:	f000 f9f1 	bl	80042b4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	4804      	ldr	r0, [pc, #16]	; (8003ee8 <MX_I2C3_Init+0x4c>)
 8003ed6:	f7fe f9bd 	bl	8002254 <HAL_I2CEx_ConfigDigitalFilter>
 8003eda:	b118      	cbz	r0, 8003ee4 <MX_I2C3_Init+0x48>
  {
    Error_Handler();
  }

}
 8003edc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003ee0:	f000 b9e8 	b.w	80042b4 <Error_Handler>
 8003ee4:	bd08      	pop	{r3, pc}
 8003ee6:	bf00      	nop
 8003ee8:	200000f8 	.word	0x200000f8
 8003eec:	10909cec 	.word	0x10909cec
 8003ef0:	40005c00 	.word	0x40005c00

08003ef4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003ef4:	b510      	push	{r4, lr}
 8003ef6:	4604      	mov	r4, r0
 8003ef8:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003efa:	2214      	movs	r2, #20
 8003efc:	2100      	movs	r1, #0
 8003efe:	a807      	add	r0, sp, #28
 8003f00:	f000 fb12 	bl	8004528 <memset>
  if(i2cHandle->Instance==I2C1)
 8003f04:	6823      	ldr	r3, [r4, #0]
 8003f06:	4a38      	ldr	r2, [pc, #224]	; (8003fe8 <HAL_I2C_MspInit+0xf4>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d122      	bne.n	8003f52 <HAL_I2C_MspInit+0x5e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f0c:	4c37      	ldr	r4, [pc, #220]	; (8003fec <HAL_I2C_MspInit+0xf8>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f0e:	4838      	ldr	r0, [pc, #224]	; (8003ff0 <HAL_I2C_MspInit+0xfc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f10:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003f12:	f043 0302 	orr.w	r3, r3, #2
 8003f16:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003f18:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	9301      	str	r3, [sp, #4]
 8003f20:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003f22:	23c0      	movs	r3, #192	; 0xc0
 8003f24:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f26:	2312      	movs	r3, #18
 8003f28:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f32:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003f34:	2304      	movs	r3, #4
 8003f36:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f38:	f7fd fc14 	bl	8001764 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003f3c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f42:	65a3      	str	r3, [r4, #88]	; 0x58
 8003f44:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f4a:	9302      	str	r3, [sp, #8]
 8003f4c:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8003f4e:	b00c      	add	sp, #48	; 0x30
 8003f50:	bd10      	pop	{r4, pc}
  else if(i2cHandle->Instance==I2C2)
 8003f52:	4a28      	ldr	r2, [pc, #160]	; (8003ff4 <HAL_I2C_MspInit+0x100>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d122      	bne.n	8003f9e <HAL_I2C_MspInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f58:	4c24      	ldr	r4, [pc, #144]	; (8003fec <HAL_I2C_MspInit+0xf8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f5a:	4825      	ldr	r0, [pc, #148]	; (8003ff0 <HAL_I2C_MspInit+0xfc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f5c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003f5e:	f043 0302 	orr.w	r3, r3, #2
 8003f62:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003f64:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	9303      	str	r3, [sp, #12]
 8003f6c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003f6e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003f72:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f74:	2312      	movs	r3, #18
 8003f76:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f80:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003f82:	2304      	movs	r3, #4
 8003f84:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f86:	f7fd fbed 	bl	8001764 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003f8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f90:	65a3      	str	r3, [r4, #88]	; 0x58
 8003f92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f98:	9304      	str	r3, [sp, #16]
 8003f9a:	9b04      	ldr	r3, [sp, #16]
 8003f9c:	e7d7      	b.n	8003f4e <HAL_I2C_MspInit+0x5a>
  else if(i2cHandle->Instance==I2C3)
 8003f9e:	4a16      	ldr	r2, [pc, #88]	; (8003ff8 <HAL_I2C_MspInit+0x104>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d1d4      	bne.n	8003f4e <HAL_I2C_MspInit+0x5a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fa4:	4c11      	ldr	r4, [pc, #68]	; (8003fec <HAL_I2C_MspInit+0xf8>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fa6:	4815      	ldr	r0, [pc, #84]	; (8003ffc <HAL_I2C_MspInit+0x108>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fa8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003faa:	f043 0304 	orr.w	r3, r3, #4
 8003fae:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003fb0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003fb2:	f003 0304 	and.w	r3, r3, #4
 8003fb6:	9305      	str	r3, [sp, #20]
 8003fb8:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003fba:	2212      	movs	r2, #18
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003fc0:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fc2:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fc4:	2201      	movs	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003fc6:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fc8:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003fca:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fcc:	9209      	str	r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fce:	f7fd fbc9 	bl	8001764 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003fd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003fd4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003fd8:	65a3      	str	r3, [r4, #88]	; 0x58
 8003fda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003fdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fe0:	9306      	str	r3, [sp, #24]
 8003fe2:	9b06      	ldr	r3, [sp, #24]
}
 8003fe4:	e7b3      	b.n	8003f4e <HAL_I2C_MspInit+0x5a>
 8003fe6:	bf00      	nop
 8003fe8:	40005400 	.word	0x40005400
 8003fec:	40021000 	.word	0x40021000
 8003ff0:	48000400 	.word	0x48000400
 8003ff4:	40005800 	.word	0x40005800
 8003ff8:	40005c00 	.word	0x40005c00
 8003ffc:	48000800 	.word	0x48000800

08004000 <MX_LPTIM1_Init>:

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{

  hlptim1.Instance = LPTIM1;
 8004000:	480d      	ldr	r0, [pc, #52]	; (8004038 <MX_LPTIM1_Init+0x38>)
{
 8004002:	b508      	push	{r3, lr}
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_ULPTIM;
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8004004:	f64f 71ff 	movw	r1, #65535	; 0xffff
  hlptim1.Instance = LPTIM1;
 8004008:	4b0c      	ldr	r3, [pc, #48]	; (800403c <MX_LPTIM1_Init+0x3c>)
 800400a:	6003      	str	r3, [r0, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_ULPTIM;
 800400c:	2201      	movs	r2, #1
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 800400e:	2300      	movs	r3, #0
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8004010:	6141      	str	r1, [r0, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8004012:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_ULPTIM;
 8004016:	6042      	str	r2, [r0, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8004018:	6083      	str	r3, [r0, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 800401a:	60c3      	str	r3, [r0, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 800401c:	6103      	str	r3, [r0, #16]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800401e:	6203      	str	r3, [r0, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8004020:	6243      	str	r3, [r0, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8004022:	6281      	str	r1, [r0, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_COMP1;
 8004024:	62c2      	str	r2, [r0, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8004026:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8004028:	f7fe f93a 	bl	80022a0 <HAL_LPTIM_Init>
 800402c:	b118      	cbz	r0, 8004036 <MX_LPTIM1_Init+0x36>
  {
    Error_Handler();
  }

}
 800402e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8004032:	f000 b93f 	b.w	80042b4 <Error_Handler>
 8004036:	bd08      	pop	{r3, pc}
 8004038:	200001dc 	.word	0x200001dc
 800403c:	40007c00 	.word	0x40007c00

08004040 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{

  if(lptimHandle->Instance==LPTIM1)
 8004040:	6802      	ldr	r2, [r0, #0]
 8004042:	4b08      	ldr	r3, [pc, #32]	; (8004064 <HAL_LPTIM_MspInit+0x24>)
 8004044:	429a      	cmp	r2, r3
{
 8004046:	b082      	sub	sp, #8
  if(lptimHandle->Instance==LPTIM1)
 8004048:	d10a      	bne.n	8004060 <HAL_LPTIM_MspInit+0x20>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800404a:	f503 33ca 	add.w	r3, r3, #103424	; 0x19400
 800404e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004050:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004054:	659a      	str	r2, [r3, #88]	; 0x58
 8004056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004058:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800405c:	9301      	str	r3, [sp, #4]
 800405e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 8004060:	b002      	add	sp, #8
 8004062:	4770      	bx	lr
 8004064:	40007c00 	.word	0x40007c00

08004068 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8004068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800406a:	b0b9      	sub	sp, #228	; 0xe4
	RCC_OscInitTypeDef RCC_OscInitStruct =
 800406c:	2244      	movs	r2, #68	; 0x44
 800406e:	2100      	movs	r1, #0
 8004070:	a805      	add	r0, sp, #20
 8004072:	f000 fa59 	bl	8004528 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8004076:	2214      	movs	r2, #20
 8004078:	2100      	movs	r1, #0
 800407a:	4668      	mov	r0, sp
 800407c:	f000 fa54 	bl	8004528 <memset>
	{ 0 };
	RCC_PeriphCLKInitTypeDef PeriphClkInit =
 8004080:	2288      	movs	r2, #136	; 0x88
 8004082:	2100      	movs	r1, #0
 8004084:	a816      	add	r0, sp, #88	; 0x58
 8004086:	f000 fa4f 	bl	8004528 <memset>
	{ 0 };

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800408a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800408e:	9308      	str	r3, [sp, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004090:	2310      	movs	r3, #16
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004092:	2402      	movs	r4, #2
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004094:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLM = 1;
 8004096:	2701      	movs	r7, #1
	RCC_OscInitStruct.PLL.PLLN = 10;
 8004098:	230a      	movs	r3, #10
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800409a:	2607      	movs	r6, #7
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800409c:	a805      	add	r0, sp, #20
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800409e:	2500      	movs	r5, #0
	RCC_OscInitStruct.PLL.PLLN = 10;
 80040a0:	9312      	str	r3, [sp, #72]	; 0x48
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80040a2:	9405      	str	r4, [sp, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80040a4:	940f      	str	r4, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80040a6:	9410      	str	r4, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80040a8:	9711      	str	r7, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80040aa:	9613      	str	r6, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80040ac:	9414      	str	r4, [sp, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80040ae:	9415      	str	r4, [sp, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80040b0:	f7fe fa1c 	bl	80024ec <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80040b4:	220f      	movs	r2, #15
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80040b6:	2104      	movs	r1, #4
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80040b8:	2303      	movs	r3, #3
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80040ba:	4668      	mov	r0, sp
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80040bc:	e88d 002c 	stmia.w	sp, {r2, r3, r5}
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80040c0:	9503      	str	r5, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80040c2:	9504      	str	r5, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80040c4:	f7fe fc38 	bl	8002938 <HAL_RCC_ClockConfig>
	{
		Error_Handler();
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2
 80040c8:	f244 33c2 	movw	r3, #17346	; 0x43c2
 80040cc:	9316      	str	r3, [sp, #88]	; 0x58
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
	PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
	PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
	PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80040ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80040d2:	9334      	str	r3, [sp, #208]	; 0xd0
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
	PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80040d4:	2308      	movs	r3, #8
 80040d6:	9319      	str	r3, [sp, #100]	; 0x64
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80040d8:	a816      	add	r0, sp, #88	; 0x58
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80040da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040de:	931d      	str	r3, [sp, #116]	; 0x74
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80040e0:	9525      	str	r5, [sp, #148]	; 0x94
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80040e2:	952a      	str	r5, [sp, #168]	; 0xa8
	PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80040e4:	952b      	str	r5, [sp, #172]	; 0xac
	PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80040e6:	952c      	str	r5, [sp, #176]	; 0xb0
	PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 80040e8:	952d      	str	r5, [sp, #180]	; 0xb4
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80040ea:	9417      	str	r4, [sp, #92]	; 0x5c
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80040ec:	9718      	str	r7, [sp, #96]	; 0x60
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80040ee:	961a      	str	r6, [sp, #104]	; 0x68
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80040f0:	941b      	str	r4, [sp, #108]	; 0x6c
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80040f2:	941c      	str	r4, [sp, #112]	; 0x70
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80040f4:	f7fe fde2 	bl	8002cbc <HAL_RCCEx_PeriphCLKConfig>
	{
		Error_Handler();
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80040f8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80040fc:	f7fe f92a 	bl	8002354 <HAL_PWREx_ControlVoltageScaling>
	{
		Error_Handler();
	}
}
 8004100:	b039      	add	sp, #228	; 0xe4
 8004102:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004104 <main>:
{
 8004104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004108:	ed2d 8b04 	vpush	{d8-d9}
 800410c:	b087      	sub	sp, #28
	HAL_Init();
 800410e:	f7fc fe19 	bl	8000d44 <HAL_Init>
	SystemClock_Config();
 8004112:	f7ff ffa9 	bl	8004068 <SystemClock_Config>
	MX_GPIO_Init();
 8004116:	f7ff fe17 	bl	8003d48 <MX_GPIO_Init>
	MX_I2C1_Init();
 800411a:	f7ff fe67 	bl	8003dec <MX_I2C1_Init>
	MX_I2C2_Init();
 800411e:	f7ff fe91 	bl	8003e44 <MX_I2C2_Init>
	MX_I2C3_Init();
 8004122:	f7ff febb 	bl	8003e9c <MX_I2C3_Init>
	MX_LPTIM1_Init();
 8004126:	f7ff ff6b 	bl	8004000 <MX_LPTIM1_Init>
	MX_USART2_UART_Init();
 800412a:	f000 f959 	bl	80043e0 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 800412e:	f7ff fd93 	bl	8003c58 <MX_ADC1_Init>
	if (ES2_begin())
 8004132:	f7ff fd73 	bl	8003c1c <ES2_begin>
 8004136:	b118      	cbz	r0, 8004140 <main+0x3c>
		printf("! ES2 ERROR - Initialization Failed !");
 8004138:	4850      	ldr	r0, [pc, #320]	; (800427c <main+0x178>)
 800413a:	f000 f9fd 	bl	8004538 <iprintf>
 800413e:	e7fe      	b.n	800413e <main+0x3a>
	if (ES2_readVMPP() != -1)
 8004140:	f7ff fcc2 	bl	8003ac8 <ES2_readVMPP>
 8004144:	3001      	adds	r0, #1
 8004146:	d004      	beq.n	8004152 <main+0x4e>
		ES2_setVMPP(-1, 1); // Disable VMPP regulation to allow charging from any power supply (7V - 23V) and prevent excessive EEPROM writes
 8004148:	2101      	movs	r1, #1
 800414a:	f04f 30ff 	mov.w	r0, #4294967295
 800414e:	f7ff fcdf 	bl	8003b10 <ES2_setVMPP>
		printf("Temperature        = %f F\n", (temperature * 9.0 / 5.0) + 32.0);
 8004152:	4f4b      	ldr	r7, [pc, #300]	; (8004280 <main+0x17c>)
 8004154:	4d4b      	ldr	r5, [pc, #300]	; (8004284 <main+0x180>)
 8004156:	2600      	movs	r6, #0
 8004158:	2400      	movs	r4, #0
		float batteryVoltage = (float) ES2_batteryVoltage() / 1000.0;
 800415a:	f7ff fd1b 	bl	8003b94 <ES2_batteryVoltage>
 800415e:	ee08 0a90 	vmov	s17, r0
		float batteryCurrent = (float) ES2_batteryCurrent() / 1000.0;
 8004162:	f7ff fd1b 	bl	8003b9c <ES2_batteryCurrent>
 8004166:	ee09 0a90 	vmov	s19, r0
		uint16_t fullCapacity = ES2_fullChargeCapacity();
 800416a:	f7ff fd2b 	bl	8003bc4 <ES2_fullChargeCapacity>
 800416e:	4682      	mov	sl, r0
		uint16_t remainingCapacity = ES2_remainingCapacity();
 8004170:	f7ff fd2c 	bl	8003bcc <ES2_remainingCapacity>
 8004174:	4681      	mov	r9, r0
		uint16_t stateOfCharge = ES2_SOC();
 8004176:	f7ff fd21 	bl	8003bbc <ES2_SOC>
 800417a:	4680      	mov	r8, r0
		float inputVoltage = (float) ES2_inputVoltage(0) / 1000;
 800417c:	2000      	movs	r0, #0
 800417e:	f7ff fd29 	bl	8003bd4 <ES2_inputVoltage>
 8004182:	ee09 0a10 	vmov	s18, r0
		float temperature = (float) ES2_temperature() / 10;
 8004186:	f7ff fd10 	bl	8003baa <ES2_temperature>
		float batteryVoltage = (float) ES2_batteryVoltage() / 1000.0;
 800418a:	eef8 7a68 	vcvt.f32.u32	s15, s17
 800418e:	eddf 8a3e 	vldr	s17, [pc, #248]	; 8004288 <main+0x184>
		printf("Battery Voltage    = %f V\n", batteryVoltage);
 8004192:	ee87 7aa8 	vdiv.f32	s14, s15, s17
		float temperature = (float) ES2_temperature() / 10;
 8004196:	ee08 0a10 	vmov	s16, r0
		printf("Battery Voltage    = %f V\n", batteryVoltage);
 800419a:	ee17 0a10 	vmov	r0, s14
 800419e:	f7fc f9cb 	bl	8000538 <__aeabi_f2d>
 80041a2:	4602      	mov	r2, r0
 80041a4:	460b      	mov	r3, r1
 80041a6:	4839      	ldr	r0, [pc, #228]	; (800428c <main+0x188>)
 80041a8:	f000 f9c6 	bl	8004538 <iprintf>
		float batteryCurrent = (float) ES2_batteryCurrent() / 1000.0;
 80041ac:	eef8 9ae9 	vcvt.f32.s32	s19, s19
		printf("Battery Current    = %f V\n", batteryCurrent);
 80041b0:	eec9 7aa8 	vdiv.f32	s15, s19, s17
 80041b4:	ee17 0a90 	vmov	r0, s15
 80041b8:	f7fc f9be 	bl	8000538 <__aeabi_f2d>
 80041bc:	4602      	mov	r2, r0
 80041be:	460b      	mov	r3, r1
 80041c0:	4833      	ldr	r0, [pc, #204]	; (8004290 <main+0x18c>)
 80041c2:	f000 f9b9 	bl	8004538 <iprintf>
		printf("Full Capacity      = %d mAh\n", fullCapacity);
 80041c6:	4651      	mov	r1, sl
 80041c8:	4832      	ldr	r0, [pc, #200]	; (8004294 <main+0x190>)
 80041ca:	f000 f9b5 	bl	8004538 <iprintf>
		printf("Remaining Capacity = %d mAh\n", remainingCapacity);
 80041ce:	4649      	mov	r1, r9
 80041d0:	4831      	ldr	r0, [pc, #196]	; (8004298 <main+0x194>)
 80041d2:	f000 f9b1 	bl	8004538 <iprintf>
		printf("State of Charge    = %d %% \n", stateOfCharge);
 80041d6:	4641      	mov	r1, r8
 80041d8:	4830      	ldr	r0, [pc, #192]	; (800429c <main+0x198>)
 80041da:	f000 f9ad 	bl	8004538 <iprintf>
		float inputVoltage = (float) ES2_inputVoltage(0) / 1000;
 80041de:	eeb8 9a49 	vcvt.f32.u32	s18, s18
		printf("Input Voltage      = %f V\n", inputVoltage);
 80041e2:	eec9 7a28 	vdiv.f32	s15, s18, s17
 80041e6:	ee17 0a90 	vmov	r0, s15
 80041ea:	f7fc f9a5 	bl	8000538 <__aeabi_f2d>
 80041ee:	4602      	mov	r2, r0
 80041f0:	460b      	mov	r3, r1
 80041f2:	482b      	ldr	r0, [pc, #172]	; (80042a0 <main+0x19c>)
 80041f4:	f000 f9a0 	bl	8004538 <iprintf>
		float temperature = (float) ES2_temperature() / 10;
 80041f8:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
		printf("Temperature        = %f F\n", (temperature * 9.0 / 5.0) + 32.0);
 80041fc:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8004200:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8004204:	ee17 0a10 	vmov	r0, s14
 8004208:	f7fc f996 	bl	8000538 <__aeabi_f2d>
 800420c:	4632      	mov	r2, r6
 800420e:	463b      	mov	r3, r7
 8004210:	f7fc f9e6 	bl	80005e0 <__aeabi_dmul>
 8004214:	4622      	mov	r2, r4
 8004216:	462b      	mov	r3, r5
 8004218:	f7fc fb0c 	bl	8000834 <__aeabi_ddiv>
 800421c:	2200      	movs	r2, #0
 800421e:	4b21      	ldr	r3, [pc, #132]	; (80042a4 <main+0x1a0>)
 8004220:	f7fc f82c 	bl	800027c <__adddf3>
 8004224:	4602      	mov	r2, r0
 8004226:	460b      	mov	r3, r1
 8004228:	481f      	ldr	r0, [pc, #124]	; (80042a8 <main+0x1a4>)
 800422a:	f000 f985 	bl	8004538 <iprintf>
		ES2_readClock();
 800422e:	f7ff fbe5 	bl	80039fc <ES2_readClock>
		printf("\n\t %d:%d:%d \t %d-%d-%d\n", ES2_hour(), ES2_minute(),
 8004232:	f7ff fc11 	bl	8003a58 <ES2_hour>
 8004236:	4680      	mov	r8, r0
 8004238:	f7ff fc08 	bl	8003a4c <ES2_minute>
 800423c:	4681      	mov	r9, r0
				ES2_second(), ES2_month(), ES2_dayOfMonth(), ES2_year());
 800423e:	f7ff fbff 	bl	8003a40 <ES2_second>
 8004242:	4682      	mov	sl, r0
 8004244:	f7ff fc14 	bl	8003a70 <ES2_month>
 8004248:	4683      	mov	fp, r0
 800424a:	f7ff fc0b 	bl	8003a64 <ES2_dayOfMonth>
 800424e:	9005      	str	r0, [sp, #20]
 8004250:	f7ff fc14 	bl	8003a7c <ES2_year>
		printf("\n\t %d:%d:%d \t %d-%d-%d\n", ES2_hour(), ES2_minute(),
 8004254:	9b05      	ldr	r3, [sp, #20]
 8004256:	9002      	str	r0, [sp, #8]
 8004258:	9301      	str	r3, [sp, #4]
 800425a:	464a      	mov	r2, r9
 800425c:	4653      	mov	r3, sl
 800425e:	4641      	mov	r1, r8
 8004260:	f8cd b000 	str.w	fp, [sp]
 8004264:	4811      	ldr	r0, [pc, #68]	; (80042ac <main+0x1a8>)
 8004266:	f000 f967 	bl	8004538 <iprintf>
		printf("\n\n\n");
 800426a:	4811      	ldr	r0, [pc, #68]	; (80042b0 <main+0x1ac>)
 800426c:	f000 f9d8 	bl	8004620 <puts>
		HAL_Delay(2000);
 8004270:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004274:	f7fc fd8a 	bl	8000d8c <HAL_Delay>
 8004278:	e76f      	b.n	800415a <main+0x56>
 800427a:	bf00      	nop
 800427c:	08005419 	.word	0x08005419
 8004280:	40220000 	.word	0x40220000
 8004284:	40140000 	.word	0x40140000
 8004288:	447a0000 	.word	0x447a0000
 800428c:	0800543f 	.word	0x0800543f
 8004290:	0800545a 	.word	0x0800545a
 8004294:	08005475 	.word	0x08005475
 8004298:	08005492 	.word	0x08005492
 800429c:	080054af 	.word	0x080054af
 80042a0:	080054cc 	.word	0x080054cc
 80042a4:	40400000 	.word	0x40400000
 80042a8:	080054e7 	.word	0x080054e7
 80042ac:	08005502 	.word	0x08005502
 80042b0:	0800551a 	.word	0x0800551a

080042b4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80042b4:	4770      	bx	lr
	...

080042b8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042b8:	4b0a      	ldr	r3, [pc, #40]	; (80042e4 <HAL_MspInit+0x2c>)
 80042ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80042bc:	f042 0201 	orr.w	r2, r2, #1
 80042c0:	661a      	str	r2, [r3, #96]	; 0x60
 80042c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 80042c4:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042c6:	f002 0201 	and.w	r2, r2, #1
 80042ca:	9200      	str	r2, [sp, #0]
 80042cc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80042ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80042d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80042d4:	659a      	str	r2, [r3, #88]	; 0x58
 80042d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042dc:	9301      	str	r3, [sp, #4]
 80042de:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80042e0:	b002      	add	sp, #8
 80042e2:	4770      	bx	lr
 80042e4:	40021000 	.word	0x40021000

080042e8 <NMI_Handler>:
 80042e8:	4770      	bx	lr

080042ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042ea:	e7fe      	b.n	80042ea <HardFault_Handler>

080042ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042ec:	e7fe      	b.n	80042ec <MemManage_Handler>

080042ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042ee:	e7fe      	b.n	80042ee <BusFault_Handler>

080042f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042f0:	e7fe      	b.n	80042f0 <UsageFault_Handler>

080042f2 <SVC_Handler>:
 80042f2:	4770      	bx	lr

080042f4 <DebugMon_Handler>:
 80042f4:	4770      	bx	lr

080042f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042f6:	4770      	bx	lr

080042f8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042f8:	f7fc bd3a 	b.w	8000d70 <HAL_IncTick>

080042fc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80042fc:	b570      	push	{r4, r5, r6, lr}
 80042fe:	460e      	mov	r6, r1
 8004300:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004302:	460c      	mov	r4, r1
 8004304:	1ba3      	subs	r3, r4, r6
 8004306:	429d      	cmp	r5, r3
 8004308:	dc01      	bgt.n	800430e <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800430a:	4628      	mov	r0, r5
 800430c:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800430e:	f3af 8000 	nop.w
 8004312:	f804 0b01 	strb.w	r0, [r4], #1
 8004316:	e7f5      	b.n	8004304 <_read+0x8>

08004318 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004318:	b510      	push	{r4, lr}
//	{
//		__io_putchar(*ptr++);
//	}


	for(int i = 0; i < len; i++)
 800431a:	2300      	movs	r3, #0
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800431c:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
 8004320:	4293      	cmp	r3, r2
 8004322:	db01      	blt.n	8004328 <_write+0x10>
		ITM_SendChar((*ptr++));

	return len;
}
 8004324:	4610      	mov	r0, r2
 8004326:	bd10      	pop	{r4, pc}
 8004328:	f8d4 0e80 	ldr.w	r0, [r4, #3712]	; 0xe80
 800432c:	07c0      	lsls	r0, r0, #31
 800432e:	d503      	bpl.n	8004338 <_write+0x20>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8004330:	f8d4 0e00 	ldr.w	r0, [r4, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004334:	07c0      	lsls	r0, r0, #31
 8004336:	d402      	bmi.n	800433e <_write+0x26>
	for(int i = 0; i < len; i++)
 8004338:	3301      	adds	r3, #1
 800433a:	e7f1      	b.n	8004320 <_write+0x8>
  __ASM volatile ("nop");
 800433c:	bf00      	nop
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800433e:	6820      	ldr	r0, [r4, #0]
 8004340:	2800      	cmp	r0, #0
 8004342:	d0fb      	beq.n	800433c <_write+0x24>
		ITM_SendChar((*ptr++));
 8004344:	5cc8      	ldrb	r0, [r1, r3]
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8004346:	7020      	strb	r0, [r4, #0]
 8004348:	e7f6      	b.n	8004338 <_write+0x20>
	...

0800434c <_sbrk>:

caddr_t _sbrk(int incr)
{
 800434c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800434e:	4b0a      	ldr	r3, [pc, #40]	; (8004378 <_sbrk+0x2c>)
 8004350:	6819      	ldr	r1, [r3, #0]
{
 8004352:	4602      	mov	r2, r0
	if (heap_end == 0)
 8004354:	b909      	cbnz	r1, 800435a <_sbrk+0xe>
		heap_end = &end;
 8004356:	4909      	ldr	r1, [pc, #36]	; (800437c <_sbrk+0x30>)
 8004358:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800435a:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800435c:	4669      	mov	r1, sp
 800435e:	4402      	add	r2, r0
 8004360:	428a      	cmp	r2, r1
 8004362:	d906      	bls.n	8004372 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8004364:	f000 f8b6 	bl	80044d4 <__errno>
 8004368:	230c      	movs	r3, #12
 800436a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800436c:	f04f 30ff 	mov.w	r0, #4294967295
 8004370:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8004372:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8004374:	bd08      	pop	{r3, pc}
 8004376:	bf00      	nop
 8004378:	20000084 	.word	0x20000084
 800437c:	2000029c 	.word	0x2000029c

08004380 <_close>:

int _close(int file)
{
	return -1;
}
 8004380:	f04f 30ff 	mov.w	r0, #4294967295
 8004384:	4770      	bx	lr

08004386 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8004386:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800438a:	604b      	str	r3, [r1, #4]
	return 0;
}
 800438c:	2000      	movs	r0, #0
 800438e:	4770      	bx	lr

08004390 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8004390:	2001      	movs	r0, #1
 8004392:	4770      	bx	lr

08004394 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8004394:	2000      	movs	r0, #0
 8004396:	4770      	bx	lr

08004398 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004398:	490f      	ldr	r1, [pc, #60]	; (80043d8 <SystemInit+0x40>)
 800439a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800439e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80043a6:	4b0d      	ldr	r3, [pc, #52]	; (80043dc <SystemInit+0x44>)
 80043a8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80043aa:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 80043ac:	f042 0201 	orr.w	r2, r2, #1
 80043b0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 80043b2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80043ba:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80043be:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80043c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80043c4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80043cc:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80043ce:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80043d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80043d4:	608b      	str	r3, [r1, #8]
 80043d6:	4770      	bx	lr
 80043d8:	e000ed00 	.word	0xe000ed00
 80043dc:	40021000 	.word	0x40021000

080043e0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80043e0:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 80043e2:	480c      	ldr	r0, [pc, #48]	; (8004414 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 115200;
 80043e4:	4b0c      	ldr	r3, [pc, #48]	; (8004418 <MX_USART2_UART_Init+0x38>)
 80043e6:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 80043ea:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80043ee:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80043f0:	2300      	movs	r3, #0
 80043f2:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80043f4:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80043f6:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80043f8:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043fa:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80043fc:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80043fe:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004400:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004402:	f7ff f892 	bl	800352a <HAL_UART_Init>
 8004406:	b118      	cbz	r0, 8004410 <MX_USART2_UART_Init+0x30>
  {
    Error_Handler();
  }

}
 8004408:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800440c:	f7ff bf52 	b.w	80042b4 <Error_Handler>
 8004410:	bd08      	pop	{r3, pc}
 8004412:	bf00      	nop
 8004414:	20000220 	.word	0x20000220
 8004418:	40004400 	.word	0x40004400

0800441c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800441c:	b510      	push	{r4, lr}
 800441e:	4604      	mov	r4, r0
 8004420:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004422:	2214      	movs	r2, #20
 8004424:	2100      	movs	r1, #0
 8004426:	a803      	add	r0, sp, #12
 8004428:	f000 f87e 	bl	8004528 <memset>
  if(uartHandle->Instance==USART2)
 800442c:	6822      	ldr	r2, [r4, #0]
 800442e:	4b13      	ldr	r3, [pc, #76]	; (800447c <HAL_UART_MspInit+0x60>)
 8004430:	429a      	cmp	r2, r3
 8004432:	d120      	bne.n	8004476 <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004434:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004438:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 800443a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800443c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004440:	659a      	str	r2, [r3, #88]	; 0x58
 8004442:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004444:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8004448:	9201      	str	r2, [sp, #4]
 800444a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800444c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800444e:	f042 0201 	orr.w	r2, r2, #1
 8004452:	64da      	str	r2, [r3, #76]	; 0x4c
 8004454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	9302      	str	r3, [sp, #8]
 800445c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800445e:	230c      	movs	r3, #12
 8004460:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004462:	2302      	movs	r3, #2
 8004464:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004466:	2303      	movs	r3, #3
 8004468:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800446a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800446e:	2307      	movs	r3, #7
 8004470:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004472:	f7fd f977 	bl	8001764 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004476:	b008      	add	sp, #32
 8004478:	bd10      	pop	{r4, pc}
 800447a:	bf00      	nop
 800447c:	40004400 	.word	0x40004400

08004480 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004480:	f8df d034 	ldr.w	sp, [pc, #52]	; 80044b8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004484:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004486:	e003      	b.n	8004490 <LoopCopyDataInit>

08004488 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004488:	4b0c      	ldr	r3, [pc, #48]	; (80044bc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800448a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800448c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800448e:	3104      	adds	r1, #4

08004490 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004490:	480b      	ldr	r0, [pc, #44]	; (80044c0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004492:	4b0c      	ldr	r3, [pc, #48]	; (80044c4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004494:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004496:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004498:	d3f6      	bcc.n	8004488 <CopyDataInit>
	ldr	r2, =_sbss
 800449a:	4a0b      	ldr	r2, [pc, #44]	; (80044c8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800449c:	e002      	b.n	80044a4 <LoopFillZerobss>

0800449e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800449e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80044a0:	f842 3b04 	str.w	r3, [r2], #4

080044a4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80044a4:	4b09      	ldr	r3, [pc, #36]	; (80044cc <LoopForever+0x16>)
	cmp	r2, r3
 80044a6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80044a8:	d3f9      	bcc.n	800449e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80044aa:	f7ff ff75 	bl	8004398 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80044ae:	f000 f817 	bl	80044e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80044b2:	f7ff fe27 	bl	8004104 <main>

080044b6 <LoopForever>:

LoopForever:
    b LoopForever
 80044b6:	e7fe      	b.n	80044b6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80044b8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80044bc:	08005610 	.word	0x08005610
	ldr	r0, =_sdata
 80044c0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80044c4:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 80044c8:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 80044cc:	2000029c 	.word	0x2000029c

080044d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80044d0:	e7fe      	b.n	80044d0 <ADC1_2_IRQHandler>
	...

080044d4 <__errno>:
 80044d4:	4b01      	ldr	r3, [pc, #4]	; (80044dc <__errno+0x8>)
 80044d6:	6818      	ldr	r0, [r3, #0]
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	20000004 	.word	0x20000004

080044e0 <__libc_init_array>:
 80044e0:	b570      	push	{r4, r5, r6, lr}
 80044e2:	4e0d      	ldr	r6, [pc, #52]	; (8004518 <__libc_init_array+0x38>)
 80044e4:	4c0d      	ldr	r4, [pc, #52]	; (800451c <__libc_init_array+0x3c>)
 80044e6:	1ba4      	subs	r4, r4, r6
 80044e8:	10a4      	asrs	r4, r4, #2
 80044ea:	2500      	movs	r5, #0
 80044ec:	42a5      	cmp	r5, r4
 80044ee:	d109      	bne.n	8004504 <__libc_init_array+0x24>
 80044f0:	4e0b      	ldr	r6, [pc, #44]	; (8004520 <__libc_init_array+0x40>)
 80044f2:	4c0c      	ldr	r4, [pc, #48]	; (8004524 <__libc_init_array+0x44>)
 80044f4:	f000 ff7c 	bl	80053f0 <_init>
 80044f8:	1ba4      	subs	r4, r4, r6
 80044fa:	10a4      	asrs	r4, r4, #2
 80044fc:	2500      	movs	r5, #0
 80044fe:	42a5      	cmp	r5, r4
 8004500:	d105      	bne.n	800450e <__libc_init_array+0x2e>
 8004502:	bd70      	pop	{r4, r5, r6, pc}
 8004504:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004508:	4798      	blx	r3
 800450a:	3501      	adds	r5, #1
 800450c:	e7ee      	b.n	80044ec <__libc_init_array+0xc>
 800450e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004512:	4798      	blx	r3
 8004514:	3501      	adds	r5, #1
 8004516:	e7f2      	b.n	80044fe <__libc_init_array+0x1e>
 8004518:	08005608 	.word	0x08005608
 800451c:	08005608 	.word	0x08005608
 8004520:	08005608 	.word	0x08005608
 8004524:	0800560c 	.word	0x0800560c

08004528 <memset>:
 8004528:	4402      	add	r2, r0
 800452a:	4603      	mov	r3, r0
 800452c:	4293      	cmp	r3, r2
 800452e:	d100      	bne.n	8004532 <memset+0xa>
 8004530:	4770      	bx	lr
 8004532:	f803 1b01 	strb.w	r1, [r3], #1
 8004536:	e7f9      	b.n	800452c <memset+0x4>

08004538 <iprintf>:
 8004538:	b40f      	push	{r0, r1, r2, r3}
 800453a:	4b0a      	ldr	r3, [pc, #40]	; (8004564 <iprintf+0x2c>)
 800453c:	b513      	push	{r0, r1, r4, lr}
 800453e:	681c      	ldr	r4, [r3, #0]
 8004540:	b124      	cbz	r4, 800454c <iprintf+0x14>
 8004542:	69a3      	ldr	r3, [r4, #24]
 8004544:	b913      	cbnz	r3, 800454c <iprintf+0x14>
 8004546:	4620      	mov	r0, r4
 8004548:	f000 fa24 	bl	8004994 <__sinit>
 800454c:	ab05      	add	r3, sp, #20
 800454e:	9a04      	ldr	r2, [sp, #16]
 8004550:	68a1      	ldr	r1, [r4, #8]
 8004552:	9301      	str	r3, [sp, #4]
 8004554:	4620      	mov	r0, r4
 8004556:	f000 fbe1 	bl	8004d1c <_vfiprintf_r>
 800455a:	b002      	add	sp, #8
 800455c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004560:	b004      	add	sp, #16
 8004562:	4770      	bx	lr
 8004564:	20000004 	.word	0x20000004

08004568 <_puts_r>:
 8004568:	b570      	push	{r4, r5, r6, lr}
 800456a:	460e      	mov	r6, r1
 800456c:	4605      	mov	r5, r0
 800456e:	b118      	cbz	r0, 8004578 <_puts_r+0x10>
 8004570:	6983      	ldr	r3, [r0, #24]
 8004572:	b90b      	cbnz	r3, 8004578 <_puts_r+0x10>
 8004574:	f000 fa0e 	bl	8004994 <__sinit>
 8004578:	69ab      	ldr	r3, [r5, #24]
 800457a:	68ac      	ldr	r4, [r5, #8]
 800457c:	b913      	cbnz	r3, 8004584 <_puts_r+0x1c>
 800457e:	4628      	mov	r0, r5
 8004580:	f000 fa08 	bl	8004994 <__sinit>
 8004584:	4b23      	ldr	r3, [pc, #140]	; (8004614 <_puts_r+0xac>)
 8004586:	429c      	cmp	r4, r3
 8004588:	d117      	bne.n	80045ba <_puts_r+0x52>
 800458a:	686c      	ldr	r4, [r5, #4]
 800458c:	89a3      	ldrh	r3, [r4, #12]
 800458e:	071b      	lsls	r3, r3, #28
 8004590:	d51d      	bpl.n	80045ce <_puts_r+0x66>
 8004592:	6923      	ldr	r3, [r4, #16]
 8004594:	b1db      	cbz	r3, 80045ce <_puts_r+0x66>
 8004596:	3e01      	subs	r6, #1
 8004598:	68a3      	ldr	r3, [r4, #8]
 800459a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800459e:	3b01      	subs	r3, #1
 80045a0:	60a3      	str	r3, [r4, #8]
 80045a2:	b9e9      	cbnz	r1, 80045e0 <_puts_r+0x78>
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	da2e      	bge.n	8004606 <_puts_r+0x9e>
 80045a8:	4622      	mov	r2, r4
 80045aa:	210a      	movs	r1, #10
 80045ac:	4628      	mov	r0, r5
 80045ae:	f000 f83f 	bl	8004630 <__swbuf_r>
 80045b2:	3001      	adds	r0, #1
 80045b4:	d011      	beq.n	80045da <_puts_r+0x72>
 80045b6:	200a      	movs	r0, #10
 80045b8:	bd70      	pop	{r4, r5, r6, pc}
 80045ba:	4b17      	ldr	r3, [pc, #92]	; (8004618 <_puts_r+0xb0>)
 80045bc:	429c      	cmp	r4, r3
 80045be:	d101      	bne.n	80045c4 <_puts_r+0x5c>
 80045c0:	68ac      	ldr	r4, [r5, #8]
 80045c2:	e7e3      	b.n	800458c <_puts_r+0x24>
 80045c4:	4b15      	ldr	r3, [pc, #84]	; (800461c <_puts_r+0xb4>)
 80045c6:	429c      	cmp	r4, r3
 80045c8:	bf08      	it	eq
 80045ca:	68ec      	ldreq	r4, [r5, #12]
 80045cc:	e7de      	b.n	800458c <_puts_r+0x24>
 80045ce:	4621      	mov	r1, r4
 80045d0:	4628      	mov	r0, r5
 80045d2:	f000 f87f 	bl	80046d4 <__swsetup_r>
 80045d6:	2800      	cmp	r0, #0
 80045d8:	d0dd      	beq.n	8004596 <_puts_r+0x2e>
 80045da:	f04f 30ff 	mov.w	r0, #4294967295
 80045de:	bd70      	pop	{r4, r5, r6, pc}
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	da04      	bge.n	80045ee <_puts_r+0x86>
 80045e4:	69a2      	ldr	r2, [r4, #24]
 80045e6:	4293      	cmp	r3, r2
 80045e8:	db06      	blt.n	80045f8 <_puts_r+0x90>
 80045ea:	290a      	cmp	r1, #10
 80045ec:	d004      	beq.n	80045f8 <_puts_r+0x90>
 80045ee:	6823      	ldr	r3, [r4, #0]
 80045f0:	1c5a      	adds	r2, r3, #1
 80045f2:	6022      	str	r2, [r4, #0]
 80045f4:	7019      	strb	r1, [r3, #0]
 80045f6:	e7cf      	b.n	8004598 <_puts_r+0x30>
 80045f8:	4622      	mov	r2, r4
 80045fa:	4628      	mov	r0, r5
 80045fc:	f000 f818 	bl	8004630 <__swbuf_r>
 8004600:	3001      	adds	r0, #1
 8004602:	d1c9      	bne.n	8004598 <_puts_r+0x30>
 8004604:	e7e9      	b.n	80045da <_puts_r+0x72>
 8004606:	6823      	ldr	r3, [r4, #0]
 8004608:	200a      	movs	r0, #10
 800460a:	1c5a      	adds	r2, r3, #1
 800460c:	6022      	str	r2, [r4, #0]
 800460e:	7018      	strb	r0, [r3, #0]
 8004610:	bd70      	pop	{r4, r5, r6, pc}
 8004612:	bf00      	nop
 8004614:	0800558c 	.word	0x0800558c
 8004618:	080055ac 	.word	0x080055ac
 800461c:	0800556c 	.word	0x0800556c

08004620 <puts>:
 8004620:	4b02      	ldr	r3, [pc, #8]	; (800462c <puts+0xc>)
 8004622:	4601      	mov	r1, r0
 8004624:	6818      	ldr	r0, [r3, #0]
 8004626:	f7ff bf9f 	b.w	8004568 <_puts_r>
 800462a:	bf00      	nop
 800462c:	20000004 	.word	0x20000004

08004630 <__swbuf_r>:
 8004630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004632:	460e      	mov	r6, r1
 8004634:	4614      	mov	r4, r2
 8004636:	4605      	mov	r5, r0
 8004638:	b118      	cbz	r0, 8004642 <__swbuf_r+0x12>
 800463a:	6983      	ldr	r3, [r0, #24]
 800463c:	b90b      	cbnz	r3, 8004642 <__swbuf_r+0x12>
 800463e:	f000 f9a9 	bl	8004994 <__sinit>
 8004642:	4b21      	ldr	r3, [pc, #132]	; (80046c8 <__swbuf_r+0x98>)
 8004644:	429c      	cmp	r4, r3
 8004646:	d12a      	bne.n	800469e <__swbuf_r+0x6e>
 8004648:	686c      	ldr	r4, [r5, #4]
 800464a:	69a3      	ldr	r3, [r4, #24]
 800464c:	60a3      	str	r3, [r4, #8]
 800464e:	89a3      	ldrh	r3, [r4, #12]
 8004650:	071a      	lsls	r2, r3, #28
 8004652:	d52e      	bpl.n	80046b2 <__swbuf_r+0x82>
 8004654:	6923      	ldr	r3, [r4, #16]
 8004656:	b363      	cbz	r3, 80046b2 <__swbuf_r+0x82>
 8004658:	6923      	ldr	r3, [r4, #16]
 800465a:	6820      	ldr	r0, [r4, #0]
 800465c:	1ac0      	subs	r0, r0, r3
 800465e:	6963      	ldr	r3, [r4, #20]
 8004660:	b2f6      	uxtb	r6, r6
 8004662:	4298      	cmp	r0, r3
 8004664:	4637      	mov	r7, r6
 8004666:	db04      	blt.n	8004672 <__swbuf_r+0x42>
 8004668:	4621      	mov	r1, r4
 800466a:	4628      	mov	r0, r5
 800466c:	f000 f928 	bl	80048c0 <_fflush_r>
 8004670:	bb28      	cbnz	r0, 80046be <__swbuf_r+0x8e>
 8004672:	68a3      	ldr	r3, [r4, #8]
 8004674:	3b01      	subs	r3, #1
 8004676:	60a3      	str	r3, [r4, #8]
 8004678:	6823      	ldr	r3, [r4, #0]
 800467a:	1c5a      	adds	r2, r3, #1
 800467c:	6022      	str	r2, [r4, #0]
 800467e:	701e      	strb	r6, [r3, #0]
 8004680:	6963      	ldr	r3, [r4, #20]
 8004682:	3001      	adds	r0, #1
 8004684:	4298      	cmp	r0, r3
 8004686:	d004      	beq.n	8004692 <__swbuf_r+0x62>
 8004688:	89a3      	ldrh	r3, [r4, #12]
 800468a:	07db      	lsls	r3, r3, #31
 800468c:	d519      	bpl.n	80046c2 <__swbuf_r+0x92>
 800468e:	2e0a      	cmp	r6, #10
 8004690:	d117      	bne.n	80046c2 <__swbuf_r+0x92>
 8004692:	4621      	mov	r1, r4
 8004694:	4628      	mov	r0, r5
 8004696:	f000 f913 	bl	80048c0 <_fflush_r>
 800469a:	b190      	cbz	r0, 80046c2 <__swbuf_r+0x92>
 800469c:	e00f      	b.n	80046be <__swbuf_r+0x8e>
 800469e:	4b0b      	ldr	r3, [pc, #44]	; (80046cc <__swbuf_r+0x9c>)
 80046a0:	429c      	cmp	r4, r3
 80046a2:	d101      	bne.n	80046a8 <__swbuf_r+0x78>
 80046a4:	68ac      	ldr	r4, [r5, #8]
 80046a6:	e7d0      	b.n	800464a <__swbuf_r+0x1a>
 80046a8:	4b09      	ldr	r3, [pc, #36]	; (80046d0 <__swbuf_r+0xa0>)
 80046aa:	429c      	cmp	r4, r3
 80046ac:	bf08      	it	eq
 80046ae:	68ec      	ldreq	r4, [r5, #12]
 80046b0:	e7cb      	b.n	800464a <__swbuf_r+0x1a>
 80046b2:	4621      	mov	r1, r4
 80046b4:	4628      	mov	r0, r5
 80046b6:	f000 f80d 	bl	80046d4 <__swsetup_r>
 80046ba:	2800      	cmp	r0, #0
 80046bc:	d0cc      	beq.n	8004658 <__swbuf_r+0x28>
 80046be:	f04f 37ff 	mov.w	r7, #4294967295
 80046c2:	4638      	mov	r0, r7
 80046c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046c6:	bf00      	nop
 80046c8:	0800558c 	.word	0x0800558c
 80046cc:	080055ac 	.word	0x080055ac
 80046d0:	0800556c 	.word	0x0800556c

080046d4 <__swsetup_r>:
 80046d4:	4b32      	ldr	r3, [pc, #200]	; (80047a0 <__swsetup_r+0xcc>)
 80046d6:	b570      	push	{r4, r5, r6, lr}
 80046d8:	681d      	ldr	r5, [r3, #0]
 80046da:	4606      	mov	r6, r0
 80046dc:	460c      	mov	r4, r1
 80046de:	b125      	cbz	r5, 80046ea <__swsetup_r+0x16>
 80046e0:	69ab      	ldr	r3, [r5, #24]
 80046e2:	b913      	cbnz	r3, 80046ea <__swsetup_r+0x16>
 80046e4:	4628      	mov	r0, r5
 80046e6:	f000 f955 	bl	8004994 <__sinit>
 80046ea:	4b2e      	ldr	r3, [pc, #184]	; (80047a4 <__swsetup_r+0xd0>)
 80046ec:	429c      	cmp	r4, r3
 80046ee:	d10f      	bne.n	8004710 <__swsetup_r+0x3c>
 80046f0:	686c      	ldr	r4, [r5, #4]
 80046f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	0715      	lsls	r5, r2, #28
 80046fa:	d42c      	bmi.n	8004756 <__swsetup_r+0x82>
 80046fc:	06d0      	lsls	r0, r2, #27
 80046fe:	d411      	bmi.n	8004724 <__swsetup_r+0x50>
 8004700:	2209      	movs	r2, #9
 8004702:	6032      	str	r2, [r6, #0]
 8004704:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004708:	81a3      	strh	r3, [r4, #12]
 800470a:	f04f 30ff 	mov.w	r0, #4294967295
 800470e:	bd70      	pop	{r4, r5, r6, pc}
 8004710:	4b25      	ldr	r3, [pc, #148]	; (80047a8 <__swsetup_r+0xd4>)
 8004712:	429c      	cmp	r4, r3
 8004714:	d101      	bne.n	800471a <__swsetup_r+0x46>
 8004716:	68ac      	ldr	r4, [r5, #8]
 8004718:	e7eb      	b.n	80046f2 <__swsetup_r+0x1e>
 800471a:	4b24      	ldr	r3, [pc, #144]	; (80047ac <__swsetup_r+0xd8>)
 800471c:	429c      	cmp	r4, r3
 800471e:	bf08      	it	eq
 8004720:	68ec      	ldreq	r4, [r5, #12]
 8004722:	e7e6      	b.n	80046f2 <__swsetup_r+0x1e>
 8004724:	0751      	lsls	r1, r2, #29
 8004726:	d512      	bpl.n	800474e <__swsetup_r+0x7a>
 8004728:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800472a:	b141      	cbz	r1, 800473e <__swsetup_r+0x6a>
 800472c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004730:	4299      	cmp	r1, r3
 8004732:	d002      	beq.n	800473a <__swsetup_r+0x66>
 8004734:	4630      	mov	r0, r6
 8004736:	f000 fa1b 	bl	8004b70 <_free_r>
 800473a:	2300      	movs	r3, #0
 800473c:	6363      	str	r3, [r4, #52]	; 0x34
 800473e:	89a3      	ldrh	r3, [r4, #12]
 8004740:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004744:	81a3      	strh	r3, [r4, #12]
 8004746:	2300      	movs	r3, #0
 8004748:	6063      	str	r3, [r4, #4]
 800474a:	6923      	ldr	r3, [r4, #16]
 800474c:	6023      	str	r3, [r4, #0]
 800474e:	89a3      	ldrh	r3, [r4, #12]
 8004750:	f043 0308 	orr.w	r3, r3, #8
 8004754:	81a3      	strh	r3, [r4, #12]
 8004756:	6923      	ldr	r3, [r4, #16]
 8004758:	b94b      	cbnz	r3, 800476e <__swsetup_r+0x9a>
 800475a:	89a3      	ldrh	r3, [r4, #12]
 800475c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004764:	d003      	beq.n	800476e <__swsetup_r+0x9a>
 8004766:	4621      	mov	r1, r4
 8004768:	4630      	mov	r0, r6
 800476a:	f000 f9c1 	bl	8004af0 <__smakebuf_r>
 800476e:	89a2      	ldrh	r2, [r4, #12]
 8004770:	f012 0301 	ands.w	r3, r2, #1
 8004774:	d00c      	beq.n	8004790 <__swsetup_r+0xbc>
 8004776:	2300      	movs	r3, #0
 8004778:	60a3      	str	r3, [r4, #8]
 800477a:	6963      	ldr	r3, [r4, #20]
 800477c:	425b      	negs	r3, r3
 800477e:	61a3      	str	r3, [r4, #24]
 8004780:	6923      	ldr	r3, [r4, #16]
 8004782:	b953      	cbnz	r3, 800479a <__swsetup_r+0xc6>
 8004784:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004788:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800478c:	d1ba      	bne.n	8004704 <__swsetup_r+0x30>
 800478e:	bd70      	pop	{r4, r5, r6, pc}
 8004790:	0792      	lsls	r2, r2, #30
 8004792:	bf58      	it	pl
 8004794:	6963      	ldrpl	r3, [r4, #20]
 8004796:	60a3      	str	r3, [r4, #8]
 8004798:	e7f2      	b.n	8004780 <__swsetup_r+0xac>
 800479a:	2000      	movs	r0, #0
 800479c:	e7f7      	b.n	800478e <__swsetup_r+0xba>
 800479e:	bf00      	nop
 80047a0:	20000004 	.word	0x20000004
 80047a4:	0800558c 	.word	0x0800558c
 80047a8:	080055ac 	.word	0x080055ac
 80047ac:	0800556c 	.word	0x0800556c

080047b0 <__sflush_r>:
 80047b0:	898a      	ldrh	r2, [r1, #12]
 80047b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047b6:	4605      	mov	r5, r0
 80047b8:	0710      	lsls	r0, r2, #28
 80047ba:	460c      	mov	r4, r1
 80047bc:	d45a      	bmi.n	8004874 <__sflush_r+0xc4>
 80047be:	684b      	ldr	r3, [r1, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	dc05      	bgt.n	80047d0 <__sflush_r+0x20>
 80047c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	dc02      	bgt.n	80047d0 <__sflush_r+0x20>
 80047ca:	2000      	movs	r0, #0
 80047cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047d2:	2e00      	cmp	r6, #0
 80047d4:	d0f9      	beq.n	80047ca <__sflush_r+0x1a>
 80047d6:	2300      	movs	r3, #0
 80047d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80047dc:	682f      	ldr	r7, [r5, #0]
 80047de:	602b      	str	r3, [r5, #0]
 80047e0:	d033      	beq.n	800484a <__sflush_r+0x9a>
 80047e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80047e4:	89a3      	ldrh	r3, [r4, #12]
 80047e6:	075a      	lsls	r2, r3, #29
 80047e8:	d505      	bpl.n	80047f6 <__sflush_r+0x46>
 80047ea:	6863      	ldr	r3, [r4, #4]
 80047ec:	1ac0      	subs	r0, r0, r3
 80047ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80047f0:	b10b      	cbz	r3, 80047f6 <__sflush_r+0x46>
 80047f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047f4:	1ac0      	subs	r0, r0, r3
 80047f6:	2300      	movs	r3, #0
 80047f8:	4602      	mov	r2, r0
 80047fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047fc:	6a21      	ldr	r1, [r4, #32]
 80047fe:	4628      	mov	r0, r5
 8004800:	47b0      	blx	r6
 8004802:	1c43      	adds	r3, r0, #1
 8004804:	89a3      	ldrh	r3, [r4, #12]
 8004806:	d106      	bne.n	8004816 <__sflush_r+0x66>
 8004808:	6829      	ldr	r1, [r5, #0]
 800480a:	291d      	cmp	r1, #29
 800480c:	d84b      	bhi.n	80048a6 <__sflush_r+0xf6>
 800480e:	4a2b      	ldr	r2, [pc, #172]	; (80048bc <__sflush_r+0x10c>)
 8004810:	40ca      	lsrs	r2, r1
 8004812:	07d6      	lsls	r6, r2, #31
 8004814:	d547      	bpl.n	80048a6 <__sflush_r+0xf6>
 8004816:	2200      	movs	r2, #0
 8004818:	6062      	str	r2, [r4, #4]
 800481a:	04d9      	lsls	r1, r3, #19
 800481c:	6922      	ldr	r2, [r4, #16]
 800481e:	6022      	str	r2, [r4, #0]
 8004820:	d504      	bpl.n	800482c <__sflush_r+0x7c>
 8004822:	1c42      	adds	r2, r0, #1
 8004824:	d101      	bne.n	800482a <__sflush_r+0x7a>
 8004826:	682b      	ldr	r3, [r5, #0]
 8004828:	b903      	cbnz	r3, 800482c <__sflush_r+0x7c>
 800482a:	6560      	str	r0, [r4, #84]	; 0x54
 800482c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800482e:	602f      	str	r7, [r5, #0]
 8004830:	2900      	cmp	r1, #0
 8004832:	d0ca      	beq.n	80047ca <__sflush_r+0x1a>
 8004834:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004838:	4299      	cmp	r1, r3
 800483a:	d002      	beq.n	8004842 <__sflush_r+0x92>
 800483c:	4628      	mov	r0, r5
 800483e:	f000 f997 	bl	8004b70 <_free_r>
 8004842:	2000      	movs	r0, #0
 8004844:	6360      	str	r0, [r4, #52]	; 0x34
 8004846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800484a:	6a21      	ldr	r1, [r4, #32]
 800484c:	2301      	movs	r3, #1
 800484e:	4628      	mov	r0, r5
 8004850:	47b0      	blx	r6
 8004852:	1c41      	adds	r1, r0, #1
 8004854:	d1c6      	bne.n	80047e4 <__sflush_r+0x34>
 8004856:	682b      	ldr	r3, [r5, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d0c3      	beq.n	80047e4 <__sflush_r+0x34>
 800485c:	2b1d      	cmp	r3, #29
 800485e:	d001      	beq.n	8004864 <__sflush_r+0xb4>
 8004860:	2b16      	cmp	r3, #22
 8004862:	d101      	bne.n	8004868 <__sflush_r+0xb8>
 8004864:	602f      	str	r7, [r5, #0]
 8004866:	e7b0      	b.n	80047ca <__sflush_r+0x1a>
 8004868:	89a3      	ldrh	r3, [r4, #12]
 800486a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800486e:	81a3      	strh	r3, [r4, #12]
 8004870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004874:	690f      	ldr	r7, [r1, #16]
 8004876:	2f00      	cmp	r7, #0
 8004878:	d0a7      	beq.n	80047ca <__sflush_r+0x1a>
 800487a:	0793      	lsls	r3, r2, #30
 800487c:	680e      	ldr	r6, [r1, #0]
 800487e:	bf08      	it	eq
 8004880:	694b      	ldreq	r3, [r1, #20]
 8004882:	600f      	str	r7, [r1, #0]
 8004884:	bf18      	it	ne
 8004886:	2300      	movne	r3, #0
 8004888:	eba6 0807 	sub.w	r8, r6, r7
 800488c:	608b      	str	r3, [r1, #8]
 800488e:	f1b8 0f00 	cmp.w	r8, #0
 8004892:	dd9a      	ble.n	80047ca <__sflush_r+0x1a>
 8004894:	4643      	mov	r3, r8
 8004896:	463a      	mov	r2, r7
 8004898:	6a21      	ldr	r1, [r4, #32]
 800489a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800489c:	4628      	mov	r0, r5
 800489e:	47b0      	blx	r6
 80048a0:	2800      	cmp	r0, #0
 80048a2:	dc07      	bgt.n	80048b4 <__sflush_r+0x104>
 80048a4:	89a3      	ldrh	r3, [r4, #12]
 80048a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048aa:	81a3      	strh	r3, [r4, #12]
 80048ac:	f04f 30ff 	mov.w	r0, #4294967295
 80048b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048b4:	4407      	add	r7, r0
 80048b6:	eba8 0800 	sub.w	r8, r8, r0
 80048ba:	e7e8      	b.n	800488e <__sflush_r+0xde>
 80048bc:	20400001 	.word	0x20400001

080048c0 <_fflush_r>:
 80048c0:	b538      	push	{r3, r4, r5, lr}
 80048c2:	690b      	ldr	r3, [r1, #16]
 80048c4:	4605      	mov	r5, r0
 80048c6:	460c      	mov	r4, r1
 80048c8:	b1db      	cbz	r3, 8004902 <_fflush_r+0x42>
 80048ca:	b118      	cbz	r0, 80048d4 <_fflush_r+0x14>
 80048cc:	6983      	ldr	r3, [r0, #24]
 80048ce:	b90b      	cbnz	r3, 80048d4 <_fflush_r+0x14>
 80048d0:	f000 f860 	bl	8004994 <__sinit>
 80048d4:	4b0c      	ldr	r3, [pc, #48]	; (8004908 <_fflush_r+0x48>)
 80048d6:	429c      	cmp	r4, r3
 80048d8:	d109      	bne.n	80048ee <_fflush_r+0x2e>
 80048da:	686c      	ldr	r4, [r5, #4]
 80048dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048e0:	b17b      	cbz	r3, 8004902 <_fflush_r+0x42>
 80048e2:	4621      	mov	r1, r4
 80048e4:	4628      	mov	r0, r5
 80048e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048ea:	f7ff bf61 	b.w	80047b0 <__sflush_r>
 80048ee:	4b07      	ldr	r3, [pc, #28]	; (800490c <_fflush_r+0x4c>)
 80048f0:	429c      	cmp	r4, r3
 80048f2:	d101      	bne.n	80048f8 <_fflush_r+0x38>
 80048f4:	68ac      	ldr	r4, [r5, #8]
 80048f6:	e7f1      	b.n	80048dc <_fflush_r+0x1c>
 80048f8:	4b05      	ldr	r3, [pc, #20]	; (8004910 <_fflush_r+0x50>)
 80048fa:	429c      	cmp	r4, r3
 80048fc:	bf08      	it	eq
 80048fe:	68ec      	ldreq	r4, [r5, #12]
 8004900:	e7ec      	b.n	80048dc <_fflush_r+0x1c>
 8004902:	2000      	movs	r0, #0
 8004904:	bd38      	pop	{r3, r4, r5, pc}
 8004906:	bf00      	nop
 8004908:	0800558c 	.word	0x0800558c
 800490c:	080055ac 	.word	0x080055ac
 8004910:	0800556c 	.word	0x0800556c

08004914 <_cleanup_r>:
 8004914:	4901      	ldr	r1, [pc, #4]	; (800491c <_cleanup_r+0x8>)
 8004916:	f000 b8a9 	b.w	8004a6c <_fwalk_reent>
 800491a:	bf00      	nop
 800491c:	080048c1 	.word	0x080048c1

08004920 <std.isra.0>:
 8004920:	2300      	movs	r3, #0
 8004922:	b510      	push	{r4, lr}
 8004924:	4604      	mov	r4, r0
 8004926:	6003      	str	r3, [r0, #0]
 8004928:	6043      	str	r3, [r0, #4]
 800492a:	6083      	str	r3, [r0, #8]
 800492c:	8181      	strh	r1, [r0, #12]
 800492e:	6643      	str	r3, [r0, #100]	; 0x64
 8004930:	81c2      	strh	r2, [r0, #14]
 8004932:	6103      	str	r3, [r0, #16]
 8004934:	6143      	str	r3, [r0, #20]
 8004936:	6183      	str	r3, [r0, #24]
 8004938:	4619      	mov	r1, r3
 800493a:	2208      	movs	r2, #8
 800493c:	305c      	adds	r0, #92	; 0x5c
 800493e:	f7ff fdf3 	bl	8004528 <memset>
 8004942:	4b05      	ldr	r3, [pc, #20]	; (8004958 <std.isra.0+0x38>)
 8004944:	6263      	str	r3, [r4, #36]	; 0x24
 8004946:	4b05      	ldr	r3, [pc, #20]	; (800495c <std.isra.0+0x3c>)
 8004948:	62a3      	str	r3, [r4, #40]	; 0x28
 800494a:	4b05      	ldr	r3, [pc, #20]	; (8004960 <std.isra.0+0x40>)
 800494c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800494e:	4b05      	ldr	r3, [pc, #20]	; (8004964 <std.isra.0+0x44>)
 8004950:	6224      	str	r4, [r4, #32]
 8004952:	6323      	str	r3, [r4, #48]	; 0x30
 8004954:	bd10      	pop	{r4, pc}
 8004956:	bf00      	nop
 8004958:	08005295 	.word	0x08005295
 800495c:	080052b7 	.word	0x080052b7
 8004960:	080052ef 	.word	0x080052ef
 8004964:	08005313 	.word	0x08005313

08004968 <__sfmoreglue>:
 8004968:	b570      	push	{r4, r5, r6, lr}
 800496a:	1e4a      	subs	r2, r1, #1
 800496c:	2568      	movs	r5, #104	; 0x68
 800496e:	4355      	muls	r5, r2
 8004970:	460e      	mov	r6, r1
 8004972:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004976:	f000 f949 	bl	8004c0c <_malloc_r>
 800497a:	4604      	mov	r4, r0
 800497c:	b140      	cbz	r0, 8004990 <__sfmoreglue+0x28>
 800497e:	2100      	movs	r1, #0
 8004980:	e880 0042 	stmia.w	r0, {r1, r6}
 8004984:	300c      	adds	r0, #12
 8004986:	60a0      	str	r0, [r4, #8]
 8004988:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800498c:	f7ff fdcc 	bl	8004528 <memset>
 8004990:	4620      	mov	r0, r4
 8004992:	bd70      	pop	{r4, r5, r6, pc}

08004994 <__sinit>:
 8004994:	6983      	ldr	r3, [r0, #24]
 8004996:	b510      	push	{r4, lr}
 8004998:	4604      	mov	r4, r0
 800499a:	bb33      	cbnz	r3, 80049ea <__sinit+0x56>
 800499c:	6483      	str	r3, [r0, #72]	; 0x48
 800499e:	64c3      	str	r3, [r0, #76]	; 0x4c
 80049a0:	6503      	str	r3, [r0, #80]	; 0x50
 80049a2:	4b12      	ldr	r3, [pc, #72]	; (80049ec <__sinit+0x58>)
 80049a4:	4a12      	ldr	r2, [pc, #72]	; (80049f0 <__sinit+0x5c>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6282      	str	r2, [r0, #40]	; 0x28
 80049aa:	4298      	cmp	r0, r3
 80049ac:	bf04      	itt	eq
 80049ae:	2301      	moveq	r3, #1
 80049b0:	6183      	streq	r3, [r0, #24]
 80049b2:	f000 f81f 	bl	80049f4 <__sfp>
 80049b6:	6060      	str	r0, [r4, #4]
 80049b8:	4620      	mov	r0, r4
 80049ba:	f000 f81b 	bl	80049f4 <__sfp>
 80049be:	60a0      	str	r0, [r4, #8]
 80049c0:	4620      	mov	r0, r4
 80049c2:	f000 f817 	bl	80049f4 <__sfp>
 80049c6:	2200      	movs	r2, #0
 80049c8:	60e0      	str	r0, [r4, #12]
 80049ca:	2104      	movs	r1, #4
 80049cc:	6860      	ldr	r0, [r4, #4]
 80049ce:	f7ff ffa7 	bl	8004920 <std.isra.0>
 80049d2:	2201      	movs	r2, #1
 80049d4:	2109      	movs	r1, #9
 80049d6:	68a0      	ldr	r0, [r4, #8]
 80049d8:	f7ff ffa2 	bl	8004920 <std.isra.0>
 80049dc:	2202      	movs	r2, #2
 80049de:	2112      	movs	r1, #18
 80049e0:	68e0      	ldr	r0, [r4, #12]
 80049e2:	f7ff ff9d 	bl	8004920 <std.isra.0>
 80049e6:	2301      	movs	r3, #1
 80049e8:	61a3      	str	r3, [r4, #24]
 80049ea:	bd10      	pop	{r4, pc}
 80049ec:	08005568 	.word	0x08005568
 80049f0:	08004915 	.word	0x08004915

080049f4 <__sfp>:
 80049f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049f6:	4b1c      	ldr	r3, [pc, #112]	; (8004a68 <__sfp+0x74>)
 80049f8:	681e      	ldr	r6, [r3, #0]
 80049fa:	69b3      	ldr	r3, [r6, #24]
 80049fc:	4607      	mov	r7, r0
 80049fe:	b913      	cbnz	r3, 8004a06 <__sfp+0x12>
 8004a00:	4630      	mov	r0, r6
 8004a02:	f7ff ffc7 	bl	8004994 <__sinit>
 8004a06:	3648      	adds	r6, #72	; 0x48
 8004a08:	68b4      	ldr	r4, [r6, #8]
 8004a0a:	6873      	ldr	r3, [r6, #4]
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	d503      	bpl.n	8004a18 <__sfp+0x24>
 8004a10:	6833      	ldr	r3, [r6, #0]
 8004a12:	b133      	cbz	r3, 8004a22 <__sfp+0x2e>
 8004a14:	6836      	ldr	r6, [r6, #0]
 8004a16:	e7f7      	b.n	8004a08 <__sfp+0x14>
 8004a18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004a1c:	b16d      	cbz	r5, 8004a3a <__sfp+0x46>
 8004a1e:	3468      	adds	r4, #104	; 0x68
 8004a20:	e7f4      	b.n	8004a0c <__sfp+0x18>
 8004a22:	2104      	movs	r1, #4
 8004a24:	4638      	mov	r0, r7
 8004a26:	f7ff ff9f 	bl	8004968 <__sfmoreglue>
 8004a2a:	6030      	str	r0, [r6, #0]
 8004a2c:	2800      	cmp	r0, #0
 8004a2e:	d1f1      	bne.n	8004a14 <__sfp+0x20>
 8004a30:	230c      	movs	r3, #12
 8004a32:	603b      	str	r3, [r7, #0]
 8004a34:	4604      	mov	r4, r0
 8004a36:	4620      	mov	r0, r4
 8004a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a3e:	81e3      	strh	r3, [r4, #14]
 8004a40:	2301      	movs	r3, #1
 8004a42:	81a3      	strh	r3, [r4, #12]
 8004a44:	6665      	str	r5, [r4, #100]	; 0x64
 8004a46:	6025      	str	r5, [r4, #0]
 8004a48:	60a5      	str	r5, [r4, #8]
 8004a4a:	6065      	str	r5, [r4, #4]
 8004a4c:	6125      	str	r5, [r4, #16]
 8004a4e:	6165      	str	r5, [r4, #20]
 8004a50:	61a5      	str	r5, [r4, #24]
 8004a52:	2208      	movs	r2, #8
 8004a54:	4629      	mov	r1, r5
 8004a56:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004a5a:	f7ff fd65 	bl	8004528 <memset>
 8004a5e:	6365      	str	r5, [r4, #52]	; 0x34
 8004a60:	63a5      	str	r5, [r4, #56]	; 0x38
 8004a62:	64a5      	str	r5, [r4, #72]	; 0x48
 8004a64:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004a66:	e7e6      	b.n	8004a36 <__sfp+0x42>
 8004a68:	08005568 	.word	0x08005568

08004a6c <_fwalk_reent>:
 8004a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a70:	4680      	mov	r8, r0
 8004a72:	4689      	mov	r9, r1
 8004a74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004a78:	2600      	movs	r6, #0
 8004a7a:	b914      	cbnz	r4, 8004a82 <_fwalk_reent+0x16>
 8004a7c:	4630      	mov	r0, r6
 8004a7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a82:	68a5      	ldr	r5, [r4, #8]
 8004a84:	6867      	ldr	r7, [r4, #4]
 8004a86:	3f01      	subs	r7, #1
 8004a88:	d501      	bpl.n	8004a8e <_fwalk_reent+0x22>
 8004a8a:	6824      	ldr	r4, [r4, #0]
 8004a8c:	e7f5      	b.n	8004a7a <_fwalk_reent+0xe>
 8004a8e:	89ab      	ldrh	r3, [r5, #12]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d907      	bls.n	8004aa4 <_fwalk_reent+0x38>
 8004a94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	d003      	beq.n	8004aa4 <_fwalk_reent+0x38>
 8004a9c:	4629      	mov	r1, r5
 8004a9e:	4640      	mov	r0, r8
 8004aa0:	47c8      	blx	r9
 8004aa2:	4306      	orrs	r6, r0
 8004aa4:	3568      	adds	r5, #104	; 0x68
 8004aa6:	e7ee      	b.n	8004a86 <_fwalk_reent+0x1a>

08004aa8 <__swhatbuf_r>:
 8004aa8:	b570      	push	{r4, r5, r6, lr}
 8004aaa:	460e      	mov	r6, r1
 8004aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ab0:	2900      	cmp	r1, #0
 8004ab2:	b090      	sub	sp, #64	; 0x40
 8004ab4:	4614      	mov	r4, r2
 8004ab6:	461d      	mov	r5, r3
 8004ab8:	da07      	bge.n	8004aca <__swhatbuf_r+0x22>
 8004aba:	2300      	movs	r3, #0
 8004abc:	602b      	str	r3, [r5, #0]
 8004abe:	89b3      	ldrh	r3, [r6, #12]
 8004ac0:	061a      	lsls	r2, r3, #24
 8004ac2:	d410      	bmi.n	8004ae6 <__swhatbuf_r+0x3e>
 8004ac4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ac8:	e00e      	b.n	8004ae8 <__swhatbuf_r+0x40>
 8004aca:	aa01      	add	r2, sp, #4
 8004acc:	f000 fc48 	bl	8005360 <_fstat_r>
 8004ad0:	2800      	cmp	r0, #0
 8004ad2:	dbf2      	blt.n	8004aba <__swhatbuf_r+0x12>
 8004ad4:	9a02      	ldr	r2, [sp, #8]
 8004ad6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004ada:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004ade:	425a      	negs	r2, r3
 8004ae0:	415a      	adcs	r2, r3
 8004ae2:	602a      	str	r2, [r5, #0]
 8004ae4:	e7ee      	b.n	8004ac4 <__swhatbuf_r+0x1c>
 8004ae6:	2340      	movs	r3, #64	; 0x40
 8004ae8:	2000      	movs	r0, #0
 8004aea:	6023      	str	r3, [r4, #0]
 8004aec:	b010      	add	sp, #64	; 0x40
 8004aee:	bd70      	pop	{r4, r5, r6, pc}

08004af0 <__smakebuf_r>:
 8004af0:	898b      	ldrh	r3, [r1, #12]
 8004af2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004af4:	079d      	lsls	r5, r3, #30
 8004af6:	4606      	mov	r6, r0
 8004af8:	460c      	mov	r4, r1
 8004afa:	d507      	bpl.n	8004b0c <__smakebuf_r+0x1c>
 8004afc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004b00:	6023      	str	r3, [r4, #0]
 8004b02:	6123      	str	r3, [r4, #16]
 8004b04:	2301      	movs	r3, #1
 8004b06:	6163      	str	r3, [r4, #20]
 8004b08:	b002      	add	sp, #8
 8004b0a:	bd70      	pop	{r4, r5, r6, pc}
 8004b0c:	ab01      	add	r3, sp, #4
 8004b0e:	466a      	mov	r2, sp
 8004b10:	f7ff ffca 	bl	8004aa8 <__swhatbuf_r>
 8004b14:	9900      	ldr	r1, [sp, #0]
 8004b16:	4605      	mov	r5, r0
 8004b18:	4630      	mov	r0, r6
 8004b1a:	f000 f877 	bl	8004c0c <_malloc_r>
 8004b1e:	b948      	cbnz	r0, 8004b34 <__smakebuf_r+0x44>
 8004b20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b24:	059a      	lsls	r2, r3, #22
 8004b26:	d4ef      	bmi.n	8004b08 <__smakebuf_r+0x18>
 8004b28:	f023 0303 	bic.w	r3, r3, #3
 8004b2c:	f043 0302 	orr.w	r3, r3, #2
 8004b30:	81a3      	strh	r3, [r4, #12]
 8004b32:	e7e3      	b.n	8004afc <__smakebuf_r+0xc>
 8004b34:	4b0d      	ldr	r3, [pc, #52]	; (8004b6c <__smakebuf_r+0x7c>)
 8004b36:	62b3      	str	r3, [r6, #40]	; 0x28
 8004b38:	89a3      	ldrh	r3, [r4, #12]
 8004b3a:	6020      	str	r0, [r4, #0]
 8004b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b40:	81a3      	strh	r3, [r4, #12]
 8004b42:	9b00      	ldr	r3, [sp, #0]
 8004b44:	6163      	str	r3, [r4, #20]
 8004b46:	9b01      	ldr	r3, [sp, #4]
 8004b48:	6120      	str	r0, [r4, #16]
 8004b4a:	b15b      	cbz	r3, 8004b64 <__smakebuf_r+0x74>
 8004b4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b50:	4630      	mov	r0, r6
 8004b52:	f000 fc17 	bl	8005384 <_isatty_r>
 8004b56:	b128      	cbz	r0, 8004b64 <__smakebuf_r+0x74>
 8004b58:	89a3      	ldrh	r3, [r4, #12]
 8004b5a:	f023 0303 	bic.w	r3, r3, #3
 8004b5e:	f043 0301 	orr.w	r3, r3, #1
 8004b62:	81a3      	strh	r3, [r4, #12]
 8004b64:	89a3      	ldrh	r3, [r4, #12]
 8004b66:	431d      	orrs	r5, r3
 8004b68:	81a5      	strh	r5, [r4, #12]
 8004b6a:	e7cd      	b.n	8004b08 <__smakebuf_r+0x18>
 8004b6c:	08004915 	.word	0x08004915

08004b70 <_free_r>:
 8004b70:	b538      	push	{r3, r4, r5, lr}
 8004b72:	4605      	mov	r5, r0
 8004b74:	2900      	cmp	r1, #0
 8004b76:	d045      	beq.n	8004c04 <_free_r+0x94>
 8004b78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b7c:	1f0c      	subs	r4, r1, #4
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	bfb8      	it	lt
 8004b82:	18e4      	addlt	r4, r4, r3
 8004b84:	f000 fc20 	bl	80053c8 <__malloc_lock>
 8004b88:	4a1f      	ldr	r2, [pc, #124]	; (8004c08 <_free_r+0x98>)
 8004b8a:	6813      	ldr	r3, [r2, #0]
 8004b8c:	4610      	mov	r0, r2
 8004b8e:	b933      	cbnz	r3, 8004b9e <_free_r+0x2e>
 8004b90:	6063      	str	r3, [r4, #4]
 8004b92:	6014      	str	r4, [r2, #0]
 8004b94:	4628      	mov	r0, r5
 8004b96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b9a:	f000 bc16 	b.w	80053ca <__malloc_unlock>
 8004b9e:	42a3      	cmp	r3, r4
 8004ba0:	d90c      	bls.n	8004bbc <_free_r+0x4c>
 8004ba2:	6821      	ldr	r1, [r4, #0]
 8004ba4:	1862      	adds	r2, r4, r1
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	bf04      	itt	eq
 8004baa:	681a      	ldreq	r2, [r3, #0]
 8004bac:	685b      	ldreq	r3, [r3, #4]
 8004bae:	6063      	str	r3, [r4, #4]
 8004bb0:	bf04      	itt	eq
 8004bb2:	1852      	addeq	r2, r2, r1
 8004bb4:	6022      	streq	r2, [r4, #0]
 8004bb6:	6004      	str	r4, [r0, #0]
 8004bb8:	e7ec      	b.n	8004b94 <_free_r+0x24>
 8004bba:	4613      	mov	r3, r2
 8004bbc:	685a      	ldr	r2, [r3, #4]
 8004bbe:	b10a      	cbz	r2, 8004bc4 <_free_r+0x54>
 8004bc0:	42a2      	cmp	r2, r4
 8004bc2:	d9fa      	bls.n	8004bba <_free_r+0x4a>
 8004bc4:	6819      	ldr	r1, [r3, #0]
 8004bc6:	1858      	adds	r0, r3, r1
 8004bc8:	42a0      	cmp	r0, r4
 8004bca:	d10b      	bne.n	8004be4 <_free_r+0x74>
 8004bcc:	6820      	ldr	r0, [r4, #0]
 8004bce:	4401      	add	r1, r0
 8004bd0:	1858      	adds	r0, r3, r1
 8004bd2:	4282      	cmp	r2, r0
 8004bd4:	6019      	str	r1, [r3, #0]
 8004bd6:	d1dd      	bne.n	8004b94 <_free_r+0x24>
 8004bd8:	6810      	ldr	r0, [r2, #0]
 8004bda:	6852      	ldr	r2, [r2, #4]
 8004bdc:	605a      	str	r2, [r3, #4]
 8004bde:	4401      	add	r1, r0
 8004be0:	6019      	str	r1, [r3, #0]
 8004be2:	e7d7      	b.n	8004b94 <_free_r+0x24>
 8004be4:	d902      	bls.n	8004bec <_free_r+0x7c>
 8004be6:	230c      	movs	r3, #12
 8004be8:	602b      	str	r3, [r5, #0]
 8004bea:	e7d3      	b.n	8004b94 <_free_r+0x24>
 8004bec:	6820      	ldr	r0, [r4, #0]
 8004bee:	1821      	adds	r1, r4, r0
 8004bf0:	428a      	cmp	r2, r1
 8004bf2:	bf04      	itt	eq
 8004bf4:	6811      	ldreq	r1, [r2, #0]
 8004bf6:	6852      	ldreq	r2, [r2, #4]
 8004bf8:	6062      	str	r2, [r4, #4]
 8004bfa:	bf04      	itt	eq
 8004bfc:	1809      	addeq	r1, r1, r0
 8004bfe:	6021      	streq	r1, [r4, #0]
 8004c00:	605c      	str	r4, [r3, #4]
 8004c02:	e7c7      	b.n	8004b94 <_free_r+0x24>
 8004c04:	bd38      	pop	{r3, r4, r5, pc}
 8004c06:	bf00      	nop
 8004c08:	20000088 	.word	0x20000088

08004c0c <_malloc_r>:
 8004c0c:	b570      	push	{r4, r5, r6, lr}
 8004c0e:	1ccd      	adds	r5, r1, #3
 8004c10:	f025 0503 	bic.w	r5, r5, #3
 8004c14:	3508      	adds	r5, #8
 8004c16:	2d0c      	cmp	r5, #12
 8004c18:	bf38      	it	cc
 8004c1a:	250c      	movcc	r5, #12
 8004c1c:	2d00      	cmp	r5, #0
 8004c1e:	4606      	mov	r6, r0
 8004c20:	db01      	blt.n	8004c26 <_malloc_r+0x1a>
 8004c22:	42a9      	cmp	r1, r5
 8004c24:	d903      	bls.n	8004c2e <_malloc_r+0x22>
 8004c26:	230c      	movs	r3, #12
 8004c28:	6033      	str	r3, [r6, #0]
 8004c2a:	2000      	movs	r0, #0
 8004c2c:	bd70      	pop	{r4, r5, r6, pc}
 8004c2e:	f000 fbcb 	bl	80053c8 <__malloc_lock>
 8004c32:	4a23      	ldr	r2, [pc, #140]	; (8004cc0 <_malloc_r+0xb4>)
 8004c34:	6814      	ldr	r4, [r2, #0]
 8004c36:	4621      	mov	r1, r4
 8004c38:	b991      	cbnz	r1, 8004c60 <_malloc_r+0x54>
 8004c3a:	4c22      	ldr	r4, [pc, #136]	; (8004cc4 <_malloc_r+0xb8>)
 8004c3c:	6823      	ldr	r3, [r4, #0]
 8004c3e:	b91b      	cbnz	r3, 8004c48 <_malloc_r+0x3c>
 8004c40:	4630      	mov	r0, r6
 8004c42:	f000 fb17 	bl	8005274 <_sbrk_r>
 8004c46:	6020      	str	r0, [r4, #0]
 8004c48:	4629      	mov	r1, r5
 8004c4a:	4630      	mov	r0, r6
 8004c4c:	f000 fb12 	bl	8005274 <_sbrk_r>
 8004c50:	1c43      	adds	r3, r0, #1
 8004c52:	d126      	bne.n	8004ca2 <_malloc_r+0x96>
 8004c54:	230c      	movs	r3, #12
 8004c56:	6033      	str	r3, [r6, #0]
 8004c58:	4630      	mov	r0, r6
 8004c5a:	f000 fbb6 	bl	80053ca <__malloc_unlock>
 8004c5e:	e7e4      	b.n	8004c2a <_malloc_r+0x1e>
 8004c60:	680b      	ldr	r3, [r1, #0]
 8004c62:	1b5b      	subs	r3, r3, r5
 8004c64:	d41a      	bmi.n	8004c9c <_malloc_r+0x90>
 8004c66:	2b0b      	cmp	r3, #11
 8004c68:	d90f      	bls.n	8004c8a <_malloc_r+0x7e>
 8004c6a:	600b      	str	r3, [r1, #0]
 8004c6c:	50cd      	str	r5, [r1, r3]
 8004c6e:	18cc      	adds	r4, r1, r3
 8004c70:	4630      	mov	r0, r6
 8004c72:	f000 fbaa 	bl	80053ca <__malloc_unlock>
 8004c76:	f104 000b 	add.w	r0, r4, #11
 8004c7a:	1d23      	adds	r3, r4, #4
 8004c7c:	f020 0007 	bic.w	r0, r0, #7
 8004c80:	1ac3      	subs	r3, r0, r3
 8004c82:	d01b      	beq.n	8004cbc <_malloc_r+0xb0>
 8004c84:	425a      	negs	r2, r3
 8004c86:	50e2      	str	r2, [r4, r3]
 8004c88:	bd70      	pop	{r4, r5, r6, pc}
 8004c8a:	428c      	cmp	r4, r1
 8004c8c:	bf0d      	iteet	eq
 8004c8e:	6863      	ldreq	r3, [r4, #4]
 8004c90:	684b      	ldrne	r3, [r1, #4]
 8004c92:	6063      	strne	r3, [r4, #4]
 8004c94:	6013      	streq	r3, [r2, #0]
 8004c96:	bf18      	it	ne
 8004c98:	460c      	movne	r4, r1
 8004c9a:	e7e9      	b.n	8004c70 <_malloc_r+0x64>
 8004c9c:	460c      	mov	r4, r1
 8004c9e:	6849      	ldr	r1, [r1, #4]
 8004ca0:	e7ca      	b.n	8004c38 <_malloc_r+0x2c>
 8004ca2:	1cc4      	adds	r4, r0, #3
 8004ca4:	f024 0403 	bic.w	r4, r4, #3
 8004ca8:	42a0      	cmp	r0, r4
 8004caa:	d005      	beq.n	8004cb8 <_malloc_r+0xac>
 8004cac:	1a21      	subs	r1, r4, r0
 8004cae:	4630      	mov	r0, r6
 8004cb0:	f000 fae0 	bl	8005274 <_sbrk_r>
 8004cb4:	3001      	adds	r0, #1
 8004cb6:	d0cd      	beq.n	8004c54 <_malloc_r+0x48>
 8004cb8:	6025      	str	r5, [r4, #0]
 8004cba:	e7d9      	b.n	8004c70 <_malloc_r+0x64>
 8004cbc:	bd70      	pop	{r4, r5, r6, pc}
 8004cbe:	bf00      	nop
 8004cc0:	20000088 	.word	0x20000088
 8004cc4:	2000008c 	.word	0x2000008c

08004cc8 <__sfputc_r>:
 8004cc8:	6893      	ldr	r3, [r2, #8]
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	b410      	push	{r4}
 8004cd0:	6093      	str	r3, [r2, #8]
 8004cd2:	da09      	bge.n	8004ce8 <__sfputc_r+0x20>
 8004cd4:	6994      	ldr	r4, [r2, #24]
 8004cd6:	42a3      	cmp	r3, r4
 8004cd8:	db02      	blt.n	8004ce0 <__sfputc_r+0x18>
 8004cda:	b2cb      	uxtb	r3, r1
 8004cdc:	2b0a      	cmp	r3, #10
 8004cde:	d103      	bne.n	8004ce8 <__sfputc_r+0x20>
 8004ce0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ce4:	f7ff bca4 	b.w	8004630 <__swbuf_r>
 8004ce8:	6813      	ldr	r3, [r2, #0]
 8004cea:	1c58      	adds	r0, r3, #1
 8004cec:	6010      	str	r0, [r2, #0]
 8004cee:	7019      	strb	r1, [r3, #0]
 8004cf0:	b2c8      	uxtb	r0, r1
 8004cf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <__sfputs_r>:
 8004cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cfa:	4606      	mov	r6, r0
 8004cfc:	460f      	mov	r7, r1
 8004cfe:	4614      	mov	r4, r2
 8004d00:	18d5      	adds	r5, r2, r3
 8004d02:	42ac      	cmp	r4, r5
 8004d04:	d101      	bne.n	8004d0a <__sfputs_r+0x12>
 8004d06:	2000      	movs	r0, #0
 8004d08:	e007      	b.n	8004d1a <__sfputs_r+0x22>
 8004d0a:	463a      	mov	r2, r7
 8004d0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d10:	4630      	mov	r0, r6
 8004d12:	f7ff ffd9 	bl	8004cc8 <__sfputc_r>
 8004d16:	1c43      	adds	r3, r0, #1
 8004d18:	d1f3      	bne.n	8004d02 <__sfputs_r+0xa>
 8004d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004d1c <_vfiprintf_r>:
 8004d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d20:	b09d      	sub	sp, #116	; 0x74
 8004d22:	460c      	mov	r4, r1
 8004d24:	4617      	mov	r7, r2
 8004d26:	9303      	str	r3, [sp, #12]
 8004d28:	4606      	mov	r6, r0
 8004d2a:	b118      	cbz	r0, 8004d34 <_vfiprintf_r+0x18>
 8004d2c:	6983      	ldr	r3, [r0, #24]
 8004d2e:	b90b      	cbnz	r3, 8004d34 <_vfiprintf_r+0x18>
 8004d30:	f7ff fe30 	bl	8004994 <__sinit>
 8004d34:	4b7c      	ldr	r3, [pc, #496]	; (8004f28 <_vfiprintf_r+0x20c>)
 8004d36:	429c      	cmp	r4, r3
 8004d38:	d157      	bne.n	8004dea <_vfiprintf_r+0xce>
 8004d3a:	6874      	ldr	r4, [r6, #4]
 8004d3c:	89a3      	ldrh	r3, [r4, #12]
 8004d3e:	0718      	lsls	r0, r3, #28
 8004d40:	d55d      	bpl.n	8004dfe <_vfiprintf_r+0xe2>
 8004d42:	6923      	ldr	r3, [r4, #16]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d05a      	beq.n	8004dfe <_vfiprintf_r+0xe2>
 8004d48:	2300      	movs	r3, #0
 8004d4a:	9309      	str	r3, [sp, #36]	; 0x24
 8004d4c:	2320      	movs	r3, #32
 8004d4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d52:	2330      	movs	r3, #48	; 0x30
 8004d54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d58:	f04f 0b01 	mov.w	fp, #1
 8004d5c:	46b8      	mov	r8, r7
 8004d5e:	4645      	mov	r5, r8
 8004d60:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d155      	bne.n	8004e14 <_vfiprintf_r+0xf8>
 8004d68:	ebb8 0a07 	subs.w	sl, r8, r7
 8004d6c:	d00b      	beq.n	8004d86 <_vfiprintf_r+0x6a>
 8004d6e:	4653      	mov	r3, sl
 8004d70:	463a      	mov	r2, r7
 8004d72:	4621      	mov	r1, r4
 8004d74:	4630      	mov	r0, r6
 8004d76:	f7ff ffbf 	bl	8004cf8 <__sfputs_r>
 8004d7a:	3001      	adds	r0, #1
 8004d7c:	f000 80c4 	beq.w	8004f08 <_vfiprintf_r+0x1ec>
 8004d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d82:	4453      	add	r3, sl
 8004d84:	9309      	str	r3, [sp, #36]	; 0x24
 8004d86:	f898 3000 	ldrb.w	r3, [r8]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f000 80bc 	beq.w	8004f08 <_vfiprintf_r+0x1ec>
 8004d90:	2300      	movs	r3, #0
 8004d92:	f04f 32ff 	mov.w	r2, #4294967295
 8004d96:	9304      	str	r3, [sp, #16]
 8004d98:	9307      	str	r3, [sp, #28]
 8004d9a:	9205      	str	r2, [sp, #20]
 8004d9c:	9306      	str	r3, [sp, #24]
 8004d9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004da2:	931a      	str	r3, [sp, #104]	; 0x68
 8004da4:	2205      	movs	r2, #5
 8004da6:	7829      	ldrb	r1, [r5, #0]
 8004da8:	4860      	ldr	r0, [pc, #384]	; (8004f2c <_vfiprintf_r+0x210>)
 8004daa:	f7fb fa11 	bl	80001d0 <memchr>
 8004dae:	f105 0801 	add.w	r8, r5, #1
 8004db2:	9b04      	ldr	r3, [sp, #16]
 8004db4:	2800      	cmp	r0, #0
 8004db6:	d131      	bne.n	8004e1c <_vfiprintf_r+0x100>
 8004db8:	06d9      	lsls	r1, r3, #27
 8004dba:	bf44      	itt	mi
 8004dbc:	2220      	movmi	r2, #32
 8004dbe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004dc2:	071a      	lsls	r2, r3, #28
 8004dc4:	bf44      	itt	mi
 8004dc6:	222b      	movmi	r2, #43	; 0x2b
 8004dc8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004dcc:	782a      	ldrb	r2, [r5, #0]
 8004dce:	2a2a      	cmp	r2, #42	; 0x2a
 8004dd0:	d02c      	beq.n	8004e2c <_vfiprintf_r+0x110>
 8004dd2:	9a07      	ldr	r2, [sp, #28]
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	200a      	movs	r0, #10
 8004dd8:	46a8      	mov	r8, r5
 8004dda:	3501      	adds	r5, #1
 8004ddc:	f898 3000 	ldrb.w	r3, [r8]
 8004de0:	3b30      	subs	r3, #48	; 0x30
 8004de2:	2b09      	cmp	r3, #9
 8004de4:	d96d      	bls.n	8004ec2 <_vfiprintf_r+0x1a6>
 8004de6:	b371      	cbz	r1, 8004e46 <_vfiprintf_r+0x12a>
 8004de8:	e026      	b.n	8004e38 <_vfiprintf_r+0x11c>
 8004dea:	4b51      	ldr	r3, [pc, #324]	; (8004f30 <_vfiprintf_r+0x214>)
 8004dec:	429c      	cmp	r4, r3
 8004dee:	d101      	bne.n	8004df4 <_vfiprintf_r+0xd8>
 8004df0:	68b4      	ldr	r4, [r6, #8]
 8004df2:	e7a3      	b.n	8004d3c <_vfiprintf_r+0x20>
 8004df4:	4b4f      	ldr	r3, [pc, #316]	; (8004f34 <_vfiprintf_r+0x218>)
 8004df6:	429c      	cmp	r4, r3
 8004df8:	bf08      	it	eq
 8004dfa:	68f4      	ldreq	r4, [r6, #12]
 8004dfc:	e79e      	b.n	8004d3c <_vfiprintf_r+0x20>
 8004dfe:	4621      	mov	r1, r4
 8004e00:	4630      	mov	r0, r6
 8004e02:	f7ff fc67 	bl	80046d4 <__swsetup_r>
 8004e06:	2800      	cmp	r0, #0
 8004e08:	d09e      	beq.n	8004d48 <_vfiprintf_r+0x2c>
 8004e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e0e:	b01d      	add	sp, #116	; 0x74
 8004e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e14:	2b25      	cmp	r3, #37	; 0x25
 8004e16:	d0a7      	beq.n	8004d68 <_vfiprintf_r+0x4c>
 8004e18:	46a8      	mov	r8, r5
 8004e1a:	e7a0      	b.n	8004d5e <_vfiprintf_r+0x42>
 8004e1c:	4a43      	ldr	r2, [pc, #268]	; (8004f2c <_vfiprintf_r+0x210>)
 8004e1e:	1a80      	subs	r0, r0, r2
 8004e20:	fa0b f000 	lsl.w	r0, fp, r0
 8004e24:	4318      	orrs	r0, r3
 8004e26:	9004      	str	r0, [sp, #16]
 8004e28:	4645      	mov	r5, r8
 8004e2a:	e7bb      	b.n	8004da4 <_vfiprintf_r+0x88>
 8004e2c:	9a03      	ldr	r2, [sp, #12]
 8004e2e:	1d11      	adds	r1, r2, #4
 8004e30:	6812      	ldr	r2, [r2, #0]
 8004e32:	9103      	str	r1, [sp, #12]
 8004e34:	2a00      	cmp	r2, #0
 8004e36:	db01      	blt.n	8004e3c <_vfiprintf_r+0x120>
 8004e38:	9207      	str	r2, [sp, #28]
 8004e3a:	e004      	b.n	8004e46 <_vfiprintf_r+0x12a>
 8004e3c:	4252      	negs	r2, r2
 8004e3e:	f043 0302 	orr.w	r3, r3, #2
 8004e42:	9207      	str	r2, [sp, #28]
 8004e44:	9304      	str	r3, [sp, #16]
 8004e46:	f898 3000 	ldrb.w	r3, [r8]
 8004e4a:	2b2e      	cmp	r3, #46	; 0x2e
 8004e4c:	d110      	bne.n	8004e70 <_vfiprintf_r+0x154>
 8004e4e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004e52:	2b2a      	cmp	r3, #42	; 0x2a
 8004e54:	f108 0101 	add.w	r1, r8, #1
 8004e58:	d137      	bne.n	8004eca <_vfiprintf_r+0x1ae>
 8004e5a:	9b03      	ldr	r3, [sp, #12]
 8004e5c:	1d1a      	adds	r2, r3, #4
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	9203      	str	r2, [sp, #12]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	bfb8      	it	lt
 8004e66:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e6a:	f108 0802 	add.w	r8, r8, #2
 8004e6e:	9305      	str	r3, [sp, #20]
 8004e70:	4d31      	ldr	r5, [pc, #196]	; (8004f38 <_vfiprintf_r+0x21c>)
 8004e72:	f898 1000 	ldrb.w	r1, [r8]
 8004e76:	2203      	movs	r2, #3
 8004e78:	4628      	mov	r0, r5
 8004e7a:	f7fb f9a9 	bl	80001d0 <memchr>
 8004e7e:	b140      	cbz	r0, 8004e92 <_vfiprintf_r+0x176>
 8004e80:	2340      	movs	r3, #64	; 0x40
 8004e82:	1b40      	subs	r0, r0, r5
 8004e84:	fa03 f000 	lsl.w	r0, r3, r0
 8004e88:	9b04      	ldr	r3, [sp, #16]
 8004e8a:	4303      	orrs	r3, r0
 8004e8c:	9304      	str	r3, [sp, #16]
 8004e8e:	f108 0801 	add.w	r8, r8, #1
 8004e92:	f898 1000 	ldrb.w	r1, [r8]
 8004e96:	4829      	ldr	r0, [pc, #164]	; (8004f3c <_vfiprintf_r+0x220>)
 8004e98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e9c:	2206      	movs	r2, #6
 8004e9e:	f108 0701 	add.w	r7, r8, #1
 8004ea2:	f7fb f995 	bl	80001d0 <memchr>
 8004ea6:	2800      	cmp	r0, #0
 8004ea8:	d034      	beq.n	8004f14 <_vfiprintf_r+0x1f8>
 8004eaa:	4b25      	ldr	r3, [pc, #148]	; (8004f40 <_vfiprintf_r+0x224>)
 8004eac:	bb03      	cbnz	r3, 8004ef0 <_vfiprintf_r+0x1d4>
 8004eae:	9b03      	ldr	r3, [sp, #12]
 8004eb0:	3307      	adds	r3, #7
 8004eb2:	f023 0307 	bic.w	r3, r3, #7
 8004eb6:	3308      	adds	r3, #8
 8004eb8:	9303      	str	r3, [sp, #12]
 8004eba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ebc:	444b      	add	r3, r9
 8004ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8004ec0:	e74c      	b.n	8004d5c <_vfiprintf_r+0x40>
 8004ec2:	fb00 3202 	mla	r2, r0, r2, r3
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	e786      	b.n	8004dd8 <_vfiprintf_r+0xbc>
 8004eca:	2300      	movs	r3, #0
 8004ecc:	9305      	str	r3, [sp, #20]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	250a      	movs	r5, #10
 8004ed2:	4688      	mov	r8, r1
 8004ed4:	3101      	adds	r1, #1
 8004ed6:	f898 2000 	ldrb.w	r2, [r8]
 8004eda:	3a30      	subs	r2, #48	; 0x30
 8004edc:	2a09      	cmp	r2, #9
 8004ede:	d903      	bls.n	8004ee8 <_vfiprintf_r+0x1cc>
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d0c5      	beq.n	8004e70 <_vfiprintf_r+0x154>
 8004ee4:	9005      	str	r0, [sp, #20]
 8004ee6:	e7c3      	b.n	8004e70 <_vfiprintf_r+0x154>
 8004ee8:	fb05 2000 	mla	r0, r5, r0, r2
 8004eec:	2301      	movs	r3, #1
 8004eee:	e7f0      	b.n	8004ed2 <_vfiprintf_r+0x1b6>
 8004ef0:	ab03      	add	r3, sp, #12
 8004ef2:	9300      	str	r3, [sp, #0]
 8004ef4:	4622      	mov	r2, r4
 8004ef6:	4b13      	ldr	r3, [pc, #76]	; (8004f44 <_vfiprintf_r+0x228>)
 8004ef8:	a904      	add	r1, sp, #16
 8004efa:	4630      	mov	r0, r6
 8004efc:	f3af 8000 	nop.w
 8004f00:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004f04:	4681      	mov	r9, r0
 8004f06:	d1d8      	bne.n	8004eba <_vfiprintf_r+0x19e>
 8004f08:	89a3      	ldrh	r3, [r4, #12]
 8004f0a:	065b      	lsls	r3, r3, #25
 8004f0c:	f53f af7d 	bmi.w	8004e0a <_vfiprintf_r+0xee>
 8004f10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f12:	e77c      	b.n	8004e0e <_vfiprintf_r+0xf2>
 8004f14:	ab03      	add	r3, sp, #12
 8004f16:	9300      	str	r3, [sp, #0]
 8004f18:	4622      	mov	r2, r4
 8004f1a:	4b0a      	ldr	r3, [pc, #40]	; (8004f44 <_vfiprintf_r+0x228>)
 8004f1c:	a904      	add	r1, sp, #16
 8004f1e:	4630      	mov	r0, r6
 8004f20:	f000 f888 	bl	8005034 <_printf_i>
 8004f24:	e7ec      	b.n	8004f00 <_vfiprintf_r+0x1e4>
 8004f26:	bf00      	nop
 8004f28:	0800558c 	.word	0x0800558c
 8004f2c:	080055cc 	.word	0x080055cc
 8004f30:	080055ac 	.word	0x080055ac
 8004f34:	0800556c 	.word	0x0800556c
 8004f38:	080055d2 	.word	0x080055d2
 8004f3c:	080055d6 	.word	0x080055d6
 8004f40:	00000000 	.word	0x00000000
 8004f44:	08004cf9 	.word	0x08004cf9

08004f48 <_printf_common>:
 8004f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f4c:	4691      	mov	r9, r2
 8004f4e:	461f      	mov	r7, r3
 8004f50:	688a      	ldr	r2, [r1, #8]
 8004f52:	690b      	ldr	r3, [r1, #16]
 8004f54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	bfb8      	it	lt
 8004f5c:	4613      	movlt	r3, r2
 8004f5e:	f8c9 3000 	str.w	r3, [r9]
 8004f62:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f66:	4606      	mov	r6, r0
 8004f68:	460c      	mov	r4, r1
 8004f6a:	b112      	cbz	r2, 8004f72 <_printf_common+0x2a>
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	f8c9 3000 	str.w	r3, [r9]
 8004f72:	6823      	ldr	r3, [r4, #0]
 8004f74:	0699      	lsls	r1, r3, #26
 8004f76:	bf42      	ittt	mi
 8004f78:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004f7c:	3302      	addmi	r3, #2
 8004f7e:	f8c9 3000 	strmi.w	r3, [r9]
 8004f82:	6825      	ldr	r5, [r4, #0]
 8004f84:	f015 0506 	ands.w	r5, r5, #6
 8004f88:	d107      	bne.n	8004f9a <_printf_common+0x52>
 8004f8a:	f104 0a19 	add.w	sl, r4, #25
 8004f8e:	68e3      	ldr	r3, [r4, #12]
 8004f90:	f8d9 2000 	ldr.w	r2, [r9]
 8004f94:	1a9b      	subs	r3, r3, r2
 8004f96:	429d      	cmp	r5, r3
 8004f98:	db29      	blt.n	8004fee <_printf_common+0xa6>
 8004f9a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004f9e:	6822      	ldr	r2, [r4, #0]
 8004fa0:	3300      	adds	r3, #0
 8004fa2:	bf18      	it	ne
 8004fa4:	2301      	movne	r3, #1
 8004fa6:	0692      	lsls	r2, r2, #26
 8004fa8:	d42e      	bmi.n	8005008 <_printf_common+0xc0>
 8004faa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fae:	4639      	mov	r1, r7
 8004fb0:	4630      	mov	r0, r6
 8004fb2:	47c0      	blx	r8
 8004fb4:	3001      	adds	r0, #1
 8004fb6:	d021      	beq.n	8004ffc <_printf_common+0xb4>
 8004fb8:	6823      	ldr	r3, [r4, #0]
 8004fba:	68e5      	ldr	r5, [r4, #12]
 8004fbc:	f8d9 2000 	ldr.w	r2, [r9]
 8004fc0:	f003 0306 	and.w	r3, r3, #6
 8004fc4:	2b04      	cmp	r3, #4
 8004fc6:	bf08      	it	eq
 8004fc8:	1aad      	subeq	r5, r5, r2
 8004fca:	68a3      	ldr	r3, [r4, #8]
 8004fcc:	6922      	ldr	r2, [r4, #16]
 8004fce:	bf0c      	ite	eq
 8004fd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fd4:	2500      	movne	r5, #0
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	bfc4      	itt	gt
 8004fda:	1a9b      	subgt	r3, r3, r2
 8004fdc:	18ed      	addgt	r5, r5, r3
 8004fde:	f04f 0900 	mov.w	r9, #0
 8004fe2:	341a      	adds	r4, #26
 8004fe4:	454d      	cmp	r5, r9
 8004fe6:	d11b      	bne.n	8005020 <_printf_common+0xd8>
 8004fe8:	2000      	movs	r0, #0
 8004fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fee:	2301      	movs	r3, #1
 8004ff0:	4652      	mov	r2, sl
 8004ff2:	4639      	mov	r1, r7
 8004ff4:	4630      	mov	r0, r6
 8004ff6:	47c0      	blx	r8
 8004ff8:	3001      	adds	r0, #1
 8004ffa:	d103      	bne.n	8005004 <_printf_common+0xbc>
 8004ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8005000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005004:	3501      	adds	r5, #1
 8005006:	e7c2      	b.n	8004f8e <_printf_common+0x46>
 8005008:	18e1      	adds	r1, r4, r3
 800500a:	1c5a      	adds	r2, r3, #1
 800500c:	2030      	movs	r0, #48	; 0x30
 800500e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005012:	4422      	add	r2, r4
 8005014:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005018:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800501c:	3302      	adds	r3, #2
 800501e:	e7c4      	b.n	8004faa <_printf_common+0x62>
 8005020:	2301      	movs	r3, #1
 8005022:	4622      	mov	r2, r4
 8005024:	4639      	mov	r1, r7
 8005026:	4630      	mov	r0, r6
 8005028:	47c0      	blx	r8
 800502a:	3001      	adds	r0, #1
 800502c:	d0e6      	beq.n	8004ffc <_printf_common+0xb4>
 800502e:	f109 0901 	add.w	r9, r9, #1
 8005032:	e7d7      	b.n	8004fe4 <_printf_common+0x9c>

08005034 <_printf_i>:
 8005034:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005038:	4617      	mov	r7, r2
 800503a:	7e0a      	ldrb	r2, [r1, #24]
 800503c:	b085      	sub	sp, #20
 800503e:	2a6e      	cmp	r2, #110	; 0x6e
 8005040:	4698      	mov	r8, r3
 8005042:	4606      	mov	r6, r0
 8005044:	460c      	mov	r4, r1
 8005046:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005048:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800504c:	f000 80bc 	beq.w	80051c8 <_printf_i+0x194>
 8005050:	d81a      	bhi.n	8005088 <_printf_i+0x54>
 8005052:	2a63      	cmp	r2, #99	; 0x63
 8005054:	d02e      	beq.n	80050b4 <_printf_i+0x80>
 8005056:	d80a      	bhi.n	800506e <_printf_i+0x3a>
 8005058:	2a00      	cmp	r2, #0
 800505a:	f000 80c8 	beq.w	80051ee <_printf_i+0x1ba>
 800505e:	2a58      	cmp	r2, #88	; 0x58
 8005060:	f000 808a 	beq.w	8005178 <_printf_i+0x144>
 8005064:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005068:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800506c:	e02a      	b.n	80050c4 <_printf_i+0x90>
 800506e:	2a64      	cmp	r2, #100	; 0x64
 8005070:	d001      	beq.n	8005076 <_printf_i+0x42>
 8005072:	2a69      	cmp	r2, #105	; 0x69
 8005074:	d1f6      	bne.n	8005064 <_printf_i+0x30>
 8005076:	6821      	ldr	r1, [r4, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800507e:	d023      	beq.n	80050c8 <_printf_i+0x94>
 8005080:	1d11      	adds	r1, r2, #4
 8005082:	6019      	str	r1, [r3, #0]
 8005084:	6813      	ldr	r3, [r2, #0]
 8005086:	e027      	b.n	80050d8 <_printf_i+0xa4>
 8005088:	2a73      	cmp	r2, #115	; 0x73
 800508a:	f000 80b4 	beq.w	80051f6 <_printf_i+0x1c2>
 800508e:	d808      	bhi.n	80050a2 <_printf_i+0x6e>
 8005090:	2a6f      	cmp	r2, #111	; 0x6f
 8005092:	d02a      	beq.n	80050ea <_printf_i+0xb6>
 8005094:	2a70      	cmp	r2, #112	; 0x70
 8005096:	d1e5      	bne.n	8005064 <_printf_i+0x30>
 8005098:	680a      	ldr	r2, [r1, #0]
 800509a:	f042 0220 	orr.w	r2, r2, #32
 800509e:	600a      	str	r2, [r1, #0]
 80050a0:	e003      	b.n	80050aa <_printf_i+0x76>
 80050a2:	2a75      	cmp	r2, #117	; 0x75
 80050a4:	d021      	beq.n	80050ea <_printf_i+0xb6>
 80050a6:	2a78      	cmp	r2, #120	; 0x78
 80050a8:	d1dc      	bne.n	8005064 <_printf_i+0x30>
 80050aa:	2278      	movs	r2, #120	; 0x78
 80050ac:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80050b0:	496e      	ldr	r1, [pc, #440]	; (800526c <_printf_i+0x238>)
 80050b2:	e064      	b.n	800517e <_printf_i+0x14a>
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80050ba:	1d11      	adds	r1, r2, #4
 80050bc:	6019      	str	r1, [r3, #0]
 80050be:	6813      	ldr	r3, [r2, #0]
 80050c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050c4:	2301      	movs	r3, #1
 80050c6:	e0a3      	b.n	8005210 <_printf_i+0x1dc>
 80050c8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80050cc:	f102 0104 	add.w	r1, r2, #4
 80050d0:	6019      	str	r1, [r3, #0]
 80050d2:	d0d7      	beq.n	8005084 <_printf_i+0x50>
 80050d4:	f9b2 3000 	ldrsh.w	r3, [r2]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	da03      	bge.n	80050e4 <_printf_i+0xb0>
 80050dc:	222d      	movs	r2, #45	; 0x2d
 80050de:	425b      	negs	r3, r3
 80050e0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80050e4:	4962      	ldr	r1, [pc, #392]	; (8005270 <_printf_i+0x23c>)
 80050e6:	220a      	movs	r2, #10
 80050e8:	e017      	b.n	800511a <_printf_i+0xe6>
 80050ea:	6820      	ldr	r0, [r4, #0]
 80050ec:	6819      	ldr	r1, [r3, #0]
 80050ee:	f010 0f80 	tst.w	r0, #128	; 0x80
 80050f2:	d003      	beq.n	80050fc <_printf_i+0xc8>
 80050f4:	1d08      	adds	r0, r1, #4
 80050f6:	6018      	str	r0, [r3, #0]
 80050f8:	680b      	ldr	r3, [r1, #0]
 80050fa:	e006      	b.n	800510a <_printf_i+0xd6>
 80050fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005100:	f101 0004 	add.w	r0, r1, #4
 8005104:	6018      	str	r0, [r3, #0]
 8005106:	d0f7      	beq.n	80050f8 <_printf_i+0xc4>
 8005108:	880b      	ldrh	r3, [r1, #0]
 800510a:	4959      	ldr	r1, [pc, #356]	; (8005270 <_printf_i+0x23c>)
 800510c:	2a6f      	cmp	r2, #111	; 0x6f
 800510e:	bf14      	ite	ne
 8005110:	220a      	movne	r2, #10
 8005112:	2208      	moveq	r2, #8
 8005114:	2000      	movs	r0, #0
 8005116:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800511a:	6865      	ldr	r5, [r4, #4]
 800511c:	60a5      	str	r5, [r4, #8]
 800511e:	2d00      	cmp	r5, #0
 8005120:	f2c0 809c 	blt.w	800525c <_printf_i+0x228>
 8005124:	6820      	ldr	r0, [r4, #0]
 8005126:	f020 0004 	bic.w	r0, r0, #4
 800512a:	6020      	str	r0, [r4, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d13f      	bne.n	80051b0 <_printf_i+0x17c>
 8005130:	2d00      	cmp	r5, #0
 8005132:	f040 8095 	bne.w	8005260 <_printf_i+0x22c>
 8005136:	4675      	mov	r5, lr
 8005138:	2a08      	cmp	r2, #8
 800513a:	d10b      	bne.n	8005154 <_printf_i+0x120>
 800513c:	6823      	ldr	r3, [r4, #0]
 800513e:	07da      	lsls	r2, r3, #31
 8005140:	d508      	bpl.n	8005154 <_printf_i+0x120>
 8005142:	6923      	ldr	r3, [r4, #16]
 8005144:	6862      	ldr	r2, [r4, #4]
 8005146:	429a      	cmp	r2, r3
 8005148:	bfde      	ittt	le
 800514a:	2330      	movle	r3, #48	; 0x30
 800514c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005150:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005154:	ebae 0305 	sub.w	r3, lr, r5
 8005158:	6123      	str	r3, [r4, #16]
 800515a:	f8cd 8000 	str.w	r8, [sp]
 800515e:	463b      	mov	r3, r7
 8005160:	aa03      	add	r2, sp, #12
 8005162:	4621      	mov	r1, r4
 8005164:	4630      	mov	r0, r6
 8005166:	f7ff feef 	bl	8004f48 <_printf_common>
 800516a:	3001      	adds	r0, #1
 800516c:	d155      	bne.n	800521a <_printf_i+0x1e6>
 800516e:	f04f 30ff 	mov.w	r0, #4294967295
 8005172:	b005      	add	sp, #20
 8005174:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005178:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800517c:	493c      	ldr	r1, [pc, #240]	; (8005270 <_printf_i+0x23c>)
 800517e:	6822      	ldr	r2, [r4, #0]
 8005180:	6818      	ldr	r0, [r3, #0]
 8005182:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005186:	f100 0504 	add.w	r5, r0, #4
 800518a:	601d      	str	r5, [r3, #0]
 800518c:	d001      	beq.n	8005192 <_printf_i+0x15e>
 800518e:	6803      	ldr	r3, [r0, #0]
 8005190:	e002      	b.n	8005198 <_printf_i+0x164>
 8005192:	0655      	lsls	r5, r2, #25
 8005194:	d5fb      	bpl.n	800518e <_printf_i+0x15a>
 8005196:	8803      	ldrh	r3, [r0, #0]
 8005198:	07d0      	lsls	r0, r2, #31
 800519a:	bf44      	itt	mi
 800519c:	f042 0220 	orrmi.w	r2, r2, #32
 80051a0:	6022      	strmi	r2, [r4, #0]
 80051a2:	b91b      	cbnz	r3, 80051ac <_printf_i+0x178>
 80051a4:	6822      	ldr	r2, [r4, #0]
 80051a6:	f022 0220 	bic.w	r2, r2, #32
 80051aa:	6022      	str	r2, [r4, #0]
 80051ac:	2210      	movs	r2, #16
 80051ae:	e7b1      	b.n	8005114 <_printf_i+0xe0>
 80051b0:	4675      	mov	r5, lr
 80051b2:	fbb3 f0f2 	udiv	r0, r3, r2
 80051b6:	fb02 3310 	mls	r3, r2, r0, r3
 80051ba:	5ccb      	ldrb	r3, [r1, r3]
 80051bc:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80051c0:	4603      	mov	r3, r0
 80051c2:	2800      	cmp	r0, #0
 80051c4:	d1f5      	bne.n	80051b2 <_printf_i+0x17e>
 80051c6:	e7b7      	b.n	8005138 <_printf_i+0x104>
 80051c8:	6808      	ldr	r0, [r1, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	6949      	ldr	r1, [r1, #20]
 80051ce:	f010 0f80 	tst.w	r0, #128	; 0x80
 80051d2:	d004      	beq.n	80051de <_printf_i+0x1aa>
 80051d4:	1d10      	adds	r0, r2, #4
 80051d6:	6018      	str	r0, [r3, #0]
 80051d8:	6813      	ldr	r3, [r2, #0]
 80051da:	6019      	str	r1, [r3, #0]
 80051dc:	e007      	b.n	80051ee <_printf_i+0x1ba>
 80051de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80051e2:	f102 0004 	add.w	r0, r2, #4
 80051e6:	6018      	str	r0, [r3, #0]
 80051e8:	6813      	ldr	r3, [r2, #0]
 80051ea:	d0f6      	beq.n	80051da <_printf_i+0x1a6>
 80051ec:	8019      	strh	r1, [r3, #0]
 80051ee:	2300      	movs	r3, #0
 80051f0:	6123      	str	r3, [r4, #16]
 80051f2:	4675      	mov	r5, lr
 80051f4:	e7b1      	b.n	800515a <_printf_i+0x126>
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	1d11      	adds	r1, r2, #4
 80051fa:	6019      	str	r1, [r3, #0]
 80051fc:	6815      	ldr	r5, [r2, #0]
 80051fe:	6862      	ldr	r2, [r4, #4]
 8005200:	2100      	movs	r1, #0
 8005202:	4628      	mov	r0, r5
 8005204:	f7fa ffe4 	bl	80001d0 <memchr>
 8005208:	b108      	cbz	r0, 800520e <_printf_i+0x1da>
 800520a:	1b40      	subs	r0, r0, r5
 800520c:	6060      	str	r0, [r4, #4]
 800520e:	6863      	ldr	r3, [r4, #4]
 8005210:	6123      	str	r3, [r4, #16]
 8005212:	2300      	movs	r3, #0
 8005214:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005218:	e79f      	b.n	800515a <_printf_i+0x126>
 800521a:	6923      	ldr	r3, [r4, #16]
 800521c:	462a      	mov	r2, r5
 800521e:	4639      	mov	r1, r7
 8005220:	4630      	mov	r0, r6
 8005222:	47c0      	blx	r8
 8005224:	3001      	adds	r0, #1
 8005226:	d0a2      	beq.n	800516e <_printf_i+0x13a>
 8005228:	6823      	ldr	r3, [r4, #0]
 800522a:	079b      	lsls	r3, r3, #30
 800522c:	d507      	bpl.n	800523e <_printf_i+0x20a>
 800522e:	2500      	movs	r5, #0
 8005230:	f104 0919 	add.w	r9, r4, #25
 8005234:	68e3      	ldr	r3, [r4, #12]
 8005236:	9a03      	ldr	r2, [sp, #12]
 8005238:	1a9b      	subs	r3, r3, r2
 800523a:	429d      	cmp	r5, r3
 800523c:	db05      	blt.n	800524a <_printf_i+0x216>
 800523e:	68e0      	ldr	r0, [r4, #12]
 8005240:	9b03      	ldr	r3, [sp, #12]
 8005242:	4298      	cmp	r0, r3
 8005244:	bfb8      	it	lt
 8005246:	4618      	movlt	r0, r3
 8005248:	e793      	b.n	8005172 <_printf_i+0x13e>
 800524a:	2301      	movs	r3, #1
 800524c:	464a      	mov	r2, r9
 800524e:	4639      	mov	r1, r7
 8005250:	4630      	mov	r0, r6
 8005252:	47c0      	blx	r8
 8005254:	3001      	adds	r0, #1
 8005256:	d08a      	beq.n	800516e <_printf_i+0x13a>
 8005258:	3501      	adds	r5, #1
 800525a:	e7eb      	b.n	8005234 <_printf_i+0x200>
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1a7      	bne.n	80051b0 <_printf_i+0x17c>
 8005260:	780b      	ldrb	r3, [r1, #0]
 8005262:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005266:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800526a:	e765      	b.n	8005138 <_printf_i+0x104>
 800526c:	080055ee 	.word	0x080055ee
 8005270:	080055dd 	.word	0x080055dd

08005274 <_sbrk_r>:
 8005274:	b538      	push	{r3, r4, r5, lr}
 8005276:	4c06      	ldr	r4, [pc, #24]	; (8005290 <_sbrk_r+0x1c>)
 8005278:	2300      	movs	r3, #0
 800527a:	4605      	mov	r5, r0
 800527c:	4608      	mov	r0, r1
 800527e:	6023      	str	r3, [r4, #0]
 8005280:	f7ff f864 	bl	800434c <_sbrk>
 8005284:	1c43      	adds	r3, r0, #1
 8005286:	d102      	bne.n	800528e <_sbrk_r+0x1a>
 8005288:	6823      	ldr	r3, [r4, #0]
 800528a:	b103      	cbz	r3, 800528e <_sbrk_r+0x1a>
 800528c:	602b      	str	r3, [r5, #0]
 800528e:	bd38      	pop	{r3, r4, r5, pc}
 8005290:	20000298 	.word	0x20000298

08005294 <__sread>:
 8005294:	b510      	push	{r4, lr}
 8005296:	460c      	mov	r4, r1
 8005298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800529c:	f000 f896 	bl	80053cc <_read_r>
 80052a0:	2800      	cmp	r0, #0
 80052a2:	bfab      	itete	ge
 80052a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80052a6:	89a3      	ldrhlt	r3, [r4, #12]
 80052a8:	181b      	addge	r3, r3, r0
 80052aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80052ae:	bfac      	ite	ge
 80052b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80052b2:	81a3      	strhlt	r3, [r4, #12]
 80052b4:	bd10      	pop	{r4, pc}

080052b6 <__swrite>:
 80052b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052ba:	461f      	mov	r7, r3
 80052bc:	898b      	ldrh	r3, [r1, #12]
 80052be:	05db      	lsls	r3, r3, #23
 80052c0:	4605      	mov	r5, r0
 80052c2:	460c      	mov	r4, r1
 80052c4:	4616      	mov	r6, r2
 80052c6:	d505      	bpl.n	80052d4 <__swrite+0x1e>
 80052c8:	2302      	movs	r3, #2
 80052ca:	2200      	movs	r2, #0
 80052cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052d0:	f000 f868 	bl	80053a4 <_lseek_r>
 80052d4:	89a3      	ldrh	r3, [r4, #12]
 80052d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052de:	81a3      	strh	r3, [r4, #12]
 80052e0:	4632      	mov	r2, r6
 80052e2:	463b      	mov	r3, r7
 80052e4:	4628      	mov	r0, r5
 80052e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052ea:	f000 b817 	b.w	800531c <_write_r>

080052ee <__sseek>:
 80052ee:	b510      	push	{r4, lr}
 80052f0:	460c      	mov	r4, r1
 80052f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052f6:	f000 f855 	bl	80053a4 <_lseek_r>
 80052fa:	1c43      	adds	r3, r0, #1
 80052fc:	89a3      	ldrh	r3, [r4, #12]
 80052fe:	bf15      	itete	ne
 8005300:	6560      	strne	r0, [r4, #84]	; 0x54
 8005302:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005306:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800530a:	81a3      	strheq	r3, [r4, #12]
 800530c:	bf18      	it	ne
 800530e:	81a3      	strhne	r3, [r4, #12]
 8005310:	bd10      	pop	{r4, pc}

08005312 <__sclose>:
 8005312:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005316:	f000 b813 	b.w	8005340 <_close_r>
	...

0800531c <_write_r>:
 800531c:	b538      	push	{r3, r4, r5, lr}
 800531e:	4c07      	ldr	r4, [pc, #28]	; (800533c <_write_r+0x20>)
 8005320:	4605      	mov	r5, r0
 8005322:	4608      	mov	r0, r1
 8005324:	4611      	mov	r1, r2
 8005326:	2200      	movs	r2, #0
 8005328:	6022      	str	r2, [r4, #0]
 800532a:	461a      	mov	r2, r3
 800532c:	f7fe fff4 	bl	8004318 <_write>
 8005330:	1c43      	adds	r3, r0, #1
 8005332:	d102      	bne.n	800533a <_write_r+0x1e>
 8005334:	6823      	ldr	r3, [r4, #0]
 8005336:	b103      	cbz	r3, 800533a <_write_r+0x1e>
 8005338:	602b      	str	r3, [r5, #0]
 800533a:	bd38      	pop	{r3, r4, r5, pc}
 800533c:	20000298 	.word	0x20000298

08005340 <_close_r>:
 8005340:	b538      	push	{r3, r4, r5, lr}
 8005342:	4c06      	ldr	r4, [pc, #24]	; (800535c <_close_r+0x1c>)
 8005344:	2300      	movs	r3, #0
 8005346:	4605      	mov	r5, r0
 8005348:	4608      	mov	r0, r1
 800534a:	6023      	str	r3, [r4, #0]
 800534c:	f7ff f818 	bl	8004380 <_close>
 8005350:	1c43      	adds	r3, r0, #1
 8005352:	d102      	bne.n	800535a <_close_r+0x1a>
 8005354:	6823      	ldr	r3, [r4, #0]
 8005356:	b103      	cbz	r3, 800535a <_close_r+0x1a>
 8005358:	602b      	str	r3, [r5, #0]
 800535a:	bd38      	pop	{r3, r4, r5, pc}
 800535c:	20000298 	.word	0x20000298

08005360 <_fstat_r>:
 8005360:	b538      	push	{r3, r4, r5, lr}
 8005362:	4c07      	ldr	r4, [pc, #28]	; (8005380 <_fstat_r+0x20>)
 8005364:	2300      	movs	r3, #0
 8005366:	4605      	mov	r5, r0
 8005368:	4608      	mov	r0, r1
 800536a:	4611      	mov	r1, r2
 800536c:	6023      	str	r3, [r4, #0]
 800536e:	f7ff f80a 	bl	8004386 <_fstat>
 8005372:	1c43      	adds	r3, r0, #1
 8005374:	d102      	bne.n	800537c <_fstat_r+0x1c>
 8005376:	6823      	ldr	r3, [r4, #0]
 8005378:	b103      	cbz	r3, 800537c <_fstat_r+0x1c>
 800537a:	602b      	str	r3, [r5, #0]
 800537c:	bd38      	pop	{r3, r4, r5, pc}
 800537e:	bf00      	nop
 8005380:	20000298 	.word	0x20000298

08005384 <_isatty_r>:
 8005384:	b538      	push	{r3, r4, r5, lr}
 8005386:	4c06      	ldr	r4, [pc, #24]	; (80053a0 <_isatty_r+0x1c>)
 8005388:	2300      	movs	r3, #0
 800538a:	4605      	mov	r5, r0
 800538c:	4608      	mov	r0, r1
 800538e:	6023      	str	r3, [r4, #0]
 8005390:	f7fe fffe 	bl	8004390 <_isatty>
 8005394:	1c43      	adds	r3, r0, #1
 8005396:	d102      	bne.n	800539e <_isatty_r+0x1a>
 8005398:	6823      	ldr	r3, [r4, #0]
 800539a:	b103      	cbz	r3, 800539e <_isatty_r+0x1a>
 800539c:	602b      	str	r3, [r5, #0]
 800539e:	bd38      	pop	{r3, r4, r5, pc}
 80053a0:	20000298 	.word	0x20000298

080053a4 <_lseek_r>:
 80053a4:	b538      	push	{r3, r4, r5, lr}
 80053a6:	4c07      	ldr	r4, [pc, #28]	; (80053c4 <_lseek_r+0x20>)
 80053a8:	4605      	mov	r5, r0
 80053aa:	4608      	mov	r0, r1
 80053ac:	4611      	mov	r1, r2
 80053ae:	2200      	movs	r2, #0
 80053b0:	6022      	str	r2, [r4, #0]
 80053b2:	461a      	mov	r2, r3
 80053b4:	f7fe ffee 	bl	8004394 <_lseek>
 80053b8:	1c43      	adds	r3, r0, #1
 80053ba:	d102      	bne.n	80053c2 <_lseek_r+0x1e>
 80053bc:	6823      	ldr	r3, [r4, #0]
 80053be:	b103      	cbz	r3, 80053c2 <_lseek_r+0x1e>
 80053c0:	602b      	str	r3, [r5, #0]
 80053c2:	bd38      	pop	{r3, r4, r5, pc}
 80053c4:	20000298 	.word	0x20000298

080053c8 <__malloc_lock>:
 80053c8:	4770      	bx	lr

080053ca <__malloc_unlock>:
 80053ca:	4770      	bx	lr

080053cc <_read_r>:
 80053cc:	b538      	push	{r3, r4, r5, lr}
 80053ce:	4c07      	ldr	r4, [pc, #28]	; (80053ec <_read_r+0x20>)
 80053d0:	4605      	mov	r5, r0
 80053d2:	4608      	mov	r0, r1
 80053d4:	4611      	mov	r1, r2
 80053d6:	2200      	movs	r2, #0
 80053d8:	6022      	str	r2, [r4, #0]
 80053da:	461a      	mov	r2, r3
 80053dc:	f7fe ff8e 	bl	80042fc <_read>
 80053e0:	1c43      	adds	r3, r0, #1
 80053e2:	d102      	bne.n	80053ea <_read_r+0x1e>
 80053e4:	6823      	ldr	r3, [r4, #0]
 80053e6:	b103      	cbz	r3, 80053ea <_read_r+0x1e>
 80053e8:	602b      	str	r3, [r5, #0]
 80053ea:	bd38      	pop	{r3, r4, r5, pc}
 80053ec:	20000298 	.word	0x20000298

080053f0 <_init>:
 80053f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053f2:	bf00      	nop
 80053f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053f6:	bc08      	pop	{r3}
 80053f8:	469e      	mov	lr, r3
 80053fa:	4770      	bx	lr

080053fc <_fini>:
 80053fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053fe:	bf00      	nop
 8005400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005402:	bc08      	pop	{r3}
 8005404:	469e      	mov	lr, r3
 8005406:	4770      	bx	lr
