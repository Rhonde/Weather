
Weather.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000166f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d48  08016888  08016888  00026888  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000294  080185d0  080185d0  000285d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000002f0  08018864  08018864  00028864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000014  08018b54  08018b54  00028b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08018b68  08018b68  00028b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000688  20000000  08018b6c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000004c8  20000688  080191f4  00030688  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000b50  080191f4  00030b50  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00030688  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002efc5  00000000  00000000  000306b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000572e  00000000  00000000  0005f67d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000f4b1  00000000  00000000  00064dab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017a0  00000000  00000000  00074260  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001c28  00000000  00000000  00075a00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0001090c  00000000  00000000  00077628  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00009fef  00000000  00000000  00087f34  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00091f23  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00007afc  00000000  00000000  00091fa0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000688 	.word	0x20000688
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801686c 	.word	0x0801686c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000068c 	.word	0x2000068c
 80001cc:	0801686c 	.word	0x0801686c

080001d0 <d_make_comp>:
 80001d0:	b470      	push	{r4, r5, r6}
 80001d2:	1e4c      	subs	r4, r1, #1
 80001d4:	2c4c      	cmp	r4, #76	; 0x4c
 80001d6:	d82d      	bhi.n	8000234 <d_make_comp+0x64>
 80001d8:	e8df f004 	tbb	[pc, r4]
 80001dc:	3c3c3c3c 	.word	0x3c3c3c3c
 80001e0:	2c2c2c2c 	.word	0x2c2c2c2c
 80001e4:	273c2727 	.word	0x273c2727
 80001e8:	27272727 	.word	0x27272727
 80001ec:	27272727 	.word	0x27272727
 80001f0:	2c272727 	.word	0x2c272727
 80001f4:	28282828 	.word	0x28282828
 80001f8:	28282828 	.word	0x28282828
 80001fc:	2727273c 	.word	0x2727273c
 8000200:	272c2727 	.word	0x272c2727
 8000204:	2c3c3e28 	.word	0x2c3c3e28
 8000208:	3e28283c 	.word	0x3e28283c
 800020c:	27272c2c 	.word	0x27272c2c
 8000210:	3c3c3c27 	.word	0x3c3c3c27
 8000214:	3c273c3c 	.word	0x3c273c3c
 8000218:	2c3c273c 	.word	0x2c3c273c
 800021c:	2727272c 	.word	0x2727272c
 8000220:	272c2c2c 	.word	0x272c2c2c
 8000224:	283c2727 	.word	0x283c2727
 8000228:	3c          	.byte	0x3c
 8000229:	00          	.byte	0x00
 800022a:	b11a      	cbz	r2, 8000234 <d_make_comp+0x64>
 800022c:	6944      	ldr	r4, [r0, #20]
 800022e:	6985      	ldr	r5, [r0, #24]
 8000230:	42ac      	cmp	r4, r5
 8000232:	db02      	blt.n	800023a <d_make_comp+0x6a>
 8000234:	2000      	movs	r0, #0
 8000236:	bc70      	pop	{r4, r5, r6}
 8000238:	4770      	bx	lr
 800023a:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800023e:	6906      	ldr	r6, [r0, #16]
 8000240:	00ad      	lsls	r5, r5, #2
 8000242:	3401      	adds	r4, #1
 8000244:	6144      	str	r4, [r0, #20]
 8000246:	1970      	adds	r0, r6, r5
 8000248:	d0f5      	beq.n	8000236 <d_make_comp+0x66>
 800024a:	5571      	strb	r1, [r6, r5]
 800024c:	6042      	str	r2, [r0, #4]
 800024e:	6083      	str	r3, [r0, #8]
 8000250:	bc70      	pop	{r4, r5, r6}
 8000252:	4770      	bx	lr
 8000254:	2a00      	cmp	r2, #0
 8000256:	d0ed      	beq.n	8000234 <d_make_comp+0x64>
 8000258:	2b00      	cmp	r3, #0
 800025a:	d0eb      	beq.n	8000234 <d_make_comp+0x64>
 800025c:	6944      	ldr	r4, [r0, #20]
 800025e:	6985      	ldr	r5, [r0, #24]
 8000260:	42ac      	cmp	r4, r5
 8000262:	dae7      	bge.n	8000234 <d_make_comp+0x64>
 8000264:	e7e9      	b.n	800023a <d_make_comp+0x6a>
 8000266:	bf00      	nop

08000268 <d_cv_qualifiers>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	68c3      	ldr	r3, [r0, #12]
 800026e:	f1b2 0a00 	subs.w	sl, r2, #0
 8000272:	4604      	mov	r4, r0
 8000274:	460e      	mov	r6, r1
 8000276:	781a      	ldrb	r2, [r3, #0]
 8000278:	bf15      	itete	ne
 800027a:	f04f 091e 	movne.w	r9, #30
 800027e:	f04f 091b 	moveq.w	r9, #27
 8000282:	f04f 081d 	movne.w	r8, #29
 8000286:	f04f 081a 	moveq.w	r8, #26
 800028a:	bf14      	ite	ne
 800028c:	271c      	movne	r7, #28
 800028e:	2719      	moveq	r7, #25
 8000290:	460d      	mov	r5, r1
 8000292:	e018      	b.n	80002c6 <d_cv_qualifiers+0x5e>
 8000294:	2a56      	cmp	r2, #86	; 0x56
 8000296:	d01f      	beq.n	80002d8 <d_cv_qualifiers+0x70>
 8000298:	2a4b      	cmp	r2, #75	; 0x4b
 800029a:	d024      	beq.n	80002e6 <d_cv_qualifiers+0x7e>
 800029c:	2a44      	cmp	r2, #68	; 0x44
 800029e:	d12d      	bne.n	80002fc <d_cv_qualifiers+0x94>
 80002a0:	785a      	ldrb	r2, [r3, #1]
 80002a2:	2a78      	cmp	r2, #120	; 0x78
 80002a4:	d127      	bne.n	80002f6 <d_cv_qualifiers+0x8e>
 80002a6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80002a8:	3302      	adds	r3, #2
 80002aa:	3211      	adds	r2, #17
 80002ac:	60e3      	str	r3, [r4, #12]
 80002ae:	6322      	str	r2, [r4, #48]	; 0x30
 80002b0:	214c      	movs	r1, #76	; 0x4c
 80002b2:	2300      	movs	r3, #0
 80002b4:	461a      	mov	r2, r3
 80002b6:	4620      	mov	r0, r4
 80002b8:	f7ff ff8a 	bl	80001d0 <d_make_comp>
 80002bc:	6028      	str	r0, [r5, #0]
 80002be:	b1c8      	cbz	r0, 80002f4 <d_cv_qualifiers+0x8c>
 80002c0:	68e3      	ldr	r3, [r4, #12]
 80002c2:	781a      	ldrb	r2, [r3, #0]
 80002c4:	1d05      	adds	r5, r0, #4
 80002c6:	2a72      	cmp	r2, #114	; 0x72
 80002c8:	d1e4      	bne.n	8000294 <d_cv_qualifiers+0x2c>
 80002ca:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80002cc:	3301      	adds	r3, #1
 80002ce:	3209      	adds	r2, #9
 80002d0:	60e3      	str	r3, [r4, #12]
 80002d2:	6322      	str	r2, [r4, #48]	; 0x30
 80002d4:	4639      	mov	r1, r7
 80002d6:	e7ec      	b.n	80002b2 <d_cv_qualifiers+0x4a>
 80002d8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80002da:	3301      	adds	r3, #1
 80002dc:	3209      	adds	r2, #9
 80002de:	60e3      	str	r3, [r4, #12]
 80002e0:	6322      	str	r2, [r4, #48]	; 0x30
 80002e2:	4641      	mov	r1, r8
 80002e4:	e7e5      	b.n	80002b2 <d_cv_qualifiers+0x4a>
 80002e6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80002e8:	3301      	adds	r3, #1
 80002ea:	3206      	adds	r2, #6
 80002ec:	60e3      	str	r3, [r4, #12]
 80002ee:	6322      	str	r2, [r4, #48]	; 0x30
 80002f0:	4649      	mov	r1, r9
 80002f2:	e7de      	b.n	80002b2 <d_cv_qualifiers+0x4a>
 80002f4:	4605      	mov	r5, r0
 80002f6:	4628      	mov	r0, r5
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	f1ba 0f00 	cmp.w	sl, #0
 8000300:	d1f9      	bne.n	80002f6 <d_cv_qualifiers+0x8e>
 8000302:	2a46      	cmp	r2, #70	; 0x46
 8000304:	d1f7      	bne.n	80002f6 <d_cv_qualifiers+0x8e>
 8000306:	42b5      	cmp	r5, r6
 8000308:	d0f5      	beq.n	80002f6 <d_cv_qualifiers+0x8e>
 800030a:	201d      	movs	r0, #29
 800030c:	211e      	movs	r1, #30
 800030e:	221c      	movs	r2, #28
 8000310:	e007      	b.n	8000322 <d_cv_qualifiers+0xba>
 8000312:	2b1b      	cmp	r3, #27
 8000314:	d00b      	beq.n	800032e <d_cv_qualifiers+0xc6>
 8000316:	2b19      	cmp	r3, #25
 8000318:	d100      	bne.n	800031c <d_cv_qualifiers+0xb4>
 800031a:	7032      	strb	r2, [r6, #0]
 800031c:	3604      	adds	r6, #4
 800031e:	42b5      	cmp	r5, r6
 8000320:	d0e9      	beq.n	80002f6 <d_cv_qualifiers+0x8e>
 8000322:	6836      	ldr	r6, [r6, #0]
 8000324:	7833      	ldrb	r3, [r6, #0]
 8000326:	2b1a      	cmp	r3, #26
 8000328:	d1f3      	bne.n	8000312 <d_cv_qualifiers+0xaa>
 800032a:	7030      	strb	r0, [r6, #0]
 800032c:	e7f6      	b.n	800031c <d_cv_qualifiers+0xb4>
 800032e:	7031      	strb	r1, [r6, #0]
 8000330:	e7f4      	b.n	800031c <d_cv_qualifiers+0xb4>
 8000332:	bf00      	nop

08000334 <d_ref_qualifier>:
 8000334:	b410      	push	{r4}
 8000336:	68c3      	ldr	r3, [r0, #12]
 8000338:	781c      	ldrb	r4, [r3, #0]
 800033a:	2c52      	cmp	r4, #82	; 0x52
 800033c:	460a      	mov	r2, r1
 800033e:	d00f      	beq.n	8000360 <d_ref_qualifier+0x2c>
 8000340:	2c4f      	cmp	r4, #79	; 0x4f
 8000342:	d003      	beq.n	800034c <d_ref_qualifier+0x18>
 8000344:	4608      	mov	r0, r1
 8000346:	f85d 4b04 	ldr.w	r4, [sp], #4
 800034a:	4770      	bx	lr
 800034c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800034e:	3103      	adds	r1, #3
 8000350:	6301      	str	r1, [r0, #48]	; 0x30
 8000352:	2120      	movs	r1, #32
 8000354:	3301      	adds	r3, #1
 8000356:	60c3      	str	r3, [r0, #12]
 8000358:	f85d 4b04 	ldr.w	r4, [sp], #4
 800035c:	2300      	movs	r3, #0
 800035e:	e737      	b.n	80001d0 <d_make_comp>
 8000360:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8000362:	3102      	adds	r1, #2
 8000364:	6301      	str	r1, [r0, #48]	; 0x30
 8000366:	211f      	movs	r1, #31
 8000368:	e7f4      	b.n	8000354 <d_ref_qualifier+0x20>
 800036a:	bf00      	nop

0800036c <d_count_templates_scopes>:
 800036c:	2a00      	cmp	r2, #0
 800036e:	d04d      	beq.n	800040c <d_count_templates_scopes+0xa0>
 8000370:	b570      	push	{r4, r5, r6, lr}
 8000372:	4605      	mov	r5, r0
 8000374:	460e      	mov	r6, r1
 8000376:	4614      	mov	r4, r2
 8000378:	7823      	ldrb	r3, [r4, #0]
 800037a:	3b01      	subs	r3, #1
 800037c:	2b4c      	cmp	r3, #76	; 0x4c
 800037e:	d82b      	bhi.n	80003d8 <d_count_templates_scopes+0x6c>
 8000380:	e8df f003 	tbb	[pc, r3]
 8000384:	3f363636 	.word	0x3f363636
 8000388:	27272a2a 	.word	0x27272a2a
 800038c:	36363636 	.word	0x36363636
 8000390:	36363636 	.word	0x36363636
 8000394:	36363636 	.word	0x36363636
 8000398:	2a363636 	.word	0x2a363636
 800039c:	36363636 	.word	0x36363636
 80003a0:	36363636 	.word	0x36363636
 80003a4:	2f2f3636 	.word	0x2f2f3636
 80003a8:	362a3636 	.word	0x362a3636
 80003ac:	2b363636 	.word	0x2b363636
 80003b0:	36363636 	.word	0x36363636
 80003b4:	3636272a 	.word	0x3636272a
 80003b8:	36363636 	.word	0x36363636
 80003bc:	36363636 	.word	0x36363636
 80003c0:	2a363636 	.word	0x2a363636
 80003c4:	2b2b362a 	.word	0x2b2b362a
 80003c8:	362a2b2b 	.word	0x362a2b2b
 80003cc:	36363636 	.word	0x36363636
 80003d0:	36          	.byte	0x36
 80003d1:	00          	.byte	0x00
 80003d2:	68a4      	ldr	r4, [r4, #8]
 80003d4:	2c00      	cmp	r4, #0
 80003d6:	d1cf      	bne.n	8000378 <d_count_templates_scopes+0xc>
 80003d8:	bd70      	pop	{r4, r5, r6, pc}
 80003da:	6864      	ldr	r4, [r4, #4]
 80003dc:	2c00      	cmp	r4, #0
 80003de:	d1cb      	bne.n	8000378 <d_count_templates_scopes+0xc>
 80003e0:	e7fa      	b.n	80003d8 <d_count_templates_scopes+0x6c>
 80003e2:	6862      	ldr	r2, [r4, #4]
 80003e4:	7813      	ldrb	r3, [r2, #0]
 80003e6:	2b05      	cmp	r3, #5
 80003e8:	d103      	bne.n	80003f2 <d_count_templates_scopes+0x86>
 80003ea:	6833      	ldr	r3, [r6, #0]
 80003ec:	3301      	adds	r3, #1
 80003ee:	6033      	str	r3, [r6, #0]
 80003f0:	6862      	ldr	r2, [r4, #4]
 80003f2:	4631      	mov	r1, r6
 80003f4:	4628      	mov	r0, r5
 80003f6:	f7ff ffb9 	bl	800036c <d_count_templates_scopes>
 80003fa:	68a4      	ldr	r4, [r4, #8]
 80003fc:	2c00      	cmp	r4, #0
 80003fe:	d1bb      	bne.n	8000378 <d_count_templates_scopes+0xc>
 8000400:	e7ea      	b.n	80003d8 <d_count_templates_scopes+0x6c>
 8000402:	682b      	ldr	r3, [r5, #0]
 8000404:	3301      	adds	r3, #1
 8000406:	602b      	str	r3, [r5, #0]
 8000408:	6862      	ldr	r2, [r4, #4]
 800040a:	e7f2      	b.n	80003f2 <d_count_templates_scopes+0x86>
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop

08000410 <d_append_buffer>:
 8000410:	b37a      	cbz	r2, 8000472 <d_append_buffer+0x62>
 8000412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000416:	460d      	mov	r5, r1
 8000418:	4604      	mov	r4, r0
 800041a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800041e:	18af      	adds	r7, r5, r2
 8000420:	f04f 0800 	mov.w	r8, #0
 8000424:	e009      	b.n	800043a <d_append_buffer+0x2a>
 8000426:	460b      	mov	r3, r1
 8000428:	42bd      	cmp	r5, r7
 800042a:	f101 0101 	add.w	r1, r1, #1
 800042e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8000432:	54e6      	strb	r6, [r4, r3]
 8000434:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8000438:	d019      	beq.n	800046e <d_append_buffer+0x5e>
 800043a:	29ff      	cmp	r1, #255	; 0xff
 800043c:	f815 6b01 	ldrb.w	r6, [r5], #1
 8000440:	d1f1      	bne.n	8000426 <d_append_buffer+0x16>
 8000442:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8000446:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800044a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800044e:	4620      	mov	r0, r4
 8000450:	4798      	blx	r3
 8000452:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8000456:	3301      	adds	r3, #1
 8000458:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800045c:	2300      	movs	r3, #0
 800045e:	2101      	movs	r1, #1
 8000460:	42bd      	cmp	r5, r7
 8000462:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8000466:	54e6      	strb	r6, [r4, r3]
 8000468:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800046c:	d1e5      	bne.n	800043a <d_append_buffer+0x2a>
 800046e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000472:	4770      	bx	lr

08000474 <d_number.isra.0>:
 8000474:	b470      	push	{r4, r5, r6}
 8000476:	6802      	ldr	r2, [r0, #0]
 8000478:	7811      	ldrb	r1, [r2, #0]
 800047a:	296e      	cmp	r1, #110	; 0x6e
 800047c:	d018      	beq.n	80004b0 <d_number.isra.0+0x3c>
 800047e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8000482:	2b09      	cmp	r3, #9
 8000484:	d81e      	bhi.n	80004c4 <d_number.isra.0+0x50>
 8000486:	2600      	movs	r6, #0
 8000488:	2300      	movs	r3, #0
 800048a:	3201      	adds	r2, #1
 800048c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000490:	6002      	str	r2, [r0, #0]
 8000492:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 8000496:	7811      	ldrb	r1, [r2, #0]
 8000498:	f1a1 0530 	sub.w	r5, r1, #48	; 0x30
 800049c:	2d09      	cmp	r5, #9
 800049e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80004a2:	d9f2      	bls.n	800048a <d_number.isra.0+0x16>
 80004a4:	b10e      	cbz	r6, 80004aa <d_number.isra.0+0x36>
 80004a6:	f1c4 0330 	rsb	r3, r4, #48	; 0x30
 80004aa:	4618      	mov	r0, r3
 80004ac:	bc70      	pop	{r4, r5, r6}
 80004ae:	4770      	bx	lr
 80004b0:	1c53      	adds	r3, r2, #1
 80004b2:	6003      	str	r3, [r0, #0]
 80004b4:	7851      	ldrb	r1, [r2, #1]
 80004b6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80004ba:	2a09      	cmp	r2, #9
 80004bc:	d802      	bhi.n	80004c4 <d_number.isra.0+0x50>
 80004be:	461a      	mov	r2, r3
 80004c0:	2601      	movs	r6, #1
 80004c2:	e7e1      	b.n	8000488 <d_number.isra.0+0x14>
 80004c4:	2300      	movs	r3, #0
 80004c6:	e7f0      	b.n	80004aa <d_number.isra.0+0x36>

080004c8 <d_number_component>:
 80004c8:	6943      	ldr	r3, [r0, #20]
 80004ca:	6982      	ldr	r2, [r0, #24]
 80004cc:	4293      	cmp	r3, r2
 80004ce:	b510      	push	{r4, lr}
 80004d0:	da0f      	bge.n	80004f2 <d_number_component+0x2a>
 80004d2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80004d6:	6901      	ldr	r1, [r0, #16]
 80004d8:	0092      	lsls	r2, r2, #2
 80004da:	3301      	adds	r3, #1
 80004dc:	188c      	adds	r4, r1, r2
 80004de:	6143      	str	r3, [r0, #20]
 80004e0:	d005      	beq.n	80004ee <d_number_component+0x26>
 80004e2:	2341      	movs	r3, #65	; 0x41
 80004e4:	300c      	adds	r0, #12
 80004e6:	548b      	strb	r3, [r1, r2]
 80004e8:	f7ff ffc4 	bl	8000474 <d_number.isra.0>
 80004ec:	6060      	str	r0, [r4, #4]
 80004ee:	4620      	mov	r0, r4
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2400      	movs	r4, #0
 80004f4:	4620      	mov	r0, r4
 80004f6:	bd10      	pop	{r4, pc}

080004f8 <d_compact_number>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	68c3      	ldr	r3, [r0, #12]
 80004fc:	781a      	ldrb	r2, [r3, #0]
 80004fe:	2a5f      	cmp	r2, #95	; 0x5f
 8000500:	4604      	mov	r4, r0
 8000502:	d00d      	beq.n	8000520 <d_compact_number+0x28>
 8000504:	2a6e      	cmp	r2, #110	; 0x6e
 8000506:	d00f      	beq.n	8000528 <d_compact_number+0x30>
 8000508:	300c      	adds	r0, #12
 800050a:	f7ff ffb3 	bl	8000474 <d_number.isra.0>
 800050e:	3001      	adds	r0, #1
 8000510:	d40a      	bmi.n	8000528 <d_compact_number+0x30>
 8000512:	68e3      	ldr	r3, [r4, #12]
 8000514:	781a      	ldrb	r2, [r3, #0]
 8000516:	2a5f      	cmp	r2, #95	; 0x5f
 8000518:	d106      	bne.n	8000528 <d_compact_number+0x30>
 800051a:	3301      	adds	r3, #1
 800051c:	60e3      	str	r3, [r4, #12]
 800051e:	bd10      	pop	{r4, pc}
 8000520:	3301      	adds	r3, #1
 8000522:	2000      	movs	r0, #0
 8000524:	60e3      	str	r3, [r4, #12]
 8000526:	bd10      	pop	{r4, pc}
 8000528:	f04f 30ff 	mov.w	r0, #4294967295
 800052c:	bd10      	pop	{r4, pc}
 800052e:	bf00      	nop

08000530 <d_template_param>:
 8000530:	b538      	push	{r3, r4, r5, lr}
 8000532:	68c3      	ldr	r3, [r0, #12]
 8000534:	781a      	ldrb	r2, [r3, #0]
 8000536:	2a54      	cmp	r2, #84	; 0x54
 8000538:	d001      	beq.n	800053e <d_template_param+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd38      	pop	{r3, r4, r5, pc}
 800053e:	3301      	adds	r3, #1
 8000540:	60c3      	str	r3, [r0, #12]
 8000542:	4604      	mov	r4, r0
 8000544:	f7ff ffd8 	bl	80004f8 <d_compact_number>
 8000548:	1e05      	subs	r5, r0, #0
 800054a:	dbf6      	blt.n	800053a <d_template_param+0xa>
 800054c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800054e:	6963      	ldr	r3, [r4, #20]
 8000550:	69a1      	ldr	r1, [r4, #24]
 8000552:	3201      	adds	r2, #1
 8000554:	428b      	cmp	r3, r1
 8000556:	62a2      	str	r2, [r4, #40]	; 0x28
 8000558:	daef      	bge.n	800053a <d_template_param+0xa>
 800055a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800055e:	6921      	ldr	r1, [r4, #16]
 8000560:	0092      	lsls	r2, r2, #2
 8000562:	3301      	adds	r3, #1
 8000564:	1888      	adds	r0, r1, r2
 8000566:	6163      	str	r3, [r4, #20]
 8000568:	d002      	beq.n	8000570 <d_template_param+0x40>
 800056a:	2305      	movs	r3, #5
 800056c:	548b      	strb	r3, [r1, r2]
 800056e:	6045      	str	r5, [r0, #4]
 8000570:	bd38      	pop	{r3, r4, r5, pc}
 8000572:	bf00      	nop

08000574 <d_source_name>:
 8000574:	b570      	push	{r4, r5, r6, lr}
 8000576:	4604      	mov	r4, r0
 8000578:	300c      	adds	r0, #12
 800057a:	f7ff ff7b 	bl	8000474 <d_number.isra.0>
 800057e:	1e06      	subs	r6, r0, #0
 8000580:	dd4d      	ble.n	800061e <d_source_name+0xaa>
 8000582:	68e5      	ldr	r5, [r4, #12]
 8000584:	6863      	ldr	r3, [r4, #4]
 8000586:	1b5b      	subs	r3, r3, r5
 8000588:	429e      	cmp	r6, r3
 800058a:	dc2b      	bgt.n	80005e4 <d_source_name+0x70>
 800058c:	68a2      	ldr	r2, [r4, #8]
 800058e:	19ab      	adds	r3, r5, r6
 8000590:	0752      	lsls	r2, r2, #29
 8000592:	60e3      	str	r3, [r4, #12]
 8000594:	d504      	bpl.n	80005a0 <d_source_name+0x2c>
 8000596:	5daa      	ldrb	r2, [r5, r6]
 8000598:	2a24      	cmp	r2, #36	; 0x24
 800059a:	bf04      	itt	eq
 800059c:	3301      	addeq	r3, #1
 800059e:	60e3      	streq	r3, [r4, #12]
 80005a0:	2e09      	cmp	r6, #9
 80005a2:	dd0c      	ble.n	80005be <d_source_name+0x4a>
 80005a4:	2208      	movs	r2, #8
 80005a6:	491f      	ldr	r1, [pc, #124]	; (8000624 <d_source_name+0xb0>)
 80005a8:	4628      	mov	r0, r5
 80005aa:	f011 fd7f 	bl	80120ac <memcmp>
 80005ae:	b930      	cbnz	r0, 80005be <d_source_name+0x4a>
 80005b0:	7a2b      	ldrb	r3, [r5, #8]
 80005b2:	2b2e      	cmp	r3, #46	; 0x2e
 80005b4:	d019      	beq.n	80005ea <d_source_name+0x76>
 80005b6:	2b5f      	cmp	r3, #95	; 0x5f
 80005b8:	d017      	beq.n	80005ea <d_source_name+0x76>
 80005ba:	2b24      	cmp	r3, #36	; 0x24
 80005bc:	d015      	beq.n	80005ea <d_source_name+0x76>
 80005be:	6963      	ldr	r3, [r4, #20]
 80005c0:	69a2      	ldr	r2, [r4, #24]
 80005c2:	4293      	cmp	r3, r2
 80005c4:	da0e      	bge.n	80005e4 <d_source_name+0x70>
 80005c6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80005ca:	6921      	ldr	r1, [r4, #16]
 80005cc:	0092      	lsls	r2, r2, #2
 80005ce:	3301      	adds	r3, #1
 80005d0:	1888      	adds	r0, r1, r2
 80005d2:	6163      	str	r3, [r4, #20]
 80005d4:	d006      	beq.n	80005e4 <d_source_name+0x70>
 80005d6:	b12d      	cbz	r5, 80005e4 <d_source_name+0x70>
 80005d8:	2300      	movs	r3, #0
 80005da:	548b      	strb	r3, [r1, r2]
 80005dc:	6045      	str	r5, [r0, #4]
 80005de:	6086      	str	r6, [r0, #8]
 80005e0:	62e0      	str	r0, [r4, #44]	; 0x2c
 80005e2:	bd70      	pop	{r4, r5, r6, pc}
 80005e4:	2000      	movs	r0, #0
 80005e6:	62e0      	str	r0, [r4, #44]	; 0x2c
 80005e8:	bd70      	pop	{r4, r5, r6, pc}
 80005ea:	7a6b      	ldrb	r3, [r5, #9]
 80005ec:	2b4e      	cmp	r3, #78	; 0x4e
 80005ee:	d1e6      	bne.n	80005be <d_source_name+0x4a>
 80005f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80005f2:	6962      	ldr	r2, [r4, #20]
 80005f4:	69a1      	ldr	r1, [r4, #24]
 80005f6:	3316      	adds	r3, #22
 80005f8:	1b9e      	subs	r6, r3, r6
 80005fa:	428a      	cmp	r2, r1
 80005fc:	6326      	str	r6, [r4, #48]	; 0x30
 80005fe:	daf1      	bge.n	80005e4 <d_source_name+0x70>
 8000600:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8000604:	6921      	ldr	r1, [r4, #16]
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	3201      	adds	r2, #1
 800060a:	18c8      	adds	r0, r1, r3
 800060c:	6162      	str	r2, [r4, #20]
 800060e:	d0ea      	beq.n	80005e6 <d_source_name+0x72>
 8000610:	2500      	movs	r5, #0
 8000612:	54cd      	strb	r5, [r1, r3]
 8000614:	4a04      	ldr	r2, [pc, #16]	; (8000628 <d_source_name+0xb4>)
 8000616:	6042      	str	r2, [r0, #4]
 8000618:	2315      	movs	r3, #21
 800061a:	6083      	str	r3, [r0, #8]
 800061c:	e7e3      	b.n	80005e6 <d_source_name+0x72>
 800061e:	2000      	movs	r0, #0
 8000620:	bd70      	pop	{r4, r5, r6, pc}
 8000622:	bf00      	nop
 8000624:	08017a44 	.word	0x08017a44
 8000628:	08017a50 	.word	0x08017a50

0800062c <d_abi_tags>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	68c3      	ldr	r3, [r0, #12]
 8000630:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 8000632:	781a      	ldrb	r2, [r3, #0]
 8000634:	2a42      	cmp	r2, #66	; 0x42
 8000636:	4604      	mov	r4, r0
 8000638:	460d      	mov	r5, r1
 800063a:	d10f      	bne.n	800065c <d_abi_tags+0x30>
 800063c:	3301      	adds	r3, #1
 800063e:	60e3      	str	r3, [r4, #12]
 8000640:	4620      	mov	r0, r4
 8000642:	f7ff ff97 	bl	8000574 <d_source_name>
 8000646:	462a      	mov	r2, r5
 8000648:	4603      	mov	r3, r0
 800064a:	214b      	movs	r1, #75	; 0x4b
 800064c:	4620      	mov	r0, r4
 800064e:	f7ff fdbf 	bl	80001d0 <d_make_comp>
 8000652:	68e3      	ldr	r3, [r4, #12]
 8000654:	781a      	ldrb	r2, [r3, #0]
 8000656:	2a42      	cmp	r2, #66	; 0x42
 8000658:	4605      	mov	r5, r0
 800065a:	d0ef      	beq.n	800063c <d_abi_tags+0x10>
 800065c:	62e6      	str	r6, [r4, #44]	; 0x2c
 800065e:	4628      	mov	r0, r5
 8000660:	bd70      	pop	{r4, r5, r6, pc}
 8000662:	bf00      	nop

08000664 <d_substitution>:
 8000664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000668:	4605      	mov	r5, r0
 800066a:	68c0      	ldr	r0, [r0, #12]
 800066c:	7803      	ldrb	r3, [r0, #0]
 800066e:	2b53      	cmp	r3, #83	; 0x53
 8000670:	d002      	beq.n	8000678 <d_substitution+0x14>
 8000672:	2000      	movs	r0, #0
 8000674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000678:	1c43      	adds	r3, r0, #1
 800067a:	60eb      	str	r3, [r5, #12]
 800067c:	7842      	ldrb	r2, [r0, #1]
 800067e:	b1a2      	cbz	r2, 80006aa <d_substitution+0x46>
 8000680:	1c83      	adds	r3, r0, #2
 8000682:	60eb      	str	r3, [r5, #12]
 8000684:	7842      	ldrb	r2, [r0, #1]
 8000686:	2a5f      	cmp	r2, #95	; 0x5f
 8000688:	d15a      	bne.n	8000740 <d_substitution+0xdc>
 800068a:	2300      	movs	r3, #0
 800068c:	6a2a      	ldr	r2, [r5, #32]
 800068e:	4293      	cmp	r3, r2
 8000690:	d2ef      	bcs.n	8000672 <d_substitution+0xe>
 8000692:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8000694:	69e9      	ldr	r1, [r5, #28]
 8000696:	3201      	adds	r2, #1
 8000698:	62aa      	str	r2, [r5, #40]	; 0x28
 800069a:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800069e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80006a2:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 80006a6:	2b19      	cmp	r3, #25
 80006a8:	d94f      	bls.n	800074a <d_substitution+0xe6>
 80006aa:	68ab      	ldr	r3, [r5, #8]
 80006ac:	f003 0308 	and.w	r3, r3, #8
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	bf14      	ite	ne
 80006b4:	2401      	movne	r4, #1
 80006b6:	2400      	moveq	r4, #0
 80006b8:	d101      	bne.n	80006be <d_substitution+0x5a>
 80006ba:	2900      	cmp	r1, #0
 80006bc:	d169      	bne.n	8000792 <d_substitution+0x12e>
 80006be:	4b46      	ldr	r3, [pc, #280]	; (80007d8 <d_substitution+0x174>)
 80006c0:	2174      	movs	r1, #116	; 0x74
 80006c2:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
 80006c6:	e003      	b.n	80006d0 <d_substitution+0x6c>
 80006c8:	331c      	adds	r3, #28
 80006ca:	4283      	cmp	r3, r0
 80006cc:	d2d1      	bcs.n	8000672 <d_substitution+0xe>
 80006ce:	7819      	ldrb	r1, [r3, #0]
 80006d0:	428a      	cmp	r2, r1
 80006d2:	d1f9      	bne.n	80006c8 <d_substitution+0x64>
 80006d4:	695e      	ldr	r6, [r3, #20]
 80006d6:	2e00      	cmp	r6, #0
 80006d8:	d07b      	beq.n	80007d2 <d_substitution+0x16e>
 80006da:	696a      	ldr	r2, [r5, #20]
 80006dc:	69a9      	ldr	r1, [r5, #24]
 80006de:	428a      	cmp	r2, r1
 80006e0:	da63      	bge.n	80007aa <d_substitution+0x146>
 80006e2:	eb02 0742 	add.w	r7, r2, r2, lsl #1
 80006e6:	f8d5 e010 	ldr.w	lr, [r5, #16]
 80006ea:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80006ee:	00bf      	lsls	r7, r7, #2
 80006f0:	3201      	adds	r2, #1
 80006f2:	eb1e 0007 	adds.w	r0, lr, r7
 80006f6:	616a      	str	r2, [r5, #20]
 80006f8:	d006      	beq.n	8000708 <d_substitution+0xa4>
 80006fa:	f04f 0c18 	mov.w	ip, #24
 80006fe:	f80e c007 	strb.w	ip, [lr, r7]
 8000702:	6046      	str	r6, [r0, #4]
 8000704:	f8c0 8008 	str.w	r8, [r0, #8]
 8000708:	62e8      	str	r0, [r5, #44]	; 0x2c
 800070a:	2c00      	cmp	r4, #0
 800070c:	d04a      	beq.n	80007a4 <d_substitution+0x140>
 800070e:	68de      	ldr	r6, [r3, #12]
 8000710:	691c      	ldr	r4, [r3, #16]
 8000712:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000714:	4291      	cmp	r1, r2
 8000716:	4423      	add	r3, r4
 8000718:	632b      	str	r3, [r5, #48]	; 0x30
 800071a:	dd41      	ble.n	80007a0 <d_substitution+0x13c>
 800071c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8000720:	6929      	ldr	r1, [r5, #16]
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	3201      	adds	r2, #1
 8000726:	18c8      	adds	r0, r1, r3
 8000728:	616a      	str	r2, [r5, #20]
 800072a:	d003      	beq.n	8000734 <d_substitution+0xd0>
 800072c:	2218      	movs	r2, #24
 800072e:	54ca      	strb	r2, [r1, r3]
 8000730:	6046      	str	r6, [r0, #4]
 8000732:	6084      	str	r4, [r0, #8]
 8000734:	68eb      	ldr	r3, [r5, #12]
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b42      	cmp	r3, #66	; 0x42
 800073a:	d038      	beq.n	80007ae <d_substitution+0x14a>
 800073c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000740:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 8000744:	b2e3      	uxtb	r3, r4
 8000746:	2b09      	cmp	r3, #9
 8000748:	d8ab      	bhi.n	80006a2 <d_substitution+0x3e>
 800074a:	2100      	movs	r1, #0
 800074c:	e00d      	b.n	800076a <d_substitution+0x106>
 800074e:	3b30      	subs	r3, #48	; 0x30
 8000750:	4299      	cmp	r1, r3
 8000752:	d88e      	bhi.n	8000672 <d_substitution+0xe>
 8000754:	68e9      	ldr	r1, [r5, #12]
 8000756:	780a      	ldrb	r2, [r1, #0]
 8000758:	1c48      	adds	r0, r1, #1
 800075a:	b11a      	cbz	r2, 8000764 <d_substitution+0x100>
 800075c:	60e8      	str	r0, [r5, #12]
 800075e:	780a      	ldrb	r2, [r1, #0]
 8000760:	2a5f      	cmp	r2, #95	; 0x5f
 8000762:	d014      	beq.n	800078e <d_substitution+0x12a>
 8000764:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 8000768:	4619      	mov	r1, r3
 800076a:	b2e4      	uxtb	r4, r4
 800076c:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8000770:	2c09      	cmp	r4, #9
 8000772:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
 8000776:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800077a:	d9e8      	bls.n	800074e <d_substitution+0xea>
 800077c:	2819      	cmp	r0, #25
 800077e:	f63f af78 	bhi.w	8000672 <d_substitution+0xe>
 8000782:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8000786:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800078a:	3b37      	subs	r3, #55	; 0x37
 800078c:	e7e0      	b.n	8000750 <d_substitution+0xec>
 800078e:	3301      	adds	r3, #1
 8000790:	e77c      	b.n	800068c <d_substitution+0x28>
 8000792:	68eb      	ldr	r3, [r5, #12]
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	3b43      	subs	r3, #67	; 0x43
 8000798:	2b01      	cmp	r3, #1
 800079a:	bf98      	it	ls
 800079c:	2401      	movls	r4, #1
 800079e:	e78e      	b.n	80006be <d_substitution+0x5a>
 80007a0:	2000      	movs	r0, #0
 80007a2:	e7c7      	b.n	8000734 <d_substitution+0xd0>
 80007a4:	685e      	ldr	r6, [r3, #4]
 80007a6:	689c      	ldr	r4, [r3, #8]
 80007a8:	e7b3      	b.n	8000712 <d_substitution+0xae>
 80007aa:	2000      	movs	r0, #0
 80007ac:	e7ac      	b.n	8000708 <d_substitution+0xa4>
 80007ae:	4601      	mov	r1, r0
 80007b0:	4628      	mov	r0, r5
 80007b2:	f7ff ff3b 	bl	800062c <d_abi_tags>
 80007b6:	2800      	cmp	r0, #0
 80007b8:	f43f af5b 	beq.w	8000672 <d_substitution+0xe>
 80007bc:	6a2b      	ldr	r3, [r5, #32]
 80007be:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80007c0:	4293      	cmp	r3, r2
 80007c2:	dabb      	bge.n	800073c <d_substitution+0xd8>
 80007c4:	69e9      	ldr	r1, [r5, #28]
 80007c6:	1c5a      	adds	r2, r3, #1
 80007c8:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 80007cc:	622a      	str	r2, [r5, #32]
 80007ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80007d2:	69a9      	ldr	r1, [r5, #24]
 80007d4:	696a      	ldr	r2, [r5, #20]
 80007d6:	e798      	b.n	800070a <d_substitution+0xa6>
 80007d8:	08016d08 	.word	0x08016d08

080007dc <d_call_offset>:
 80007dc:	b538      	push	{r3, r4, r5, lr}
 80007de:	4604      	mov	r4, r0
 80007e0:	b929      	cbnz	r1, 80007ee <d_call_offset+0x12>
 80007e2:	68c3      	ldr	r3, [r0, #12]
 80007e4:	781a      	ldrb	r2, [r3, #0]
 80007e6:	b132      	cbz	r2, 80007f6 <d_call_offset+0x1a>
 80007e8:	1c5a      	adds	r2, r3, #1
 80007ea:	60c2      	str	r2, [r0, #12]
 80007ec:	7819      	ldrb	r1, [r3, #0]
 80007ee:	2968      	cmp	r1, #104	; 0x68
 80007f0:	d019      	beq.n	8000826 <d_call_offset+0x4a>
 80007f2:	2976      	cmp	r1, #118	; 0x76
 80007f4:	d001      	beq.n	80007fa <d_call_offset+0x1e>
 80007f6:	2000      	movs	r0, #0
 80007f8:	bd38      	pop	{r3, r4, r5, pc}
 80007fa:	f104 050c 	add.w	r5, r4, #12
 80007fe:	4628      	mov	r0, r5
 8000800:	f7ff fe38 	bl	8000474 <d_number.isra.0>
 8000804:	68e3      	ldr	r3, [r4, #12]
 8000806:	781a      	ldrb	r2, [r3, #0]
 8000808:	2a5f      	cmp	r2, #95	; 0x5f
 800080a:	d1f4      	bne.n	80007f6 <d_call_offset+0x1a>
 800080c:	3301      	adds	r3, #1
 800080e:	60e3      	str	r3, [r4, #12]
 8000810:	4628      	mov	r0, r5
 8000812:	f7ff fe2f 	bl	8000474 <d_number.isra.0>
 8000816:	68e3      	ldr	r3, [r4, #12]
 8000818:	781a      	ldrb	r2, [r3, #0]
 800081a:	2a5f      	cmp	r2, #95	; 0x5f
 800081c:	d1eb      	bne.n	80007f6 <d_call_offset+0x1a>
 800081e:	3301      	adds	r3, #1
 8000820:	60e3      	str	r3, [r4, #12]
 8000822:	2001      	movs	r0, #1
 8000824:	bd38      	pop	{r3, r4, r5, pc}
 8000826:	f104 000c 	add.w	r0, r4, #12
 800082a:	f7ff fe23 	bl	8000474 <d_number.isra.0>
 800082e:	e7f2      	b.n	8000816 <d_call_offset+0x3a>

08000830 <d_lookup_template_argument.isra.6>:
 8000830:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 8000834:	b19b      	cbz	r3, 800085e <d_lookup_template_argument.isra.6+0x2e>
 8000836:	680a      	ldr	r2, [r1, #0]
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	2a00      	cmp	r2, #0
 800083c:	689b      	ldr	r3, [r3, #8]
 800083e:	db09      	blt.n	8000854 <d_lookup_template_argument.isra.6+0x24>
 8000840:	b923      	cbnz	r3, 800084c <d_lookup_template_argument.isra.6+0x1c>
 8000842:	e007      	b.n	8000854 <d_lookup_template_argument.isra.6+0x24>
 8000844:	b142      	cbz	r2, 8000858 <d_lookup_template_argument.isra.6+0x28>
 8000846:	689b      	ldr	r3, [r3, #8]
 8000848:	3a01      	subs	r2, #1
 800084a:	b11b      	cbz	r3, 8000854 <d_lookup_template_argument.isra.6+0x24>
 800084c:	7819      	ldrb	r1, [r3, #0]
 800084e:	292f      	cmp	r1, #47	; 0x2f
 8000850:	d0f8      	beq.n	8000844 <d_lookup_template_argument.isra.6+0x14>
 8000852:	2300      	movs	r3, #0
 8000854:	4618      	mov	r0, r3
 8000856:	4770      	bx	lr
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	4618      	mov	r0, r3
 800085c:	4770      	bx	lr
 800085e:	2201      	movs	r2, #1
 8000860:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
 8000864:	e7f6      	b.n	8000854 <d_lookup_template_argument.isra.6+0x24>
 8000866:	bf00      	nop

08000868 <d_find_pack>:
 8000868:	2900      	cmp	r1, #0
 800086a:	d041      	beq.n	80008f0 <d_find_pack+0x88>
 800086c:	b538      	push	{r3, r4, r5, lr}
 800086e:	4605      	mov	r5, r0
 8000870:	460c      	mov	r4, r1
 8000872:	7823      	ldrb	r3, [r4, #0]
 8000874:	2b4b      	cmp	r3, #75	; 0x4b
 8000876:	d827      	bhi.n	80008c8 <d_find_pack+0x60>
 8000878:	e8df f003 	tbb	[pc, r3]
 800087c:	2626262e 	.word	0x2626262e
 8000880:	2b2e3026 	.word	0x2b2e3026
 8000884:	2626262b 	.word	0x2626262b
 8000888:	26262626 	.word	0x26262626
 800088c:	26262626 	.word	0x26262626
 8000890:	26262626 	.word	0x26262626
 8000894:	2626262e 	.word	0x2626262e
 8000898:	26262626 	.word	0x26262626
 800089c:	26262626 	.word	0x26262626
 80008a0:	2e262626 	.word	0x2e262626
 80008a4:	26262626 	.word	0x26262626
 80008a8:	2626262e 	.word	0x2626262e
 80008ac:	262b2e26 	.word	0x262b2e26
 80008b0:	26262626 	.word	0x26262626
 80008b4:	26262626 	.word	0x26262626
 80008b8:	26262626 	.word	0x26262626
 80008bc:	26262e2e 	.word	0x26262e2e
 80008c0:	2e2e2e26 	.word	0x2e2e2e26
 80008c4:	2e2e2626 	.word	0x2e2e2626
 80008c8:	6861      	ldr	r1, [r4, #4]
 80008ca:	4628      	mov	r0, r5
 80008cc:	f7ff ffcc 	bl	8000868 <d_find_pack>
 80008d0:	b918      	cbnz	r0, 80008da <d_find_pack+0x72>
 80008d2:	68a4      	ldr	r4, [r4, #8]
 80008d4:	2c00      	cmp	r4, #0
 80008d6:	d1cc      	bne.n	8000872 <d_find_pack+0xa>
 80008d8:	2000      	movs	r0, #0
 80008da:	bd38      	pop	{r3, r4, r5, pc}
 80008dc:	1d21      	adds	r1, r4, #4
 80008de:	4628      	mov	r0, r5
 80008e0:	f7ff ffa6 	bl	8000830 <d_lookup_template_argument.isra.6>
 80008e4:	2800      	cmp	r0, #0
 80008e6:	d0f7      	beq.n	80008d8 <d_find_pack+0x70>
 80008e8:	7803      	ldrb	r3, [r0, #0]
 80008ea:	2b2f      	cmp	r3, #47	; 0x2f
 80008ec:	d1f4      	bne.n	80008d8 <d_find_pack+0x70>
 80008ee:	bd38      	pop	{r3, r4, r5, pc}
 80008f0:	2000      	movs	r0, #0
 80008f2:	4770      	bx	lr

080008f4 <d_growable_string_callback_adapter>:
 80008f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008f6:	4615      	mov	r5, r2
 80008f8:	6852      	ldr	r2, [r2, #4]
 80008fa:	68ac      	ldr	r4, [r5, #8]
 80008fc:	1c4b      	adds	r3, r1, #1
 80008fe:	4413      	add	r3, r2
 8000900:	42a3      	cmp	r3, r4
 8000902:	b083      	sub	sp, #12
 8000904:	460e      	mov	r6, r1
 8000906:	4607      	mov	r7, r0
 8000908:	d813      	bhi.n	8000932 <d_growable_string_callback_adapter+0x3e>
 800090a:	68ec      	ldr	r4, [r5, #12]
 800090c:	b10c      	cbz	r4, 8000912 <d_growable_string_callback_adapter+0x1e>
 800090e:	b003      	add	sp, #12
 8000910:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000912:	e895 0009 	ldmia.w	r5, {r0, r3}
 8000916:	4632      	mov	r2, r6
 8000918:	4639      	mov	r1, r7
 800091a:	4418      	add	r0, r3
 800091c:	f011 fbd5 	bl	80120ca <memcpy>
 8000920:	682b      	ldr	r3, [r5, #0]
 8000922:	686a      	ldr	r2, [r5, #4]
 8000924:	4433      	add	r3, r6
 8000926:	549c      	strb	r4, [r3, r2]
 8000928:	686b      	ldr	r3, [r5, #4]
 800092a:	441e      	add	r6, r3
 800092c:	606e      	str	r6, [r5, #4]
 800092e:	b003      	add	sp, #12
 8000930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000932:	68ea      	ldr	r2, [r5, #12]
 8000934:	2a00      	cmp	r2, #0
 8000936:	d1ea      	bne.n	800090e <d_growable_string_callback_adapter+0x1a>
 8000938:	b91c      	cbnz	r4, 8000942 <d_growable_string_callback_adapter+0x4e>
 800093a:	2b02      	cmp	r3, #2
 800093c:	f04f 0402 	mov.w	r4, #2
 8000940:	d902      	bls.n	8000948 <d_growable_string_callback_adapter+0x54>
 8000942:	0064      	lsls	r4, r4, #1
 8000944:	42a3      	cmp	r3, r4
 8000946:	d8fc      	bhi.n	8000942 <d_growable_string_callback_adapter+0x4e>
 8000948:	4621      	mov	r1, r4
 800094a:	6828      	ldr	r0, [r5, #0]
 800094c:	f011 fcbe 	bl	80122cc <realloc>
 8000950:	b110      	cbz	r0, 8000958 <d_growable_string_callback_adapter+0x64>
 8000952:	6028      	str	r0, [r5, #0]
 8000954:	60ac      	str	r4, [r5, #8]
 8000956:	e7d8      	b.n	800090a <d_growable_string_callback_adapter+0x16>
 8000958:	9001      	str	r0, [sp, #4]
 800095a:	6828      	ldr	r0, [r5, #0]
 800095c:	f011 f990 	bl	8011c80 <free>
 8000960:	9b01      	ldr	r3, [sp, #4]
 8000962:	602b      	str	r3, [r5, #0]
 8000964:	2201      	movs	r2, #1
 8000966:	606b      	str	r3, [r5, #4]
 8000968:	60ab      	str	r3, [r5, #8]
 800096a:	60ea      	str	r2, [r5, #12]
 800096c:	e7cf      	b.n	800090e <d_growable_string_callback_adapter+0x1a>
 800096e:	bf00      	nop

08000970 <d_append_num>:
 8000970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000974:	b088      	sub	sp, #32
 8000976:	460a      	mov	r2, r1
 8000978:	4604      	mov	r4, r0
 800097a:	491b      	ldr	r1, [pc, #108]	; (80009e8 <d_append_num+0x78>)
 800097c:	a801      	add	r0, sp, #4
 800097e:	f011 fe81 	bl	8012684 <sprintf>
 8000982:	a801      	add	r0, sp, #4
 8000984:	f005 ffd6 	bl	8006934 <strlen>
 8000988:	b350      	cbz	r0, 80009e0 <d_append_num+0x70>
 800098a:	ad01      	add	r5, sp, #4
 800098c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8000990:	182f      	adds	r7, r5, r0
 8000992:	f04f 0800 	mov.w	r8, #0
 8000996:	e009      	b.n	80009ac <d_append_num+0x3c>
 8000998:	460b      	mov	r3, r1
 800099a:	42bd      	cmp	r5, r7
 800099c:	f101 0101 	add.w	r1, r1, #1
 80009a0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80009a4:	54e6      	strb	r6, [r4, r3]
 80009a6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80009aa:	d019      	beq.n	80009e0 <d_append_num+0x70>
 80009ac:	29ff      	cmp	r1, #255	; 0xff
 80009ae:	f815 6b01 	ldrb.w	r6, [r5], #1
 80009b2:	d1f1      	bne.n	8000998 <d_append_num+0x28>
 80009b4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80009b8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80009bc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80009c0:	4620      	mov	r0, r4
 80009c2:	4798      	blx	r3
 80009c4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80009c8:	3301      	adds	r3, #1
 80009ca:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80009ce:	2300      	movs	r3, #0
 80009d0:	2101      	movs	r1, #1
 80009d2:	42bd      	cmp	r5, r7
 80009d4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80009d8:	54e6      	strb	r6, [r4, r3]
 80009da:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80009de:	d1e5      	bne.n	80009ac <d_append_num+0x3c>
 80009e0:	b008      	add	sp, #32
 80009e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80009e6:	bf00      	nop
 80009e8:	08017a68 	.word	0x08017a68

080009ec <d_exprlist>:
 80009ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009f0:	68c3      	ldr	r3, [r0, #12]
 80009f2:	781d      	ldrb	r5, [r3, #0]
 80009f4:	b083      	sub	sp, #12
 80009f6:	2200      	movs	r2, #0
 80009f8:	428d      	cmp	r5, r1
 80009fa:	4604      	mov	r4, r0
 80009fc:	9201      	str	r2, [sp, #4]
 80009fe:	f000 81c6 	beq.w	8000d8e <d_exprlist+0x3a2>
 8000a02:	4688      	mov	r8, r1
 8000a04:	f8df 949c 	ldr.w	r9, [pc, #1180]	; 8000ea4 <d_exprlist+0x4b8>
 8000a08:	ae01      	add	r6, sp, #4
 8000a0a:	e023      	b.n	8000a54 <d_exprlist+0x68>
 8000a0c:	2a66      	cmp	r2, #102	; 0x66
 8000a0e:	d04c      	beq.n	8000aaa <d_exprlist+0xbe>
 8000a10:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8000a14:	2909      	cmp	r1, #9
 8000a16:	f200 8217 	bhi.w	8000e48 <d_exprlist+0x45c>
 8000a1a:	4620      	mov	r0, r4
 8000a1c:	f001 fb10 	bl	8002040 <d_unqualified_name>
 8000a20:	4605      	mov	r5, r0
 8000a22:	2800      	cmp	r0, #0
 8000a24:	f000 8170 	beq.w	8000d08 <d_exprlist+0x31c>
 8000a28:	68e3      	ldr	r3, [r4, #12]
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b49      	cmp	r3, #73	; 0x49
 8000a2e:	f000 8092 	beq.w	8000b56 <d_exprlist+0x16a>
 8000a32:	6367      	str	r7, [r4, #52]	; 0x34
 8000a34:	462a      	mov	r2, r5
 8000a36:	2300      	movs	r3, #0
 8000a38:	212e      	movs	r1, #46	; 0x2e
 8000a3a:	4620      	mov	r0, r4
 8000a3c:	f7ff fbc8 	bl	80001d0 <d_make_comp>
 8000a40:	6030      	str	r0, [r6, #0]
 8000a42:	2800      	cmp	r0, #0
 8000a44:	d05b      	beq.n	8000afe <d_exprlist+0x112>
 8000a46:	68e3      	ldr	r3, [r4, #12]
 8000a48:	781a      	ldrb	r2, [r3, #0]
 8000a4a:	4542      	cmp	r2, r8
 8000a4c:	f100 0608 	add.w	r6, r0, #8
 8000a50:	f000 8107 	beq.w	8000c62 <d_exprlist+0x276>
 8000a54:	2501      	movs	r5, #1
 8000a56:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8000a58:	6365      	str	r5, [r4, #52]	; 0x34
 8000a5a:	781a      	ldrb	r2, [r3, #0]
 8000a5c:	2a4c      	cmp	r2, #76	; 0x4c
 8000a5e:	d047      	beq.n	8000af0 <d_exprlist+0x104>
 8000a60:	2a54      	cmp	r2, #84	; 0x54
 8000a62:	d051      	beq.n	8000b08 <d_exprlist+0x11c>
 8000a64:	2a73      	cmp	r2, #115	; 0x73
 8000a66:	d1d1      	bne.n	8000a0c <d_exprlist+0x20>
 8000a68:	785a      	ldrb	r2, [r3, #1]
 8000a6a:	2a72      	cmp	r2, #114	; 0x72
 8000a6c:	f000 80e2 	beq.w	8000c34 <d_exprlist+0x248>
 8000a70:	2a70      	cmp	r2, #112	; 0x70
 8000a72:	f000 80fd 	beq.w	8000c70 <d_exprlist+0x284>
 8000a76:	4620      	mov	r0, r4
 8000a78:	f001 fa22 	bl	8001ec0 <d_operator_name>
 8000a7c:	4605      	mov	r5, r0
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	f000 8142 	beq.w	8000d08 <d_exprlist+0x31c>
 8000a84:	782b      	ldrb	r3, [r5, #0]
 8000a86:	2b31      	cmp	r3, #49	; 0x31
 8000a88:	d043      	beq.n	8000b12 <d_exprlist+0x126>
 8000a8a:	2b32      	cmp	r3, #50	; 0x32
 8000a8c:	d05c      	beq.n	8000b48 <d_exprlist+0x15c>
 8000a8e:	2b33      	cmp	r3, #51	; 0x33
 8000a90:	d17b      	bne.n	8000b8a <d_exprlist+0x19e>
 8000a92:	68e3      	ldr	r3, [r4, #12]
 8000a94:	781a      	ldrb	r2, [r3, #0]
 8000a96:	2a5f      	cmp	r2, #95	; 0x5f
 8000a98:	f040 80c1 	bne.w	8000c1e <d_exprlist+0x232>
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	60e3      	str	r3, [r4, #12]
 8000aa0:	2145      	movs	r1, #69	; 0x45
 8000aa2:	4620      	mov	r0, r4
 8000aa4:	f7ff ffa2 	bl	80009ec <d_exprlist>
 8000aa8:	e0bc      	b.n	8000c24 <d_exprlist+0x238>
 8000aaa:	785a      	ldrb	r2, [r3, #1]
 8000aac:	2a70      	cmp	r2, #112	; 0x70
 8000aae:	d1e2      	bne.n	8000a76 <d_exprlist+0x8a>
 8000ab0:	1c9a      	adds	r2, r3, #2
 8000ab2:	60e2      	str	r2, [r4, #12]
 8000ab4:	789a      	ldrb	r2, [r3, #2]
 8000ab6:	2a54      	cmp	r2, #84	; 0x54
 8000ab8:	d069      	beq.n	8000b8e <d_exprlist+0x1a2>
 8000aba:	4620      	mov	r0, r4
 8000abc:	f7ff fd1c 	bl	80004f8 <d_compact_number>
 8000ac0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8000ac4:	4298      	cmp	r0, r3
 8000ac6:	d060      	beq.n	8000b8a <d_exprlist+0x19e>
 8000ac8:	1c43      	adds	r3, r0, #1
 8000aca:	d05e      	beq.n	8000b8a <d_exprlist+0x19e>
 8000acc:	3001      	adds	r0, #1
 8000ace:	6963      	ldr	r3, [r4, #20]
 8000ad0:	69a2      	ldr	r2, [r4, #24]
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	da59      	bge.n	8000b8a <d_exprlist+0x19e>
 8000ad6:	6922      	ldr	r2, [r4, #16]
 8000ad8:	1c59      	adds	r1, r3, #1
 8000ada:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000ade:	eb12 0583 	adds.w	r5, r2, r3, lsl #2
 8000ae2:	6161      	str	r1, [r4, #20]
 8000ae4:	d051      	beq.n	8000b8a <d_exprlist+0x19e>
 8000ae6:	2106      	movs	r1, #6
 8000ae8:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
 8000aec:	6068      	str	r0, [r5, #4]
 8000aee:	e7a0      	b.n	8000a32 <d_exprlist+0x46>
 8000af0:	4620      	mov	r0, r4
 8000af2:	f001 fef3 	bl	80028dc <d_expr_primary>
 8000af6:	4605      	mov	r5, r0
 8000af8:	6367      	str	r7, [r4, #52]	; 0x34
 8000afa:	2d00      	cmp	r5, #0
 8000afc:	d19a      	bne.n	8000a34 <d_exprlist+0x48>
 8000afe:	2500      	movs	r5, #0
 8000b00:	4628      	mov	r0, r5
 8000b02:	b003      	add	sp, #12
 8000b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b08:	4620      	mov	r0, r4
 8000b0a:	f7ff fd11 	bl	8000530 <d_template_param>
 8000b0e:	4605      	mov	r5, r0
 8000b10:	e7f2      	b.n	8000af8 <d_exprlist+0x10c>
 8000b12:	f8d5 b004 	ldr.w	fp, [r5, #4]
 8000b16:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b18:	f8db 2008 	ldr.w	r2, [fp, #8]
 8000b1c:	f8db a000 	ldr.w	sl, [fp]
 8000b20:	3a02      	subs	r2, #2
 8000b22:	4413      	add	r3, r2
 8000b24:	6323      	str	r3, [r4, #48]	; 0x30
 8000b26:	4650      	mov	r0, sl
 8000b28:	4649      	mov	r1, r9
 8000b2a:	f005 fef9 	bl	8006920 <strcmp>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	f000 80e6 	beq.w	8000d00 <d_exprlist+0x314>
 8000b34:	f8db 300c 	ldr.w	r3, [fp, #12]
 8000b38:	2b03      	cmp	r3, #3
 8000b3a:	d826      	bhi.n	8000b8a <d_exprlist+0x19e>
 8000b3c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8000b40:	0135002b 	.word	0x0135002b
 8000b44:	00a50033 	.word	0x00a50033
 8000b48:	686b      	ldr	r3, [r5, #4]
 8000b4a:	2b03      	cmp	r3, #3
 8000b4c:	d81d      	bhi.n	8000b8a <d_exprlist+0x19e>
 8000b4e:	e8df f003 	tbb	[pc, r3]
 8000b52:	6622      	.short	0x6622
 8000b54:	1c1c      	.short	0x1c1c
 8000b56:	4620      	mov	r0, r4
 8000b58:	f000 fc04 	bl	8001364 <d_template_args>
 8000b5c:	462a      	mov	r2, r5
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2104      	movs	r1, #4
 8000b62:	4620      	mov	r0, r4
 8000b64:	f7ff fb34 	bl	80001d0 <d_make_comp>
 8000b68:	4605      	mov	r5, r0
 8000b6a:	e7c5      	b.n	8000af8 <d_exprlist+0x10c>
 8000b6c:	2a74      	cmp	r2, #116	; 0x74
 8000b6e:	d182      	bne.n	8000a76 <d_exprlist+0x8a>
 8000b70:	785b      	ldrb	r3, [r3, #1]
 8000b72:	2b6c      	cmp	r3, #108	; 0x6c
 8000b74:	f47f af7f 	bne.w	8000a76 <d_exprlist+0x8a>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	f000 fdb9 	bl	80016f0 <d_type>
 8000b7e:	68e3      	ldr	r3, [r4, #12]
 8000b80:	785a      	ldrb	r2, [r3, #1]
 8000b82:	4605      	mov	r5, r0
 8000b84:	2a00      	cmp	r2, #0
 8000b86:	f040 8169 	bne.w	8000e5c <d_exprlist+0x470>
 8000b8a:	6367      	str	r7, [r4, #52]	; 0x34
 8000b8c:	e7b7      	b.n	8000afe <d_exprlist+0x112>
 8000b8e:	3303      	adds	r3, #3
 8000b90:	60e3      	str	r3, [r4, #12]
 8000b92:	2000      	movs	r0, #0
 8000b94:	e79b      	b.n	8000ace <d_exprlist+0xe2>
 8000b96:	462a      	mov	r2, r5
 8000b98:	2300      	movs	r3, #0
 8000b9a:	2135      	movs	r1, #53	; 0x35
 8000b9c:	4620      	mov	r0, r4
 8000b9e:	f7ff fb17 	bl	80001d0 <d_make_comp>
 8000ba2:	4605      	mov	r5, r0
 8000ba4:	e7a8      	b.n	8000af8 <d_exprlist+0x10c>
 8000ba6:	f1ba 0f00 	cmp.w	sl, #0
 8000baa:	d0ee      	beq.n	8000b8a <d_exprlist+0x19e>
 8000bac:	686b      	ldr	r3, [r5, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	785a      	ldrb	r2, [r3, #1]
 8000bb2:	2a63      	cmp	r2, #99	; 0x63
 8000bb4:	f000 80d2 	beq.w	8000d5c <d_exprlist+0x370>
 8000bb8:	f89a 3000 	ldrb.w	r3, [sl]
 8000bbc:	2b66      	cmp	r3, #102	; 0x66
 8000bbe:	f000 80ef 	beq.w	8000da0 <d_exprlist+0x3b4>
 8000bc2:	4620      	mov	r0, r4
 8000bc4:	f000 f970 	bl	8000ea8 <d_expression_1>
 8000bc8:	4683      	mov	fp, r0
 8000bca:	49b1      	ldr	r1, [pc, #708]	; (8000e90 <d_exprlist+0x4a4>)
 8000bcc:	4650      	mov	r0, sl
 8000bce:	f005 fea7 	bl	8006920 <strcmp>
 8000bd2:	2800      	cmp	r0, #0
 8000bd4:	f000 809d 	beq.w	8000d12 <d_exprlist+0x326>
 8000bd8:	49ae      	ldr	r1, [pc, #696]	; (8000e94 <d_exprlist+0x4a8>)
 8000bda:	4650      	mov	r0, sl
 8000bdc:	f005 fea0 	bl	8006920 <strcmp>
 8000be0:	b130      	cbz	r0, 8000bf0 <d_exprlist+0x204>
 8000be2:	4650      	mov	r0, sl
 8000be4:	49ac      	ldr	r1, [pc, #688]	; (8000e98 <d_exprlist+0x4ac>)
 8000be6:	f005 fe9b 	bl	8006920 <strcmp>
 8000bea:	2800      	cmp	r0, #0
 8000bec:	f040 8083 	bne.w	8000cf6 <d_exprlist+0x30a>
 8000bf0:	4620      	mov	r0, r4
 8000bf2:	f001 fa25 	bl	8002040 <d_unqualified_name>
 8000bf6:	68e3      	ldr	r3, [r4, #12]
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	2b49      	cmp	r3, #73	; 0x49
 8000bfc:	4682      	mov	sl, r0
 8000bfe:	f000 80e9 	beq.w	8000dd4 <d_exprlist+0x3e8>
 8000c02:	4653      	mov	r3, sl
 8000c04:	465a      	mov	r2, fp
 8000c06:	2138      	movs	r1, #56	; 0x38
 8000c08:	4620      	mov	r0, r4
 8000c0a:	f7ff fae1 	bl	80001d0 <d_make_comp>
 8000c0e:	462a      	mov	r2, r5
 8000c10:	4603      	mov	r3, r0
 8000c12:	2137      	movs	r1, #55	; 0x37
 8000c14:	4620      	mov	r0, r4
 8000c16:	f7ff fadb 	bl	80001d0 <d_make_comp>
 8000c1a:	4605      	mov	r5, r0
 8000c1c:	e76c      	b.n	8000af8 <d_exprlist+0x10c>
 8000c1e:	4620      	mov	r0, r4
 8000c20:	f000 f942 	bl	8000ea8 <d_expression_1>
 8000c24:	4603      	mov	r3, r0
 8000c26:	462a      	mov	r2, r5
 8000c28:	2136      	movs	r1, #54	; 0x36
 8000c2a:	4620      	mov	r0, r4
 8000c2c:	f7ff fad0 	bl	80001d0 <d_make_comp>
 8000c30:	4605      	mov	r5, r0
 8000c32:	e761      	b.n	8000af8 <d_exprlist+0x10c>
 8000c34:	3302      	adds	r3, #2
 8000c36:	60e3      	str	r3, [r4, #12]
 8000c38:	4620      	mov	r0, r4
 8000c3a:	f000 fd59 	bl	80016f0 <d_type>
 8000c3e:	4682      	mov	sl, r0
 8000c40:	4620      	mov	r0, r4
 8000c42:	f001 f9fd 	bl	8002040 <d_unqualified_name>
 8000c46:	68e3      	ldr	r3, [r4, #12]
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2b49      	cmp	r3, #73	; 0x49
 8000c4c:	4683      	mov	fp, r0
 8000c4e:	f000 8093 	beq.w	8000d78 <d_exprlist+0x38c>
 8000c52:	4603      	mov	r3, r0
 8000c54:	4629      	mov	r1, r5
 8000c56:	4652      	mov	r2, sl
 8000c58:	4620      	mov	r0, r4
 8000c5a:	f7ff fab9 	bl	80001d0 <d_make_comp>
 8000c5e:	4605      	mov	r5, r0
 8000c60:	e74a      	b.n	8000af8 <d_exprlist+0x10c>
 8000c62:	9d01      	ldr	r5, [sp, #4]
 8000c64:	3301      	adds	r3, #1
 8000c66:	4628      	mov	r0, r5
 8000c68:	60e3      	str	r3, [r4, #12]
 8000c6a:	b003      	add	sp, #12
 8000c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c70:	3302      	adds	r3, #2
 8000c72:	60e3      	str	r3, [r4, #12]
 8000c74:	4620      	mov	r0, r4
 8000c76:	f000 f917 	bl	8000ea8 <d_expression_1>
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	214a      	movs	r1, #74	; 0x4a
 8000c80:	4620      	mov	r0, r4
 8000c82:	f7ff faa5 	bl	80001d0 <d_make_comp>
 8000c86:	4605      	mov	r5, r0
 8000c88:	e736      	b.n	8000af8 <d_exprlist+0x10c>
 8000c8a:	f1ba 0f00 	cmp.w	sl, #0
 8000c8e:	f43f af7c 	beq.w	8000b8a <d_exprlist+0x19e>
 8000c92:	4982      	ldr	r1, [pc, #520]	; (8000e9c <d_exprlist+0x4b0>)
 8000c94:	4650      	mov	r0, sl
 8000c96:	f005 fe43 	bl	8006920 <strcmp>
 8000c9a:	2800      	cmp	r0, #0
 8000c9c:	d03f      	beq.n	8000d1e <d_exprlist+0x332>
 8000c9e:	f89a 3000 	ldrb.w	r3, [sl]
 8000ca2:	2b66      	cmp	r3, #102	; 0x66
 8000ca4:	f000 80bd 	beq.w	8000e22 <d_exprlist+0x436>
 8000ca8:	2b6e      	cmp	r3, #110	; 0x6e
 8000caa:	f47f af6e 	bne.w	8000b8a <d_exprlist+0x19e>
 8000cae:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8000cb2:	2b77      	cmp	r3, #119	; 0x77
 8000cb4:	d002      	beq.n	8000cbc <d_exprlist+0x2d0>
 8000cb6:	2b61      	cmp	r3, #97	; 0x61
 8000cb8:	f47f af67 	bne.w	8000b8a <d_exprlist+0x19e>
 8000cbc:	215f      	movs	r1, #95	; 0x5f
 8000cbe:	4620      	mov	r0, r4
 8000cc0:	f7ff fe94 	bl	80009ec <d_exprlist>
 8000cc4:	4682      	mov	sl, r0
 8000cc6:	4620      	mov	r0, r4
 8000cc8:	f000 fd12 	bl	80016f0 <d_type>
 8000ccc:	68e3      	ldr	r3, [r4, #12]
 8000cce:	781a      	ldrb	r2, [r3, #0]
 8000cd0:	2a45      	cmp	r2, #69	; 0x45
 8000cd2:	4683      	mov	fp, r0
 8000cd4:	f000 80a1 	beq.w	8000e1a <d_exprlist+0x42e>
 8000cd8:	2a70      	cmp	r2, #112	; 0x70
 8000cda:	f000 80a6 	beq.w	8000e2a <d_exprlist+0x43e>
 8000cde:	2a69      	cmp	r2, #105	; 0x69
 8000ce0:	f47f af53 	bne.w	8000b8a <d_exprlist+0x19e>
 8000ce4:	785b      	ldrb	r3, [r3, #1]
 8000ce6:	2b6c      	cmp	r3, #108	; 0x6c
 8000ce8:	f47f af4f 	bne.w	8000b8a <d_exprlist+0x19e>
 8000cec:	4620      	mov	r0, r4
 8000cee:	f000 f8db 	bl	8000ea8 <d_expression_1>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	e01f      	b.n	8000d36 <d_exprlist+0x34a>
 8000cf6:	4620      	mov	r0, r4
 8000cf8:	f000 f8d6 	bl	8000ea8 <d_expression_1>
 8000cfc:	4682      	mov	sl, r0
 8000cfe:	e780      	b.n	8000c02 <d_exprlist+0x216>
 8000d00:	4620      	mov	r0, r4
 8000d02:	f000 fcf5 	bl	80016f0 <d_type>
 8000d06:	e78d      	b.n	8000c24 <d_exprlist+0x238>
 8000d08:	4628      	mov	r0, r5
 8000d0a:	6367      	str	r7, [r4, #52]	; 0x34
 8000d0c:	b003      	add	sp, #12
 8000d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d12:	2145      	movs	r1, #69	; 0x45
 8000d14:	4620      	mov	r0, r4
 8000d16:	f7ff fe69 	bl	80009ec <d_exprlist>
 8000d1a:	4682      	mov	sl, r0
 8000d1c:	e771      	b.n	8000c02 <d_exprlist+0x216>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	f000 f8c2 	bl	8000ea8 <d_expression_1>
 8000d24:	4682      	mov	sl, r0
 8000d26:	4620      	mov	r0, r4
 8000d28:	f000 f8be 	bl	8000ea8 <d_expression_1>
 8000d2c:	4683      	mov	fp, r0
 8000d2e:	4620      	mov	r0, r4
 8000d30:	f000 f8ba 	bl	8000ea8 <d_expression_1>
 8000d34:	4603      	mov	r3, r0
 8000d36:	465a      	mov	r2, fp
 8000d38:	213b      	movs	r1, #59	; 0x3b
 8000d3a:	4620      	mov	r0, r4
 8000d3c:	f7ff fa48 	bl	80001d0 <d_make_comp>
 8000d40:	4652      	mov	r2, sl
 8000d42:	4603      	mov	r3, r0
 8000d44:	213a      	movs	r1, #58	; 0x3a
 8000d46:	4620      	mov	r0, r4
 8000d48:	f7ff fa42 	bl	80001d0 <d_make_comp>
 8000d4c:	462a      	mov	r2, r5
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2139      	movs	r1, #57	; 0x39
 8000d52:	4620      	mov	r0, r4
 8000d54:	f7ff fa3c 	bl	80001d0 <d_make_comp>
 8000d58:	4605      	mov	r5, r0
 8000d5a:	e6cd      	b.n	8000af8 <d_exprlist+0x10c>
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 8000d62:	2a01      	cmp	r2, #1
 8000d64:	d903      	bls.n	8000d6e <d_exprlist+0x382>
 8000d66:	3b72      	subs	r3, #114	; 0x72
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	f63f af25 	bhi.w	8000bb8 <d_exprlist+0x1cc>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	f000 fcbe 	bl	80016f0 <d_type>
 8000d74:	4683      	mov	fp, r0
 8000d76:	e728      	b.n	8000bca <d_exprlist+0x1de>
 8000d78:	4620      	mov	r0, r4
 8000d7a:	f000 faf3 	bl	8001364 <d_template_args>
 8000d7e:	465a      	mov	r2, fp
 8000d80:	4603      	mov	r3, r0
 8000d82:	2104      	movs	r1, #4
 8000d84:	4620      	mov	r0, r4
 8000d86:	f7ff fa23 	bl	80001d0 <d_make_comp>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	e762      	b.n	8000c54 <d_exprlist+0x268>
 8000d8e:	3301      	adds	r3, #1
 8000d90:	60c3      	str	r3, [r0, #12]
 8000d92:	212e      	movs	r1, #46	; 0x2e
 8000d94:	4613      	mov	r3, r2
 8000d96:	b003      	add	sp, #12
 8000d98:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d9c:	f7ff ba18 	b.w	80001d0 <d_make_comp>
 8000da0:	4620      	mov	r0, r4
 8000da2:	f001 f88d 	bl	8001ec0 <d_operator_name>
 8000da6:	4683      	mov	fp, r0
 8000da8:	e70f      	b.n	8000bca <d_exprlist+0x1de>
 8000daa:	f1ba 0f00 	cmp.w	sl, #0
 8000dae:	f43f af36 	beq.w	8000c1e <d_exprlist+0x232>
 8000db2:	f89a 3000 	ldrb.w	r3, [sl]
 8000db6:	2b70      	cmp	r3, #112	; 0x70
 8000db8:	d017      	beq.n	8000dea <d_exprlist+0x3fe>
 8000dba:	2b6d      	cmp	r3, #109	; 0x6d
 8000dbc:	d015      	beq.n	8000dea <d_exprlist+0x3fe>
 8000dbe:	4650      	mov	r0, sl
 8000dc0:	4937      	ldr	r1, [pc, #220]	; (8000ea0 <d_exprlist+0x4b4>)
 8000dc2:	f005 fdad 	bl	8006920 <strcmp>
 8000dc6:	2800      	cmp	r0, #0
 8000dc8:	f47f af29 	bne.w	8000c1e <d_exprlist+0x232>
 8000dcc:	4620      	mov	r0, r4
 8000dce:	f000 fa65 	bl	800129c <d_template_args_1>
 8000dd2:	e727      	b.n	8000c24 <d_exprlist+0x238>
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	f000 fac5 	bl	8001364 <d_template_args>
 8000dda:	4652      	mov	r2, sl
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2104      	movs	r1, #4
 8000de0:	4620      	mov	r0, r4
 8000de2:	f7ff f9f5 	bl	80001d0 <d_make_comp>
 8000de6:	4682      	mov	sl, r0
 8000de8:	e70b      	b.n	8000c02 <d_exprlist+0x216>
 8000dea:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d1e5      	bne.n	8000dbe <d_exprlist+0x3d2>
 8000df2:	68e3      	ldr	r3, [r4, #12]
 8000df4:	781a      	ldrb	r2, [r3, #0]
 8000df6:	2a5f      	cmp	r2, #95	; 0x5f
 8000df8:	d023      	beq.n	8000e42 <d_exprlist+0x456>
 8000dfa:	4650      	mov	r0, sl
 8000dfc:	4928      	ldr	r1, [pc, #160]	; (8000ea0 <d_exprlist+0x4b4>)
 8000dfe:	f005 fd8f 	bl	8006920 <strcmp>
 8000e02:	2800      	cmp	r0, #0
 8000e04:	d03f      	beq.n	8000e86 <d_exprlist+0x49a>
 8000e06:	4620      	mov	r0, r4
 8000e08:	f000 f84e 	bl	8000ea8 <d_expression_1>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	461a      	mov	r2, r3
 8000e10:	2138      	movs	r1, #56	; 0x38
 8000e12:	4620      	mov	r0, r4
 8000e14:	f7ff f9dc 	bl	80001d0 <d_make_comp>
 8000e18:	e704      	b.n	8000c24 <d_exprlist+0x238>
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	60e3      	str	r3, [r4, #12]
 8000e1e:	2300      	movs	r3, #0
 8000e20:	e789      	b.n	8000d36 <d_exprlist+0x34a>
 8000e22:	4620      	mov	r0, r4
 8000e24:	f001 f84c 	bl	8001ec0 <d_operator_name>
 8000e28:	e77c      	b.n	8000d24 <d_exprlist+0x338>
 8000e2a:	785a      	ldrb	r2, [r3, #1]
 8000e2c:	2a69      	cmp	r2, #105	; 0x69
 8000e2e:	f47f aeac 	bne.w	8000b8a <d_exprlist+0x19e>
 8000e32:	3302      	adds	r3, #2
 8000e34:	60e3      	str	r3, [r4, #12]
 8000e36:	2145      	movs	r1, #69	; 0x45
 8000e38:	4620      	mov	r0, r4
 8000e3a:	f7ff fdd7 	bl	80009ec <d_exprlist>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	e779      	b.n	8000d36 <d_exprlist+0x34a>
 8000e42:	3301      	adds	r3, #1
 8000e44:	60e3      	str	r3, [r4, #12]
 8000e46:	e7ba      	b.n	8000dbe <d_exprlist+0x3d2>
 8000e48:	2a6f      	cmp	r2, #111	; 0x6f
 8000e4a:	d015      	beq.n	8000e78 <d_exprlist+0x48c>
 8000e4c:	2a69      	cmp	r2, #105	; 0x69
 8000e4e:	f47f ae8d 	bne.w	8000b6c <d_exprlist+0x180>
 8000e52:	785a      	ldrb	r2, [r3, #1]
 8000e54:	2a6c      	cmp	r2, #108	; 0x6c
 8000e56:	f47f ae0e 	bne.w	8000a76 <d_exprlist+0x8a>
 8000e5a:	2500      	movs	r5, #0
 8000e5c:	3302      	adds	r3, #2
 8000e5e:	60e3      	str	r3, [r4, #12]
 8000e60:	2145      	movs	r1, #69	; 0x45
 8000e62:	4620      	mov	r0, r4
 8000e64:	f7ff fdc2 	bl	80009ec <d_exprlist>
 8000e68:	462a      	mov	r2, r5
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2130      	movs	r1, #48	; 0x30
 8000e6e:	4620      	mov	r0, r4
 8000e70:	f7ff f9ae 	bl	80001d0 <d_make_comp>
 8000e74:	4605      	mov	r5, r0
 8000e76:	e63f      	b.n	8000af8 <d_exprlist+0x10c>
 8000e78:	785a      	ldrb	r2, [r3, #1]
 8000e7a:	2a6e      	cmp	r2, #110	; 0x6e
 8000e7c:	f47f adfb 	bne.w	8000a76 <d_exprlist+0x8a>
 8000e80:	3302      	adds	r3, #2
 8000e82:	60e3      	str	r3, [r4, #12]
 8000e84:	e5c9      	b.n	8000a1a <d_exprlist+0x2e>
 8000e86:	4620      	mov	r0, r4
 8000e88:	f000 fa08 	bl	800129c <d_template_args_1>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	e7be      	b.n	8000e0e <d_exprlist+0x422>
 8000e90:	08017a70 	.word	0x08017a70
 8000e94:	08017a74 	.word	0x08017a74
 8000e98:	08017a78 	.word	0x08017a78
 8000e9c:	08017a7c 	.word	0x08017a7c
 8000ea0:	08017a6c 	.word	0x08017a6c
 8000ea4:	08017f74 	.word	0x08017f74

08000ea8 <d_expression_1>:
 8000ea8:	68c1      	ldr	r1, [r0, #12]
 8000eaa:	780b      	ldrb	r3, [r1, #0]
 8000eac:	2b4c      	cmp	r3, #76	; 0x4c
 8000eae:	f000 8087 	beq.w	8000fc0 <d_expression_1+0x118>
 8000eb2:	2b54      	cmp	r3, #84	; 0x54
 8000eb4:	f000 8086 	beq.w	8000fc4 <d_expression_1+0x11c>
 8000eb8:	2b73      	cmp	r3, #115	; 0x73
 8000eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ebe:	4604      	mov	r4, r0
 8000ec0:	d037      	beq.n	8000f32 <d_expression_1+0x8a>
 8000ec2:	2b66      	cmp	r3, #102	; 0x66
 8000ec4:	d012      	beq.n	8000eec <d_expression_1+0x44>
 8000ec6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000eca:	2a09      	cmp	r2, #9
 8000ecc:	f200 81b8 	bhi.w	8001240 <d_expression_1+0x398>
 8000ed0:	4620      	mov	r0, r4
 8000ed2:	f001 f8b5 	bl	8002040 <d_unqualified_name>
 8000ed6:	4605      	mov	r5, r0
 8000ed8:	2800      	cmp	r0, #0
 8000eda:	d06d      	beq.n	8000fb8 <d_expression_1+0x110>
 8000edc:	68e3      	ldr	r3, [r4, #12]
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b49      	cmp	r3, #73	; 0x49
 8000ee2:	f000 8088 	beq.w	8000ff6 <d_expression_1+0x14e>
 8000ee6:	4628      	mov	r0, r5
 8000ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000eec:	784b      	ldrb	r3, [r1, #1]
 8000eee:	2b70      	cmp	r3, #112	; 0x70
 8000ef0:	d039      	beq.n	8000f66 <d_expression_1+0xbe>
 8000ef2:	4620      	mov	r0, r4
 8000ef4:	f000 ffe4 	bl	8001ec0 <d_operator_name>
 8000ef8:	4605      	mov	r5, r0
 8000efa:	2800      	cmp	r0, #0
 8000efc:	d05c      	beq.n	8000fb8 <d_expression_1+0x110>
 8000efe:	7803      	ldrb	r3, [r0, #0]
 8000f00:	2b31      	cmp	r3, #49	; 0x31
 8000f02:	d061      	beq.n	8000fc8 <d_expression_1+0x120>
 8000f04:	2b32      	cmp	r3, #50	; 0x32
 8000f06:	d025      	beq.n	8000f54 <d_expression_1+0xac>
 8000f08:	2b33      	cmp	r3, #51	; 0x33
 8000f0a:	d155      	bne.n	8000fb8 <d_expression_1+0x110>
 8000f0c:	68e3      	ldr	r3, [r4, #12]
 8000f0e:	781a      	ldrb	r2, [r3, #0]
 8000f10:	2a5f      	cmp	r2, #95	; 0x5f
 8000f12:	f040 81b4 	bne.w	800127e <d_expression_1+0x3d6>
 8000f16:	3301      	adds	r3, #1
 8000f18:	60e3      	str	r3, [r4, #12]
 8000f1a:	2145      	movs	r1, #69	; 0x45
 8000f1c:	4620      	mov	r0, r4
 8000f1e:	f7ff fd65 	bl	80009ec <d_exprlist>
 8000f22:	4603      	mov	r3, r0
 8000f24:	462a      	mov	r2, r5
 8000f26:	4620      	mov	r0, r4
 8000f28:	2136      	movs	r1, #54	; 0x36
 8000f2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f2e:	f7ff b94f 	b.w	80001d0 <d_make_comp>
 8000f32:	784b      	ldrb	r3, [r1, #1]
 8000f34:	2b72      	cmp	r3, #114	; 0x72
 8000f36:	d069      	beq.n	800100c <d_expression_1+0x164>
 8000f38:	2b70      	cmp	r3, #112	; 0x70
 8000f3a:	d1da      	bne.n	8000ef2 <d_expression_1+0x4a>
 8000f3c:	3102      	adds	r1, #2
 8000f3e:	60c1      	str	r1, [r0, #12]
 8000f40:	f7ff ffb2 	bl	8000ea8 <d_expression_1>
 8000f44:	2300      	movs	r3, #0
 8000f46:	4602      	mov	r2, r0
 8000f48:	214a      	movs	r1, #74	; 0x4a
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f50:	f7ff b93e 	b.w	80001d0 <d_make_comp>
 8000f54:	6843      	ldr	r3, [r0, #4]
 8000f56:	2b03      	cmp	r3, #3
 8000f58:	d82e      	bhi.n	8000fb8 <d_expression_1+0x110>
 8000f5a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8000f5e:	0071      	.short	0x0071
 8000f60:	002d0190 	.word	0x002d0190
 8000f64:	002d      	.short	0x002d
 8000f66:	1c8b      	adds	r3, r1, #2
 8000f68:	60c3      	str	r3, [r0, #12]
 8000f6a:	788b      	ldrb	r3, [r1, #2]
 8000f6c:	2b54      	cmp	r3, #84	; 0x54
 8000f6e:	d063      	beq.n	8001038 <d_expression_1+0x190>
 8000f70:	f7ff fac2 	bl	80004f8 <d_compact_number>
 8000f74:	43c3      	mvns	r3, r0
 8000f76:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 8000f7a:	d01d      	beq.n	8000fb8 <d_expression_1+0x110>
 8000f7c:	3001      	adds	r0, #1
 8000f7e:	6963      	ldr	r3, [r4, #20]
 8000f80:	69a2      	ldr	r2, [r4, #24]
 8000f82:	4293      	cmp	r3, r2
 8000f84:	da18      	bge.n	8000fb8 <d_expression_1+0x110>
 8000f86:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8000f8a:	6921      	ldr	r1, [r4, #16]
 8000f8c:	0092      	lsls	r2, r2, #2
 8000f8e:	3301      	adds	r3, #1
 8000f90:	188d      	adds	r5, r1, r2
 8000f92:	6163      	str	r3, [r4, #20]
 8000f94:	d0a7      	beq.n	8000ee6 <d_expression_1+0x3e>
 8000f96:	2306      	movs	r3, #6
 8000f98:	548b      	strb	r3, [r1, r2]
 8000f9a:	6068      	str	r0, [r5, #4]
 8000f9c:	e7a3      	b.n	8000ee6 <d_expression_1+0x3e>
 8000f9e:	2b74      	cmp	r3, #116	; 0x74
 8000fa0:	d1a7      	bne.n	8000ef2 <d_expression_1+0x4a>
 8000fa2:	784b      	ldrb	r3, [r1, #1]
 8000fa4:	2b6c      	cmp	r3, #108	; 0x6c
 8000fa6:	d1a4      	bne.n	8000ef2 <d_expression_1+0x4a>
 8000fa8:	f000 fba2 	bl	80016f0 <d_type>
 8000fac:	68e1      	ldr	r1, [r4, #12]
 8000fae:	784b      	ldrb	r3, [r1, #1]
 8000fb0:	4605      	mov	r5, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f040 814e 	bne.w	8001254 <d_expression_1+0x3ac>
 8000fb8:	2500      	movs	r5, #0
 8000fba:	4628      	mov	r0, r5
 8000fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000fc0:	f001 bc8c 	b.w	80028dc <d_expr_primary>
 8000fc4:	f7ff bab4 	b.w	8000530 <d_template_param>
 8000fc8:	6847      	ldr	r7, [r0, #4]
 8000fca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000fcc:	68ba      	ldr	r2, [r7, #8]
 8000fce:	683e      	ldr	r6, [r7, #0]
 8000fd0:	49ac      	ldr	r1, [pc, #688]	; (8001284 <d_expression_1+0x3dc>)
 8000fd2:	3a02      	subs	r2, #2
 8000fd4:	4413      	add	r3, r2
 8000fd6:	6323      	str	r3, [r4, #48]	; 0x30
 8000fd8:	4630      	mov	r0, r6
 8000fda:	f005 fca1 	bl	8006920 <strcmp>
 8000fde:	2800      	cmp	r0, #0
 8000fe0:	f000 80ab 	beq.w	800113a <d_expression_1+0x292>
 8000fe4:	68ff      	ldr	r7, [r7, #12]
 8000fe6:	2f03      	cmp	r7, #3
 8000fe8:	d8e6      	bhi.n	8000fb8 <d_expression_1+0x110>
 8000fea:	e8df f017 	tbh	[pc, r7, lsl #1]
 8000fee:	0029      	.short	0x0029
 8000ff0:	007100ff 	.word	0x007100ff
 8000ff4:	0031      	.short	0x0031
 8000ff6:	4620      	mov	r0, r4
 8000ff8:	f000 f9b4 	bl	8001364 <d_template_args>
 8000ffc:	462a      	mov	r2, r5
 8000ffe:	4603      	mov	r3, r0
 8001000:	2104      	movs	r1, #4
 8001002:	4620      	mov	r0, r4
 8001004:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001008:	f7ff b8e2 	b.w	80001d0 <d_make_comp>
 800100c:	3102      	adds	r1, #2
 800100e:	60c1      	str	r1, [r0, #12]
 8001010:	f000 fb6e 	bl	80016f0 <d_type>
 8001014:	4605      	mov	r5, r0
 8001016:	4620      	mov	r0, r4
 8001018:	f001 f812 	bl	8002040 <d_unqualified_name>
 800101c:	68e3      	ldr	r3, [r4, #12]
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b49      	cmp	r3, #73	; 0x49
 8001022:	4606      	mov	r6, r0
 8001024:	f000 80ae 	beq.w	8001184 <d_expression_1+0x2dc>
 8001028:	4603      	mov	r3, r0
 800102a:	462a      	mov	r2, r5
 800102c:	4620      	mov	r0, r4
 800102e:	2101      	movs	r1, #1
 8001030:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001034:	f7ff b8cc 	b.w	80001d0 <d_make_comp>
 8001038:	3103      	adds	r1, #3
 800103a:	60c1      	str	r1, [r0, #12]
 800103c:	2000      	movs	r0, #0
 800103e:	e79e      	b.n	8000f7e <d_expression_1+0xd6>
 8001040:	462a      	mov	r2, r5
 8001042:	4620      	mov	r0, r4
 8001044:	2300      	movs	r3, #0
 8001046:	2135      	movs	r1, #53	; 0x35
 8001048:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800104c:	f7ff b8c0 	b.w	80001d0 <d_make_comp>
 8001050:	2e00      	cmp	r6, #0
 8001052:	d0b1      	beq.n	8000fb8 <d_expression_1+0x110>
 8001054:	498c      	ldr	r1, [pc, #560]	; (8001288 <d_expression_1+0x3e0>)
 8001056:	4630      	mov	r0, r6
 8001058:	f005 fc62 	bl	8006920 <strcmp>
 800105c:	2800      	cmp	r0, #0
 800105e:	d071      	beq.n	8001144 <d_expression_1+0x29c>
 8001060:	7833      	ldrb	r3, [r6, #0]
 8001062:	2b66      	cmp	r3, #102	; 0x66
 8001064:	f000 80b2 	beq.w	80011cc <d_expression_1+0x324>
 8001068:	2b6e      	cmp	r3, #110	; 0x6e
 800106a:	d1a5      	bne.n	8000fb8 <d_expression_1+0x110>
 800106c:	7873      	ldrb	r3, [r6, #1]
 800106e:	2b77      	cmp	r3, #119	; 0x77
 8001070:	d001      	beq.n	8001076 <d_expression_1+0x1ce>
 8001072:	2b61      	cmp	r3, #97	; 0x61
 8001074:	d1a0      	bne.n	8000fb8 <d_expression_1+0x110>
 8001076:	215f      	movs	r1, #95	; 0x5f
 8001078:	4620      	mov	r0, r4
 800107a:	f7ff fcb7 	bl	80009ec <d_exprlist>
 800107e:	4606      	mov	r6, r0
 8001080:	4620      	mov	r0, r4
 8001082:	f000 fb35 	bl	80016f0 <d_type>
 8001086:	68e3      	ldr	r3, [r4, #12]
 8001088:	781a      	ldrb	r2, [r3, #0]
 800108a:	2a45      	cmp	r2, #69	; 0x45
 800108c:	4607      	mov	r7, r0
 800108e:	f000 8099 	beq.w	80011c4 <d_expression_1+0x31c>
 8001092:	2a70      	cmp	r2, #112	; 0x70
 8001094:	f000 809e 	beq.w	80011d4 <d_expression_1+0x32c>
 8001098:	2a69      	cmp	r2, #105	; 0x69
 800109a:	d18d      	bne.n	8000fb8 <d_expression_1+0x110>
 800109c:	785b      	ldrb	r3, [r3, #1]
 800109e:	2b6c      	cmp	r3, #108	; 0x6c
 80010a0:	d18a      	bne.n	8000fb8 <d_expression_1+0x110>
 80010a2:	4620      	mov	r0, r4
 80010a4:	f7ff ff00 	bl	8000ea8 <d_expression_1>
 80010a8:	4603      	mov	r3, r0
 80010aa:	463a      	mov	r2, r7
 80010ac:	213b      	movs	r1, #59	; 0x3b
 80010ae:	4620      	mov	r0, r4
 80010b0:	f7ff f88e 	bl	80001d0 <d_make_comp>
 80010b4:	4632      	mov	r2, r6
 80010b6:	4603      	mov	r3, r0
 80010b8:	213a      	movs	r1, #58	; 0x3a
 80010ba:	4620      	mov	r0, r4
 80010bc:	f7ff f888 	bl	80001d0 <d_make_comp>
 80010c0:	462a      	mov	r2, r5
 80010c2:	4603      	mov	r3, r0
 80010c4:	2139      	movs	r1, #57	; 0x39
 80010c6:	4620      	mov	r0, r4
 80010c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80010cc:	f7ff b880 	b.w	80001d0 <d_make_comp>
 80010d0:	2e00      	cmp	r6, #0
 80010d2:	f43f af71 	beq.w	8000fb8 <d_expression_1+0x110>
 80010d6:	686b      	ldr	r3, [r5, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	785a      	ldrb	r2, [r3, #1]
 80010dc:	2a63      	cmp	r2, #99	; 0x63
 80010de:	d044      	beq.n	800116a <d_expression_1+0x2c2>
 80010e0:	7833      	ldrb	r3, [r6, #0]
 80010e2:	2b66      	cmp	r3, #102	; 0x66
 80010e4:	d059      	beq.n	800119a <d_expression_1+0x2f2>
 80010e6:	4620      	mov	r0, r4
 80010e8:	f7ff fede 	bl	8000ea8 <d_expression_1>
 80010ec:	4607      	mov	r7, r0
 80010ee:	4967      	ldr	r1, [pc, #412]	; (800128c <d_expression_1+0x3e4>)
 80010f0:	4630      	mov	r0, r6
 80010f2:	f005 fc15 	bl	8006920 <strcmp>
 80010f6:	b390      	cbz	r0, 800115e <d_expression_1+0x2b6>
 80010f8:	4965      	ldr	r1, [pc, #404]	; (8001290 <d_expression_1+0x3e8>)
 80010fa:	4630      	mov	r0, r6
 80010fc:	f005 fc10 	bl	8006920 <strcmp>
 8001100:	b128      	cbz	r0, 800110e <d_expression_1+0x266>
 8001102:	4630      	mov	r0, r6
 8001104:	4963      	ldr	r1, [pc, #396]	; (8001294 <d_expression_1+0x3ec>)
 8001106:	f005 fc0b 	bl	8006920 <strcmp>
 800110a:	2800      	cmp	r0, #0
 800110c:	d14a      	bne.n	80011a4 <d_expression_1+0x2fc>
 800110e:	4620      	mov	r0, r4
 8001110:	f000 ff96 	bl	8002040 <d_unqualified_name>
 8001114:	68e3      	ldr	r3, [r4, #12]
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b49      	cmp	r3, #73	; 0x49
 800111a:	4606      	mov	r6, r0
 800111c:	d047      	beq.n	80011ae <d_expression_1+0x306>
 800111e:	4633      	mov	r3, r6
 8001120:	463a      	mov	r2, r7
 8001122:	2138      	movs	r1, #56	; 0x38
 8001124:	4620      	mov	r0, r4
 8001126:	f7ff f853 	bl	80001d0 <d_make_comp>
 800112a:	462a      	mov	r2, r5
 800112c:	4603      	mov	r3, r0
 800112e:	2137      	movs	r1, #55	; 0x37
 8001130:	4620      	mov	r0, r4
 8001132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001136:	f7ff b84b 	b.w	80001d0 <d_make_comp>
 800113a:	4620      	mov	r0, r4
 800113c:	f000 fad8 	bl	80016f0 <d_type>
 8001140:	4603      	mov	r3, r0
 8001142:	e6ef      	b.n	8000f24 <d_expression_1+0x7c>
 8001144:	4620      	mov	r0, r4
 8001146:	f7ff feaf 	bl	8000ea8 <d_expression_1>
 800114a:	4606      	mov	r6, r0
 800114c:	4620      	mov	r0, r4
 800114e:	f7ff feab 	bl	8000ea8 <d_expression_1>
 8001152:	4607      	mov	r7, r0
 8001154:	4620      	mov	r0, r4
 8001156:	f7ff fea7 	bl	8000ea8 <d_expression_1>
 800115a:	4603      	mov	r3, r0
 800115c:	e7a5      	b.n	80010aa <d_expression_1+0x202>
 800115e:	2145      	movs	r1, #69	; 0x45
 8001160:	4620      	mov	r0, r4
 8001162:	f7ff fc43 	bl	80009ec <d_exprlist>
 8001166:	4606      	mov	r6, r0
 8001168:	e7d9      	b.n	800111e <d_expression_1+0x276>
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 8001170:	2a01      	cmp	r2, #1
 8001172:	d902      	bls.n	800117a <d_expression_1+0x2d2>
 8001174:	3b72      	subs	r3, #114	; 0x72
 8001176:	2b01      	cmp	r3, #1
 8001178:	d8b2      	bhi.n	80010e0 <d_expression_1+0x238>
 800117a:	4620      	mov	r0, r4
 800117c:	f000 fab8 	bl	80016f0 <d_type>
 8001180:	4607      	mov	r7, r0
 8001182:	e7b4      	b.n	80010ee <d_expression_1+0x246>
 8001184:	4620      	mov	r0, r4
 8001186:	f000 f8ed 	bl	8001364 <d_template_args>
 800118a:	4632      	mov	r2, r6
 800118c:	4603      	mov	r3, r0
 800118e:	2104      	movs	r1, #4
 8001190:	4620      	mov	r0, r4
 8001192:	f7ff f81d 	bl	80001d0 <d_make_comp>
 8001196:	4603      	mov	r3, r0
 8001198:	e747      	b.n	800102a <d_expression_1+0x182>
 800119a:	4620      	mov	r0, r4
 800119c:	f000 fe90 	bl	8001ec0 <d_operator_name>
 80011a0:	4607      	mov	r7, r0
 80011a2:	e7a4      	b.n	80010ee <d_expression_1+0x246>
 80011a4:	4620      	mov	r0, r4
 80011a6:	f7ff fe7f 	bl	8000ea8 <d_expression_1>
 80011aa:	4606      	mov	r6, r0
 80011ac:	e7b7      	b.n	800111e <d_expression_1+0x276>
 80011ae:	4620      	mov	r0, r4
 80011b0:	f000 f8d8 	bl	8001364 <d_template_args>
 80011b4:	4632      	mov	r2, r6
 80011b6:	4603      	mov	r3, r0
 80011b8:	2104      	movs	r1, #4
 80011ba:	4620      	mov	r0, r4
 80011bc:	f7ff f808 	bl	80001d0 <d_make_comp>
 80011c0:	4606      	mov	r6, r0
 80011c2:	e7ac      	b.n	800111e <d_expression_1+0x276>
 80011c4:	3301      	adds	r3, #1
 80011c6:	60e3      	str	r3, [r4, #12]
 80011c8:	2300      	movs	r3, #0
 80011ca:	e76e      	b.n	80010aa <d_expression_1+0x202>
 80011cc:	4620      	mov	r0, r4
 80011ce:	f000 fe77 	bl	8001ec0 <d_operator_name>
 80011d2:	e7ba      	b.n	800114a <d_expression_1+0x2a2>
 80011d4:	785a      	ldrb	r2, [r3, #1]
 80011d6:	2a69      	cmp	r2, #105	; 0x69
 80011d8:	f47f aeee 	bne.w	8000fb8 <d_expression_1+0x110>
 80011dc:	3302      	adds	r3, #2
 80011de:	60e3      	str	r3, [r4, #12]
 80011e0:	2145      	movs	r1, #69	; 0x45
 80011e2:	4620      	mov	r0, r4
 80011e4:	f7ff fc02 	bl	80009ec <d_exprlist>
 80011e8:	4603      	mov	r3, r0
 80011ea:	e75e      	b.n	80010aa <d_expression_1+0x202>
 80011ec:	2e00      	cmp	r6, #0
 80011ee:	d046      	beq.n	800127e <d_expression_1+0x3d6>
 80011f0:	7833      	ldrb	r3, [r6, #0]
 80011f2:	2b70      	cmp	r3, #112	; 0x70
 80011f4:	d015      	beq.n	8001222 <d_expression_1+0x37a>
 80011f6:	2b6d      	cmp	r3, #109	; 0x6d
 80011f8:	d013      	beq.n	8001222 <d_expression_1+0x37a>
 80011fa:	2700      	movs	r7, #0
 80011fc:	4630      	mov	r0, r6
 80011fe:	4926      	ldr	r1, [pc, #152]	; (8001298 <d_expression_1+0x3f0>)
 8001200:	f005 fb8e 	bl	8006920 <strcmp>
 8001204:	b1b8      	cbz	r0, 8001236 <d_expression_1+0x38e>
 8001206:	4620      	mov	r0, r4
 8001208:	f7ff fe4e 	bl	8000ea8 <d_expression_1>
 800120c:	4603      	mov	r3, r0
 800120e:	2f00      	cmp	r7, #0
 8001210:	f43f ae88 	beq.w	8000f24 <d_expression_1+0x7c>
 8001214:	461a      	mov	r2, r3
 8001216:	2138      	movs	r1, #56	; 0x38
 8001218:	4620      	mov	r0, r4
 800121a:	f7fe ffd9 	bl	80001d0 <d_make_comp>
 800121e:	4603      	mov	r3, r0
 8001220:	e680      	b.n	8000f24 <d_expression_1+0x7c>
 8001222:	7872      	ldrb	r2, [r6, #1]
 8001224:	429a      	cmp	r2, r3
 8001226:	d1e8      	bne.n	80011fa <d_expression_1+0x352>
 8001228:	68e3      	ldr	r3, [r4, #12]
 800122a:	781a      	ldrb	r2, [r3, #0]
 800122c:	2a5f      	cmp	r2, #95	; 0x5f
 800122e:	d1e5      	bne.n	80011fc <d_expression_1+0x354>
 8001230:	3301      	adds	r3, #1
 8001232:	60e3      	str	r3, [r4, #12]
 8001234:	e7e1      	b.n	80011fa <d_expression_1+0x352>
 8001236:	4620      	mov	r0, r4
 8001238:	f000 f830 	bl	800129c <d_template_args_1>
 800123c:	4603      	mov	r3, r0
 800123e:	e7e6      	b.n	800120e <d_expression_1+0x366>
 8001240:	2b6f      	cmp	r3, #111	; 0x6f
 8001242:	d015      	beq.n	8001270 <d_expression_1+0x3c8>
 8001244:	2b69      	cmp	r3, #105	; 0x69
 8001246:	f47f aeaa 	bne.w	8000f9e <d_expression_1+0xf6>
 800124a:	784b      	ldrb	r3, [r1, #1]
 800124c:	2b6c      	cmp	r3, #108	; 0x6c
 800124e:	f47f ae50 	bne.w	8000ef2 <d_expression_1+0x4a>
 8001252:	2500      	movs	r5, #0
 8001254:	3102      	adds	r1, #2
 8001256:	60e1      	str	r1, [r4, #12]
 8001258:	4620      	mov	r0, r4
 800125a:	2145      	movs	r1, #69	; 0x45
 800125c:	f7ff fbc6 	bl	80009ec <d_exprlist>
 8001260:	462a      	mov	r2, r5
 8001262:	4603      	mov	r3, r0
 8001264:	2130      	movs	r1, #48	; 0x30
 8001266:	4620      	mov	r0, r4
 8001268:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800126c:	f7fe bfb0 	b.w	80001d0 <d_make_comp>
 8001270:	784b      	ldrb	r3, [r1, #1]
 8001272:	2b6e      	cmp	r3, #110	; 0x6e
 8001274:	f47f ae3d 	bne.w	8000ef2 <d_expression_1+0x4a>
 8001278:	3102      	adds	r1, #2
 800127a:	60c1      	str	r1, [r0, #12]
 800127c:	e628      	b.n	8000ed0 <d_expression_1+0x28>
 800127e:	2700      	movs	r7, #0
 8001280:	e7c1      	b.n	8001206 <d_expression_1+0x35e>
 8001282:	bf00      	nop
 8001284:	08017f74 	.word	0x08017f74
 8001288:	08017a7c 	.word	0x08017a7c
 800128c:	08017a70 	.word	0x08017a70
 8001290:	08017a74 	.word	0x08017a74
 8001294:	08017a78 	.word	0x08017a78
 8001298:	08017a6c 	.word	0x08017a6c

0800129c <d_template_args_1>:
 800129c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012a0:	68c2      	ldr	r2, [r0, #12]
 80012a2:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
 80012a6:	7813      	ldrb	r3, [r2, #0]
 80012a8:	2b45      	cmp	r3, #69	; 0x45
 80012aa:	b083      	sub	sp, #12
 80012ac:	4604      	mov	r4, r0
 80012ae:	d04e      	beq.n	800134e <d_template_args_1+0xb2>
 80012b0:	ae02      	add	r6, sp, #8
 80012b2:	2100      	movs	r1, #0
 80012b4:	f846 1d04 	str.w	r1, [r6, #-4]!
 80012b8:	2701      	movs	r7, #1
 80012ba:	3b49      	subs	r3, #73	; 0x49
 80012bc:	2b0f      	cmp	r3, #15
 80012be:	d83e      	bhi.n	800133e <d_template_args_1+0xa2>
 80012c0:	e8df f003 	tbb	[pc, r3]
 80012c4:	1b3d3838 	.word	0x1b3d3838
 80012c8:	3d3d3d3d 	.word	0x3d3d3d3d
 80012cc:	3d3d3d3d 	.word	0x3d3d3d3d
 80012d0:	083d3d3d 	.word	0x083d3d3d
 80012d4:	3201      	adds	r2, #1
 80012d6:	f8d4 9034 	ldr.w	r9, [r4, #52]	; 0x34
 80012da:	60e2      	str	r2, [r4, #12]
 80012dc:	6367      	str	r7, [r4, #52]	; 0x34
 80012de:	4620      	mov	r0, r4
 80012e0:	f7ff fde2 	bl	8000ea8 <d_expression_1>
 80012e4:	68e3      	ldr	r3, [r4, #12]
 80012e6:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 80012ea:	781a      	ldrb	r2, [r3, #0]
 80012ec:	2a45      	cmp	r2, #69	; 0x45
 80012ee:	4605      	mov	r5, r0
 80012f0:	d02a      	beq.n	8001348 <d_template_args_1+0xac>
 80012f2:	2000      	movs	r0, #0
 80012f4:	b003      	add	sp, #12
 80012f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80012fa:	4620      	mov	r0, r4
 80012fc:	f001 faee 	bl	80028dc <d_expr_primary>
 8001300:	4605      	mov	r5, r0
 8001302:	2300      	movs	r3, #0
 8001304:	212f      	movs	r1, #47	; 0x2f
 8001306:	462a      	mov	r2, r5
 8001308:	4620      	mov	r0, r4
 800130a:	2d00      	cmp	r5, #0
 800130c:	d0f1      	beq.n	80012f2 <d_template_args_1+0x56>
 800130e:	f7fe ff5f 	bl	80001d0 <d_make_comp>
 8001312:	6030      	str	r0, [r6, #0]
 8001314:	f100 0608 	add.w	r6, r0, #8
 8001318:	2800      	cmp	r0, #0
 800131a:	d0ea      	beq.n	80012f2 <d_template_args_1+0x56>
 800131c:	68e2      	ldr	r2, [r4, #12]
 800131e:	7813      	ldrb	r3, [r2, #0]
 8001320:	2b45      	cmp	r3, #69	; 0x45
 8001322:	d1ca      	bne.n	80012ba <d_template_args_1+0x1e>
 8001324:	9801      	ldr	r0, [sp, #4]
 8001326:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 800132a:	3201      	adds	r2, #1
 800132c:	60e2      	str	r2, [r4, #12]
 800132e:	b003      	add	sp, #12
 8001330:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001334:	4620      	mov	r0, r4
 8001336:	f000 f815 	bl	8001364 <d_template_args>
 800133a:	4605      	mov	r5, r0
 800133c:	e7e1      	b.n	8001302 <d_template_args_1+0x66>
 800133e:	4620      	mov	r0, r4
 8001340:	f000 f9d6 	bl	80016f0 <d_type>
 8001344:	4605      	mov	r5, r0
 8001346:	e7dc      	b.n	8001302 <d_template_args_1+0x66>
 8001348:	3301      	adds	r3, #1
 800134a:	60e3      	str	r3, [r4, #12]
 800134c:	e7d9      	b.n	8001302 <d_template_args_1+0x66>
 800134e:	3201      	adds	r2, #1
 8001350:	2300      	movs	r3, #0
 8001352:	60c2      	str	r2, [r0, #12]
 8001354:	212f      	movs	r1, #47	; 0x2f
 8001356:	461a      	mov	r2, r3
 8001358:	b003      	add	sp, #12
 800135a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800135e:	f7fe bf37 	b.w	80001d0 <d_make_comp>
 8001362:	bf00      	nop

08001364 <d_template_args>:
 8001364:	68c2      	ldr	r2, [r0, #12]
 8001366:	7813      	ldrb	r3, [r2, #0]
 8001368:	3b49      	subs	r3, #73	; 0x49
 800136a:	2b01      	cmp	r3, #1
 800136c:	d802      	bhi.n	8001374 <d_template_args+0x10>
 800136e:	3201      	adds	r2, #1
 8001370:	60c2      	str	r2, [r0, #12]
 8001372:	e793      	b.n	800129c <d_template_args_1>
 8001374:	2000      	movs	r0, #0
 8001376:	4770      	bx	lr

08001378 <d_name>:
 8001378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800137c:	68c2      	ldr	r2, [r0, #12]
 800137e:	7813      	ldrb	r3, [r2, #0]
 8001380:	3b4e      	subs	r3, #78	; 0x4e
 8001382:	b085      	sub	sp, #20
 8001384:	4605      	mov	r5, r0
 8001386:	2b0c      	cmp	r3, #12
 8001388:	d870      	bhi.n	800146c <d_name+0xf4>
 800138a:	e8df f003 	tbb	[pc, r3]
 800138e:	6f1e      	.short	0x6f1e
 8001390:	5b6f6f6f 	.word	0x5b6f6f6f
 8001394:	6f6f176f 	.word	0x6f6f176f
 8001398:	6f6f      	.short	0x6f6f
 800139a:	07          	.byte	0x07
 800139b:	00          	.byte	0x00
 800139c:	3201      	adds	r2, #1
 800139e:	2100      	movs	r1, #0
 80013a0:	60c2      	str	r2, [r0, #12]
 80013a2:	f000 ffbd 	bl	8002320 <d_encoding>
 80013a6:	68eb      	ldr	r3, [r5, #12]
 80013a8:	7819      	ldrb	r1, [r3, #0]
 80013aa:	2945      	cmp	r1, #69	; 0x45
 80013ac:	4606      	mov	r6, r0
 80013ae:	f000 8099 	beq.w	80014e4 <d_name+0x16c>
 80013b2:	2200      	movs	r2, #0
 80013b4:	4610      	mov	r0, r2
 80013b6:	b005      	add	sp, #20
 80013b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013bc:	f000 fe40 	bl	8002040 <d_unqualified_name>
 80013c0:	4602      	mov	r2, r0
 80013c2:	4610      	mov	r0, r2
 80013c4:	b005      	add	sp, #20
 80013c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013ca:	3201      	adds	r2, #1
 80013cc:	60c2      	str	r2, [r0, #12]
 80013ce:	a903      	add	r1, sp, #12
 80013d0:	2201      	movs	r2, #1
 80013d2:	f7fe ff49 	bl	8000268 <d_cv_qualifiers>
 80013d6:	4681      	mov	r9, r0
 80013d8:	2800      	cmp	r0, #0
 80013da:	d0ea      	beq.n	80013b2 <d_name+0x3a>
 80013dc:	2100      	movs	r1, #0
 80013de:	4628      	mov	r0, r5
 80013e0:	f7fe ffa8 	bl	8000334 <d_ref_qualifier>
 80013e4:	68ea      	ldr	r2, [r5, #12]
 80013e6:	4eb4      	ldr	r6, [pc, #720]	; (80016b8 <d_name+0x340>)
 80013e8:	7814      	ldrb	r4, [r2, #0]
 80013ea:	4680      	mov	r8, r0
 80013ec:	2700      	movs	r7, #0
 80013ee:	2c00      	cmp	r4, #0
 80013f0:	f000 80e8 	beq.w	80015c4 <d_name+0x24c>
 80013f4:	2c44      	cmp	r4, #68	; 0x44
 80013f6:	f000 80d1 	beq.w	800159c <d_name+0x224>
 80013fa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	2b1c      	cmp	r3, #28
 8001402:	f240 80a8 	bls.w	8001556 <d_name+0x1de>
 8001406:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800140a:	2b19      	cmp	r3, #25
 800140c:	f240 80a8 	bls.w	8001560 <d_name+0x1e8>
 8001410:	2c55      	cmp	r4, #85	; 0x55
 8001412:	f000 80de 	beq.w	80015d2 <d_name+0x25a>
 8001416:	2c53      	cmp	r4, #83	; 0x53
 8001418:	f000 80f1 	beq.w	80015fe <d_name+0x286>
 800141c:	2c49      	cmp	r4, #73	; 0x49
 800141e:	f000 80da 	beq.w	80015d6 <d_name+0x25e>
 8001422:	2c54      	cmp	r4, #84	; 0x54
 8001424:	f000 811f 	beq.w	8001666 <d_name+0x2ee>
 8001428:	2c45      	cmp	r4, #69	; 0x45
 800142a:	f000 814b 	beq.w	80016c4 <d_name+0x34c>
 800142e:	2c4d      	cmp	r4, #77	; 0x4d
 8001430:	f040 80c8 	bne.w	80015c4 <d_name+0x24c>
 8001434:	2f00      	cmp	r7, #0
 8001436:	f000 80c5 	beq.w	80015c4 <d_name+0x24c>
 800143a:	1c53      	adds	r3, r2, #1
 800143c:	60eb      	str	r3, [r5, #12]
 800143e:	7854      	ldrb	r4, [r2, #1]
 8001440:	461a      	mov	r2, r3
 8001442:	e7d4      	b.n	80013ee <d_name+0x76>
 8001444:	7853      	ldrb	r3, [r2, #1]
 8001446:	2b74      	cmp	r3, #116	; 0x74
 8001448:	d031      	beq.n	80014ae <d_name+0x136>
 800144a:	2100      	movs	r1, #0
 800144c:	f7ff f90a 	bl	8000664 <d_substitution>
 8001450:	68eb      	ldr	r3, [r5, #12]
 8001452:	7819      	ldrb	r1, [r3, #0]
 8001454:	2949      	cmp	r1, #73	; 0x49
 8001456:	4602      	mov	r2, r0
 8001458:	d1b3      	bne.n	80013c2 <d_name+0x4a>
 800145a:	3301      	adds	r3, #1
 800145c:	60eb      	str	r3, [r5, #12]
 800145e:	4628      	mov	r0, r5
 8001460:	9201      	str	r2, [sp, #4]
 8001462:	f7ff ff1b 	bl	800129c <d_template_args_1>
 8001466:	9a01      	ldr	r2, [sp, #4]
 8001468:	4603      	mov	r3, r0
 800146a:	e017      	b.n	800149c <d_name+0x124>
 800146c:	f000 fde8 	bl	8002040 <d_unqualified_name>
 8001470:	68eb      	ldr	r3, [r5, #12]
 8001472:	7819      	ldrb	r1, [r3, #0]
 8001474:	2949      	cmp	r1, #73	; 0x49
 8001476:	4602      	mov	r2, r0
 8001478:	d1a3      	bne.n	80013c2 <d_name+0x4a>
 800147a:	2a00      	cmp	r2, #0
 800147c:	d099      	beq.n	80013b2 <d_name+0x3a>
 800147e:	6a29      	ldr	r1, [r5, #32]
 8001480:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8001482:	4281      	cmp	r1, r0
 8001484:	da95      	bge.n	80013b2 <d_name+0x3a>
 8001486:	69ec      	ldr	r4, [r5, #28]
 8001488:	1c48      	adds	r0, r1, #1
 800148a:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
 800148e:	6228      	str	r0, [r5, #32]
 8001490:	7819      	ldrb	r1, [r3, #0]
 8001492:	3949      	subs	r1, #73	; 0x49
 8001494:	2901      	cmp	r1, #1
 8001496:	bf88      	it	hi
 8001498:	2300      	movhi	r3, #0
 800149a:	d9de      	bls.n	800145a <d_name+0xe2>
 800149c:	4628      	mov	r0, r5
 800149e:	2104      	movs	r1, #4
 80014a0:	f7fe fe96 	bl	80001d0 <d_make_comp>
 80014a4:	4602      	mov	r2, r0
 80014a6:	4610      	mov	r0, r2
 80014a8:	b005      	add	sp, #20
 80014aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80014ae:	6943      	ldr	r3, [r0, #20]
 80014b0:	6981      	ldr	r1, [r0, #24]
 80014b2:	3202      	adds	r2, #2
 80014b4:	428b      	cmp	r3, r1
 80014b6:	60c2      	str	r2, [r0, #12]
 80014b8:	f2c0 80ab 	blt.w	8001612 <d_name+0x29a>
 80014bc:	2400      	movs	r4, #0
 80014be:	4628      	mov	r0, r5
 80014c0:	f000 fdbe 	bl	8002040 <d_unqualified_name>
 80014c4:	4622      	mov	r2, r4
 80014c6:	4603      	mov	r3, r0
 80014c8:	2101      	movs	r1, #1
 80014ca:	4628      	mov	r0, r5
 80014cc:	f7fe fe80 	bl	80001d0 <d_make_comp>
 80014d0:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80014d2:	68eb      	ldr	r3, [r5, #12]
 80014d4:	3103      	adds	r1, #3
 80014d6:	6329      	str	r1, [r5, #48]	; 0x30
 80014d8:	7819      	ldrb	r1, [r3, #0]
 80014da:	2949      	cmp	r1, #73	; 0x49
 80014dc:	4602      	mov	r2, r0
 80014de:	f47f af70 	bne.w	80013c2 <d_name+0x4a>
 80014e2:	e7ca      	b.n	800147a <d_name+0x102>
 80014e4:	1c5a      	adds	r2, r3, #1
 80014e6:	60ea      	str	r2, [r5, #12]
 80014e8:	7859      	ldrb	r1, [r3, #1]
 80014ea:	2973      	cmp	r1, #115	; 0x73
 80014ec:	f000 80a3 	beq.w	8001636 <d_name+0x2be>
 80014f0:	2964      	cmp	r1, #100	; 0x64
 80014f2:	f000 80bc 	beq.w	800166e <d_name+0x2f6>
 80014f6:	4628      	mov	r0, r5
 80014f8:	f7ff ff3e 	bl	8001378 <d_name>
 80014fc:	4604      	mov	r4, r0
 80014fe:	2800      	cmp	r0, #0
 8001500:	d072      	beq.n	80015e8 <d_name+0x270>
 8001502:	7803      	ldrb	r3, [r0, #0]
 8001504:	2b45      	cmp	r3, #69	; 0x45
 8001506:	f000 8094 	beq.w	8001632 <d_name+0x2ba>
 800150a:	2b47      	cmp	r3, #71	; 0x47
 800150c:	f000 8091 	beq.w	8001632 <d_name+0x2ba>
 8001510:	68eb      	ldr	r3, [r5, #12]
 8001512:	781a      	ldrb	r2, [r3, #0]
 8001514:	2a5f      	cmp	r2, #95	; 0x5f
 8001516:	f040 808c 	bne.w	8001632 <d_name+0x2ba>
 800151a:	f04f 37ff 	mov.w	r7, #4294967295
 800151e:	4628      	mov	r0, r5
 8001520:	3301      	adds	r3, #1
 8001522:	f840 3f0c 	str.w	r3, [r0, #12]!
 8001526:	f7fe ffa5 	bl	8000474 <d_number.isra.0>
 800152a:	2800      	cmp	r0, #0
 800152c:	f6ff af41 	blt.w	80013b2 <d_name+0x3a>
 8001530:	1c7b      	adds	r3, r7, #1
 8001532:	d07e      	beq.n	8001632 <d_name+0x2ba>
 8001534:	696b      	ldr	r3, [r5, #20]
 8001536:	69aa      	ldr	r2, [r5, #24]
 8001538:	4293      	cmp	r3, r2
 800153a:	da55      	bge.n	80015e8 <d_name+0x270>
 800153c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001540:	6929      	ldr	r1, [r5, #16]
 8001542:	3301      	adds	r3, #1
 8001544:	0092      	lsls	r2, r2, #2
 8001546:	616b      	str	r3, [r5, #20]
 8001548:	188b      	adds	r3, r1, r2
 800154a:	d04e      	beq.n	80015ea <d_name+0x272>
 800154c:	2046      	movs	r0, #70	; 0x46
 800154e:	5488      	strb	r0, [r1, r2]
 8001550:	609f      	str	r7, [r3, #8]
 8001552:	605c      	str	r4, [r3, #4]
 8001554:	e049      	b.n	80015ea <d_name+0x272>
 8001556:	fa26 f303 	lsr.w	r3, r6, r3
 800155a:	07d9      	lsls	r1, r3, #31
 800155c:	f57f af53 	bpl.w	8001406 <d_name+0x8e>
 8001560:	4628      	mov	r0, r5
 8001562:	f000 fd6d 	bl	8002040 <d_unqualified_name>
 8001566:	b347      	cbz	r7, 80015ba <d_name+0x242>
 8001568:	2101      	movs	r1, #1
 800156a:	4603      	mov	r3, r0
 800156c:	463a      	mov	r2, r7
 800156e:	4628      	mov	r0, r5
 8001570:	f7fe fe2e 	bl	80001d0 <d_make_comp>
 8001574:	4607      	mov	r7, r0
 8001576:	2c53      	cmp	r4, #83	; 0x53
 8001578:	d01c      	beq.n	80015b4 <d_name+0x23c>
 800157a:	68ea      	ldr	r2, [r5, #12]
 800157c:	7814      	ldrb	r4, [r2, #0]
 800157e:	2c45      	cmp	r4, #69	; 0x45
 8001580:	f43f af3b 	beq.w	80013fa <d_name+0x82>
 8001584:	b1f7      	cbz	r7, 80015c4 <d_name+0x24c>
 8001586:	6a2b      	ldr	r3, [r5, #32]
 8001588:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800158a:	428b      	cmp	r3, r1
 800158c:	da1a      	bge.n	80015c4 <d_name+0x24c>
 800158e:	69e9      	ldr	r1, [r5, #28]
 8001590:	1c58      	adds	r0, r3, #1
 8001592:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
 8001596:	6228      	str	r0, [r5, #32]
 8001598:	7814      	ldrb	r4, [r2, #0]
 800159a:	e728      	b.n	80013ee <d_name+0x76>
 800159c:	7853      	ldrb	r3, [r2, #1]
 800159e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80015a2:	2b54      	cmp	r3, #84	; 0x54
 80015a4:	4628      	mov	r0, r5
 80015a6:	d00a      	beq.n	80015be <d_name+0x246>
 80015a8:	f000 fd4a 	bl	8002040 <d_unqualified_name>
 80015ac:	2f00      	cmp	r7, #0
 80015ae:	d1db      	bne.n	8001568 <d_name+0x1f0>
 80015b0:	4607      	mov	r7, r0
 80015b2:	e7e2      	b.n	800157a <d_name+0x202>
 80015b4:	68ea      	ldr	r2, [r5, #12]
 80015b6:	7814      	ldrb	r4, [r2, #0]
 80015b8:	e719      	b.n	80013ee <d_name+0x76>
 80015ba:	4607      	mov	r7, r0
 80015bc:	e7db      	b.n	8001576 <d_name+0x1fe>
 80015be:	f000 f897 	bl	80016f0 <d_type>
 80015c2:	e7f3      	b.n	80015ac <d_name+0x234>
 80015c4:	2200      	movs	r2, #0
 80015c6:	4610      	mov	r0, r2
 80015c8:	f8c9 2000 	str.w	r2, [r9]
 80015cc:	b005      	add	sp, #20
 80015ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015d2:	4628      	mov	r0, r5
 80015d4:	e7e8      	b.n	80015a8 <d_name+0x230>
 80015d6:	2f00      	cmp	r7, #0
 80015d8:	d0f4      	beq.n	80015c4 <d_name+0x24c>
 80015da:	3201      	adds	r2, #1
 80015dc:	60ea      	str	r2, [r5, #12]
 80015de:	4628      	mov	r0, r5
 80015e0:	f7ff fe5c 	bl	800129c <d_template_args_1>
 80015e4:	2104      	movs	r1, #4
 80015e6:	e7c0      	b.n	800156a <d_name+0x1f2>
 80015e8:	2300      	movs	r3, #0
 80015ea:	4632      	mov	r2, r6
 80015ec:	4628      	mov	r0, r5
 80015ee:	2102      	movs	r1, #2
 80015f0:	f7fe fdee 	bl	80001d0 <d_make_comp>
 80015f4:	4602      	mov	r2, r0
 80015f6:	4610      	mov	r0, r2
 80015f8:	b005      	add	sp, #20
 80015fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015fe:	2101      	movs	r1, #1
 8001600:	4628      	mov	r0, r5
 8001602:	f7ff f82f 	bl	8000664 <d_substitution>
 8001606:	2f00      	cmp	r7, #0
 8001608:	d1ae      	bne.n	8001568 <d_name+0x1f0>
 800160a:	68ea      	ldr	r2, [r5, #12]
 800160c:	4607      	mov	r7, r0
 800160e:	7814      	ldrb	r4, [r2, #0]
 8001610:	e6ed      	b.n	80013ee <d_name+0x76>
 8001612:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001616:	6901      	ldr	r1, [r0, #16]
 8001618:	0092      	lsls	r2, r2, #2
 800161a:	3301      	adds	r3, #1
 800161c:	188c      	adds	r4, r1, r2
 800161e:	6143      	str	r3, [r0, #20]
 8001620:	f43f af4d 	beq.w	80014be <d_name+0x146>
 8001624:	2300      	movs	r3, #0
 8001626:	548b      	strb	r3, [r1, r2]
 8001628:	4824      	ldr	r0, [pc, #144]	; (80016bc <d_name+0x344>)
 800162a:	6060      	str	r0, [r4, #4]
 800162c:	2303      	movs	r3, #3
 800162e:	60a3      	str	r3, [r4, #8]
 8001630:	e745      	b.n	80014be <d_name+0x146>
 8001632:	4623      	mov	r3, r4
 8001634:	e7d9      	b.n	80015ea <d_name+0x272>
 8001636:	1c9a      	adds	r2, r3, #2
 8001638:	60ea      	str	r2, [r5, #12]
 800163a:	789a      	ldrb	r2, [r3, #2]
 800163c:	2a5f      	cmp	r2, #95	; 0x5f
 800163e:	d032      	beq.n	80016a6 <d_name+0x32e>
 8001640:	696b      	ldr	r3, [r5, #20]
 8001642:	69aa      	ldr	r2, [r5, #24]
 8001644:	4293      	cmp	r3, r2
 8001646:	dacf      	bge.n	80015e8 <d_name+0x270>
 8001648:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800164c:	6929      	ldr	r1, [r5, #16]
 800164e:	3301      	adds	r3, #1
 8001650:	0092      	lsls	r2, r2, #2
 8001652:	616b      	str	r3, [r5, #20]
 8001654:	188b      	adds	r3, r1, r2
 8001656:	d0c8      	beq.n	80015ea <d_name+0x272>
 8001658:	2400      	movs	r4, #0
 800165a:	548c      	strb	r4, [r1, r2]
 800165c:	4818      	ldr	r0, [pc, #96]	; (80016c0 <d_name+0x348>)
 800165e:	6058      	str	r0, [r3, #4]
 8001660:	220e      	movs	r2, #14
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	e7c1      	b.n	80015ea <d_name+0x272>
 8001666:	4628      	mov	r0, r5
 8001668:	f7fe ff62 	bl	8000530 <d_template_param>
 800166c:	e79e      	b.n	80015ac <d_name+0x234>
 800166e:	3302      	adds	r3, #2
 8001670:	60eb      	str	r3, [r5, #12]
 8001672:	4628      	mov	r0, r5
 8001674:	f7fe ff40 	bl	80004f8 <d_compact_number>
 8001678:	1e07      	subs	r7, r0, #0
 800167a:	f6ff ae9a 	blt.w	80013b2 <d_name+0x3a>
 800167e:	4628      	mov	r0, r5
 8001680:	f7ff fe7a 	bl	8001378 <d_name>
 8001684:	4604      	mov	r4, r0
 8001686:	2800      	cmp	r0, #0
 8001688:	f43f af54 	beq.w	8001534 <d_name+0x1bc>
 800168c:	7803      	ldrb	r3, [r0, #0]
 800168e:	2b45      	cmp	r3, #69	; 0x45
 8001690:	f43f af50 	beq.w	8001534 <d_name+0x1bc>
 8001694:	2b47      	cmp	r3, #71	; 0x47
 8001696:	f43f af4d 	beq.w	8001534 <d_name+0x1bc>
 800169a:	68eb      	ldr	r3, [r5, #12]
 800169c:	781a      	ldrb	r2, [r3, #0]
 800169e:	2a5f      	cmp	r2, #95	; 0x5f
 80016a0:	f47f af48 	bne.w	8001534 <d_name+0x1bc>
 80016a4:	e73b      	b.n	800151e <d_name+0x1a6>
 80016a6:	4628      	mov	r0, r5
 80016a8:	3303      	adds	r3, #3
 80016aa:	f840 3f0c 	str.w	r3, [r0, #12]!
 80016ae:	f7fe fee1 	bl	8000474 <d_number.isra.0>
 80016b2:	2800      	cmp	r0, #0
 80016b4:	dac4      	bge.n	8001640 <d_name+0x2c8>
 80016b6:	e67c      	b.n	80013b2 <d_name+0x3a>
 80016b8:	100803ff 	.word	0x100803ff
 80016bc:	08017a90 	.word	0x08017a90
 80016c0:	08017a80 	.word	0x08017a80
 80016c4:	f8c9 7000 	str.w	r7, [r9]
 80016c8:	2f00      	cmp	r7, #0
 80016ca:	f43f ae72 	beq.w	80013b2 <d_name+0x3a>
 80016ce:	f1b8 0f00 	cmp.w	r8, #0
 80016d2:	d004      	beq.n	80016de <d_name+0x366>
 80016d4:	9b03      	ldr	r3, [sp, #12]
 80016d6:	f8c8 3004 	str.w	r3, [r8, #4]
 80016da:	f8cd 800c 	str.w	r8, [sp, #12]
 80016de:	7813      	ldrb	r3, [r2, #0]
 80016e0:	2b45      	cmp	r3, #69	; 0x45
 80016e2:	f47f ae66 	bne.w	80013b2 <d_name+0x3a>
 80016e6:	3201      	adds	r2, #1
 80016e8:	60ea      	str	r2, [r5, #12]
 80016ea:	9a03      	ldr	r2, [sp, #12]
 80016ec:	e669      	b.n	80013c2 <d_name+0x4a>
 80016ee:	bf00      	nop

080016f0 <d_type>:
 80016f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016f4:	68c2      	ldr	r2, [r0, #12]
 80016f6:	7813      	ldrb	r3, [r2, #0]
 80016f8:	2b72      	cmp	r3, #114	; 0x72
 80016fa:	b083      	sub	sp, #12
 80016fc:	4604      	mov	r4, r0
 80016fe:	d058      	beq.n	80017b2 <d_type+0xc2>
 8001700:	2b56      	cmp	r3, #86	; 0x56
 8001702:	d056      	beq.n	80017b2 <d_type+0xc2>
 8001704:	2b4b      	cmp	r3, #75	; 0x4b
 8001706:	d054      	beq.n	80017b2 <d_type+0xc2>
 8001708:	2b44      	cmp	r3, #68	; 0x44
 800170a:	f000 809f 	beq.w	800184c <d_type+0x15c>
 800170e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8001712:	294a      	cmp	r1, #74	; 0x4a
 8001714:	f200 808a 	bhi.w	800182c <d_type+0x13c>
 8001718:	e8df f011 	tbh	[pc, r1, lsl #1]
 800171c:	012a012a 	.word	0x012a012a
 8001720:	012a012a 	.word	0x012a012a
 8001724:	012a012a 	.word	0x012a012a
 8001728:	012a012a 	.word	0x012a012a
 800172c:	012a012a 	.word	0x012a012a
 8001730:	00880088 	.word	0x00880088
 8001734:	00880088 	.word	0x00880088
 8001738:	00880088 	.word	0x00880088
 800173c:	020b0088 	.word	0x020b0088
 8001740:	01520088 	.word	0x01520088
 8001744:	00880088 	.word	0x00880088
 8001748:	0160014c 	.word	0x0160014c
 800174c:	00880088 	.word	0x00880088
 8001750:	00880088 	.word	0x00880088
 8001754:	016e0088 	.word	0x016e0088
 8001758:	0186012a 	.word	0x0186012a
 800175c:	008801c3 	.word	0x008801c3
 8001760:	01a20194 	.word	0x01a20194
 8001764:	01f301d1 	.word	0x01f301d1
 8001768:	00880088 	.word	0x00880088
 800176c:	00880088 	.word	0x00880088
 8001770:	0088012a 	.word	0x0088012a
 8001774:	00880088 	.word	0x00880088
 8001778:	00880088 	.word	0x00880088
 800177c:	010c0088 	.word	0x010c0088
 8001780:	010c010c 	.word	0x010c010c
 8001784:	010c010c 	.word	0x010c010c
 8001788:	010c010c 	.word	0x010c010c
 800178c:	010c010c 	.word	0x010c010c
 8001790:	0088010c 	.word	0x0088010c
 8001794:	010c010c 	.word	0x010c010c
 8001798:	010c010c 	.word	0x010c010c
 800179c:	00880088 	.word	0x00880088
 80017a0:	010c0088 	.word	0x010c0088
 80017a4:	013e010c 	.word	0x013e010c
 80017a8:	010c010c 	.word	0x010c010c
 80017ac:	010c010c 	.word	0x010c010c
 80017b0:	010c      	.short	0x010c
 80017b2:	2200      	movs	r2, #0
 80017b4:	a901      	add	r1, sp, #4
 80017b6:	4620      	mov	r0, r4
 80017b8:	f7fe fd56 	bl	8000268 <d_cv_qualifiers>
 80017bc:	4605      	mov	r5, r0
 80017be:	2800      	cmp	r0, #0
 80017c0:	d034      	beq.n	800182c <d_type+0x13c>
 80017c2:	68e3      	ldr	r3, [r4, #12]
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b46      	cmp	r3, #70	; 0x46
 80017c8:	4620      	mov	r0, r4
 80017ca:	d034      	beq.n	8001836 <d_type+0x146>
 80017cc:	f7ff ff90 	bl	80016f0 <d_type>
 80017d0:	6028      	str	r0, [r5, #0]
 80017d2:	b358      	cbz	r0, 800182c <d_type+0x13c>
 80017d4:	7803      	ldrb	r3, [r0, #0]
 80017d6:	3b1f      	subs	r3, #31
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d930      	bls.n	800183e <d_type+0x14e>
 80017dc:	9a01      	ldr	r2, [sp, #4]
 80017de:	b32a      	cbz	r2, 800182c <d_type+0x13c>
 80017e0:	6a23      	ldr	r3, [r4, #32]
 80017e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80017e4:	428b      	cmp	r3, r1
 80017e6:	da21      	bge.n	800182c <d_type+0x13c>
 80017e8:	69e0      	ldr	r0, [r4, #28]
 80017ea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80017ee:	9d01      	ldr	r5, [sp, #4]
 80017f0:	1c59      	adds	r1, r3, #1
 80017f2:	4628      	mov	r0, r5
 80017f4:	6221      	str	r1, [r4, #32]
 80017f6:	b003      	add	sp, #12
 80017f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80017fc:	2301      	movs	r3, #1
 80017fe:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8001800:	6343      	str	r3, [r0, #52]	; 0x34
 8001802:	f7ff fb51 	bl	8000ea8 <d_expression_1>
 8001806:	6365      	str	r5, [r4, #52]	; 0x34
 8001808:	4602      	mov	r2, r0
 800180a:	2300      	movs	r3, #0
 800180c:	2142      	movs	r1, #66	; 0x42
 800180e:	4620      	mov	r0, r4
 8001810:	f7fe fcde 	bl	80001d0 <d_make_comp>
 8001814:	4605      	mov	r5, r0
 8001816:	9001      	str	r0, [sp, #4]
 8001818:	b140      	cbz	r0, 800182c <d_type+0x13c>
 800181a:	68e3      	ldr	r3, [r4, #12]
 800181c:	781a      	ldrb	r2, [r3, #0]
 800181e:	b12a      	cbz	r2, 800182c <d_type+0x13c>
 8001820:	1c5a      	adds	r2, r3, #1
 8001822:	60e2      	str	r2, [r4, #12]
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b45      	cmp	r3, #69	; 0x45
 8001828:	f000 80aa 	beq.w	8001980 <d_type+0x290>
 800182c:	2500      	movs	r5, #0
 800182e:	4628      	mov	r0, r5
 8001830:	b003      	add	sp, #12
 8001832:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001836:	f000 fd53 	bl	80022e0 <d_function_type>
 800183a:	6028      	str	r0, [r5, #0]
 800183c:	e7c9      	b.n	80017d2 <d_type+0xe2>
 800183e:	9a01      	ldr	r2, [sp, #4]
 8001840:	6843      	ldr	r3, [r0, #4]
 8001842:	6042      	str	r2, [r0, #4]
 8001844:	682a      	ldr	r2, [r5, #0]
 8001846:	9201      	str	r2, [sp, #4]
 8001848:	602b      	str	r3, [r5, #0]
 800184a:	e7c7      	b.n	80017dc <d_type+0xec>
 800184c:	7853      	ldrb	r3, [r2, #1]
 800184e:	2b78      	cmp	r3, #120	; 0x78
 8001850:	d0af      	beq.n	80017b2 <d_type+0xc2>
 8001852:	1c53      	adds	r3, r2, #1
 8001854:	60c3      	str	r3, [r0, #12]
 8001856:	7853      	ldrb	r3, [r2, #1]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0e7      	beq.n	800182c <d_type+0x13c>
 800185c:	1c93      	adds	r3, r2, #2
 800185e:	60c3      	str	r3, [r0, #12]
 8001860:	7853      	ldrb	r3, [r2, #1]
 8001862:	3b46      	subs	r3, #70	; 0x46
 8001864:	2b30      	cmp	r3, #48	; 0x30
 8001866:	d8e1      	bhi.n	800182c <d_type+0x13c>
 8001868:	a101      	add	r1, pc, #4	; (adr r1, 8001870 <d_type+0x180>)
 800186a:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800186e:	bf00      	nop
 8001870:	08001d5b 	.word	0x08001d5b
 8001874:	0800182d 	.word	0x0800182d
 8001878:	0800182d 	.word	0x0800182d
 800187c:	0800182d 	.word	0x0800182d
 8001880:	0800182d 	.word	0x0800182d
 8001884:	0800182d 	.word	0x0800182d
 8001888:	0800182d 	.word	0x0800182d
 800188c:	0800182d 	.word	0x0800182d
 8001890:	0800182d 	.word	0x0800182d
 8001894:	0800182d 	.word	0x0800182d
 8001898:	0800182d 	.word	0x0800182d
 800189c:	0800182d 	.word	0x0800182d
 80018a0:	0800182d 	.word	0x0800182d
 80018a4:	0800182d 	.word	0x0800182d
 80018a8:	080017fd 	.word	0x080017fd
 80018ac:	0800182d 	.word	0x0800182d
 80018b0:	0800182d 	.word	0x0800182d
 80018b4:	0800182d 	.word	0x0800182d
 80018b8:	0800182d 	.word	0x0800182d
 80018bc:	0800182d 	.word	0x0800182d
 80018c0:	0800182d 	.word	0x0800182d
 80018c4:	0800182d 	.word	0x0800182d
 80018c8:	0800182d 	.word	0x0800182d
 80018cc:	0800182d 	.word	0x0800182d
 80018d0:	0800182d 	.word	0x0800182d
 80018d4:	0800182d 	.word	0x0800182d
 80018d8:	0800182d 	.word	0x0800182d
 80018dc:	08001d2f 	.word	0x08001d2f
 80018e0:	0800182d 	.word	0x0800182d
 80018e4:	08001d03 	.word	0x08001d03
 80018e8:	08001ce3 	.word	0x08001ce3
 80018ec:	08001cb9 	.word	0x08001cb9
 80018f0:	08001c8b 	.word	0x08001c8b
 80018f4:	0800182d 	.word	0x0800182d
 80018f8:	08001c5d 	.word	0x08001c5d
 80018fc:	08001c39 	.word	0x08001c39
 8001900:	0800182d 	.word	0x0800182d
 8001904:	0800182d 	.word	0x0800182d
 8001908:	0800182d 	.word	0x0800182d
 800190c:	0800182d 	.word	0x0800182d
 8001910:	08001bff 	.word	0x08001bff
 8001914:	0800182d 	.word	0x0800182d
 8001918:	08001be9 	.word	0x08001be9
 800191c:	0800182d 	.word	0x0800182d
 8001920:	0800182d 	.word	0x0800182d
 8001924:	08001bbb 	.word	0x08001bbb
 8001928:	080017fd 	.word	0x080017fd
 800192c:	0800182d 	.word	0x0800182d
 8001930:	08001b85 	.word	0x08001b85
 8001934:	6960      	ldr	r0, [r4, #20]
 8001936:	69a5      	ldr	r5, [r4, #24]
 8001938:	49bc      	ldr	r1, [pc, #752]	; (8001c2c <d_type+0x53c>)
 800193a:	3b61      	subs	r3, #97	; 0x61
 800193c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001940:	42a8      	cmp	r0, r5
 8001942:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8001946:	f280 823a 	bge.w	8001dbe <d_type+0x6ce>
 800194a:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 800194e:	6926      	ldr	r6, [r4, #16]
 8001950:	0089      	lsls	r1, r1, #2
 8001952:	3001      	adds	r0, #1
 8001954:	1875      	adds	r5, r6, r1
 8001956:	6160      	str	r0, [r4, #20]
 8001958:	f000 8231 	beq.w	8001dbe <d_type+0x6ce>
 800195c:	2027      	movs	r0, #39	; 0x27
 800195e:	5470      	strb	r0, [r6, r1]
 8001960:	606b      	str	r3, [r5, #4]
 8001962:	6859      	ldr	r1, [r3, #4]
 8001964:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001966:	3201      	adds	r2, #1
 8001968:	440b      	add	r3, r1
 800196a:	60e2      	str	r2, [r4, #12]
 800196c:	6323      	str	r3, [r4, #48]	; 0x30
 800196e:	e75e      	b.n	800182e <d_type+0x13e>
 8001970:	4620      	mov	r0, r4
 8001972:	f7ff fd01 	bl	8001378 <d_name>
 8001976:	4605      	mov	r5, r0
 8001978:	9001      	str	r0, [sp, #4]
 800197a:	2d00      	cmp	r5, #0
 800197c:	f43f af56 	beq.w	800182c <d_type+0x13c>
 8001980:	6a23      	ldr	r3, [r4, #32]
 8001982:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001984:	4293      	cmp	r3, r2
 8001986:	f6bf af51 	bge.w	800182c <d_type+0x13c>
 800198a:	69e1      	ldr	r1, [r4, #28]
 800198c:	1c5a      	adds	r2, r3, #1
 800198e:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
 8001992:	9d01      	ldr	r5, [sp, #4]
 8001994:	6222      	str	r2, [r4, #32]
 8001996:	e74a      	b.n	800182e <d_type+0x13e>
 8001998:	3201      	adds	r2, #1
 800199a:	60e2      	str	r2, [r4, #12]
 800199c:	4620      	mov	r0, r4
 800199e:	f7fe fde9 	bl	8000574 <d_source_name>
 80019a2:	2300      	movs	r3, #0
 80019a4:	4602      	mov	r2, r0
 80019a6:	2128      	movs	r1, #40	; 0x28
 80019a8:	4620      	mov	r0, r4
 80019aa:	f7fe fc11 	bl	80001d0 <d_make_comp>
 80019ae:	4605      	mov	r5, r0
 80019b0:	9001      	str	r0, [sp, #4]
 80019b2:	e7e2      	b.n	800197a <d_type+0x28a>
 80019b4:	4620      	mov	r0, r4
 80019b6:	f000 fc93 	bl	80022e0 <d_function_type>
 80019ba:	4605      	mov	r5, r0
 80019bc:	9001      	str	r0, [sp, #4]
 80019be:	e7dc      	b.n	800197a <d_type+0x28a>
 80019c0:	3201      	adds	r2, #1
 80019c2:	60e2      	str	r2, [r4, #12]
 80019c4:	4620      	mov	r0, r4
 80019c6:	f7ff fe93 	bl	80016f0 <d_type>
 80019ca:	2300      	movs	r3, #0
 80019cc:	4602      	mov	r2, r0
 80019ce:	2125      	movs	r1, #37	; 0x25
 80019d0:	4620      	mov	r0, r4
 80019d2:	f7fe fbfd 	bl	80001d0 <d_make_comp>
 80019d6:	4605      	mov	r5, r0
 80019d8:	9001      	str	r0, [sp, #4]
 80019da:	e7ce      	b.n	800197a <d_type+0x28a>
 80019dc:	3201      	adds	r2, #1
 80019de:	60e2      	str	r2, [r4, #12]
 80019e0:	4620      	mov	r0, r4
 80019e2:	f7ff fe85 	bl	80016f0 <d_type>
 80019e6:	2300      	movs	r3, #0
 80019e8:	4602      	mov	r2, r0
 80019ea:	2126      	movs	r1, #38	; 0x26
 80019ec:	4620      	mov	r0, r4
 80019ee:	f7fe fbef 	bl	80001d0 <d_make_comp>
 80019f2:	4605      	mov	r5, r0
 80019f4:	9001      	str	r0, [sp, #4]
 80019f6:	e7c0      	b.n	800197a <d_type+0x28a>
 80019f8:	3201      	adds	r2, #1
 80019fa:	60e2      	str	r2, [r4, #12]
 80019fc:	4620      	mov	r0, r4
 80019fe:	f7ff fe77 	bl	80016f0 <d_type>
 8001a02:	4605      	mov	r5, r0
 8001a04:	2800      	cmp	r0, #0
 8001a06:	f000 80bb 	beq.w	8001b80 <d_type+0x490>
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	f7ff fe70 	bl	80016f0 <d_type>
 8001a10:	2800      	cmp	r0, #0
 8001a12:	f000 80b5 	beq.w	8001b80 <d_type+0x490>
 8001a16:	4603      	mov	r3, r0
 8001a18:	462a      	mov	r2, r5
 8001a1a:	212b      	movs	r1, #43	; 0x2b
 8001a1c:	4620      	mov	r0, r4
 8001a1e:	f7fe fbd7 	bl	80001d0 <d_make_comp>
 8001a22:	4605      	mov	r5, r0
 8001a24:	9501      	str	r5, [sp, #4]
 8001a26:	e7a8      	b.n	800197a <d_type+0x28a>
 8001a28:	3201      	adds	r2, #1
 8001a2a:	60e2      	str	r2, [r4, #12]
 8001a2c:	4620      	mov	r0, r4
 8001a2e:	f7ff fe5f 	bl	80016f0 <d_type>
 8001a32:	2300      	movs	r3, #0
 8001a34:	4602      	mov	r2, r0
 8001a36:	2124      	movs	r1, #36	; 0x24
 8001a38:	4620      	mov	r0, r4
 8001a3a:	f7fe fbc9 	bl	80001d0 <d_make_comp>
 8001a3e:	4605      	mov	r5, r0
 8001a40:	9001      	str	r0, [sp, #4]
 8001a42:	e79a      	b.n	800197a <d_type+0x28a>
 8001a44:	3201      	adds	r2, #1
 8001a46:	60e2      	str	r2, [r4, #12]
 8001a48:	4620      	mov	r0, r4
 8001a4a:	f7ff fe51 	bl	80016f0 <d_type>
 8001a4e:	2300      	movs	r3, #0
 8001a50:	4602      	mov	r2, r0
 8001a52:	2123      	movs	r1, #35	; 0x23
 8001a54:	4620      	mov	r0, r4
 8001a56:	f7fe fbbb 	bl	80001d0 <d_make_comp>
 8001a5a:	4605      	mov	r5, r0
 8001a5c:	9001      	str	r0, [sp, #4]
 8001a5e:	e78c      	b.n	800197a <d_type+0x28a>
 8001a60:	7853      	ldrb	r3, [r2, #1]
 8001a62:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001a66:	2a09      	cmp	r2, #9
 8001a68:	d905      	bls.n	8001a76 <d_type+0x386>
 8001a6a:	2b5f      	cmp	r3, #95	; 0x5f
 8001a6c:	d003      	beq.n	8001a76 <d_type+0x386>
 8001a6e:	3b41      	subs	r3, #65	; 0x41
 8001a70:	2b19      	cmp	r3, #25
 8001a72:	f200 81c3 	bhi.w	8001dfc <d_type+0x70c>
 8001a76:	2100      	movs	r1, #0
 8001a78:	4620      	mov	r0, r4
 8001a7a:	f7fe fdf3 	bl	8000664 <d_substitution>
 8001a7e:	68e3      	ldr	r3, [r4, #12]
 8001a80:	9001      	str	r0, [sp, #4]
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b49      	cmp	r3, #73	; 0x49
 8001a86:	4605      	mov	r5, r0
 8001a88:	f47f aed1 	bne.w	800182e <d_type+0x13e>
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	f7ff fc69 	bl	8001364 <d_template_args>
 8001a92:	462a      	mov	r2, r5
 8001a94:	4603      	mov	r3, r0
 8001a96:	2104      	movs	r1, #4
 8001a98:	4620      	mov	r0, r4
 8001a9a:	f7fe fb99 	bl	80001d0 <d_make_comp>
 8001a9e:	4605      	mov	r5, r0
 8001aa0:	e7c0      	b.n	8001a24 <d_type+0x334>
 8001aa2:	3201      	adds	r2, #1
 8001aa4:	60e2      	str	r2, [r4, #12]
 8001aa6:	4620      	mov	r0, r4
 8001aa8:	f7ff fe22 	bl	80016f0 <d_type>
 8001aac:	2300      	movs	r3, #0
 8001aae:	4602      	mov	r2, r0
 8001ab0:	2122      	movs	r1, #34	; 0x22
 8001ab2:	4620      	mov	r0, r4
 8001ab4:	f7fe fb8c 	bl	80001d0 <d_make_comp>
 8001ab8:	4605      	mov	r5, r0
 8001aba:	9001      	str	r0, [sp, #4]
 8001abc:	e75d      	b.n	800197a <d_type+0x28a>
 8001abe:	4620      	mov	r0, r4
 8001ac0:	f7fe fd36 	bl	8000530 <d_template_param>
 8001ac4:	68e6      	ldr	r6, [r4, #12]
 8001ac6:	9001      	str	r0, [sp, #4]
 8001ac8:	7833      	ldrb	r3, [r6, #0]
 8001aca:	2b49      	cmp	r3, #73	; 0x49
 8001acc:	4605      	mov	r5, r0
 8001ace:	f47f af54 	bne.w	800197a <d_type+0x28a>
 8001ad2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f040 81a9 	bne.w	8001e2c <d_type+0x73c>
 8001ada:	2800      	cmp	r0, #0
 8001adc:	f43f aea6 	beq.w	800182c <d_type+0x13c>
 8001ae0:	6a23      	ldr	r3, [r4, #32]
 8001ae2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	f6bf aea1 	bge.w	800182c <d_type+0x13c>
 8001aea:	69e1      	ldr	r1, [r4, #28]
 8001aec:	1c5a      	adds	r2, r3, #1
 8001aee:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8001af2:	6222      	str	r2, [r4, #32]
 8001af4:	4620      	mov	r0, r4
 8001af6:	9d01      	ldr	r5, [sp, #4]
 8001af8:	f7ff fc34 	bl	8001364 <d_template_args>
 8001afc:	462a      	mov	r2, r5
 8001afe:	4603      	mov	r3, r0
 8001b00:	e7c9      	b.n	8001a96 <d_type+0x3a6>
 8001b02:	3201      	adds	r2, #1
 8001b04:	60e2      	str	r2, [r4, #12]
 8001b06:	4620      	mov	r0, r4
 8001b08:	f7fe fd34 	bl	8000574 <d_source_name>
 8001b0c:	68e3      	ldr	r3, [r4, #12]
 8001b0e:	9001      	str	r0, [sp, #4]
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b49      	cmp	r3, #73	; 0x49
 8001b14:	4605      	mov	r5, r0
 8001b16:	f000 817e 	beq.w	8001e16 <d_type+0x726>
 8001b1a:	4620      	mov	r0, r4
 8001b1c:	f7ff fde8 	bl	80016f0 <d_type>
 8001b20:	9b01      	ldr	r3, [sp, #4]
 8001b22:	4602      	mov	r2, r0
 8001b24:	2121      	movs	r1, #33	; 0x21
 8001b26:	4620      	mov	r0, r4
 8001b28:	f7fe fb52 	bl	80001d0 <d_make_comp>
 8001b2c:	4605      	mov	r5, r0
 8001b2e:	9001      	str	r0, [sp, #4]
 8001b30:	e723      	b.n	800197a <d_type+0x28a>
 8001b32:	1c51      	adds	r1, r2, #1
 8001b34:	60e1      	str	r1, [r4, #12]
 8001b36:	7853      	ldrb	r3, [r2, #1]
 8001b38:	2b5f      	cmp	r3, #95	; 0x5f
 8001b3a:	f000 8144 	beq.w	8001dc6 <d_type+0x6d6>
 8001b3e:	3b30      	subs	r3, #48	; 0x30
 8001b40:	2b09      	cmp	r3, #9
 8001b42:	f200 814e 	bhi.w	8001de2 <d_type+0x6f2>
 8001b46:	460b      	mov	r3, r1
 8001b48:	3301      	adds	r3, #1
 8001b4a:	60e3      	str	r3, [r4, #12]
 8001b4c:	781a      	ldrb	r2, [r3, #0]
 8001b4e:	3a30      	subs	r2, #48	; 0x30
 8001b50:	2a09      	cmp	r2, #9
 8001b52:	d9f9      	bls.n	8001b48 <d_type+0x458>
 8001b54:	6962      	ldr	r2, [r4, #20]
 8001b56:	69a0      	ldr	r0, [r4, #24]
 8001b58:	4282      	cmp	r2, r0
 8001b5a:	da11      	bge.n	8001b80 <d_type+0x490>
 8001b5c:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 8001b60:	6926      	ldr	r6, [r4, #16]
 8001b62:	0080      	lsls	r0, r0, #2
 8001b64:	3201      	adds	r2, #1
 8001b66:	1835      	adds	r5, r6, r0
 8001b68:	6162      	str	r2, [r4, #20]
 8001b6a:	d009      	beq.n	8001b80 <d_type+0x490>
 8001b6c:	1a5a      	subs	r2, r3, r1
 8001b6e:	d007      	beq.n	8001b80 <d_type+0x490>
 8001b70:	2700      	movs	r7, #0
 8001b72:	5437      	strb	r7, [r6, r0]
 8001b74:	6069      	str	r1, [r5, #4]
 8001b76:	60aa      	str	r2, [r5, #8]
 8001b78:	781a      	ldrb	r2, [r3, #0]
 8001b7a:	2a5f      	cmp	r2, #95	; 0x5f
 8001b7c:	f000 8190 	beq.w	8001ea0 <d_type+0x7b0>
 8001b80:	2500      	movs	r5, #0
 8001b82:	e74f      	b.n	8001a24 <d_type+0x334>
 8001b84:	7893      	ldrb	r3, [r2, #2]
 8001b86:	2b5f      	cmp	r3, #95	; 0x5f
 8001b88:	f000 8180 	beq.w	8001e8c <d_type+0x79c>
 8001b8c:	f7fe fc9c 	bl	80004c8 <d_number_component>
 8001b90:	4605      	mov	r5, r0
 8001b92:	2d00      	cmp	r5, #0
 8001b94:	f43f af46 	beq.w	8001a24 <d_type+0x334>
 8001b98:	68e3      	ldr	r3, [r4, #12]
 8001b9a:	781a      	ldrb	r2, [r3, #0]
 8001b9c:	2a5f      	cmp	r2, #95	; 0x5f
 8001b9e:	d1ef      	bne.n	8001b80 <d_type+0x490>
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	60e3      	str	r3, [r4, #12]
 8001ba4:	4620      	mov	r0, r4
 8001ba6:	f7ff fda3 	bl	80016f0 <d_type>
 8001baa:	462a      	mov	r2, r5
 8001bac:	4603      	mov	r3, r0
 8001bae:	212d      	movs	r1, #45	; 0x2d
 8001bb0:	4620      	mov	r0, r4
 8001bb2:	f7fe fb0d 	bl	80001d0 <d_make_comp>
 8001bb6:	4605      	mov	r5, r0
 8001bb8:	e734      	b.n	8001a24 <d_type+0x334>
 8001bba:	6942      	ldr	r2, [r0, #20]
 8001bbc:	6983      	ldr	r3, [r0, #24]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	f280 80fd 	bge.w	8001dbe <d_type+0x6ce>
 8001bc4:	230c      	movs	r3, #12
 8001bc6:	6901      	ldr	r1, [r0, #16]
 8001bc8:	fb03 f302 	mul.w	r3, r3, r2
 8001bcc:	18cd      	adds	r5, r1, r3
 8001bce:	f102 0201 	add.w	r2, r2, #1
 8001bd2:	6142      	str	r2, [r0, #20]
 8001bd4:	f000 80f3 	beq.w	8001dbe <d_type+0x6ce>
 8001bd8:	4a15      	ldr	r2, [pc, #84]	; (8001c30 <d_type+0x540>)
 8001bda:	2027      	movs	r0, #39	; 0x27
 8001bdc:	54c8      	strb	r0, [r1, r3]
 8001bde:	606a      	str	r2, [r5, #4]
 8001be0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001be2:	3308      	adds	r3, #8
 8001be4:	6323      	str	r3, [r4, #48]	; 0x30
 8001be6:	e622      	b.n	800182e <d_type+0x13e>
 8001be8:	f7ff fd82 	bl	80016f0 <d_type>
 8001bec:	2300      	movs	r3, #0
 8001bee:	4602      	mov	r2, r0
 8001bf0:	214a      	movs	r1, #74	; 0x4a
 8001bf2:	4620      	mov	r0, r4
 8001bf4:	f7fe faec 	bl	80001d0 <d_make_comp>
 8001bf8:	4605      	mov	r5, r0
 8001bfa:	9001      	str	r0, [sp, #4]
 8001bfc:	e6bd      	b.n	800197a <d_type+0x28a>
 8001bfe:	6942      	ldr	r2, [r0, #20]
 8001c00:	6983      	ldr	r3, [r0, #24]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	f280 80db 	bge.w	8001dbe <d_type+0x6ce>
 8001c08:	230c      	movs	r3, #12
 8001c0a:	6901      	ldr	r1, [r0, #16]
 8001c0c:	fb03 f302 	mul.w	r3, r3, r2
 8001c10:	18cd      	adds	r5, r1, r3
 8001c12:	f102 0201 	add.w	r2, r2, #1
 8001c16:	6142      	str	r2, [r0, #20]
 8001c18:	f000 80d1 	beq.w	8001dbe <d_type+0x6ce>
 8001c1c:	2027      	movs	r0, #39	; 0x27
 8001c1e:	4a05      	ldr	r2, [pc, #20]	; (8001c34 <d_type+0x544>)
 8001c20:	54c8      	strb	r0, [r1, r3]
 8001c22:	606a      	str	r2, [r5, #4]
 8001c24:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c26:	3311      	adds	r3, #17
 8001c28:	6323      	str	r3, [r4, #48]	; 0x30
 8001c2a:	e600      	b.n	800182e <d_type+0x13e>
 8001c2c:	08016dcc 	.word	0x08016dcc
 8001c30:	08017024 	.word	0x08017024
 8001c34:	0801704c 	.word	0x0801704c
 8001c38:	6942      	ldr	r2, [r0, #20]
 8001c3a:	6983      	ldr	r3, [r0, #24]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	f280 80be 	bge.w	8001dbe <d_type+0x6ce>
 8001c42:	230c      	movs	r3, #12
 8001c44:	6901      	ldr	r1, [r0, #16]
 8001c46:	fb03 f302 	mul.w	r3, r3, r2
 8001c4a:	18cd      	adds	r5, r1, r3
 8001c4c:	f102 0201 	add.w	r2, r2, #1
 8001c50:	6142      	str	r2, [r0, #20]
 8001c52:	f000 80b4 	beq.w	8001dbe <d_type+0x6ce>
 8001c56:	2027      	movs	r0, #39	; 0x27
 8001c58:	4a92      	ldr	r2, [pc, #584]	; (8001ea4 <d_type+0x7b4>)
 8001c5a:	e7bf      	b.n	8001bdc <d_type+0x4ec>
 8001c5c:	6942      	ldr	r2, [r0, #20]
 8001c5e:	6983      	ldr	r3, [r0, #24]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	f280 80ac 	bge.w	8001dbe <d_type+0x6ce>
 8001c66:	230c      	movs	r3, #12
 8001c68:	6901      	ldr	r1, [r0, #16]
 8001c6a:	fb03 f302 	mul.w	r3, r3, r2
 8001c6e:	18cd      	adds	r5, r1, r3
 8001c70:	f102 0201 	add.w	r2, r2, #1
 8001c74:	6142      	str	r2, [r0, #20]
 8001c76:	f000 80a2 	beq.w	8001dbe <d_type+0x6ce>
 8001c7a:	2027      	movs	r0, #39	; 0x27
 8001c7c:	4a8a      	ldr	r2, [pc, #552]	; (8001ea8 <d_type+0x7b8>)
 8001c7e:	54c8      	strb	r0, [r1, r3]
 8001c80:	606a      	str	r2, [r5, #4]
 8001c82:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c84:	3304      	adds	r3, #4
 8001c86:	6323      	str	r3, [r4, #48]	; 0x30
 8001c88:	e5d1      	b.n	800182e <d_type+0x13e>
 8001c8a:	6942      	ldr	r2, [r0, #20]
 8001c8c:	6983      	ldr	r3, [r0, #24]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	f280 8095 	bge.w	8001dbe <d_type+0x6ce>
 8001c94:	230c      	movs	r3, #12
 8001c96:	6901      	ldr	r1, [r0, #16]
 8001c98:	fb03 f302 	mul.w	r3, r3, r2
 8001c9c:	18cd      	adds	r5, r1, r3
 8001c9e:	f102 0201 	add.w	r2, r2, #1
 8001ca2:	6142      	str	r2, [r0, #20]
 8001ca4:	f000 808b 	beq.w	8001dbe <d_type+0x6ce>
 8001ca8:	4a80      	ldr	r2, [pc, #512]	; (8001eac <d_type+0x7bc>)
 8001caa:	2027      	movs	r0, #39	; 0x27
 8001cac:	54c8      	strb	r0, [r1, r3]
 8001cae:	606a      	str	r2, [r5, #4]
 8001cb0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001cb2:	3309      	adds	r3, #9
 8001cb4:	6323      	str	r3, [r4, #48]	; 0x30
 8001cb6:	e5ba      	b.n	800182e <d_type+0x13e>
 8001cb8:	6942      	ldr	r2, [r0, #20]
 8001cba:	6983      	ldr	r3, [r0, #24]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	da7e      	bge.n	8001dbe <d_type+0x6ce>
 8001cc0:	230c      	movs	r3, #12
 8001cc2:	6901      	ldr	r1, [r0, #16]
 8001cc4:	fb03 f302 	mul.w	r3, r3, r2
 8001cc8:	18cd      	adds	r5, r1, r3
 8001cca:	f102 0201 	add.w	r2, r2, #1
 8001cce:	6142      	str	r2, [r0, #20]
 8001cd0:	d075      	beq.n	8001dbe <d_type+0x6ce>
 8001cd2:	2027      	movs	r0, #39	; 0x27
 8001cd4:	4a76      	ldr	r2, [pc, #472]	; (8001eb0 <d_type+0x7c0>)
 8001cd6:	54c8      	strb	r0, [r1, r3]
 8001cd8:	606a      	str	r2, [r5, #4]
 8001cda:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001cdc:	330a      	adds	r3, #10
 8001cde:	6323      	str	r3, [r4, #48]	; 0x30
 8001ce0:	e5a5      	b.n	800182e <d_type+0x13e>
 8001ce2:	6942      	ldr	r2, [r0, #20]
 8001ce4:	6983      	ldr	r3, [r0, #24]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	da69      	bge.n	8001dbe <d_type+0x6ce>
 8001cea:	230c      	movs	r3, #12
 8001cec:	6901      	ldr	r1, [r0, #16]
 8001cee:	fb03 f302 	mul.w	r3, r3, r2
 8001cf2:	18cd      	adds	r5, r1, r3
 8001cf4:	f102 0201 	add.w	r2, r2, #1
 8001cf8:	6142      	str	r2, [r0, #20]
 8001cfa:	d060      	beq.n	8001dbe <d_type+0x6ce>
 8001cfc:	2027      	movs	r0, #39	; 0x27
 8001cfe:	4a6d      	ldr	r2, [pc, #436]	; (8001eb4 <d_type+0x7c4>)
 8001d00:	e7d4      	b.n	8001cac <d_type+0x5bc>
 8001d02:	6942      	ldr	r2, [r0, #20]
 8001d04:	6983      	ldr	r3, [r0, #24]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	f6bf ad90 	bge.w	800182c <d_type+0x13c>
 8001d0c:	230c      	movs	r3, #12
 8001d0e:	6901      	ldr	r1, [r0, #16]
 8001d10:	fb03 f302 	mul.w	r3, r3, r2
 8001d14:	18cd      	adds	r5, r1, r3
 8001d16:	f102 0201 	add.w	r2, r2, #1
 8001d1a:	6142      	str	r2, [r0, #20]
 8001d1c:	f43f ad87 	beq.w	800182e <d_type+0x13e>
 8001d20:	2000      	movs	r0, #0
 8001d22:	54c8      	strb	r0, [r1, r3]
 8001d24:	4a64      	ldr	r2, [pc, #400]	; (8001eb8 <d_type+0x7c8>)
 8001d26:	606a      	str	r2, [r5, #4]
 8001d28:	230e      	movs	r3, #14
 8001d2a:	60ab      	str	r3, [r5, #8]
 8001d2c:	e57f      	b.n	800182e <d_type+0x13e>
 8001d2e:	6942      	ldr	r2, [r0, #20]
 8001d30:	6983      	ldr	r3, [r0, #24]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	f6bf ad7a 	bge.w	800182c <d_type+0x13c>
 8001d38:	230c      	movs	r3, #12
 8001d3a:	6901      	ldr	r1, [r0, #16]
 8001d3c:	fb03 f302 	mul.w	r3, r3, r2
 8001d40:	18cd      	adds	r5, r1, r3
 8001d42:	f102 0201 	add.w	r2, r2, #1
 8001d46:	6142      	str	r2, [r0, #20]
 8001d48:	f43f ad71 	beq.w	800182e <d_type+0x13e>
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	54c8      	strb	r0, [r1, r3]
 8001d50:	4a5a      	ldr	r2, [pc, #360]	; (8001ebc <d_type+0x7cc>)
 8001d52:	606a      	str	r2, [r5, #4]
 8001d54:	2304      	movs	r3, #4
 8001d56:	60ab      	str	r3, [r5, #8]
 8001d58:	e569      	b.n	800182e <d_type+0x13e>
 8001d5a:	6943      	ldr	r3, [r0, #20]
 8001d5c:	6981      	ldr	r1, [r0, #24]
 8001d5e:	428b      	cmp	r3, r1
 8001d60:	da7a      	bge.n	8001e58 <d_type+0x768>
 8001d62:	6900      	ldr	r0, [r0, #16]
 8001d64:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8001d68:	0089      	lsls	r1, r1, #2
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	1845      	adds	r5, r0, r1
 8001d6e:	262c      	movs	r6, #44	; 0x2c
 8001d70:	6163      	str	r3, [r4, #20]
 8001d72:	9501      	str	r5, [sp, #4]
 8001d74:	5446      	strb	r6, [r0, r1]
 8001d76:	7893      	ldrb	r3, [r2, #2]
 8001d78:	3b30      	subs	r3, #48	; 0x30
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b09      	cmp	r3, #9
 8001d7e:	bf94      	ite	ls
 8001d80:	2301      	movls	r3, #1
 8001d82:	2300      	movhi	r3, #0
 8001d84:	812b      	strh	r3, [r5, #8]
 8001d86:	d97b      	bls.n	8001e80 <d_type+0x790>
 8001d88:	4620      	mov	r0, r4
 8001d8a:	f7ff fcb1 	bl	80016f0 <d_type>
 8001d8e:	9b01      	ldr	r3, [sp, #4]
 8001d90:	6068      	str	r0, [r5, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f43f ad49 	beq.w	800182c <d_type+0x13c>
 8001d9a:	f104 000c 	add.w	r0, r4, #12
 8001d9e:	f7fe fb69 	bl	8000474 <d_number.isra.0>
 8001da2:	68e2      	ldr	r2, [r4, #12]
 8001da4:	7813      	ldrb	r3, [r2, #0]
 8001da6:	b113      	cbz	r3, 8001dae <d_type+0x6be>
 8001da8:	1c53      	adds	r3, r2, #1
 8001daa:	60e3      	str	r3, [r4, #12]
 8001dac:	7813      	ldrb	r3, [r2, #0]
 8001dae:	9d01      	ldr	r5, [sp, #4]
 8001db0:	f1a3 0373 	sub.w	r3, r3, #115	; 0x73
 8001db4:	fab3 f383 	clz	r3, r3
 8001db8:	095b      	lsrs	r3, r3, #5
 8001dba:	816b      	strh	r3, [r5, #10]
 8001dbc:	e537      	b.n	800182e <d_type+0x13e>
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	9301      	str	r3, [sp, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	deff      	udf	#255	; 0xff
 8001dc6:	2500      	movs	r5, #0
 8001dc8:	3101      	adds	r1, #1
 8001dca:	60e1      	str	r1, [r4, #12]
 8001dcc:	4620      	mov	r0, r4
 8001dce:	f7ff fc8f 	bl	80016f0 <d_type>
 8001dd2:	462a      	mov	r2, r5
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	212a      	movs	r1, #42	; 0x2a
 8001dd8:	4620      	mov	r0, r4
 8001dda:	f7fe f9f9 	bl	80001d0 <d_make_comp>
 8001dde:	4605      	mov	r5, r0
 8001de0:	e620      	b.n	8001a24 <d_type+0x334>
 8001de2:	2301      	movs	r3, #1
 8001de4:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8001de6:	6363      	str	r3, [r4, #52]	; 0x34
 8001de8:	4620      	mov	r0, r4
 8001dea:	f7ff f85d 	bl	8000ea8 <d_expression_1>
 8001dee:	6365      	str	r5, [r4, #52]	; 0x34
 8001df0:	4605      	mov	r5, r0
 8001df2:	2800      	cmp	r0, #0
 8001df4:	f43f aec4 	beq.w	8001b80 <d_type+0x490>
 8001df8:	68e3      	ldr	r3, [r4, #12]
 8001dfa:	e6bd      	b.n	8001b78 <d_type+0x488>
 8001dfc:	4620      	mov	r0, r4
 8001dfe:	f7ff fabb 	bl	8001378 <d_name>
 8001e02:	4605      	mov	r5, r0
 8001e04:	9001      	str	r0, [sp, #4]
 8001e06:	2800      	cmp	r0, #0
 8001e08:	f43f ad10 	beq.w	800182c <d_type+0x13c>
 8001e0c:	7803      	ldrb	r3, [r0, #0]
 8001e0e:	2b18      	cmp	r3, #24
 8001e10:	f47f adb6 	bne.w	8001980 <d_type+0x290>
 8001e14:	e50b      	b.n	800182e <d_type+0x13e>
 8001e16:	4620      	mov	r0, r4
 8001e18:	f7ff faa4 	bl	8001364 <d_template_args>
 8001e1c:	462a      	mov	r2, r5
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2104      	movs	r1, #4
 8001e22:	4620      	mov	r0, r4
 8001e24:	f7fe f9d4 	bl	80001d0 <d_make_comp>
 8001e28:	9001      	str	r0, [sp, #4]
 8001e2a:	e676      	b.n	8001b1a <d_type+0x42a>
 8001e2c:	4620      	mov	r0, r4
 8001e2e:	f8d4 9014 	ldr.w	r9, [r4, #20]
 8001e32:	f8d4 8020 	ldr.w	r8, [r4, #32]
 8001e36:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8001e38:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8001e3a:	f7ff fa93 	bl	8001364 <d_template_args>
 8001e3e:	68e2      	ldr	r2, [r4, #12]
 8001e40:	7812      	ldrb	r2, [r2, #0]
 8001e42:	2a49      	cmp	r2, #73	; 0x49
 8001e44:	d00b      	beq.n	8001e5e <d_type+0x76e>
 8001e46:	6325      	str	r5, [r4, #48]	; 0x30
 8001e48:	60e6      	str	r6, [r4, #12]
 8001e4a:	f8c4 9014 	str.w	r9, [r4, #20]
 8001e4e:	f8c4 8020 	str.w	r8, [r4, #32]
 8001e52:	62a7      	str	r7, [r4, #40]	; 0x28
 8001e54:	9d01      	ldr	r5, [sp, #4]
 8001e56:	e590      	b.n	800197a <d_type+0x28a>
 8001e58:	2300      	movs	r3, #0
 8001e5a:	701b      	strb	r3, [r3, #0]
 8001e5c:	deff      	udf	#255	; 0xff
 8001e5e:	9b01      	ldr	r3, [sp, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f43f ace3 	beq.w	800182c <d_type+0x13c>
 8001e66:	6a22      	ldr	r2, [r4, #32]
 8001e68:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001e6a:	428a      	cmp	r2, r1
 8001e6c:	f6bf acde 	bge.w	800182c <d_type+0x13c>
 8001e70:	69e5      	ldr	r5, [r4, #28]
 8001e72:	1c51      	adds	r1, r2, #1
 8001e74:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
 8001e78:	9a01      	ldr	r2, [sp, #4]
 8001e7a:	6221      	str	r1, [r4, #32]
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	e60a      	b.n	8001a96 <d_type+0x3a6>
 8001e80:	f104 000c 	add.w	r0, r4, #12
 8001e84:	f7fe faf6 	bl	8000474 <d_number.isra.0>
 8001e88:	9d01      	ldr	r5, [sp, #4]
 8001e8a:	e77d      	b.n	8001d88 <d_type+0x698>
 8001e8c:	3203      	adds	r2, #3
 8001e8e:	2301      	movs	r3, #1
 8001e90:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8001e92:	60c2      	str	r2, [r0, #12]
 8001e94:	6343      	str	r3, [r0, #52]	; 0x34
 8001e96:	f7ff f807 	bl	8000ea8 <d_expression_1>
 8001e9a:	6366      	str	r6, [r4, #52]	; 0x34
 8001e9c:	4605      	mov	r5, r0
 8001e9e:	e678      	b.n	8001b92 <d_type+0x4a2>
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	e791      	b.n	8001dc8 <d_type+0x6d8>
 8001ea4:	08017038 	.word	0x08017038
 8001ea8:	08017010 	.word	0x08017010
 8001eac:	08016fd4 	.word	0x08016fd4
 8001eb0:	08016ffc 	.word	0x08016ffc
 8001eb4:	08016fe8 	.word	0x08016fe8
 8001eb8:	08017a9c 	.word	0x08017a9c
 8001ebc:	08017a94 	.word	0x08017a94

08001ec0 <d_operator_name>:
 8001ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ec2:	68c3      	ldr	r3, [r0, #12]
 8001ec4:	781e      	ldrb	r6, [r3, #0]
 8001ec6:	4684      	mov	ip, r0
 8001ec8:	b326      	cbz	r6, 8001f14 <d_operator_name+0x54>
 8001eca:	1c5a      	adds	r2, r3, #1
 8001ecc:	60c2      	str	r2, [r0, #12]
 8001ece:	785a      	ldrb	r2, [r3, #1]
 8001ed0:	781e      	ldrb	r6, [r3, #0]
 8001ed2:	2a00      	cmp	r2, #0
 8001ed4:	d058      	beq.n	8001f88 <d_operator_name+0xc8>
 8001ed6:	1c9a      	adds	r2, r3, #2
 8001ed8:	60c2      	str	r2, [r0, #12]
 8001eda:	2e76      	cmp	r6, #118	; 0x76
 8001edc:	4604      	mov	r4, r0
 8001ede:	f893 e001 	ldrb.w	lr, [r3, #1]
 8001ee2:	d043      	beq.n	8001f6c <d_operator_name+0xac>
 8001ee4:	2e63      	cmp	r6, #99	; 0x63
 8001ee6:	d116      	bne.n	8001f16 <d_operator_name+0x56>
 8001ee8:	f1be 0f76 	cmp.w	lr, #118	; 0x76
 8001eec:	d113      	bne.n	8001f16 <d_operator_name+0x56>
 8001eee:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001ef0:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8001ef2:	fab3 f383 	clz	r3, r3
 8001ef6:	095b      	lsrs	r3, r3, #5
 8001ef8:	6383      	str	r3, [r0, #56]	; 0x38
 8001efa:	f7ff fbf9 	bl	80016f0 <d_type>
 8001efe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f00:	4602      	mov	r2, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d052      	beq.n	8001fac <d_operator_name+0xec>
 8001f06:	2300      	movs	r3, #0
 8001f08:	2134      	movs	r1, #52	; 0x34
 8001f0a:	4620      	mov	r0, r4
 8001f0c:	f7fe f960 	bl	80001d0 <d_make_comp>
 8001f10:	63a5      	str	r5, [r4, #56]	; 0x38
 8001f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f14:	46b6      	mov	lr, r6
 8001f16:	4c28      	ldr	r4, [pc, #160]	; (8001fb8 <d_operator_name+0xf8>)
 8001f18:	2043      	movs	r0, #67	; 0x43
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	e004      	b.n	8001f28 <d_operator_name+0x68>
 8001f1e:	bf94      	ite	ls
 8001f20:	1c5a      	addls	r2, r3, #1
 8001f22:	4618      	movhi	r0, r3
 8001f24:	4282      	cmp	r2, r0
 8001f26:	d02d      	beq.n	8001f84 <d_operator_name+0xc4>
 8001f28:	1a83      	subs	r3, r0, r2
 8001f2a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8001f2e:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8001f32:	0119      	lsls	r1, r3, #4
 8001f34:	1867      	adds	r7, r4, r1
 8001f36:	5861      	ldr	r1, [r4, r1]
 8001f38:	780d      	ldrb	r5, [r1, #0]
 8001f3a:	42b5      	cmp	r5, r6
 8001f3c:	d1ef      	bne.n	8001f1e <d_operator_name+0x5e>
 8001f3e:	7849      	ldrb	r1, [r1, #1]
 8001f40:	4571      	cmp	r1, lr
 8001f42:	d1ec      	bne.n	8001f1e <d_operator_name+0x5e>
 8001f44:	f8dc 3014 	ldr.w	r3, [ip, #20]
 8001f48:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	da19      	bge.n	8001f84 <d_operator_name+0xc4>
 8001f50:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001f54:	f8dc 1010 	ldr.w	r1, [ip, #16]
 8001f58:	0092      	lsls	r2, r2, #2
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	1888      	adds	r0, r1, r2
 8001f5e:	f8cc 3014 	str.w	r3, [ip, #20]
 8001f62:	d013      	beq.n	8001f8c <d_operator_name+0xcc>
 8001f64:	2331      	movs	r3, #49	; 0x31
 8001f66:	548b      	strb	r3, [r1, r2]
 8001f68:	6047      	str	r7, [r0, #4]
 8001f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f6c:	f1ae 0530 	sub.w	r5, lr, #48	; 0x30
 8001f70:	b2eb      	uxtb	r3, r5
 8001f72:	2b09      	cmp	r3, #9
 8001f74:	d8cf      	bhi.n	8001f16 <d_operator_name+0x56>
 8001f76:	f7fe fafd 	bl	8000574 <d_source_name>
 8001f7a:	6963      	ldr	r3, [r4, #20]
 8001f7c:	69a2      	ldr	r2, [r4, #24]
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	4601      	mov	r1, r0
 8001f82:	db04      	blt.n	8001f8e <d_operator_name+0xce>
 8001f84:	2000      	movs	r0, #0
 8001f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f88:	4696      	mov	lr, r2
 8001f8a:	e7c4      	b.n	8001f16 <d_operator_name+0x56>
 8001f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f8e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001f92:	6926      	ldr	r6, [r4, #16]
 8001f94:	0092      	lsls	r2, r2, #2
 8001f96:	3301      	adds	r3, #1
 8001f98:	18b0      	adds	r0, r6, r2
 8001f9a:	6163      	str	r3, [r4, #20]
 8001f9c:	d0f2      	beq.n	8001f84 <d_operator_name+0xc4>
 8001f9e:	2900      	cmp	r1, #0
 8001fa0:	d0f0      	beq.n	8001f84 <d_operator_name+0xc4>
 8001fa2:	2332      	movs	r3, #50	; 0x32
 8001fa4:	54b3      	strb	r3, [r6, r2]
 8001fa6:	6045      	str	r5, [r0, #4]
 8001fa8:	6081      	str	r1, [r0, #8]
 8001faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fac:	2133      	movs	r1, #51	; 0x33
 8001fae:	4620      	mov	r0, r4
 8001fb0:	f7fe f90e 	bl	80001d0 <d_make_comp>
 8001fb4:	e7ac      	b.n	8001f10 <d_operator_name+0x50>
 8001fb6:	bf00      	nop
 8001fb8:	08017060 	.word	0x08017060

08001fbc <d_parmlist>:
 8001fbc:	b530      	push	{r4, r5, lr}
 8001fbe:	68c2      	ldr	r2, [r0, #12]
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	9301      	str	r3, [sp, #4]
 8001fc6:	7813      	ldrb	r3, [r2, #0]
 8001fc8:	b343      	cbz	r3, 800201c <d_parmlist+0x60>
 8001fca:	2b45      	cmp	r3, #69	; 0x45
 8001fcc:	d026      	beq.n	800201c <d_parmlist+0x60>
 8001fce:	2b2e      	cmp	r3, #46	; 0x2e
 8001fd0:	d024      	beq.n	800201c <d_parmlist+0x60>
 8001fd2:	4604      	mov	r4, r0
 8001fd4:	ad01      	add	r5, sp, #4
 8001fd6:	e015      	b.n	8002004 <d_parmlist+0x48>
 8001fd8:	2b4f      	cmp	r3, #79	; 0x4f
 8001fda:	d016      	beq.n	800200a <d_parmlist+0x4e>
 8001fdc:	f7ff fb88 	bl	80016f0 <d_type>
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	212e      	movs	r1, #46	; 0x2e
 8001fe6:	b1c8      	cbz	r0, 800201c <d_parmlist+0x60>
 8001fe8:	4620      	mov	r0, r4
 8001fea:	f7fe f8f1 	bl	80001d0 <d_make_comp>
 8001fee:	6028      	str	r0, [r5, #0]
 8001ff0:	b1a0      	cbz	r0, 800201c <d_parmlist+0x60>
 8001ff2:	68e2      	ldr	r2, [r4, #12]
 8001ff4:	7813      	ldrb	r3, [r2, #0]
 8001ff6:	f100 0508 	add.w	r5, r0, #8
 8001ffa:	b14b      	cbz	r3, 8002010 <d_parmlist+0x54>
 8001ffc:	2b45      	cmp	r3, #69	; 0x45
 8001ffe:	d007      	beq.n	8002010 <d_parmlist+0x54>
 8002000:	2b2e      	cmp	r3, #46	; 0x2e
 8002002:	d005      	beq.n	8002010 <d_parmlist+0x54>
 8002004:	2b52      	cmp	r3, #82	; 0x52
 8002006:	4620      	mov	r0, r4
 8002008:	d1e6      	bne.n	8001fd8 <d_parmlist+0x1c>
 800200a:	7853      	ldrb	r3, [r2, #1]
 800200c:	2b45      	cmp	r3, #69	; 0x45
 800200e:	d1e5      	bne.n	8001fdc <d_parmlist+0x20>
 8002010:	9801      	ldr	r0, [sp, #4]
 8002012:	b118      	cbz	r0, 800201c <d_parmlist+0x60>
 8002014:	6883      	ldr	r3, [r0, #8]
 8002016:	b123      	cbz	r3, 8002022 <d_parmlist+0x66>
 8002018:	b003      	add	sp, #12
 800201a:	bd30      	pop	{r4, r5, pc}
 800201c:	2000      	movs	r0, #0
 800201e:	b003      	add	sp, #12
 8002020:	bd30      	pop	{r4, r5, pc}
 8002022:	6842      	ldr	r2, [r0, #4]
 8002024:	7811      	ldrb	r1, [r2, #0]
 8002026:	2927      	cmp	r1, #39	; 0x27
 8002028:	d1f6      	bne.n	8002018 <d_parmlist+0x5c>
 800202a:	6852      	ldr	r2, [r2, #4]
 800202c:	7c11      	ldrb	r1, [r2, #16]
 800202e:	2909      	cmp	r1, #9
 8002030:	d1f2      	bne.n	8002018 <d_parmlist+0x5c>
 8002032:	6851      	ldr	r1, [r2, #4]
 8002034:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002036:	1a52      	subs	r2, r2, r1
 8002038:	6322      	str	r2, [r4, #48]	; 0x30
 800203a:	6043      	str	r3, [r0, #4]
 800203c:	e7ec      	b.n	8002018 <d_parmlist+0x5c>
 800203e:	bf00      	nop

08002040 <d_unqualified_name>:
 8002040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002042:	68c1      	ldr	r1, [r0, #12]
 8002044:	780b      	ldrb	r3, [r1, #0]
 8002046:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800204a:	2a09      	cmp	r2, #9
 800204c:	4604      	mov	r4, r0
 800204e:	d920      	bls.n	8002092 <d_unqualified_name+0x52>
 8002050:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8002054:	2a19      	cmp	r2, #25
 8002056:	d925      	bls.n	80020a4 <d_unqualified_name+0x64>
 8002058:	f1a3 0243 	sub.w	r2, r3, #67	; 0x43
 800205c:	2a01      	cmp	r2, #1
 800205e:	d92c      	bls.n	80020ba <d_unqualified_name+0x7a>
 8002060:	2b4c      	cmp	r3, #76	; 0x4c
 8002062:	f000 8088 	beq.w	8002176 <d_unqualified_name+0x136>
 8002066:	2b55      	cmp	r3, #85	; 0x55
 8002068:	d133      	bne.n	80020d2 <d_unqualified_name+0x92>
 800206a:	784b      	ldrb	r3, [r1, #1]
 800206c:	2b6c      	cmp	r3, #108	; 0x6c
 800206e:	d033      	beq.n	80020d8 <d_unqualified_name+0x98>
 8002070:	2b74      	cmp	r3, #116	; 0x74
 8002072:	d12e      	bne.n	80020d2 <d_unqualified_name+0x92>
 8002074:	1c4b      	adds	r3, r1, #1
 8002076:	60c3      	str	r3, [r0, #12]
 8002078:	784b      	ldrb	r3, [r1, #1]
 800207a:	2b74      	cmp	r3, #116	; 0x74
 800207c:	d05a      	beq.n	8002134 <d_unqualified_name+0xf4>
 800207e:	2b42      	cmp	r3, #66	; 0x42
 8002080:	f04f 0500 	mov.w	r5, #0
 8002084:	d10c      	bne.n	80020a0 <d_unqualified_name+0x60>
 8002086:	4629      	mov	r1, r5
 8002088:	4620      	mov	r0, r4
 800208a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800208e:	f7fe bacd 	b.w	800062c <d_abi_tags>
 8002092:	f7fe fa6f 	bl	8000574 <d_source_name>
 8002096:	68e3      	ldr	r3, [r4, #12]
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	4605      	mov	r5, r0
 800209c:	2b42      	cmp	r3, #66	; 0x42
 800209e:	d0f2      	beq.n	8002086 <d_unqualified_name+0x46>
 80020a0:	4628      	mov	r0, r5
 80020a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020a4:	f7ff ff0c 	bl	8001ec0 <d_operator_name>
 80020a8:	4605      	mov	r5, r0
 80020aa:	b118      	cbz	r0, 80020b4 <d_unqualified_name+0x74>
 80020ac:	7803      	ldrb	r3, [r0, #0]
 80020ae:	2b31      	cmp	r3, #49	; 0x31
 80020b0:	f000 80b2 	beq.w	8002218 <d_unqualified_name+0x1d8>
 80020b4:	68e3      	ldr	r3, [r4, #12]
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	e7f0      	b.n	800209c <d_unqualified_name+0x5c>
 80020ba:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80020bc:	b125      	cbz	r5, 80020c8 <d_unqualified_name+0x88>
 80020be:	782a      	ldrb	r2, [r5, #0]
 80020c0:	2a00      	cmp	r2, #0
 80020c2:	d06c      	beq.n	800219e <d_unqualified_name+0x15e>
 80020c4:	2a18      	cmp	r2, #24
 80020c6:	d06a      	beq.n	800219e <d_unqualified_name+0x15e>
 80020c8:	2b43      	cmp	r3, #67	; 0x43
 80020ca:	f000 80bf 	beq.w	800224c <d_unqualified_name+0x20c>
 80020ce:	2b44      	cmp	r3, #68	; 0x44
 80020d0:	d06f      	beq.n	80021b2 <d_unqualified_name+0x172>
 80020d2:	2500      	movs	r5, #0
 80020d4:	4628      	mov	r0, r5
 80020d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020d8:	1c4b      	adds	r3, r1, #1
 80020da:	60c3      	str	r3, [r0, #12]
 80020dc:	784b      	ldrb	r3, [r1, #1]
 80020de:	2b6c      	cmp	r3, #108	; 0x6c
 80020e0:	d1cd      	bne.n	800207e <d_unqualified_name+0x3e>
 80020e2:	3102      	adds	r1, #2
 80020e4:	60c1      	str	r1, [r0, #12]
 80020e6:	f7ff ff69 	bl	8001fbc <d_parmlist>
 80020ea:	4606      	mov	r6, r0
 80020ec:	b1f0      	cbz	r0, 800212c <d_unqualified_name+0xec>
 80020ee:	68e2      	ldr	r2, [r4, #12]
 80020f0:	7813      	ldrb	r3, [r2, #0]
 80020f2:	2b45      	cmp	r3, #69	; 0x45
 80020f4:	d1c3      	bne.n	800207e <d_unqualified_name+0x3e>
 80020f6:	3201      	adds	r2, #1
 80020f8:	60e2      	str	r2, [r4, #12]
 80020fa:	4620      	mov	r0, r4
 80020fc:	f7fe f9fc 	bl	80004f8 <d_compact_number>
 8002100:	2800      	cmp	r0, #0
 8002102:	db13      	blt.n	800212c <d_unqualified_name+0xec>
 8002104:	6963      	ldr	r3, [r4, #20]
 8002106:	69a2      	ldr	r2, [r4, #24]
 8002108:	4293      	cmp	r3, r2
 800210a:	da0f      	bge.n	800212c <d_unqualified_name+0xec>
 800210c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8002110:	6921      	ldr	r1, [r4, #16]
 8002112:	0092      	lsls	r2, r2, #2
 8002114:	3301      	adds	r3, #1
 8002116:	188d      	adds	r5, r1, r2
 8002118:	6163      	str	r3, [r4, #20]
 800211a:	d0cb      	beq.n	80020b4 <d_unqualified_name+0x74>
 800211c:	2345      	movs	r3, #69	; 0x45
 800211e:	548b      	strb	r3, [r1, r2]
 8002120:	606e      	str	r6, [r5, #4]
 8002122:	60a8      	str	r0, [r5, #8]
 8002124:	6a23      	ldr	r3, [r4, #32]
 8002126:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002128:	4293      	cmp	r3, r2
 800212a:	db1c      	blt.n	8002166 <d_unqualified_name+0x126>
 800212c:	68e3      	ldr	r3, [r4, #12]
 800212e:	2500      	movs	r5, #0
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	e7b3      	b.n	800209c <d_unqualified_name+0x5c>
 8002134:	3102      	adds	r1, #2
 8002136:	60c1      	str	r1, [r0, #12]
 8002138:	f7fe f9de 	bl	80004f8 <d_compact_number>
 800213c:	2800      	cmp	r0, #0
 800213e:	dbf5      	blt.n	800212c <d_unqualified_name+0xec>
 8002140:	6963      	ldr	r3, [r4, #20]
 8002142:	69a2      	ldr	r2, [r4, #24]
 8002144:	4293      	cmp	r3, r2
 8002146:	daf1      	bge.n	800212c <d_unqualified_name+0xec>
 8002148:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800214c:	6921      	ldr	r1, [r4, #16]
 800214e:	0092      	lsls	r2, r2, #2
 8002150:	3301      	adds	r3, #1
 8002152:	188d      	adds	r5, r1, r2
 8002154:	6163      	str	r3, [r4, #20]
 8002156:	d0ad      	beq.n	80020b4 <d_unqualified_name+0x74>
 8002158:	2347      	movs	r3, #71	; 0x47
 800215a:	548b      	strb	r3, [r1, r2]
 800215c:	6068      	str	r0, [r5, #4]
 800215e:	6a23      	ldr	r3, [r4, #32]
 8002160:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002162:	4293      	cmp	r3, r2
 8002164:	dae2      	bge.n	800212c <d_unqualified_name+0xec>
 8002166:	69e1      	ldr	r1, [r4, #28]
 8002168:	68e2      	ldr	r2, [r4, #12]
 800216a:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
 800216e:	3301      	adds	r3, #1
 8002170:	6223      	str	r3, [r4, #32]
 8002172:	7813      	ldrb	r3, [r2, #0]
 8002174:	e792      	b.n	800209c <d_unqualified_name+0x5c>
 8002176:	3101      	adds	r1, #1
 8002178:	60c1      	str	r1, [r0, #12]
 800217a:	f7fe f9fb 	bl	8000574 <d_source_name>
 800217e:	4605      	mov	r5, r0
 8002180:	2800      	cmp	r0, #0
 8002182:	d0a6      	beq.n	80020d2 <d_unqualified_name+0x92>
 8002184:	68e2      	ldr	r2, [r4, #12]
 8002186:	7813      	ldrb	r3, [r2, #0]
 8002188:	2b5f      	cmp	r3, #95	; 0x5f
 800218a:	d187      	bne.n	800209c <d_unqualified_name+0x5c>
 800218c:	4620      	mov	r0, r4
 800218e:	3201      	adds	r2, #1
 8002190:	f840 2f0c 	str.w	r2, [r0, #12]!
 8002194:	f7fe f96e 	bl	8000474 <d_number.isra.0>
 8002198:	2800      	cmp	r0, #0
 800219a:	da8b      	bge.n	80020b4 <d_unqualified_name+0x74>
 800219c:	e799      	b.n	80020d2 <d_unqualified_name+0x92>
 800219e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80021a0:	68aa      	ldr	r2, [r5, #8]
 80021a2:	4413      	add	r3, r2
 80021a4:	6323      	str	r3, [r4, #48]	; 0x30
 80021a6:	780b      	ldrb	r3, [r1, #0]
 80021a8:	2b43      	cmp	r3, #67	; 0x43
 80021aa:	d04f      	beq.n	800224c <d_unqualified_name+0x20c>
 80021ac:	2b44      	cmp	r3, #68	; 0x44
 80021ae:	f47f af66 	bne.w	800207e <d_unqualified_name+0x3e>
 80021b2:	784b      	ldrb	r3, [r1, #1]
 80021b4:	3b30      	subs	r3, #48	; 0x30
 80021b6:	2b05      	cmp	r3, #5
 80021b8:	d88b      	bhi.n	80020d2 <d_unqualified_name+0x92>
 80021ba:	a201      	add	r2, pc, #4	; (adr r2, 80021c0 <d_unqualified_name+0x180>)
 80021bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c0:	08002215 	.word	0x08002215
 80021c4:	080021d9 	.word	0x080021d9
 80021c8:	08002211 	.word	0x08002211
 80021cc:	080020d3 	.word	0x080020d3
 80021d0:	0800220d 	.word	0x0800220d
 80021d4:	08002209 	.word	0x08002209
 80021d8:	2702      	movs	r7, #2
 80021da:	6963      	ldr	r3, [r4, #20]
 80021dc:	69a2      	ldr	r2, [r4, #24]
 80021de:	1c88      	adds	r0, r1, #2
 80021e0:	4293      	cmp	r3, r2
 80021e2:	60e0      	str	r0, [r4, #12]
 80021e4:	da56      	bge.n	8002294 <d_unqualified_name+0x254>
 80021e6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80021ea:	6920      	ldr	r0, [r4, #16]
 80021ec:	0092      	lsls	r2, r2, #2
 80021ee:	3301      	adds	r3, #1
 80021f0:	1886      	adds	r6, r0, r2
 80021f2:	6163      	str	r3, [r4, #20]
 80021f4:	d005      	beq.n	8002202 <d_unqualified_name+0x1c2>
 80021f6:	2d00      	cmp	r5, #0
 80021f8:	d04f      	beq.n	800229a <d_unqualified_name+0x25a>
 80021fa:	2308      	movs	r3, #8
 80021fc:	5483      	strb	r3, [r0, r2]
 80021fe:	7137      	strb	r7, [r6, #4]
 8002200:	60b5      	str	r5, [r6, #8]
 8002202:	788b      	ldrb	r3, [r1, #2]
 8002204:	4635      	mov	r5, r6
 8002206:	e749      	b.n	800209c <d_unqualified_name+0x5c>
 8002208:	2705      	movs	r7, #5
 800220a:	e7e6      	b.n	80021da <d_unqualified_name+0x19a>
 800220c:	2704      	movs	r7, #4
 800220e:	e7e4      	b.n	80021da <d_unqualified_name+0x19a>
 8002210:	2703      	movs	r7, #3
 8002212:	e7e2      	b.n	80021da <d_unqualified_name+0x19a>
 8002214:	2701      	movs	r7, #1
 8002216:	e7e0      	b.n	80021da <d_unqualified_name+0x19a>
 8002218:	6842      	ldr	r2, [r0, #4]
 800221a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800221c:	6896      	ldr	r6, [r2, #8]
 800221e:	6810      	ldr	r0, [r2, #0]
 8002220:	491f      	ldr	r1, [pc, #124]	; (80022a0 <d_unqualified_name+0x260>)
 8002222:	3307      	adds	r3, #7
 8002224:	4433      	add	r3, r6
 8002226:	6323      	str	r3, [r4, #48]	; 0x30
 8002228:	f004 fb7a 	bl	8006920 <strcmp>
 800222c:	2800      	cmp	r0, #0
 800222e:	f47f af41 	bne.w	80020b4 <d_unqualified_name+0x74>
 8002232:	4620      	mov	r0, r4
 8002234:	f7fe f99e 	bl	8000574 <d_source_name>
 8002238:	462a      	mov	r2, r5
 800223a:	4603      	mov	r3, r0
 800223c:	2136      	movs	r1, #54	; 0x36
 800223e:	4620      	mov	r0, r4
 8002240:	f7fd ffc6 	bl	80001d0 <d_make_comp>
 8002244:	68e3      	ldr	r3, [r4, #12]
 8002246:	4605      	mov	r5, r0
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	e727      	b.n	800209c <d_unqualified_name+0x5c>
 800224c:	784b      	ldrb	r3, [r1, #1]
 800224e:	3b31      	subs	r3, #49	; 0x31
 8002250:	2b04      	cmp	r3, #4
 8002252:	f63f af3e 	bhi.w	80020d2 <d_unqualified_name+0x92>
 8002256:	e8df f003 	tbb	[pc, r3]
 800225a:	0315      	.short	0x0315
 800225c:	191b      	.short	0x191b
 800225e:	17          	.byte	0x17
 800225f:	00          	.byte	0x00
 8002260:	2702      	movs	r7, #2
 8002262:	6963      	ldr	r3, [r4, #20]
 8002264:	69a2      	ldr	r2, [r4, #24]
 8002266:	1c88      	adds	r0, r1, #2
 8002268:	4293      	cmp	r3, r2
 800226a:	60e0      	str	r0, [r4, #12]
 800226c:	da12      	bge.n	8002294 <d_unqualified_name+0x254>
 800226e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8002272:	6920      	ldr	r0, [r4, #16]
 8002274:	0092      	lsls	r2, r2, #2
 8002276:	3301      	adds	r3, #1
 8002278:	1886      	adds	r6, r0, r2
 800227a:	6163      	str	r3, [r4, #20]
 800227c:	d0c1      	beq.n	8002202 <d_unqualified_name+0x1c2>
 800227e:	b165      	cbz	r5, 800229a <d_unqualified_name+0x25a>
 8002280:	2307      	movs	r3, #7
 8002282:	e7bb      	b.n	80021fc <d_unqualified_name+0x1bc>
 8002284:	2701      	movs	r7, #1
 8002286:	e7ec      	b.n	8002262 <d_unqualified_name+0x222>
 8002288:	2705      	movs	r7, #5
 800228a:	e7ea      	b.n	8002262 <d_unqualified_name+0x222>
 800228c:	2704      	movs	r7, #4
 800228e:	e7e8      	b.n	8002262 <d_unqualified_name+0x222>
 8002290:	2703      	movs	r7, #3
 8002292:	e7e6      	b.n	8002262 <d_unqualified_name+0x222>
 8002294:	788b      	ldrb	r3, [r1, #2]
 8002296:	2500      	movs	r5, #0
 8002298:	e700      	b.n	800209c <d_unqualified_name+0x5c>
 800229a:	788b      	ldrb	r3, [r1, #2]
 800229c:	e6fe      	b.n	800209c <d_unqualified_name+0x5c>
 800229e:	bf00      	nop
 80022a0:	08017aac 	.word	0x08017aac

080022a4 <d_bare_function_type>:
 80022a4:	b570      	push	{r4, r5, r6, lr}
 80022a6:	68c3      	ldr	r3, [r0, #12]
 80022a8:	781a      	ldrb	r2, [r3, #0]
 80022aa:	2a4a      	cmp	r2, #74	; 0x4a
 80022ac:	4604      	mov	r4, r0
 80022ae:	d00d      	beq.n	80022cc <d_bare_function_type+0x28>
 80022b0:	b971      	cbnz	r1, 80022d0 <d_bare_function_type+0x2c>
 80022b2:	460d      	mov	r5, r1
 80022b4:	4620      	mov	r0, r4
 80022b6:	f7ff fe81 	bl	8001fbc <d_parmlist>
 80022ba:	b178      	cbz	r0, 80022dc <d_bare_function_type+0x38>
 80022bc:	4603      	mov	r3, r0
 80022be:	462a      	mov	r2, r5
 80022c0:	4620      	mov	r0, r4
 80022c2:	2129      	movs	r1, #41	; 0x29
 80022c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80022c8:	f7fd bf82 	b.w	80001d0 <d_make_comp>
 80022cc:	3301      	adds	r3, #1
 80022ce:	60c3      	str	r3, [r0, #12]
 80022d0:	4620      	mov	r0, r4
 80022d2:	f7ff fa0d 	bl	80016f0 <d_type>
 80022d6:	4605      	mov	r5, r0
 80022d8:	2800      	cmp	r0, #0
 80022da:	d1eb      	bne.n	80022b4 <d_bare_function_type+0x10>
 80022dc:	2000      	movs	r0, #0
 80022de:	bd70      	pop	{r4, r5, r6, pc}

080022e0 <d_function_type>:
 80022e0:	68c3      	ldr	r3, [r0, #12]
 80022e2:	781a      	ldrb	r2, [r3, #0]
 80022e4:	2a46      	cmp	r2, #70	; 0x46
 80022e6:	d001      	beq.n	80022ec <d_function_type+0xc>
 80022e8:	2000      	movs	r0, #0
 80022ea:	4770      	bx	lr
 80022ec:	b510      	push	{r4, lr}
 80022ee:	1c5a      	adds	r2, r3, #1
 80022f0:	60c2      	str	r2, [r0, #12]
 80022f2:	785a      	ldrb	r2, [r3, #1]
 80022f4:	2a59      	cmp	r2, #89	; 0x59
 80022f6:	bf04      	itt	eq
 80022f8:	3302      	addeq	r3, #2
 80022fa:	60c3      	streq	r3, [r0, #12]
 80022fc:	2101      	movs	r1, #1
 80022fe:	4604      	mov	r4, r0
 8002300:	f7ff ffd0 	bl	80022a4 <d_bare_function_type>
 8002304:	4601      	mov	r1, r0
 8002306:	4620      	mov	r0, r4
 8002308:	f7fe f814 	bl	8000334 <d_ref_qualifier>
 800230c:	68e3      	ldr	r3, [r4, #12]
 800230e:	781a      	ldrb	r2, [r3, #0]
 8002310:	2a45      	cmp	r2, #69	; 0x45
 8002312:	d001      	beq.n	8002318 <d_function_type+0x38>
 8002314:	2000      	movs	r0, #0
 8002316:	bd10      	pop	{r4, pc}
 8002318:	3301      	adds	r3, #1
 800231a:	60e3      	str	r3, [r4, #12]
 800231c:	bd10      	pop	{r4, pc}
 800231e:	bf00      	nop

08002320 <d_encoding>:
 8002320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002324:	68c3      	ldr	r3, [r0, #12]
 8002326:	781a      	ldrb	r2, [r3, #0]
 8002328:	2a47      	cmp	r2, #71	; 0x47
 800232a:	4605      	mov	r5, r0
 800232c:	d01f      	beq.n	800236e <d_encoding+0x4e>
 800232e:	2a54      	cmp	r2, #84	; 0x54
 8002330:	d01d      	beq.n	800236e <d_encoding+0x4e>
 8002332:	460e      	mov	r6, r1
 8002334:	f7ff f820 	bl	8001378 <d_name>
 8002338:	4604      	mov	r4, r0
 800233a:	b310      	cbz	r0, 8002382 <d_encoding+0x62>
 800233c:	b32e      	cbz	r6, 800238a <d_encoding+0x6a>
 800233e:	68ab      	ldr	r3, [r5, #8]
 8002340:	07db      	lsls	r3, r3, #31
 8002342:	d422      	bmi.n	800238a <d_encoding+0x6a>
 8002344:	7823      	ldrb	r3, [r4, #0]
 8002346:	f1a3 021c 	sub.w	r2, r3, #28
 800234a:	2a04      	cmp	r2, #4
 800234c:	d940      	bls.n	80023d0 <d_encoding+0xb0>
 800234e:	2b4c      	cmp	r3, #76	; 0x4c
 8002350:	d03e      	beq.n	80023d0 <d_encoding+0xb0>
 8002352:	2b02      	cmp	r3, #2
 8002354:	d116      	bne.n	8002384 <d_encoding+0x64>
 8002356:	68a3      	ldr	r3, [r4, #8]
 8002358:	781a      	ldrb	r2, [r3, #0]
 800235a:	f1a2 011c 	sub.w	r1, r2, #28
 800235e:	2904      	cmp	r1, #4
 8002360:	f240 8283 	bls.w	800286a <d_encoding+0x54a>
 8002364:	2a4c      	cmp	r2, #76	; 0x4c
 8002366:	f000 8280 	beq.w	800286a <d_encoding+0x54a>
 800236a:	60a3      	str	r3, [r4, #8]
 800236c:	e00a      	b.n	8002384 <d_encoding+0x64>
 800236e:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8002370:	f101 0214 	add.w	r2, r1, #20
 8002374:	632a      	str	r2, [r5, #48]	; 0x30
 8002376:	781a      	ldrb	r2, [r3, #0]
 8002378:	2a54      	cmp	r2, #84	; 0x54
 800237a:	d02b      	beq.n	80023d4 <d_encoding+0xb4>
 800237c:	2a47      	cmp	r2, #71	; 0x47
 800237e:	f000 809f 	beq.w	80024c0 <d_encoding+0x1a0>
 8002382:	2400      	movs	r4, #0
 8002384:	4620      	mov	r0, r4
 8002386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800238a:	68eb      	ldr	r3, [r5, #12]
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d0f8      	beq.n	8002384 <d_encoding+0x64>
 8002392:	2b45      	cmp	r3, #69	; 0x45
 8002394:	d0f6      	beq.n	8002384 <d_encoding+0x64>
 8002396:	4621      	mov	r1, r4
 8002398:	780a      	ldrb	r2, [r1, #0]
 800239a:	2a20      	cmp	r2, #32
 800239c:	f200 8113 	bhi.w	80025c6 <d_encoding+0x2a6>
 80023a0:	2a1c      	cmp	r2, #28
 80023a2:	f080 8112 	bcs.w	80025ca <d_encoding+0x2aa>
 80023a6:	2a04      	cmp	r2, #4
 80023a8:	f040 8101 	bne.w	80025ae <d_encoding+0x28e>
 80023ac:	684a      	ldr	r2, [r1, #4]
 80023ae:	b16a      	cbz	r2, 80023cc <d_encoding+0xac>
 80023b0:	7813      	ldrb	r3, [r2, #0]
 80023b2:	2b08      	cmp	r3, #8
 80023b4:	f103 31ff 	add.w	r1, r3, #4294967295
 80023b8:	f200 80f6 	bhi.w	80025a8 <d_encoding+0x288>
 80023bc:	2b07      	cmp	r3, #7
 80023be:	f080 80f6 	bcs.w	80025ae <d_encoding+0x28e>
 80023c2:	2901      	cmp	r1, #1
 80023c4:	d802      	bhi.n	80023cc <d_encoding+0xac>
 80023c6:	6892      	ldr	r2, [r2, #8]
 80023c8:	2a00      	cmp	r2, #0
 80023ca:	d1f1      	bne.n	80023b0 <d_encoding+0x90>
 80023cc:	2101      	movs	r1, #1
 80023ce:	e0ef      	b.n	80025b0 <d_encoding+0x290>
 80023d0:	6864      	ldr	r4, [r4, #4]
 80023d2:	e7b7      	b.n	8002344 <d_encoding+0x24>
 80023d4:	1c5a      	adds	r2, r3, #1
 80023d6:	60ea      	str	r2, [r5, #12]
 80023d8:	785a      	ldrb	r2, [r3, #1]
 80023da:	2a00      	cmp	r2, #0
 80023dc:	d0d1      	beq.n	8002382 <d_encoding+0x62>
 80023de:	1c9a      	adds	r2, r3, #2
 80023e0:	60ea      	str	r2, [r5, #12]
 80023e2:	785b      	ldrb	r3, [r3, #1]
 80023e4:	3b43      	subs	r3, #67	; 0x43
 80023e6:	2b33      	cmp	r3, #51	; 0x33
 80023e8:	d8cb      	bhi.n	8002382 <d_encoding+0x62>
 80023ea:	a201      	add	r2, pc, #4	; (adr r2, 80023f0 <d_encoding+0xd0>)
 80023ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f0:	0800282b 	.word	0x0800282b
 80023f4:	08002383 	.word	0x08002383
 80023f8:	08002383 	.word	0x08002383
 80023fc:	08002815 	.word	0x08002815
 8002400:	08002383 	.word	0x08002383
 8002404:	080027ff 	.word	0x080027ff
 8002408:	080027e9 	.word	0x080027e9
 800240c:	080027d3 	.word	0x080027d3
 8002410:	08002383 	.word	0x08002383
 8002414:	08002383 	.word	0x08002383
 8002418:	08002383 	.word	0x08002383
 800241c:	08002383 	.word	0x08002383
 8002420:	08002383 	.word	0x08002383
 8002424:	08002383 	.word	0x08002383
 8002428:	08002383 	.word	0x08002383
 800242c:	08002383 	.word	0x08002383
 8002430:	080027bd 	.word	0x080027bd
 8002434:	080027a3 	.word	0x080027a3
 8002438:	08002383 	.word	0x08002383
 800243c:	08002789 	.word	0x08002789
 8002440:	08002773 	.word	0x08002773
 8002444:	08002383 	.word	0x08002383
 8002448:	08002383 	.word	0x08002383
 800244c:	08002383 	.word	0x08002383
 8002450:	08002383 	.word	0x08002383
 8002454:	08002383 	.word	0x08002383
 8002458:	08002383 	.word	0x08002383
 800245c:	08002383 	.word	0x08002383
 8002460:	08002383 	.word	0x08002383
 8002464:	08002383 	.word	0x08002383
 8002468:	08002383 	.word	0x08002383
 800246c:	08002383 	.word	0x08002383
 8002470:	0800273f 	.word	0x0800273f
 8002474:	08002383 	.word	0x08002383
 8002478:	08002383 	.word	0x08002383
 800247c:	08002383 	.word	0x08002383
 8002480:	08002383 	.word	0x08002383
 8002484:	08002719 	.word	0x08002719
 8002488:	08002383 	.word	0x08002383
 800248c:	08002383 	.word	0x08002383
 8002490:	08002383 	.word	0x08002383
 8002494:	08002383 	.word	0x08002383
 8002498:	08002383 	.word	0x08002383
 800249c:	08002383 	.word	0x08002383
 80024a0:	08002383 	.word	0x08002383
 80024a4:	08002383 	.word	0x08002383
 80024a8:	08002383 	.word	0x08002383
 80024ac:	08002383 	.word	0x08002383
 80024b0:	08002383 	.word	0x08002383
 80024b4:	08002383 	.word	0x08002383
 80024b8:	08002383 	.word	0x08002383
 80024bc:	080026f3 	.word	0x080026f3
 80024c0:	1c5a      	adds	r2, r3, #1
 80024c2:	60ea      	str	r2, [r5, #12]
 80024c4:	785a      	ldrb	r2, [r3, #1]
 80024c6:	2a00      	cmp	r2, #0
 80024c8:	f43f af5b 	beq.w	8002382 <d_encoding+0x62>
 80024cc:	1c9a      	adds	r2, r3, #2
 80024ce:	60ea      	str	r2, [r5, #12]
 80024d0:	785a      	ldrb	r2, [r3, #1]
 80024d2:	3a41      	subs	r2, #65	; 0x41
 80024d4:	2a31      	cmp	r2, #49	; 0x31
 80024d6:	f63f af54 	bhi.w	8002382 <d_encoding+0x62>
 80024da:	a101      	add	r1, pc, #4	; (adr r1, 80024e0 <d_encoding+0x1c0>)
 80024dc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80024e0:	080025d5 	.word	0x080025d5
 80024e4:	08002383 	.word	0x08002383
 80024e8:	08002383 	.word	0x08002383
 80024ec:	08002383 	.word	0x08002383
 80024f0:	08002383 	.word	0x08002383
 80024f4:	08002383 	.word	0x08002383
 80024f8:	08002383 	.word	0x08002383
 80024fc:	08002383 	.word	0x08002383
 8002500:	08002383 	.word	0x08002383
 8002504:	08002383 	.word	0x08002383
 8002508:	08002383 	.word	0x08002383
 800250c:	08002383 	.word	0x08002383
 8002510:	08002383 	.word	0x08002383
 8002514:	08002383 	.word	0x08002383
 8002518:	08002383 	.word	0x08002383
 800251c:	08002383 	.word	0x08002383
 8002520:	08002383 	.word	0x08002383
 8002524:	080026d5 	.word	0x080026d5
 8002528:	08002383 	.word	0x08002383
 800252c:	080026a9 	.word	0x080026a9
 8002530:	08002383 	.word	0x08002383
 8002534:	08002693 	.word	0x08002693
 8002538:	08002383 	.word	0x08002383
 800253c:	08002383 	.word	0x08002383
 8002540:	08002383 	.word	0x08002383
 8002544:	08002383 	.word	0x08002383
 8002548:	08002383 	.word	0x08002383
 800254c:	08002383 	.word	0x08002383
 8002550:	08002383 	.word	0x08002383
 8002554:	08002383 	.word	0x08002383
 8002558:	08002383 	.word	0x08002383
 800255c:	08002383 	.word	0x08002383
 8002560:	08002383 	.word	0x08002383
 8002564:	08002383 	.word	0x08002383
 8002568:	08002383 	.word	0x08002383
 800256c:	08002383 	.word	0x08002383
 8002570:	08002383 	.word	0x08002383
 8002574:	08002383 	.word	0x08002383
 8002578:	08002383 	.word	0x08002383
 800257c:	08002383 	.word	0x08002383
 8002580:	08002383 	.word	0x08002383
 8002584:	08002383 	.word	0x08002383
 8002588:	08002383 	.word	0x08002383
 800258c:	08002383 	.word	0x08002383
 8002590:	08002383 	.word	0x08002383
 8002594:	08002383 	.word	0x08002383
 8002598:	08002383 	.word	0x08002383
 800259c:	08002383 	.word	0x08002383
 80025a0:	08002383 	.word	0x08002383
 80025a4:	080025ed 	.word	0x080025ed
 80025a8:	2b34      	cmp	r3, #52	; 0x34
 80025aa:	f47f af0f 	bne.w	80023cc <d_encoding+0xac>
 80025ae:	2100      	movs	r1, #0
 80025b0:	4628      	mov	r0, r5
 80025b2:	f7ff fe77 	bl	80022a4 <d_bare_function_type>
 80025b6:	4622      	mov	r2, r4
 80025b8:	4603      	mov	r3, r0
 80025ba:	2103      	movs	r1, #3
 80025bc:	4628      	mov	r0, r5
 80025be:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025c2:	f7fd be05 	b.w	80001d0 <d_make_comp>
 80025c6:	2a4c      	cmp	r2, #76	; 0x4c
 80025c8:	d1f1      	bne.n	80025ae <d_encoding+0x28e>
 80025ca:	6849      	ldr	r1, [r1, #4]
 80025cc:	2900      	cmp	r1, #0
 80025ce:	f47f aee3 	bne.w	8002398 <d_encoding+0x78>
 80025d2:	e7ed      	b.n	80025b0 <d_encoding+0x290>
 80025d4:	2100      	movs	r1, #0
 80025d6:	4628      	mov	r0, r5
 80025d8:	f7ff fea2 	bl	8002320 <d_encoding>
 80025dc:	2300      	movs	r3, #0
 80025de:	4602      	mov	r2, r0
 80025e0:	2117      	movs	r1, #23
 80025e2:	4628      	mov	r0, r5
 80025e4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025e8:	f7fd bdf2 	b.w	80001d0 <d_make_comp>
 80025ec:	f105 000c 	add.w	r0, r5, #12
 80025f0:	f7fd ff40 	bl	8000474 <d_number.isra.0>
 80025f4:	2801      	cmp	r0, #1
 80025f6:	f77f aec4 	ble.w	8002382 <d_encoding+0x62>
 80025fa:	68eb      	ldr	r3, [r5, #12]
 80025fc:	781a      	ldrb	r2, [r3, #0]
 80025fe:	2a00      	cmp	r2, #0
 8002600:	f43f aebf 	beq.w	8002382 <d_encoding+0x62>
 8002604:	1c5f      	adds	r7, r3, #1
 8002606:	60ef      	str	r7, [r5, #12]
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b5f      	cmp	r3, #95	; 0x5f
 800260c:	f47f aeb9 	bne.w	8002382 <d_encoding+0x62>
 8002610:	2200      	movs	r2, #0
 8002612:	1e46      	subs	r6, r0, #1
 8002614:	4690      	mov	r8, r2
 8002616:	f04f 0940 	mov.w	r9, #64	; 0x40
 800261a:	783b      	ldrb	r3, [r7, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	f43f aeb0 	beq.w	8002382 <d_encoding+0x62>
 8002622:	2b24      	cmp	r3, #36	; 0x24
 8002624:	f000 8128 	beq.w	8002878 <d_encoding+0x558>
 8002628:	463c      	mov	r4, r7
 800262a:	2100      	movs	r1, #0
 800262c:	e004      	b.n	8002638 <d_encoding+0x318>
 800262e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002632:	b123      	cbz	r3, 800263e <d_encoding+0x31e>
 8002634:	2b24      	cmp	r3, #36	; 0x24
 8002636:	d002      	beq.n	800263e <d_encoding+0x31e>
 8002638:	3101      	adds	r1, #1
 800263a:	42b1      	cmp	r1, r6
 800263c:	dbf7      	blt.n	800262e <d_encoding+0x30e>
 800263e:	696c      	ldr	r4, [r5, #20]
 8002640:	69a8      	ldr	r0, [r5, #24]
 8002642:	4284      	cmp	r4, r0
 8002644:	f280 8113 	bge.w	800286e <d_encoding+0x54e>
 8002648:	6928      	ldr	r0, [r5, #16]
 800264a:	1c63      	adds	r3, r4, #1
 800264c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8002650:	616b      	str	r3, [r5, #20]
 8002652:	eb10 0384 	adds.w	r3, r0, r4, lsl #2
 8002656:	f000 810a 	beq.w	800286e <d_encoding+0x54e>
 800265a:	f800 8024 	strb.w	r8, [r0, r4, lsl #2]
 800265e:	605f      	str	r7, [r3, #4]
 8002660:	6099      	str	r1, [r3, #8]
 8002662:	68ef      	ldr	r7, [r5, #12]
 8002664:	440f      	add	r7, r1
 8002666:	1a76      	subs	r6, r6, r1
 8002668:	60ef      	str	r7, [r5, #12]
 800266a:	2a00      	cmp	r2, #0
 800266c:	f000 8121 	beq.w	80028b2 <d_encoding+0x592>
 8002670:	213f      	movs	r1, #63	; 0x3f
 8002672:	4628      	mov	r0, r5
 8002674:	f7fd fdac 	bl	80001d0 <d_make_comp>
 8002678:	4602      	mov	r2, r0
 800267a:	2800      	cmp	r0, #0
 800267c:	f43f ae81 	beq.w	8002382 <d_encoding+0x62>
 8002680:	2e00      	cmp	r6, #0
 8002682:	dcca      	bgt.n	800261a <d_encoding+0x2fa>
 8002684:	4628      	mov	r0, r5
 8002686:	2300      	movs	r3, #0
 8002688:	213e      	movs	r1, #62	; 0x3e
 800268a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800268e:	f7fd bd9f 	b.w	80001d0 <d_make_comp>
 8002692:	4628      	mov	r0, r5
 8002694:	f7fe fe70 	bl	8001378 <d_name>
 8002698:	2300      	movs	r3, #0
 800269a:	4602      	mov	r2, r0
 800269c:	2113      	movs	r1, #19
 800269e:	4628      	mov	r0, r5
 80026a0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026a4:	f7fd bd94 	b.w	80001d0 <d_make_comp>
 80026a8:	789a      	ldrb	r2, [r3, #2]
 80026aa:	2100      	movs	r1, #0
 80026ac:	4628      	mov	r0, r5
 80026ae:	2a00      	cmp	r2, #0
 80026b0:	f000 8101 	beq.w	80028b6 <d_encoding+0x596>
 80026b4:	1cda      	adds	r2, r3, #3
 80026b6:	60ea      	str	r2, [r5, #12]
 80026b8:	789b      	ldrb	r3, [r3, #2]
 80026ba:	2b6e      	cmp	r3, #110	; 0x6e
 80026bc:	f040 80fb 	bne.w	80028b6 <d_encoding+0x596>
 80026c0:	f7ff fe2e 	bl	8002320 <d_encoding>
 80026c4:	2300      	movs	r3, #0
 80026c6:	4602      	mov	r2, r0
 80026c8:	2149      	movs	r1, #73	; 0x49
 80026ca:	4628      	mov	r0, r5
 80026cc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026d0:	f7fd bd7e 	b.w	80001d0 <d_make_comp>
 80026d4:	4628      	mov	r0, r5
 80026d6:	f7fe fe4f 	bl	8001378 <d_name>
 80026da:	4604      	mov	r4, r0
 80026dc:	4628      	mov	r0, r5
 80026de:	f7fd fef3 	bl	80004c8 <d_number_component>
 80026e2:	4622      	mov	r2, r4
 80026e4:	4603      	mov	r3, r0
 80026e6:	2116      	movs	r1, #22
 80026e8:	4628      	mov	r0, r5
 80026ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026ee:	f7fd bd6f 	b.w	80001d0 <d_make_comp>
 80026f2:	2176      	movs	r1, #118	; 0x76
 80026f4:	4628      	mov	r0, r5
 80026f6:	f7fe f871 	bl	80007dc <d_call_offset>
 80026fa:	2800      	cmp	r0, #0
 80026fc:	f43f ae41 	beq.w	8002382 <d_encoding+0x62>
 8002700:	2100      	movs	r1, #0
 8002702:	4628      	mov	r0, r5
 8002704:	f7ff fe0c 	bl	8002320 <d_encoding>
 8002708:	2300      	movs	r3, #0
 800270a:	4602      	mov	r2, r0
 800270c:	2110      	movs	r1, #16
 800270e:	4628      	mov	r0, r5
 8002710:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002714:	f7fd bd5c 	b.w	80001d0 <d_make_comp>
 8002718:	2168      	movs	r1, #104	; 0x68
 800271a:	4628      	mov	r0, r5
 800271c:	f7fe f85e 	bl	80007dc <d_call_offset>
 8002720:	2800      	cmp	r0, #0
 8002722:	f43f ae2e 	beq.w	8002382 <d_encoding+0x62>
 8002726:	2100      	movs	r1, #0
 8002728:	4628      	mov	r0, r5
 800272a:	f7ff fdf9 	bl	8002320 <d_encoding>
 800272e:	2300      	movs	r3, #0
 8002730:	4602      	mov	r2, r0
 8002732:	210f      	movs	r1, #15
 8002734:	4628      	mov	r0, r5
 8002736:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800273a:	f7fd bd49 	b.w	80001d0 <d_make_comp>
 800273e:	2100      	movs	r1, #0
 8002740:	4628      	mov	r0, r5
 8002742:	f7fe f84b 	bl	80007dc <d_call_offset>
 8002746:	2800      	cmp	r0, #0
 8002748:	f43f ae1b 	beq.w	8002382 <d_encoding+0x62>
 800274c:	2100      	movs	r1, #0
 800274e:	4628      	mov	r0, r5
 8002750:	f7fe f844 	bl	80007dc <d_call_offset>
 8002754:	2800      	cmp	r0, #0
 8002756:	f43f ae14 	beq.w	8002382 <d_encoding+0x62>
 800275a:	2100      	movs	r1, #0
 800275c:	4628      	mov	r0, r5
 800275e:	f7ff fddf 	bl	8002320 <d_encoding>
 8002762:	2300      	movs	r3, #0
 8002764:	4602      	mov	r2, r0
 8002766:	2111      	movs	r1, #17
 8002768:	4628      	mov	r0, r5
 800276a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800276e:	f7fd bd2f 	b.w	80001d0 <d_make_comp>
 8002772:	4628      	mov	r0, r5
 8002774:	f7fe fe00 	bl	8001378 <d_name>
 8002778:	2300      	movs	r3, #0
 800277a:	4602      	mov	r2, r0
 800277c:	2115      	movs	r1, #21
 800277e:	4628      	mov	r0, r5
 8002780:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002784:	f7fd bd24 	b.w	80001d0 <d_make_comp>
 8002788:	310f      	adds	r1, #15
 800278a:	6329      	str	r1, [r5, #48]	; 0x30
 800278c:	4628      	mov	r0, r5
 800278e:	f7fe ffaf 	bl	80016f0 <d_type>
 8002792:	2300      	movs	r3, #0
 8002794:	4602      	mov	r2, r0
 8002796:	2109      	movs	r1, #9
 8002798:	4628      	mov	r0, r5
 800279a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800279e:	f7fd bd17 	b.w	80001d0 <d_make_comp>
 80027a2:	310a      	adds	r1, #10
 80027a4:	6329      	str	r1, [r5, #48]	; 0x30
 80027a6:	4628      	mov	r0, r5
 80027a8:	f7fe ffa2 	bl	80016f0 <d_type>
 80027ac:	2300      	movs	r3, #0
 80027ae:	4602      	mov	r2, r0
 80027b0:	210a      	movs	r1, #10
 80027b2:	4628      	mov	r0, r5
 80027b4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027b8:	f7fd bd0a 	b.w	80001d0 <d_make_comp>
 80027bc:	4628      	mov	r0, r5
 80027be:	f7fe ff97 	bl	80016f0 <d_type>
 80027c2:	2300      	movs	r3, #0
 80027c4:	4602      	mov	r2, r0
 80027c6:	210d      	movs	r1, #13
 80027c8:	4628      	mov	r0, r5
 80027ca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027ce:	f7fd bcff 	b.w	80001d0 <d_make_comp>
 80027d2:	4628      	mov	r0, r5
 80027d4:	f7fe ff8c 	bl	80016f0 <d_type>
 80027d8:	2300      	movs	r3, #0
 80027da:	4602      	mov	r2, r0
 80027dc:	2112      	movs	r1, #18
 80027de:	4628      	mov	r0, r5
 80027e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027e4:	f7fd bcf4 	b.w	80001d0 <d_make_comp>
 80027e8:	4628      	mov	r0, r5
 80027ea:	f7fe ff81 	bl	80016f0 <d_type>
 80027ee:	2300      	movs	r3, #0
 80027f0:	4602      	mov	r2, r0
 80027f2:	210c      	movs	r1, #12
 80027f4:	4628      	mov	r0, r5
 80027f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027fa:	f7fd bce9 	b.w	80001d0 <d_make_comp>
 80027fe:	4628      	mov	r0, r5
 8002800:	f7fe fdba 	bl	8001378 <d_name>
 8002804:	2300      	movs	r3, #0
 8002806:	4602      	mov	r2, r0
 8002808:	2114      	movs	r1, #20
 800280a:	4628      	mov	r0, r5
 800280c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002810:	f7fd bcde 	b.w	80001d0 <d_make_comp>
 8002814:	4628      	mov	r0, r5
 8002816:	f7fe ff6b 	bl	80016f0 <d_type>
 800281a:	2300      	movs	r3, #0
 800281c:	4602      	mov	r2, r0
 800281e:	210e      	movs	r1, #14
 8002820:	4628      	mov	r0, r5
 8002822:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002826:	f7fd bcd3 	b.w	80001d0 <d_make_comp>
 800282a:	4628      	mov	r0, r5
 800282c:	f7fe ff60 	bl	80016f0 <d_type>
 8002830:	4604      	mov	r4, r0
 8002832:	f105 000c 	add.w	r0, r5, #12
 8002836:	f7fd fe1d 	bl	8000474 <d_number.isra.0>
 800283a:	2800      	cmp	r0, #0
 800283c:	f6ff ada1 	blt.w	8002382 <d_encoding+0x62>
 8002840:	68eb      	ldr	r3, [r5, #12]
 8002842:	781a      	ldrb	r2, [r3, #0]
 8002844:	2a5f      	cmp	r2, #95	; 0x5f
 8002846:	f47f ad9c 	bne.w	8002382 <d_encoding+0x62>
 800284a:	3301      	adds	r3, #1
 800284c:	60eb      	str	r3, [r5, #12]
 800284e:	4628      	mov	r0, r5
 8002850:	f7fe ff4e 	bl	80016f0 <d_type>
 8002854:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002856:	1d59      	adds	r1, r3, #5
 8002858:	6329      	str	r1, [r5, #48]	; 0x30
 800285a:	4602      	mov	r2, r0
 800285c:	4623      	mov	r3, r4
 800285e:	4628      	mov	r0, r5
 8002860:	210b      	movs	r1, #11
 8002862:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002866:	f7fd bcb3 	b.w	80001d0 <d_make_comp>
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	e574      	b.n	8002358 <d_encoding+0x38>
 800286e:	68eb      	ldr	r3, [r5, #12]
 8002870:	440b      	add	r3, r1
 8002872:	60eb      	str	r3, [r5, #12]
 8002874:	2400      	movs	r4, #0
 8002876:	e585      	b.n	8002384 <d_encoding+0x64>
 8002878:	787b      	ldrb	r3, [r7, #1]
 800287a:	2b53      	cmp	r3, #83	; 0x53
 800287c:	d027      	beq.n	80028ce <d_encoding+0x5ae>
 800287e:	2b5f      	cmp	r3, #95	; 0x5f
 8002880:	d023      	beq.n	80028ca <d_encoding+0x5aa>
 8002882:	2b24      	cmp	r3, #36	; 0x24
 8002884:	f47f ad7d 	bne.w	8002382 <d_encoding+0x62>
 8002888:	4618      	mov	r0, r3
 800288a:	6969      	ldr	r1, [r5, #20]
 800288c:	69ab      	ldr	r3, [r5, #24]
 800288e:	4299      	cmp	r1, r3
 8002890:	da1f      	bge.n	80028d2 <d_encoding+0x5b2>
 8002892:	692c      	ldr	r4, [r5, #16]
 8002894:	1c4f      	adds	r7, r1, #1
 8002896:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800289a:	eb14 0381 	adds.w	r3, r4, r1, lsl #2
 800289e:	616f      	str	r7, [r5, #20]
 80028a0:	d017      	beq.n	80028d2 <d_encoding+0x5b2>
 80028a2:	f804 9021 	strb.w	r9, [r4, r1, lsl #2]
 80028a6:	6058      	str	r0, [r3, #4]
 80028a8:	68ef      	ldr	r7, [r5, #12]
 80028aa:	3702      	adds	r7, #2
 80028ac:	3e02      	subs	r6, #2
 80028ae:	60ef      	str	r7, [r5, #12]
 80028b0:	e6db      	b.n	800266a <d_encoding+0x34a>
 80028b2:	461a      	mov	r2, r3
 80028b4:	e6e4      	b.n	8002680 <d_encoding+0x360>
 80028b6:	f7ff fd33 	bl	8002320 <d_encoding>
 80028ba:	2300      	movs	r3, #0
 80028bc:	4602      	mov	r2, r0
 80028be:	2148      	movs	r1, #72	; 0x48
 80028c0:	4628      	mov	r0, r5
 80028c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028c6:	f7fd bc83 	b.w	80001d0 <d_make_comp>
 80028ca:	202e      	movs	r0, #46	; 0x2e
 80028cc:	e7dd      	b.n	800288a <d_encoding+0x56a>
 80028ce:	202f      	movs	r0, #47	; 0x2f
 80028d0:	e7db      	b.n	800288a <d_encoding+0x56a>
 80028d2:	68eb      	ldr	r3, [r5, #12]
 80028d4:	3302      	adds	r3, #2
 80028d6:	60eb      	str	r3, [r5, #12]
 80028d8:	2400      	movs	r4, #0
 80028da:	e553      	b.n	8002384 <d_encoding+0x64>

080028dc <d_expr_primary>:
 80028dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028de:	68c2      	ldr	r2, [r0, #12]
 80028e0:	7813      	ldrb	r3, [r2, #0]
 80028e2:	2b4c      	cmp	r3, #76	; 0x4c
 80028e4:	d001      	beq.n	80028ea <d_expr_primary+0xe>
 80028e6:	2000      	movs	r0, #0
 80028e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028ea:	1c53      	adds	r3, r2, #1
 80028ec:	60c3      	str	r3, [r0, #12]
 80028ee:	7851      	ldrb	r1, [r2, #1]
 80028f0:	295f      	cmp	r1, #95	; 0x5f
 80028f2:	4605      	mov	r5, r0
 80028f4:	d03a      	beq.n	800296c <d_expr_primary+0x90>
 80028f6:	295a      	cmp	r1, #90	; 0x5a
 80028f8:	d03f      	beq.n	800297a <d_expr_primary+0x9e>
 80028fa:	f7fe fef9 	bl	80016f0 <d_type>
 80028fe:	2800      	cmp	r0, #0
 8002900:	d0f1      	beq.n	80028e6 <d_expr_primary+0xa>
 8002902:	7803      	ldrb	r3, [r0, #0]
 8002904:	2b27      	cmp	r3, #39	; 0x27
 8002906:	d046      	beq.n	8002996 <d_expr_primary+0xba>
 8002908:	68ee      	ldr	r6, [r5, #12]
 800290a:	7833      	ldrb	r3, [r6, #0]
 800290c:	2b6e      	cmp	r3, #110	; 0x6e
 800290e:	d04b      	beq.n	80029a8 <d_expr_primary+0xcc>
 8002910:	213c      	movs	r1, #60	; 0x3c
 8002912:	2b45      	cmp	r3, #69	; 0x45
 8002914:	d04e      	beq.n	80029b4 <d_expr_primary+0xd8>
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0e5      	beq.n	80028e6 <d_expr_primary+0xa>
 800291a:	4633      	mov	r3, r6
 800291c:	e001      	b.n	8002922 <d_expr_primary+0x46>
 800291e:	2c00      	cmp	r4, #0
 8002920:	d0e1      	beq.n	80028e6 <d_expr_primary+0xa>
 8002922:	3301      	adds	r3, #1
 8002924:	60eb      	str	r3, [r5, #12]
 8002926:	781c      	ldrb	r4, [r3, #0]
 8002928:	2c45      	cmp	r4, #69	; 0x45
 800292a:	d1f8      	bne.n	800291e <d_expr_primary+0x42>
 800292c:	1b9c      	subs	r4, r3, r6
 800292e:	696b      	ldr	r3, [r5, #20]
 8002930:	69aa      	ldr	r2, [r5, #24]
 8002932:	4293      	cmp	r3, r2
 8002934:	da2d      	bge.n	8002992 <d_expr_primary+0xb6>
 8002936:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800293a:	692f      	ldr	r7, [r5, #16]
 800293c:	3301      	adds	r3, #1
 800293e:	0092      	lsls	r2, r2, #2
 8002940:	616b      	str	r3, [r5, #20]
 8002942:	18bb      	adds	r3, r7, r2
 8002944:	d025      	beq.n	8002992 <d_expr_primary+0xb6>
 8002946:	b326      	cbz	r6, 8002992 <d_expr_primary+0xb6>
 8002948:	b31c      	cbz	r4, 8002992 <d_expr_primary+0xb6>
 800294a:	f04f 0e00 	mov.w	lr, #0
 800294e:	f807 e002 	strb.w	lr, [r7, r2]
 8002952:	605e      	str	r6, [r3, #4]
 8002954:	609c      	str	r4, [r3, #8]
 8002956:	4602      	mov	r2, r0
 8002958:	4628      	mov	r0, r5
 800295a:	f7fd fc39 	bl	80001d0 <d_make_comp>
 800295e:	68eb      	ldr	r3, [r5, #12]
 8002960:	781a      	ldrb	r2, [r3, #0]
 8002962:	2a45      	cmp	r2, #69	; 0x45
 8002964:	d1bf      	bne.n	80028e6 <d_expr_primary+0xa>
 8002966:	3301      	adds	r3, #1
 8002968:	60eb      	str	r3, [r5, #12]
 800296a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800296c:	1c93      	adds	r3, r2, #2
 800296e:	60c3      	str	r3, [r0, #12]
 8002970:	7892      	ldrb	r2, [r2, #2]
 8002972:	2a5a      	cmp	r2, #90	; 0x5a
 8002974:	bf18      	it	ne
 8002976:	2000      	movne	r0, #0
 8002978:	d107      	bne.n	800298a <d_expr_primary+0xae>
 800297a:	3301      	adds	r3, #1
 800297c:	60eb      	str	r3, [r5, #12]
 800297e:	2100      	movs	r1, #0
 8002980:	4628      	mov	r0, r5
 8002982:	f7ff fccd 	bl	8002320 <d_encoding>
 8002986:	68eb      	ldr	r3, [r5, #12]
 8002988:	781a      	ldrb	r2, [r3, #0]
 800298a:	2a45      	cmp	r2, #69	; 0x45
 800298c:	d0eb      	beq.n	8002966 <d_expr_primary+0x8a>
 800298e:	2000      	movs	r0, #0
 8002990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002992:	2300      	movs	r3, #0
 8002994:	e7df      	b.n	8002956 <d_expr_primary+0x7a>
 8002996:	6843      	ldr	r3, [r0, #4]
 8002998:	7c1a      	ldrb	r2, [r3, #16]
 800299a:	2a00      	cmp	r2, #0
 800299c:	d0b4      	beq.n	8002908 <d_expr_primary+0x2c>
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80029a2:	1a9b      	subs	r3, r3, r2
 80029a4:	632b      	str	r3, [r5, #48]	; 0x30
 80029a6:	e7af      	b.n	8002908 <d_expr_primary+0x2c>
 80029a8:	1c72      	adds	r2, r6, #1
 80029aa:	60ea      	str	r2, [r5, #12]
 80029ac:	7873      	ldrb	r3, [r6, #1]
 80029ae:	213d      	movs	r1, #61	; 0x3d
 80029b0:	4616      	mov	r6, r2
 80029b2:	e7ae      	b.n	8002912 <d_expr_primary+0x36>
 80029b4:	2400      	movs	r4, #0
 80029b6:	e7ba      	b.n	800292e <d_expr_primary+0x52>

080029b8 <d_print_comp_inner>:
 80029b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029bc:	4604      	mov	r4, r0
 80029be:	b095      	sub	sp, #84	; 0x54
 80029c0:	2a00      	cmp	r2, #0
 80029c2:	f000 80db 	beq.w	8002b7c <d_print_comp_inner+0x1c4>
 80029c6:	f8d0 7118 	ldr.w	r7, [r0, #280]	; 0x118
 80029ca:	2f00      	cmp	r7, #0
 80029cc:	f040 80c2 	bne.w	8002b54 <d_print_comp_inner+0x19c>
 80029d0:	7813      	ldrb	r3, [r2, #0]
 80029d2:	4688      	mov	r8, r1
 80029d4:	4615      	mov	r5, r2
 80029d6:	2b4d      	cmp	r3, #77	; 0x4d
 80029d8:	f201 81e6 	bhi.w	8003da8 <d_print_comp_inner+0x13f0>
 80029dc:	e8df f013 	tbh	[pc, r3, lsl #1]
 80029e0:	043c045a 	.word	0x043c045a
 80029e4:	03a4043c 	.word	0x03a4043c
 80029e8:	048904a5 	.word	0x048904a5
 80029ec:	038e04ea 	.word	0x038e04ea
 80029f0:	0330037c 	.word	0x0330037c
 80029f4:	030a0356 	.word	0x030a0356
 80029f8:	029802e4 	.word	0x029802e4
 80029fc:	027202be 	.word	0x027202be
 8002a00:	01f0024c 	.word	0x01f0024c
 8002a04:	01ca0226 	.word	0x01ca0226
 8002a08:	015801a4 	.word	0x015801a4
 8002a0c:	0132017e 	.word	0x0132017e
 8002a10:	00f2010b 	.word	0x00f2010b
 8002a14:	00f200f2 	.word	0x00f200f2
 8002a18:	00d400d4 	.word	0x00d400d4
 8002a1c:	00d400d4 	.word	0x00d400d4
 8002a20:	00d400d4 	.word	0x00d400d4
 8002a24:	06d500d4 	.word	0x06d500d4
 8002a28:	00d406d5 	.word	0x00d406d5
 8002a2c:	06a900d4 	.word	0x06a900d4
 8002a30:	069306fc 	.word	0x069306fc
 8002a34:	0701071d 	.word	0x0701071d
 8002a38:	07010788 	.word	0x07010788
 8002a3c:	057b057b 	.word	0x057b057b
 8002a40:	06060630 	.word	0x06060630
 8002a44:	09e405e0 	.word	0x09e405e0
 8002a48:	068e05ad 	.word	0x068e05ad
 8002a4c:	004e0654 	.word	0x004e0654
 8002a50:	094c0485 	.word	0x094c0485
 8002a54:	08df08df 	.word	0x08df08df
 8002a58:	08ae08ae 	.word	0x08ae08ae
 8002a5c:	05480888 	.word	0x05480888
 8002a60:	08e4053a 	.word	0x08e4053a
 8002a64:	09be0514 	.word	0x09be0514
 8002a68:	09980914 	.word	0x09980914
 8002a6c:	07cb09e4 	.word	0x07cb09e4
 8002a70:	07f10862 	.word	0x07f10862
 8002a74:	04130817 	.word	0x04130817
 8002a78:	055200d4 	.word	0x055200d4
 8002a7c:	68ab      	ldr	r3, [r5, #8]
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b38      	cmp	r3, #56	; 0x38
 8002a82:	d17b      	bne.n	8002b7c <d_print_comp_inner+0x1c4>
 8002a84:	686a      	ldr	r2, [r5, #4]
 8002a86:	6853      	ldr	r3, [r2, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	7859      	ldrb	r1, [r3, #1]
 8002a8c:	2963      	cmp	r1, #99	; 0x63
 8002a8e:	f002 814a 	beq.w	8004d26 <d_print_comp_inner+0x236e>
 8002a92:	f105 0308 	add.w	r3, r5, #8
 8002a96:	4641      	mov	r1, r8
 8002a98:	4620      	mov	r0, r4
 8002a9a:	f003 fbbb 	bl	8006214 <d_maybe_print_fold_expression.isra.15>
 8002a9e:	4606      	mov	r6, r0
 8002aa0:	2800      	cmp	r0, #0
 8002aa2:	d157      	bne.n	8002b54 <d_print_comp_inner+0x19c>
 8002aa4:	686b      	ldr	r3, [r5, #4]
 8002aa6:	781a      	ldrb	r2, [r3, #0]
 8002aa8:	2a31      	cmp	r2, #49	; 0x31
 8002aaa:	f002 836b 	beq.w	8005184 <d_print_comp_inner+0x27cc>
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	49c7      	ldr	r1, [pc, #796]	; (8002dd0 <d_print_comp_inner+0x418>)
 8002ab2:	6818      	ldr	r0, [r3, #0]
 8002ab4:	f003 ff34 	bl	8006920 <strcmp>
 8002ab8:	68ab      	ldr	r3, [r5, #8]
 8002aba:	b920      	cbnz	r0, 8002ac6 <d_print_comp_inner+0x10e>
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	7811      	ldrb	r1, [r2, #0]
 8002ac0:	2903      	cmp	r1, #3
 8002ac2:	f002 83a5 	beq.w	8005210 <d_print_comp_inner+0x2858>
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	4641      	mov	r1, r8
 8002aca:	4620      	mov	r0, r4
 8002acc:	f003 fb3e 	bl	800614c <d_print_subexpr>
 8002ad0:	686f      	ldr	r7, [r5, #4]
 8002ad2:	49c0      	ldr	r1, [pc, #768]	; (8002dd4 <d_print_comp_inner+0x41c>)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f8d3 9000 	ldr.w	r9, [r3]
 8002ada:	4648      	mov	r0, r9
 8002adc:	f003 ff20 	bl	8006920 <strcmp>
 8002ae0:	4606      	mov	r6, r0
 8002ae2:	2800      	cmp	r0, #0
 8002ae4:	f042 826f 	bne.w	8004fc6 <d_print_comp_inner+0x260e>
 8002ae8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002aec:	29ff      	cmp	r1, #255	; 0xff
 8002aee:	f002 844a 	beq.w	8005386 <d_print_comp_inner+0x29ce>
 8002af2:	1c4a      	adds	r2, r1, #1
 8002af4:	235b      	movs	r3, #91	; 0x5b
 8002af6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002afa:	5463      	strb	r3, [r4, r1]
 8002afc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002b00:	68ab      	ldr	r3, [r5, #8]
 8002b02:	4641      	mov	r1, r8
 8002b04:	689a      	ldr	r2, [r3, #8]
 8002b06:	4620      	mov	r0, r4
 8002b08:	f002 fcfa 	bl	8005500 <d_print_comp>
 8002b0c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002b10:	29ff      	cmp	r1, #255	; 0xff
 8002b12:	f002 8425 	beq.w	8005360 <d_print_comp_inner+0x29a8>
 8002b16:	235d      	movs	r3, #93	; 0x5d
 8002b18:	1c4a      	adds	r2, r1, #1
 8002b1a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002b1e:	5463      	strb	r3, [r4, r1]
 8002b20:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002b24:	686b      	ldr	r3, [r5, #4]
 8002b26:	781a      	ldrb	r2, [r3, #0]
 8002b28:	2a31      	cmp	r2, #49	; 0x31
 8002b2a:	d113      	bne.n	8002b54 <d_print_comp_inner+0x19c>
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	2a01      	cmp	r2, #1
 8002b32:	d10f      	bne.n	8002b54 <d_print_comp_inner+0x19c>
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b3e      	cmp	r3, #62	; 0x3e
 8002b3a:	d10b      	bne.n	8002b54 <d_print_comp_inner+0x19c>
 8002b3c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002b40:	29ff      	cmp	r1, #255	; 0xff
 8002b42:	f002 8482 	beq.w	800544a <d_print_comp_inner+0x2a92>
 8002b46:	2329      	movs	r3, #41	; 0x29
 8002b48:	1c4a      	adds	r2, r1, #1
 8002b4a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002b4e:	5463      	strb	r3, [r4, r1]
 8002b50:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002b54:	b015      	add	sp, #84	; 0x54
 8002b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b5a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f2c1 84a4 	blt.w	80044ac <d_print_comp_inner+0x1af4>
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f002 8432 	beq.w	80053ce <d_print_comp_inner+0x2a16>
 8002b6a:	6880      	ldr	r0, [r0, #8]
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	b110      	cbz	r0, 8002b76 <d_print_comp_inner+0x1be>
 8002b70:	7802      	ldrb	r2, [r0, #0]
 8002b72:	2a2f      	cmp	r2, #47	; 0x2f
 8002b74:	d0f6      	beq.n	8002b64 <d_print_comp_inner+0x1ac>
 8002b76:	b10f      	cbz	r7, 8002b7c <d_print_comp_inner+0x1c4>
 8002b78:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8002b82:	b015      	add	sp, #84	; 0x54
 8002b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b88:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 8002b8c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
 8002b90:	9505      	str	r5, [sp, #20]
 8002b92:	ab14      	add	r3, sp, #80	; 0x50
 8002b94:	2100      	movs	r1, #0
 8002b96:	f843 cd40 	str.w	ip, [r3, #-64]!
 8002b9a:	9106      	str	r1, [sp, #24]
 8002b9c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8002ba0:	9207      	str	r2, [sp, #28]
 8002ba2:	686a      	ldr	r2, [r5, #4]
 8002ba4:	4641      	mov	r1, r8
 8002ba6:	4620      	mov	r0, r4
 8002ba8:	f002 fcaa 	bl	8005500 <d_print_comp>
 8002bac:	9b06      	ldr	r3, [sp, #24]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f001 8389 	beq.w	80042c6 <d_print_comp_inner+0x190e>
 8002bb4:	9b04      	ldr	r3, [sp, #16]
 8002bb6:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8002bba:	2f00      	cmp	r7, #0
 8002bbc:	d0ca      	beq.n	8002b54 <d_print_comp_inner+0x19c>
 8002bbe:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
 8002bc2:	e7c7      	b.n	8002b54 <d_print_comp_inner+0x19c>
 8002bc4:	f8d0 c114 	ldr.w	ip, [r0, #276]	; 0x114
 8002bc8:	f1bc 0f00 	cmp.w	ip, #0
 8002bcc:	d0de      	beq.n	8002b8c <d_print_comp_inner+0x1d4>
 8002bce:	4662      	mov	r2, ip
 8002bd0:	e005      	b.n	8002bde <d_print_comp_inner+0x226>
 8002bd2:	428b      	cmp	r3, r1
 8002bd4:	f001 86b8 	beq.w	8004948 <d_print_comp_inner+0x1f90>
 8002bd8:	6812      	ldr	r2, [r2, #0]
 8002bda:	2a00      	cmp	r2, #0
 8002bdc:	d0d6      	beq.n	8002b8c <d_print_comp_inner+0x1d4>
 8002bde:	6890      	ldr	r0, [r2, #8]
 8002be0:	2800      	cmp	r0, #0
 8002be2:	d1f9      	bne.n	8002bd8 <d_print_comp_inner+0x220>
 8002be4:	6851      	ldr	r1, [r2, #4]
 8002be6:	7809      	ldrb	r1, [r1, #0]
 8002be8:	f1a1 0e19 	sub.w	lr, r1, #25
 8002bec:	f1be 0f02 	cmp.w	lr, #2
 8002bf0:	d9ef      	bls.n	8002bd2 <d_print_comp_inner+0x21a>
 8002bf2:	4607      	mov	r7, r0
 8002bf4:	e7ca      	b.n	8002b8c <d_print_comp_inner+0x1d4>
 8002bf6:	68af      	ldr	r7, [r5, #8]
 8002bf8:	686d      	ldr	r5, [r5, #4]
 8002bfa:	2f00      	cmp	r7, #0
 8002bfc:	d0aa      	beq.n	8002b54 <d_print_comp_inner+0x19c>
 8002bfe:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002c02:	442f      	add	r7, r5
 8002c04:	f04f 0800 	mov.w	r8, #0
 8002c08:	e008      	b.n	8002c1c <d_print_comp_inner+0x264>
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	3101      	adds	r1, #1
 8002c0e:	42bd      	cmp	r5, r7
 8002c10:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002c14:	54e6      	strb	r6, [r4, r3]
 8002c16:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8002c1a:	d09b      	beq.n	8002b54 <d_print_comp_inner+0x19c>
 8002c1c:	29ff      	cmp	r1, #255	; 0xff
 8002c1e:	f815 6b01 	ldrb.w	r6, [r5], #1
 8002c22:	d1f2      	bne.n	8002c0a <d_print_comp_inner+0x252>
 8002c24:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002c28:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8002c2c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002c30:	4620      	mov	r0, r4
 8002c32:	4798      	blx	r3
 8002c34:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002c38:	3301      	adds	r3, #1
 8002c3a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002c3e:	2101      	movs	r1, #1
 8002c40:	2300      	movs	r3, #0
 8002c42:	e7e4      	b.n	8002c0e <d_print_comp_inner+0x256>
 8002c44:	4e64      	ldr	r6, [pc, #400]	; (8002dd8 <d_print_comp_inner+0x420>)
 8002c46:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002c4a:	f106 0a11 	add.w	sl, r6, #17
 8002c4e:	f04f 0900 	mov.w	r9, #0
 8002c52:	e009      	b.n	8002c68 <d_print_comp_inner+0x2b0>
 8002c54:	460b      	mov	r3, r1
 8002c56:	3101      	adds	r1, #1
 8002c58:	4556      	cmp	r6, sl
 8002c5a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002c5e:	54e7      	strb	r7, [r4, r3]
 8002c60:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002c64:	f001 8296 	beq.w	8004194 <d_print_comp_inner+0x17dc>
 8002c68:	29ff      	cmp	r1, #255	; 0xff
 8002c6a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002c6e:	d1f1      	bne.n	8002c54 <d_print_comp_inner+0x29c>
 8002c70:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002c74:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002c78:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002c7c:	4620      	mov	r0, r4
 8002c7e:	4798      	blx	r3
 8002c80:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002c84:	3301      	adds	r3, #1
 8002c86:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	e7e3      	b.n	8002c58 <d_print_comp_inner+0x2a0>
 8002c90:	4e52      	ldr	r6, [pc, #328]	; (8002ddc <d_print_comp_inner+0x424>)
 8002c92:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002c96:	f106 0a19 	add.w	sl, r6, #25
 8002c9a:	f04f 0900 	mov.w	r9, #0
 8002c9e:	e009      	b.n	8002cb4 <d_print_comp_inner+0x2fc>
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	3101      	adds	r1, #1
 8002ca4:	4556      	cmp	r6, sl
 8002ca6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002caa:	54e7      	strb	r7, [r4, r3]
 8002cac:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002cb0:	f001 82a8 	beq.w	8004204 <d_print_comp_inner+0x184c>
 8002cb4:	29ff      	cmp	r1, #255	; 0xff
 8002cb6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002cba:	d1f1      	bne.n	8002ca0 <d_print_comp_inner+0x2e8>
 8002cbc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002cc0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002cc4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002cc8:	4620      	mov	r0, r4
 8002cca:	4798      	blx	r3
 8002ccc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	2300      	movs	r3, #0
 8002cda:	e7e3      	b.n	8002ca4 <d_print_comp_inner+0x2ec>
 8002cdc:	4e40      	ldr	r6, [pc, #256]	; (8002de0 <d_print_comp_inner+0x428>)
 8002cde:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002ce2:	f106 0a15 	add.w	sl, r6, #21
 8002ce6:	f04f 0900 	mov.w	r9, #0
 8002cea:	e009      	b.n	8002d00 <d_print_comp_inner+0x348>
 8002cec:	460b      	mov	r3, r1
 8002cee:	3101      	adds	r1, #1
 8002cf0:	4556      	cmp	r6, sl
 8002cf2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002cf6:	54e7      	strb	r7, [r4, r3]
 8002cf8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002cfc:	f001 8251 	beq.w	80041a2 <d_print_comp_inner+0x17ea>
 8002d00:	29ff      	cmp	r1, #255	; 0xff
 8002d02:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002d06:	d1f1      	bne.n	8002cec <d_print_comp_inner+0x334>
 8002d08:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002d0c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002d10:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002d14:	4620      	mov	r0, r4
 8002d16:	4798      	blx	r3
 8002d18:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002d22:	2101      	movs	r1, #1
 8002d24:	2300      	movs	r3, #0
 8002d26:	e7e3      	b.n	8002cf0 <d_print_comp_inner+0x338>
 8002d28:	4e2e      	ldr	r6, [pc, #184]	; (8002de4 <d_print_comp_inner+0x42c>)
 8002d2a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002d2e:	f106 0a16 	add.w	sl, r6, #22
 8002d32:	f04f 0900 	mov.w	r9, #0
 8002d36:	e009      	b.n	8002d4c <d_print_comp_inner+0x394>
 8002d38:	460b      	mov	r3, r1
 8002d3a:	3101      	adds	r1, #1
 8002d3c:	4556      	cmp	r6, sl
 8002d3e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002d42:	54e7      	strb	r7, [r4, r3]
 8002d44:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002d48:	f001 8263 	beq.w	8004212 <d_print_comp_inner+0x185a>
 8002d4c:	29ff      	cmp	r1, #255	; 0xff
 8002d4e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002d52:	d1f1      	bne.n	8002d38 <d_print_comp_inner+0x380>
 8002d54:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002d58:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002d5c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002d60:	4620      	mov	r0, r4
 8002d62:	4798      	blx	r3
 8002d64:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002d68:	3301      	adds	r3, #1
 8002d6a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002d6e:	2101      	movs	r1, #1
 8002d70:	2300      	movs	r3, #0
 8002d72:	e7e3      	b.n	8002d3c <d_print_comp_inner+0x384>
 8002d74:	4e1c      	ldr	r6, [pc, #112]	; (8002de8 <d_print_comp_inner+0x430>)
 8002d76:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002d7a:	f106 0a13 	add.w	sl, r6, #19
 8002d7e:	f04f 0900 	mov.w	r9, #0
 8002d82:	e009      	b.n	8002d98 <d_print_comp_inner+0x3e0>
 8002d84:	460b      	mov	r3, r1
 8002d86:	3101      	adds	r1, #1
 8002d88:	45b2      	cmp	sl, r6
 8002d8a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002d8e:	54e7      	strb	r7, [r4, r3]
 8002d90:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002d94:	f001 8077 	beq.w	8003e86 <d_print_comp_inner+0x14ce>
 8002d98:	29ff      	cmp	r1, #255	; 0xff
 8002d9a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002d9e:	d1f1      	bne.n	8002d84 <d_print_comp_inner+0x3cc>
 8002da0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002da4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002da8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002dac:	4620      	mov	r0, r4
 8002dae:	4798      	blx	r3
 8002db0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002db4:	3301      	adds	r3, #1
 8002db6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002dba:	2101      	movs	r1, #1
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	e7e3      	b.n	8002d88 <d_print_comp_inner+0x3d0>
 8002dc0:	4e0a      	ldr	r6, [pc, #40]	; (8002dec <d_print_comp_inner+0x434>)
 8002dc2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002dc6:	f106 0a1a 	add.w	sl, r6, #26
 8002dca:	f04f 0900 	mov.w	r9, #0
 8002dce:	e019      	b.n	8002e04 <d_print_comp_inner+0x44c>
 8002dd0:	08017a70 	.word	0x08017a70
 8002dd4:	08017c6c 	.word	0x08017c6c
 8002dd8:	08017bfb 	.word	0x08017bfb
 8002ddc:	08017bc7 	.word	0x08017bc7
 8002de0:	08017be3 	.word	0x08017be3
 8002de4:	08017baf 	.word	0x08017baf
 8002de8:	08017b9b 	.word	0x08017b9b
 8002dec:	08017b6f 	.word	0x08017b6f
 8002df0:	460b      	mov	r3, r1
 8002df2:	3101      	adds	r1, #1
 8002df4:	4556      	cmp	r6, sl
 8002df6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002dfa:	54e7      	strb	r7, [r4, r3]
 8002dfc:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002e00:	f001 804f 	beq.w	8003ea2 <d_print_comp_inner+0x14ea>
 8002e04:	29ff      	cmp	r1, #255	; 0xff
 8002e06:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002e0a:	d1f1      	bne.n	8002df0 <d_print_comp_inner+0x438>
 8002e0c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002e10:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002e14:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002e18:	4620      	mov	r0, r4
 8002e1a:	4798      	blx	r3
 8002e1c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002e20:	3301      	adds	r3, #1
 8002e22:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002e26:	2101      	movs	r1, #1
 8002e28:	2300      	movs	r3, #0
 8002e2a:	e7e3      	b.n	8002df4 <d_print_comp_inner+0x43c>
 8002e2c:	4eb5      	ldr	r6, [pc, #724]	; (8003104 <d_print_comp_inner+0x74c>)
 8002e2e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002e32:	f106 0a0f 	add.w	sl, r6, #15
 8002e36:	f04f 0900 	mov.w	r9, #0
 8002e3a:	e009      	b.n	8002e50 <d_print_comp_inner+0x498>
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	3101      	adds	r1, #1
 8002e40:	4556      	cmp	r6, sl
 8002e42:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002e46:	54e7      	strb	r7, [r4, r3]
 8002e48:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002e4c:	f001 8022 	beq.w	8003e94 <d_print_comp_inner+0x14dc>
 8002e50:	29ff      	cmp	r1, #255	; 0xff
 8002e52:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002e56:	d1f1      	bne.n	8002e3c <d_print_comp_inner+0x484>
 8002e58:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002e5c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002e60:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002e64:	4620      	mov	r0, r4
 8002e66:	4798      	blx	r3
 8002e68:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002e72:	2101      	movs	r1, #1
 8002e74:	2300      	movs	r3, #0
 8002e76:	e7e3      	b.n	8002e40 <d_print_comp_inner+0x488>
 8002e78:	4ea3      	ldr	r6, [pc, #652]	; (8003108 <d_print_comp_inner+0x750>)
 8002e7a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002e7e:	f106 0a11 	add.w	sl, r6, #17
 8002e82:	f04f 0900 	mov.w	r9, #0
 8002e86:	e009      	b.n	8002e9c <d_print_comp_inner+0x4e4>
 8002e88:	460b      	mov	r3, r1
 8002e8a:	3101      	adds	r1, #1
 8002e8c:	4556      	cmp	r6, sl
 8002e8e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002e92:	54e7      	strb	r7, [r4, r3]
 8002e94:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002e98:	f001 800a 	beq.w	8003eb0 <d_print_comp_inner+0x14f8>
 8002e9c:	29ff      	cmp	r1, #255	; 0xff
 8002e9e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002ea2:	d1f1      	bne.n	8002e88 <d_print_comp_inner+0x4d0>
 8002ea4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002ea8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002eac:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002eb0:	4620      	mov	r0, r4
 8002eb2:	4798      	blx	r3
 8002eb4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002eb8:	3301      	adds	r3, #1
 8002eba:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	e7e3      	b.n	8002e8c <d_print_comp_inner+0x4d4>
 8002ec4:	4e91      	ldr	r6, [pc, #580]	; (800310c <d_print_comp_inner+0x754>)
 8002ec6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002eca:	f106 0a15 	add.w	sl, r6, #21
 8002ece:	f04f 0900 	mov.w	r9, #0
 8002ed2:	e009      	b.n	8002ee8 <d_print_comp_inner+0x530>
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	3101      	adds	r1, #1
 8002ed8:	4556      	cmp	r6, sl
 8002eda:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002ede:	54e7      	strb	r7, [r4, r3]
 8002ee0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002ee4:	f000 87b3 	beq.w	8003e4e <d_print_comp_inner+0x1496>
 8002ee8:	29ff      	cmp	r1, #255	; 0xff
 8002eea:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002eee:	d1f1      	bne.n	8002ed4 <d_print_comp_inner+0x51c>
 8002ef0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002ef4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002ef8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002efc:	4620      	mov	r0, r4
 8002efe:	4798      	blx	r3
 8002f00:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002f04:	3301      	adds	r3, #1
 8002f06:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	e7e3      	b.n	8002ed8 <d_print_comp_inner+0x520>
 8002f10:	4e7f      	ldr	r6, [pc, #508]	; (8003110 <d_print_comp_inner+0x758>)
 8002f12:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002f16:	f106 0a12 	add.w	sl, r6, #18
 8002f1a:	f04f 0900 	mov.w	r9, #0
 8002f1e:	e009      	b.n	8002f34 <d_print_comp_inner+0x57c>
 8002f20:	460b      	mov	r3, r1
 8002f22:	3101      	adds	r1, #1
 8002f24:	45b2      	cmp	sl, r6
 8002f26:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002f2a:	54e7      	strb	r7, [r4, r3]
 8002f2c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002f30:	f000 879b 	beq.w	8003e6a <d_print_comp_inner+0x14b2>
 8002f34:	29ff      	cmp	r1, #255	; 0xff
 8002f36:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002f3a:	d1f1      	bne.n	8002f20 <d_print_comp_inner+0x568>
 8002f3c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002f40:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002f44:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002f48:	4620      	mov	r0, r4
 8002f4a:	4798      	blx	r3
 8002f4c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002f50:	3301      	adds	r3, #1
 8002f52:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002f56:	2101      	movs	r1, #1
 8002f58:	2300      	movs	r3, #0
 8002f5a:	e7e3      	b.n	8002f24 <d_print_comp_inner+0x56c>
 8002f5c:	4e6d      	ldr	r6, [pc, #436]	; (8003114 <d_print_comp_inner+0x75c>)
 8002f5e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002f62:	f106 0a10 	add.w	sl, r6, #16
 8002f66:	f04f 0900 	mov.w	r9, #0
 8002f6a:	e009      	b.n	8002f80 <d_print_comp_inner+0x5c8>
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	3101      	adds	r1, #1
 8002f70:	4556      	cmp	r6, sl
 8002f72:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002f76:	54e7      	strb	r7, [r4, r3]
 8002f78:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002f7c:	f000 876e 	beq.w	8003e5c <d_print_comp_inner+0x14a4>
 8002f80:	29ff      	cmp	r1, #255	; 0xff
 8002f82:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002f86:	d1f1      	bne.n	8002f6c <d_print_comp_inner+0x5b4>
 8002f88:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002f8c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002f90:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002f94:	4620      	mov	r0, r4
 8002f96:	4798      	blx	r3
 8002f98:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	e7e3      	b.n	8002f70 <d_print_comp_inner+0x5b8>
 8002fa8:	4e5b      	ldr	r6, [pc, #364]	; (8003118 <d_print_comp_inner+0x760>)
 8002faa:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002fae:	f106 0a0d 	add.w	sl, r6, #13
 8002fb2:	f04f 0900 	mov.w	r9, #0
 8002fb6:	e009      	b.n	8002fcc <d_print_comp_inner+0x614>
 8002fb8:	460b      	mov	r3, r1
 8002fba:	3101      	adds	r1, #1
 8002fbc:	4556      	cmp	r6, sl
 8002fbe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002fc2:	54e7      	strb	r7, [r4, r3]
 8002fc4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002fc8:	f000 8756 	beq.w	8003e78 <d_print_comp_inner+0x14c0>
 8002fcc:	29ff      	cmp	r1, #255	; 0xff
 8002fce:	f816 7b01 	ldrb.w	r7, [r6], #1
 8002fd2:	d1f1      	bne.n	8002fb8 <d_print_comp_inner+0x600>
 8002fd4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002fd8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002fdc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002fe0:	4620      	mov	r0, r4
 8002fe2:	4798      	blx	r3
 8002fe4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002fe8:	3301      	adds	r3, #1
 8002fea:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002fee:	2101      	movs	r1, #1
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	e7e3      	b.n	8002fbc <d_print_comp_inner+0x604>
 8002ff4:	4e49      	ldr	r6, [pc, #292]	; (800311c <d_print_comp_inner+0x764>)
 8002ff6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002ffa:	f106 0a18 	add.w	sl, r6, #24
 8002ffe:	f04f 0900 	mov.w	r9, #0
 8003002:	e009      	b.n	8003018 <d_print_comp_inner+0x660>
 8003004:	460b      	mov	r3, r1
 8003006:	3101      	adds	r1, #1
 8003008:	45b2      	cmp	sl, r6
 800300a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800300e:	54e7      	strb	r7, [r4, r3]
 8003010:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003014:	f000 86e3 	beq.w	8003dde <d_print_comp_inner+0x1426>
 8003018:	29ff      	cmp	r1, #255	; 0xff
 800301a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 800301e:	d1f1      	bne.n	8003004 <d_print_comp_inner+0x64c>
 8003020:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003024:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003028:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800302c:	4620      	mov	r0, r4
 800302e:	4798      	blx	r3
 8003030:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003034:	3301      	adds	r3, #1
 8003036:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800303a:	2101      	movs	r1, #1
 800303c:	2300      	movs	r3, #0
 800303e:	e7e3      	b.n	8003008 <d_print_comp_inner+0x650>
 8003040:	4e37      	ldr	r6, [pc, #220]	; (8003120 <d_print_comp_inner+0x768>)
 8003042:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003046:	f106 0a0b 	add.w	sl, r6, #11
 800304a:	f04f 0900 	mov.w	r9, #0
 800304e:	e009      	b.n	8003064 <d_print_comp_inner+0x6ac>
 8003050:	460b      	mov	r3, r1
 8003052:	3101      	adds	r1, #1
 8003054:	45b2      	cmp	sl, r6
 8003056:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800305a:	54e7      	strb	r7, [r4, r3]
 800305c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003060:	f000 87ca 	beq.w	8003ff8 <d_print_comp_inner+0x1640>
 8003064:	29ff      	cmp	r1, #255	; 0xff
 8003066:	f816 7b01 	ldrb.w	r7, [r6], #1
 800306a:	d1f1      	bne.n	8003050 <d_print_comp_inner+0x698>
 800306c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003070:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003074:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003078:	4620      	mov	r0, r4
 800307a:	4798      	blx	r3
 800307c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003080:	3301      	adds	r3, #1
 8003082:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003086:	2101      	movs	r1, #1
 8003088:	2300      	movs	r3, #0
 800308a:	e7e3      	b.n	8003054 <d_print_comp_inner+0x69c>
 800308c:	4e25      	ldr	r6, [pc, #148]	; (8003124 <d_print_comp_inner+0x76c>)
 800308e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003092:	f106 0a08 	add.w	sl, r6, #8
 8003096:	f04f 0900 	mov.w	r9, #0
 800309a:	e009      	b.n	80030b0 <d_print_comp_inner+0x6f8>
 800309c:	460b      	mov	r3, r1
 800309e:	3101      	adds	r1, #1
 80030a0:	45b2      	cmp	sl, r6
 80030a2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80030a6:	54e7      	strb	r7, [r4, r3]
 80030a8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80030ac:	f000 86c8 	beq.w	8003e40 <d_print_comp_inner+0x1488>
 80030b0:	29ff      	cmp	r1, #255	; 0xff
 80030b2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 80030b6:	d1f1      	bne.n	800309c <d_print_comp_inner+0x6e4>
 80030b8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80030bc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80030c0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80030c4:	4620      	mov	r0, r4
 80030c6:	4798      	blx	r3
 80030c8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80030cc:	3301      	adds	r3, #1
 80030ce:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80030d2:	2101      	movs	r1, #1
 80030d4:	2300      	movs	r3, #0
 80030d6:	e7e3      	b.n	80030a0 <d_print_comp_inner+0x6e8>
 80030d8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80030dc:	29ff      	cmp	r1, #255	; 0xff
 80030de:	f001 847c 	beq.w	80049da <d_print_comp_inner+0x2022>
 80030e2:	1c4a      	adds	r2, r1, #1
 80030e4:	237e      	movs	r3, #126	; 0x7e
 80030e6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80030ea:	5463      	strb	r3, [r4, r1]
 80030ec:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80030f0:	4641      	mov	r1, r8
 80030f2:	68aa      	ldr	r2, [r5, #8]
 80030f4:	4620      	mov	r0, r4
 80030f6:	f002 fa03 	bl	8005500 <d_print_comp>
 80030fa:	e52b      	b.n	8002b54 <d_print_comp_inner+0x19c>
 80030fc:	68aa      	ldr	r2, [r5, #8]
 80030fe:	f002 f9ff 	bl	8005500 <d_print_comp>
 8003102:	e527      	b.n	8002b54 <d_print_comp_inner+0x19c>
 8003104:	08017b8b 	.word	0x08017b8b
 8003108:	08017b5b 	.word	0x08017b5b
 800310c:	08017b57 	.word	0x08017b57
 8003110:	08017b2f 	.word	0x08017b2f
 8003114:	08017b43 	.word	0x08017b43
 8003118:	08017b20 	.word	0x08017b20
 800311c:	08017afb 	.word	0x08017afb
 8003120:	08017ae4 	.word	0x08017ae4
 8003124:	08017aef 	.word	0x08017aef
 8003128:	2200      	movs	r2, #0
 800312a:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 800312e:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
 8003132:	686e      	ldr	r6, [r5, #4]
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	2e00      	cmp	r6, #0
 8003138:	f000 864c 	beq.w	8003dd4 <d_print_comp_inner+0x141c>
 800313c:	f10d 0910 	add.w	r9, sp, #16
 8003140:	f8d0 c110 	ldr.w	ip, [r0, #272]	; 0x110
 8003144:	4617      	mov	r7, r2
 8003146:	4696      	mov	lr, r2
 8003148:	464b      	mov	r3, r9
 800314a:	7831      	ldrb	r1, [r6, #0]
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	f1a1 021c 	sub.w	r2, r1, #28
 8003152:	2a04      	cmp	r2, #4
 8003154:	605e      	str	r6, [r3, #4]
 8003156:	f8c3 e008 	str.w	lr, [r3, #8]
 800315a:	f8c3 c00c 	str.w	ip, [r3, #12]
 800315e:	f107 0701 	add.w	r7, r7, #1
 8003162:	4618      	mov	r0, r3
 8003164:	461a      	mov	r2, r3
 8003166:	f240 862a 	bls.w	8003dbe <d_print_comp_inner+0x1406>
 800316a:	294c      	cmp	r1, #76	; 0x4c
 800316c:	f000 8627 	beq.w	8003dbe <d_print_comp_inner+0x1406>
 8003170:	2904      	cmp	r1, #4
 8003172:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003176:	f001 87bb 	beq.w	80050f0 <d_print_comp_inner+0x2738>
 800317a:	2902      	cmp	r1, #2
 800317c:	d11a      	bne.n	80031b4 <d_print_comp_inner+0x7fc>
 800317e:	f8d6 b008 	ldr.w	fp, [r6, #8]
 8003182:	f89b 3000 	ldrb.w	r3, [fp]
 8003186:	2b46      	cmp	r3, #70	; 0x46
 8003188:	f002 8035 	beq.w	80051f6 <d_print_comp_inner+0x283e>
 800318c:	462b      	mov	r3, r5
 800318e:	eb09 1e07 	add.w	lr, r9, r7, lsl #4
 8003192:	9601      	str	r6, [sp, #4]
 8003194:	465d      	mov	r5, fp
 8003196:	4676      	mov	r6, lr
 8003198:	46a2      	mov	sl, r4
 800319a:	469b      	mov	fp, r3
 800319c:	782b      	ldrb	r3, [r5, #0]
 800319e:	f1a3 021c 	sub.w	r2, r3, #28
 80031a2:	2a04      	cmp	r2, #4
 80031a4:	f241 805d 	bls.w	8004262 <d_print_comp_inner+0x18aa>
 80031a8:	2b4c      	cmp	r3, #76	; 0x4c
 80031aa:	f001 805a 	beq.w	8004262 <d_print_comp_inner+0x18aa>
 80031ae:	9e01      	ldr	r6, [sp, #4]
 80031b0:	4654      	mov	r4, sl
 80031b2:	465d      	mov	r5, fp
 80031b4:	68aa      	ldr	r2, [r5, #8]
 80031b6:	4641      	mov	r1, r8
 80031b8:	4620      	mov	r0, r4
 80031ba:	f002 f9a1 	bl	8005500 <d_print_comp>
 80031be:	7833      	ldrb	r3, [r6, #0]
 80031c0:	2b04      	cmp	r3, #4
 80031c2:	f002 8020 	beq.w	8005206 <d_print_comp_inner+0x284e>
 80031c6:	eb09 1907 	add.w	r9, r9, r7, lsl #4
 80031ca:	2620      	movs	r6, #32
 80031cc:	f859 5c08 	ldr.w	r5, [r9, #-8]
 80031d0:	3f01      	subs	r7, #1
 80031d2:	b985      	cbnz	r5, 80031f6 <d_print_comp_inner+0x83e>
 80031d4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80031d8:	29ff      	cmp	r1, #255	; 0xff
 80031da:	f002 8043 	beq.w	8005264 <d_print_comp_inner+0x28ac>
 80031de:	1c4b      	adds	r3, r1, #1
 80031e0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80031e4:	f859 2c0c 	ldr.w	r2, [r9, #-12]
 80031e8:	5466      	strb	r6, [r4, r1]
 80031ea:	4620      	mov	r0, r4
 80031ec:	4641      	mov	r1, r8
 80031ee:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80031f2:	f002 f995 	bl	8005520 <d_print_mod>
 80031f6:	f1a9 0910 	sub.w	r9, r9, #16
 80031fa:	2f00      	cmp	r7, #0
 80031fc:	d1e6      	bne.n	80031cc <d_print_comp_inner+0x814>
 80031fe:	9b00      	ldr	r3, [sp, #0]
 8003200:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003204:	e4a6      	b.n	8002b54 <d_print_comp_inner+0x19c>
 8003206:	4ed1      	ldr	r6, [pc, #836]	; (800354c <d_print_comp_inner+0xb94>)
 8003208:	686a      	ldr	r2, [r5, #4]
 800320a:	f002 f979 	bl	8005500 <d_print_comp>
 800320e:	f106 0a05 	add.w	sl, r6, #5
 8003212:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003216:	f04f 0900 	mov.w	r9, #0
 800321a:	e009      	b.n	8003230 <d_print_comp_inner+0x878>
 800321c:	460b      	mov	r3, r1
 800321e:	3101      	adds	r1, #1
 8003220:	45b2      	cmp	sl, r6
 8003222:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003226:	54e7      	strb	r7, [r4, r3]
 8003228:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 800322c:	f000 86d1 	beq.w	8003fd2 <d_print_comp_inner+0x161a>
 8003230:	29ff      	cmp	r1, #255	; 0xff
 8003232:	f816 7b01 	ldrb.w	r7, [r6], #1
 8003236:	d1f1      	bne.n	800321c <d_print_comp_inner+0x864>
 8003238:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800323c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003240:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003244:	4620      	mov	r0, r4
 8003246:	4798      	blx	r3
 8003248:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800324c:	3301      	adds	r3, #1
 800324e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003252:	2101      	movs	r1, #1
 8003254:	2300      	movs	r3, #0
 8003256:	e7e3      	b.n	8003220 <d_print_comp_inner+0x868>
 8003258:	686a      	ldr	r2, [r5, #4]
 800325a:	f002 f951 	bl	8005500 <d_print_comp>
 800325e:	f018 0904 	ands.w	r9, r8, #4
 8003262:	f001 82aa 	beq.w	80047ba <d_print_comp_inner+0x1e02>
 8003266:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800326a:	29ff      	cmp	r1, #255	; 0xff
 800326c:	f001 859a 	beq.w	8004da4 <d_print_comp_inner+0x23ec>
 8003270:	1c4a      	adds	r2, r1, #1
 8003272:	232e      	movs	r3, #46	; 0x2e
 8003274:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003278:	5463      	strb	r3, [r4, r1]
 800327a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800327e:	68ad      	ldr	r5, [r5, #8]
 8003280:	782b      	ldrb	r3, [r5, #0]
 8003282:	2b46      	cmp	r3, #70	; 0x46
 8003284:	f001 83cc 	beq.w	8004a20 <d_print_comp_inner+0x2068>
 8003288:	462a      	mov	r2, r5
 800328a:	4641      	mov	r1, r8
 800328c:	4620      	mov	r0, r4
 800328e:	f002 f937 	bl	8005500 <d_print_comp>
 8003292:	e45f      	b.n	8002b54 <d_print_comp_inner+0x19c>
 8003294:	f011 0804 	ands.w	r8, r1, #4
 8003298:	f041 808b 	bne.w	80043b2 <d_print_comp_inner+0x19fa>
 800329c:	68af      	ldr	r7, [r5, #8]
 800329e:	686d      	ldr	r5, [r5, #4]
 80032a0:	2f00      	cmp	r7, #0
 80032a2:	f43f ac57 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 80032a6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80032aa:	442f      	add	r7, r5
 80032ac:	e009      	b.n	80032c2 <d_print_comp_inner+0x90a>
 80032ae:	460b      	mov	r3, r1
 80032b0:	3101      	adds	r1, #1
 80032b2:	42bd      	cmp	r5, r7
 80032b4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80032b8:	54e6      	strb	r6, [r4, r3]
 80032ba:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80032be:	f43f ac49 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 80032c2:	29ff      	cmp	r1, #255	; 0xff
 80032c4:	f815 6b01 	ldrb.w	r6, [r5], #1
 80032c8:	d1f1      	bne.n	80032ae <d_print_comp_inner+0x8f6>
 80032ca:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80032ce:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80032d2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80032d6:	4620      	mov	r0, r4
 80032d8:	4798      	blx	r3
 80032da:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80032de:	3301      	adds	r3, #1
 80032e0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80032e4:	2101      	movs	r1, #1
 80032e6:	2300      	movs	r3, #0
 80032e8:	e7e3      	b.n	80032b2 <d_print_comp_inner+0x8fa>
 80032ea:	2301      	movs	r3, #1
 80032ec:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 80032f0:	e430      	b.n	8002b54 <d_print_comp_inner+0x19c>
 80032f2:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f041 8106 	bne.w	8004508 <d_print_comp_inner+0x1b50>
 80032fc:	1d29      	adds	r1, r5, #4
 80032fe:	f7fd fa97 	bl	8000830 <d_lookup_template_argument.isra.6>
 8003302:	2800      	cmp	r0, #0
 8003304:	f43f ac3a 	beq.w	8002b7c <d_print_comp_inner+0x1c4>
 8003308:	7803      	ldrb	r3, [r0, #0]
 800330a:	2b2f      	cmp	r3, #47	; 0x2f
 800330c:	f001 83fc 	beq.w	8004b08 <d_print_comp_inner+0x2150>
 8003310:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
 8003314:	682b      	ldr	r3, [r5, #0]
 8003316:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 800331a:	4602      	mov	r2, r0
 800331c:	4641      	mov	r1, r8
 800331e:	4620      	mov	r0, r4
 8003320:	f002 f8ee 	bl	8005500 <d_print_comp>
 8003324:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
 8003328:	e414      	b.n	8002b54 <d_print_comp_inner+0x19c>
 800332a:	2300      	movs	r3, #0
 800332c:	f8d0 9114 	ldr.w	r9, [r0, #276]	; 0x114
 8003330:	f8d0 7144 	ldr.w	r7, [r0, #324]	; 0x144
 8003334:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 8003338:	f8c0 5144 	str.w	r5, [r0, #324]	; 0x144
 800333c:	f011 0f04 	tst.w	r1, #4
 8003340:	686e      	ldr	r6, [r5, #4]
 8003342:	d005      	beq.n	8003350 <d_print_comp_inner+0x998>
 8003344:	7833      	ldrb	r3, [r6, #0]
 8003346:	b91b      	cbnz	r3, 8003350 <d_print_comp_inner+0x998>
 8003348:	68b2      	ldr	r2, [r6, #8]
 800334a:	2a06      	cmp	r2, #6
 800334c:	f001 853c 	beq.w	8004dc8 <d_print_comp_inner+0x2410>
 8003350:	4632      	mov	r2, r6
 8003352:	4641      	mov	r1, r8
 8003354:	4620      	mov	r0, r4
 8003356:	f002 f8d3 	bl	8005500 <d_print_comp>
 800335a:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 800335e:	2b3c      	cmp	r3, #60	; 0x3c
 8003360:	f001 8274 	beq.w	800484c <d_print_comp_inner+0x1e94>
 8003364:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003368:	2bff      	cmp	r3, #255	; 0xff
 800336a:	f001 8489 	beq.w	8004c80 <d_print_comp_inner+0x22c8>
 800336e:	1c59      	adds	r1, r3, #1
 8003370:	223c      	movs	r2, #60	; 0x3c
 8003372:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003376:	54e2      	strb	r2, [r4, r3]
 8003378:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800337c:	4641      	mov	r1, r8
 800337e:	68aa      	ldr	r2, [r5, #8]
 8003380:	4620      	mov	r0, r4
 8003382:	f002 f8bd 	bl	8005500 <d_print_comp>
 8003386:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 800338a:	2b3e      	cmp	r3, #62	; 0x3e
 800338c:	f001 8239 	beq.w	8004802 <d_print_comp_inner+0x1e4a>
 8003390:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003394:	2bff      	cmp	r3, #255	; 0xff
 8003396:	f001 8460 	beq.w	8004c5a <d_print_comp_inner+0x22a2>
 800339a:	1c59      	adds	r1, r3, #1
 800339c:	223e      	movs	r2, #62	; 0x3e
 800339e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80033a2:	54e2      	strb	r2, [r4, r3]
 80033a4:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80033a8:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 80033ac:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
 80033b0:	f7ff bbd0 	b.w	8002b54 <d_print_comp_inner+0x19c>
 80033b4:	686f      	ldr	r7, [r5, #4]
 80033b6:	2f00      	cmp	r7, #0
 80033b8:	f001 8082 	beq.w	80044c0 <d_print_comp_inner+0x1b08>
 80033bc:	4d64      	ldr	r5, [pc, #400]	; (8003550 <d_print_comp_inner+0xb98>)
 80033be:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80033c2:	f105 0906 	add.w	r9, r5, #6
 80033c6:	f04f 0800 	mov.w	r8, #0
 80033ca:	e009      	b.n	80033e0 <d_print_comp_inner+0xa28>
 80033cc:	460b      	mov	r3, r1
 80033ce:	3101      	adds	r1, #1
 80033d0:	45a9      	cmp	r9, r5
 80033d2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80033d6:	54e6      	strb	r6, [r4, r3]
 80033d8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80033dc:	f000 8782 	beq.w	80042e4 <d_print_comp_inner+0x192c>
 80033e0:	29ff      	cmp	r1, #255	; 0xff
 80033e2:	f815 6b01 	ldrb.w	r6, [r5], #1
 80033e6:	d1f1      	bne.n	80033cc <d_print_comp_inner+0xa14>
 80033e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80033ec:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80033f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80033f4:	4620      	mov	r0, r4
 80033f6:	4798      	blx	r3
 80033f8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80033fc:	3301      	adds	r3, #1
 80033fe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003402:	2101      	movs	r1, #1
 8003404:	2300      	movs	r3, #0
 8003406:	e7e3      	b.n	80033d0 <d_print_comp_inner+0xa18>
 8003408:	4e52      	ldr	r6, [pc, #328]	; (8003554 <d_print_comp_inner+0xb9c>)
 800340a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800340e:	f106 0a0a 	add.w	sl, r6, #10
 8003412:	f04f 0900 	mov.w	r9, #0
 8003416:	e009      	b.n	800342c <d_print_comp_inner+0xa74>
 8003418:	460b      	mov	r3, r1
 800341a:	3101      	adds	r1, #1
 800341c:	4556      	cmp	r6, sl
 800341e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003422:	54e7      	strb	r7, [r4, r3]
 8003424:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003428:	f000 8701 	beq.w	800422e <d_print_comp_inner+0x1876>
 800342c:	29ff      	cmp	r1, #255	; 0xff
 800342e:	f816 7b01 	ldrb.w	r7, [r6], #1
 8003432:	d1f1      	bne.n	8003418 <d_print_comp_inner+0xa60>
 8003434:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003438:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800343c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003440:	4620      	mov	r0, r4
 8003442:	4798      	blx	r3
 8003444:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003448:	3301      	adds	r3, #1
 800344a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800344e:	2101      	movs	r1, #1
 8003450:	2300      	movs	r3, #0
 8003452:	e7e3      	b.n	800341c <d_print_comp_inner+0xa64>
 8003454:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003458:	792d      	ldrb	r5, [r5, #4]
 800345a:	29ff      	cmp	r1, #255	; 0xff
 800345c:	f001 82ab 	beq.w	80049b6 <d_print_comp_inner+0x1ffe>
 8003460:	1c4b      	adds	r3, r1, #1
 8003462:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003466:	5465      	strb	r5, [r4, r1]
 8003468:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 800346c:	f7ff bb72 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003470:	686a      	ldr	r2, [r5, #4]
 8003472:	f002 f845 	bl	8005500 <d_print_comp>
 8003476:	68aa      	ldr	r2, [r5, #8]
 8003478:	4641      	mov	r1, r8
 800347a:	4620      	mov	r0, r4
 800347c:	f002 f840 	bl	8005500 <d_print_comp>
 8003480:	f7ff bb68 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003484:	4e34      	ldr	r6, [pc, #208]	; (8003558 <d_print_comp_inner+0xba0>)
 8003486:	686a      	ldr	r2, [r5, #4]
 8003488:	f002 f83a 	bl	8005500 <d_print_comp>
 800348c:	f106 0a08 	add.w	sl, r6, #8
 8003490:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003494:	f04f 0900 	mov.w	r9, #0
 8003498:	e009      	b.n	80034ae <d_print_comp_inner+0xaf6>
 800349a:	460b      	mov	r3, r1
 800349c:	3101      	adds	r1, #1
 800349e:	4556      	cmp	r6, sl
 80034a0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80034a4:	54e7      	strb	r7, [r4, r3]
 80034a6:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80034aa:	f000 8508 	beq.w	8003ebe <d_print_comp_inner+0x1506>
 80034ae:	29ff      	cmp	r1, #255	; 0xff
 80034b0:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 80034b4:	d1f1      	bne.n	800349a <d_print_comp_inner+0xae2>
 80034b6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80034ba:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80034be:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80034c2:	4620      	mov	r0, r4
 80034c4:	4798      	blx	r3
 80034c6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80034ca:	3301      	adds	r3, #1
 80034cc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80034d0:	2101      	movs	r1, #1
 80034d2:	2300      	movs	r3, #0
 80034d4:	e7e3      	b.n	800349e <d_print_comp_inner+0xae6>
 80034d6:	686a      	ldr	r2, [r5, #4]
 80034d8:	b10a      	cbz	r2, 80034de <d_print_comp_inner+0xb26>
 80034da:	f002 f811 	bl	8005500 <d_print_comp>
 80034de:	68ab      	ldr	r3, [r5, #8]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f43f ab37 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 80034e6:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
 80034ea:	2efd      	cmp	r6, #253	; 0xfd
 80034ec:	f201 81bc 	bhi.w	8004868 <d_print_comp_inner+0x1eb0>
 80034f0:	4f1a      	ldr	r7, [pc, #104]	; (800355c <d_print_comp_inner+0xba4>)
 80034f2:	f04f 0a00 	mov.w	sl, #0
 80034f6:	f107 0b02 	add.w	fp, r7, #2
 80034fa:	4631      	mov	r1, r6
 80034fc:	e009      	b.n	8003512 <d_print_comp_inner+0xb5a>
 80034fe:	460b      	mov	r3, r1
 8003500:	3101      	adds	r1, #1
 8003502:	455f      	cmp	r7, fp
 8003504:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003508:	54e6      	strb	r6, [r4, r3]
 800350a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800350e:	f000 86c1 	beq.w	8004294 <d_print_comp_inner+0x18dc>
 8003512:	29ff      	cmp	r1, #255	; 0xff
 8003514:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003518:	d1f1      	bne.n	80034fe <d_print_comp_inner+0xb46>
 800351a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800351e:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8003522:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003526:	4620      	mov	r0, r4
 8003528:	4798      	blx	r3
 800352a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800352e:	3301      	adds	r3, #1
 8003530:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003534:	2101      	movs	r1, #1
 8003536:	2300      	movs	r3, #0
 8003538:	e7e3      	b.n	8003502 <d_print_comp_inner+0xb4a>
 800353a:	4e09      	ldr	r6, [pc, #36]	; (8003560 <d_print_comp_inner+0xba8>)
 800353c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003540:	f106 0a09 	add.w	sl, r6, #9
 8003544:	f04f 0900 	mov.w	r9, #0
 8003548:	e016      	b.n	8003578 <d_print_comp_inner+0xbc0>
 800354a:	bf00      	nop
 800354c:	08017ab0 	.word	0x08017ab0
 8003550:	08017cc0 	.word	0x08017cc0
 8003554:	08017ca8 	.word	0x08017ca8
 8003558:	08017d27 	.word	0x08017d27
 800355c:	08017c44 	.word	0x08017c44
 8003560:	08017c53 	.word	0x08017c53
 8003564:	460b      	mov	r3, r1
 8003566:	3101      	adds	r1, #1
 8003568:	4556      	cmp	r6, sl
 800356a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800356e:	54e7      	strb	r7, [r4, r3]
 8003570:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003574:	f000 8594 	beq.w	80040a0 <d_print_comp_inner+0x16e8>
 8003578:	29ff      	cmp	r1, #255	; 0xff
 800357a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 800357e:	d1f1      	bne.n	8003564 <d_print_comp_inner+0xbac>
 8003580:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003584:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003588:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800358c:	4620      	mov	r0, r4
 800358e:	4798      	blx	r3
 8003590:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003594:	3301      	adds	r3, #1
 8003596:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800359a:	2101      	movs	r1, #1
 800359c:	2300      	movs	r3, #0
 800359e:	e7e3      	b.n	8003568 <d_print_comp_inner+0xbb0>
 80035a0:	4ed1      	ldr	r6, [pc, #836]	; (80038e8 <d_print_comp_inner+0xf30>)
 80035a2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80035a6:	f106 0a09 	add.w	sl, r6, #9
 80035aa:	f04f 0900 	mov.w	r9, #0
 80035ae:	e009      	b.n	80035c4 <d_print_comp_inner+0xc0c>
 80035b0:	460b      	mov	r3, r1
 80035b2:	3101      	adds	r1, #1
 80035b4:	4556      	cmp	r6, sl
 80035b6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80035ba:	54e7      	strb	r7, [r4, r3]
 80035bc:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80035c0:	f000 8597 	beq.w	80040f2 <d_print_comp_inner+0x173a>
 80035c4:	29ff      	cmp	r1, #255	; 0xff
 80035c6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 80035ca:	d1f1      	bne.n	80035b0 <d_print_comp_inner+0xbf8>
 80035cc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80035d0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80035d4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80035d8:	4620      	mov	r0, r4
 80035da:	4798      	blx	r3
 80035dc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80035e0:	3301      	adds	r3, #1
 80035e2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80035e6:	2101      	movs	r1, #1
 80035e8:	2300      	movs	r3, #0
 80035ea:	e7e3      	b.n	80035b4 <d_print_comp_inner+0xbfc>
 80035ec:	f8d5 a004 	ldr.w	sl, [r5, #4]
 80035f0:	4dbe      	ldr	r5, [pc, #760]	; (80038ec <d_print_comp_inner+0xf34>)
 80035f2:	f8da 7008 	ldr.w	r7, [sl, #8]
 80035f6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80035fa:	f105 0808 	add.w	r8, r5, #8
 80035fe:	f04f 0900 	mov.w	r9, #0
 8003602:	e009      	b.n	8003618 <d_print_comp_inner+0xc60>
 8003604:	460b      	mov	r3, r1
 8003606:	3101      	adds	r1, #1
 8003608:	45a8      	cmp	r8, r5
 800360a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800360e:	54e6      	strb	r6, [r4, r3]
 8003610:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003614:	f000 8506 	beq.w	8004024 <d_print_comp_inner+0x166c>
 8003618:	29ff      	cmp	r1, #255	; 0xff
 800361a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800361e:	d1f1      	bne.n	8003604 <d_print_comp_inner+0xc4c>
 8003620:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003624:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003628:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800362c:	4620      	mov	r0, r4
 800362e:	4798      	blx	r3
 8003630:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003634:	3301      	adds	r3, #1
 8003636:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800363a:	2101      	movs	r1, #1
 800363c:	2300      	movs	r3, #0
 800363e:	e7e3      	b.n	8003608 <d_print_comp_inner+0xc50>
 8003640:	686a      	ldr	r2, [r5, #4]
 8003642:	68ae      	ldr	r6, [r5, #8]
 8003644:	b10a      	cbz	r2, 800364a <d_print_comp_inner+0xc92>
 8003646:	f001 ff5b 	bl	8005500 <d_print_comp>
 800364a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800364e:	2bff      	cmp	r3, #255	; 0xff
 8003650:	f001 82b1 	beq.w	8004bb6 <d_print_comp_inner+0x21fe>
 8003654:	1c5a      	adds	r2, r3, #1
 8003656:	257b      	movs	r5, #123	; 0x7b
 8003658:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800365c:	4641      	mov	r1, r8
 800365e:	54e5      	strb	r5, [r4, r3]
 8003660:	4632      	mov	r2, r6
 8003662:	4620      	mov	r0, r4
 8003664:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003668:	f001 ff4a 	bl	8005500 <d_print_comp>
 800366c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003670:	29ff      	cmp	r1, #255	; 0xff
 8003672:	f001 81e7 	beq.w	8004a44 <d_print_comp_inner+0x208c>
 8003676:	1c4a      	adds	r2, r1, #1
 8003678:	237d      	movs	r3, #125	; 0x7d
 800367a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800367e:	5463      	strb	r3, [r4, r1]
 8003680:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003684:	f7ff ba66 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003688:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800368c:	68ae      	ldr	r6, [r5, #8]
 800368e:	f899 3000 	ldrb.w	r3, [r9]
 8003692:	2b31      	cmp	r3, #49	; 0x31
 8003694:	f000 87cb 	beq.w	800462e <d_print_comp_inner+0x1c76>
 8003698:	2b33      	cmp	r3, #51	; 0x33
 800369a:	f041 86d3 	bne.w	8005444 <d_print_comp_inner+0x2a8c>
 800369e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80036a2:	29ff      	cmp	r1, #255	; 0xff
 80036a4:	f001 84c3 	beq.w	800502e <d_print_comp_inner+0x2676>
 80036a8:	1c4a      	adds	r2, r1, #1
 80036aa:	2328      	movs	r3, #40	; 0x28
 80036ac:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80036b0:	5463      	strb	r3, [r4, r1]
 80036b2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80036b6:	a904      	add	r1, sp, #16
 80036b8:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80036bc:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80036c0:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
 80036c4:	4620      	mov	r0, r4
 80036c6:	4641      	mov	r1, r8
 80036c8:	9305      	str	r3, [sp, #20]
 80036ca:	9204      	str	r2, [sp, #16]
 80036cc:	f7ff f974 	bl	80029b8 <d_print_comp_inner>
 80036d0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80036d4:	9b05      	ldr	r3, [sp, #20]
 80036d6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80036da:	29ff      	cmp	r1, #255	; 0xff
 80036dc:	f001 8496 	beq.w	800500c <d_print_comp_inner+0x2654>
 80036e0:	2329      	movs	r3, #41	; 0x29
 80036e2:	1c4a      	adds	r2, r1, #1
 80036e4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80036e8:	5463      	strb	r3, [r4, r1]
 80036ea:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80036ee:	4632      	mov	r2, r6
 80036f0:	4641      	mov	r1, r8
 80036f2:	4620      	mov	r0, r4
 80036f4:	f002 fd2a 	bl	800614c <d_print_subexpr>
 80036f8:	f7ff ba2c 	b.w	8002b54 <d_print_comp_inner+0x19c>
 80036fc:	686a      	ldr	r2, [r5, #4]
 80036fe:	f002 fce7 	bl	80060d0 <d_print_expr_op>
 8003702:	f7ff ba27 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003706:	f011 0f20 	tst.w	r1, #32
 800370a:	f040 8753 	bne.w	80045b4 <d_print_comp_inner+0x1bfc>
 800370e:	686a      	ldr	r2, [r5, #4]
 8003710:	b11a      	cbz	r2, 800371a <d_print_comp_inner+0xd62>
 8003712:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 8003716:	f001 81d0 	beq.w	8004aba <d_print_comp_inner+0x2102>
 800371a:	f028 0860 	bic.w	r8, r8, #96	; 0x60
 800371e:	f105 0208 	add.w	r2, r5, #8
 8003722:	4641      	mov	r1, r8
 8003724:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8003728:	4620      	mov	r0, r4
 800372a:	f002 fbdd 	bl	8005ee8 <d_print_function_type.isra.11>
 800372e:	f7ff ba11 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003732:	f011 0804 	ands.w	r8, r1, #4
 8003736:	686b      	ldr	r3, [r5, #4]
 8003738:	f040 8612 	bne.w	8004360 <d_print_comp_inner+0x19a8>
 800373c:	e893 00a0 	ldmia.w	r3, {r5, r7}
 8003740:	2f00      	cmp	r7, #0
 8003742:	f43f aa07 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 8003746:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800374a:	442f      	add	r7, r5
 800374c:	e009      	b.n	8003762 <d_print_comp_inner+0xdaa>
 800374e:	460b      	mov	r3, r1
 8003750:	3101      	adds	r1, #1
 8003752:	42bd      	cmp	r5, r7
 8003754:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003758:	54e6      	strb	r6, [r4, r3]
 800375a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800375e:	f43f a9f9 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 8003762:	29ff      	cmp	r1, #255	; 0xff
 8003764:	f815 6b01 	ldrb.w	r6, [r5], #1
 8003768:	d1f1      	bne.n	800374e <d_print_comp_inner+0xd96>
 800376a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800376e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003772:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003776:	4620      	mov	r0, r4
 8003778:	4798      	blx	r3
 800377a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800377e:	3301      	adds	r3, #1
 8003780:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003784:	2101      	movs	r1, #1
 8003786:	2300      	movs	r3, #0
 8003788:	e7e3      	b.n	8003752 <d_print_comp_inner+0xd9a>
 800378a:	6869      	ldr	r1, [r5, #4]
 800378c:	f8d0 711c 	ldr.w	r7, [r0, #284]	; 0x11c
 8003790:	780b      	ldrb	r3, [r1, #0]
 8003792:	2f00      	cmp	r7, #0
 8003794:	f040 85e1 	bne.w	800435a <d_print_comp_inner+0x19a2>
 8003798:	2b05      	cmp	r3, #5
 800379a:	f001 81c7 	beq.w	8004b2c <d_print_comp_inner+0x2174>
 800379e:	2b23      	cmp	r3, #35	; 0x23
 80037a0:	f000 8689 	beq.w	80044b6 <d_print_comp_inner+0x1afe>
 80037a4:	782a      	ldrb	r2, [r5, #0]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	f000 8685 	beq.w	80044b6 <d_print_comp_inner+0x1afe>
 80037ac:	2b24      	cmp	r3, #36	; 0x24
 80037ae:	f47f a9eb 	bne.w	8002b88 <d_print_comp_inner+0x1d0>
 80037b2:	a814      	add	r0, sp, #80	; 0x50
 80037b4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80037b8:	684a      	ldr	r2, [r1, #4]
 80037ba:	f840 3d40 	str.w	r3, [r0, #-64]!
 80037be:	2100      	movs	r1, #0
 80037c0:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80037c4:	9505      	str	r5, [sp, #20]
 80037c6:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
 80037ca:	9106      	str	r1, [sp, #24]
 80037cc:	9307      	str	r3, [sp, #28]
 80037ce:	2a00      	cmp	r2, #0
 80037d0:	f47f a9e8 	bne.w	8002ba4 <d_print_comp_inner+0x1ec>
 80037d4:	f7ff b9e5 	b.w	8002ba2 <d_print_comp_inner+0x1ea>
 80037d8:	686a      	ldr	r2, [r5, #4]
 80037da:	f001 fe91 	bl	8005500 <d_print_comp>
 80037de:	f7ff b9b9 	b.w	8002b54 <d_print_comp_inner+0x19c>
 80037e2:	ab14      	add	r3, sp, #80	; 0x50
 80037e4:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
 80037e8:	f843 2d40 	str.w	r2, [r3, #-64]!
 80037ec:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 80037f0:	68aa      	ldr	r2, [r5, #8]
 80037f2:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 80037f6:	9307      	str	r3, [sp, #28]
 80037f8:	2600      	movs	r6, #0
 80037fa:	9505      	str	r5, [sp, #20]
 80037fc:	9606      	str	r6, [sp, #24]
 80037fe:	f001 fe7f 	bl	8005500 <d_print_comp>
 8003802:	9b06      	ldr	r3, [sp, #24]
 8003804:	b923      	cbnz	r3, 8003810 <d_print_comp_inner+0xe58>
 8003806:	462a      	mov	r2, r5
 8003808:	4641      	mov	r1, r8
 800380a:	4620      	mov	r0, r4
 800380c:	f001 fe88 	bl	8005520 <d_print_mod>
 8003810:	9b04      	ldr	r3, [sp, #16]
 8003812:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003816:	f7ff b99d 	b.w	8002b54 <d_print_comp_inner+0x19c>
 800381a:	f10d 0950 	add.w	r9, sp, #80	; 0x50
 800381e:	f8d0 b114 	ldr.w	fp, [r0, #276]	; 0x114
 8003822:	f849 bd40 	str.w	fp, [r9, #-64]!
 8003826:	2200      	movs	r2, #0
 8003828:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 800382c:	f8cd b000 	str.w	fp, [sp]
 8003830:	4659      	mov	r1, fp
 8003832:	f8c0 9114 	str.w	r9, [r0, #276]	; 0x114
 8003836:	9505      	str	r5, [sp, #20]
 8003838:	9206      	str	r2, [sp, #24]
 800383a:	9307      	str	r3, [sp, #28]
 800383c:	2900      	cmp	r1, #0
 800383e:	f001 83a0 	beq.w	8004f82 <d_print_comp_inner+0x25ca>
 8003842:	684b      	ldr	r3, [r1, #4]
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	3b19      	subs	r3, #25
 8003848:	2b02      	cmp	r3, #2
 800384a:	f201 839a 	bhi.w	8004f82 <d_print_comp_inner+0x25ca>
 800384e:	46ac      	mov	ip, r5
 8003850:	2701      	movs	r7, #1
 8003852:	460e      	mov	r6, r1
 8003854:	464d      	mov	r5, r9
 8003856:	e004      	b.n	8003862 <d_print_comp_inner+0xeaa>
 8003858:	6873      	ldr	r3, [r6, #4]
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	3b19      	subs	r3, #25
 800385e:	2b02      	cmp	r3, #2
 8003860:	d81b      	bhi.n	800389a <d_print_comp_inner+0xee2>
 8003862:	68b3      	ldr	r3, [r6, #8]
 8003864:	ea4f 1e07 	mov.w	lr, r7, lsl #4
 8003868:	aa14      	add	r2, sp, #80	; 0x50
 800386a:	eb02 0b0e 	add.w	fp, r2, lr
 800386e:	b98b      	cbnz	r3, 8003894 <d_print_comp_inner+0xedc>
 8003870:	2f03      	cmp	r7, #3
 8003872:	f201 80f9 	bhi.w	8004a68 <d_print_comp_inner+0x20b0>
 8003876:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800387a:	f1ab 0a40 	sub.w	sl, fp, #64	; 0x40
 800387e:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
 8003882:	f84b 5c40 	str.w	r5, [fp, #-64]
 8003886:	2301      	movs	r3, #1
 8003888:	eb09 050e 	add.w	r5, r9, lr
 800388c:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
 8003890:	3701      	adds	r7, #1
 8003892:	60b3      	str	r3, [r6, #8]
 8003894:	6836      	ldr	r6, [r6, #0]
 8003896:	2e00      	cmp	r6, #0
 8003898:	d1de      	bne.n	8003858 <d_print_comp_inner+0xea0>
 800389a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800389e:	4641      	mov	r1, r8
 80038a0:	4620      	mov	r0, r4
 80038a2:	4665      	mov	r5, ip
 80038a4:	f001 fe2c 	bl	8005500 <d_print_comp>
 80038a8:	9b06      	ldr	r3, [sp, #24]
 80038aa:	9a00      	ldr	r2, [sp, #0]
 80038ac:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f47f a94f 	bne.w	8002b54 <d_print_comp_inner+0x19c>
 80038b6:	2f01      	cmp	r7, #1
 80038b8:	d00c      	beq.n	80038d4 <d_print_comp_inner+0xf1c>
 80038ba:	eb09 1907 	add.w	r9, r9, r7, lsl #4
 80038be:	f859 2c0c 	ldr.w	r2, [r9, #-12]
 80038c2:	3f01      	subs	r7, #1
 80038c4:	4641      	mov	r1, r8
 80038c6:	4620      	mov	r0, r4
 80038c8:	f001 fe2a 	bl	8005520 <d_print_mod>
 80038cc:	2f01      	cmp	r7, #1
 80038ce:	f1a9 0910 	sub.w	r9, r9, #16
 80038d2:	d1f4      	bne.n	80038be <d_print_comp_inner+0xf06>
 80038d4:	1d2a      	adds	r2, r5, #4
 80038d6:	4641      	mov	r1, r8
 80038d8:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80038dc:	4620      	mov	r0, r4
 80038de:	f002 fa27 	bl	8005d30 <d_print_array_type.isra.10>
 80038e2:	f7ff b937 	b.w	8002b54 <d_print_comp_inner+0x19c>
 80038e6:	bf00      	nop
 80038e8:	08017c53 	.word	0x08017c53
 80038ec:	08017c47 	.word	0x08017c47
 80038f0:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f040 8674 	bne.w	80045e2 <d_print_comp_inner+0x1c2a>
 80038fa:	686a      	ldr	r2, [r5, #4]
 80038fc:	4bd5      	ldr	r3, [pc, #852]	; (8003c54 <d_print_comp_inner+0x129c>)
 80038fe:	6851      	ldr	r1, [r2, #4]
 8003900:	4299      	cmp	r1, r3
 8003902:	f000 866a 	beq.w	80045da <d_print_comp_inner+0x1c22>
 8003906:	4641      	mov	r1, r8
 8003908:	4620      	mov	r0, r4
 800390a:	f001 fdf9 	bl	8005500 <d_print_comp>
 800390e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003912:	2bff      	cmp	r3, #255	; 0xff
 8003914:	f001 82b2 	beq.w	8004e7c <d_print_comp_inner+0x24c4>
 8003918:	1c59      	adds	r1, r3, #1
 800391a:	2220      	movs	r2, #32
 800391c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003920:	54e2      	strb	r2, [r4, r3]
 8003922:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8003926:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 8595 	beq.w	800445a <d_print_comp_inner+0x1aa2>
 8003930:	4dc9      	ldr	r5, [pc, #804]	; (8003c58 <d_print_comp_inner+0x12a0>)
 8003932:	f04f 0800 	mov.w	r8, #0
 8003936:	1daf      	adds	r7, r5, #6
 8003938:	e009      	b.n	800394e <d_print_comp_inner+0xf96>
 800393a:	460b      	mov	r3, r1
 800393c:	3101      	adds	r1, #1
 800393e:	42bd      	cmp	r5, r7
 8003940:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003944:	54e6      	strb	r6, [r4, r3]
 8003946:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800394a:	f43f a903 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 800394e:	29ff      	cmp	r1, #255	; 0xff
 8003950:	f815 6b01 	ldrb.w	r6, [r5], #1
 8003954:	d1f1      	bne.n	800393a <d_print_comp_inner+0xf82>
 8003956:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800395a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800395e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003962:	4620      	mov	r0, r4
 8003964:	4798      	blx	r3
 8003966:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800396a:	3301      	adds	r3, #1
 800396c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003970:	2101      	movs	r1, #1
 8003972:	2300      	movs	r3, #0
 8003974:	e7e3      	b.n	800393e <d_print_comp_inner+0xf86>
 8003976:	4eb9      	ldr	r6, [pc, #740]	; (8003c5c <d_print_comp_inner+0x12a4>)
 8003978:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800397c:	f106 090e 	add.w	r9, r6, #14
 8003980:	f04f 0800 	mov.w	r8, #0
 8003984:	e009      	b.n	800399a <d_print_comp_inner+0xfe2>
 8003986:	460b      	mov	r3, r1
 8003988:	3101      	adds	r1, #1
 800398a:	45b1      	cmp	r9, r6
 800398c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003990:	54e7      	strb	r7, [r4, r3]
 8003992:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003996:	f000 83b3 	beq.w	8004100 <d_print_comp_inner+0x1748>
 800399a:	29ff      	cmp	r1, #255	; 0xff
 800399c:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 80039a0:	d1f1      	bne.n	8003986 <d_print_comp_inner+0xfce>
 80039a2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80039a6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80039aa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80039ae:	4620      	mov	r0, r4
 80039b0:	4798      	blx	r3
 80039b2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80039b6:	3301      	adds	r3, #1
 80039b8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80039bc:	2101      	movs	r1, #1
 80039be:	2300      	movs	r3, #0
 80039c0:	e7e3      	b.n	800398a <d_print_comp_inner+0xfd2>
 80039c2:	4ea7      	ldr	r6, [pc, #668]	; (8003c60 <d_print_comp_inner+0x12a8>)
 80039c4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80039c8:	f106 0a1a 	add.w	sl, r6, #26
 80039cc:	f04f 0900 	mov.w	r9, #0
 80039d0:	e009      	b.n	80039e6 <d_print_comp_inner+0x102e>
 80039d2:	460b      	mov	r3, r1
 80039d4:	3101      	adds	r1, #1
 80039d6:	4556      	cmp	r6, sl
 80039d8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80039dc:	54e7      	strb	r7, [r4, r3]
 80039de:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80039e2:	f000 82ef 	beq.w	8003fc4 <d_print_comp_inner+0x160c>
 80039e6:	29ff      	cmp	r1, #255	; 0xff
 80039e8:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 80039ec:	d1f1      	bne.n	80039d2 <d_print_comp_inner+0x101a>
 80039ee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80039f2:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80039f6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80039fa:	4620      	mov	r0, r4
 80039fc:	4798      	blx	r3
 80039fe:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003a02:	3301      	adds	r3, #1
 8003a04:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003a08:	2101      	movs	r1, #1
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	e7e3      	b.n	80039d6 <d_print_comp_inner+0x101e>
 8003a0e:	6869      	ldr	r1, [r5, #4]
 8003a10:	f7fc ff2a 	bl	8000868 <d_find_pack>
 8003a14:	f04f 0900 	mov.w	r9, #0
 8003a18:	2800      	cmp	r0, #0
 8003a1a:	f001 835d 	beq.w	80050d8 <d_print_comp_inner+0x2720>
 8003a1e:	7803      	ldrb	r3, [r0, #0]
 8003a20:	2b2f      	cmp	r3, #47	; 0x2f
 8003a22:	f040 8457 	bne.w	80042d4 <d_print_comp_inner+0x191c>
 8003a26:	6843      	ldr	r3, [r0, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 8453 	beq.w	80042d4 <d_print_comp_inner+0x191c>
 8003a2e:	6880      	ldr	r0, [r0, #8]
 8003a30:	f109 0901 	add.w	r9, r9, #1
 8003a34:	2800      	cmp	r0, #0
 8003a36:	d1f2      	bne.n	8003a1e <d_print_comp_inner+0x1066>
 8003a38:	686b      	ldr	r3, [r5, #4]
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	f109 33ff 	add.w	r3, r9, #4294967295
 8003a40:	9301      	str	r3, [sp, #4]
 8003a42:	f04f 0a00 	mov.w	sl, #0
 8003a46:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
 8003a4a:	9a00      	ldr	r2, [sp, #0]
 8003a4c:	4641      	mov	r1, r8
 8003a4e:	4620      	mov	r0, r4
 8003a50:	f001 fd56 	bl	8005500 <d_print_comp>
 8003a54:	9b01      	ldr	r3, [sp, #4]
 8003a56:	42bb      	cmp	r3, r7
 8003a58:	f340 81ab 	ble.w	8003db2 <d_print_comp_inner+0x13fa>
 8003a5c:	4d81      	ldr	r5, [pc, #516]	; (8003c64 <d_print_comp_inner+0x12ac>)
 8003a5e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003a62:	f105 0b02 	add.w	fp, r5, #2
 8003a66:	e009      	b.n	8003a7c <d_print_comp_inner+0x10c4>
 8003a68:	460b      	mov	r3, r1
 8003a6a:	3101      	adds	r1, #1
 8003a6c:	45ab      	cmp	fp, r5
 8003a6e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003a72:	54e6      	strb	r6, [r4, r3]
 8003a74:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003a78:	f000 819b 	beq.w	8003db2 <d_print_comp_inner+0x13fa>
 8003a7c:	29ff      	cmp	r1, #255	; 0xff
 8003a7e:	f815 6b01 	ldrb.w	r6, [r5], #1
 8003a82:	d1f1      	bne.n	8003a68 <d_print_comp_inner+0x10b0>
 8003a84:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003a88:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8003a8c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003a90:	4620      	mov	r0, r4
 8003a92:	4798      	blx	r3
 8003a94:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003a98:	3301      	adds	r3, #1
 8003a9a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003a9e:	2101      	movs	r1, #1
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	e7e3      	b.n	8003a6c <d_print_comp_inner+0x10b4>
 8003aa4:	4e70      	ldr	r6, [pc, #448]	; (8003c68 <d_print_comp_inner+0x12b0>)
 8003aa6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003aaa:	f106 0a16 	add.w	sl, r6, #22
 8003aae:	f04f 0900 	mov.w	r9, #0
 8003ab2:	e009      	b.n	8003ac8 <d_print_comp_inner+0x1110>
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	3101      	adds	r1, #1
 8003ab8:	45b2      	cmp	sl, r6
 8003aba:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003abe:	54e7      	strb	r7, [r4, r3]
 8003ac0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003ac4:	f000 835f 	beq.w	8004186 <d_print_comp_inner+0x17ce>
 8003ac8:	29ff      	cmp	r1, #255	; 0xff
 8003aca:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003ace:	d1f1      	bne.n	8003ab4 <d_print_comp_inner+0x10fc>
 8003ad0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003ad4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003ad8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003adc:	4620      	mov	r0, r4
 8003ade:	4798      	blx	r3
 8003ae0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003aea:	2101      	movs	r1, #1
 8003aec:	2300      	movs	r3, #0
 8003aee:	e7e3      	b.n	8003ab8 <d_print_comp_inner+0x1100>
 8003af0:	4e5e      	ldr	r6, [pc, #376]	; (8003c6c <d_print_comp_inner+0x12b4>)
 8003af2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003af6:	f106 0a0e 	add.w	sl, r6, #14
 8003afa:	f04f 0900 	mov.w	r9, #0
 8003afe:	e009      	b.n	8003b14 <d_print_comp_inner+0x115c>
 8003b00:	460b      	mov	r3, r1
 8003b02:	3101      	adds	r1, #1
 8003b04:	4556      	cmp	r6, sl
 8003b06:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003b0a:	54e7      	strb	r7, [r4, r3]
 8003b0c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003b10:	f000 83a0 	beq.w	8004254 <d_print_comp_inner+0x189c>
 8003b14:	29ff      	cmp	r1, #255	; 0xff
 8003b16:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003b1a:	d1f1      	bne.n	8003b00 <d_print_comp_inner+0x1148>
 8003b1c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003b20:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003b24:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003b28:	4620      	mov	r0, r4
 8003b2a:	4798      	blx	r3
 8003b2c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003b30:	3301      	adds	r3, #1
 8003b32:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003b36:	2101      	movs	r1, #1
 8003b38:	2300      	movs	r3, #0
 8003b3a:	e7e3      	b.n	8003b04 <d_print_comp_inner+0x114c>
 8003b3c:	686a      	ldr	r2, [r5, #4]
 8003b3e:	7811      	ldrb	r1, [r2, #0]
 8003b40:	2927      	cmp	r1, #39	; 0x27
 8003b42:	f000 8615 	beq.w	8004770 <d_print_comp_inner+0x1db8>
 8003b46:	2600      	movs	r6, #0
 8003b48:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003b4c:	29ff      	cmp	r1, #255	; 0xff
 8003b4e:	f001 80c5 	beq.w	8004cdc <d_print_comp_inner+0x2324>
 8003b52:	2328      	movs	r3, #40	; 0x28
 8003b54:	1c4a      	adds	r2, r1, #1
 8003b56:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003b5a:	5463      	strb	r3, [r4, r1]
 8003b5c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003b60:	686a      	ldr	r2, [r5, #4]
 8003b62:	4641      	mov	r1, r8
 8003b64:	4620      	mov	r0, r4
 8003b66:	f001 fccb 	bl	8005500 <d_print_comp>
 8003b6a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003b6e:	2bff      	cmp	r3, #255	; 0xff
 8003b70:	f001 8099 	beq.w	8004ca6 <d_print_comp_inner+0x22ee>
 8003b74:	1c59      	adds	r1, r3, #1
 8003b76:	2229      	movs	r2, #41	; 0x29
 8003b78:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003b7c:	54e2      	strb	r2, [r4, r3]
 8003b7e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8003b82:	782b      	ldrb	r3, [r5, #0]
 8003b84:	2b3d      	cmp	r3, #61	; 0x3d
 8003b86:	f000 86e6 	beq.w	8004956 <d_print_comp_inner+0x1f9e>
 8003b8a:	2e08      	cmp	r6, #8
 8003b8c:	f000 867f 	beq.w	800488e <d_print_comp_inner+0x1ed6>
 8003b90:	68aa      	ldr	r2, [r5, #8]
 8003b92:	4641      	mov	r1, r8
 8003b94:	4620      	mov	r0, r4
 8003b96:	f001 fcb3 	bl	8005500 <d_print_comp>
 8003b9a:	f7fe bfdb 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8003ba4:	f7fe bfd6 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003ba8:	686a      	ldr	r2, [r5, #4]
 8003baa:	4931      	ldr	r1, [pc, #196]	; (8003c70 <d_print_comp_inner+0x12b8>)
 8003bac:	a804      	add	r0, sp, #16
 8003bae:	f00e fd69 	bl	8012684 <sprintf>
 8003bb2:	a804      	add	r0, sp, #16
 8003bb4:	f002 febe 	bl	8006934 <strlen>
 8003bb8:	2800      	cmp	r0, #0
 8003bba:	f43e afcb 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 8003bbe:	ad04      	add	r5, sp, #16
 8003bc0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003bc4:	182f      	adds	r7, r5, r0
 8003bc6:	f04f 0800 	mov.w	r8, #0
 8003bca:	e009      	b.n	8003be0 <d_print_comp_inner+0x1228>
 8003bcc:	460b      	mov	r3, r1
 8003bce:	3101      	adds	r1, #1
 8003bd0:	42bd      	cmp	r5, r7
 8003bd2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003bd6:	54e6      	strb	r6, [r4, r3]
 8003bd8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003bdc:	f43e afba 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 8003be0:	29ff      	cmp	r1, #255	; 0xff
 8003be2:	f815 6b01 	ldrb.w	r6, [r5], #1
 8003be6:	d1f1      	bne.n	8003bcc <d_print_comp_inner+0x1214>
 8003be8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003bec:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003bf0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003bf4:	4620      	mov	r0, r4
 8003bf6:	4798      	blx	r3
 8003bf8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003c02:	2101      	movs	r1, #1
 8003c04:	2300      	movs	r3, #0
 8003c06:	e7e3      	b.n	8003bd0 <d_print_comp_inner+0x1218>
 8003c08:	4e1a      	ldr	r6, [pc, #104]	; (8003c74 <d_print_comp_inner+0x12bc>)
 8003c0a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003c0e:	f106 0a1c 	add.w	sl, r6, #28
 8003c12:	f04f 0900 	mov.w	r9, #0
 8003c16:	e009      	b.n	8003c2c <d_print_comp_inner+0x1274>
 8003c18:	460b      	mov	r3, r1
 8003c1a:	3101      	adds	r1, #1
 8003c1c:	4556      	cmp	r6, sl
 8003c1e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003c22:	54e7      	strb	r7, [r4, r3]
 8003c24:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003c28:	f000 82fa 	beq.w	8004220 <d_print_comp_inner+0x1868>
 8003c2c:	29ff      	cmp	r1, #255	; 0xff
 8003c2e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003c32:	d1f1      	bne.n	8003c18 <d_print_comp_inner+0x1260>
 8003c34:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003c38:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003c3c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003c40:	4620      	mov	r0, r4
 8003c42:	4798      	blx	r3
 8003c44:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003c48:	3301      	adds	r3, #1
 8003c4a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003c4e:	2101      	movs	r1, #1
 8003c50:	2300      	movs	r3, #0
 8003c52:	e7e3      	b.n	8003c1c <d_print_comp_inner+0x1264>
 8003c54:	08016e6c 	.word	0x08016e6c
 8003c58:	08017c34 	.word	0x08017c34
 8003c5c:	08017d17 	.word	0x08017d17
 8003c60:	08017c0f 	.word	0x08017c0f
 8003c64:	08017c44 	.word	0x08017c44
 8003c68:	08017c13 	.word	0x08017c13
 8003c6c:	08017c97 	.word	0x08017c97
 8003c70:	08017a68 	.word	0x08017a68
 8003c74:	08017ce7 	.word	0x08017ce7
 8003c78:	68ab      	ldr	r3, [r5, #8]
 8003c7a:	781a      	ldrb	r2, [r3, #0]
 8003c7c:	2a3a      	cmp	r2, #58	; 0x3a
 8003c7e:	f47e af7d 	bne.w	8002b7c <d_print_comp_inner+0x1c4>
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	2b3b      	cmp	r3, #59	; 0x3b
 8003c88:	f47e af78 	bne.w	8002b7c <d_print_comp_inner+0x1c4>
 8003c8c:	f105 0308 	add.w	r3, r5, #8
 8003c90:	686a      	ldr	r2, [r5, #4]
 8003c92:	f002 fabf 	bl	8006214 <d_maybe_print_fold_expression.isra.15>
 8003c96:	4606      	mov	r6, r0
 8003c98:	2800      	cmp	r0, #0
 8003c9a:	f47e af5b 	bne.w	8002b54 <d_print_comp_inner+0x19c>
 8003c9e:	f8d5 a004 	ldr.w	sl, [r5, #4]
 8003ca2:	68aa      	ldr	r2, [r5, #8]
 8003ca4:	f8da 1004 	ldr.w	r1, [sl, #4]
 8003ca8:	6893      	ldr	r3, [r2, #8]
 8003caa:	6808      	ldr	r0, [r1, #0]
 8003cac:	49d6      	ldr	r1, [pc, #856]	; (8004008 <d_print_comp_inner+0x1650>)
 8003cae:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8003cb2:	685f      	ldr	r7, [r3, #4]
 8003cb4:	689d      	ldr	r5, [r3, #8]
 8003cb6:	f002 fe33 	bl	8006920 <strcmp>
 8003cba:	2800      	cmp	r0, #0
 8003cbc:	f001 82e2 	beq.w	8005284 <d_print_comp_inner+0x28cc>
 8003cc0:	2204      	movs	r2, #4
 8003cc2:	49d2      	ldr	r1, [pc, #840]	; (800400c <d_print_comp_inner+0x1654>)
 8003cc4:	4620      	mov	r0, r4
 8003cc6:	f7fc fba3 	bl	8000410 <d_append_buffer>
 8003cca:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003cce:	b183      	cbz	r3, 8003cf2 <d_print_comp_inner+0x133a>
 8003cd0:	4641      	mov	r1, r8
 8003cd2:	464a      	mov	r2, r9
 8003cd4:	4620      	mov	r0, r4
 8003cd6:	f002 fa39 	bl	800614c <d_print_subexpr>
 8003cda:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003cde:	29ff      	cmp	r1, #255	; 0xff
 8003ce0:	f001 83ec 	beq.w	80054bc <d_print_comp_inner+0x2b04>
 8003ce4:	2320      	movs	r3, #32
 8003ce6:	1c4a      	adds	r2, r1, #1
 8003ce8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003cec:	5463      	strb	r3, [r4, r1]
 8003cee:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003cf2:	463a      	mov	r2, r7
 8003cf4:	4641      	mov	r1, r8
 8003cf6:	4620      	mov	r0, r4
 8003cf8:	f001 fc02 	bl	8005500 <d_print_comp>
 8003cfc:	2d00      	cmp	r5, #0
 8003cfe:	f43e af29 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 8003d02:	462a      	mov	r2, r5
 8003d04:	4641      	mov	r1, r8
 8003d06:	4620      	mov	r0, r4
 8003d08:	f002 fa20 	bl	800614c <d_print_subexpr>
 8003d0c:	f7fe bf22 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003d10:	4ebf      	ldr	r6, [pc, #764]	; (8004010 <d_print_comp_inner+0x1658>)
 8003d12:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003d16:	f106 0a08 	add.w	sl, r6, #8
 8003d1a:	f04f 0900 	mov.w	r9, #0
 8003d1e:	e009      	b.n	8003d34 <d_print_comp_inner+0x137c>
 8003d20:	460b      	mov	r3, r1
 8003d22:	3101      	adds	r1, #1
 8003d24:	4556      	cmp	r6, sl
 8003d26:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003d2a:	54e7      	strb	r7, [r4, r3]
 8003d2c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003d30:	f000 80d8 	beq.w	8003ee4 <d_print_comp_inner+0x152c>
 8003d34:	29ff      	cmp	r1, #255	; 0xff
 8003d36:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003d3a:	d1f1      	bne.n	8003d20 <d_print_comp_inner+0x1368>
 8003d3c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003d40:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003d44:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003d48:	4620      	mov	r0, r4
 8003d4a:	4798      	blx	r3
 8003d4c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003d50:	3301      	adds	r3, #1
 8003d52:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003d56:	2101      	movs	r1, #1
 8003d58:	2300      	movs	r3, #0
 8003d5a:	e7e3      	b.n	8003d24 <d_print_comp_inner+0x136c>
 8003d5c:	4ead      	ldr	r6, [pc, #692]	; (8004014 <d_print_comp_inner+0x165c>)
 8003d5e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003d62:	f106 0a1d 	add.w	sl, r6, #29
 8003d66:	f04f 0900 	mov.w	r9, #0
 8003d6a:	e009      	b.n	8003d80 <d_print_comp_inner+0x13c8>
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	3101      	adds	r1, #1
 8003d70:	45b2      	cmp	sl, r6
 8003d72:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003d76:	54e7      	strb	r7, [r4, r3]
 8003d78:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003d7c:	f000 81fc 	beq.w	8004178 <d_print_comp_inner+0x17c0>
 8003d80:	29ff      	cmp	r1, #255	; 0xff
 8003d82:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003d86:	d1f1      	bne.n	8003d6c <d_print_comp_inner+0x13b4>
 8003d88:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003d8c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003d90:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003d94:	4620      	mov	r0, r4
 8003d96:	4798      	blx	r3
 8003d98:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003da2:	2101      	movs	r1, #1
 8003da4:	2300      	movs	r3, #0
 8003da6:	e7e3      	b.n	8003d70 <d_print_comp_inner+0x13b8>
 8003da8:	2301      	movs	r3, #1
 8003daa:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8003dae:	f7fe bed1 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003db2:	3701      	adds	r7, #1
 8003db4:	454f      	cmp	r7, r9
 8003db6:	f47f ae46 	bne.w	8003a46 <d_print_comp_inner+0x108e>
 8003dba:	f7fe becb 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003dbe:	6876      	ldr	r6, [r6, #4]
 8003dc0:	2e00      	cmp	r6, #0
 8003dc2:	f001 806e 	beq.w	8004ea2 <d_print_comp_inner+0x24ea>
 8003dc6:	2f04      	cmp	r7, #4
 8003dc8:	f103 0310 	add.w	r3, r3, #16
 8003dcc:	f47f a9bd 	bne.w	800314a <d_print_comp_inner+0x792>
 8003dd0:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8003dda:	f7fe bebb 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003dde:	4e8e      	ldr	r6, [pc, #568]	; (8004018 <d_print_comp_inner+0x1660>)
 8003de0:	686a      	ldr	r2, [r5, #4]
 8003de2:	4641      	mov	r1, r8
 8003de4:	4620      	mov	r0, r4
 8003de6:	f001 fb8b 	bl	8005500 <d_print_comp>
 8003dea:	f106 0a04 	add.w	sl, r6, #4
 8003dee:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003df2:	f04f 0900 	mov.w	r9, #0
 8003df6:	e008      	b.n	8003e0a <d_print_comp_inner+0x1452>
 8003df8:	460b      	mov	r3, r1
 8003dfa:	3101      	adds	r1, #1
 8003dfc:	45b2      	cmp	sl, r6
 8003dfe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003e02:	54e7      	strb	r7, [r4, r3]
 8003e04:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003e08:	d013      	beq.n	8003e32 <d_print_comp_inner+0x147a>
 8003e0a:	29ff      	cmp	r1, #255	; 0xff
 8003e0c:	f816 7b01 	ldrb.w	r7, [r6], #1
 8003e10:	d1f2      	bne.n	8003df8 <d_print_comp_inner+0x1440>
 8003e12:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003e16:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003e1a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003e1e:	4620      	mov	r0, r4
 8003e20:	4798      	blx	r3
 8003e22:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003e26:	3301      	adds	r3, #1
 8003e28:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	2300      	movs	r3, #0
 8003e30:	e7e4      	b.n	8003dfc <d_print_comp_inner+0x1444>
 8003e32:	68aa      	ldr	r2, [r5, #8]
 8003e34:	4641      	mov	r1, r8
 8003e36:	4620      	mov	r0, r4
 8003e38:	f001 fb62 	bl	8005500 <d_print_comp>
 8003e3c:	f7fe be8a 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003e40:	686a      	ldr	r2, [r5, #4]
 8003e42:	4641      	mov	r1, r8
 8003e44:	4620      	mov	r0, r4
 8003e46:	f001 fb5b 	bl	8005500 <d_print_comp>
 8003e4a:	f7fe be83 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003e4e:	686a      	ldr	r2, [r5, #4]
 8003e50:	4641      	mov	r1, r8
 8003e52:	4620      	mov	r0, r4
 8003e54:	f001 fb54 	bl	8005500 <d_print_comp>
 8003e58:	f7fe be7c 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003e5c:	686a      	ldr	r2, [r5, #4]
 8003e5e:	4641      	mov	r1, r8
 8003e60:	4620      	mov	r0, r4
 8003e62:	f001 fb4d 	bl	8005500 <d_print_comp>
 8003e66:	f7fe be75 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003e6a:	686a      	ldr	r2, [r5, #4]
 8003e6c:	4641      	mov	r1, r8
 8003e6e:	4620      	mov	r0, r4
 8003e70:	f001 fb46 	bl	8005500 <d_print_comp>
 8003e74:	f7fe be6e 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003e78:	686a      	ldr	r2, [r5, #4]
 8003e7a:	4641      	mov	r1, r8
 8003e7c:	4620      	mov	r0, r4
 8003e7e:	f001 fb3f 	bl	8005500 <d_print_comp>
 8003e82:	f7fe be67 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003e86:	686a      	ldr	r2, [r5, #4]
 8003e88:	4641      	mov	r1, r8
 8003e8a:	4620      	mov	r0, r4
 8003e8c:	f001 fb38 	bl	8005500 <d_print_comp>
 8003e90:	f7fe be60 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003e94:	686a      	ldr	r2, [r5, #4]
 8003e96:	4641      	mov	r1, r8
 8003e98:	4620      	mov	r0, r4
 8003e9a:	f001 fb31 	bl	8005500 <d_print_comp>
 8003e9e:	f7fe be59 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003ea2:	686a      	ldr	r2, [r5, #4]
 8003ea4:	4641      	mov	r1, r8
 8003ea6:	4620      	mov	r0, r4
 8003ea8:	f001 fb2a 	bl	8005500 <d_print_comp>
 8003eac:	f7fe be52 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003eb0:	686a      	ldr	r2, [r5, #4]
 8003eb2:	4641      	mov	r1, r8
 8003eb4:	4620      	mov	r0, r4
 8003eb6:	f001 fb23 	bl	8005500 <d_print_comp>
 8003eba:	f7fe be4b 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003ebe:	4641      	mov	r1, r8
 8003ec0:	68aa      	ldr	r2, [r5, #8]
 8003ec2:	4620      	mov	r0, r4
 8003ec4:	f001 fb1c 	bl	8005500 <d_print_comp>
 8003ec8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003ecc:	29ff      	cmp	r1, #255	; 0xff
 8003ece:	f000 8560 	beq.w	8004992 <d_print_comp_inner+0x1fda>
 8003ed2:	1c4a      	adds	r2, r1, #1
 8003ed4:	235d      	movs	r3, #93	; 0x5d
 8003ed6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003eda:	5463      	strb	r3, [r4, r1]
 8003edc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003ee0:	f7fe be38 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003ee4:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8003ee8:	4e4c      	ldr	r6, [pc, #304]	; (800401c <d_print_comp_inner+0x1664>)
 8003eea:	3301      	adds	r3, #1
 8003eec:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
 8003ef0:	4641      	mov	r1, r8
 8003ef2:	686a      	ldr	r2, [r5, #4]
 8003ef4:	4620      	mov	r0, r4
 8003ef6:	f001 fb03 	bl	8005500 <d_print_comp>
 8003efa:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8003efe:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003f02:	3b01      	subs	r3, #1
 8003f04:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
 8003f08:	f106 0902 	add.w	r9, r6, #2
 8003f0c:	f04f 0800 	mov.w	r8, #0
 8003f10:	e008      	b.n	8003f24 <d_print_comp_inner+0x156c>
 8003f12:	460b      	mov	r3, r1
 8003f14:	3101      	adds	r1, #1
 8003f16:	454e      	cmp	r6, r9
 8003f18:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003f1c:	54e7      	strb	r7, [r4, r3]
 8003f1e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003f22:	d013      	beq.n	8003f4c <d_print_comp_inner+0x1594>
 8003f24:	29ff      	cmp	r1, #255	; 0xff
 8003f26:	f816 7b01 	ldrb.w	r7, [r6], #1
 8003f2a:	d1f2      	bne.n	8003f12 <d_print_comp_inner+0x155a>
 8003f2c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003f30:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003f34:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003f38:	4620      	mov	r0, r4
 8003f3a:	4798      	blx	r3
 8003f3c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003f40:	3301      	adds	r3, #1
 8003f42:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003f46:	2101      	movs	r1, #1
 8003f48:	2300      	movs	r3, #0
 8003f4a:	e7e4      	b.n	8003f16 <d_print_comp_inner+0x155e>
 8003f4c:	68aa      	ldr	r2, [r5, #8]
 8003f4e:	4934      	ldr	r1, [pc, #208]	; (8004020 <d_print_comp_inner+0x1668>)
 8003f50:	3201      	adds	r2, #1
 8003f52:	a804      	add	r0, sp, #16
 8003f54:	f00e fb96 	bl	8012684 <sprintf>
 8003f58:	a804      	add	r0, sp, #16
 8003f5a:	f002 fceb 	bl	8006934 <strlen>
 8003f5e:	b318      	cbz	r0, 8003fa8 <d_print_comp_inner+0x15f0>
 8003f60:	ad04      	add	r5, sp, #16
 8003f62:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003f66:	182f      	adds	r7, r5, r0
 8003f68:	f04f 0800 	mov.w	r8, #0
 8003f6c:	e008      	b.n	8003f80 <d_print_comp_inner+0x15c8>
 8003f6e:	460b      	mov	r3, r1
 8003f70:	3101      	adds	r1, #1
 8003f72:	42af      	cmp	r7, r5
 8003f74:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003f78:	54e6      	strb	r6, [r4, r3]
 8003f7a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003f7e:	d015      	beq.n	8003fac <d_print_comp_inner+0x15f4>
 8003f80:	29ff      	cmp	r1, #255	; 0xff
 8003f82:	f815 6b01 	ldrb.w	r6, [r5], #1
 8003f86:	d1f2      	bne.n	8003f6e <d_print_comp_inner+0x15b6>
 8003f88:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003f8c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003f90:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003f94:	4620      	mov	r0, r4
 8003f96:	4798      	blx	r3
 8003f98:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	e7e4      	b.n	8003f72 <d_print_comp_inner+0x15ba>
 8003fa8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003fac:	29ff      	cmp	r1, #255	; 0xff
 8003fae:	f000 8560 	beq.w	8004a72 <d_print_comp_inner+0x20ba>
 8003fb2:	1c4a      	adds	r2, r1, #1
 8003fb4:	237d      	movs	r3, #125	; 0x7d
 8003fb6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003fba:	5463      	strb	r3, [r4, r1]
 8003fbc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003fc0:	f7fe bdc8 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003fc4:	686a      	ldr	r2, [r5, #4]
 8003fc6:	4641      	mov	r1, r8
 8003fc8:	4620      	mov	r0, r4
 8003fca:	f001 fa99 	bl	8005500 <d_print_comp>
 8003fce:	f7fe bdc1 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003fd2:	4641      	mov	r1, r8
 8003fd4:	68aa      	ldr	r2, [r5, #8]
 8003fd6:	4620      	mov	r0, r4
 8003fd8:	f001 fa92 	bl	8005500 <d_print_comp>
 8003fdc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003fe0:	29ff      	cmp	r1, #255	; 0xff
 8003fe2:	f000 850b 	beq.w	80049fc <d_print_comp_inner+0x2044>
 8003fe6:	1c4a      	adds	r2, r1, #1
 8003fe8:	235d      	movs	r3, #93	; 0x5d
 8003fea:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003fee:	5463      	strb	r3, [r4, r1]
 8003ff0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003ff4:	f7fe bdae 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003ff8:	686a      	ldr	r2, [r5, #4]
 8003ffa:	4641      	mov	r1, r8
 8003ffc:	4620      	mov	r0, r4
 8003ffe:	f001 fa7f 	bl	8005500 <d_print_comp>
 8004002:	f7fe bda7 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004006:	bf00      	nop
 8004008:	08017a7c 	.word	0x08017a7c
 800400c:	08017c74 	.word	0x08017c74
 8004010:	08017d07 	.word	0x08017d07
 8004014:	08017cc7 	.word	0x08017cc7
 8004018:	08017b18 	.word	0x08017b18
 800401c:	08017d14 	.word	0x08017d14
 8004020:	08017a68 	.word	0x08017a68
 8004024:	f8da 5004 	ldr.w	r5, [sl, #4]
 8004028:	782b      	ldrb	r3, [r5, #0]
 800402a:	3b61      	subs	r3, #97	; 0x61
 800402c:	2b19      	cmp	r3, #25
 800402e:	d809      	bhi.n	8004044 <d_print_comp_inner+0x168c>
 8004030:	29ff      	cmp	r1, #255	; 0xff
 8004032:	f000 8793 	beq.w	8004f5c <d_print_comp_inner+0x25a4>
 8004036:	2320      	movs	r3, #32
 8004038:	1c4a      	adds	r2, r1, #1
 800403a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800403e:	5463      	strb	r3, [r4, r1]
 8004040:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004044:	19eb      	adds	r3, r5, r7
 8004046:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800404a:	2b20      	cmp	r3, #32
 800404c:	bf08      	it	eq
 800404e:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8004052:	2f00      	cmp	r7, #0
 8004054:	f43e ad7e 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 8004058:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800405c:	442f      	add	r7, r5
 800405e:	f04f 0800 	mov.w	r8, #0
 8004062:	e009      	b.n	8004078 <d_print_comp_inner+0x16c0>
 8004064:	460b      	mov	r3, r1
 8004066:	3101      	adds	r1, #1
 8004068:	42af      	cmp	r7, r5
 800406a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800406e:	54e6      	strb	r6, [r4, r3]
 8004070:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004074:	f43e ad6e 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 8004078:	29ff      	cmp	r1, #255	; 0xff
 800407a:	f815 6b01 	ldrb.w	r6, [r5], #1
 800407e:	d1f1      	bne.n	8004064 <d_print_comp_inner+0x16ac>
 8004080:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004084:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004088:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800408c:	4620      	mov	r0, r4
 800408e:	4798      	blx	r3
 8004090:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004094:	3301      	adds	r3, #1
 8004096:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800409a:	2101      	movs	r1, #1
 800409c:	2300      	movs	r3, #0
 800409e:	e7e3      	b.n	8004068 <d_print_comp_inner+0x16b0>
 80040a0:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
 80040a4:	b13a      	cbz	r2, 80040b6 <d_print_comp_inner+0x16fe>
 80040a6:	ab14      	add	r3, sp, #80	; 0x50
 80040a8:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
 80040ac:	f843 1d48 	str.w	r1, [r3, #-72]!
 80040b0:	9203      	str	r2, [sp, #12]
 80040b2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80040b6:	686b      	ldr	r3, [r5, #4]
 80040b8:	781a      	ldrb	r2, [r3, #0]
 80040ba:	2a04      	cmp	r2, #4
 80040bc:	f000 830e 	beq.w	80046dc <d_print_comp_inner+0x1d24>
 80040c0:	a804      	add	r0, sp, #16
 80040c2:	461a      	mov	r2, r3
 80040c4:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
 80040c8:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
 80040cc:	4641      	mov	r1, r8
 80040ce:	4620      	mov	r0, r4
 80040d0:	9304      	str	r3, [sp, #16]
 80040d2:	9505      	str	r5, [sp, #20]
 80040d4:	f7fe fc70 	bl	80029b8 <d_print_comp_inner>
 80040d8:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 80040dc:	9a05      	ldr	r2, [sp, #20]
 80040de:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f43e ad36 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 80040e8:	9b02      	ldr	r3, [sp, #8]
 80040ea:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80040ee:	f7fe bd31 	b.w	8002b54 <d_print_comp_inner+0x19c>
 80040f2:	68aa      	ldr	r2, [r5, #8]
 80040f4:	4641      	mov	r1, r8
 80040f6:	4620      	mov	r0, r4
 80040f8:	f001 fa02 	bl	8005500 <d_print_comp>
 80040fc:	f7fe bd2a 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004100:	686a      	ldr	r2, [r5, #4]
 8004102:	49d8      	ldr	r1, [pc, #864]	; (8004464 <d_print_comp_inner+0x1aac>)
 8004104:	3201      	adds	r2, #1
 8004106:	a804      	add	r0, sp, #16
 8004108:	f00e fabc 	bl	8012684 <sprintf>
 800410c:	a804      	add	r0, sp, #16
 800410e:	f002 fc11 	bl	8006934 <strlen>
 8004112:	b318      	cbz	r0, 800415c <d_print_comp_inner+0x17a4>
 8004114:	ad04      	add	r5, sp, #16
 8004116:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800411a:	182f      	adds	r7, r5, r0
 800411c:	f04f 0800 	mov.w	r8, #0
 8004120:	e008      	b.n	8004134 <d_print_comp_inner+0x177c>
 8004122:	460b      	mov	r3, r1
 8004124:	3101      	adds	r1, #1
 8004126:	42bd      	cmp	r5, r7
 8004128:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800412c:	54e6      	strb	r6, [r4, r3]
 800412e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004132:	d015      	beq.n	8004160 <d_print_comp_inner+0x17a8>
 8004134:	29ff      	cmp	r1, #255	; 0xff
 8004136:	f815 6b01 	ldrb.w	r6, [r5], #1
 800413a:	d1f2      	bne.n	8004122 <d_print_comp_inner+0x176a>
 800413c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004140:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004144:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004148:	4620      	mov	r0, r4
 800414a:	4798      	blx	r3
 800414c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004150:	3301      	adds	r3, #1
 8004152:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004156:	2101      	movs	r1, #1
 8004158:	2300      	movs	r3, #0
 800415a:	e7e4      	b.n	8004126 <d_print_comp_inner+0x176e>
 800415c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004160:	29ff      	cmp	r1, #255	; 0xff
 8004162:	f000 8404 	beq.w	800496e <d_print_comp_inner+0x1fb6>
 8004166:	1c4a      	adds	r2, r1, #1
 8004168:	237d      	movs	r3, #125	; 0x7d
 800416a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800416e:	5463      	strb	r3, [r4, r1]
 8004170:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004174:	f7fe bcee 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004178:	686a      	ldr	r2, [r5, #4]
 800417a:	4641      	mov	r1, r8
 800417c:	4620      	mov	r0, r4
 800417e:	f001 f9bf 	bl	8005500 <d_print_comp>
 8004182:	f7fe bce7 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004186:	686a      	ldr	r2, [r5, #4]
 8004188:	4641      	mov	r1, r8
 800418a:	4620      	mov	r0, r4
 800418c:	f001 f9b8 	bl	8005500 <d_print_comp>
 8004190:	f7fe bce0 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004194:	686a      	ldr	r2, [r5, #4]
 8004196:	4641      	mov	r1, r8
 8004198:	4620      	mov	r0, r4
 800419a:	f001 f9b1 	bl	8005500 <d_print_comp>
 800419e:	f7fe bcd9 	b.w	8002b54 <d_print_comp_inner+0x19c>
 80041a2:	4eb1      	ldr	r6, [pc, #708]	; (8004468 <d_print_comp_inner+0x1ab0>)
 80041a4:	68aa      	ldr	r2, [r5, #8]
 80041a6:	4641      	mov	r1, r8
 80041a8:	4620      	mov	r0, r4
 80041aa:	f001 f9a9 	bl	8005500 <d_print_comp>
 80041ae:	f106 0a05 	add.w	sl, r6, #5
 80041b2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80041b6:	f04f 0900 	mov.w	r9, #0
 80041ba:	e008      	b.n	80041ce <d_print_comp_inner+0x1816>
 80041bc:	460b      	mov	r3, r1
 80041be:	3101      	adds	r1, #1
 80041c0:	4556      	cmp	r6, sl
 80041c2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80041c6:	54e7      	strb	r7, [r4, r3]
 80041c8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80041cc:	d013      	beq.n	80041f6 <d_print_comp_inner+0x183e>
 80041ce:	29ff      	cmp	r1, #255	; 0xff
 80041d0:	f816 7b01 	ldrb.w	r7, [r6], #1
 80041d4:	d1f2      	bne.n	80041bc <d_print_comp_inner+0x1804>
 80041d6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80041da:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80041de:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80041e2:	4620      	mov	r0, r4
 80041e4:	4798      	blx	r3
 80041e6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80041ea:	3301      	adds	r3, #1
 80041ec:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80041f0:	2101      	movs	r1, #1
 80041f2:	2300      	movs	r3, #0
 80041f4:	e7e4      	b.n	80041c0 <d_print_comp_inner+0x1808>
 80041f6:	686a      	ldr	r2, [r5, #4]
 80041f8:	4641      	mov	r1, r8
 80041fa:	4620      	mov	r0, r4
 80041fc:	f001 f980 	bl	8005500 <d_print_comp>
 8004200:	f7fe bca8 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004204:	686a      	ldr	r2, [r5, #4]
 8004206:	4641      	mov	r1, r8
 8004208:	4620      	mov	r0, r4
 800420a:	f001 f979 	bl	8005500 <d_print_comp>
 800420e:	f7fe bca1 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004212:	686a      	ldr	r2, [r5, #4]
 8004214:	4641      	mov	r1, r8
 8004216:	4620      	mov	r0, r4
 8004218:	f001 f972 	bl	8005500 <d_print_comp>
 800421c:	f7fe bc9a 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004220:	686a      	ldr	r2, [r5, #4]
 8004222:	4641      	mov	r1, r8
 8004224:	4620      	mov	r0, r4
 8004226:	f001 f96b 	bl	8005500 <d_print_comp>
 800422a:	f7fe bc93 	b.w	8002b54 <d_print_comp_inner+0x19c>
 800422e:	4641      	mov	r1, r8
 8004230:	686a      	ldr	r2, [r5, #4]
 8004232:	4620      	mov	r0, r4
 8004234:	f001 f964 	bl	8005500 <d_print_comp>
 8004238:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800423c:	29ff      	cmp	r1, #255	; 0xff
 800423e:	f000 842a 	beq.w	8004a96 <d_print_comp_inner+0x20de>
 8004242:	1c4a      	adds	r2, r1, #1
 8004244:	2329      	movs	r3, #41	; 0x29
 8004246:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800424a:	5463      	strb	r3, [r4, r1]
 800424c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004250:	f7fe bc80 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004254:	686a      	ldr	r2, [r5, #4]
 8004256:	4641      	mov	r1, r8
 8004258:	4620      	mov	r0, r4
 800425a:	f001 f951 	bl	8005500 <d_print_comp>
 800425e:	f7fe bc79 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004262:	2f04      	cmp	r7, #4
 8004264:	f1a6 0410 	sub.w	r4, r6, #16
 8004268:	f106 0e10 	add.w	lr, r6, #16
 800426c:	f000 8722 	beq.w	80050b4 <d_print_comp_inner+0x26fc>
 8004270:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004274:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8004278:	2300      	movs	r3, #0
 800427a:	f84e 4c10 	str.w	r4, [lr, #-16]
 800427e:	e906 1008 	stmdb	r6, {r3, ip}
 8004282:	f8ca 6114 	str.w	r6, [sl, #276]	; 0x114
 8004286:	f846 5c0c 	str.w	r5, [r6, #-12]
 800428a:	686d      	ldr	r5, [r5, #4]
 800428c:	3701      	adds	r7, #1
 800428e:	4676      	mov	r6, lr
 8004290:	f7fe bf84 	b.w	800319c <d_print_comp_inner+0x7e4>
 8004294:	68aa      	ldr	r2, [r5, #8]
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	460e      	mov	r6, r1
 800429a:	4620      	mov	r0, r4
 800429c:	4641      	mov	r1, r8
 800429e:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
 80042a2:	f001 f92d 	bl	8005500 <d_print_comp>
 80042a6:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80042aa:	9b00      	ldr	r3, [sp, #0]
 80042ac:	4295      	cmp	r5, r2
 80042ae:	f47e ac51 	bne.w	8002b54 <d_print_comp_inner+0x19c>
 80042b2:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 80042b6:	42b2      	cmp	r2, r6
 80042b8:	f47e ac4c 	bne.w	8002b54 <d_print_comp_inner+0x19c>
 80042bc:	3b01      	subs	r3, #1
 80042be:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80042c2:	f7fe bc47 	b.w	8002b54 <d_print_comp_inner+0x19c>
 80042c6:	462a      	mov	r2, r5
 80042c8:	4641      	mov	r1, r8
 80042ca:	4620      	mov	r0, r4
 80042cc:	f001 f928 	bl	8005520 <d_print_mod>
 80042d0:	f7fe bc70 	b.w	8002bb4 <d_print_comp_inner+0x1fc>
 80042d4:	686b      	ldr	r3, [r5, #4]
 80042d6:	9300      	str	r3, [sp, #0]
 80042d8:	f1b9 0f00 	cmp.w	r9, #0
 80042dc:	f47f abae 	bne.w	8003a3c <d_print_comp_inner+0x1084>
 80042e0:	f7fe bc38 	b.w	8002b54 <d_print_comp_inner+0x19c>
 80042e4:	463a      	mov	r2, r7
 80042e6:	a804      	add	r0, sp, #16
 80042e8:	495e      	ldr	r1, [pc, #376]	; (8004464 <d_print_comp_inner+0x1aac>)
 80042ea:	f00e f9cb 	bl	8012684 <sprintf>
 80042ee:	a804      	add	r0, sp, #16
 80042f0:	f002 fb20 	bl	8006934 <strlen>
 80042f4:	b318      	cbz	r0, 800433e <d_print_comp_inner+0x1986>
 80042f6:	ad04      	add	r5, sp, #16
 80042f8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80042fc:	182f      	adds	r7, r5, r0
 80042fe:	f04f 0800 	mov.w	r8, #0
 8004302:	e008      	b.n	8004316 <d_print_comp_inner+0x195e>
 8004304:	460b      	mov	r3, r1
 8004306:	3101      	adds	r1, #1
 8004308:	42af      	cmp	r7, r5
 800430a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800430e:	54e6      	strb	r6, [r4, r3]
 8004310:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004314:	d015      	beq.n	8004342 <d_print_comp_inner+0x198a>
 8004316:	29ff      	cmp	r1, #255	; 0xff
 8004318:	f815 6b01 	ldrb.w	r6, [r5], #1
 800431c:	d1f2      	bne.n	8004304 <d_print_comp_inner+0x194c>
 800431e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004322:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004326:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800432a:	4620      	mov	r0, r4
 800432c:	4798      	blx	r3
 800432e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004332:	3301      	adds	r3, #1
 8004334:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004338:	2101      	movs	r1, #1
 800433a:	2300      	movs	r3, #0
 800433c:	e7e4      	b.n	8004308 <d_print_comp_inner+0x1950>
 800433e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004342:	29ff      	cmp	r1, #255	; 0xff
 8004344:	f000 84dd 	beq.w	8004d02 <d_print_comp_inner+0x234a>
 8004348:	1c4a      	adds	r2, r1, #1
 800434a:	237d      	movs	r3, #125	; 0x7d
 800434c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004350:	5463      	strb	r3, [r4, r1]
 8004352:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004356:	f7fe bbfd 	b.w	8002b54 <d_print_comp_inner+0x19c>
 800435a:	2700      	movs	r7, #0
 800435c:	f7ff ba1f 	b.w	800379e <d_print_comp_inner+0xde6>
 8004360:	68df      	ldr	r7, [r3, #12]
 8004362:	689d      	ldr	r5, [r3, #8]
 8004364:	2f00      	cmp	r7, #0
 8004366:	f43e abf5 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 800436a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800436e:	442f      	add	r7, r5
 8004370:	f04f 0800 	mov.w	r8, #0
 8004374:	e009      	b.n	800438a <d_print_comp_inner+0x19d2>
 8004376:	460b      	mov	r3, r1
 8004378:	3101      	adds	r1, #1
 800437a:	42bd      	cmp	r5, r7
 800437c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004380:	54e6      	strb	r6, [r4, r3]
 8004382:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004386:	f43e abe5 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 800438a:	29ff      	cmp	r1, #255	; 0xff
 800438c:	f815 6b01 	ldrb.w	r6, [r5], #1
 8004390:	d1f1      	bne.n	8004376 <d_print_comp_inner+0x19be>
 8004392:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004396:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800439a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800439e:	4620      	mov	r0, r4
 80043a0:	4798      	blx	r3
 80043a2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80043a6:	3301      	adds	r3, #1
 80043a8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80043ac:	2101      	movs	r1, #1
 80043ae:	2300      	movs	r3, #0
 80043b0:	e7e3      	b.n	800437a <d_print_comp_inner+0x19c2>
 80043b2:	686e      	ldr	r6, [r5, #4]
 80043b4:	68af      	ldr	r7, [r5, #8]
 80043b6:	4437      	add	r7, r6
 80043b8:	42be      	cmp	r6, r7
 80043ba:	f4be abcb 	bcs.w	8002b54 <d_print_comp_inner+0x19c>
 80043be:	f04f 0800 	mov.w	r8, #0
 80043c2:	e00d      	b.n	80043e0 <d_print_comp_inner+0x1a28>
 80043c4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80043c8:	29ff      	cmp	r1, #255	; 0xff
 80043ca:	d036      	beq.n	800443a <d_print_comp_inner+0x1a82>
 80043cc:	1c4b      	adds	r3, r1, #1
 80043ce:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80043d2:	5465      	strb	r5, [r4, r1]
 80043d4:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80043d8:	3601      	adds	r6, #1
 80043da:	42b7      	cmp	r7, r6
 80043dc:	f67e abba 	bls.w	8002b54 <d_print_comp_inner+0x19c>
 80043e0:	1bbb      	subs	r3, r7, r6
 80043e2:	2b03      	cmp	r3, #3
 80043e4:	7835      	ldrb	r5, [r6, #0]
 80043e6:	dded      	ble.n	80043c4 <d_print_comp_inner+0x1a0c>
 80043e8:	2d5f      	cmp	r5, #95	; 0x5f
 80043ea:	d1eb      	bne.n	80043c4 <d_print_comp_inner+0x1a0c>
 80043ec:	7873      	ldrb	r3, [r6, #1]
 80043ee:	2b5f      	cmp	r3, #95	; 0x5f
 80043f0:	d1e8      	bne.n	80043c4 <d_print_comp_inner+0x1a0c>
 80043f2:	78b3      	ldrb	r3, [r6, #2]
 80043f4:	2b55      	cmp	r3, #85	; 0x55
 80043f6:	d1e5      	bne.n	80043c4 <d_print_comp_inner+0x1a0c>
 80043f8:	1cf3      	adds	r3, r6, #3
 80043fa:	429f      	cmp	r7, r3
 80043fc:	d9e2      	bls.n	80043c4 <d_print_comp_inner+0x1a0c>
 80043fe:	2000      	movs	r0, #0
 8004400:	e006      	b.n	8004410 <d_print_comp_inner+0x1a58>
 8004402:	f1a5 0237 	sub.w	r2, r5, #55	; 0x37
 8004406:	429f      	cmp	r7, r3
 8004408:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 800440c:	f000 85c7 	beq.w	8004f9e <d_print_comp_inner+0x25e6>
 8004410:	4699      	mov	r9, r3
 8004412:	f813 5b01 	ldrb.w	r5, [r3], #1
 8004416:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
 800441a:	b2d1      	uxtb	r1, r2
 800441c:	2909      	cmp	r1, #9
 800441e:	f1a5 0e41 	sub.w	lr, r5, #65	; 0x41
 8004422:	d9f0      	bls.n	8004406 <d_print_comp_inner+0x1a4e>
 8004424:	f1be 0f05 	cmp.w	lr, #5
 8004428:	f1a5 0261 	sub.w	r2, r5, #97	; 0x61
 800442c:	d9e9      	bls.n	8004402 <d_print_comp_inner+0x1a4a>
 800442e:	2a05      	cmp	r2, #5
 8004430:	f200 8743 	bhi.w	80052ba <d_print_comp_inner+0x2902>
 8004434:	f1a5 0257 	sub.w	r2, r5, #87	; 0x57
 8004438:	e7e5      	b.n	8004406 <d_print_comp_inner+0x1a4e>
 800443a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800443e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004442:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004446:	4620      	mov	r0, r4
 8004448:	4798      	blx	r3
 800444a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800444e:	3301      	adds	r3, #1
 8004450:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004454:	2100      	movs	r1, #0
 8004456:	2301      	movs	r3, #1
 8004458:	e7b9      	b.n	80043ce <d_print_comp_inner+0x1a16>
 800445a:	4d04      	ldr	r5, [pc, #16]	; (800446c <d_print_comp_inner+0x1ab4>)
 800445c:	4698      	mov	r8, r3
 800445e:	1daf      	adds	r7, r5, #6
 8004460:	e010      	b.n	8004484 <d_print_comp_inner+0x1acc>
 8004462:	bf00      	nop
 8004464:	08017a68 	.word	0x08017a68
 8004468:	08017bdc 	.word	0x08017bdc
 800446c:	08017c3c 	.word	0x08017c3c
 8004470:	460b      	mov	r3, r1
 8004472:	3101      	adds	r1, #1
 8004474:	42bd      	cmp	r5, r7
 8004476:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800447a:	54e6      	strb	r6, [r4, r3]
 800447c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004480:	f43e ab68 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 8004484:	29ff      	cmp	r1, #255	; 0xff
 8004486:	f815 6b01 	ldrb.w	r6, [r5], #1
 800448a:	d1f1      	bne.n	8004470 <d_print_comp_inner+0x1ab8>
 800448c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004490:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004494:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004498:	4620      	mov	r0, r4
 800449a:	4798      	blx	r3
 800449c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80044a0:	3301      	adds	r3, #1
 80044a2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80044a6:	2101      	movs	r1, #1
 80044a8:	2300      	movs	r3, #0
 80044aa:	e7e3      	b.n	8004474 <d_print_comp_inner+0x1abc>
 80044ac:	782b      	ldrb	r3, [r5, #0]
 80044ae:	2b2f      	cmp	r3, #47	; 0x2f
 80044b0:	f47e ab6a 	bne.w	8002b88 <d_print_comp_inner+0x1d0>
 80044b4:	4601      	mov	r1, r0
 80044b6:	460d      	mov	r5, r1
 80044b8:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 80044bc:	f7fe bb66 	b.w	8002b8c <d_print_comp_inner+0x1d4>
 80044c0:	4dd7      	ldr	r5, [pc, #860]	; (8004820 <d_print_comp_inner+0x1e68>)
 80044c2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80044c6:	f105 0804 	add.w	r8, r5, #4
 80044ca:	e009      	b.n	80044e0 <d_print_comp_inner+0x1b28>
 80044cc:	460b      	mov	r3, r1
 80044ce:	3101      	adds	r1, #1
 80044d0:	45a8      	cmp	r8, r5
 80044d2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80044d6:	54e6      	strb	r6, [r4, r3]
 80044d8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80044dc:	f43e ab3a 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 80044e0:	29ff      	cmp	r1, #255	; 0xff
 80044e2:	f815 6b01 	ldrb.w	r6, [r5], #1
 80044e6:	d1f1      	bne.n	80044cc <d_print_comp_inner+0x1b14>
 80044e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80044ec:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 80044f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80044f4:	4620      	mov	r0, r4
 80044f6:	4798      	blx	r3
 80044f8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80044fc:	3301      	adds	r3, #1
 80044fe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004502:	2101      	movs	r1, #1
 8004504:	2300      	movs	r3, #0
 8004506:	e7e3      	b.n	80044d0 <d_print_comp_inner+0x1b18>
 8004508:	4ec6      	ldr	r6, [pc, #792]	; (8004824 <d_print_comp_inner+0x1e6c>)
 800450a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800450e:	f106 0905 	add.w	r9, r6, #5
 8004512:	f04f 0800 	mov.w	r8, #0
 8004516:	e008      	b.n	800452a <d_print_comp_inner+0x1b72>
 8004518:	460b      	mov	r3, r1
 800451a:	3101      	adds	r1, #1
 800451c:	45b1      	cmp	r9, r6
 800451e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004522:	54e7      	strb	r7, [r4, r3]
 8004524:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004528:	d013      	beq.n	8004552 <d_print_comp_inner+0x1b9a>
 800452a:	29ff      	cmp	r1, #255	; 0xff
 800452c:	f816 7b01 	ldrb.w	r7, [r6], #1
 8004530:	d1f2      	bne.n	8004518 <d_print_comp_inner+0x1b60>
 8004532:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004536:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800453a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800453e:	4620      	mov	r0, r4
 8004540:	4798      	blx	r3
 8004542:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004546:	3301      	adds	r3, #1
 8004548:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800454c:	2101      	movs	r1, #1
 800454e:	2300      	movs	r3, #0
 8004550:	e7e4      	b.n	800451c <d_print_comp_inner+0x1b64>
 8004552:	686a      	ldr	r2, [r5, #4]
 8004554:	49b4      	ldr	r1, [pc, #720]	; (8004828 <d_print_comp_inner+0x1e70>)
 8004556:	3201      	adds	r2, #1
 8004558:	a804      	add	r0, sp, #16
 800455a:	f00e f893 	bl	8012684 <sprintf>
 800455e:	a804      	add	r0, sp, #16
 8004560:	f002 f9e8 	bl	8006934 <strlen>
 8004564:	2800      	cmp	r0, #0
 8004566:	f43e aaf5 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 800456a:	ad04      	add	r5, sp, #16
 800456c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004570:	182f      	adds	r7, r5, r0
 8004572:	f04f 0800 	mov.w	r8, #0
 8004576:	e009      	b.n	800458c <d_print_comp_inner+0x1bd4>
 8004578:	460b      	mov	r3, r1
 800457a:	3101      	adds	r1, #1
 800457c:	42af      	cmp	r7, r5
 800457e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004582:	54e6      	strb	r6, [r4, r3]
 8004584:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004588:	f43e aae4 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 800458c:	29ff      	cmp	r1, #255	; 0xff
 800458e:	f815 6b01 	ldrb.w	r6, [r5], #1
 8004592:	d1f1      	bne.n	8004578 <d_print_comp_inner+0x1bc0>
 8004594:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004598:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800459c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80045a0:	4620      	mov	r0, r4
 80045a2:	4798      	blx	r3
 80045a4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80045a8:	3301      	adds	r3, #1
 80045aa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80045ae:	2101      	movs	r1, #1
 80045b0:	2300      	movs	r3, #0
 80045b2:	e7e3      	b.n	800457c <d_print_comp_inner+0x1bc4>
 80045b4:	f021 0860 	bic.w	r8, r1, #96	; 0x60
 80045b8:	f105 0208 	add.w	r2, r5, #8
 80045bc:	4641      	mov	r1, r8
 80045be:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 80045c2:	f001 fc91 	bl	8005ee8 <d_print_function_type.isra.11>
 80045c6:	686a      	ldr	r2, [r5, #4]
 80045c8:	2a00      	cmp	r2, #0
 80045ca:	f43e aac3 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 80045ce:	4641      	mov	r1, r8
 80045d0:	4620      	mov	r0, r4
 80045d2:	f000 ff95 	bl	8005500 <d_print_comp>
 80045d6:	f7fe babd 	b.w	8002b54 <d_print_comp_inner+0x19c>
 80045da:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80045de:	f7ff b9a2 	b.w	8003926 <d_print_comp_inner+0xf6e>
 80045e2:	4e92      	ldr	r6, [pc, #584]	; (800482c <d_print_comp_inner+0x1e74>)
 80045e4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80045e8:	f106 0a05 	add.w	sl, r6, #5
 80045ec:	f04f 0900 	mov.w	r9, #0
 80045f0:	e009      	b.n	8004606 <d_print_comp_inner+0x1c4e>
 80045f2:	460b      	mov	r3, r1
 80045f4:	3101      	adds	r1, #1
 80045f6:	45b2      	cmp	sl, r6
 80045f8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80045fc:	54e7      	strb	r7, [r4, r3]
 80045fe:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004602:	f43f a97a 	beq.w	80038fa <d_print_comp_inner+0xf42>
 8004606:	29ff      	cmp	r1, #255	; 0xff
 8004608:	f816 7b01 	ldrb.w	r7, [r6], #1
 800460c:	d1f1      	bne.n	80045f2 <d_print_comp_inner+0x1c3a>
 800460e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004612:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8004616:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800461a:	4620      	mov	r0, r4
 800461c:	4798      	blx	r3
 800461e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004622:	3301      	adds	r3, #1
 8004624:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004628:	2101      	movs	r1, #1
 800462a:	2300      	movs	r3, #0
 800462c:	e7e3      	b.n	80045f6 <d_print_comp_inner+0x1c3e>
 800462e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004632:	497f      	ldr	r1, [pc, #508]	; (8004830 <d_print_comp_inner+0x1e78>)
 8004634:	681f      	ldr	r7, [r3, #0]
 8004636:	4638      	mov	r0, r7
 8004638:	f002 f972 	bl	8006920 <strcmp>
 800463c:	f896 a000 	ldrb.w	sl, [r6]
 8004640:	b918      	cbnz	r0, 800464a <d_print_comp_inner+0x1c92>
 8004642:	f1ba 0f03 	cmp.w	sl, #3
 8004646:	f000 851b 	beq.w	8005080 <d_print_comp_inner+0x26c8>
 800464a:	f1ba 0f38 	cmp.w	sl, #56	; 0x38
 800464e:	f000 85fd 	beq.w	800524c <d_print_comp_inner+0x2894>
 8004652:	4978      	ldr	r1, [pc, #480]	; (8004834 <d_print_comp_inner+0x1e7c>)
 8004654:	4638      	mov	r0, r7
 8004656:	f002 f963 	bl	8006920 <strcmp>
 800465a:	4605      	mov	r5, r0
 800465c:	2800      	cmp	r0, #0
 800465e:	f000 8135 	beq.w	80048cc <d_print_comp_inner+0x1f14>
 8004662:	4975      	ldr	r1, [pc, #468]	; (8004838 <d_print_comp_inner+0x1e80>)
 8004664:	4638      	mov	r0, r7
 8004666:	f002 f95b 	bl	8006920 <strcmp>
 800466a:	2800      	cmp	r0, #0
 800466c:	f000 82b6 	beq.w	8004bdc <d_print_comp_inner+0x2224>
 8004670:	464a      	mov	r2, r9
 8004672:	4641      	mov	r1, r8
 8004674:	4620      	mov	r0, r4
 8004676:	f001 fd2b 	bl	80060d0 <d_print_expr_op>
 800467a:	2f00      	cmp	r7, #0
 800467c:	f43f a837 	beq.w	80036ee <d_print_comp_inner+0xd36>
 8004680:	496e      	ldr	r1, [pc, #440]	; (800483c <d_print_comp_inner+0x1e84>)
 8004682:	4638      	mov	r0, r7
 8004684:	f002 f94c 	bl	8006920 <strcmp>
 8004688:	2800      	cmp	r0, #0
 800468a:	f000 8384 	beq.w	8004d96 <d_print_comp_inner+0x23de>
 800468e:	4638      	mov	r0, r7
 8004690:	496b      	ldr	r1, [pc, #428]	; (8004840 <d_print_comp_inner+0x1e88>)
 8004692:	f002 f945 	bl	8006920 <strcmp>
 8004696:	4605      	mov	r5, r0
 8004698:	2800      	cmp	r0, #0
 800469a:	f47f a828 	bne.w	80036ee <d_print_comp_inner+0xd36>
 800469e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80046a2:	2bff      	cmp	r3, #255	; 0xff
 80046a4:	f000 84db 	beq.w	800505e <d_print_comp_inner+0x26a6>
 80046a8:	1c58      	adds	r0, r3, #1
 80046aa:	2528      	movs	r5, #40	; 0x28
 80046ac:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 80046b0:	4641      	mov	r1, r8
 80046b2:	54e5      	strb	r5, [r4, r3]
 80046b4:	4632      	mov	r2, r6
 80046b6:	4620      	mov	r0, r4
 80046b8:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80046bc:	f000 ff20 	bl	8005500 <d_print_comp>
 80046c0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80046c4:	29ff      	cmp	r1, #255	; 0xff
 80046c6:	f000 846d 	beq.w	8004fa4 <d_print_comp_inner+0x25ec>
 80046ca:	2329      	movs	r3, #41	; 0x29
 80046cc:	1c4a      	adds	r2, r1, #1
 80046ce:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80046d2:	5463      	strb	r3, [r4, r1]
 80046d4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80046d8:	f7fe ba3c 	b.w	8002b54 <d_print_comp_inner+0x19c>
 80046dc:	f10d 0910 	add.w	r9, sp, #16
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80046e6:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
 80046ea:	4641      	mov	r1, r8
 80046ec:	4620      	mov	r0, r4
 80046ee:	9204      	str	r2, [sp, #16]
 80046f0:	9305      	str	r3, [sp, #20]
 80046f2:	f7fe f961 	bl	80029b8 <d_print_comp_inner>
 80046f6:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 80046fa:	9a05      	ldr	r2, [sp, #20]
 80046fc:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 8004700:	b113      	cbz	r3, 8004708 <d_print_comp_inner+0x1d50>
 8004702:	9b02      	ldr	r3, [sp, #8]
 8004704:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8004708:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 800470c:	2b3c      	cmp	r3, #60	; 0x3c
 800470e:	f000 83d9 	beq.w	8004ec4 <d_print_comp_inner+0x250c>
 8004712:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004716:	29ff      	cmp	r1, #255	; 0xff
 8004718:	f000 8467 	beq.w	8004fea <d_print_comp_inner+0x2632>
 800471c:	1c4a      	adds	r2, r1, #1
 800471e:	233c      	movs	r3, #60	; 0x3c
 8004720:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004724:	5463      	strb	r3, [r4, r1]
 8004726:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800472a:	686b      	ldr	r3, [r5, #4]
 800472c:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
 8004736:	461a      	mov	r2, r3
 8004738:	4641      	mov	r1, r8
 800473a:	4620      	mov	r0, r4
 800473c:	9304      	str	r3, [sp, #16]
 800473e:	9505      	str	r5, [sp, #20]
 8004740:	f7fe f93a 	bl	80029b8 <d_print_comp_inner>
 8004744:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8004748:	9a05      	ldr	r2, [sp, #20]
 800474a:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 800474e:	2b3e      	cmp	r3, #62	; 0x3e
 8004750:	f000 83ab 	beq.w	8004eaa <d_print_comp_inner+0x24f2>
 8004754:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004758:	29ff      	cmp	r1, #255	; 0xff
 800475a:	f000 849a 	beq.w	8005092 <d_print_comp_inner+0x26da>
 800475e:	233e      	movs	r3, #62	; 0x3e
 8004760:	1c4a      	adds	r2, r1, #1
 8004762:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004766:	5463      	strb	r3, [r4, r1]
 8004768:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800476c:	f7fe b9f2 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004770:	6852      	ldr	r2, [r2, #4]
 8004772:	7c16      	ldrb	r6, [r2, #16]
 8004774:	2e00      	cmp	r6, #0
 8004776:	f43f a9e7 	beq.w	8003b48 <d_print_comp_inner+0x1190>
 800477a:	2e06      	cmp	r6, #6
 800477c:	f240 8337 	bls.w	8004dee <d_print_comp_inner+0x2436>
 8004780:	2e07      	cmp	r6, #7
 8004782:	f47f a9e1 	bne.w	8003b48 <d_print_comp_inner+0x1190>
 8004786:	68aa      	ldr	r2, [r5, #8]
 8004788:	7811      	ldrb	r1, [r2, #0]
 800478a:	2900      	cmp	r1, #0
 800478c:	f47f a9dc 	bne.w	8003b48 <d_print_comp_inner+0x1190>
 8004790:	6891      	ldr	r1, [r2, #8]
 8004792:	2901      	cmp	r1, #1
 8004794:	f47f a9d8 	bne.w	8003b48 <d_print_comp_inner+0x1190>
 8004798:	2b3c      	cmp	r3, #60	; 0x3c
 800479a:	f47f a9d5 	bne.w	8003b48 <d_print_comp_inner+0x1190>
 800479e:	6853      	ldr	r3, [r2, #4]
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	2b30      	cmp	r3, #48	; 0x30
 80047a4:	f000 8626 	beq.w	80053f4 <d_print_comp_inner+0x2a3c>
 80047a8:	2b31      	cmp	r3, #49	; 0x31
 80047aa:	f47f a9cd 	bne.w	8003b48 <d_print_comp_inner+0x1190>
 80047ae:	2204      	movs	r2, #4
 80047b0:	4924      	ldr	r1, [pc, #144]	; (8004844 <d_print_comp_inner+0x1e8c>)
 80047b2:	f7fb fe2d 	bl	8000410 <d_append_buffer>
 80047b6:	f7fe b9cd 	b.w	8002b54 <d_print_comp_inner+0x19c>
 80047ba:	4e23      	ldr	r6, [pc, #140]	; (8004848 <d_print_comp_inner+0x1e90>)
 80047bc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80047c0:	f106 0a02 	add.w	sl, r6, #2
 80047c4:	e009      	b.n	80047da <d_print_comp_inner+0x1e22>
 80047c6:	460b      	mov	r3, r1
 80047c8:	3101      	adds	r1, #1
 80047ca:	45b2      	cmp	sl, r6
 80047cc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80047d0:	54e7      	strb	r7, [r4, r3]
 80047d2:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80047d6:	f43e ad52 	beq.w	800327e <d_print_comp_inner+0x8c6>
 80047da:	29ff      	cmp	r1, #255	; 0xff
 80047dc:	f816 7b01 	ldrb.w	r7, [r6], #1
 80047e0:	d1f1      	bne.n	80047c6 <d_print_comp_inner+0x1e0e>
 80047e2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80047e6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80047ea:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80047ee:	4620      	mov	r0, r4
 80047f0:	4798      	blx	r3
 80047f2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80047f6:	3301      	adds	r3, #1
 80047f8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80047fc:	2101      	movs	r1, #1
 80047fe:	2300      	movs	r3, #0
 8004800:	e7e3      	b.n	80047ca <d_print_comp_inner+0x1e12>
 8004802:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004806:	29ff      	cmp	r1, #255	; 0xff
 8004808:	f000 84e4 	beq.w	80051d4 <d_print_comp_inner+0x281c>
 800480c:	2220      	movs	r2, #32
 800480e:	1c4b      	adds	r3, r1, #1
 8004810:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004814:	5462      	strb	r2, [r4, r1]
 8004816:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800481a:	f7fe bdbb 	b.w	8003394 <d_print_comp_inner+0x9dc>
 800481e:	bf00      	nop
 8004820:	08017cb8 	.word	0x08017cb8
 8004824:	08017adc 	.word	0x08017adc
 8004828:	08017a68 	.word	0x08017a68
 800482c:	08017c2c 	.word	0x08017c2c
 8004830:	08017c60 	.word	0x08017c60
 8004834:	08017d34 	.word	0x08017d34
 8004838:	08017a6c 	.word	0x08017a6c
 800483c:	08017c64 	.word	0x08017c64
 8004840:	08017f74 	.word	0x08017f74
 8004844:	08017c90 	.word	0x08017c90
 8004848:	08017ab8 	.word	0x08017ab8
 800484c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004850:	29ff      	cmp	r1, #255	; 0xff
 8004852:	f000 8465 	beq.w	8005120 <d_print_comp_inner+0x2768>
 8004856:	2220      	movs	r2, #32
 8004858:	1c4b      	adds	r3, r1, #1
 800485a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800485e:	5462      	strb	r2, [r4, r1]
 8004860:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8004864:	f7fe bd80 	b.w	8003368 <d_print_comp_inner+0x9b0>
 8004868:	2700      	movs	r7, #0
 800486a:	55a7      	strb	r7, [r4, r6]
 800486c:	4631      	mov	r1, r6
 800486e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004872:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004876:	4620      	mov	r0, r4
 8004878:	4798      	blx	r3
 800487a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800487e:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 8004882:	3301      	adds	r3, #1
 8004884:	463e      	mov	r6, r7
 8004886:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800488a:	f7fe be31 	b.w	80034f0 <d_print_comp_inner+0xb38>
 800488e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004892:	29ff      	cmp	r1, #255	; 0xff
 8004894:	f000 8465 	beq.w	8005162 <d_print_comp_inner+0x27aa>
 8004898:	1c4a      	adds	r2, r1, #1
 800489a:	235b      	movs	r3, #91	; 0x5b
 800489c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80048a0:	5463      	strb	r3, [r4, r1]
 80048a2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80048a6:	4641      	mov	r1, r8
 80048a8:	68aa      	ldr	r2, [r5, #8]
 80048aa:	4620      	mov	r0, r4
 80048ac:	f000 fe28 	bl	8005500 <d_print_comp>
 80048b0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80048b4:	29ff      	cmp	r1, #255	; 0xff
 80048b6:	f000 8312 	beq.w	8004ede <d_print_comp_inner+0x2526>
 80048ba:	235d      	movs	r3, #93	; 0x5d
 80048bc:	1c4a      	adds	r2, r1, #1
 80048be:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80048c2:	5463      	strb	r3, [r4, r1]
 80048c4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80048c8:	f7fe b944 	b.w	8002b54 <d_print_comp_inner+0x19c>
 80048cc:	4631      	mov	r1, r6
 80048ce:	4620      	mov	r0, r4
 80048d0:	f7fb ffca 	bl	8000868 <d_find_pack>
 80048d4:	b928      	cbnz	r0, 80048e2 <d_print_comp_inner+0x1f2a>
 80048d6:	e007      	b.n	80048e8 <d_print_comp_inner+0x1f30>
 80048d8:	6843      	ldr	r3, [r0, #4]
 80048da:	b12b      	cbz	r3, 80048e8 <d_print_comp_inner+0x1f30>
 80048dc:	6880      	ldr	r0, [r0, #8]
 80048de:	3501      	adds	r5, #1
 80048e0:	b110      	cbz	r0, 80048e8 <d_print_comp_inner+0x1f30>
 80048e2:	7803      	ldrb	r3, [r0, #0]
 80048e4:	2b2f      	cmp	r3, #47	; 0x2f
 80048e6:	d0f7      	beq.n	80048d8 <d_print_comp_inner+0x1f20>
 80048e8:	462a      	mov	r2, r5
 80048ea:	a804      	add	r0, sp, #16
 80048ec:	49d4      	ldr	r1, [pc, #848]	; (8004c40 <d_print_comp_inner+0x2288>)
 80048ee:	f00d fec9 	bl	8012684 <sprintf>
 80048f2:	a804      	add	r0, sp, #16
 80048f4:	f002 f81e 	bl	8006934 <strlen>
 80048f8:	2800      	cmp	r0, #0
 80048fa:	f43e a92b 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 80048fe:	ad04      	add	r5, sp, #16
 8004900:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004904:	182f      	adds	r7, r5, r0
 8004906:	f04f 0800 	mov.w	r8, #0
 800490a:	e009      	b.n	8004920 <d_print_comp_inner+0x1f68>
 800490c:	460b      	mov	r3, r1
 800490e:	3101      	adds	r1, #1
 8004910:	42bd      	cmp	r5, r7
 8004912:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004916:	54e6      	strb	r6, [r4, r3]
 8004918:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800491c:	f43e a91a 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 8004920:	29ff      	cmp	r1, #255	; 0xff
 8004922:	f815 6b01 	ldrb.w	r6, [r5], #1
 8004926:	d1f1      	bne.n	800490c <d_print_comp_inner+0x1f54>
 8004928:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800492c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004930:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004934:	4620      	mov	r0, r4
 8004936:	4798      	blx	r3
 8004938:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800493c:	3301      	adds	r3, #1
 800493e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004942:	2101      	movs	r1, #1
 8004944:	2300      	movs	r3, #0
 8004946:	e7e3      	b.n	8004910 <d_print_comp_inner+0x1f58>
 8004948:	686a      	ldr	r2, [r5, #4]
 800494a:	4641      	mov	r1, r8
 800494c:	4620      	mov	r0, r4
 800494e:	f000 fdd7 	bl	8005500 <d_print_comp>
 8004952:	f7fe b8ff 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004956:	29ff      	cmp	r1, #255	; 0xff
 8004958:	f000 83d2 	beq.w	8005100 <d_print_comp_inner+0x2748>
 800495c:	232d      	movs	r3, #45	; 0x2d
 800495e:	1c4a      	adds	r2, r1, #1
 8004960:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004964:	5463      	strb	r3, [r4, r1]
 8004966:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800496a:	f7ff b90e 	b.w	8003b8a <d_print_comp_inner+0x11d2>
 800496e:	2500      	movs	r5, #0
 8004970:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004974:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004978:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800497c:	4620      	mov	r0, r4
 800497e:	4798      	blx	r3
 8004980:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004984:	3301      	adds	r3, #1
 8004986:	4629      	mov	r1, r5
 8004988:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800498c:	2201      	movs	r2, #1
 800498e:	f7ff bbeb 	b.w	8004168 <d_print_comp_inner+0x17b0>
 8004992:	2500      	movs	r5, #0
 8004994:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004998:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800499c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80049a0:	4620      	mov	r0, r4
 80049a2:	4798      	blx	r3
 80049a4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80049a8:	3301      	adds	r3, #1
 80049aa:	4629      	mov	r1, r5
 80049ac:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80049b0:	2201      	movs	r2, #1
 80049b2:	f7ff ba8f 	b.w	8003ed4 <d_print_comp_inner+0x151c>
 80049b6:	2600      	movs	r6, #0
 80049b8:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80049bc:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 80049c0:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 80049c4:	4798      	blx	r3
 80049c6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80049ca:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80049ce:	3301      	adds	r3, #1
 80049d0:	4631      	mov	r1, r6
 80049d2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80049d6:	f7fe bd43 	b.w	8003460 <d_print_comp_inner+0xaa8>
 80049da:	2600      	movs	r6, #0
 80049dc:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80049e0:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 80049e4:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 80049e8:	4798      	blx	r3
 80049ea:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80049ee:	3301      	adds	r3, #1
 80049f0:	4631      	mov	r1, r6
 80049f2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80049f6:	2201      	movs	r2, #1
 80049f8:	f7fe bb74 	b.w	80030e4 <d_print_comp_inner+0x72c>
 80049fc:	2500      	movs	r5, #0
 80049fe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004a02:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004a06:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004a0a:	4620      	mov	r0, r4
 8004a0c:	4798      	blx	r3
 8004a0e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004a12:	3301      	adds	r3, #1
 8004a14:	4629      	mov	r1, r5
 8004a16:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f7ff bae4 	b.w	8003fe8 <d_print_comp_inner+0x1630>
 8004a20:	220d      	movs	r2, #13
 8004a22:	4988      	ldr	r1, [pc, #544]	; (8004c44 <d_print_comp_inner+0x228c>)
 8004a24:	4620      	mov	r0, r4
 8004a26:	f7fb fcf3 	bl	8000410 <d_append_buffer>
 8004a2a:	68a9      	ldr	r1, [r5, #8]
 8004a2c:	4620      	mov	r0, r4
 8004a2e:	3101      	adds	r1, #1
 8004a30:	f7fb ff9e 	bl	8000970 <d_append_num>
 8004a34:	2203      	movs	r2, #3
 8004a36:	4984      	ldr	r1, [pc, #528]	; (8004c48 <d_print_comp_inner+0x2290>)
 8004a38:	4620      	mov	r0, r4
 8004a3a:	f7fb fce9 	bl	8000410 <d_append_buffer>
 8004a3e:	686d      	ldr	r5, [r5, #4]
 8004a40:	f7fe bc22 	b.w	8003288 <d_print_comp_inner+0x8d0>
 8004a44:	2500      	movs	r5, #0
 8004a46:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004a4a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004a4e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004a52:	4620      	mov	r0, r4
 8004a54:	4798      	blx	r3
 8004a56:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	4629      	mov	r1, r5
 8004a5e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004a62:	2201      	movs	r2, #1
 8004a64:	f7fe be08 	b.w	8003678 <d_print_comp_inner+0xcc0>
 8004a68:	2301      	movs	r3, #1
 8004a6a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8004a6e:	f7fe b871 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004a72:	2500      	movs	r5, #0
 8004a74:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004a78:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004a7c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004a80:	4620      	mov	r0, r4
 8004a82:	4798      	blx	r3
 8004a84:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004a88:	3301      	adds	r3, #1
 8004a8a:	4629      	mov	r1, r5
 8004a8c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004a90:	2201      	movs	r2, #1
 8004a92:	f7ff ba8f 	b.w	8003fb4 <d_print_comp_inner+0x15fc>
 8004a96:	2500      	movs	r5, #0
 8004a98:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004a9c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004aa0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004aa4:	4620      	mov	r0, r4
 8004aa6:	4798      	blx	r3
 8004aa8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004aac:	3301      	adds	r3, #1
 8004aae:	4629      	mov	r1, r5
 8004ab0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f7ff bbc5 	b.w	8004244 <d_print_comp_inner+0x188c>
 8004aba:	a914      	add	r1, sp, #80	; 0x50
 8004abc:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 8004ac0:	f841 0d40 	str.w	r0, [r1, #-64]!
 8004ac4:	f028 0860 	bic.w	r8, r8, #96	; 0x60
 8004ac8:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
 8004acc:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
 8004ad0:	4620      	mov	r0, r4
 8004ad2:	4641      	mov	r1, r8
 8004ad4:	9306      	str	r3, [sp, #24]
 8004ad6:	9607      	str	r6, [sp, #28]
 8004ad8:	9505      	str	r5, [sp, #20]
 8004ada:	f000 fd11 	bl	8005500 <d_print_comp>
 8004ade:	9e06      	ldr	r6, [sp, #24]
 8004ae0:	9b04      	ldr	r3, [sp, #16]
 8004ae2:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8004ae6:	2e00      	cmp	r6, #0
 8004ae8:	f47e a834 	bne.w	8002b54 <d_print_comp_inner+0x19c>
 8004aec:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004af0:	29ff      	cmp	r1, #255	; 0xff
 8004af2:	f000 8409 	beq.w	8005308 <d_print_comp_inner+0x2950>
 8004af6:	2320      	movs	r3, #32
 8004af8:	1c4a      	adds	r2, r1, #1
 8004afa:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004afe:	5463      	strb	r3, [r4, r1]
 8004b00:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004b04:	f7fe be0b 	b.w	800371e <d_print_comp_inner+0xd66>
 8004b08:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f6fe abff 	blt.w	8003310 <d_print_comp_inner+0x958>
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f000 829d 	beq.w	8005052 <d_print_comp_inner+0x269a>
 8004b18:	6880      	ldr	r0, [r0, #8]
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	2800      	cmp	r0, #0
 8004b1e:	f43e a82d 	beq.w	8002b7c <d_print_comp_inner+0x1c4>
 8004b22:	7802      	ldrb	r2, [r0, #0]
 8004b24:	2a2f      	cmp	r2, #47	; 0x2f
 8004b26:	d0f4      	beq.n	8004b12 <d_print_comp_inner+0x215a>
 8004b28:	f7fe b828 	b.w	8002b7c <d_print_comp_inner+0x1c4>
 8004b2c:	f8d0 e130 	ldr.w	lr, [r0, #304]	; 0x130
 8004b30:	f8d0 212c 	ldr.w	r2, [r0, #300]	; 0x12c
 8004b34:	f1be 0f00 	cmp.w	lr, #0
 8004b38:	dd14      	ble.n	8004b64 <d_print_comp_inner+0x21ac>
 8004b3a:	6813      	ldr	r3, [r2, #0]
 8004b3c:	4299      	cmp	r1, r3
 8004b3e:	f000 83f5 	beq.w	800532c <d_print_comp_inner+0x2974>
 8004b42:	f102 0008 	add.w	r0, r2, #8
 8004b46:	463b      	mov	r3, r7
 8004b48:	46a4      	mov	ip, r4
 8004b4a:	e004      	b.n	8004b56 <d_print_comp_inner+0x219e>
 8004b4c:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8004b50:	42a1      	cmp	r1, r4
 8004b52:	f000 81d4 	beq.w	8004efe <d_print_comp_inner+0x2546>
 8004b56:	3301      	adds	r3, #1
 8004b58:	459e      	cmp	lr, r3
 8004b5a:	4681      	mov	r9, r0
 8004b5c:	f100 0008 	add.w	r0, r0, #8
 8004b60:	d1f4      	bne.n	8004b4c <d_print_comp_inner+0x2194>
 8004b62:	4664      	mov	r4, ip
 8004b64:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
 8004b68:	459e      	cmp	lr, r3
 8004b6a:	f280 84b9 	bge.w	80054e0 <d_print_comp_inner+0x2b28>
 8004b6e:	f10e 0301 	add.w	r3, lr, #1
 8004b72:	eb02 00ce 	add.w	r0, r2, lr, lsl #3
 8004b76:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
 8004b7a:	f842 103e 	str.w	r1, [r2, lr, lsl #3]
 8004b7e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
 8004b82:	3004      	adds	r0, #4
 8004b84:	468e      	mov	lr, r1
 8004b86:	2a00      	cmp	r2, #0
 8004b88:	f000 848d 	beq.w	80054a6 <d_print_comp_inner+0x2aee>
 8004b8c:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 8004b90:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
 8004b94:	428b      	cmp	r3, r1
 8004b96:	f103 0c01 	add.w	ip, r3, #1
 8004b9a:	f280 84a1 	bge.w	80054e0 <d_print_comp_inner+0x2b28>
 8004b9e:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 8004ba2:	f8c4 c13c 	str.w	ip, [r4, #316]	; 0x13c
 8004ba6:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8004baa:	6851      	ldr	r1, [r2, #4]
 8004bac:	6059      	str	r1, [r3, #4]
 8004bae:	6003      	str	r3, [r0, #0]
 8004bb0:	6812      	ldr	r2, [r2, #0]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	e7e7      	b.n	8004b86 <d_print_comp_inner+0x21ce>
 8004bb6:	2500      	movs	r5, #0
 8004bb8:	4619      	mov	r1, r3
 8004bba:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004bbe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004bc2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004bc6:	4620      	mov	r0, r4
 8004bc8:	4798      	blx	r3
 8004bca:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004bce:	1c5a      	adds	r2, r3, #1
 8004bd0:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8004bd4:	462b      	mov	r3, r5
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f7fe bd3d 	b.w	8003656 <d_print_comp_inner+0xc9e>
 8004bdc:	2e00      	cmp	r6, #0
 8004bde:	f000 844d 	beq.w	800547c <d_print_comp_inner+0x2ac4>
 8004be2:	f1ba 0f2f 	cmp.w	sl, #47	; 0x2f
 8004be6:	f040 8488 	bne.w	80054fa <d_print_comp_inner+0x2b42>
 8004bea:	6873      	ldr	r3, [r6, #4]
 8004bec:	b373      	cbz	r3, 8004c4c <d_print_comp_inner+0x2294>
 8004bee:	4607      	mov	r7, r0
 8004bf0:	e007      	b.n	8004c02 <d_print_comp_inner+0x224a>
 8004bf2:	3701      	adds	r7, #1
 8004bf4:	68b6      	ldr	r6, [r6, #8]
 8004bf6:	b356      	cbz	r6, 8004c4e <d_print_comp_inner+0x2296>
 8004bf8:	7833      	ldrb	r3, [r6, #0]
 8004bfa:	2b2f      	cmp	r3, #47	; 0x2f
 8004bfc:	d127      	bne.n	8004c4e <d_print_comp_inner+0x2296>
 8004bfe:	6873      	ldr	r3, [r6, #4]
 8004c00:	b32b      	cbz	r3, 8004c4e <d_print_comp_inner+0x2296>
 8004c02:	781a      	ldrb	r2, [r3, #0]
 8004c04:	2a4a      	cmp	r2, #74	; 0x4a
 8004c06:	d1f4      	bne.n	8004bf2 <d_print_comp_inner+0x223a>
 8004c08:	6859      	ldr	r1, [r3, #4]
 8004c0a:	4620      	mov	r0, r4
 8004c0c:	f7fb fe2c 	bl	8000868 <d_find_pack>
 8004c10:	b198      	cbz	r0, 8004c3a <d_print_comp_inner+0x2282>
 8004c12:	7803      	ldrb	r3, [r0, #0]
 8004c14:	2b2f      	cmp	r3, #47	; 0x2f
 8004c16:	f040 846c 	bne.w	80054f2 <d_print_comp_inner+0x2b3a>
 8004c1a:	6843      	ldr	r3, [r0, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 8464 	beq.w	80054ea <d_print_comp_inner+0x2b32>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2000      	movs	r0, #0
 8004c26:	e004      	b.n	8004c32 <d_print_comp_inner+0x227a>
 8004c28:	781a      	ldrb	r2, [r3, #0]
 8004c2a:	2a2f      	cmp	r2, #47	; 0x2f
 8004c2c:	d105      	bne.n	8004c3a <d_print_comp_inner+0x2282>
 8004c2e:	685a      	ldr	r2, [r3, #4]
 8004c30:	b11a      	cbz	r2, 8004c3a <d_print_comp_inner+0x2282>
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	3001      	adds	r0, #1
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1f6      	bne.n	8004c28 <d_print_comp_inner+0x2270>
 8004c3a:	4407      	add	r7, r0
 8004c3c:	e7da      	b.n	8004bf4 <d_print_comp_inner+0x223c>
 8004c3e:	bf00      	nop
 8004c40:	08017a68 	.word	0x08017a68
 8004c44:	08017abc 	.word	0x08017abc
 8004c48:	08017acc 	.word	0x08017acc
 8004c4c:	461f      	mov	r7, r3
 8004c4e:	4639      	mov	r1, r7
 8004c50:	4620      	mov	r0, r4
 8004c52:	f7fb fe8d 	bl	8000970 <d_append_num>
 8004c56:	f7fd bf7d 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004c5a:	2500      	movs	r5, #0
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004c62:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004c66:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004c6a:	4620      	mov	r0, r4
 8004c6c:	4798      	blx	r3
 8004c6e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004c72:	1c5a      	adds	r2, r3, #1
 8004c74:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8004c78:	462b      	mov	r3, r5
 8004c7a:	2101      	movs	r1, #1
 8004c7c:	f7fe bb8e 	b.w	800339c <d_print_comp_inner+0x9e4>
 8004c80:	2600      	movs	r6, #0
 8004c82:	4619      	mov	r1, r3
 8004c84:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004c88:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004c8c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004c90:	4620      	mov	r0, r4
 8004c92:	4798      	blx	r3
 8004c94:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004c98:	1c5a      	adds	r2, r3, #1
 8004c9a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8004c9e:	4633      	mov	r3, r6
 8004ca0:	2101      	movs	r1, #1
 8004ca2:	f7fe bb65 	b.w	8003370 <d_print_comp_inner+0x9b8>
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	4619      	mov	r1, r3
 8004caa:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 8004cae:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004cb2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	4798      	blx	r3
 8004cba:	2329      	movs	r3, #41	; 0x29
 8004cbc:	7023      	strb	r3, [r4, #0]
 8004cbe:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004cc2:	782a      	ldrb	r2, [r5, #0]
 8004cc4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004cc8:	2101      	movs	r1, #1
 8004cca:	3301      	adds	r3, #1
 8004ccc:	2a3d      	cmp	r2, #61	; 0x3d
 8004cce:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004cd2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004cd6:	f47e af58 	bne.w	8003b8a <d_print_comp_inner+0x11d2>
 8004cda:	e63f      	b.n	800495c <d_print_comp_inner+0x1fa4>
 8004cdc:	2700      	movs	r7, #0
 8004cde:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004ce2:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8004ce6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004cea:	4620      	mov	r0, r4
 8004cec:	4798      	blx	r3
 8004cee:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004cf2:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	4639      	mov	r1, r7
 8004cfa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004cfe:	f7fe bf28 	b.w	8003b52 <d_print_comp_inner+0x119a>
 8004d02:	2500      	movs	r5, #0
 8004d04:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004d08:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004d0c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004d10:	4620      	mov	r0, r4
 8004d12:	4798      	blx	r3
 8004d14:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004d18:	3301      	adds	r3, #1
 8004d1a:	4629      	mov	r1, r5
 8004d1c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004d20:	2201      	movs	r2, #1
 8004d22:	f7ff bb12 	b.w	800434a <d_print_comp_inner+0x1992>
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	f1a3 0163 	sub.w	r1, r3, #99	; 0x63
 8004d2c:	2901      	cmp	r1, #1
 8004d2e:	d903      	bls.n	8004d38 <d_print_comp_inner+0x2380>
 8004d30:	3b72      	subs	r3, #114	; 0x72
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	f63d aead 	bhi.w	8002a92 <d_print_comp_inner+0xda>
 8004d38:	4641      	mov	r1, r8
 8004d3a:	4620      	mov	r0, r4
 8004d3c:	f001 f9c8 	bl	80060d0 <d_print_expr_op>
 8004d40:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004d44:	29ff      	cmp	r1, #255	; 0xff
 8004d46:	f000 8271 	beq.w	800522c <d_print_comp_inner+0x2874>
 8004d4a:	1c4a      	adds	r2, r1, #1
 8004d4c:	233c      	movs	r3, #60	; 0x3c
 8004d4e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004d52:	5463      	strb	r3, [r4, r1]
 8004d54:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004d58:	68ab      	ldr	r3, [r5, #8]
 8004d5a:	4641      	mov	r1, r8
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	4620      	mov	r0, r4
 8004d60:	f000 fbce 	bl	8005500 <d_print_comp>
 8004d64:	2202      	movs	r2, #2
 8004d66:	49d5      	ldr	r1, [pc, #852]	; (80050bc <d_print_comp_inner+0x2704>)
 8004d68:	4620      	mov	r0, r4
 8004d6a:	f7fb fb51 	bl	8000410 <d_append_buffer>
 8004d6e:	68ab      	ldr	r3, [r5, #8]
 8004d70:	4641      	mov	r1, r8
 8004d72:	689a      	ldr	r2, [r3, #8]
 8004d74:	4620      	mov	r0, r4
 8004d76:	f000 fbc3 	bl	8005500 <d_print_comp>
 8004d7a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004d7e:	29ff      	cmp	r1, #255	; 0xff
 8004d80:	f000 81df 	beq.w	8005142 <d_print_comp_inner+0x278a>
 8004d84:	2329      	movs	r3, #41	; 0x29
 8004d86:	1c4a      	adds	r2, r1, #1
 8004d88:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004d8c:	5463      	strb	r3, [r4, r1]
 8004d8e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004d92:	f7fd bedf 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004d96:	4632      	mov	r2, r6
 8004d98:	4641      	mov	r1, r8
 8004d9a:	4620      	mov	r0, r4
 8004d9c:	f000 fbb0 	bl	8005500 <d_print_comp>
 8004da0:	f7fd bed8 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004da4:	2600      	movs	r6, #0
 8004da6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004daa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004dae:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004db2:	4620      	mov	r0, r4
 8004db4:	4798      	blx	r3
 8004db6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004dba:	3301      	adds	r3, #1
 8004dbc:	4631      	mov	r1, r6
 8004dbe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f7fe ba55 	b.w	8003272 <d_print_comp_inner+0x8ba>
 8004dc8:	49bd      	ldr	r1, [pc, #756]	; (80050c0 <d_print_comp_inner+0x2708>)
 8004dca:	6870      	ldr	r0, [r6, #4]
 8004dcc:	f00d fc7e 	bl	80126cc <strncmp>
 8004dd0:	2800      	cmp	r0, #0
 8004dd2:	f47e aabd 	bne.w	8003350 <d_print_comp_inner+0x998>
 8004dd6:	68aa      	ldr	r2, [r5, #8]
 8004dd8:	4641      	mov	r1, r8
 8004dda:	4620      	mov	r0, r4
 8004ddc:	f000 fb90 	bl	8005500 <d_print_comp>
 8004de0:	2202      	movs	r2, #2
 8004de2:	49b8      	ldr	r1, [pc, #736]	; (80050c4 <d_print_comp_inner+0x270c>)
 8004de4:	4620      	mov	r0, r4
 8004de6:	f7fb fb13 	bl	8000410 <d_append_buffer>
 8004dea:	f7fe badd 	b.w	80033a8 <d_print_comp_inner+0x9f0>
 8004dee:	68aa      	ldr	r2, [r5, #8]
 8004df0:	7817      	ldrb	r7, [r2, #0]
 8004df2:	2f00      	cmp	r7, #0
 8004df4:	f47e aea8 	bne.w	8003b48 <d_print_comp_inner+0x1190>
 8004df8:	2b3d      	cmp	r3, #61	; 0x3d
 8004dfa:	f000 82ef 	beq.w	80053dc <d_print_comp_inner+0x2a24>
 8004dfe:	68aa      	ldr	r2, [r5, #8]
 8004e00:	4641      	mov	r1, r8
 8004e02:	4620      	mov	r0, r4
 8004e04:	3e02      	subs	r6, #2
 8004e06:	f000 fb7b 	bl	8005500 <d_print_comp>
 8004e0a:	2e04      	cmp	r6, #4
 8004e0c:	f63d aea2 	bhi.w	8002b54 <d_print_comp_inner+0x19c>
 8004e10:	e8df f006 	tbb	[pc, r6]
 8004e14:	0a111826 	.word	0x0a111826
 8004e18:	03          	.byte	0x03
 8004e19:	00          	.byte	0x00
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	2203      	movs	r2, #3
 8004e1e:	49aa      	ldr	r1, [pc, #680]	; (80050c8 <d_print_comp_inner+0x2710>)
 8004e20:	f7fb faf6 	bl	8000410 <d_append_buffer>
 8004e24:	f7fd be96 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004e28:	4620      	mov	r0, r4
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	49a7      	ldr	r1, [pc, #668]	; (80050cc <d_print_comp_inner+0x2714>)
 8004e2e:	f7fb faef 	bl	8000410 <d_append_buffer>
 8004e32:	f7fd be8f 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004e36:	4620      	mov	r0, r4
 8004e38:	2202      	movs	r2, #2
 8004e3a:	49a5      	ldr	r1, [pc, #660]	; (80050d0 <d_print_comp_inner+0x2718>)
 8004e3c:	f7fb fae8 	bl	8000410 <d_append_buffer>
 8004e40:	f7fd be88 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004e44:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004e48:	29ff      	cmp	r1, #255	; 0xff
 8004e4a:	f000 831a 	beq.w	8005482 <d_print_comp_inner+0x2aca>
 8004e4e:	236c      	movs	r3, #108	; 0x6c
 8004e50:	1c4a      	adds	r2, r1, #1
 8004e52:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004e56:	5463      	strb	r3, [r4, r1]
 8004e58:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004e5c:	f7fd be7a 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004e60:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004e64:	29ff      	cmp	r1, #255	; 0xff
 8004e66:	f000 82db 	beq.w	8005420 <d_print_comp_inner+0x2a68>
 8004e6a:	2375      	movs	r3, #117	; 0x75
 8004e6c:	1c4a      	adds	r2, r1, #1
 8004e6e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004e72:	5463      	strb	r3, [r4, r1]
 8004e74:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004e78:	f7fd be6c 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004e7c:	2600      	movs	r6, #0
 8004e7e:	4619      	mov	r1, r3
 8004e80:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004e84:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004e88:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004e8c:	4620      	mov	r0, r4
 8004e8e:	4798      	blx	r3
 8004e90:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004e94:	1c5a      	adds	r2, r3, #1
 8004e96:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8004e9a:	4633      	mov	r3, r6
 8004e9c:	2101      	movs	r1, #1
 8004e9e:	f7fe bd3c 	b.w	800391a <d_print_comp_inner+0xf62>
 8004ea2:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8004ea6:	f7fe bf95 	b.w	8003dd4 <d_print_comp_inner+0x141c>
 8004eaa:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004eae:	29ff      	cmp	r1, #255	; 0xff
 8004eb0:	f000 8244 	beq.w	800533c <d_print_comp_inner+0x2984>
 8004eb4:	2320      	movs	r3, #32
 8004eb6:	1c4a      	adds	r2, r1, #1
 8004eb8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004ebc:	5463      	strb	r3, [r4, r1]
 8004ebe:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004ec2:	e447      	b.n	8004754 <d_print_comp_inner+0x1d9c>
 8004ec4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004ec8:	29ff      	cmp	r1, #255	; 0xff
 8004eca:	f000 826e 	beq.w	80053aa <d_print_comp_inner+0x29f2>
 8004ece:	2320      	movs	r3, #32
 8004ed0:	1c4a      	adds	r2, r1, #1
 8004ed2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004ed6:	5463      	strb	r3, [r4, r1]
 8004ed8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004edc:	e419      	b.n	8004712 <d_print_comp_inner+0x1d5a>
 8004ede:	2500      	movs	r5, #0
 8004ee0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004ee4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004ee8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004eec:	4620      	mov	r0, r4
 8004eee:	4798      	blx	r3
 8004ef0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	4629      	mov	r1, r5
 8004ef8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004efc:	e4dd      	b.n	80048ba <d_print_comp_inner+0x1f02>
 8004efe:	4664      	mov	r4, ip
 8004f00:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 8004f04:	b1d8      	cbz	r0, 8004f3e <d_print_comp_inner+0x2586>
 8004f06:	6802      	ldr	r2, [r0, #0]
 8004f08:	4291      	cmp	r1, r2
 8004f0a:	d00a      	beq.n	8004f22 <d_print_comp_inner+0x256a>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	e004      	b.n	8004f1a <d_print_comp_inner+0x2562>
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	b1a3      	cbz	r3, 8004f3e <d_print_comp_inner+0x2586>
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	4291      	cmp	r1, r2
 8004f18:	d003      	beq.n	8004f22 <d_print_comp_inner+0x256a>
 8004f1a:	4295      	cmp	r5, r2
 8004f1c:	d1f8      	bne.n	8004f10 <d_print_comp_inner+0x2558>
 8004f1e:	4298      	cmp	r0, r3
 8004f20:	d0f6      	beq.n	8004f10 <d_print_comp_inner+0x2558>
 8004f22:	3104      	adds	r1, #4
 8004f24:	4620      	mov	r0, r4
 8004f26:	f7fb fc83 	bl	8000830 <d_lookup_template_argument.isra.6>
 8004f2a:	2800      	cmp	r0, #0
 8004f2c:	f43d ae26 	beq.w	8002b7c <d_print_comp_inner+0x1c4>
 8004f30:	7803      	ldrb	r3, [r0, #0]
 8004f32:	2b2f      	cmp	r3, #47	; 0x2f
 8004f34:	f43d ae11 	beq.w	8002b5a <d_print_comp_inner+0x1a2>
 8004f38:	4601      	mov	r1, r0
 8004f3a:	f7fe bc30 	b.w	800379e <d_print_comp_inner+0xde6>
 8004f3e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004f42:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
 8004f46:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8004f4a:	3104      	adds	r1, #4
 8004f4c:	4620      	mov	r0, r4
 8004f4e:	f7fb fc6f 	bl	8000830 <d_lookup_template_argument.isra.6>
 8004f52:	2800      	cmp	r0, #0
 8004f54:	f43d ae10 	beq.w	8002b78 <d_print_comp_inner+0x1c0>
 8004f58:	2701      	movs	r7, #1
 8004f5a:	e7e9      	b.n	8004f30 <d_print_comp_inner+0x2578>
 8004f5c:	2600      	movs	r6, #0
 8004f5e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004f62:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004f66:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004f6a:	4620      	mov	r0, r4
 8004f6c:	4798      	blx	r3
 8004f6e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004f72:	f8da 5004 	ldr.w	r5, [sl, #4]
 8004f76:	3301      	adds	r3, #1
 8004f78:	4631      	mov	r1, r6
 8004f7a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004f7e:	f7ff b85a 	b.w	8004036 <d_print_comp_inner+0x167e>
 8004f82:	68aa      	ldr	r2, [r5, #8]
 8004f84:	4641      	mov	r1, r8
 8004f86:	4620      	mov	r0, r4
 8004f88:	f000 faba 	bl	8005500 <d_print_comp>
 8004f8c:	9b06      	ldr	r3, [sp, #24]
 8004f8e:	9a00      	ldr	r2, [sp, #0]
 8004f90:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f43e ac9d 	beq.w	80038d4 <d_print_comp_inner+0xf1c>
 8004f9a:	f7fd bddb 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004f9e:	255f      	movs	r5, #95	; 0x5f
 8004fa0:	f7ff ba10 	b.w	80043c4 <d_print_comp_inner+0x1a0c>
 8004fa4:	2500      	movs	r5, #0
 8004fa6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004faa:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004fae:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004fb2:	4620      	mov	r0, r4
 8004fb4:	4798      	blx	r3
 8004fb6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004fba:	3301      	adds	r3, #1
 8004fbc:	4629      	mov	r1, r5
 8004fbe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004fc2:	f7ff bb82 	b.w	80046ca <d_print_comp_inner+0x1d12>
 8004fc6:	4648      	mov	r0, r9
 8004fc8:	4942      	ldr	r1, [pc, #264]	; (80050d4 <d_print_comp_inner+0x271c>)
 8004fca:	f001 fca9 	bl	8006920 <strcmp>
 8004fce:	b120      	cbz	r0, 8004fda <d_print_comp_inner+0x2622>
 8004fd0:	463a      	mov	r2, r7
 8004fd2:	4641      	mov	r1, r8
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	f001 f87b 	bl	80060d0 <d_print_expr_op>
 8004fda:	68ab      	ldr	r3, [r5, #8]
 8004fdc:	4641      	mov	r1, r8
 8004fde:	689a      	ldr	r2, [r3, #8]
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	f001 f8b3 	bl	800614c <d_print_subexpr>
 8004fe6:	f7fd bd9d 	b.w	8002b24 <d_print_comp_inner+0x16c>
 8004fea:	2600      	movs	r6, #0
 8004fec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004ff0:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004ff4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004ff8:	4620      	mov	r0, r4
 8004ffa:	4798      	blx	r3
 8004ffc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005000:	3301      	adds	r3, #1
 8005002:	4631      	mov	r1, r6
 8005004:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005008:	f7ff bb88 	b.w	800471c <d_print_comp_inner+0x1d64>
 800500c:	2500      	movs	r5, #0
 800500e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005012:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005016:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800501a:	4620      	mov	r0, r4
 800501c:	4798      	blx	r3
 800501e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005022:	3301      	adds	r3, #1
 8005024:	4629      	mov	r1, r5
 8005026:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800502a:	f7fe bb59 	b.w	80036e0 <d_print_comp_inner+0xd28>
 800502e:	2500      	movs	r5, #0
 8005030:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005034:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8005038:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 800503c:	4798      	blx	r3
 800503e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005042:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8005046:	3301      	adds	r3, #1
 8005048:	4629      	mov	r1, r5
 800504a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800504e:	f7fe bb2b 	b.w	80036a8 <d_print_comp_inner+0xcf0>
 8005052:	6840      	ldr	r0, [r0, #4]
 8005054:	2800      	cmp	r0, #0
 8005056:	f43d ad91 	beq.w	8002b7c <d_print_comp_inner+0x1c4>
 800505a:	f7fe b959 	b.w	8003310 <d_print_comp_inner+0x958>
 800505e:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 8005062:	4619      	mov	r1, r3
 8005064:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005068:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800506c:	4620      	mov	r0, r4
 800506e:	4798      	blx	r3
 8005070:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005074:	1c5a      	adds	r2, r3, #1
 8005076:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 800507a:	462b      	mov	r3, r5
 800507c:	f7ff bb14 	b.w	80046a8 <d_print_comp_inner+0x1cf0>
 8005080:	6873      	ldr	r3, [r6, #4]
 8005082:	781a      	ldrb	r2, [r3, #0]
 8005084:	2a01      	cmp	r2, #1
 8005086:	f000 8153 	beq.w	8005330 <d_print_comp_inner+0x2978>
 800508a:	f896 a000 	ldrb.w	sl, [r6]
 800508e:	f7ff bae0 	b.w	8004652 <d_print_comp_inner+0x1c9a>
 8005092:	2500      	movs	r5, #0
 8005094:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005098:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800509c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80050a0:	4620      	mov	r0, r4
 80050a2:	4798      	blx	r3
 80050a4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80050a8:	3301      	adds	r3, #1
 80050aa:	4629      	mov	r1, r5
 80050ac:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80050b0:	f7ff bb55 	b.w	800475e <d_print_comp_inner+0x1da6>
 80050b4:	4654      	mov	r4, sl
 80050b6:	f7fe be8d 	b.w	8003dd4 <d_print_comp_inner+0x141c>
 80050ba:	bf00      	nop
 80050bc:	08017c68 	.word	0x08017c68
 80050c0:	08017ad0 	.word	0x08017ad0
 80050c4:	08017ad8 	.word	0x08017ad8
 80050c8:	08017c84 	.word	0x08017c84
 80050cc:	08017c80 	.word	0x08017c80
 80050d0:	08017c7c 	.word	0x08017c7c
 80050d4:	08017a70 	.word	0x08017a70
 80050d8:	686a      	ldr	r2, [r5, #4]
 80050da:	4641      	mov	r1, r8
 80050dc:	4620      	mov	r0, r4
 80050de:	f001 f835 	bl	800614c <d_print_subexpr>
 80050e2:	4620      	mov	r0, r4
 80050e4:	2203      	movs	r2, #3
 80050e6:	49e2      	ldr	r1, [pc, #904]	; (8005470 <d_print_comp_inner+0x2ab8>)
 80050e8:	f7fb f992 	bl	8000410 <d_append_buffer>
 80050ec:	f7fd bd32 	b.w	8002b54 <d_print_comp_inner+0x19c>
 80050f0:	ab14      	add	r3, sp, #80	; 0x50
 80050f2:	9603      	str	r6, [sp, #12]
 80050f4:	f843 cd48 	str.w	ip, [r3, #-72]!
 80050f8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80050fc:	f7fe b85a 	b.w	80031b4 <d_print_comp_inner+0x7fc>
 8005100:	2700      	movs	r7, #0
 8005102:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005106:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 800510a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800510e:	4620      	mov	r0, r4
 8005110:	4798      	blx	r3
 8005112:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005116:	3301      	adds	r3, #1
 8005118:	4639      	mov	r1, r7
 800511a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800511e:	e41d      	b.n	800495c <d_print_comp_inner+0x1fa4>
 8005120:	2600      	movs	r6, #0
 8005122:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005126:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800512a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800512e:	4620      	mov	r0, r4
 8005130:	4798      	blx	r3
 8005132:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005136:	3301      	adds	r3, #1
 8005138:	4631      	mov	r1, r6
 800513a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800513e:	f7ff bb8a 	b.w	8004856 <d_print_comp_inner+0x1e9e>
 8005142:	2500      	movs	r5, #0
 8005144:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005148:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800514c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005150:	4620      	mov	r0, r4
 8005152:	4798      	blx	r3
 8005154:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005158:	3301      	adds	r3, #1
 800515a:	4629      	mov	r1, r5
 800515c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005160:	e610      	b.n	8004d84 <d_print_comp_inner+0x23cc>
 8005162:	2600      	movs	r6, #0
 8005164:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005168:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800516c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005170:	4620      	mov	r0, r4
 8005172:	4798      	blx	r3
 8005174:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005178:	3301      	adds	r3, #1
 800517a:	4631      	mov	r1, r6
 800517c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005180:	f7ff bb8a 	b.w	8004898 <d_print_comp_inner+0x1ee0>
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	6891      	ldr	r1, [r2, #8]
 8005188:	2901      	cmp	r1, #1
 800518a:	f47d ac90 	bne.w	8002aae <d_print_comp_inner+0xf6>
 800518e:	6852      	ldr	r2, [r2, #4]
 8005190:	7812      	ldrb	r2, [r2, #0]
 8005192:	2a3e      	cmp	r2, #62	; 0x3e
 8005194:	f47d ac8b 	bne.w	8002aae <d_print_comp_inner+0xf6>
 8005198:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800519c:	29ff      	cmp	r1, #255	; 0xff
 800519e:	d10f      	bne.n	80051c0 <d_print_comp_inner+0x2808>
 80051a0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80051a4:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80051a8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80051ac:	4620      	mov	r0, r4
 80051ae:	4798      	blx	r3
 80051b0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80051b4:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80051b8:	3301      	adds	r3, #1
 80051ba:	4631      	mov	r1, r6
 80051bc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80051c0:	2328      	movs	r3, #40	; 0x28
 80051c2:	1c4a      	adds	r2, r1, #1
 80051c4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80051c8:	5463      	strb	r3, [r4, r1]
 80051ca:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80051ce:	686b      	ldr	r3, [r5, #4]
 80051d0:	f7fd bc6d 	b.w	8002aae <d_print_comp_inner+0xf6>
 80051d4:	2500      	movs	r5, #0
 80051d6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80051da:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80051de:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80051e2:	4620      	mov	r0, r4
 80051e4:	4798      	blx	r3
 80051e6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80051ea:	3301      	adds	r3, #1
 80051ec:	4629      	mov	r1, r5
 80051ee:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80051f2:	f7ff bb0b 	b.w	800480c <d_print_comp_inner+0x1e54>
 80051f6:	f8db b004 	ldr.w	fp, [fp, #4]
 80051fa:	f1bb 0f00 	cmp.w	fp, #0
 80051fe:	f43e ade9 	beq.w	8003dd4 <d_print_comp_inner+0x141c>
 8005202:	f7fd bfc3 	b.w	800318c <d_print_comp_inner+0x7d4>
 8005206:	9b02      	ldr	r3, [sp, #8]
 8005208:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 800520c:	f7fd bfdb 	b.w	80031c6 <d_print_comp_inner+0x80e>
 8005210:	6893      	ldr	r3, [r2, #8]
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	2b29      	cmp	r3, #41	; 0x29
 8005216:	bf1c      	itt	ne
 8005218:	2301      	movne	r3, #1
 800521a:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
 800521e:	6852      	ldr	r2, [r2, #4]
 8005220:	4641      	mov	r1, r8
 8005222:	4620      	mov	r0, r4
 8005224:	f000 ff92 	bl	800614c <d_print_subexpr>
 8005228:	f7fd bc52 	b.w	8002ad0 <d_print_comp_inner+0x118>
 800522c:	2600      	movs	r6, #0
 800522e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005232:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005236:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800523a:	4620      	mov	r0, r4
 800523c:	4798      	blx	r3
 800523e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005242:	3301      	adds	r3, #1
 8005244:	4631      	mov	r1, r6
 8005246:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800524a:	e57e      	b.n	8004d4a <d_print_comp_inner+0x2392>
 800524c:	6872      	ldr	r2, [r6, #4]
 800524e:	4641      	mov	r1, r8
 8005250:	4620      	mov	r0, r4
 8005252:	f000 ff7b 	bl	800614c <d_print_subexpr>
 8005256:	464a      	mov	r2, r9
 8005258:	4641      	mov	r1, r8
 800525a:	4620      	mov	r0, r4
 800525c:	f000 ff38 	bl	80060d0 <d_print_expr_op>
 8005260:	f7fd bc78 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8005264:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005268:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800526c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005270:	4620      	mov	r0, r4
 8005272:	4798      	blx	r3
 8005274:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005278:	3301      	adds	r3, #1
 800527a:	4629      	mov	r1, r5
 800527c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005280:	f7fd bfad 	b.w	80031de <d_print_comp_inner+0x826>
 8005284:	464a      	mov	r2, r9
 8005286:	4641      	mov	r1, r8
 8005288:	4620      	mov	r0, r4
 800528a:	f000 ff5f 	bl	800614c <d_print_subexpr>
 800528e:	4652      	mov	r2, sl
 8005290:	4641      	mov	r1, r8
 8005292:	4620      	mov	r0, r4
 8005294:	f000 ff1c 	bl	80060d0 <d_print_expr_op>
 8005298:	463a      	mov	r2, r7
 800529a:	4641      	mov	r1, r8
 800529c:	4620      	mov	r0, r4
 800529e:	f000 ff55 	bl	800614c <d_print_subexpr>
 80052a2:	4620      	mov	r0, r4
 80052a4:	2203      	movs	r2, #3
 80052a6:	4973      	ldr	r1, [pc, #460]	; (8005474 <d_print_comp_inner+0x2abc>)
 80052a8:	f7fb f8b2 	bl	8000410 <d_append_buffer>
 80052ac:	462a      	mov	r2, r5
 80052ae:	4641      	mov	r1, r8
 80052b0:	4620      	mov	r0, r4
 80052b2:	f000 ff4b 	bl	800614c <d_print_subexpr>
 80052b6:	f7fd bc4d 	b.w	8002b54 <d_print_comp_inner+0x19c>
 80052ba:	454f      	cmp	r7, r9
 80052bc:	f67f ae6f 	bls.w	8004f9e <d_print_comp_inner+0x25e6>
 80052c0:	2d5f      	cmp	r5, #95	; 0x5f
 80052c2:	f47f ae6c 	bne.w	8004f9e <d_print_comp_inner+0x25e6>
 80052c6:	28ff      	cmp	r0, #255	; 0xff
 80052c8:	f63f a87c 	bhi.w	80043c4 <d_print_comp_inner+0x1a0c>
 80052cc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80052d0:	29ff      	cmp	r1, #255	; 0xff
 80052d2:	b2c5      	uxtb	r5, r0
 80052d4:	d10f      	bne.n	80052f6 <d_print_comp_inner+0x293e>
 80052d6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80052da:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80052de:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80052e2:	4620      	mov	r0, r4
 80052e4:	4798      	blx	r3
 80052e6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80052ea:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 80052ee:	3301      	adds	r3, #1
 80052f0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80052f4:	2100      	movs	r1, #0
 80052f6:	1c4b      	adds	r3, r1, #1
 80052f8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80052fc:	464e      	mov	r6, r9
 80052fe:	5465      	strb	r5, [r4, r1]
 8005300:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8005304:	f7ff b868 	b.w	80043d8 <d_print_comp_inner+0x1a20>
 8005308:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800530c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005310:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005314:	4620      	mov	r0, r4
 8005316:	4798      	blx	r3
 8005318:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800531c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005320:	3301      	adds	r3, #1
 8005322:	4631      	mov	r1, r6
 8005324:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005328:	f7ff bbe5 	b.w	8004af6 <d_print_comp_inner+0x213e>
 800532c:	4691      	mov	r9, r2
 800532e:	e5e7      	b.n	8004f00 <d_print_comp_inner+0x2548>
 8005330:	68b2      	ldr	r2, [r6, #8]
 8005332:	7812      	ldrb	r2, [r2, #0]
 8005334:	2a29      	cmp	r2, #41	; 0x29
 8005336:	bf08      	it	eq
 8005338:	461e      	moveq	r6, r3
 800533a:	e6a6      	b.n	800508a <d_print_comp_inner+0x26d2>
 800533c:	2500      	movs	r5, #0
 800533e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005342:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005346:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800534a:	4620      	mov	r0, r4
 800534c:	4798      	blx	r3
 800534e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005352:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8005356:	3301      	adds	r3, #1
 8005358:	4629      	mov	r1, r5
 800535a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800535e:	e5a9      	b.n	8004eb4 <d_print_comp_inner+0x24fc>
 8005360:	2600      	movs	r6, #0
 8005362:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005366:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800536a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800536e:	4620      	mov	r0, r4
 8005370:	4798      	blx	r3
 8005372:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005376:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800537a:	3301      	adds	r3, #1
 800537c:	4631      	mov	r1, r6
 800537e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005382:	f7fd bbc8 	b.w	8002b16 <d_print_comp_inner+0x15e>
 8005386:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 800538a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800538e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005392:	4620      	mov	r0, r4
 8005394:	4798      	blx	r3
 8005396:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800539a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800539e:	3301      	adds	r3, #1
 80053a0:	4631      	mov	r1, r6
 80053a2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80053a6:	f7fd bba4 	b.w	8002af2 <d_print_comp_inner+0x13a>
 80053aa:	2600      	movs	r6, #0
 80053ac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80053b0:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80053b4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80053b8:	4620      	mov	r0, r4
 80053ba:	4798      	blx	r3
 80053bc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80053c0:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80053c4:	3301      	adds	r3, #1
 80053c6:	4631      	mov	r1, r6
 80053c8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80053cc:	e57f      	b.n	8004ece <d_print_comp_inner+0x2516>
 80053ce:	6841      	ldr	r1, [r0, #4]
 80053d0:	2900      	cmp	r1, #0
 80053d2:	f43d abd0 	beq.w	8002b76 <d_print_comp_inner+0x1be>
 80053d6:	780b      	ldrb	r3, [r1, #0]
 80053d8:	f7fe b9e1 	b.w	800379e <d_print_comp_inner+0xde6>
 80053dc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80053e0:	29ff      	cmp	r1, #255	; 0xff
 80053e2:	d00d      	beq.n	8005400 <d_print_comp_inner+0x2a48>
 80053e4:	232d      	movs	r3, #45	; 0x2d
 80053e6:	1c4a      	adds	r2, r1, #1
 80053e8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80053ec:	5463      	strb	r3, [r4, r1]
 80053ee:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80053f2:	e504      	b.n	8004dfe <d_print_comp_inner+0x2446>
 80053f4:	2205      	movs	r2, #5
 80053f6:	4920      	ldr	r1, [pc, #128]	; (8005478 <d_print_comp_inner+0x2ac0>)
 80053f8:	f7fb f80a 	bl	8000410 <d_append_buffer>
 80053fc:	f7fd bbaa 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8005400:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005404:	f880 70ff 	strb.w	r7, [r0, #255]	; 0xff
 8005408:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 800540c:	4798      	blx	r3
 800540e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005412:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 8005416:	3301      	adds	r3, #1
 8005418:	4639      	mov	r1, r7
 800541a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800541e:	e7e1      	b.n	80053e4 <d_print_comp_inner+0x2a2c>
 8005420:	2500      	movs	r5, #0
 8005422:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005426:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800542a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800542e:	4620      	mov	r0, r4
 8005430:	4798      	blx	r3
 8005432:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005436:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 800543a:	3301      	adds	r3, #1
 800543c:	4629      	mov	r1, r5
 800543e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005442:	e512      	b.n	8004e6a <d_print_comp_inner+0x24b2>
 8005444:	2700      	movs	r7, #0
 8005446:	f7ff b913 	b.w	8004670 <d_print_comp_inner+0x1cb8>
 800544a:	2500      	movs	r5, #0
 800544c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005450:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005454:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005458:	4620      	mov	r0, r4
 800545a:	4798      	blx	r3
 800545c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005460:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8005464:	3301      	adds	r3, #1
 8005466:	4629      	mov	r1, r5
 8005468:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800546c:	f7fd bb6b 	b.w	8002b46 <d_print_comp_inner+0x18e>
 8005470:	08017cb4 	.word	0x08017cb4
 8005474:	08017c70 	.word	0x08017c70
 8005478:	08017c88 	.word	0x08017c88
 800547c:	4637      	mov	r7, r6
 800547e:	f7ff bbe6 	b.w	8004c4e <d_print_comp_inner+0x2296>
 8005482:	2500      	movs	r5, #0
 8005484:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005488:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800548c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005490:	4620      	mov	r0, r4
 8005492:	4798      	blx	r3
 8005494:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005498:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 800549c:	3301      	adds	r3, #1
 800549e:	4629      	mov	r1, r5
 80054a0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80054a4:	e4d3      	b.n	8004e4e <d_print_comp_inner+0x2496>
 80054a6:	4671      	mov	r1, lr
 80054a8:	6002      	str	r2, [r0, #0]
 80054aa:	3104      	adds	r1, #4
 80054ac:	4620      	mov	r0, r4
 80054ae:	f7fb f9bf 	bl	8000830 <d_lookup_template_argument.isra.6>
 80054b2:	2800      	cmp	r0, #0
 80054b4:	f47f ad3c 	bne.w	8004f30 <d_print_comp_inner+0x2578>
 80054b8:	f7fd bb60 	b.w	8002b7c <d_print_comp_inner+0x1c4>
 80054bc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80054c0:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80054c4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80054c8:	4620      	mov	r0, r4
 80054ca:	4798      	blx	r3
 80054cc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80054d0:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80054d4:	3301      	adds	r3, #1
 80054d6:	4631      	mov	r1, r6
 80054d8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80054dc:	f7fe bc02 	b.w	8003ce4 <d_print_comp_inner+0x132c>
 80054e0:	2301      	movs	r3, #1
 80054e2:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80054e6:	f7fd bb35 	b.w	8002b54 <d_print_comp_inner+0x19c>
 80054ea:	4618      	mov	r0, r3
 80054ec:	4407      	add	r7, r0
 80054ee:	f7ff bb81 	b.w	8004bf4 <d_print_comp_inner+0x223c>
 80054f2:	2000      	movs	r0, #0
 80054f4:	4407      	add	r7, r0
 80054f6:	f7ff bb7d 	b.w	8004bf4 <d_print_comp_inner+0x223c>
 80054fa:	4607      	mov	r7, r0
 80054fc:	f7ff bba7 	b.w	8004c4e <d_print_comp_inner+0x2296>

08005500 <d_print_comp>:
 8005500:	b510      	push	{r4, lr}
 8005502:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
 8005506:	b082      	sub	sp, #8
 8005508:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
 800550c:	4604      	mov	r4, r0
 800550e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8005512:	f7fd fa51 	bl	80029b8 <d_print_comp_inner>
 8005516:	9b01      	ldr	r3, [sp, #4]
 8005518:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800551c:	b002      	add	sp, #8
 800551e:	bd10      	pop	{r4, pc}

08005520 <d_print_mod>:
 8005520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005524:	7813      	ldrb	r3, [r2, #0]
 8005526:	3b03      	subs	r3, #3
 8005528:	b082      	sub	sp, #8
 800552a:	4615      	mov	r5, r2
 800552c:	4604      	mov	r4, r0
 800552e:	4688      	mov	r8, r1
 8005530:	2b49      	cmp	r3, #73	; 0x49
 8005532:	f200 8223 	bhi.w	800597c <d_print_mod+0x45c>
 8005536:	e8df f013 	tbh	[pc, r3, lsl #1]
 800553a:	01e7      	.short	0x01e7
 800553c:	02210221 	.word	0x02210221
 8005540:	02210221 	.word	0x02210221
 8005544:	02210221 	.word	0x02210221
 8005548:	02210221 	.word	0x02210221
 800554c:	02210221 	.word	0x02210221
 8005550:	02210221 	.word	0x02210221
 8005554:	02210221 	.word	0x02210221
 8005558:	02210221 	.word	0x02210221
 800555c:	02210221 	.word	0x02210221
 8005560:	02210221 	.word	0x02210221
 8005564:	01e90221 	.word	0x01e90221
 8005568:	01a80182 	.word	0x01a80182
 800556c:	018201e9 	.word	0x018201e9
 8005570:	01cd01a8 	.word	0x01cd01a8
 8005574:	006f01da 	.word	0x006f01da
 8005578:	009c008c 	.word	0x009c008c
 800557c:	00cf00ab 	.word	0x00cf00ab
 8005580:	022100f4 	.word	0x022100f4
 8005584:	02210221 	.word	0x02210221
 8005588:	01190221 	.word	0x01190221
 800558c:	015c0221 	.word	0x015c0221
 8005590:	02210221 	.word	0x02210221
 8005594:	02210221 	.word	0x02210221
 8005598:	02210221 	.word	0x02210221
 800559c:	02210221 	.word	0x02210221
 80055a0:	02210221 	.word	0x02210221
 80055a4:	02210221 	.word	0x02210221
 80055a8:	02210221 	.word	0x02210221
 80055ac:	02210221 	.word	0x02210221
 80055b0:	02210221 	.word	0x02210221
 80055b4:	02210221 	.word	0x02210221
 80055b8:	02210221 	.word	0x02210221
 80055bc:	02210221 	.word	0x02210221
 80055c0:	02210221 	.word	0x02210221
 80055c4:	02210221 	.word	0x02210221
 80055c8:	02210221 	.word	0x02210221
 80055cc:	004a      	.short	0x004a
 80055ce:	4dd3      	ldr	r5, [pc, #844]	; (800591c <d_print_mod+0x3fc>)
 80055d0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80055d4:	f105 0711 	add.w	r7, r5, #17
 80055d8:	f04f 0800 	mov.w	r8, #0
 80055dc:	e008      	b.n	80055f0 <d_print_mod+0xd0>
 80055de:	460b      	mov	r3, r1
 80055e0:	3101      	adds	r1, #1
 80055e2:	42bd      	cmp	r5, r7
 80055e4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80055e8:	54e6      	strb	r6, [r4, r3]
 80055ea:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80055ee:	d02d      	beq.n	800564c <d_print_mod+0x12c>
 80055f0:	29ff      	cmp	r1, #255	; 0xff
 80055f2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80055f6:	d1f2      	bne.n	80055de <d_print_mod+0xbe>
 80055f8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80055fc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005600:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005604:	4620      	mov	r0, r4
 8005606:	4798      	blx	r3
 8005608:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800560c:	3301      	adds	r3, #1
 800560e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005612:	2101      	movs	r1, #1
 8005614:	2300      	movs	r3, #0
 8005616:	e7e4      	b.n	80055e2 <d_print_mod+0xc2>
 8005618:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800561c:	29ff      	cmp	r1, #255	; 0xff
 800561e:	f000 81f7 	beq.w	8005a10 <d_print_mod+0x4f0>
 8005622:	1c4a      	adds	r2, r1, #1
 8005624:	2320      	movs	r3, #32
 8005626:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800562a:	5463      	strb	r3, [r4, r1]
 800562c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005630:	68aa      	ldr	r2, [r5, #8]
 8005632:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005636:	9200      	str	r2, [sp, #0]
 8005638:	4641      	mov	r1, r8
 800563a:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
 800563e:	4620      	mov	r0, r4
 8005640:	9301      	str	r3, [sp, #4]
 8005642:	f7fd f9b9 	bl	80029b8 <d_print_comp_inner>
 8005646:	9b01      	ldr	r3, [sp, #4]
 8005648:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800564c:	b002      	add	sp, #8
 800564e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005652:	f011 0504 	ands.w	r5, r1, #4
 8005656:	d1f9      	bne.n	800564c <d_print_mod+0x12c>
 8005658:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800565c:	2bff      	cmp	r3, #255	; 0xff
 800565e:	f000 821c 	beq.w	8005a9a <d_print_mod+0x57a>
 8005662:	222a      	movs	r2, #42	; 0x2a
 8005664:	1c59      	adds	r1, r3, #1
 8005666:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800566a:	54e2      	strb	r2, [r4, r3]
 800566c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005670:	e7ec      	b.n	800564c <d_print_mod+0x12c>
 8005672:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005676:	29ff      	cmp	r1, #255	; 0xff
 8005678:	f000 81b9 	beq.w	80059ee <d_print_mod+0x4ce>
 800567c:	1c4a      	adds	r2, r1, #1
 800567e:	2326      	movs	r3, #38	; 0x26
 8005680:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005684:	5463      	strb	r3, [r4, r1]
 8005686:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800568a:	b002      	add	sp, #8
 800568c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005690:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005694:	4da2      	ldr	r5, [pc, #648]	; (8005920 <d_print_mod+0x400>)
 8005696:	f04f 0800 	mov.w	r8, #0
 800569a:	1caf      	adds	r7, r5, #2
 800569c:	e008      	b.n	80056b0 <d_print_mod+0x190>
 800569e:	460b      	mov	r3, r1
 80056a0:	3101      	adds	r1, #1
 80056a2:	42bd      	cmp	r5, r7
 80056a4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80056a8:	54e6      	strb	r6, [r4, r3]
 80056aa:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80056ae:	d0cd      	beq.n	800564c <d_print_mod+0x12c>
 80056b0:	29ff      	cmp	r1, #255	; 0xff
 80056b2:	f815 6b01 	ldrb.w	r6, [r5], #1
 80056b6:	d1f2      	bne.n	800569e <d_print_mod+0x17e>
 80056b8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80056bc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80056c0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80056c4:	4620      	mov	r0, r4
 80056c6:	4798      	blx	r3
 80056c8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80056cc:	3301      	adds	r3, #1
 80056ce:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80056d2:	2101      	movs	r1, #1
 80056d4:	2300      	movs	r3, #0
 80056d6:	e7e4      	b.n	80056a2 <d_print_mod+0x182>
 80056d8:	4d92      	ldr	r5, [pc, #584]	; (8005924 <d_print_mod+0x404>)
 80056da:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80056de:	f105 0708 	add.w	r7, r5, #8
 80056e2:	f04f 0800 	mov.w	r8, #0
 80056e6:	e008      	b.n	80056fa <d_print_mod+0x1da>
 80056e8:	460b      	mov	r3, r1
 80056ea:	3101      	adds	r1, #1
 80056ec:	42bd      	cmp	r5, r7
 80056ee:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80056f2:	54e6      	strb	r6, [r4, r3]
 80056f4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80056f8:	d0a8      	beq.n	800564c <d_print_mod+0x12c>
 80056fa:	29ff      	cmp	r1, #255	; 0xff
 80056fc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005700:	d1f2      	bne.n	80056e8 <d_print_mod+0x1c8>
 8005702:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005706:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800570a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800570e:	4620      	mov	r0, r4
 8005710:	4798      	blx	r3
 8005712:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005716:	3301      	adds	r3, #1
 8005718:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800571c:	2101      	movs	r1, #1
 800571e:	2300      	movs	r3, #0
 8005720:	e7e4      	b.n	80056ec <d_print_mod+0x1cc>
 8005722:	4d81      	ldr	r5, [pc, #516]	; (8005928 <d_print_mod+0x408>)
 8005724:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005728:	f105 070a 	add.w	r7, r5, #10
 800572c:	f04f 0800 	mov.w	r8, #0
 8005730:	e008      	b.n	8005744 <d_print_mod+0x224>
 8005732:	460b      	mov	r3, r1
 8005734:	3101      	adds	r1, #1
 8005736:	42bd      	cmp	r5, r7
 8005738:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800573c:	54e6      	strb	r6, [r4, r3]
 800573e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8005742:	d083      	beq.n	800564c <d_print_mod+0x12c>
 8005744:	29ff      	cmp	r1, #255	; 0xff
 8005746:	f815 6b01 	ldrb.w	r6, [r5], #1
 800574a:	d1f2      	bne.n	8005732 <d_print_mod+0x212>
 800574c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005750:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005754:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005758:	4620      	mov	r0, r4
 800575a:	4798      	blx	r3
 800575c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005760:	3301      	adds	r3, #1
 8005762:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005766:	2101      	movs	r1, #1
 8005768:	2300      	movs	r3, #0
 800576a:	e7e4      	b.n	8005736 <d_print_mod+0x216>
 800576c:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
 8005770:	2b28      	cmp	r3, #40	; 0x28
 8005772:	d00b      	beq.n	800578c <d_print_mod+0x26c>
 8005774:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005778:	2bff      	cmp	r3, #255	; 0xff
 800577a:	f000 8126 	beq.w	80059ca <d_print_mod+0x4aa>
 800577e:	2220      	movs	r2, #32
 8005780:	1c59      	adds	r1, r3, #1
 8005782:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005786:	54e2      	strb	r2, [r4, r3]
 8005788:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800578c:	686a      	ldr	r2, [r5, #4]
 800578e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005792:	4d66      	ldr	r5, [pc, #408]	; (800592c <d_print_mod+0x40c>)
 8005794:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
 8005798:	4641      	mov	r1, r8
 800579a:	4620      	mov	r0, r4
 800579c:	9301      	str	r3, [sp, #4]
 800579e:	9200      	str	r2, [sp, #0]
 80057a0:	f7fd f90a 	bl	80029b8 <d_print_comp_inner>
 80057a4:	9b01      	ldr	r3, [sp, #4]
 80057a6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80057aa:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80057ae:	1cef      	adds	r7, r5, #3
 80057b0:	f04f 0800 	mov.w	r8, #0
 80057b4:	e009      	b.n	80057ca <d_print_mod+0x2aa>
 80057b6:	460b      	mov	r3, r1
 80057b8:	3101      	adds	r1, #1
 80057ba:	42bd      	cmp	r5, r7
 80057bc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80057c0:	54e6      	strb	r6, [r4, r3]
 80057c2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80057c6:	f43f af41 	beq.w	800564c <d_print_mod+0x12c>
 80057ca:	29ff      	cmp	r1, #255	; 0xff
 80057cc:	f815 6b01 	ldrb.w	r6, [r5], #1
 80057d0:	d1f1      	bne.n	80057b6 <d_print_mod+0x296>
 80057d2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80057d6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80057da:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80057de:	4620      	mov	r0, r4
 80057e0:	4798      	blx	r3
 80057e2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80057e6:	3301      	adds	r3, #1
 80057e8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80057ec:	2101      	movs	r1, #1
 80057ee:	2300      	movs	r3, #0
 80057f0:	e7e3      	b.n	80057ba <d_print_mod+0x29a>
 80057f2:	4e4f      	ldr	r6, [pc, #316]	; (8005930 <d_print_mod+0x410>)
 80057f4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80057f8:	f106 0a0a 	add.w	sl, r6, #10
 80057fc:	f04f 0900 	mov.w	r9, #0
 8005800:	e009      	b.n	8005816 <d_print_mod+0x2f6>
 8005802:	460b      	mov	r3, r1
 8005804:	3101      	adds	r1, #1
 8005806:	4556      	cmp	r6, sl
 8005808:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800580c:	54e7      	strb	r7, [r4, r3]
 800580e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8005812:	f000 80c0 	beq.w	8005996 <d_print_mod+0x476>
 8005816:	29ff      	cmp	r1, #255	; 0xff
 8005818:	f816 7b01 	ldrb.w	r7, [r6], #1
 800581c:	d1f1      	bne.n	8005802 <d_print_mod+0x2e2>
 800581e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005822:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005826:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800582a:	4620      	mov	r0, r4
 800582c:	4798      	blx	r3
 800582e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005832:	3301      	adds	r3, #1
 8005834:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005838:	2101      	movs	r1, #1
 800583a:	2300      	movs	r3, #0
 800583c:	e7e3      	b.n	8005806 <d_print_mod+0x2e6>
 800583e:	4d3d      	ldr	r5, [pc, #244]	; (8005934 <d_print_mod+0x414>)
 8005840:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005844:	f105 0709 	add.w	r7, r5, #9
 8005848:	f04f 0800 	mov.w	r8, #0
 800584c:	e009      	b.n	8005862 <d_print_mod+0x342>
 800584e:	460b      	mov	r3, r1
 8005850:	3101      	adds	r1, #1
 8005852:	42bd      	cmp	r5, r7
 8005854:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005858:	54e6      	strb	r6, [r4, r3]
 800585a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800585e:	f43f aef5 	beq.w	800564c <d_print_mod+0x12c>
 8005862:	29ff      	cmp	r1, #255	; 0xff
 8005864:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005868:	d1f1      	bne.n	800584e <d_print_mod+0x32e>
 800586a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800586e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005872:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005876:	4620      	mov	r0, r4
 8005878:	4798      	blx	r3
 800587a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800587e:	3301      	adds	r3, #1
 8005880:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005884:	2101      	movs	r1, #1
 8005886:	2300      	movs	r3, #0
 8005888:	e7e3      	b.n	8005852 <d_print_mod+0x332>
 800588a:	4d2b      	ldr	r5, [pc, #172]	; (8005938 <d_print_mod+0x418>)
 800588c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005890:	1daf      	adds	r7, r5, #6
 8005892:	f04f 0800 	mov.w	r8, #0
 8005896:	e009      	b.n	80058ac <d_print_mod+0x38c>
 8005898:	460b      	mov	r3, r1
 800589a:	3101      	adds	r1, #1
 800589c:	42bd      	cmp	r5, r7
 800589e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80058a2:	54e6      	strb	r6, [r4, r3]
 80058a4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80058a8:	f43f aed0 	beq.w	800564c <d_print_mod+0x12c>
 80058ac:	29ff      	cmp	r1, #255	; 0xff
 80058ae:	f815 6b01 	ldrb.w	r6, [r5], #1
 80058b2:	d1f1      	bne.n	8005898 <d_print_mod+0x378>
 80058b4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80058b8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80058bc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80058c0:	4620      	mov	r0, r4
 80058c2:	4798      	blx	r3
 80058c4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80058c8:	3301      	adds	r3, #1
 80058ca:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80058ce:	2101      	movs	r1, #1
 80058d0:	2300      	movs	r3, #0
 80058d2:	e7e3      	b.n	800589c <d_print_mod+0x37c>
 80058d4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80058d8:	2bff      	cmp	r3, #255	; 0xff
 80058da:	f000 80cc 	beq.w	8005a76 <d_print_mod+0x556>
 80058de:	2220      	movs	r2, #32
 80058e0:	1c59      	adds	r1, r3, #1
 80058e2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80058e6:	54e2      	strb	r2, [r4, r3]
 80058e8:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80058ec:	e6c3      	b.n	8005676 <d_print_mod+0x156>
 80058ee:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80058f2:	2bff      	cmp	r3, #255	; 0xff
 80058f4:	f000 80ad 	beq.w	8005a52 <d_print_mod+0x532>
 80058f8:	2220      	movs	r2, #32
 80058fa:	1c59      	adds	r1, r3, #1
 80058fc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005900:	54e2      	strb	r2, [r4, r3]
 8005902:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005906:	e6c5      	b.n	8005694 <d_print_mod+0x174>
 8005908:	686a      	ldr	r2, [r5, #4]
 800590a:	e692      	b.n	8005632 <d_print_mod+0x112>
 800590c:	4d0b      	ldr	r5, [pc, #44]	; (800593c <d_print_mod+0x41c>)
 800590e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005912:	f105 0709 	add.w	r7, r5, #9
 8005916:	f04f 0800 	mov.w	r8, #0
 800591a:	e01b      	b.n	8005954 <d_print_mod+0x434>
 800591c:	08017d57 	.word	0x08017d57
 8005920:	08017d6c 	.word	0x08017d6c
 8005924:	08017d6f 	.word	0x08017d6f
 8005928:	08017d7c 	.word	0x08017d7c
 800592c:	08017d88 	.word	0x08017d88
 8005930:	08017d8c 	.word	0x08017d8c
 8005934:	08017d43 	.word	0x08017d43
 8005938:	08017d50 	.word	0x08017d50
 800593c:	08017d37 	.word	0x08017d37
 8005940:	460b      	mov	r3, r1
 8005942:	3101      	adds	r1, #1
 8005944:	42af      	cmp	r7, r5
 8005946:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800594a:	54e6      	strb	r6, [r4, r3]
 800594c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8005950:	f43f ae7c 	beq.w	800564c <d_print_mod+0x12c>
 8005954:	29ff      	cmp	r1, #255	; 0xff
 8005956:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800595a:	d1f1      	bne.n	8005940 <d_print_mod+0x420>
 800595c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005960:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005964:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005968:	4620      	mov	r0, r4
 800596a:	4798      	blx	r3
 800596c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005970:	3301      	adds	r3, #1
 8005972:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005976:	2101      	movs	r1, #1
 8005978:	2300      	movs	r3, #0
 800597a:	e7e3      	b.n	8005944 <d_print_mod+0x424>
 800597c:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
 8005980:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
 8005984:	462a      	mov	r2, r5
 8005986:	9301      	str	r3, [sp, #4]
 8005988:	9500      	str	r5, [sp, #0]
 800598a:	f7fd f815 	bl	80029b8 <d_print_comp_inner>
 800598e:	9b01      	ldr	r3, [sp, #4]
 8005990:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005994:	e65a      	b.n	800564c <d_print_mod+0x12c>
 8005996:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800599a:	686a      	ldr	r2, [r5, #4]
 800599c:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
 80059a0:	4641      	mov	r1, r8
 80059a2:	4620      	mov	r0, r4
 80059a4:	9301      	str	r3, [sp, #4]
 80059a6:	9200      	str	r2, [sp, #0]
 80059a8:	f7fd f806 	bl	80029b8 <d_print_comp_inner>
 80059ac:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80059b0:	9b01      	ldr	r3, [sp, #4]
 80059b2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80059b6:	29ff      	cmp	r1, #255	; 0xff
 80059b8:	d03a      	beq.n	8005a30 <d_print_mod+0x510>
 80059ba:	1c4a      	adds	r2, r1, #1
 80059bc:	2329      	movs	r3, #41	; 0x29
 80059be:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80059c2:	5463      	strb	r3, [r4, r1]
 80059c4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80059c8:	e640      	b.n	800564c <d_print_mod+0x12c>
 80059ca:	2600      	movs	r6, #0
 80059cc:	4619      	mov	r1, r3
 80059ce:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 80059d2:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80059d6:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 80059da:	4798      	blx	r3
 80059dc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80059e0:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80059e4:	1c5a      	adds	r2, r3, #1
 80059e6:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 80059ea:	4633      	mov	r3, r6
 80059ec:	e6c7      	b.n	800577e <d_print_mod+0x25e>
 80059ee:	2500      	movs	r5, #0
 80059f0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80059f4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80059f8:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80059fc:	4620      	mov	r0, r4
 80059fe:	4798      	blx	r3
 8005a00:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005a04:	3301      	adds	r3, #1
 8005a06:	4629      	mov	r1, r5
 8005a08:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	e636      	b.n	800567e <d_print_mod+0x15e>
 8005a10:	2600      	movs	r6, #0
 8005a12:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005a16:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005a1a:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8005a1e:	4798      	blx	r3
 8005a20:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005a24:	3301      	adds	r3, #1
 8005a26:	4631      	mov	r1, r6
 8005a28:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	e5f9      	b.n	8005624 <d_print_mod+0x104>
 8005a30:	2500      	movs	r5, #0
 8005a32:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005a36:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005a3a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005a3e:	4620      	mov	r0, r4
 8005a40:	4798      	blx	r3
 8005a42:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005a46:	3301      	adds	r3, #1
 8005a48:	4629      	mov	r1, r5
 8005a4a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005a4e:	2201      	movs	r2, #1
 8005a50:	e7b4      	b.n	80059bc <d_print_mod+0x49c>
 8005a52:	2500      	movs	r5, #0
 8005a54:	4619      	mov	r1, r3
 8005a56:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005a5a:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005a5e:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8005a62:	4798      	blx	r3
 8005a64:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005a68:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8005a6c:	1c5a      	adds	r2, r3, #1
 8005a6e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005a72:	462b      	mov	r3, r5
 8005a74:	e740      	b.n	80058f8 <d_print_mod+0x3d8>
 8005a76:	2500      	movs	r5, #0
 8005a78:	4619      	mov	r1, r3
 8005a7a:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005a7e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005a82:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8005a86:	4798      	blx	r3
 8005a88:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005a8c:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8005a90:	1c5a      	adds	r2, r3, #1
 8005a92:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005a96:	462b      	mov	r3, r5
 8005a98:	e721      	b.n	80058de <d_print_mod+0x3be>
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005aa0:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005aa4:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8005aa8:	4798      	blx	r3
 8005aaa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005aae:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8005ab2:	1c5a      	adds	r2, r3, #1
 8005ab4:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005ab8:	462b      	mov	r3, r5
 8005aba:	e5d2      	b.n	8005662 <d_print_mod+0x142>

08005abc <d_print_mod_list>:
 8005abc:	2a00      	cmp	r2, #0
 8005abe:	f000 80a1 	beq.w	8005c04 <d_print_mod_list+0x148>
 8005ac2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ac6:	461e      	mov	r6, r3
 8005ac8:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 8005acc:	b089      	sub	sp, #36	; 0x24
 8005ace:	4605      	mov	r5, r0
 8005ad0:	bb43      	cbnz	r3, 8005b24 <d_print_mod_list+0x68>
 8005ad2:	460f      	mov	r7, r1
 8005ad4:	4614      	mov	r4, r2
 8005ad6:	f04f 0801 	mov.w	r8, #1
 8005ada:	e002      	b.n	8005ae2 <d_print_mod_list+0x26>
 8005adc:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8005ae0:	bb03      	cbnz	r3, 8005b24 <d_print_mod_list+0x68>
 8005ae2:	68a3      	ldr	r3, [r4, #8]
 8005ae4:	b9db      	cbnz	r3, 8005b1e <d_print_mod_list+0x62>
 8005ae6:	6862      	ldr	r2, [r4, #4]
 8005ae8:	7813      	ldrb	r3, [r2, #0]
 8005aea:	b92e      	cbnz	r6, 8005af8 <d_print_mod_list+0x3c>
 8005aec:	f1a3 011c 	sub.w	r1, r3, #28
 8005af0:	2904      	cmp	r1, #4
 8005af2:	d914      	bls.n	8005b1e <d_print_mod_list+0x62>
 8005af4:	2b4c      	cmp	r3, #76	; 0x4c
 8005af6:	d012      	beq.n	8005b1e <d_print_mod_list+0x62>
 8005af8:	68e1      	ldr	r1, [r4, #12]
 8005afa:	f8c4 8008 	str.w	r8, [r4, #8]
 8005afe:	2b29      	cmp	r3, #41	; 0x29
 8005b00:	f8d5 9110 	ldr.w	r9, [r5, #272]	; 0x110
 8005b04:	f8c5 1110 	str.w	r1, [r5, #272]	; 0x110
 8005b08:	d00f      	beq.n	8005b2a <d_print_mod_list+0x6e>
 8005b0a:	2b2a      	cmp	r3, #42	; 0x2a
 8005b0c:	d018      	beq.n	8005b40 <d_print_mod_list+0x84>
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d021      	beq.n	8005b56 <d_print_mod_list+0x9a>
 8005b12:	4639      	mov	r1, r7
 8005b14:	4628      	mov	r0, r5
 8005b16:	f7ff fd03 	bl	8005520 <d_print_mod>
 8005b1a:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 8005b1e:	6824      	ldr	r4, [r4, #0]
 8005b20:	2c00      	cmp	r4, #0
 8005b22:	d1db      	bne.n	8005adc <d_print_mod_list+0x20>
 8005b24:	b009      	add	sp, #36	; 0x24
 8005b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b2a:	6823      	ldr	r3, [r4, #0]
 8005b2c:	3208      	adds	r2, #8
 8005b2e:	4639      	mov	r1, r7
 8005b30:	4628      	mov	r0, r5
 8005b32:	f000 f9d9 	bl	8005ee8 <d_print_function_type.isra.11>
 8005b36:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 8005b3a:	b009      	add	sp, #36	; 0x24
 8005b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b40:	6823      	ldr	r3, [r4, #0]
 8005b42:	3204      	adds	r2, #4
 8005b44:	4639      	mov	r1, r7
 8005b46:	4628      	mov	r0, r5
 8005b48:	f000 f8f2 	bl	8005d30 <d_print_array_type.isra.10>
 8005b4c:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 8005b50:	b009      	add	sp, #36	; 0x24
 8005b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b56:	2600      	movs	r6, #0
 8005b58:	f8d5 8114 	ldr.w	r8, [r5, #276]	; 0x114
 8005b5c:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
 8005b60:	6852      	ldr	r2, [r2, #4]
 8005b62:	4639      	mov	r1, r7
 8005b64:	4628      	mov	r0, r5
 8005b66:	f7ff fccb 	bl	8005500 <d_print_comp>
 8005b6a:	f017 0a04 	ands.w	sl, r7, #4
 8005b6e:	f8c5 8114 	str.w	r8, [r5, #276]	; 0x114
 8005b72:	d023      	beq.n	8005bbc <d_print_mod_list+0x100>
 8005b74:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8005b78:	29ff      	cmp	r1, #255	; 0xff
 8005b7a:	f000 80c1 	beq.w	8005d00 <d_print_mod_list+0x244>
 8005b7e:	1c4a      	adds	r2, r1, #1
 8005b80:	232e      	movs	r3, #46	; 0x2e
 8005b82:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
 8005b86:	546b      	strb	r3, [r5, r1]
 8005b88:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
 8005b8c:	6863      	ldr	r3, [r4, #4]
 8005b8e:	689c      	ldr	r4, [r3, #8]
 8005b90:	7823      	ldrb	r3, [r4, #0]
 8005b92:	2b46      	cmp	r3, #70	; 0x46
 8005b94:	d037      	beq.n	8005c06 <d_print_mod_list+0x14a>
 8005b96:	f1a3 021c 	sub.w	r2, r3, #28
 8005b9a:	2a04      	cmp	r2, #4
 8005b9c:	d90b      	bls.n	8005bb6 <d_print_mod_list+0xfa>
 8005b9e:	2b4c      	cmp	r3, #76	; 0x4c
 8005ba0:	d009      	beq.n	8005bb6 <d_print_mod_list+0xfa>
 8005ba2:	4622      	mov	r2, r4
 8005ba4:	4639      	mov	r1, r7
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	f7ff fcaa 	bl	8005500 <d_print_comp>
 8005bac:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 8005bb0:	b009      	add	sp, #36	; 0x24
 8005bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bb6:	6864      	ldr	r4, [r4, #4]
 8005bb8:	7823      	ldrb	r3, [r4, #0]
 8005bba:	e7ec      	b.n	8005b96 <d_print_mod_list+0xda>
 8005bbc:	4e58      	ldr	r6, [pc, #352]	; (8005d20 <d_print_mod_list+0x264>)
 8005bbe:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8005bc2:	f106 0b02 	add.w	fp, r6, #2
 8005bc6:	e009      	b.n	8005bdc <d_print_mod_list+0x120>
 8005bc8:	460b      	mov	r3, r1
 8005bca:	3101      	adds	r1, #1
 8005bcc:	455e      	cmp	r6, fp
 8005bce:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8005bd2:	f805 8003 	strb.w	r8, [r5, r3]
 8005bd6:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 8005bda:	d0d7      	beq.n	8005b8c <d_print_mod_list+0xd0>
 8005bdc:	29ff      	cmp	r1, #255	; 0xff
 8005bde:	f816 8b01 	ldrb.w	r8, [r6], #1
 8005be2:	d1f1      	bne.n	8005bc8 <d_print_mod_list+0x10c>
 8005be4:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8005be8:	f885 a0ff 	strb.w	sl, [r5, #255]	; 0xff
 8005bec:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	4798      	blx	r3
 8005bf4:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8005bfe:	2101      	movs	r1, #1
 8005c00:	2300      	movs	r3, #0
 8005c02:	e7e3      	b.n	8005bcc <d_print_mod_list+0x110>
 8005c04:	4770      	bx	lr
 8005c06:	4e47      	ldr	r6, [pc, #284]	; (8005d24 <d_print_mod_list+0x268>)
 8005c08:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8005c0c:	f106 0a0d 	add.w	sl, r6, #13
 8005c10:	f04f 0b00 	mov.w	fp, #0
 8005c14:	e009      	b.n	8005c2a <d_print_mod_list+0x16e>
 8005c16:	460b      	mov	r3, r1
 8005c18:	3101      	adds	r1, #1
 8005c1a:	45b2      	cmp	sl, r6
 8005c1c:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8005c20:	f805 8003 	strb.w	r8, [r5, r3]
 8005c24:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 8005c28:	d013      	beq.n	8005c52 <d_print_mod_list+0x196>
 8005c2a:	29ff      	cmp	r1, #255	; 0xff
 8005c2c:	f816 8b01 	ldrb.w	r8, [r6], #1
 8005c30:	d1f1      	bne.n	8005c16 <d_print_mod_list+0x15a>
 8005c32:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8005c36:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 8005c3a:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8005c3e:	4628      	mov	r0, r5
 8005c40:	4798      	blx	r3
 8005c42:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8005c46:	3301      	adds	r3, #1
 8005c48:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8005c4c:	2101      	movs	r1, #1
 8005c4e:	2300      	movs	r3, #0
 8005c50:	e7e3      	b.n	8005c1a <d_print_mod_list+0x15e>
 8005c52:	68a2      	ldr	r2, [r4, #8]
 8005c54:	4934      	ldr	r1, [pc, #208]	; (8005d28 <d_print_mod_list+0x26c>)
 8005c56:	3201      	adds	r2, #1
 8005c58:	a801      	add	r0, sp, #4
 8005c5a:	f00c fd13 	bl	8012684 <sprintf>
 8005c5e:	a801      	add	r0, sp, #4
 8005c60:	f000 fe68 	bl	8006934 <strlen>
 8005c64:	b328      	cbz	r0, 8005cb2 <d_print_mod_list+0x1f6>
 8005c66:	ae01      	add	r6, sp, #4
 8005c68:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8005c6c:	eb06 0a00 	add.w	sl, r6, r0
 8005c70:	f04f 0b00 	mov.w	fp, #0
 8005c74:	e009      	b.n	8005c8a <d_print_mod_list+0x1ce>
 8005c76:	460b      	mov	r3, r1
 8005c78:	3101      	adds	r1, #1
 8005c7a:	45b2      	cmp	sl, r6
 8005c7c:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8005c80:	f805 8003 	strb.w	r8, [r5, r3]
 8005c84:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 8005c88:	d015      	beq.n	8005cb6 <d_print_mod_list+0x1fa>
 8005c8a:	29ff      	cmp	r1, #255	; 0xff
 8005c8c:	f816 8b01 	ldrb.w	r8, [r6], #1
 8005c90:	d1f1      	bne.n	8005c76 <d_print_mod_list+0x1ba>
 8005c92:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8005c96:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 8005c9a:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8005c9e:	4628      	mov	r0, r5
 8005ca0:	4798      	blx	r3
 8005ca2:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8005cac:	2101      	movs	r1, #1
 8005cae:	2300      	movs	r3, #0
 8005cb0:	e7e3      	b.n	8005c7a <d_print_mod_list+0x1be>
 8005cb2:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8005cb6:	4e1d      	ldr	r6, [pc, #116]	; (8005d2c <d_print_mod_list+0x270>)
 8005cb8:	f04f 0b00 	mov.w	fp, #0
 8005cbc:	f106 0a03 	add.w	sl, r6, #3
 8005cc0:	e00a      	b.n	8005cd8 <d_print_mod_list+0x21c>
 8005cc2:	460b      	mov	r3, r1
 8005cc4:	3101      	adds	r1, #1
 8005cc6:	45b2      	cmp	sl, r6
 8005cc8:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8005ccc:	f805 8003 	strb.w	r8, [r5, r3]
 8005cd0:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 8005cd4:	f43f af6f 	beq.w	8005bb6 <d_print_mod_list+0xfa>
 8005cd8:	29ff      	cmp	r1, #255	; 0xff
 8005cda:	f816 8b01 	ldrb.w	r8, [r6], #1
 8005cde:	d1f0      	bne.n	8005cc2 <d_print_mod_list+0x206>
 8005ce0:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8005ce4:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 8005ce8:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8005cec:	4628      	mov	r0, r5
 8005cee:	4798      	blx	r3
 8005cf0:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8005cfa:	2101      	movs	r1, #1
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	e7e2      	b.n	8005cc6 <d_print_mod_list+0x20a>
 8005d00:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8005d04:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8005d08:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	4798      	blx	r3
 8005d10:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8005d14:	3301      	adds	r3, #1
 8005d16:	4631      	mov	r1, r6
 8005d18:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	e72f      	b.n	8005b80 <d_print_mod_list+0xc4>
 8005d20:	08017ab8 	.word	0x08017ab8
 8005d24:	08017abc 	.word	0x08017abc
 8005d28:	08017a68 	.word	0x08017a68
 8005d2c:	08017acc 	.word	0x08017acc

08005d30 <d_print_array_type.isra.10>:
 8005d30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d34:	4604      	mov	r4, r0
 8005d36:	460f      	mov	r7, r1
 8005d38:	4690      	mov	r8, r2
 8005d3a:	b163      	cbz	r3, 8005d56 <d_print_array_type.isra.10+0x26>
 8005d3c:	461e      	mov	r6, r3
 8005d3e:	461a      	mov	r2, r3
 8005d40:	6893      	ldr	r3, [r2, #8]
 8005d42:	b393      	cbz	r3, 8005daa <d_print_array_type.isra.10+0x7a>
 8005d44:	6812      	ldr	r2, [r2, #0]
 8005d46:	2a00      	cmp	r2, #0
 8005d48:	d1fa      	bne.n	8005d40 <d_print_array_type.isra.10+0x10>
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	4639      	mov	r1, r7
 8005d4e:	4632      	mov	r2, r6
 8005d50:	4620      	mov	r0, r4
 8005d52:	f7ff feb3 	bl	8005abc <d_print_mod_list>
 8005d56:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005d5a:	29ff      	cmp	r1, #255	; 0xff
 8005d5c:	f000 808d 	beq.w	8005e7a <d_print_array_type.isra.10+0x14a>
 8005d60:	1c4b      	adds	r3, r1, #1
 8005d62:	2220      	movs	r2, #32
 8005d64:	2bff      	cmp	r3, #255	; 0xff
 8005d66:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005d6a:	5462      	strb	r2, [r4, r1]
 8005d6c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005d70:	d068      	beq.n	8005e44 <d_print_array_type.isra.10+0x114>
 8005d72:	225b      	movs	r2, #91	; 0x5b
 8005d74:	1c59      	adds	r1, r3, #1
 8005d76:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005d7a:	54e2      	strb	r2, [r4, r3]
 8005d7c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005d80:	f8d8 2000 	ldr.w	r2, [r8]
 8005d84:	b12a      	cbz	r2, 8005d92 <d_print_array_type.isra.10+0x62>
 8005d86:	4639      	mov	r1, r7
 8005d88:	4620      	mov	r0, r4
 8005d8a:	f7ff fbb9 	bl	8005500 <d_print_comp>
 8005d8e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005d92:	29ff      	cmp	r1, #255	; 0xff
 8005d94:	f000 8082 	beq.w	8005e9c <d_print_array_type.isra.10+0x16c>
 8005d98:	1c4a      	adds	r2, r1, #1
 8005d9a:	235d      	movs	r3, #93	; 0x5d
 8005d9c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005da0:	5463      	strb	r3, [r4, r1]
 8005da2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005da6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005daa:	6852      	ldr	r2, [r2, #4]
 8005dac:	7812      	ldrb	r2, [r2, #0]
 8005dae:	2a2a      	cmp	r2, #42	; 0x2a
 8005db0:	d03f      	beq.n	8005e32 <d_print_array_type.isra.10+0x102>
 8005db2:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8005ee4 <d_print_array_type.isra.10+0x1b4>
 8005db6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005dba:	461d      	mov	r5, r3
 8005dbc:	f109 0b02 	add.w	fp, r9, #2
 8005dc0:	e00a      	b.n	8005dd8 <d_print_array_type.isra.10+0xa8>
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	45cb      	cmp	fp, r9
 8005dc6:	f101 0101 	add.w	r1, r1, #1
 8005dca:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005dce:	f804 a003 	strb.w	sl, [r4, r3]
 8005dd2:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8005dd6:	d01a      	beq.n	8005e0e <d_print_array_type.isra.10+0xde>
 8005dd8:	29ff      	cmp	r1, #255	; 0xff
 8005dda:	f819 ab01 	ldrb.w	sl, [r9], #1
 8005dde:	d1f0      	bne.n	8005dc2 <d_print_array_type.isra.10+0x92>
 8005de0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005de4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005de8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005dec:	4620      	mov	r0, r4
 8005dee:	4798      	blx	r3
 8005df0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005df4:	3301      	adds	r3, #1
 8005df6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	2101      	movs	r1, #1
 8005dfe:	45cb      	cmp	fp, r9
 8005e00:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005e04:	f804 a003 	strb.w	sl, [r4, r3]
 8005e08:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8005e0c:	d1e4      	bne.n	8005dd8 <d_print_array_type.isra.10+0xa8>
 8005e0e:	2300      	movs	r3, #0
 8005e10:	4632      	mov	r2, r6
 8005e12:	4639      	mov	r1, r7
 8005e14:	4620      	mov	r0, r4
 8005e16:	f7ff fe51 	bl	8005abc <d_print_mod_list>
 8005e1a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005e1e:	2bff      	cmp	r3, #255	; 0xff
 8005e20:	d04d      	beq.n	8005ebe <d_print_array_type.isra.10+0x18e>
 8005e22:	1c59      	adds	r1, r3, #1
 8005e24:	2229      	movs	r2, #41	; 0x29
 8005e26:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005e2a:	54e2      	strb	r2, [r4, r3]
 8005e2c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005e30:	e793      	b.n	8005d5a <d_print_array_type.isra.10+0x2a>
 8005e32:	4632      	mov	r2, r6
 8005e34:	4639      	mov	r1, r7
 8005e36:	4620      	mov	r0, r4
 8005e38:	f7ff fe40 	bl	8005abc <d_print_mod_list>
 8005e3c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005e40:	2bff      	cmp	r3, #255	; 0xff
 8005e42:	d196      	bne.n	8005d72 <d_print_array_type.isra.10+0x42>
 8005e44:	2200      	movs	r2, #0
 8005e46:	4619      	mov	r1, r3
 8005e48:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 8005e4c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005e50:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005e54:	4620      	mov	r0, r4
 8005e56:	4798      	blx	r3
 8005e58:	235b      	movs	r3, #91	; 0x5b
 8005e5a:	7023      	strb	r3, [r4, #0]
 8005e5c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005e60:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005e64:	f8d8 2000 	ldr.w	r2, [r8]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	2101      	movs	r1, #1
 8005e6c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005e70:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005e74:	2a00      	cmp	r2, #0
 8005e76:	d186      	bne.n	8005d86 <d_print_array_type.isra.10+0x56>
 8005e78:	e78e      	b.n	8005d98 <d_print_array_type.isra.10+0x68>
 8005e7a:	2500      	movs	r5, #0
 8005e7c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005e80:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005e84:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005e88:	4620      	mov	r0, r4
 8005e8a:	4798      	blx	r3
 8005e8c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005e90:	3301      	adds	r3, #1
 8005e92:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005e96:	4629      	mov	r1, r5
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e762      	b.n	8005d62 <d_print_array_type.isra.10+0x32>
 8005e9c:	2500      	movs	r5, #0
 8005e9e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005ea2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005ea6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005eaa:	4620      	mov	r0, r4
 8005eac:	4798      	blx	r3
 8005eae:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	4629      	mov	r1, r5
 8005eb6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005eba:	2201      	movs	r2, #1
 8005ebc:	e76d      	b.n	8005d9a <d_print_array_type.isra.10+0x6a>
 8005ebe:	2500      	movs	r5, #0
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005ec6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005eca:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005ece:	4620      	mov	r0, r4
 8005ed0:	4798      	blx	r3
 8005ed2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005ed6:	1c5a      	adds	r2, r3, #1
 8005ed8:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005edc:	462b      	mov	r3, r5
 8005ede:	2101      	movs	r1, #1
 8005ee0:	e7a0      	b.n	8005e24 <d_print_array_type.isra.10+0xf4>
 8005ee2:	bf00      	nop
 8005ee4:	08017cb0 	.word	0x08017cb0

08005ee8 <d_print_function_type.isra.11>:
 8005ee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005eec:	4604      	mov	r4, r0
 8005eee:	b083      	sub	sp, #12
 8005ef0:	460e      	mov	r6, r1
 8005ef2:	4617      	mov	r7, r2
 8005ef4:	461d      	mov	r5, r3
 8005ef6:	b34b      	cbz	r3, 8005f4c <d_print_function_type.isra.11+0x64>
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	bb3b      	cbnz	r3, 8005f4c <d_print_function_type.isra.11+0x64>
 8005efc:	462a      	mov	r2, r5
 8005efe:	2001      	movs	r0, #1
 8005f00:	f8df e1c8 	ldr.w	lr, [pc, #456]	; 80060cc <d_print_function_type.isra.11+0x1e4>
 8005f04:	e006      	b.n	8005f14 <d_print_function_type.isra.11+0x2c>
 8005f06:	f411 6f60 	tst.w	r1, #3584	; 0xe00
 8005f0a:	d15a      	bne.n	8005fc2 <d_print_function_type.isra.11+0xda>
 8005f0c:	6812      	ldr	r2, [r2, #0]
 8005f0e:	b1ea      	cbz	r2, 8005f4c <d_print_function_type.isra.11+0x64>
 8005f10:	6893      	ldr	r3, [r2, #8]
 8005f12:	b9db      	cbnz	r3, 8005f4c <d_print_function_type.isra.11+0x64>
 8005f14:	6853      	ldr	r3, [r2, #4]
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	3b19      	subs	r3, #25
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	2b12      	cmp	r3, #18
 8005f1e:	fa00 f103 	lsl.w	r1, r0, r3
 8005f22:	d8f3      	bhi.n	8005f0c <d_print_function_type.isra.11+0x24>
 8005f24:	ea11 0f0e 	tst.w	r1, lr
 8005f28:	d0ed      	beq.n	8005f06 <d_print_function_type.isra.11+0x1e>
 8005f2a:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8005f2e:	2b20      	cmp	r3, #32
 8005f30:	d04d      	beq.n	8005fce <d_print_function_type.isra.11+0xe6>
 8005f32:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005f36:	2bff      	cmp	r3, #255	; 0xff
 8005f38:	f000 80b4 	beq.w	80060a4 <d_print_function_type.isra.11+0x1bc>
 8005f3c:	1c59      	adds	r1, r3, #1
 8005f3e:	2220      	movs	r2, #32
 8005f40:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005f44:	54e2      	strb	r2, [r4, r3]
 8005f46:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005f4a:	e042      	b.n	8005fd2 <d_print_function_type.isra.11+0xea>
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
 8005f52:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8005f56:	4631      	mov	r1, r6
 8005f58:	462a      	mov	r2, r5
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	f7ff fdae 	bl	8005abc <d_print_mod_list>
 8005f60:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005f64:	29ff      	cmp	r1, #255	; 0xff
 8005f66:	d056      	beq.n	8006016 <d_print_function_type.isra.11+0x12e>
 8005f68:	1c4b      	adds	r3, r1, #1
 8005f6a:	2228      	movs	r2, #40	; 0x28
 8005f6c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005f70:	5462      	strb	r2, [r4, r1]
 8005f72:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005f76:	6838      	ldr	r0, [r7, #0]
 8005f78:	b178      	cbz	r0, 8005f9a <d_print_function_type.isra.11+0xb2>
 8005f7a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005f7e:	9000      	str	r0, [sp, #0]
 8005f80:	4602      	mov	r2, r0
 8005f82:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
 8005f86:	4631      	mov	r1, r6
 8005f88:	4620      	mov	r0, r4
 8005f8a:	9301      	str	r3, [sp, #4]
 8005f8c:	f7fc fd14 	bl	80029b8 <d_print_comp_inner>
 8005f90:	9a01      	ldr	r2, [sp, #4]
 8005f92:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005f96:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 8005f9a:	2bff      	cmp	r3, #255	; 0xff
 8005f9c:	d04d      	beq.n	800603a <d_print_function_type.isra.11+0x152>
 8005f9e:	1c5a      	adds	r2, r3, #1
 8005fa0:	2029      	movs	r0, #41	; 0x29
 8005fa2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005fa6:	4631      	mov	r1, r6
 8005fa8:	54e0      	strb	r0, [r4, r3]
 8005faa:	462a      	mov	r2, r5
 8005fac:	f884 0104 	strb.w	r0, [r4, #260]	; 0x104
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	f7ff fd82 	bl	8005abc <d_print_mod_list>
 8005fb8:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
 8005fbc:	b003      	add	sp, #12
 8005fbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005fc2:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8005fc6:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8005fca:	2a28      	cmp	r2, #40	; 0x28
 8005fcc:	d1af      	bne.n	8005f2e <d_print_function_type.isra.11+0x46>
 8005fce:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005fd2:	29ff      	cmp	r1, #255	; 0xff
 8005fd4:	d054      	beq.n	8006080 <d_print_function_type.isra.11+0x198>
 8005fd6:	1c4a      	adds	r2, r1, #1
 8005fd8:	2328      	movs	r3, #40	; 0x28
 8005fda:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005fde:	5463      	strb	r3, [r4, r1]
 8005fe0:	f04f 0900 	mov.w	r9, #0
 8005fe4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005fe8:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
 8005fec:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 8005ff0:	464b      	mov	r3, r9
 8005ff2:	462a      	mov	r2, r5
 8005ff4:	4631      	mov	r1, r6
 8005ff6:	4620      	mov	r0, r4
 8005ff8:	f7ff fd60 	bl	8005abc <d_print_mod_list>
 8005ffc:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8006000:	2bff      	cmp	r3, #255	; 0xff
 8006002:	d02c      	beq.n	800605e <d_print_function_type.isra.11+0x176>
 8006004:	1c59      	adds	r1, r3, #1
 8006006:	2229      	movs	r2, #41	; 0x29
 8006008:	29ff      	cmp	r1, #255	; 0xff
 800600a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800600e:	54e2      	strb	r2, [r4, r3]
 8006010:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8006014:	d1a8      	bne.n	8005f68 <d_print_function_type.isra.11+0x80>
 8006016:	f04f 0900 	mov.w	r9, #0
 800601a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800601e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8006022:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006026:	4620      	mov	r0, r4
 8006028:	4798      	blx	r3
 800602a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800602e:	3301      	adds	r3, #1
 8006030:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006034:	4649      	mov	r1, r9
 8006036:	2301      	movs	r3, #1
 8006038:	e797      	b.n	8005f6a <d_print_function_type.isra.11+0x82>
 800603a:	2700      	movs	r7, #0
 800603c:	4619      	mov	r1, r3
 800603e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006042:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006046:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 800604a:	4620      	mov	r0, r4
 800604c:	4798      	blx	r3
 800604e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006052:	1c5a      	adds	r2, r3, #1
 8006054:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8006058:	463b      	mov	r3, r7
 800605a:	2201      	movs	r2, #1
 800605c:	e7a0      	b.n	8005fa0 <d_print_function_type.isra.11+0xb8>
 800605e:	4619      	mov	r1, r3
 8006060:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006064:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006068:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800606c:	4620      	mov	r0, r4
 800606e:	4798      	blx	r3
 8006070:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006074:	1c5a      	adds	r2, r3, #1
 8006076:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 800607a:	464b      	mov	r3, r9
 800607c:	2101      	movs	r1, #1
 800607e:	e7c2      	b.n	8006006 <d_print_function_type.isra.11+0x11e>
 8006080:	f04f 0800 	mov.w	r8, #0
 8006084:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006088:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800608c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006090:	4620      	mov	r0, r4
 8006092:	4798      	blx	r3
 8006094:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006098:	3301      	adds	r3, #1
 800609a:	4641      	mov	r1, r8
 800609c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80060a0:	2201      	movs	r2, #1
 80060a2:	e799      	b.n	8005fd8 <d_print_function_type.isra.11+0xf0>
 80060a4:	f04f 0800 	mov.w	r8, #0
 80060a8:	4619      	mov	r1, r3
 80060aa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80060ae:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80060b2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80060b6:	4620      	mov	r0, r4
 80060b8:	4798      	blx	r3
 80060ba:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80060be:	1c5a      	adds	r2, r3, #1
 80060c0:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 80060c4:	4643      	mov	r3, r8
 80060c6:	2101      	movs	r1, #1
 80060c8:	e739      	b.n	8005f3e <d_print_function_type.isra.11+0x56>
 80060ca:	bf00      	nop
 80060cc:	00043107 	.word	0x00043107

080060d0 <d_print_expr_op>:
 80060d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060d4:	7815      	ldrb	r5, [r2, #0]
 80060d6:	2d31      	cmp	r5, #49	; 0x31
 80060d8:	b082      	sub	sp, #8
 80060da:	4613      	mov	r3, r2
 80060dc:	4604      	mov	r4, r0
 80060de:	d00d      	beq.n	80060fc <d_print_expr_op+0x2c>
 80060e0:	f8d0 5128 	ldr.w	r5, [r0, #296]	; 0x128
 80060e4:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
 80060e8:	e88d 0028 	stmia.w	sp, {r3, r5}
 80060ec:	f7fc fc64 	bl	80029b8 <d_print_comp_inner>
 80060f0:	9b01      	ldr	r3, [sp, #4]
 80060f2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80060f6:	b002      	add	sp, #8
 80060f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060fc:	6853      	ldr	r3, [r2, #4]
 80060fe:	689f      	ldr	r7, [r3, #8]
 8006100:	685d      	ldr	r5, [r3, #4]
 8006102:	2f00      	cmp	r7, #0
 8006104:	d0f7      	beq.n	80060f6 <d_print_expr_op+0x26>
 8006106:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800610a:	442f      	add	r7, r5
 800610c:	f04f 0800 	mov.w	r8, #0
 8006110:	e008      	b.n	8006124 <d_print_expr_op+0x54>
 8006112:	460b      	mov	r3, r1
 8006114:	3101      	adds	r1, #1
 8006116:	42bd      	cmp	r5, r7
 8006118:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800611c:	54e6      	strb	r6, [r4, r3]
 800611e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8006122:	d0e8      	beq.n	80060f6 <d_print_expr_op+0x26>
 8006124:	29ff      	cmp	r1, #255	; 0xff
 8006126:	f815 6b01 	ldrb.w	r6, [r5], #1
 800612a:	d1f2      	bne.n	8006112 <d_print_expr_op+0x42>
 800612c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006130:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006134:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006138:	4620      	mov	r0, r4
 800613a:	4798      	blx	r3
 800613c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006140:	3301      	adds	r3, #1
 8006142:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006146:	2101      	movs	r1, #1
 8006148:	2300      	movs	r3, #0
 800614a:	e7e4      	b.n	8006116 <d_print_expr_op+0x46>

0800614c <d_print_subexpr>:
 800614c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800614e:	7813      	ldrb	r3, [r2, #0]
 8006150:	2b01      	cmp	r3, #1
 8006152:	b083      	sub	sp, #12
 8006154:	4615      	mov	r5, r2
 8006156:	460e      	mov	r6, r1
 8006158:	4604      	mov	r4, r0
 800615a:	d929      	bls.n	80061b0 <d_print_subexpr+0x64>
 800615c:	2b30      	cmp	r3, #48	; 0x30
 800615e:	d027      	beq.n	80061b0 <d_print_subexpr+0x64>
 8006160:	2b06      	cmp	r3, #6
 8006162:	d025      	beq.n	80061b0 <d_print_subexpr+0x64>
 8006164:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8006168:	29ff      	cmp	r1, #255	; 0xff
 800616a:	d031      	beq.n	80061d0 <d_print_subexpr+0x84>
 800616c:	1c4a      	adds	r2, r1, #1
 800616e:	2328      	movs	r3, #40	; 0x28
 8006170:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8006174:	5463      	strb	r3, [r4, r1]
 8006176:	462a      	mov	r2, r5
 8006178:	4631      	mov	r1, r6
 800617a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800617e:	4620      	mov	r0, r4
 8006180:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8006184:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
 8006188:	9301      	str	r3, [sp, #4]
 800618a:	9500      	str	r5, [sp, #0]
 800618c:	f7fc fc14 	bl	80029b8 <d_print_comp_inner>
 8006190:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006194:	9b01      	ldr	r3, [sp, #4]
 8006196:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800619a:	29ff      	cmp	r1, #255	; 0xff
 800619c:	d028      	beq.n	80061f0 <d_print_subexpr+0xa4>
 800619e:	1c4a      	adds	r2, r1, #1
 80061a0:	2329      	movs	r3, #41	; 0x29
 80061a2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80061a6:	5463      	strb	r3, [r4, r1]
 80061a8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80061ac:	b003      	add	sp, #12
 80061ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061b0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80061b4:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
 80061b8:	4631      	mov	r1, r6
 80061ba:	462a      	mov	r2, r5
 80061bc:	4620      	mov	r0, r4
 80061be:	9301      	str	r3, [sp, #4]
 80061c0:	9500      	str	r5, [sp, #0]
 80061c2:	f7fc fbf9 	bl	80029b8 <d_print_comp_inner>
 80061c6:	9b01      	ldr	r3, [sp, #4]
 80061c8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80061cc:	b003      	add	sp, #12
 80061ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061d0:	2700      	movs	r7, #0
 80061d2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80061d6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80061da:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 80061de:	4798      	blx	r3
 80061e0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80061e4:	3301      	adds	r3, #1
 80061e6:	4639      	mov	r1, r7
 80061e8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80061ec:	2201      	movs	r2, #1
 80061ee:	e7be      	b.n	800616e <d_print_subexpr+0x22>
 80061f0:	2500      	movs	r5, #0
 80061f2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80061f6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80061fa:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80061fe:	4620      	mov	r0, r4
 8006200:	4798      	blx	r3
 8006202:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006206:	3301      	adds	r3, #1
 8006208:	4629      	mov	r1, r5
 800620a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800620e:	2201      	movs	r2, #1
 8006210:	e7c6      	b.n	80061a0 <d_print_subexpr+0x54>
 8006212:	bf00      	nop

08006214 <d_maybe_print_fold_expression.isra.15>:
 8006214:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006218:	6852      	ldr	r2, [r2, #4]
 800621a:	6812      	ldr	r2, [r2, #0]
 800621c:	7815      	ldrb	r5, [r2, #0]
 800621e:	2d66      	cmp	r5, #102	; 0x66
 8006220:	d002      	beq.n	8006228 <d_maybe_print_fold_expression.isra.15+0x14>
 8006222:	2000      	movs	r0, #0
 8006224:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
 800622e:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8006232:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8006236:	f899 3000 	ldrb.w	r3, [r9]
 800623a:	2b3b      	cmp	r3, #59	; 0x3b
 800623c:	f04f 33ff 	mov.w	r3, #4294967295
 8006240:	bf04      	itt	eq
 8006242:	f8d9 5008 	ldreq.w	r5, [r9, #8]
 8006246:	f8d9 9004 	ldreq.w	r9, [r9, #4]
 800624a:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
 800624e:	7853      	ldrb	r3, [r2, #1]
 8006250:	f1a3 034c 	sub.w	r3, r3, #76	; 0x4c
 8006254:	bf18      	it	ne
 8006256:	2500      	movne	r5, #0
 8006258:	460e      	mov	r6, r1
 800625a:	4604      	mov	r4, r0
 800625c:	2b26      	cmp	r3, #38	; 0x26
 800625e:	d82b      	bhi.n	80062b8 <d_maybe_print_fold_expression.isra.15+0xa4>
 8006260:	e8df f003 	tbb	[pc, r3]
 8006264:	2a2a2a90 	.word	0x2a2a2a90
 8006268:	2a902a2a 	.word	0x2a902a2a
 800626c:	2a2a2a2a 	.word	0x2a2a2a2a
 8006270:	2a2a2a2a 	.word	0x2a2a2a2a
 8006274:	2a2a2a2a 	.word	0x2a2a2a2a
 8006278:	2a2a2a2a 	.word	0x2a2a2a2a
 800627c:	2a2a2a2a 	.word	0x2a2a2a2a
 8006280:	2a2a2a2a 	.word	0x2a2a2a2a
 8006284:	2a2a2a6a 	.word	0x2a2a2a6a
 8006288:	2a2a      	.short	0x2a2a
 800628a:	2f          	.byte	0x2f
 800628b:	00          	.byte	0x00
 800628c:	4642      	mov	r2, r8
 800628e:	4631      	mov	r1, r6
 8006290:	4620      	mov	r0, r4
 8006292:	f7ff ff1d 	bl	80060d0 <d_print_expr_op>
 8006296:	464a      	mov	r2, r9
 8006298:	4631      	mov	r1, r6
 800629a:	4620      	mov	r0, r4
 800629c:	f7ff ff56 	bl	800614c <d_print_subexpr>
 80062a0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80062a4:	29ff      	cmp	r1, #255	; 0xff
 80062a6:	f000 80b2 	beq.w	800640e <d_maybe_print_fold_expression.isra.15+0x1fa>
 80062aa:	1c4a      	adds	r2, r1, #1
 80062ac:	2329      	movs	r3, #41	; 0x29
 80062ae:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80062b2:	5463      	strb	r3, [r4, r1]
 80062b4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80062b8:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
 80062bc:	2001      	movs	r0, #1
 80062be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062c2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80062c6:	29ff      	cmp	r1, #255	; 0xff
 80062c8:	f000 80c5 	beq.w	8006456 <d_maybe_print_fold_expression.isra.15+0x242>
 80062cc:	1c4a      	adds	r2, r1, #1
 80062ce:	2328      	movs	r3, #40	; 0x28
 80062d0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80062d4:	4620      	mov	r0, r4
 80062d6:	5463      	strb	r3, [r4, r1]
 80062d8:	464a      	mov	r2, r9
 80062da:	4631      	mov	r1, r6
 80062dc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80062e0:	4d65      	ldr	r5, [pc, #404]	; (8006478 <d_maybe_print_fold_expression.isra.15+0x264>)
 80062e2:	f7ff ff33 	bl	800614c <d_print_subexpr>
 80062e6:	4642      	mov	r2, r8
 80062e8:	4631      	mov	r1, r6
 80062ea:	4620      	mov	r0, r4
 80062ec:	f7ff fef0 	bl	80060d0 <d_print_expr_op>
 80062f0:	f105 0904 	add.w	r9, r5, #4
 80062f4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80062f8:	f04f 0800 	mov.w	r8, #0
 80062fc:	e008      	b.n	8006310 <d_maybe_print_fold_expression.isra.15+0xfc>
 80062fe:	460b      	mov	r3, r1
 8006300:	3101      	adds	r1, #1
 8006302:	45a9      	cmp	r9, r5
 8006304:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006308:	54e6      	strb	r6, [r4, r3]
 800630a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800630e:	d0d3      	beq.n	80062b8 <d_maybe_print_fold_expression.isra.15+0xa4>
 8006310:	29ff      	cmp	r1, #255	; 0xff
 8006312:	f815 6b01 	ldrb.w	r6, [r5], #1
 8006316:	d1f2      	bne.n	80062fe <d_maybe_print_fold_expression.isra.15+0xea>
 8006318:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800631c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006320:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006324:	4620      	mov	r0, r4
 8006326:	4798      	blx	r3
 8006328:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800632c:	3301      	adds	r3, #1
 800632e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006332:	2101      	movs	r1, #1
 8006334:	2300      	movs	r3, #0
 8006336:	e7e4      	b.n	8006302 <d_maybe_print_fold_expression.isra.15+0xee>
 8006338:	4d50      	ldr	r5, [pc, #320]	; (800647c <d_maybe_print_fold_expression.isra.15+0x268>)
 800633a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800633e:	f105 0b04 	add.w	fp, r5, #4
 8006342:	e009      	b.n	8006358 <d_maybe_print_fold_expression.isra.15+0x144>
 8006344:	460b      	mov	r3, r1
 8006346:	3101      	adds	r1, #1
 8006348:	455d      	cmp	r5, fp
 800634a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800634e:	f804 a003 	strb.w	sl, [r4, r3]
 8006352:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8006356:	d099      	beq.n	800628c <d_maybe_print_fold_expression.isra.15+0x78>
 8006358:	29ff      	cmp	r1, #255	; 0xff
 800635a:	f815 ab01 	ldrb.w	sl, [r5], #1
 800635e:	d1f1      	bne.n	8006344 <d_maybe_print_fold_expression.isra.15+0x130>
 8006360:	f04f 0300 	mov.w	r3, #0
 8006364:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 8006368:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800636c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006370:	4620      	mov	r0, r4
 8006372:	4798      	blx	r3
 8006374:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006378:	3301      	adds	r3, #1
 800637a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800637e:	2101      	movs	r1, #1
 8006380:	2300      	movs	r3, #0
 8006382:	e7e1      	b.n	8006348 <d_maybe_print_fold_expression.isra.15+0x134>
 8006384:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8006388:	2bff      	cmp	r3, #255	; 0xff
 800638a:	d051      	beq.n	8006430 <d_maybe_print_fold_expression.isra.15+0x21c>
 800638c:	1c59      	adds	r1, r3, #1
 800638e:	f04f 0e28 	mov.w	lr, #40	; 0x28
 8006392:	464a      	mov	r2, r9
 8006394:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006398:	4620      	mov	r0, r4
 800639a:	f804 e003 	strb.w	lr, [r4, r3]
 800639e:	4631      	mov	r1, r6
 80063a0:	f884 e104 	strb.w	lr, [r4, #260]	; 0x104
 80063a4:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8006480 <d_maybe_print_fold_expression.isra.15+0x26c>
 80063a8:	f7ff fed0 	bl	800614c <d_print_subexpr>
 80063ac:	4631      	mov	r1, r6
 80063ae:	4642      	mov	r2, r8
 80063b0:	4620      	mov	r0, r4
 80063b2:	f7ff fe8d 	bl	80060d0 <d_print_expr_op>
 80063b6:	f109 0b03 	add.w	fp, r9, #3
 80063ba:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80063be:	e009      	b.n	80063d4 <d_maybe_print_fold_expression.isra.15+0x1c0>
 80063c0:	460b      	mov	r3, r1
 80063c2:	3101      	adds	r1, #1
 80063c4:	45cb      	cmp	fp, r9
 80063c6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80063ca:	f804 a003 	strb.w	sl, [r4, r3]
 80063ce:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80063d2:	d015      	beq.n	8006400 <d_maybe_print_fold_expression.isra.15+0x1ec>
 80063d4:	29ff      	cmp	r1, #255	; 0xff
 80063d6:	f819 ab01 	ldrb.w	sl, [r9], #1
 80063da:	d1f1      	bne.n	80063c0 <d_maybe_print_fold_expression.isra.15+0x1ac>
 80063dc:	f04f 0300 	mov.w	r3, #0
 80063e0:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 80063e4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80063e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80063ec:	4620      	mov	r0, r4
 80063ee:	4798      	blx	r3
 80063f0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80063f4:	3301      	adds	r3, #1
 80063f6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80063fa:	2101      	movs	r1, #1
 80063fc:	2300      	movs	r3, #0
 80063fe:	e7e1      	b.n	80063c4 <d_maybe_print_fold_expression.isra.15+0x1b0>
 8006400:	4642      	mov	r2, r8
 8006402:	4631      	mov	r1, r6
 8006404:	4620      	mov	r0, r4
 8006406:	f7ff fe63 	bl	80060d0 <d_print_expr_op>
 800640a:	462a      	mov	r2, r5
 800640c:	e744      	b.n	8006298 <d_maybe_print_fold_expression.isra.15+0x84>
 800640e:	2500      	movs	r5, #0
 8006410:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006414:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006418:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800641c:	4620      	mov	r0, r4
 800641e:	4798      	blx	r3
 8006420:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006424:	3301      	adds	r3, #1
 8006426:	4629      	mov	r1, r5
 8006428:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800642c:	2201      	movs	r2, #1
 800642e:	e73d      	b.n	80062ac <d_maybe_print_fold_expression.isra.15+0x98>
 8006430:	f04f 0a00 	mov.w	sl, #0
 8006434:	4619      	mov	r1, r3
 8006436:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 800643a:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800643e:	f880 a0ff 	strb.w	sl, [r0, #255]	; 0xff
 8006442:	4798      	blx	r3
 8006444:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006448:	f8c4 a100 	str.w	sl, [r4, #256]	; 0x100
 800644c:	1c5a      	adds	r2, r3, #1
 800644e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8006452:	4653      	mov	r3, sl
 8006454:	e79a      	b.n	800638c <d_maybe_print_fold_expression.isra.15+0x178>
 8006456:	2500      	movs	r5, #0
 8006458:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800645c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8006460:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8006464:	4798      	blx	r3
 8006466:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800646a:	3301      	adds	r3, #1
 800646c:	4629      	mov	r1, r5
 800646e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006472:	2201      	movs	r2, #1
 8006474:	e72b      	b.n	80062ce <d_maybe_print_fold_expression.isra.15+0xba>
 8006476:	bf00      	nop
 8006478:	08017da0 	.word	0x08017da0
 800647c:	08017d98 	.word	0x08017d98
 8006480:	08017cb4 	.word	0x08017cb4

08006484 <d_demangle_callback.constprop.17>:
 8006484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006488:	b0e7      	sub	sp, #412	; 0x19c
 800648a:	f890 9000 	ldrb.w	r9, [r0]
 800648e:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
 8006492:	af00      	add	r7, sp, #0
 8006494:	4605      	mov	r5, r0
 8006496:	4688      	mov	r8, r1
 8006498:	4616      	mov	r6, r2
 800649a:	f000 80f1 	beq.w	8006680 <d_demangle_callback.constprop.17+0x1fc>
 800649e:	2208      	movs	r2, #8
 80064a0:	49bd      	ldr	r1, [pc, #756]	; (8006798 <d_demangle_callback.constprop.17+0x314>)
 80064a2:	4628      	mov	r0, r5
 80064a4:	f00c f912 	bl	80126cc <strncmp>
 80064a8:	b948      	cbnz	r0, 80064be <d_demangle_callback.constprop.17+0x3a>
 80064aa:	7a2b      	ldrb	r3, [r5, #8]
 80064ac:	2b2e      	cmp	r3, #46	; 0x2e
 80064ae:	f000 80d6 	beq.w	800665e <d_demangle_callback.constprop.17+0x1da>
 80064b2:	2b5f      	cmp	r3, #95	; 0x5f
 80064b4:	f000 80d3 	beq.w	800665e <d_demangle_callback.constprop.17+0x1da>
 80064b8:	2b24      	cmp	r3, #36	; 0x24
 80064ba:	f000 80d0 	beq.w	800665e <d_demangle_callback.constprop.17+0x1da>
 80064be:	f04f 0a00 	mov.w	sl, #0
 80064c2:	4628      	mov	r0, r5
 80064c4:	f000 fa36 	bl	8006934 <strlen>
 80064c8:	ea4f 0b40 	mov.w	fp, r0, lsl #1
 80064cc:	0083      	lsls	r3, r0, #2
 80064ce:	eb03 020b 	add.w	r2, r3, fp
 80064d2:	0092      	lsls	r2, r2, #2
 80064d4:	3208      	adds	r2, #8
 80064d6:	330a      	adds	r3, #10
 80064d8:	ebad 0d02 	sub.w	sp, sp, r2
 80064dc:	f023 0307 	bic.w	r3, r3, #7
 80064e0:	2400      	movs	r4, #0
 80064e2:	466a      	mov	r2, sp
 80064e4:	1829      	adds	r1, r5, r0
 80064e6:	ebad 0d03 	sub.w	sp, sp, r3
 80064ea:	f1ba 0f01 	cmp.w	sl, #1
 80064ee:	f04f 0311 	mov.w	r3, #17
 80064f2:	627a      	str	r2, [r7, #36]	; 0x24
 80064f4:	f8c7 d030 	str.w	sp, [r7, #48]	; 0x30
 80064f8:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
 80064fc:	617d      	str	r5, [r7, #20]
 80064fe:	623d      	str	r5, [r7, #32]
 8006500:	63b8      	str	r0, [r7, #56]	; 0x38
 8006502:	61b9      	str	r1, [r7, #24]
 8006504:	61fb      	str	r3, [r7, #28]
 8006506:	62bc      	str	r4, [r7, #40]	; 0x28
 8006508:	637c      	str	r4, [r7, #52]	; 0x34
 800650a:	63fc      	str	r4, [r7, #60]	; 0x3c
 800650c:	643c      	str	r4, [r7, #64]	; 0x40
 800650e:	647c      	str	r4, [r7, #68]	; 0x44
 8006510:	64bc      	str	r4, [r7, #72]	; 0x48
 8006512:	64fc      	str	r4, [r7, #76]	; 0x4c
 8006514:	f000 80bb 	beq.w	800668e <d_demangle_callback.constprop.17+0x20a>
 8006518:	f0c0 80cf 	bcc.w	80066ba <d_demangle_callback.constprop.17+0x236>
 800651c:	7aeb      	ldrb	r3, [r5, #11]
 800651e:	f1ba 0f02 	cmp.w	sl, #2
 8006522:	bf18      	it	ne
 8006524:	f04f 0944 	movne.w	r9, #68	; 0x44
 8006528:	f105 0a0b 	add.w	sl, r5, #11
 800652c:	bf08      	it	eq
 800652e:	f04f 0943 	moveq.w	r9, #67	; 0x43
 8006532:	2b5f      	cmp	r3, #95	; 0x5f
 8006534:	f8c7 a020 	str.w	sl, [r7, #32]
 8006538:	f000 80b2 	beq.w	80066a0 <d_demangle_callback.constprop.17+0x21c>
 800653c:	4650      	mov	r0, sl
 800653e:	607a      	str	r2, [r7, #4]
 8006540:	f000 f9f8 	bl	8006934 <strlen>
 8006544:	f1bb 0f00 	cmp.w	fp, #0
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	f340 80bf 	ble.w	80066cc <d_demangle_callback.constprop.17+0x248>
 800654e:	2301      	movs	r3, #1
 8006550:	62bb      	str	r3, [r7, #40]	; 0x28
 8006552:	2800      	cmp	r0, #0
 8006554:	f000 80ba 	beq.w	80066cc <d_demangle_callback.constprop.17+0x248>
 8006558:	2300      	movs	r3, #0
 800655a:	f8c2 a004 	str.w	sl, [r2, #4]
 800655e:	6090      	str	r0, [r2, #8]
 8006560:	7013      	strb	r3, [r2, #0]
 8006562:	4649      	mov	r1, r9
 8006564:	2300      	movs	r3, #0
 8006566:	f107 0014 	add.w	r0, r7, #20
 800656a:	f7f9 fe31 	bl	80001d0 <d_make_comp>
 800656e:	6a3c      	ldr	r4, [r7, #32]
 8006570:	4605      	mov	r5, r0
 8006572:	4620      	mov	r0, r4
 8006574:	f000 f9de 	bl	8006934 <strlen>
 8006578:	1823      	adds	r3, r4, r0
 800657a:	623b      	str	r3, [r7, #32]
 800657c:	f814 9000 	ldrb.w	r9, [r4, r0]
 8006580:	f1b9 0f00 	cmp.w	r9, #0
 8006584:	f040 8086 	bne.w	8006694 <d_demangle_callback.constprop.17+0x210>
 8006588:	2d00      	cmp	r5, #0
 800658a:	f000 8083 	beq.w	8006694 <d_demangle_callback.constprop.17+0x210>
 800658e:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8006592:	462a      	mov	r2, r5
 8006594:	f507 71c2 	add.w	r1, r7, #388	; 0x184
 8006598:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 800659c:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
 80065a0:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
 80065a4:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 80065a8:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80065ac:	f8c4 9110 	str.w	r9, [r4, #272]	; 0x110
 80065b0:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 80065b4:	f8c4 9120 	str.w	r9, [r4, #288]	; 0x120
 80065b8:	f8c4 9124 	str.w	r9, [r4, #292]	; 0x124
 80065bc:	f8c4 9118 	str.w	r9, [r4, #280]	; 0x118
 80065c0:	f8c4 911c 	str.w	r9, [r4, #284]	; 0x11c
 80065c4:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
 80065c8:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
 80065cc:	f8c4 9130 	str.w	r9, [r4, #304]	; 0x130
 80065d0:	f8c4 9134 	str.w	r9, [r4, #308]	; 0x134
 80065d4:	f8c4 9138 	str.w	r9, [r4, #312]	; 0x138
 80065d8:	f8c4 913c 	str.w	r9, [r4, #316]	; 0x13c
 80065dc:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
 80065e0:	f7f9 fec4 	bl	800036c <d_count_templates_scopes>
 80065e4:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
 80065e8:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
 80065ec:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80065f0:	613b      	str	r3, [r7, #16]
 80065f2:	00d0      	lsls	r0, r2, #3
 80065f4:	fb01 f102 	mul.w	r1, r1, r2
 80065f8:	3008      	adds	r0, #8
 80065fa:	46e8      	mov	r8, sp
 80065fc:	00ca      	lsls	r2, r1, #3
 80065fe:	ebad 0d00 	sub.w	sp, sp, r0
 8006602:	4668      	mov	r0, sp
 8006604:	3208      	adds	r2, #8
 8006606:	ebad 0d02 	sub.w	sp, sp, r2
 800660a:	f107 060c 	add.w	r6, r7, #12
 800660e:	462a      	mov	r2, r5
 8006610:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
 8006614:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
 8006618:	4620      	mov	r0, r4
 800661a:	2111      	movs	r1, #17
 800661c:	f8c4 d138 	str.w	sp, [r4, #312]	; 0x138
 8006620:	60fd      	str	r5, [r7, #12]
 8006622:	f8c4 9144 	str.w	r9, [r4, #324]	; 0x144
 8006626:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
 800662a:	f7fc f9c5 	bl	80029b8 <d_print_comp_inner>
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8006634:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006638:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800663c:	f804 9001 	strb.w	r9, [r4, r1]
 8006640:	4620      	mov	r0, r4
 8006642:	46c5      	mov	sp, r8
 8006644:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006648:	4798      	blx	r3
 800664a:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
 800664e:	fab0 f080 	clz	r0, r0
 8006652:	0940      	lsrs	r0, r0, #5
 8006654:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
 8006658:	46bd      	mov	sp, r7
 800665a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800665e:	7a6b      	ldrb	r3, [r5, #9]
 8006660:	2b44      	cmp	r3, #68	; 0x44
 8006662:	d002      	beq.n	800666a <d_demangle_callback.constprop.17+0x1e6>
 8006664:	2b49      	cmp	r3, #73	; 0x49
 8006666:	f47f af2a 	bne.w	80064be <d_demangle_callback.constprop.17+0x3a>
 800666a:	7aaa      	ldrb	r2, [r5, #10]
 800666c:	2a5f      	cmp	r2, #95	; 0x5f
 800666e:	f47f af26 	bne.w	80064be <d_demangle_callback.constprop.17+0x3a>
 8006672:	2b49      	cmp	r3, #73	; 0x49
 8006674:	bf14      	ite	ne
 8006676:	f04f 0a03 	movne.w	sl, #3
 800667a:	f04f 0a02 	moveq.w	sl, #2
 800667e:	e720      	b.n	80064c2 <d_demangle_callback.constprop.17+0x3e>
 8006680:	7843      	ldrb	r3, [r0, #1]
 8006682:	2b5a      	cmp	r3, #90	; 0x5a
 8006684:	f47f af0b 	bne.w	800649e <d_demangle_callback.constprop.17+0x1a>
 8006688:	f04f 0a01 	mov.w	sl, #1
 800668c:	e719      	b.n	80064c2 <d_demangle_callback.constprop.17+0x3e>
 800668e:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
 8006692:	d01d      	beq.n	80066d0 <d_demangle_callback.constprop.17+0x24c>
 8006694:	2000      	movs	r0, #0
 8006696:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
 800669a:	46bd      	mov	sp, r7
 800669c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066a0:	7b2b      	ldrb	r3, [r5, #12]
 80066a2:	2b5a      	cmp	r3, #90	; 0x5a
 80066a4:	f47f af4a 	bne.w	800653c <d_demangle_callback.constprop.17+0xb8>
 80066a8:	350d      	adds	r5, #13
 80066aa:	4621      	mov	r1, r4
 80066ac:	f107 0014 	add.w	r0, r7, #20
 80066b0:	623d      	str	r5, [r7, #32]
 80066b2:	f7fb fe35 	bl	8002320 <d_encoding>
 80066b6:	4602      	mov	r2, r0
 80066b8:	e753      	b.n	8006562 <d_demangle_callback.constprop.17+0xde>
 80066ba:	f107 0014 	add.w	r0, r7, #20
 80066be:	f7fb f817 	bl	80016f0 <d_type>
 80066c2:	6a3b      	ldr	r3, [r7, #32]
 80066c4:	4605      	mov	r5, r0
 80066c6:	f893 9000 	ldrb.w	r9, [r3]
 80066ca:	e759      	b.n	8006580 <d_demangle_callback.constprop.17+0xfc>
 80066cc:	2200      	movs	r2, #0
 80066ce:	e748      	b.n	8006562 <d_demangle_callback.constprop.17+0xde>
 80066d0:	786b      	ldrb	r3, [r5, #1]
 80066d2:	2b5a      	cmp	r3, #90	; 0x5a
 80066d4:	d1de      	bne.n	8006694 <d_demangle_callback.constprop.17+0x210>
 80066d6:	3502      	adds	r5, #2
 80066d8:	4651      	mov	r1, sl
 80066da:	f107 0014 	add.w	r0, r7, #20
 80066de:	623d      	str	r5, [r7, #32]
 80066e0:	f7fb fe1e 	bl	8002320 <d_encoding>
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	07db      	lsls	r3, r3, #31
 80066e8:	4605      	mov	r5, r0
 80066ea:	d551      	bpl.n	8006790 <d_demangle_callback.constprop.17+0x30c>
 80066ec:	6a38      	ldr	r0, [r7, #32]
 80066ee:	f890 9000 	ldrb.w	r9, [r0]
 80066f2:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
 80066f6:	f47f af43 	bne.w	8006580 <d_demangle_callback.constprop.17+0xfc>
 80066fa:	7843      	ldrb	r3, [r0, #1]
 80066fc:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006700:	2a19      	cmp	r2, #25
 8006702:	d939      	bls.n	8006778 <d_demangle_callback.constprop.17+0x2f4>
 8006704:	2b5f      	cmp	r3, #95	; 0x5f
 8006706:	d037      	beq.n	8006778 <d_demangle_callback.constprop.17+0x2f4>
 8006708:	3b30      	subs	r3, #48	; 0x30
 800670a:	2b09      	cmp	r3, #9
 800670c:	d840      	bhi.n	8006790 <d_demangle_callback.constprop.17+0x30c>
 800670e:	7803      	ldrb	r3, [r0, #0]
 8006710:	4602      	mov	r2, r0
 8006712:	2b2e      	cmp	r3, #46	; 0x2e
 8006714:	d112      	bne.n	800673c <d_demangle_callback.constprop.17+0x2b8>
 8006716:	7853      	ldrb	r3, [r2, #1]
 8006718:	3b30      	subs	r3, #48	; 0x30
 800671a:	2b09      	cmp	r3, #9
 800671c:	d80e      	bhi.n	800673c <d_demangle_callback.constprop.17+0x2b8>
 800671e:	7893      	ldrb	r3, [r2, #2]
 8006720:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006724:	2909      	cmp	r1, #9
 8006726:	f102 0202 	add.w	r2, r2, #2
 800672a:	d8f2      	bhi.n	8006712 <d_demangle_callback.constprop.17+0x28e>
 800672c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8006730:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006734:	2909      	cmp	r1, #9
 8006736:	d9f9      	bls.n	800672c <d_demangle_callback.constprop.17+0x2a8>
 8006738:	2b2e      	cmp	r3, #46	; 0x2e
 800673a:	d0ec      	beq.n	8006716 <d_demangle_callback.constprop.17+0x292>
 800673c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800673e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006740:	623a      	str	r2, [r7, #32]
 8006742:	4299      	cmp	r1, r3
 8006744:	da16      	bge.n	8006774 <d_demangle_callback.constprop.17+0x2f0>
 8006746:	f8d7 e024 	ldr.w	lr, [r7, #36]	; 0x24
 800674a:	1c4b      	adds	r3, r1, #1
 800674c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006750:	62bb      	str	r3, [r7, #40]	; 0x28
 8006752:	eb1e 0381 	adds.w	r3, lr, r1, lsl #2
 8006756:	d00d      	beq.n	8006774 <d_demangle_callback.constprop.17+0x2f0>
 8006758:	1a12      	subs	r2, r2, r0
 800675a:	d00b      	beq.n	8006774 <d_demangle_callback.constprop.17+0x2f0>
 800675c:	f80e 4021 	strb.w	r4, [lr, r1, lsl #2]
 8006760:	6058      	str	r0, [r3, #4]
 8006762:	609a      	str	r2, [r3, #8]
 8006764:	462a      	mov	r2, r5
 8006766:	214d      	movs	r1, #77	; 0x4d
 8006768:	f107 0014 	add.w	r0, r7, #20
 800676c:	f7f9 fd30 	bl	80001d0 <d_make_comp>
 8006770:	4605      	mov	r5, r0
 8006772:	e7bb      	b.n	80066ec <d_demangle_callback.constprop.17+0x268>
 8006774:	2300      	movs	r3, #0
 8006776:	e7f5      	b.n	8006764 <d_demangle_callback.constprop.17+0x2e0>
 8006778:	1c81      	adds	r1, r0, #2
 800677a:	460a      	mov	r2, r1
 800677c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006780:	f1a3 0e61 	sub.w	lr, r3, #97	; 0x61
 8006784:	f1be 0f19 	cmp.w	lr, #25
 8006788:	d9f7      	bls.n	800677a <d_demangle_callback.constprop.17+0x2f6>
 800678a:	2b5f      	cmp	r3, #95	; 0x5f
 800678c:	d0f5      	beq.n	800677a <d_demangle_callback.constprop.17+0x2f6>
 800678e:	e7c0      	b.n	8006712 <d_demangle_callback.constprop.17+0x28e>
 8006790:	6a3b      	ldr	r3, [r7, #32]
 8006792:	f893 9000 	ldrb.w	r9, [r3]
 8006796:	e6f3      	b.n	8006580 <d_demangle_callback.constprop.17+0xfc>
 8006798:	08017a44 	.word	0x08017a44

0800679c <__cxa_demangle>:
 800679c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067a0:	b084      	sub	sp, #16
 80067a2:	b378      	cbz	r0, 8006804 <__cxa_demangle+0x68>
 80067a4:	b101      	cbz	r1, 80067a8 <__cxa_demangle+0xc>
 80067a6:	b36a      	cbz	r2, 8006804 <__cxa_demangle+0x68>
 80067a8:	2400      	movs	r4, #0
 80067aa:	4616      	mov	r6, r2
 80067ac:	460d      	mov	r5, r1
 80067ae:	466a      	mov	r2, sp
 80067b0:	4927      	ldr	r1, [pc, #156]	; (8006850 <__cxa_demangle+0xb4>)
 80067b2:	9400      	str	r4, [sp, #0]
 80067b4:	461f      	mov	r7, r3
 80067b6:	9401      	str	r4, [sp, #4]
 80067b8:	9402      	str	r4, [sp, #8]
 80067ba:	9403      	str	r4, [sp, #12]
 80067bc:	f7ff fe62 	bl	8006484 <d_demangle_callback.constprop.17>
 80067c0:	2800      	cmp	r0, #0
 80067c2:	d03f      	beq.n	8006844 <__cxa_demangle+0xa8>
 80067c4:	9b03      	ldr	r3, [sp, #12]
 80067c6:	b1d3      	cbz	r3, 80067fe <__cxa_demangle+0x62>
 80067c8:	f04f 0801 	mov.w	r8, #1
 80067cc:	9c00      	ldr	r4, [sp, #0]
 80067ce:	b35c      	cbz	r4, 8006828 <__cxa_demangle+0x8c>
 80067d0:	b33d      	cbz	r5, 8006822 <__cxa_demangle+0x86>
 80067d2:	4620      	mov	r0, r4
 80067d4:	f000 f8ae 	bl	8006934 <strlen>
 80067d8:	6833      	ldr	r3, [r6, #0]
 80067da:	4298      	cmp	r0, r3
 80067dc:	d21b      	bcs.n	8006816 <__cxa_demangle+0x7a>
 80067de:	1c42      	adds	r2, r0, #1
 80067e0:	4621      	mov	r1, r4
 80067e2:	4628      	mov	r0, r5
 80067e4:	f00b fc71 	bl	80120ca <memcpy>
 80067e8:	4620      	mov	r0, r4
 80067ea:	f00b fa49 	bl	8011c80 <free>
 80067ee:	462c      	mov	r4, r5
 80067f0:	b10f      	cbz	r7, 80067f6 <__cxa_demangle+0x5a>
 80067f2:	2300      	movs	r3, #0
 80067f4:	603b      	str	r3, [r7, #0]
 80067f6:	4620      	mov	r0, r4
 80067f8:	b004      	add	sp, #16
 80067fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067fe:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006802:	e7e3      	b.n	80067cc <__cxa_demangle+0x30>
 8006804:	b113      	cbz	r3, 800680c <__cxa_demangle+0x70>
 8006806:	f06f 0202 	mvn.w	r2, #2
 800680a:	601a      	str	r2, [r3, #0]
 800680c:	2400      	movs	r4, #0
 800680e:	4620      	mov	r0, r4
 8006810:	b004      	add	sp, #16
 8006812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006816:	4628      	mov	r0, r5
 8006818:	f00b fa32 	bl	8011c80 <free>
 800681c:	f8c6 8000 	str.w	r8, [r6]
 8006820:	e7e6      	b.n	80067f0 <__cxa_demangle+0x54>
 8006822:	2e00      	cmp	r6, #0
 8006824:	d1fa      	bne.n	800681c <__cxa_demangle+0x80>
 8006826:	e7e3      	b.n	80067f0 <__cxa_demangle+0x54>
 8006828:	2f00      	cmp	r7, #0
 800682a:	d0ef      	beq.n	800680c <__cxa_demangle+0x70>
 800682c:	f1b8 0f01 	cmp.w	r8, #1
 8006830:	d004      	beq.n	800683c <__cxa_demangle+0xa0>
 8006832:	f06f 0301 	mvn.w	r3, #1
 8006836:	603b      	str	r3, [r7, #0]
 8006838:	2400      	movs	r4, #0
 800683a:	e7dc      	b.n	80067f6 <__cxa_demangle+0x5a>
 800683c:	f04f 33ff 	mov.w	r3, #4294967295
 8006840:	603b      	str	r3, [r7, #0]
 8006842:	e7d8      	b.n	80067f6 <__cxa_demangle+0x5a>
 8006844:	9800      	ldr	r0, [sp, #0]
 8006846:	f00b fa1b 	bl	8011c80 <free>
 800684a:	2f00      	cmp	r7, #0
 800684c:	d1f1      	bne.n	8006832 <__cxa_demangle+0x96>
 800684e:	e7dd      	b.n	800680c <__cxa_demangle+0x70>
 8006850:	080008f5 	.word	0x080008f5

08006854 <__gcclibcxx_demangle_callback>:
 8006854:	b160      	cbz	r0, 8006870 <__gcclibcxx_demangle_callback+0x1c>
 8006856:	b508      	push	{r3, lr}
 8006858:	b139      	cbz	r1, 800686a <__gcclibcxx_demangle_callback+0x16>
 800685a:	f7ff fe13 	bl	8006484 <d_demangle_callback.constprop.17>
 800685e:	2800      	cmp	r0, #0
 8006860:	bf0c      	ite	eq
 8006862:	f06f 0001 	mvneq.w	r0, #1
 8006866:	2000      	movne	r0, #0
 8006868:	bd08      	pop	{r3, pc}
 800686a:	f06f 0002 	mvn.w	r0, #2
 800686e:	bd08      	pop	{r3, pc}
 8006870:	f06f 0002 	mvn.w	r0, #2
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
	...

08006880 <memchr>:
 8006880:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8006884:	2a10      	cmp	r2, #16
 8006886:	db2b      	blt.n	80068e0 <memchr+0x60>
 8006888:	f010 0f07 	tst.w	r0, #7
 800688c:	d008      	beq.n	80068a0 <memchr+0x20>
 800688e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006892:	3a01      	subs	r2, #1
 8006894:	428b      	cmp	r3, r1
 8006896:	d02d      	beq.n	80068f4 <memchr+0x74>
 8006898:	f010 0f07 	tst.w	r0, #7
 800689c:	b342      	cbz	r2, 80068f0 <memchr+0x70>
 800689e:	d1f6      	bne.n	800688e <memchr+0xe>
 80068a0:	b4f0      	push	{r4, r5, r6, r7}
 80068a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80068a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80068aa:	f022 0407 	bic.w	r4, r2, #7
 80068ae:	f07f 0700 	mvns.w	r7, #0
 80068b2:	2300      	movs	r3, #0
 80068b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80068b8:	3c08      	subs	r4, #8
 80068ba:	ea85 0501 	eor.w	r5, r5, r1
 80068be:	ea86 0601 	eor.w	r6, r6, r1
 80068c2:	fa85 f547 	uadd8	r5, r5, r7
 80068c6:	faa3 f587 	sel	r5, r3, r7
 80068ca:	fa86 f647 	uadd8	r6, r6, r7
 80068ce:	faa5 f687 	sel	r6, r5, r7
 80068d2:	b98e      	cbnz	r6, 80068f8 <memchr+0x78>
 80068d4:	d1ee      	bne.n	80068b4 <memchr+0x34>
 80068d6:	bcf0      	pop	{r4, r5, r6, r7}
 80068d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80068dc:	f002 0207 	and.w	r2, r2, #7
 80068e0:	b132      	cbz	r2, 80068f0 <memchr+0x70>
 80068e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80068e6:	3a01      	subs	r2, #1
 80068e8:	ea83 0301 	eor.w	r3, r3, r1
 80068ec:	b113      	cbz	r3, 80068f4 <memchr+0x74>
 80068ee:	d1f8      	bne.n	80068e2 <memchr+0x62>
 80068f0:	2000      	movs	r0, #0
 80068f2:	4770      	bx	lr
 80068f4:	3801      	subs	r0, #1
 80068f6:	4770      	bx	lr
 80068f8:	2d00      	cmp	r5, #0
 80068fa:	bf06      	itte	eq
 80068fc:	4635      	moveq	r5, r6
 80068fe:	3803      	subeq	r0, #3
 8006900:	3807      	subne	r0, #7
 8006902:	f015 0f01 	tst.w	r5, #1
 8006906:	d107      	bne.n	8006918 <memchr+0x98>
 8006908:	3001      	adds	r0, #1
 800690a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800690e:	bf02      	ittt	eq
 8006910:	3001      	addeq	r0, #1
 8006912:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8006916:	3001      	addeq	r0, #1
 8006918:	bcf0      	pop	{r4, r5, r6, r7}
 800691a:	3801      	subs	r0, #1
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop

08006920 <strcmp>:
 8006920:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006924:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006928:	2a01      	cmp	r2, #1
 800692a:	bf28      	it	cs
 800692c:	429a      	cmpcs	r2, r3
 800692e:	d0f7      	beq.n	8006920 <strcmp>
 8006930:	1ad0      	subs	r0, r2, r3
 8006932:	4770      	bx	lr

08006934 <strlen>:
 8006934:	4603      	mov	r3, r0
 8006936:	f813 2b01 	ldrb.w	r2, [r3], #1
 800693a:	2a00      	cmp	r2, #0
 800693c:	d1fb      	bne.n	8006936 <strlen+0x2>
 800693e:	1a18      	subs	r0, r3, r0
 8006940:	3801      	subs	r0, #1
 8006942:	4770      	bx	lr

08006944 <__aeabi_drsub>:
 8006944:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8006948:	e002      	b.n	8006950 <__adddf3>
 800694a:	bf00      	nop

0800694c <__aeabi_dsub>:
 800694c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08006950 <__adddf3>:
 8006950:	b530      	push	{r4, r5, lr}
 8006952:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8006956:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800695a:	ea94 0f05 	teq	r4, r5
 800695e:	bf08      	it	eq
 8006960:	ea90 0f02 	teqeq	r0, r2
 8006964:	bf1f      	itttt	ne
 8006966:	ea54 0c00 	orrsne.w	ip, r4, r0
 800696a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800696e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8006972:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006976:	f000 80e2 	beq.w	8006b3e <__adddf3+0x1ee>
 800697a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800697e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8006982:	bfb8      	it	lt
 8006984:	426d      	neglt	r5, r5
 8006986:	dd0c      	ble.n	80069a2 <__adddf3+0x52>
 8006988:	442c      	add	r4, r5
 800698a:	ea80 0202 	eor.w	r2, r0, r2
 800698e:	ea81 0303 	eor.w	r3, r1, r3
 8006992:	ea82 0000 	eor.w	r0, r2, r0
 8006996:	ea83 0101 	eor.w	r1, r3, r1
 800699a:	ea80 0202 	eor.w	r2, r0, r2
 800699e:	ea81 0303 	eor.w	r3, r1, r3
 80069a2:	2d36      	cmp	r5, #54	; 0x36
 80069a4:	bf88      	it	hi
 80069a6:	bd30      	pophi	{r4, r5, pc}
 80069a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80069ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80069b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80069b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80069b8:	d002      	beq.n	80069c0 <__adddf3+0x70>
 80069ba:	4240      	negs	r0, r0
 80069bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80069c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80069c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80069c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80069cc:	d002      	beq.n	80069d4 <__adddf3+0x84>
 80069ce:	4252      	negs	r2, r2
 80069d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80069d4:	ea94 0f05 	teq	r4, r5
 80069d8:	f000 80a7 	beq.w	8006b2a <__adddf3+0x1da>
 80069dc:	f1a4 0401 	sub.w	r4, r4, #1
 80069e0:	f1d5 0e20 	rsbs	lr, r5, #32
 80069e4:	db0d      	blt.n	8006a02 <__adddf3+0xb2>
 80069e6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80069ea:	fa22 f205 	lsr.w	r2, r2, r5
 80069ee:	1880      	adds	r0, r0, r2
 80069f0:	f141 0100 	adc.w	r1, r1, #0
 80069f4:	fa03 f20e 	lsl.w	r2, r3, lr
 80069f8:	1880      	adds	r0, r0, r2
 80069fa:	fa43 f305 	asr.w	r3, r3, r5
 80069fe:	4159      	adcs	r1, r3
 8006a00:	e00e      	b.n	8006a20 <__adddf3+0xd0>
 8006a02:	f1a5 0520 	sub.w	r5, r5, #32
 8006a06:	f10e 0e20 	add.w	lr, lr, #32
 8006a0a:	2a01      	cmp	r2, #1
 8006a0c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8006a10:	bf28      	it	cs
 8006a12:	f04c 0c02 	orrcs.w	ip, ip, #2
 8006a16:	fa43 f305 	asr.w	r3, r3, r5
 8006a1a:	18c0      	adds	r0, r0, r3
 8006a1c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8006a20:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006a24:	d507      	bpl.n	8006a36 <__adddf3+0xe6>
 8006a26:	f04f 0e00 	mov.w	lr, #0
 8006a2a:	f1dc 0c00 	rsbs	ip, ip, #0
 8006a2e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8006a32:	eb6e 0101 	sbc.w	r1, lr, r1
 8006a36:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006a3a:	d31b      	bcc.n	8006a74 <__adddf3+0x124>
 8006a3c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8006a40:	d30c      	bcc.n	8006a5c <__adddf3+0x10c>
 8006a42:	0849      	lsrs	r1, r1, #1
 8006a44:	ea5f 0030 	movs.w	r0, r0, rrx
 8006a48:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8006a4c:	f104 0401 	add.w	r4, r4, #1
 8006a50:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8006a54:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8006a58:	f080 809a 	bcs.w	8006b90 <__adddf3+0x240>
 8006a5c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8006a60:	bf08      	it	eq
 8006a62:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006a66:	f150 0000 	adcs.w	r0, r0, #0
 8006a6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006a6e:	ea41 0105 	orr.w	r1, r1, r5
 8006a72:	bd30      	pop	{r4, r5, pc}
 8006a74:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8006a78:	4140      	adcs	r0, r0
 8006a7a:	eb41 0101 	adc.w	r1, r1, r1
 8006a7e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006a82:	f1a4 0401 	sub.w	r4, r4, #1
 8006a86:	d1e9      	bne.n	8006a5c <__adddf3+0x10c>
 8006a88:	f091 0f00 	teq	r1, #0
 8006a8c:	bf04      	itt	eq
 8006a8e:	4601      	moveq	r1, r0
 8006a90:	2000      	moveq	r0, #0
 8006a92:	fab1 f381 	clz	r3, r1
 8006a96:	bf08      	it	eq
 8006a98:	3320      	addeq	r3, #32
 8006a9a:	f1a3 030b 	sub.w	r3, r3, #11
 8006a9e:	f1b3 0220 	subs.w	r2, r3, #32
 8006aa2:	da0c      	bge.n	8006abe <__adddf3+0x16e>
 8006aa4:	320c      	adds	r2, #12
 8006aa6:	dd08      	ble.n	8006aba <__adddf3+0x16a>
 8006aa8:	f102 0c14 	add.w	ip, r2, #20
 8006aac:	f1c2 020c 	rsb	r2, r2, #12
 8006ab0:	fa01 f00c 	lsl.w	r0, r1, ip
 8006ab4:	fa21 f102 	lsr.w	r1, r1, r2
 8006ab8:	e00c      	b.n	8006ad4 <__adddf3+0x184>
 8006aba:	f102 0214 	add.w	r2, r2, #20
 8006abe:	bfd8      	it	le
 8006ac0:	f1c2 0c20 	rsble	ip, r2, #32
 8006ac4:	fa01 f102 	lsl.w	r1, r1, r2
 8006ac8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8006acc:	bfdc      	itt	le
 8006ace:	ea41 010c 	orrle.w	r1, r1, ip
 8006ad2:	4090      	lslle	r0, r2
 8006ad4:	1ae4      	subs	r4, r4, r3
 8006ad6:	bfa2      	ittt	ge
 8006ad8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8006adc:	4329      	orrge	r1, r5
 8006ade:	bd30      	popge	{r4, r5, pc}
 8006ae0:	ea6f 0404 	mvn.w	r4, r4
 8006ae4:	3c1f      	subs	r4, #31
 8006ae6:	da1c      	bge.n	8006b22 <__adddf3+0x1d2>
 8006ae8:	340c      	adds	r4, #12
 8006aea:	dc0e      	bgt.n	8006b0a <__adddf3+0x1ba>
 8006aec:	f104 0414 	add.w	r4, r4, #20
 8006af0:	f1c4 0220 	rsb	r2, r4, #32
 8006af4:	fa20 f004 	lsr.w	r0, r0, r4
 8006af8:	fa01 f302 	lsl.w	r3, r1, r2
 8006afc:	ea40 0003 	orr.w	r0, r0, r3
 8006b00:	fa21 f304 	lsr.w	r3, r1, r4
 8006b04:	ea45 0103 	orr.w	r1, r5, r3
 8006b08:	bd30      	pop	{r4, r5, pc}
 8006b0a:	f1c4 040c 	rsb	r4, r4, #12
 8006b0e:	f1c4 0220 	rsb	r2, r4, #32
 8006b12:	fa20 f002 	lsr.w	r0, r0, r2
 8006b16:	fa01 f304 	lsl.w	r3, r1, r4
 8006b1a:	ea40 0003 	orr.w	r0, r0, r3
 8006b1e:	4629      	mov	r1, r5
 8006b20:	bd30      	pop	{r4, r5, pc}
 8006b22:	fa21 f004 	lsr.w	r0, r1, r4
 8006b26:	4629      	mov	r1, r5
 8006b28:	bd30      	pop	{r4, r5, pc}
 8006b2a:	f094 0f00 	teq	r4, #0
 8006b2e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8006b32:	bf06      	itte	eq
 8006b34:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8006b38:	3401      	addeq	r4, #1
 8006b3a:	3d01      	subne	r5, #1
 8006b3c:	e74e      	b.n	80069dc <__adddf3+0x8c>
 8006b3e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006b42:	bf18      	it	ne
 8006b44:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006b48:	d029      	beq.n	8006b9e <__adddf3+0x24e>
 8006b4a:	ea94 0f05 	teq	r4, r5
 8006b4e:	bf08      	it	eq
 8006b50:	ea90 0f02 	teqeq	r0, r2
 8006b54:	d005      	beq.n	8006b62 <__adddf3+0x212>
 8006b56:	ea54 0c00 	orrs.w	ip, r4, r0
 8006b5a:	bf04      	itt	eq
 8006b5c:	4619      	moveq	r1, r3
 8006b5e:	4610      	moveq	r0, r2
 8006b60:	bd30      	pop	{r4, r5, pc}
 8006b62:	ea91 0f03 	teq	r1, r3
 8006b66:	bf1e      	ittt	ne
 8006b68:	2100      	movne	r1, #0
 8006b6a:	2000      	movne	r0, #0
 8006b6c:	bd30      	popne	{r4, r5, pc}
 8006b6e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8006b72:	d105      	bne.n	8006b80 <__adddf3+0x230>
 8006b74:	0040      	lsls	r0, r0, #1
 8006b76:	4149      	adcs	r1, r1
 8006b78:	bf28      	it	cs
 8006b7a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8006b7e:	bd30      	pop	{r4, r5, pc}
 8006b80:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8006b84:	bf3c      	itt	cc
 8006b86:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8006b8a:	bd30      	popcc	{r4, r5, pc}
 8006b8c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006b90:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8006b94:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006b98:	f04f 0000 	mov.w	r0, #0
 8006b9c:	bd30      	pop	{r4, r5, pc}
 8006b9e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006ba2:	bf1a      	itte	ne
 8006ba4:	4619      	movne	r1, r3
 8006ba6:	4610      	movne	r0, r2
 8006ba8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8006bac:	bf1c      	itt	ne
 8006bae:	460b      	movne	r3, r1
 8006bb0:	4602      	movne	r2, r0
 8006bb2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8006bb6:	bf06      	itte	eq
 8006bb8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8006bbc:	ea91 0f03 	teqeq	r1, r3
 8006bc0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8006bc4:	bd30      	pop	{r4, r5, pc}
 8006bc6:	bf00      	nop

08006bc8 <__aeabi_ui2d>:
 8006bc8:	f090 0f00 	teq	r0, #0
 8006bcc:	bf04      	itt	eq
 8006bce:	2100      	moveq	r1, #0
 8006bd0:	4770      	bxeq	lr
 8006bd2:	b530      	push	{r4, r5, lr}
 8006bd4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006bd8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006bdc:	f04f 0500 	mov.w	r5, #0
 8006be0:	f04f 0100 	mov.w	r1, #0
 8006be4:	e750      	b.n	8006a88 <__adddf3+0x138>
 8006be6:	bf00      	nop

08006be8 <__aeabi_i2d>:
 8006be8:	f090 0f00 	teq	r0, #0
 8006bec:	bf04      	itt	eq
 8006bee:	2100      	moveq	r1, #0
 8006bf0:	4770      	bxeq	lr
 8006bf2:	b530      	push	{r4, r5, lr}
 8006bf4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006bf8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006bfc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8006c00:	bf48      	it	mi
 8006c02:	4240      	negmi	r0, r0
 8006c04:	f04f 0100 	mov.w	r1, #0
 8006c08:	e73e      	b.n	8006a88 <__adddf3+0x138>
 8006c0a:	bf00      	nop

08006c0c <__aeabi_f2d>:
 8006c0c:	0042      	lsls	r2, r0, #1
 8006c0e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8006c12:	ea4f 0131 	mov.w	r1, r1, rrx
 8006c16:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8006c1a:	bf1f      	itttt	ne
 8006c1c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8006c20:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8006c24:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8006c28:	4770      	bxne	lr
 8006c2a:	f092 0f00 	teq	r2, #0
 8006c2e:	bf14      	ite	ne
 8006c30:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8006c34:	4770      	bxeq	lr
 8006c36:	b530      	push	{r4, r5, lr}
 8006c38:	f44f 7460 	mov.w	r4, #896	; 0x380
 8006c3c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006c40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006c44:	e720      	b.n	8006a88 <__adddf3+0x138>
 8006c46:	bf00      	nop

08006c48 <__aeabi_ul2d>:
 8006c48:	ea50 0201 	orrs.w	r2, r0, r1
 8006c4c:	bf08      	it	eq
 8006c4e:	4770      	bxeq	lr
 8006c50:	b530      	push	{r4, r5, lr}
 8006c52:	f04f 0500 	mov.w	r5, #0
 8006c56:	e00a      	b.n	8006c6e <__aeabi_l2d+0x16>

08006c58 <__aeabi_l2d>:
 8006c58:	ea50 0201 	orrs.w	r2, r0, r1
 8006c5c:	bf08      	it	eq
 8006c5e:	4770      	bxeq	lr
 8006c60:	b530      	push	{r4, r5, lr}
 8006c62:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8006c66:	d502      	bpl.n	8006c6e <__aeabi_l2d+0x16>
 8006c68:	4240      	negs	r0, r0
 8006c6a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006c6e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006c72:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006c76:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8006c7a:	f43f aedc 	beq.w	8006a36 <__adddf3+0xe6>
 8006c7e:	f04f 0203 	mov.w	r2, #3
 8006c82:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006c86:	bf18      	it	ne
 8006c88:	3203      	addne	r2, #3
 8006c8a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006c8e:	bf18      	it	ne
 8006c90:	3203      	addne	r2, #3
 8006c92:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8006c96:	f1c2 0320 	rsb	r3, r2, #32
 8006c9a:	fa00 fc03 	lsl.w	ip, r0, r3
 8006c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8006ca2:	fa01 fe03 	lsl.w	lr, r1, r3
 8006ca6:	ea40 000e 	orr.w	r0, r0, lr
 8006caa:	fa21 f102 	lsr.w	r1, r1, r2
 8006cae:	4414      	add	r4, r2
 8006cb0:	e6c1      	b.n	8006a36 <__adddf3+0xe6>
 8006cb2:	bf00      	nop

08006cb4 <__aeabi_dmul>:
 8006cb4:	b570      	push	{r4, r5, r6, lr}
 8006cb6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006cba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8006cbe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8006cc2:	bf1d      	ittte	ne
 8006cc4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006cc8:	ea94 0f0c 	teqne	r4, ip
 8006ccc:	ea95 0f0c 	teqne	r5, ip
 8006cd0:	f000 f8de 	bleq	8006e90 <__aeabi_dmul+0x1dc>
 8006cd4:	442c      	add	r4, r5
 8006cd6:	ea81 0603 	eor.w	r6, r1, r3
 8006cda:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8006cde:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8006ce2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8006ce6:	bf18      	it	ne
 8006ce8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8006cec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006cf0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cf4:	d038      	beq.n	8006d68 <__aeabi_dmul+0xb4>
 8006cf6:	fba0 ce02 	umull	ip, lr, r0, r2
 8006cfa:	f04f 0500 	mov.w	r5, #0
 8006cfe:	fbe1 e502 	umlal	lr, r5, r1, r2
 8006d02:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8006d06:	fbe0 e503 	umlal	lr, r5, r0, r3
 8006d0a:	f04f 0600 	mov.w	r6, #0
 8006d0e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8006d12:	f09c 0f00 	teq	ip, #0
 8006d16:	bf18      	it	ne
 8006d18:	f04e 0e01 	orrne.w	lr, lr, #1
 8006d1c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8006d20:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8006d24:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8006d28:	d204      	bcs.n	8006d34 <__aeabi_dmul+0x80>
 8006d2a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8006d2e:	416d      	adcs	r5, r5
 8006d30:	eb46 0606 	adc.w	r6, r6, r6
 8006d34:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8006d38:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8006d3c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8006d40:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8006d44:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8006d48:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8006d4c:	bf88      	it	hi
 8006d4e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006d52:	d81e      	bhi.n	8006d92 <__aeabi_dmul+0xde>
 8006d54:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8006d58:	bf08      	it	eq
 8006d5a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8006d5e:	f150 0000 	adcs.w	r0, r0, #0
 8006d62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006d66:	bd70      	pop	{r4, r5, r6, pc}
 8006d68:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8006d6c:	ea46 0101 	orr.w	r1, r6, r1
 8006d70:	ea40 0002 	orr.w	r0, r0, r2
 8006d74:	ea81 0103 	eor.w	r1, r1, r3
 8006d78:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8006d7c:	bfc2      	ittt	gt
 8006d7e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8006d82:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8006d86:	bd70      	popgt	{r4, r5, r6, pc}
 8006d88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006d8c:	f04f 0e00 	mov.w	lr, #0
 8006d90:	3c01      	subs	r4, #1
 8006d92:	f300 80ab 	bgt.w	8006eec <__aeabi_dmul+0x238>
 8006d96:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8006d9a:	bfde      	ittt	le
 8006d9c:	2000      	movle	r0, #0
 8006d9e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8006da2:	bd70      	pople	{r4, r5, r6, pc}
 8006da4:	f1c4 0400 	rsb	r4, r4, #0
 8006da8:	3c20      	subs	r4, #32
 8006daa:	da35      	bge.n	8006e18 <__aeabi_dmul+0x164>
 8006dac:	340c      	adds	r4, #12
 8006dae:	dc1b      	bgt.n	8006de8 <__aeabi_dmul+0x134>
 8006db0:	f104 0414 	add.w	r4, r4, #20
 8006db4:	f1c4 0520 	rsb	r5, r4, #32
 8006db8:	fa00 f305 	lsl.w	r3, r0, r5
 8006dbc:	fa20 f004 	lsr.w	r0, r0, r4
 8006dc0:	fa01 f205 	lsl.w	r2, r1, r5
 8006dc4:	ea40 0002 	orr.w	r0, r0, r2
 8006dc8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8006dcc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006dd0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006dd4:	fa21 f604 	lsr.w	r6, r1, r4
 8006dd8:	eb42 0106 	adc.w	r1, r2, r6
 8006ddc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006de0:	bf08      	it	eq
 8006de2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006de6:	bd70      	pop	{r4, r5, r6, pc}
 8006de8:	f1c4 040c 	rsb	r4, r4, #12
 8006dec:	f1c4 0520 	rsb	r5, r4, #32
 8006df0:	fa00 f304 	lsl.w	r3, r0, r4
 8006df4:	fa20 f005 	lsr.w	r0, r0, r5
 8006df8:	fa01 f204 	lsl.w	r2, r1, r4
 8006dfc:	ea40 0002 	orr.w	r0, r0, r2
 8006e00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006e04:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006e08:	f141 0100 	adc.w	r1, r1, #0
 8006e0c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006e10:	bf08      	it	eq
 8006e12:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006e16:	bd70      	pop	{r4, r5, r6, pc}
 8006e18:	f1c4 0520 	rsb	r5, r4, #32
 8006e1c:	fa00 f205 	lsl.w	r2, r0, r5
 8006e20:	ea4e 0e02 	orr.w	lr, lr, r2
 8006e24:	fa20 f304 	lsr.w	r3, r0, r4
 8006e28:	fa01 f205 	lsl.w	r2, r1, r5
 8006e2c:	ea43 0302 	orr.w	r3, r3, r2
 8006e30:	fa21 f004 	lsr.w	r0, r1, r4
 8006e34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006e38:	fa21 f204 	lsr.w	r2, r1, r4
 8006e3c:	ea20 0002 	bic.w	r0, r0, r2
 8006e40:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8006e44:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006e48:	bf08      	it	eq
 8006e4a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006e4e:	bd70      	pop	{r4, r5, r6, pc}
 8006e50:	f094 0f00 	teq	r4, #0
 8006e54:	d10f      	bne.n	8006e76 <__aeabi_dmul+0x1c2>
 8006e56:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8006e5a:	0040      	lsls	r0, r0, #1
 8006e5c:	eb41 0101 	adc.w	r1, r1, r1
 8006e60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006e64:	bf08      	it	eq
 8006e66:	3c01      	subeq	r4, #1
 8006e68:	d0f7      	beq.n	8006e5a <__aeabi_dmul+0x1a6>
 8006e6a:	ea41 0106 	orr.w	r1, r1, r6
 8006e6e:	f095 0f00 	teq	r5, #0
 8006e72:	bf18      	it	ne
 8006e74:	4770      	bxne	lr
 8006e76:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8006e7a:	0052      	lsls	r2, r2, #1
 8006e7c:	eb43 0303 	adc.w	r3, r3, r3
 8006e80:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8006e84:	bf08      	it	eq
 8006e86:	3d01      	subeq	r5, #1
 8006e88:	d0f7      	beq.n	8006e7a <__aeabi_dmul+0x1c6>
 8006e8a:	ea43 0306 	orr.w	r3, r3, r6
 8006e8e:	4770      	bx	lr
 8006e90:	ea94 0f0c 	teq	r4, ip
 8006e94:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8006e98:	bf18      	it	ne
 8006e9a:	ea95 0f0c 	teqne	r5, ip
 8006e9e:	d00c      	beq.n	8006eba <__aeabi_dmul+0x206>
 8006ea0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006ea4:	bf18      	it	ne
 8006ea6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006eaa:	d1d1      	bne.n	8006e50 <__aeabi_dmul+0x19c>
 8006eac:	ea81 0103 	eor.w	r1, r1, r3
 8006eb0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006eb4:	f04f 0000 	mov.w	r0, #0
 8006eb8:	bd70      	pop	{r4, r5, r6, pc}
 8006eba:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006ebe:	bf06      	itte	eq
 8006ec0:	4610      	moveq	r0, r2
 8006ec2:	4619      	moveq	r1, r3
 8006ec4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006ec8:	d019      	beq.n	8006efe <__aeabi_dmul+0x24a>
 8006eca:	ea94 0f0c 	teq	r4, ip
 8006ece:	d102      	bne.n	8006ed6 <__aeabi_dmul+0x222>
 8006ed0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8006ed4:	d113      	bne.n	8006efe <__aeabi_dmul+0x24a>
 8006ed6:	ea95 0f0c 	teq	r5, ip
 8006eda:	d105      	bne.n	8006ee8 <__aeabi_dmul+0x234>
 8006edc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8006ee0:	bf1c      	itt	ne
 8006ee2:	4610      	movne	r0, r2
 8006ee4:	4619      	movne	r1, r3
 8006ee6:	d10a      	bne.n	8006efe <__aeabi_dmul+0x24a>
 8006ee8:	ea81 0103 	eor.w	r1, r1, r3
 8006eec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006ef0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006ef4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006ef8:	f04f 0000 	mov.w	r0, #0
 8006efc:	bd70      	pop	{r4, r5, r6, pc}
 8006efe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006f02:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8006f06:	bd70      	pop	{r4, r5, r6, pc}

08006f08 <__aeabi_ddiv>:
 8006f08:	b570      	push	{r4, r5, r6, lr}
 8006f0a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006f0e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8006f12:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8006f16:	bf1d      	ittte	ne
 8006f18:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006f1c:	ea94 0f0c 	teqne	r4, ip
 8006f20:	ea95 0f0c 	teqne	r5, ip
 8006f24:	f000 f8a7 	bleq	8007076 <__aeabi_ddiv+0x16e>
 8006f28:	eba4 0405 	sub.w	r4, r4, r5
 8006f2c:	ea81 0e03 	eor.w	lr, r1, r3
 8006f30:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006f34:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006f38:	f000 8088 	beq.w	800704c <__aeabi_ddiv+0x144>
 8006f3c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006f40:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8006f44:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8006f48:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8006f4c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8006f50:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8006f54:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8006f58:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8006f5c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8006f60:	429d      	cmp	r5, r3
 8006f62:	bf08      	it	eq
 8006f64:	4296      	cmpeq	r6, r2
 8006f66:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8006f6a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8006f6e:	d202      	bcs.n	8006f76 <__aeabi_ddiv+0x6e>
 8006f70:	085b      	lsrs	r3, r3, #1
 8006f72:	ea4f 0232 	mov.w	r2, r2, rrx
 8006f76:	1ab6      	subs	r6, r6, r2
 8006f78:	eb65 0503 	sbc.w	r5, r5, r3
 8006f7c:	085b      	lsrs	r3, r3, #1
 8006f7e:	ea4f 0232 	mov.w	r2, r2, rrx
 8006f82:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006f86:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8006f8a:	ebb6 0e02 	subs.w	lr, r6, r2
 8006f8e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006f92:	bf22      	ittt	cs
 8006f94:	1ab6      	subcs	r6, r6, r2
 8006f96:	4675      	movcs	r5, lr
 8006f98:	ea40 000c 	orrcs.w	r0, r0, ip
 8006f9c:	085b      	lsrs	r3, r3, #1
 8006f9e:	ea4f 0232 	mov.w	r2, r2, rrx
 8006fa2:	ebb6 0e02 	subs.w	lr, r6, r2
 8006fa6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006faa:	bf22      	ittt	cs
 8006fac:	1ab6      	subcs	r6, r6, r2
 8006fae:	4675      	movcs	r5, lr
 8006fb0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8006fb4:	085b      	lsrs	r3, r3, #1
 8006fb6:	ea4f 0232 	mov.w	r2, r2, rrx
 8006fba:	ebb6 0e02 	subs.w	lr, r6, r2
 8006fbe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006fc2:	bf22      	ittt	cs
 8006fc4:	1ab6      	subcs	r6, r6, r2
 8006fc6:	4675      	movcs	r5, lr
 8006fc8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8006fcc:	085b      	lsrs	r3, r3, #1
 8006fce:	ea4f 0232 	mov.w	r2, r2, rrx
 8006fd2:	ebb6 0e02 	subs.w	lr, r6, r2
 8006fd6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006fda:	bf22      	ittt	cs
 8006fdc:	1ab6      	subcs	r6, r6, r2
 8006fde:	4675      	movcs	r5, lr
 8006fe0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8006fe4:	ea55 0e06 	orrs.w	lr, r5, r6
 8006fe8:	d018      	beq.n	800701c <__aeabi_ddiv+0x114>
 8006fea:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8006fee:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8006ff2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8006ff6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8006ffa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8006ffe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8007002:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8007006:	d1c0      	bne.n	8006f8a <__aeabi_ddiv+0x82>
 8007008:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800700c:	d10b      	bne.n	8007026 <__aeabi_ddiv+0x11e>
 800700e:	ea41 0100 	orr.w	r1, r1, r0
 8007012:	f04f 0000 	mov.w	r0, #0
 8007016:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800701a:	e7b6      	b.n	8006f8a <__aeabi_ddiv+0x82>
 800701c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007020:	bf04      	itt	eq
 8007022:	4301      	orreq	r1, r0
 8007024:	2000      	moveq	r0, #0
 8007026:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800702a:	bf88      	it	hi
 800702c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8007030:	f63f aeaf 	bhi.w	8006d92 <__aeabi_dmul+0xde>
 8007034:	ebb5 0c03 	subs.w	ip, r5, r3
 8007038:	bf04      	itt	eq
 800703a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800703e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8007042:	f150 0000 	adcs.w	r0, r0, #0
 8007046:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800704a:	bd70      	pop	{r4, r5, r6, pc}
 800704c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8007050:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8007054:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8007058:	bfc2      	ittt	gt
 800705a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800705e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8007062:	bd70      	popgt	{r4, r5, r6, pc}
 8007064:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007068:	f04f 0e00 	mov.w	lr, #0
 800706c:	3c01      	subs	r4, #1
 800706e:	e690      	b.n	8006d92 <__aeabi_dmul+0xde>
 8007070:	ea45 0e06 	orr.w	lr, r5, r6
 8007074:	e68d      	b.n	8006d92 <__aeabi_dmul+0xde>
 8007076:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800707a:	ea94 0f0c 	teq	r4, ip
 800707e:	bf08      	it	eq
 8007080:	ea95 0f0c 	teqeq	r5, ip
 8007084:	f43f af3b 	beq.w	8006efe <__aeabi_dmul+0x24a>
 8007088:	ea94 0f0c 	teq	r4, ip
 800708c:	d10a      	bne.n	80070a4 <__aeabi_ddiv+0x19c>
 800708e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8007092:	f47f af34 	bne.w	8006efe <__aeabi_dmul+0x24a>
 8007096:	ea95 0f0c 	teq	r5, ip
 800709a:	f47f af25 	bne.w	8006ee8 <__aeabi_dmul+0x234>
 800709e:	4610      	mov	r0, r2
 80070a0:	4619      	mov	r1, r3
 80070a2:	e72c      	b.n	8006efe <__aeabi_dmul+0x24a>
 80070a4:	ea95 0f0c 	teq	r5, ip
 80070a8:	d106      	bne.n	80070b8 <__aeabi_ddiv+0x1b0>
 80070aa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80070ae:	f43f aefd 	beq.w	8006eac <__aeabi_dmul+0x1f8>
 80070b2:	4610      	mov	r0, r2
 80070b4:	4619      	mov	r1, r3
 80070b6:	e722      	b.n	8006efe <__aeabi_dmul+0x24a>
 80070b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80070bc:	bf18      	it	ne
 80070be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80070c2:	f47f aec5 	bne.w	8006e50 <__aeabi_dmul+0x19c>
 80070c6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80070ca:	f47f af0d 	bne.w	8006ee8 <__aeabi_dmul+0x234>
 80070ce:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80070d2:	f47f aeeb 	bne.w	8006eac <__aeabi_dmul+0x1f8>
 80070d6:	e712      	b.n	8006efe <__aeabi_dmul+0x24a>

080070d8 <__gedf2>:
 80070d8:	f04f 3cff 	mov.w	ip, #4294967295
 80070dc:	e006      	b.n	80070ec <__cmpdf2+0x4>
 80070de:	bf00      	nop

080070e0 <__ledf2>:
 80070e0:	f04f 0c01 	mov.w	ip, #1
 80070e4:	e002      	b.n	80070ec <__cmpdf2+0x4>
 80070e6:	bf00      	nop

080070e8 <__cmpdf2>:
 80070e8:	f04f 0c01 	mov.w	ip, #1
 80070ec:	f84d cd04 	str.w	ip, [sp, #-4]!
 80070f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80070f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80070f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80070fc:	bf18      	it	ne
 80070fe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8007102:	d01b      	beq.n	800713c <__cmpdf2+0x54>
 8007104:	b001      	add	sp, #4
 8007106:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800710a:	bf0c      	ite	eq
 800710c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8007110:	ea91 0f03 	teqne	r1, r3
 8007114:	bf02      	ittt	eq
 8007116:	ea90 0f02 	teqeq	r0, r2
 800711a:	2000      	moveq	r0, #0
 800711c:	4770      	bxeq	lr
 800711e:	f110 0f00 	cmn.w	r0, #0
 8007122:	ea91 0f03 	teq	r1, r3
 8007126:	bf58      	it	pl
 8007128:	4299      	cmppl	r1, r3
 800712a:	bf08      	it	eq
 800712c:	4290      	cmpeq	r0, r2
 800712e:	bf2c      	ite	cs
 8007130:	17d8      	asrcs	r0, r3, #31
 8007132:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8007136:	f040 0001 	orr.w	r0, r0, #1
 800713a:	4770      	bx	lr
 800713c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8007140:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007144:	d102      	bne.n	800714c <__cmpdf2+0x64>
 8007146:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800714a:	d107      	bne.n	800715c <__cmpdf2+0x74>
 800714c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8007150:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007154:	d1d6      	bne.n	8007104 <__cmpdf2+0x1c>
 8007156:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800715a:	d0d3      	beq.n	8007104 <__cmpdf2+0x1c>
 800715c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop

08007164 <__aeabi_cdrcmple>:
 8007164:	4684      	mov	ip, r0
 8007166:	4610      	mov	r0, r2
 8007168:	4662      	mov	r2, ip
 800716a:	468c      	mov	ip, r1
 800716c:	4619      	mov	r1, r3
 800716e:	4663      	mov	r3, ip
 8007170:	e000      	b.n	8007174 <__aeabi_cdcmpeq>
 8007172:	bf00      	nop

08007174 <__aeabi_cdcmpeq>:
 8007174:	b501      	push	{r0, lr}
 8007176:	f7ff ffb7 	bl	80070e8 <__cmpdf2>
 800717a:	2800      	cmp	r0, #0
 800717c:	bf48      	it	mi
 800717e:	f110 0f00 	cmnmi.w	r0, #0
 8007182:	bd01      	pop	{r0, pc}

08007184 <__aeabi_dcmpeq>:
 8007184:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007188:	f7ff fff4 	bl	8007174 <__aeabi_cdcmpeq>
 800718c:	bf0c      	ite	eq
 800718e:	2001      	moveq	r0, #1
 8007190:	2000      	movne	r0, #0
 8007192:	f85d fb08 	ldr.w	pc, [sp], #8
 8007196:	bf00      	nop

08007198 <__aeabi_dcmplt>:
 8007198:	f84d ed08 	str.w	lr, [sp, #-8]!
 800719c:	f7ff ffea 	bl	8007174 <__aeabi_cdcmpeq>
 80071a0:	bf34      	ite	cc
 80071a2:	2001      	movcc	r0, #1
 80071a4:	2000      	movcs	r0, #0
 80071a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80071aa:	bf00      	nop

080071ac <__aeabi_dcmple>:
 80071ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80071b0:	f7ff ffe0 	bl	8007174 <__aeabi_cdcmpeq>
 80071b4:	bf94      	ite	ls
 80071b6:	2001      	movls	r0, #1
 80071b8:	2000      	movhi	r0, #0
 80071ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80071be:	bf00      	nop

080071c0 <__aeabi_dcmpge>:
 80071c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80071c4:	f7ff ffce 	bl	8007164 <__aeabi_cdrcmple>
 80071c8:	bf94      	ite	ls
 80071ca:	2001      	movls	r0, #1
 80071cc:	2000      	movhi	r0, #0
 80071ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80071d2:	bf00      	nop

080071d4 <__aeabi_dcmpgt>:
 80071d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80071d8:	f7ff ffc4 	bl	8007164 <__aeabi_cdrcmple>
 80071dc:	bf34      	ite	cc
 80071de:	2001      	movcc	r0, #1
 80071e0:	2000      	movcs	r0, #0
 80071e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80071e6:	bf00      	nop

080071e8 <__aeabi_dcmpun>:
 80071e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80071ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80071f0:	d102      	bne.n	80071f8 <__aeabi_dcmpun+0x10>
 80071f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80071f6:	d10a      	bne.n	800720e <__aeabi_dcmpun+0x26>
 80071f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80071fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007200:	d102      	bne.n	8007208 <__aeabi_dcmpun+0x20>
 8007202:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8007206:	d102      	bne.n	800720e <__aeabi_dcmpun+0x26>
 8007208:	f04f 0000 	mov.w	r0, #0
 800720c:	4770      	bx	lr
 800720e:	f04f 0001 	mov.w	r0, #1
 8007212:	4770      	bx	lr

08007214 <__aeabi_d2iz>:
 8007214:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8007218:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800721c:	d215      	bcs.n	800724a <__aeabi_d2iz+0x36>
 800721e:	d511      	bpl.n	8007244 <__aeabi_d2iz+0x30>
 8007220:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8007224:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8007228:	d912      	bls.n	8007250 <__aeabi_d2iz+0x3c>
 800722a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800722e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007232:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8007236:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800723a:	fa23 f002 	lsr.w	r0, r3, r2
 800723e:	bf18      	it	ne
 8007240:	4240      	negne	r0, r0
 8007242:	4770      	bx	lr
 8007244:	f04f 0000 	mov.w	r0, #0
 8007248:	4770      	bx	lr
 800724a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800724e:	d105      	bne.n	800725c <__aeabi_d2iz+0x48>
 8007250:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8007254:	bf08      	it	eq
 8007256:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800725a:	4770      	bx	lr
 800725c:	f04f 0000 	mov.w	r0, #0
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop

08007264 <__aeabi_d2f>:
 8007264:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8007268:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800726c:	bf24      	itt	cs
 800726e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8007272:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8007276:	d90d      	bls.n	8007294 <__aeabi_d2f+0x30>
 8007278:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800727c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8007280:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8007284:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8007288:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800728c:	bf08      	it	eq
 800728e:	f020 0001 	biceq.w	r0, r0, #1
 8007292:	4770      	bx	lr
 8007294:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8007298:	d121      	bne.n	80072de <__aeabi_d2f+0x7a>
 800729a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800729e:	bfbc      	itt	lt
 80072a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80072a4:	4770      	bxlt	lr
 80072a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80072aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80072ae:	f1c2 0218 	rsb	r2, r2, #24
 80072b2:	f1c2 0c20 	rsb	ip, r2, #32
 80072b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80072ba:	fa20 f002 	lsr.w	r0, r0, r2
 80072be:	bf18      	it	ne
 80072c0:	f040 0001 	orrne.w	r0, r0, #1
 80072c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80072c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80072cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80072d0:	ea40 000c 	orr.w	r0, r0, ip
 80072d4:	fa23 f302 	lsr.w	r3, r3, r2
 80072d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80072dc:	e7cc      	b.n	8007278 <__aeabi_d2f+0x14>
 80072de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80072e2:	d107      	bne.n	80072f4 <__aeabi_d2f+0x90>
 80072e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80072e8:	bf1e      	ittt	ne
 80072ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80072ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80072f2:	4770      	bxne	lr
 80072f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80072f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80072fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop

08007304 <__aeabi_uldivmod>:
 8007304:	b953      	cbnz	r3, 800731c <__aeabi_uldivmod+0x18>
 8007306:	b94a      	cbnz	r2, 800731c <__aeabi_uldivmod+0x18>
 8007308:	2900      	cmp	r1, #0
 800730a:	bf08      	it	eq
 800730c:	2800      	cmpeq	r0, #0
 800730e:	bf1c      	itt	ne
 8007310:	f04f 31ff 	movne.w	r1, #4294967295
 8007314:	f04f 30ff 	movne.w	r0, #4294967295
 8007318:	f001 b8f6 	b.w	8008508 <__aeabi_idiv0>
 800731c:	f1ad 0c08 	sub.w	ip, sp, #8
 8007320:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8007324:	f000 f806 	bl	8007334 <__udivmoddi4>
 8007328:	f8dd e004 	ldr.w	lr, [sp, #4]
 800732c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007330:	b004      	add	sp, #16
 8007332:	4770      	bx	lr

08007334 <__udivmoddi4>:
 8007334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007338:	468c      	mov	ip, r1
 800733a:	460d      	mov	r5, r1
 800733c:	4604      	mov	r4, r0
 800733e:	9e08      	ldr	r6, [sp, #32]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d151      	bne.n	80073e8 <__udivmoddi4+0xb4>
 8007344:	428a      	cmp	r2, r1
 8007346:	4617      	mov	r7, r2
 8007348:	d96d      	bls.n	8007426 <__udivmoddi4+0xf2>
 800734a:	fab2 fe82 	clz	lr, r2
 800734e:	f1be 0f00 	cmp.w	lr, #0
 8007352:	d00b      	beq.n	800736c <__udivmoddi4+0x38>
 8007354:	f1ce 0c20 	rsb	ip, lr, #32
 8007358:	fa01 f50e 	lsl.w	r5, r1, lr
 800735c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8007360:	fa02 f70e 	lsl.w	r7, r2, lr
 8007364:	ea4c 0c05 	orr.w	ip, ip, r5
 8007368:	fa00 f40e 	lsl.w	r4, r0, lr
 800736c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8007370:	0c25      	lsrs	r5, r4, #16
 8007372:	fbbc f8fa 	udiv	r8, ip, sl
 8007376:	fa1f f987 	uxth.w	r9, r7
 800737a:	fb0a cc18 	mls	ip, sl, r8, ip
 800737e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8007382:	fb08 f309 	mul.w	r3, r8, r9
 8007386:	42ab      	cmp	r3, r5
 8007388:	d90a      	bls.n	80073a0 <__udivmoddi4+0x6c>
 800738a:	19ed      	adds	r5, r5, r7
 800738c:	f108 32ff 	add.w	r2, r8, #4294967295
 8007390:	f080 8123 	bcs.w	80075da <__udivmoddi4+0x2a6>
 8007394:	42ab      	cmp	r3, r5
 8007396:	f240 8120 	bls.w	80075da <__udivmoddi4+0x2a6>
 800739a:	f1a8 0802 	sub.w	r8, r8, #2
 800739e:	443d      	add	r5, r7
 80073a0:	1aed      	subs	r5, r5, r3
 80073a2:	b2a4      	uxth	r4, r4
 80073a4:	fbb5 f0fa 	udiv	r0, r5, sl
 80073a8:	fb0a 5510 	mls	r5, sl, r0, r5
 80073ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80073b0:	fb00 f909 	mul.w	r9, r0, r9
 80073b4:	45a1      	cmp	r9, r4
 80073b6:	d909      	bls.n	80073cc <__udivmoddi4+0x98>
 80073b8:	19e4      	adds	r4, r4, r7
 80073ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80073be:	f080 810a 	bcs.w	80075d6 <__udivmoddi4+0x2a2>
 80073c2:	45a1      	cmp	r9, r4
 80073c4:	f240 8107 	bls.w	80075d6 <__udivmoddi4+0x2a2>
 80073c8:	3802      	subs	r0, #2
 80073ca:	443c      	add	r4, r7
 80073cc:	eba4 0409 	sub.w	r4, r4, r9
 80073d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80073d4:	2100      	movs	r1, #0
 80073d6:	2e00      	cmp	r6, #0
 80073d8:	d061      	beq.n	800749e <__udivmoddi4+0x16a>
 80073da:	fa24 f40e 	lsr.w	r4, r4, lr
 80073de:	2300      	movs	r3, #0
 80073e0:	6034      	str	r4, [r6, #0]
 80073e2:	6073      	str	r3, [r6, #4]
 80073e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073e8:	428b      	cmp	r3, r1
 80073ea:	d907      	bls.n	80073fc <__udivmoddi4+0xc8>
 80073ec:	2e00      	cmp	r6, #0
 80073ee:	d054      	beq.n	800749a <__udivmoddi4+0x166>
 80073f0:	2100      	movs	r1, #0
 80073f2:	e886 0021 	stmia.w	r6, {r0, r5}
 80073f6:	4608      	mov	r0, r1
 80073f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073fc:	fab3 f183 	clz	r1, r3
 8007400:	2900      	cmp	r1, #0
 8007402:	f040 808e 	bne.w	8007522 <__udivmoddi4+0x1ee>
 8007406:	42ab      	cmp	r3, r5
 8007408:	d302      	bcc.n	8007410 <__udivmoddi4+0xdc>
 800740a:	4282      	cmp	r2, r0
 800740c:	f200 80fa 	bhi.w	8007604 <__udivmoddi4+0x2d0>
 8007410:	1a84      	subs	r4, r0, r2
 8007412:	eb65 0503 	sbc.w	r5, r5, r3
 8007416:	2001      	movs	r0, #1
 8007418:	46ac      	mov	ip, r5
 800741a:	2e00      	cmp	r6, #0
 800741c:	d03f      	beq.n	800749e <__udivmoddi4+0x16a>
 800741e:	e886 1010 	stmia.w	r6, {r4, ip}
 8007422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007426:	b912      	cbnz	r2, 800742e <__udivmoddi4+0xfa>
 8007428:	2701      	movs	r7, #1
 800742a:	fbb7 f7f2 	udiv	r7, r7, r2
 800742e:	fab7 fe87 	clz	lr, r7
 8007432:	f1be 0f00 	cmp.w	lr, #0
 8007436:	d134      	bne.n	80074a2 <__udivmoddi4+0x16e>
 8007438:	1beb      	subs	r3, r5, r7
 800743a:	0c3a      	lsrs	r2, r7, #16
 800743c:	fa1f fc87 	uxth.w	ip, r7
 8007440:	2101      	movs	r1, #1
 8007442:	fbb3 f8f2 	udiv	r8, r3, r2
 8007446:	0c25      	lsrs	r5, r4, #16
 8007448:	fb02 3318 	mls	r3, r2, r8, r3
 800744c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8007450:	fb0c f308 	mul.w	r3, ip, r8
 8007454:	42ab      	cmp	r3, r5
 8007456:	d907      	bls.n	8007468 <__udivmoddi4+0x134>
 8007458:	19ed      	adds	r5, r5, r7
 800745a:	f108 30ff 	add.w	r0, r8, #4294967295
 800745e:	d202      	bcs.n	8007466 <__udivmoddi4+0x132>
 8007460:	42ab      	cmp	r3, r5
 8007462:	f200 80d1 	bhi.w	8007608 <__udivmoddi4+0x2d4>
 8007466:	4680      	mov	r8, r0
 8007468:	1aed      	subs	r5, r5, r3
 800746a:	b2a3      	uxth	r3, r4
 800746c:	fbb5 f0f2 	udiv	r0, r5, r2
 8007470:	fb02 5510 	mls	r5, r2, r0, r5
 8007474:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8007478:	fb0c fc00 	mul.w	ip, ip, r0
 800747c:	45a4      	cmp	ip, r4
 800747e:	d907      	bls.n	8007490 <__udivmoddi4+0x15c>
 8007480:	19e4      	adds	r4, r4, r7
 8007482:	f100 33ff 	add.w	r3, r0, #4294967295
 8007486:	d202      	bcs.n	800748e <__udivmoddi4+0x15a>
 8007488:	45a4      	cmp	ip, r4
 800748a:	f200 80b8 	bhi.w	80075fe <__udivmoddi4+0x2ca>
 800748e:	4618      	mov	r0, r3
 8007490:	eba4 040c 	sub.w	r4, r4, ip
 8007494:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8007498:	e79d      	b.n	80073d6 <__udivmoddi4+0xa2>
 800749a:	4631      	mov	r1, r6
 800749c:	4630      	mov	r0, r6
 800749e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074a2:	f1ce 0420 	rsb	r4, lr, #32
 80074a6:	fa05 f30e 	lsl.w	r3, r5, lr
 80074aa:	fa07 f70e 	lsl.w	r7, r7, lr
 80074ae:	fa20 f804 	lsr.w	r8, r0, r4
 80074b2:	0c3a      	lsrs	r2, r7, #16
 80074b4:	fa25 f404 	lsr.w	r4, r5, r4
 80074b8:	ea48 0803 	orr.w	r8, r8, r3
 80074bc:	fbb4 f1f2 	udiv	r1, r4, r2
 80074c0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80074c4:	fb02 4411 	mls	r4, r2, r1, r4
 80074c8:	fa1f fc87 	uxth.w	ip, r7
 80074cc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80074d0:	fb01 f30c 	mul.w	r3, r1, ip
 80074d4:	42ab      	cmp	r3, r5
 80074d6:	fa00 f40e 	lsl.w	r4, r0, lr
 80074da:	d909      	bls.n	80074f0 <__udivmoddi4+0x1bc>
 80074dc:	19ed      	adds	r5, r5, r7
 80074de:	f101 30ff 	add.w	r0, r1, #4294967295
 80074e2:	f080 808a 	bcs.w	80075fa <__udivmoddi4+0x2c6>
 80074e6:	42ab      	cmp	r3, r5
 80074e8:	f240 8087 	bls.w	80075fa <__udivmoddi4+0x2c6>
 80074ec:	3902      	subs	r1, #2
 80074ee:	443d      	add	r5, r7
 80074f0:	1aeb      	subs	r3, r5, r3
 80074f2:	fa1f f588 	uxth.w	r5, r8
 80074f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80074fa:	fb02 3310 	mls	r3, r2, r0, r3
 80074fe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8007502:	fb00 f30c 	mul.w	r3, r0, ip
 8007506:	42ab      	cmp	r3, r5
 8007508:	d907      	bls.n	800751a <__udivmoddi4+0x1e6>
 800750a:	19ed      	adds	r5, r5, r7
 800750c:	f100 38ff 	add.w	r8, r0, #4294967295
 8007510:	d26f      	bcs.n	80075f2 <__udivmoddi4+0x2be>
 8007512:	42ab      	cmp	r3, r5
 8007514:	d96d      	bls.n	80075f2 <__udivmoddi4+0x2be>
 8007516:	3802      	subs	r0, #2
 8007518:	443d      	add	r5, r7
 800751a:	1aeb      	subs	r3, r5, r3
 800751c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8007520:	e78f      	b.n	8007442 <__udivmoddi4+0x10e>
 8007522:	f1c1 0720 	rsb	r7, r1, #32
 8007526:	fa22 f807 	lsr.w	r8, r2, r7
 800752a:	408b      	lsls	r3, r1
 800752c:	fa05 f401 	lsl.w	r4, r5, r1
 8007530:	ea48 0303 	orr.w	r3, r8, r3
 8007534:	fa20 fe07 	lsr.w	lr, r0, r7
 8007538:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800753c:	40fd      	lsrs	r5, r7
 800753e:	ea4e 0e04 	orr.w	lr, lr, r4
 8007542:	fbb5 f9fc 	udiv	r9, r5, ip
 8007546:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800754a:	fb0c 5519 	mls	r5, ip, r9, r5
 800754e:	fa1f f883 	uxth.w	r8, r3
 8007552:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8007556:	fb09 f408 	mul.w	r4, r9, r8
 800755a:	42ac      	cmp	r4, r5
 800755c:	fa02 f201 	lsl.w	r2, r2, r1
 8007560:	fa00 fa01 	lsl.w	sl, r0, r1
 8007564:	d908      	bls.n	8007578 <__udivmoddi4+0x244>
 8007566:	18ed      	adds	r5, r5, r3
 8007568:	f109 30ff 	add.w	r0, r9, #4294967295
 800756c:	d243      	bcs.n	80075f6 <__udivmoddi4+0x2c2>
 800756e:	42ac      	cmp	r4, r5
 8007570:	d941      	bls.n	80075f6 <__udivmoddi4+0x2c2>
 8007572:	f1a9 0902 	sub.w	r9, r9, #2
 8007576:	441d      	add	r5, r3
 8007578:	1b2d      	subs	r5, r5, r4
 800757a:	fa1f fe8e 	uxth.w	lr, lr
 800757e:	fbb5 f0fc 	udiv	r0, r5, ip
 8007582:	fb0c 5510 	mls	r5, ip, r0, r5
 8007586:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800758a:	fb00 f808 	mul.w	r8, r0, r8
 800758e:	45a0      	cmp	r8, r4
 8007590:	d907      	bls.n	80075a2 <__udivmoddi4+0x26e>
 8007592:	18e4      	adds	r4, r4, r3
 8007594:	f100 35ff 	add.w	r5, r0, #4294967295
 8007598:	d229      	bcs.n	80075ee <__udivmoddi4+0x2ba>
 800759a:	45a0      	cmp	r8, r4
 800759c:	d927      	bls.n	80075ee <__udivmoddi4+0x2ba>
 800759e:	3802      	subs	r0, #2
 80075a0:	441c      	add	r4, r3
 80075a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80075a6:	eba4 0408 	sub.w	r4, r4, r8
 80075aa:	fba0 8902 	umull	r8, r9, r0, r2
 80075ae:	454c      	cmp	r4, r9
 80075b0:	46c6      	mov	lr, r8
 80075b2:	464d      	mov	r5, r9
 80075b4:	d315      	bcc.n	80075e2 <__udivmoddi4+0x2ae>
 80075b6:	d012      	beq.n	80075de <__udivmoddi4+0x2aa>
 80075b8:	b156      	cbz	r6, 80075d0 <__udivmoddi4+0x29c>
 80075ba:	ebba 030e 	subs.w	r3, sl, lr
 80075be:	eb64 0405 	sbc.w	r4, r4, r5
 80075c2:	fa04 f707 	lsl.w	r7, r4, r7
 80075c6:	40cb      	lsrs	r3, r1
 80075c8:	431f      	orrs	r7, r3
 80075ca:	40cc      	lsrs	r4, r1
 80075cc:	6037      	str	r7, [r6, #0]
 80075ce:	6074      	str	r4, [r6, #4]
 80075d0:	2100      	movs	r1, #0
 80075d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075d6:	4618      	mov	r0, r3
 80075d8:	e6f8      	b.n	80073cc <__udivmoddi4+0x98>
 80075da:	4690      	mov	r8, r2
 80075dc:	e6e0      	b.n	80073a0 <__udivmoddi4+0x6c>
 80075de:	45c2      	cmp	sl, r8
 80075e0:	d2ea      	bcs.n	80075b8 <__udivmoddi4+0x284>
 80075e2:	ebb8 0e02 	subs.w	lr, r8, r2
 80075e6:	eb69 0503 	sbc.w	r5, r9, r3
 80075ea:	3801      	subs	r0, #1
 80075ec:	e7e4      	b.n	80075b8 <__udivmoddi4+0x284>
 80075ee:	4628      	mov	r0, r5
 80075f0:	e7d7      	b.n	80075a2 <__udivmoddi4+0x26e>
 80075f2:	4640      	mov	r0, r8
 80075f4:	e791      	b.n	800751a <__udivmoddi4+0x1e6>
 80075f6:	4681      	mov	r9, r0
 80075f8:	e7be      	b.n	8007578 <__udivmoddi4+0x244>
 80075fa:	4601      	mov	r1, r0
 80075fc:	e778      	b.n	80074f0 <__udivmoddi4+0x1bc>
 80075fe:	3802      	subs	r0, #2
 8007600:	443c      	add	r4, r7
 8007602:	e745      	b.n	8007490 <__udivmoddi4+0x15c>
 8007604:	4608      	mov	r0, r1
 8007606:	e708      	b.n	800741a <__udivmoddi4+0xe6>
 8007608:	f1a8 0802 	sub.w	r8, r8, #2
 800760c:	443d      	add	r5, r7
 800760e:	e72b      	b.n	8007468 <__udivmoddi4+0x134>

08007610 <selfrel_offset31>:
 8007610:	6803      	ldr	r3, [r0, #0]
 8007612:	005a      	lsls	r2, r3, #1
 8007614:	bf4c      	ite	mi
 8007616:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800761a:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800761e:	4418      	add	r0, r3
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop

08007624 <search_EIT_table>:
 8007624:	b361      	cbz	r1, 8007680 <search_EIT_table+0x5c>
 8007626:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800762a:	f101 3aff 	add.w	sl, r1, #4294967295
 800762e:	4690      	mov	r8, r2
 8007630:	4606      	mov	r6, r0
 8007632:	46d1      	mov	r9, sl
 8007634:	2700      	movs	r7, #0
 8007636:	eb07 0409 	add.w	r4, r7, r9
 800763a:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 800763e:	1064      	asrs	r4, r4, #1
 8007640:	00e5      	lsls	r5, r4, #3
 8007642:	1971      	adds	r1, r6, r5
 8007644:	4608      	mov	r0, r1
 8007646:	f7ff ffe3 	bl	8007610 <selfrel_offset31>
 800764a:	45a2      	cmp	sl, r4
 800764c:	4683      	mov	fp, r0
 800764e:	f105 0008 	add.w	r0, r5, #8
 8007652:	4430      	add	r0, r6
 8007654:	d009      	beq.n	800766a <search_EIT_table+0x46>
 8007656:	f7ff ffdb 	bl	8007610 <selfrel_offset31>
 800765a:	45c3      	cmp	fp, r8
 800765c:	f100 30ff 	add.w	r0, r0, #4294967295
 8007660:	d805      	bhi.n	800766e <search_EIT_table+0x4a>
 8007662:	4540      	cmp	r0, r8
 8007664:	d209      	bcs.n	800767a <search_EIT_table+0x56>
 8007666:	1c67      	adds	r7, r4, #1
 8007668:	e7e5      	b.n	8007636 <search_EIT_table+0x12>
 800766a:	45c3      	cmp	fp, r8
 800766c:	d905      	bls.n	800767a <search_EIT_table+0x56>
 800766e:	42a7      	cmp	r7, r4
 8007670:	d002      	beq.n	8007678 <search_EIT_table+0x54>
 8007672:	f104 39ff 	add.w	r9, r4, #4294967295
 8007676:	e7de      	b.n	8007636 <search_EIT_table+0x12>
 8007678:	2100      	movs	r1, #0
 800767a:	4608      	mov	r0, r1
 800767c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007680:	4608      	mov	r0, r1
 8007682:	4770      	bx	lr

08007684 <__gnu_unwind_get_pr_addr>:
 8007684:	2801      	cmp	r0, #1
 8007686:	d007      	beq.n	8007698 <__gnu_unwind_get_pr_addr+0x14>
 8007688:	2802      	cmp	r0, #2
 800768a:	d007      	beq.n	800769c <__gnu_unwind_get_pr_addr+0x18>
 800768c:	4b04      	ldr	r3, [pc, #16]	; (80076a0 <__gnu_unwind_get_pr_addr+0x1c>)
 800768e:	2800      	cmp	r0, #0
 8007690:	bf0c      	ite	eq
 8007692:	4618      	moveq	r0, r3
 8007694:	2000      	movne	r0, #0
 8007696:	4770      	bx	lr
 8007698:	4802      	ldr	r0, [pc, #8]	; (80076a4 <__gnu_unwind_get_pr_addr+0x20>)
 800769a:	4770      	bx	lr
 800769c:	4802      	ldr	r0, [pc, #8]	; (80076a8 <__gnu_unwind_get_pr_addr+0x24>)
 800769e:	4770      	bx	lr
 80076a0:	08007d89 	.word	0x08007d89
 80076a4:	08007d8d 	.word	0x08007d8d
 80076a8:	08007d91 	.word	0x08007d91

080076ac <get_eit_entry>:
 80076ac:	b530      	push	{r4, r5, lr}
 80076ae:	4b24      	ldr	r3, [pc, #144]	; (8007740 <get_eit_entry+0x94>)
 80076b0:	b083      	sub	sp, #12
 80076b2:	4604      	mov	r4, r0
 80076b4:	1e8d      	subs	r5, r1, #2
 80076b6:	b37b      	cbz	r3, 8007718 <get_eit_entry+0x6c>
 80076b8:	a901      	add	r1, sp, #4
 80076ba:	4628      	mov	r0, r5
 80076bc:	f3af 8000 	nop.w
 80076c0:	b320      	cbz	r0, 800770c <get_eit_entry+0x60>
 80076c2:	9901      	ldr	r1, [sp, #4]
 80076c4:	462a      	mov	r2, r5
 80076c6:	f7ff ffad 	bl	8007624 <search_EIT_table>
 80076ca:	4601      	mov	r1, r0
 80076cc:	b1f0      	cbz	r0, 800770c <get_eit_entry+0x60>
 80076ce:	f7ff ff9f 	bl	8007610 <selfrel_offset31>
 80076d2:	684b      	ldr	r3, [r1, #4]
 80076d4:	64a0      	str	r0, [r4, #72]	; 0x48
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d012      	beq.n	8007700 <get_eit_entry+0x54>
 80076da:	2b00      	cmp	r3, #0
 80076dc:	f101 0004 	add.w	r0, r1, #4
 80076e0:	db20      	blt.n	8007724 <get_eit_entry+0x78>
 80076e2:	f7ff ff95 	bl	8007610 <selfrel_offset31>
 80076e6:	2300      	movs	r3, #0
 80076e8:	64e0      	str	r0, [r4, #76]	; 0x4c
 80076ea:	6523      	str	r3, [r4, #80]	; 0x50
 80076ec:	6803      	ldr	r3, [r0, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	db1c      	blt.n	800772c <get_eit_entry+0x80>
 80076f2:	f7ff ff8d 	bl	8007610 <selfrel_offset31>
 80076f6:	2300      	movs	r3, #0
 80076f8:	6120      	str	r0, [r4, #16]
 80076fa:	4618      	mov	r0, r3
 80076fc:	b003      	add	sp, #12
 80076fe:	bd30      	pop	{r4, r5, pc}
 8007700:	2300      	movs	r3, #0
 8007702:	6123      	str	r3, [r4, #16]
 8007704:	2305      	movs	r3, #5
 8007706:	4618      	mov	r0, r3
 8007708:	b003      	add	sp, #12
 800770a:	bd30      	pop	{r4, r5, pc}
 800770c:	2300      	movs	r3, #0
 800770e:	6123      	str	r3, [r4, #16]
 8007710:	2309      	movs	r3, #9
 8007712:	4618      	mov	r0, r3
 8007714:	b003      	add	sp, #12
 8007716:	bd30      	pop	{r4, r5, pc}
 8007718:	490a      	ldr	r1, [pc, #40]	; (8007744 <get_eit_entry+0x98>)
 800771a:	480b      	ldr	r0, [pc, #44]	; (8007748 <get_eit_entry+0x9c>)
 800771c:	1a09      	subs	r1, r1, r0
 800771e:	10c9      	asrs	r1, r1, #3
 8007720:	9101      	str	r1, [sp, #4]
 8007722:	e7cf      	b.n	80076c4 <get_eit_entry+0x18>
 8007724:	2301      	movs	r3, #1
 8007726:	64e0      	str	r0, [r4, #76]	; 0x4c
 8007728:	6523      	str	r3, [r4, #80]	; 0x50
 800772a:	e7df      	b.n	80076ec <get_eit_entry+0x40>
 800772c:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8007730:	f7ff ffa8 	bl	8007684 <__gnu_unwind_get_pr_addr>
 8007734:	2800      	cmp	r0, #0
 8007736:	6120      	str	r0, [r4, #16]
 8007738:	bf14      	ite	ne
 800773a:	2300      	movne	r3, #0
 800773c:	2309      	moveq	r3, #9
 800773e:	e7dc      	b.n	80076fa <get_eit_entry+0x4e>
 8007740:	00000000 	.word	0x00000000
 8007744:	08018b54 	.word	0x08018b54
 8007748:	08018864 	.word	0x08018864

0800774c <restore_non_core_regs>:
 800774c:	6803      	ldr	r3, [r0, #0]
 800774e:	07da      	lsls	r2, r3, #31
 8007750:	b510      	push	{r4, lr}
 8007752:	4604      	mov	r4, r0
 8007754:	d406      	bmi.n	8007764 <restore_non_core_regs+0x18>
 8007756:	079b      	lsls	r3, r3, #30
 8007758:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800775c:	d509      	bpl.n	8007772 <restore_non_core_regs+0x26>
 800775e:	f000 fc51 	bl	8008004 <__gnu_Unwind_Restore_VFP_D>
 8007762:	6823      	ldr	r3, [r4, #0]
 8007764:	0759      	lsls	r1, r3, #29
 8007766:	d509      	bpl.n	800777c <restore_non_core_regs+0x30>
 8007768:	071a      	lsls	r2, r3, #28
 800776a:	d50e      	bpl.n	800778a <restore_non_core_regs+0x3e>
 800776c:	06db      	lsls	r3, r3, #27
 800776e:	d513      	bpl.n	8007798 <restore_non_core_regs+0x4c>
 8007770:	bd10      	pop	{r4, pc}
 8007772:	f000 fc3f 	bl	8007ff4 <__gnu_Unwind_Restore_VFP>
 8007776:	6823      	ldr	r3, [r4, #0]
 8007778:	0759      	lsls	r1, r3, #29
 800777a:	d4f5      	bmi.n	8007768 <restore_non_core_regs+0x1c>
 800777c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007780:	f000 fc48 	bl	8008014 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8007784:	6823      	ldr	r3, [r4, #0]
 8007786:	071a      	lsls	r2, r3, #28
 8007788:	d4f0      	bmi.n	800776c <restore_non_core_regs+0x20>
 800778a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800778e:	f000 fc49 	bl	8008024 <__gnu_Unwind_Restore_WMMXD>
 8007792:	6823      	ldr	r3, [r4, #0]
 8007794:	06db      	lsls	r3, r3, #27
 8007796:	d4eb      	bmi.n	8007770 <restore_non_core_regs+0x24>
 8007798:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 800779c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077a0:	f000 bc84 	b.w	80080ac <__gnu_Unwind_Restore_WMMXC>

080077a4 <_Unwind_decode_typeinfo_ptr.isra.0>:
 80077a4:	6803      	ldr	r3, [r0, #0]
 80077a6:	b103      	cbz	r3, 80077aa <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 80077a8:	4403      	add	r3, r0
 80077aa:	4618      	mov	r0, r3
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop

080077b0 <__gnu_unwind_24bit.isra.1>:
 80077b0:	2009      	movs	r0, #9
 80077b2:	4770      	bx	lr

080077b4 <_Unwind_DebugHook>:
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop

080077b8 <unwind_phase2>:
 80077b8:	b570      	push	{r4, r5, r6, lr}
 80077ba:	4604      	mov	r4, r0
 80077bc:	460d      	mov	r5, r1
 80077be:	e008      	b.n	80077d2 <unwind_phase2+0x1a>
 80077c0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80077c2:	6163      	str	r3, [r4, #20]
 80077c4:	462a      	mov	r2, r5
 80077c6:	6923      	ldr	r3, [r4, #16]
 80077c8:	4621      	mov	r1, r4
 80077ca:	2001      	movs	r0, #1
 80077cc:	4798      	blx	r3
 80077ce:	2808      	cmp	r0, #8
 80077d0:	d108      	bne.n	80077e4 <unwind_phase2+0x2c>
 80077d2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80077d4:	4620      	mov	r0, r4
 80077d6:	f7ff ff69 	bl	80076ac <get_eit_entry>
 80077da:	4606      	mov	r6, r0
 80077dc:	2800      	cmp	r0, #0
 80077de:	d0ef      	beq.n	80077c0 <unwind_phase2+0x8>
 80077e0:	f009 ffb9 	bl	8011756 <abort>
 80077e4:	2807      	cmp	r0, #7
 80077e6:	d1fb      	bne.n	80077e0 <unwind_phase2+0x28>
 80077e8:	4630      	mov	r0, r6
 80077ea:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80077ec:	f7ff ffe2 	bl	80077b4 <_Unwind_DebugHook>
 80077f0:	1d28      	adds	r0, r5, #4
 80077f2:	f000 fbf3 	bl	8007fdc <__restore_core_regs>
 80077f6:	bf00      	nop

080077f8 <unwind_phase2_forced>:
 80077f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077fc:	1d0c      	adds	r4, r1, #4
 80077fe:	4605      	mov	r5, r0
 8007800:	4692      	mov	sl, r2
 8007802:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007804:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8007808:	ae03      	add	r6, sp, #12
 800780a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800780c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800780e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007810:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007812:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007814:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007818:	ac02      	add	r4, sp, #8
 800781a:	f8d5 800c 	ldr.w	r8, [r5, #12]
 800781e:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8007822:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8007826:	2300      	movs	r3, #0
 8007828:	4628      	mov	r0, r5
 800782a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800782c:	6023      	str	r3, [r4, #0]
 800782e:	f7ff ff3d 	bl	80076ac <get_eit_entry>
 8007832:	f1ba 0f00 	cmp.w	sl, #0
 8007836:	4607      	mov	r7, r0
 8007838:	bf14      	ite	ne
 800783a:	260a      	movne	r6, #10
 800783c:	2609      	moveq	r6, #9
 800783e:	b17f      	cbz	r7, 8007860 <unwind_phase2_forced+0x68>
 8007840:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007842:	f046 0110 	orr.w	r1, r6, #16
 8007846:	e88d 0210 	stmia.w	sp, {r4, r9}
 800784a:	462a      	mov	r2, r5
 800784c:	6463      	str	r3, [r4, #68]	; 0x44
 800784e:	2001      	movs	r0, #1
 8007850:	462b      	mov	r3, r5
 8007852:	47c0      	blx	r8
 8007854:	bb78      	cbnz	r0, 80078b6 <unwind_phase2_forced+0xbe>
 8007856:	4638      	mov	r0, r7
 8007858:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800785c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007860:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007862:	616b      	str	r3, [r5, #20]
 8007864:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007868:	4621      	mov	r1, r4
 800786a:	a87a      	add	r0, sp, #488	; 0x1e8
 800786c:	f00a fc2d 	bl	80120ca <memcpy>
 8007870:	692b      	ldr	r3, [r5, #16]
 8007872:	aa7a      	add	r2, sp, #488	; 0x1e8
 8007874:	4629      	mov	r1, r5
 8007876:	4630      	mov	r0, r6
 8007878:	4798      	blx	r3
 800787a:	9b88      	ldr	r3, [sp, #544]	; 0x220
 800787c:	4682      	mov	sl, r0
 800787e:	e88d 0210 	stmia.w	sp, {r4, r9}
 8007882:	4631      	mov	r1, r6
 8007884:	6463      	str	r3, [r4, #68]	; 0x44
 8007886:	462a      	mov	r2, r5
 8007888:	462b      	mov	r3, r5
 800788a:	2001      	movs	r0, #1
 800788c:	47c0      	blx	r8
 800788e:	b990      	cbnz	r0, 80078b6 <unwind_phase2_forced+0xbe>
 8007890:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007894:	a97a      	add	r1, sp, #488	; 0x1e8
 8007896:	4620      	mov	r0, r4
 8007898:	f00a fc17 	bl	80120ca <memcpy>
 800789c:	f1ba 0f08 	cmp.w	sl, #8
 80078a0:	d106      	bne.n	80078b0 <unwind_phase2_forced+0xb8>
 80078a2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80078a4:	4628      	mov	r0, r5
 80078a6:	f7ff ff01 	bl	80076ac <get_eit_entry>
 80078aa:	2609      	movs	r6, #9
 80078ac:	4607      	mov	r7, r0
 80078ae:	e7c6      	b.n	800783e <unwind_phase2_forced+0x46>
 80078b0:	f1ba 0f07 	cmp.w	sl, #7
 80078b4:	d005      	beq.n	80078c2 <unwind_phase2_forced+0xca>
 80078b6:	2709      	movs	r7, #9
 80078b8:	4638      	mov	r0, r7
 80078ba:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80078be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078c2:	4638      	mov	r0, r7
 80078c4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80078c6:	f7ff ff75 	bl	80077b4 <_Unwind_DebugHook>
 80078ca:	a803      	add	r0, sp, #12
 80078cc:	f000 fb86 	bl	8007fdc <__restore_core_regs>

080078d0 <_Unwind_GetCFA>:
 80078d0:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80078d2:	4770      	bx	lr

080078d4 <__gnu_Unwind_RaiseException>:
 80078d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078d6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80078d8:	640b      	str	r3, [r1, #64]	; 0x40
 80078da:	1d0e      	adds	r6, r1, #4
 80078dc:	460f      	mov	r7, r1
 80078de:	4604      	mov	r4, r0
 80078e0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80078e2:	b0f9      	sub	sp, #484	; 0x1e4
 80078e4:	ad01      	add	r5, sp, #4
 80078e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80078e8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80078ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80078ec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80078ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80078f0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80078f4:	f04f 36ff 	mov.w	r6, #4294967295
 80078f8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80078fc:	9600      	str	r6, [sp, #0]
 80078fe:	e006      	b.n	800790e <__gnu_Unwind_RaiseException+0x3a>
 8007900:	6923      	ldr	r3, [r4, #16]
 8007902:	466a      	mov	r2, sp
 8007904:	4621      	mov	r1, r4
 8007906:	4798      	blx	r3
 8007908:	2808      	cmp	r0, #8
 800790a:	4605      	mov	r5, r0
 800790c:	d108      	bne.n	8007920 <__gnu_Unwind_RaiseException+0x4c>
 800790e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007910:	4620      	mov	r0, r4
 8007912:	f7ff fecb 	bl	80076ac <get_eit_entry>
 8007916:	2800      	cmp	r0, #0
 8007918:	d0f2      	beq.n	8007900 <__gnu_Unwind_RaiseException+0x2c>
 800791a:	2009      	movs	r0, #9
 800791c:	b079      	add	sp, #484	; 0x1e4
 800791e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007920:	4668      	mov	r0, sp
 8007922:	f7ff ff13 	bl	800774c <restore_non_core_regs>
 8007926:	2d06      	cmp	r5, #6
 8007928:	d1f7      	bne.n	800791a <__gnu_Unwind_RaiseException+0x46>
 800792a:	4639      	mov	r1, r7
 800792c:	4620      	mov	r0, r4
 800792e:	f7ff ff43 	bl	80077b8 <unwind_phase2>
 8007932:	bf00      	nop

08007934 <__gnu_Unwind_ForcedUnwind>:
 8007934:	b430      	push	{r4, r5}
 8007936:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8007938:	60c1      	str	r1, [r0, #12]
 800793a:	6182      	str	r2, [r0, #24]
 800793c:	4619      	mov	r1, r3
 800793e:	641d      	str	r5, [r3, #64]	; 0x40
 8007940:	2200      	movs	r2, #0
 8007942:	bc30      	pop	{r4, r5}
 8007944:	e758      	b.n	80077f8 <unwind_phase2_forced>
 8007946:	bf00      	nop

08007948 <__gnu_Unwind_Resume>:
 8007948:	b570      	push	{r4, r5, r6, lr}
 800794a:	68c6      	ldr	r6, [r0, #12]
 800794c:	6943      	ldr	r3, [r0, #20]
 800794e:	640b      	str	r3, [r1, #64]	; 0x40
 8007950:	b126      	cbz	r6, 800795c <__gnu_Unwind_Resume+0x14>
 8007952:	2201      	movs	r2, #1
 8007954:	f7ff ff50 	bl	80077f8 <unwind_phase2_forced>
 8007958:	f009 fefd 	bl	8011756 <abort>
 800795c:	6903      	ldr	r3, [r0, #16]
 800795e:	460a      	mov	r2, r1
 8007960:	4604      	mov	r4, r0
 8007962:	460d      	mov	r5, r1
 8007964:	4601      	mov	r1, r0
 8007966:	2002      	movs	r0, #2
 8007968:	4798      	blx	r3
 800796a:	2807      	cmp	r0, #7
 800796c:	d007      	beq.n	800797e <__gnu_Unwind_Resume+0x36>
 800796e:	2808      	cmp	r0, #8
 8007970:	d103      	bne.n	800797a <__gnu_Unwind_Resume+0x32>
 8007972:	4629      	mov	r1, r5
 8007974:	4620      	mov	r0, r4
 8007976:	f7ff ff1f 	bl	80077b8 <unwind_phase2>
 800797a:	f009 feec 	bl	8011756 <abort>
 800797e:	4630      	mov	r0, r6
 8007980:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8007982:	f7ff ff17 	bl	80077b4 <_Unwind_DebugHook>
 8007986:	1d28      	adds	r0, r5, #4
 8007988:	f000 fb28 	bl	8007fdc <__restore_core_regs>

0800798c <__gnu_Unwind_Resume_or_Rethrow>:
 800798c:	68c2      	ldr	r2, [r0, #12]
 800798e:	b11a      	cbz	r2, 8007998 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8007990:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8007992:	640a      	str	r2, [r1, #64]	; 0x40
 8007994:	2200      	movs	r2, #0
 8007996:	e72f      	b.n	80077f8 <unwind_phase2_forced>
 8007998:	e79c      	b.n	80078d4 <__gnu_Unwind_RaiseException>
 800799a:	bf00      	nop

0800799c <_Unwind_Complete>:
 800799c:	4770      	bx	lr
 800799e:	bf00      	nop

080079a0 <_Unwind_DeleteException>:
 80079a0:	6883      	ldr	r3, [r0, #8]
 80079a2:	b113      	cbz	r3, 80079aa <_Unwind_DeleteException+0xa>
 80079a4:	4601      	mov	r1, r0
 80079a6:	2001      	movs	r0, #1
 80079a8:	4718      	bx	r3
 80079aa:	4770      	bx	lr

080079ac <_Unwind_VRS_Get>:
 80079ac:	b500      	push	{lr}
 80079ae:	2904      	cmp	r1, #4
 80079b0:	d807      	bhi.n	80079c2 <_Unwind_VRS_Get+0x16>
 80079b2:	e8df f001 	tbb	[pc, r1]
 80079b6:	0903      	.short	0x0903
 80079b8:	0906      	.short	0x0906
 80079ba:	09          	.byte	0x09
 80079bb:	00          	.byte	0x00
 80079bc:	b90b      	cbnz	r3, 80079c2 <_Unwind_VRS_Get+0x16>
 80079be:	2a0f      	cmp	r2, #15
 80079c0:	d905      	bls.n	80079ce <_Unwind_VRS_Get+0x22>
 80079c2:	2002      	movs	r0, #2
 80079c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80079c8:	2001      	movs	r0, #1
 80079ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80079ce:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80079d2:	4618      	mov	r0, r3
 80079d4:	6853      	ldr	r3, [r2, #4]
 80079d6:	9a01      	ldr	r2, [sp, #4]
 80079d8:	6013      	str	r3, [r2, #0]
 80079da:	f85d fb04 	ldr.w	pc, [sp], #4
 80079de:	bf00      	nop

080079e0 <_Unwind_GetGR>:
 80079e0:	b510      	push	{r4, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	2300      	movs	r3, #0
 80079e6:	ac03      	add	r4, sp, #12
 80079e8:	460a      	mov	r2, r1
 80079ea:	9400      	str	r4, [sp, #0]
 80079ec:	4619      	mov	r1, r3
 80079ee:	f7ff ffdd 	bl	80079ac <_Unwind_VRS_Get>
 80079f2:	9803      	ldr	r0, [sp, #12]
 80079f4:	b004      	add	sp, #16
 80079f6:	bd10      	pop	{r4, pc}

080079f8 <_Unwind_VRS_Set>:
 80079f8:	b500      	push	{lr}
 80079fa:	2904      	cmp	r1, #4
 80079fc:	d807      	bhi.n	8007a0e <_Unwind_VRS_Set+0x16>
 80079fe:	e8df f001 	tbb	[pc, r1]
 8007a02:	0903      	.short	0x0903
 8007a04:	0906      	.short	0x0906
 8007a06:	09          	.byte	0x09
 8007a07:	00          	.byte	0x00
 8007a08:	b90b      	cbnz	r3, 8007a0e <_Unwind_VRS_Set+0x16>
 8007a0a:	2a0f      	cmp	r2, #15
 8007a0c:	d905      	bls.n	8007a1a <_Unwind_VRS_Set+0x22>
 8007a0e:	2002      	movs	r0, #2
 8007a10:	f85d fb04 	ldr.w	pc, [sp], #4
 8007a14:	2001      	movs	r0, #1
 8007a16:	f85d fb04 	ldr.w	pc, [sp], #4
 8007a1a:	9901      	ldr	r1, [sp, #4]
 8007a1c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007a20:	6809      	ldr	r1, [r1, #0]
 8007a22:	6051      	str	r1, [r2, #4]
 8007a24:	4618      	mov	r0, r3
 8007a26:	f85d fb04 	ldr.w	pc, [sp], #4
 8007a2a:	bf00      	nop

08007a2c <_Unwind_SetGR>:
 8007a2c:	b510      	push	{r4, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	ac04      	add	r4, sp, #16
 8007a32:	2300      	movs	r3, #0
 8007a34:	f844 2d04 	str.w	r2, [r4, #-4]!
 8007a38:	460a      	mov	r2, r1
 8007a3a:	9400      	str	r4, [sp, #0]
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	f7ff ffdb 	bl	80079f8 <_Unwind_VRS_Set>
 8007a42:	b004      	add	sp, #16
 8007a44:	bd10      	pop	{r4, pc}
 8007a46:	bf00      	nop

08007a48 <__gnu_Unwind_Backtrace>:
 8007a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a4a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8007a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8007a4e:	1d15      	adds	r5, r2, #4
 8007a50:	4607      	mov	r7, r0
 8007a52:	460e      	mov	r6, r1
 8007a54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007a56:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8007a5a:	ac17      	add	r4, sp, #92	; 0x5c
 8007a5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007a60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007a64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a66:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007a6a:	f04f 35ff 	mov.w	r5, #4294967295
 8007a6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007a72:	9516      	str	r5, [sp, #88]	; 0x58
 8007a74:	e010      	b.n	8007a98 <__gnu_Unwind_Backtrace+0x50>
 8007a76:	a816      	add	r0, sp, #88	; 0x58
 8007a78:	f7ff ffd8 	bl	8007a2c <_Unwind_SetGR>
 8007a7c:	4631      	mov	r1, r6
 8007a7e:	a816      	add	r0, sp, #88	; 0x58
 8007a80:	47b8      	blx	r7
 8007a82:	aa16      	add	r2, sp, #88	; 0x58
 8007a84:	4669      	mov	r1, sp
 8007a86:	b978      	cbnz	r0, 8007aa8 <__gnu_Unwind_Backtrace+0x60>
 8007a88:	9b04      	ldr	r3, [sp, #16]
 8007a8a:	2008      	movs	r0, #8
 8007a8c:	4798      	blx	r3
 8007a8e:	2805      	cmp	r0, #5
 8007a90:	4604      	mov	r4, r0
 8007a92:	d00a      	beq.n	8007aaa <__gnu_Unwind_Backtrace+0x62>
 8007a94:	2809      	cmp	r0, #9
 8007a96:	d007      	beq.n	8007aa8 <__gnu_Unwind_Backtrace+0x60>
 8007a98:	9926      	ldr	r1, [sp, #152]	; 0x98
 8007a9a:	4668      	mov	r0, sp
 8007a9c:	f7ff fe06 	bl	80076ac <get_eit_entry>
 8007aa0:	466a      	mov	r2, sp
 8007aa2:	210c      	movs	r1, #12
 8007aa4:	2800      	cmp	r0, #0
 8007aa6:	d0e6      	beq.n	8007a76 <__gnu_Unwind_Backtrace+0x2e>
 8007aa8:	2409      	movs	r4, #9
 8007aaa:	a816      	add	r0, sp, #88	; 0x58
 8007aac:	f7ff fe4e 	bl	800774c <restore_non_core_regs>
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8007ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007ab8 <__gnu_unwind_pr_common>:
 8007ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007abc:	460d      	mov	r5, r1
 8007abe:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007ac0:	b08b      	sub	sp, #44	; 0x2c
 8007ac2:	1d0c      	adds	r4, r1, #4
 8007ac4:	6809      	ldr	r1, [r1, #0]
 8007ac6:	9107      	str	r1, [sp, #28]
 8007ac8:	4691      	mov	r9, r2
 8007aca:	9408      	str	r4, [sp, #32]
 8007acc:	f000 0b03 	and.w	fp, r0, #3
 8007ad0:	461e      	mov	r6, r3
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d160      	bne.n	8007b98 <__gnu_unwind_pr_common+0xe0>
 8007ad6:	0209      	lsls	r1, r1, #8
 8007ad8:	2303      	movs	r3, #3
 8007ada:	9107      	str	r1, [sp, #28]
 8007adc:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8007ae0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8007ae4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8007ae6:	f1bb 0f02 	cmp.w	fp, #2
 8007aea:	bf08      	it	eq
 8007aec:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8007aee:	f013 0301 	ands.w	r3, r3, #1
 8007af2:	d140      	bne.n	8007b76 <__gnu_unwind_pr_common+0xbe>
 8007af4:	9301      	str	r3, [sp, #4]
 8007af6:	f000 0308 	and.w	r3, r0, #8
 8007afa:	9303      	str	r3, [sp, #12]
 8007afc:	f8d4 8000 	ldr.w	r8, [r4]
 8007b00:	f1b8 0f00 	cmp.w	r8, #0
 8007b04:	d039      	beq.n	8007b7a <__gnu_unwind_pr_common+0xc2>
 8007b06:	2e02      	cmp	r6, #2
 8007b08:	d043      	beq.n	8007b92 <__gnu_unwind_pr_common+0xda>
 8007b0a:	f8b4 8000 	ldrh.w	r8, [r4]
 8007b0e:	8867      	ldrh	r7, [r4, #2]
 8007b10:	3404      	adds	r4, #4
 8007b12:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8007b14:	f027 0a01 	bic.w	sl, r7, #1
 8007b18:	210f      	movs	r1, #15
 8007b1a:	4648      	mov	r0, r9
 8007b1c:	449a      	add	sl, r3
 8007b1e:	f7ff ff5f 	bl	80079e0 <_Unwind_GetGR>
 8007b22:	4582      	cmp	sl, r0
 8007b24:	d833      	bhi.n	8007b8e <__gnu_unwind_pr_common+0xd6>
 8007b26:	f028 0301 	bic.w	r3, r8, #1
 8007b2a:	449a      	add	sl, r3
 8007b2c:	4550      	cmp	r0, sl
 8007b2e:	bf2c      	ite	cs
 8007b30:	2000      	movcs	r0, #0
 8007b32:	2001      	movcc	r0, #1
 8007b34:	007f      	lsls	r7, r7, #1
 8007b36:	f007 0702 	and.w	r7, r7, #2
 8007b3a:	f008 0801 	and.w	r8, r8, #1
 8007b3e:	ea47 0708 	orr.w	r7, r7, r8
 8007b42:	2f01      	cmp	r7, #1
 8007b44:	d03e      	beq.n	8007bc4 <__gnu_unwind_pr_common+0x10c>
 8007b46:	d335      	bcc.n	8007bb4 <__gnu_unwind_pr_common+0xfc>
 8007b48:	2f02      	cmp	r7, #2
 8007b4a:	d11c      	bne.n	8007b86 <__gnu_unwind_pr_common+0xce>
 8007b4c:	6823      	ldr	r3, [r4, #0]
 8007b4e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007b52:	9202      	str	r2, [sp, #8]
 8007b54:	f1bb 0f00 	cmp.w	fp, #0
 8007b58:	d176      	bne.n	8007c48 <__gnu_unwind_pr_common+0x190>
 8007b5a:	b128      	cbz	r0, 8007b68 <__gnu_unwind_pr_common+0xb0>
 8007b5c:	9903      	ldr	r1, [sp, #12]
 8007b5e:	2900      	cmp	r1, #0
 8007b60:	d07e      	beq.n	8007c60 <__gnu_unwind_pr_common+0x1a8>
 8007b62:	2a00      	cmp	r2, #0
 8007b64:	f000 80a6 	beq.w	8007cb4 <__gnu_unwind_pr_common+0x1fc>
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	db77      	blt.n	8007c5c <__gnu_unwind_pr_common+0x1a4>
 8007b6c:	9b02      	ldr	r3, [sp, #8]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8007b74:	e7c2      	b.n	8007afc <__gnu_unwind_pr_common+0x44>
 8007b76:	2300      	movs	r3, #0
 8007b78:	9301      	str	r3, [sp, #4]
 8007b7a:	2e02      	cmp	r6, #2
 8007b7c:	dd3e      	ble.n	8007bfc <__gnu_unwind_pr_common+0x144>
 8007b7e:	f7ff fe17 	bl	80077b0 <__gnu_unwind_24bit.isra.1>
 8007b82:	2800      	cmp	r0, #0
 8007b84:	d040      	beq.n	8007c08 <__gnu_unwind_pr_common+0x150>
 8007b86:	2009      	movs	r0, #9
 8007b88:	b00b      	add	sp, #44	; 0x2c
 8007b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b8e:	2000      	movs	r0, #0
 8007b90:	e7d0      	b.n	8007b34 <__gnu_unwind_pr_common+0x7c>
 8007b92:	6867      	ldr	r7, [r4, #4]
 8007b94:	3408      	adds	r4, #8
 8007b96:	e7bc      	b.n	8007b12 <__gnu_unwind_pr_common+0x5a>
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	dca3      	bgt.n	8007ae4 <__gnu_unwind_pr_common+0x2c>
 8007b9c:	0c0b      	lsrs	r3, r1, #16
 8007b9e:	b2da      	uxtb	r2, r3
 8007ba0:	0409      	lsls	r1, r1, #16
 8007ba2:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8007ba6:	2302      	movs	r3, #2
 8007ba8:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8007bac:	9107      	str	r1, [sp, #28]
 8007bae:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8007bb2:	e797      	b.n	8007ae4 <__gnu_unwind_pr_common+0x2c>
 8007bb4:	f1bb 0f00 	cmp.w	fp, #0
 8007bb8:	d002      	beq.n	8007bc0 <__gnu_unwind_pr_common+0x108>
 8007bba:	2800      	cmp	r0, #0
 8007bbc:	f040 80bd 	bne.w	8007d3a <__gnu_unwind_pr_common+0x282>
 8007bc0:	3404      	adds	r4, #4
 8007bc2:	e79b      	b.n	8007afc <__gnu_unwind_pr_common+0x44>
 8007bc4:	f1bb 0f00 	cmp.w	fp, #0
 8007bc8:	d125      	bne.n	8007c16 <__gnu_unwind_pr_common+0x15e>
 8007bca:	b1a8      	cbz	r0, 8007bf8 <__gnu_unwind_pr_common+0x140>
 8007bcc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8007bd0:	1c99      	adds	r1, r3, #2
 8007bd2:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8007bd6:	d0d6      	beq.n	8007b86 <__gnu_unwind_pr_common+0xce>
 8007bd8:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8007bdc:	3301      	adds	r3, #1
 8007bde:	9106      	str	r1, [sp, #24]
 8007be0:	f000 80a3 	beq.w	8007d2a <__gnu_unwind_pr_common+0x272>
 8007be4:	1d20      	adds	r0, r4, #4
 8007be6:	f7ff fddd 	bl	80077a4 <_Unwind_decode_typeinfo_ptr.isra.0>
 8007bea:	ab06      	add	r3, sp, #24
 8007bec:	4601      	mov	r1, r0
 8007bee:	4628      	mov	r0, r5
 8007bf0:	f007 fd72 	bl	800f6d8 <__cxa_type_match>
 8007bf4:	2800      	cmp	r0, #0
 8007bf6:	d177      	bne.n	8007ce8 <__gnu_unwind_pr_common+0x230>
 8007bf8:	3408      	adds	r4, #8
 8007bfa:	e77f      	b.n	8007afc <__gnu_unwind_pr_common+0x44>
 8007bfc:	a907      	add	r1, sp, #28
 8007bfe:	4648      	mov	r0, r9
 8007c00:	f000 faee 	bl	80081e0 <__gnu_unwind_execute>
 8007c04:	2800      	cmp	r0, #0
 8007c06:	d1be      	bne.n	8007b86 <__gnu_unwind_pr_common+0xce>
 8007c08:	9b01      	ldr	r3, [sp, #4]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d15c      	bne.n	8007cc8 <__gnu_unwind_pr_common+0x210>
 8007c0e:	2008      	movs	r0, #8
 8007c10:	b00b      	add	sp, #44	; 0x2c
 8007c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c16:	210d      	movs	r1, #13
 8007c18:	4648      	mov	r0, r9
 8007c1a:	6a2f      	ldr	r7, [r5, #32]
 8007c1c:	f7ff fee0 	bl	80079e0 <_Unwind_GetGR>
 8007c20:	4287      	cmp	r7, r0
 8007c22:	d1e9      	bne.n	8007bf8 <__gnu_unwind_pr_common+0x140>
 8007c24:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007c26:	429c      	cmp	r4, r3
 8007c28:	d1e6      	bne.n	8007bf8 <__gnu_unwind_pr_common+0x140>
 8007c2a:	4620      	mov	r0, r4
 8007c2c:	f7ff fcf0 	bl	8007610 <selfrel_offset31>
 8007c30:	210f      	movs	r1, #15
 8007c32:	4602      	mov	r2, r0
 8007c34:	4648      	mov	r0, r9
 8007c36:	f7ff fef9 	bl	8007a2c <_Unwind_SetGR>
 8007c3a:	4648      	mov	r0, r9
 8007c3c:	462a      	mov	r2, r5
 8007c3e:	2100      	movs	r1, #0
 8007c40:	f7ff fef4 	bl	8007a2c <_Unwind_SetGR>
 8007c44:	2007      	movs	r0, #7
 8007c46:	e79f      	b.n	8007b88 <__gnu_unwind_pr_common+0xd0>
 8007c48:	210d      	movs	r1, #13
 8007c4a:	4648      	mov	r0, r9
 8007c4c:	6a2f      	ldr	r7, [r5, #32]
 8007c4e:	f7ff fec7 	bl	80079e0 <_Unwind_GetGR>
 8007c52:	4287      	cmp	r7, r0
 8007c54:	d058      	beq.n	8007d08 <__gnu_unwind_pr_common+0x250>
 8007c56:	6823      	ldr	r3, [r4, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	da87      	bge.n	8007b6c <__gnu_unwind_pr_common+0xb4>
 8007c5c:	3404      	adds	r4, #4
 8007c5e:	e785      	b.n	8007b6c <__gnu_unwind_pr_common+0xb4>
 8007c60:	9b02      	ldr	r3, [sp, #8]
 8007c62:	b33b      	cbz	r3, 8007cb4 <__gnu_unwind_pr_common+0x1fc>
 8007c64:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8007c68:	1d27      	adds	r7, r4, #4
 8007c6a:	f8cd b010 	str.w	fp, [sp, #16]
 8007c6e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007c72:	f8dd a008 	ldr.w	sl, [sp, #8]
 8007c76:	9605      	str	r6, [sp, #20]
 8007c78:	46a3      	mov	fp, r4
 8007c7a:	461c      	mov	r4, r3
 8007c7c:	e002      	b.n	8007c84 <__gnu_unwind_pr_common+0x1cc>
 8007c7e:	45b2      	cmp	sl, r6
 8007c80:	46b0      	mov	r8, r6
 8007c82:	d016      	beq.n	8007cb2 <__gnu_unwind_pr_common+0x1fa>
 8007c84:	4638      	mov	r0, r7
 8007c86:	9406      	str	r4, [sp, #24]
 8007c88:	f7ff fd8c 	bl	80077a4 <_Unwind_decode_typeinfo_ptr.isra.0>
 8007c8c:	ab06      	add	r3, sp, #24
 8007c8e:	4601      	mov	r1, r0
 8007c90:	2200      	movs	r2, #0
 8007c92:	4628      	mov	r0, r5
 8007c94:	f007 fd20 	bl	800f6d8 <__cxa_type_match>
 8007c98:	f108 0601 	add.w	r6, r8, #1
 8007c9c:	3704      	adds	r7, #4
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	d0ed      	beq.n	8007c7e <__gnu_unwind_pr_common+0x1c6>
 8007ca2:	9b02      	ldr	r3, [sp, #8]
 8007ca4:	9e05      	ldr	r6, [sp, #20]
 8007ca6:	4543      	cmp	r3, r8
 8007ca8:	465c      	mov	r4, fp
 8007caa:	f8dd b010 	ldr.w	fp, [sp, #16]
 8007cae:	d1d2      	bne.n	8007c56 <__gnu_unwind_pr_common+0x19e>
 8007cb0:	e000      	b.n	8007cb4 <__gnu_unwind_pr_common+0x1fc>
 8007cb2:	465c      	mov	r4, fp
 8007cb4:	4648      	mov	r0, r9
 8007cb6:	210d      	movs	r1, #13
 8007cb8:	f7ff fe92 	bl	80079e0 <_Unwind_GetGR>
 8007cbc:	9b06      	ldr	r3, [sp, #24]
 8007cbe:	6228      	str	r0, [r5, #32]
 8007cc0:	62ac      	str	r4, [r5, #40]	; 0x28
 8007cc2:	626b      	str	r3, [r5, #36]	; 0x24
 8007cc4:	2006      	movs	r0, #6
 8007cc6:	e75f      	b.n	8007b88 <__gnu_unwind_pr_common+0xd0>
 8007cc8:	210f      	movs	r1, #15
 8007cca:	4648      	mov	r0, r9
 8007ccc:	f7ff fe88 	bl	80079e0 <_Unwind_GetGR>
 8007cd0:	210e      	movs	r1, #14
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	4648      	mov	r0, r9
 8007cd6:	f7ff fea9 	bl	8007a2c <_Unwind_SetGR>
 8007cda:	4648      	mov	r0, r9
 8007cdc:	4a29      	ldr	r2, [pc, #164]	; (8007d84 <__gnu_unwind_pr_common+0x2cc>)
 8007cde:	210f      	movs	r1, #15
 8007ce0:	f7ff fea4 	bl	8007a2c <_Unwind_SetGR>
 8007ce4:	2007      	movs	r0, #7
 8007ce6:	e74f      	b.n	8007b88 <__gnu_unwind_pr_common+0xd0>
 8007ce8:	4607      	mov	r7, r0
 8007cea:	210d      	movs	r1, #13
 8007cec:	4648      	mov	r0, r9
 8007cee:	f7ff fe77 	bl	80079e0 <_Unwind_GetGR>
 8007cf2:	2f02      	cmp	r7, #2
 8007cf4:	6228      	str	r0, [r5, #32]
 8007cf6:	d11d      	bne.n	8007d34 <__gnu_unwind_pr_common+0x27c>
 8007cf8:	462b      	mov	r3, r5
 8007cfa:	9a06      	ldr	r2, [sp, #24]
 8007cfc:	f843 2f2c 	str.w	r2, [r3, #44]!
 8007d00:	626b      	str	r3, [r5, #36]	; 0x24
 8007d02:	62ac      	str	r4, [r5, #40]	; 0x28
 8007d04:	2006      	movs	r0, #6
 8007d06:	e73f      	b.n	8007b88 <__gnu_unwind_pr_common+0xd0>
 8007d08:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007d0a:	429c      	cmp	r4, r3
 8007d0c:	d1a3      	bne.n	8007c56 <__gnu_unwind_pr_common+0x19e>
 8007d0e:	2204      	movs	r2, #4
 8007d10:	2700      	movs	r7, #0
 8007d12:	18a3      	adds	r3, r4, r2
 8007d14:	9902      	ldr	r1, [sp, #8]
 8007d16:	62a9      	str	r1, [r5, #40]	; 0x28
 8007d18:	62ef      	str	r7, [r5, #44]	; 0x2c
 8007d1a:	632a      	str	r2, [r5, #48]	; 0x30
 8007d1c:	636b      	str	r3, [r5, #52]	; 0x34
 8007d1e:	6823      	ldr	r3, [r4, #0]
 8007d20:	42bb      	cmp	r3, r7
 8007d22:	db1d      	blt.n	8007d60 <__gnu_unwind_pr_common+0x2a8>
 8007d24:	2301      	movs	r3, #1
 8007d26:	9301      	str	r3, [sp, #4]
 8007d28:	e720      	b.n	8007b6c <__gnu_unwind_pr_common+0xb4>
 8007d2a:	4648      	mov	r0, r9
 8007d2c:	210d      	movs	r1, #13
 8007d2e:	f7ff fe57 	bl	80079e0 <_Unwind_GetGR>
 8007d32:	6228      	str	r0, [r5, #32]
 8007d34:	9b06      	ldr	r3, [sp, #24]
 8007d36:	626b      	str	r3, [r5, #36]	; 0x24
 8007d38:	e7e3      	b.n	8007d02 <__gnu_unwind_pr_common+0x24a>
 8007d3a:	4620      	mov	r0, r4
 8007d3c:	f7ff fc68 	bl	8007610 <selfrel_offset31>
 8007d40:	3404      	adds	r4, #4
 8007d42:	4606      	mov	r6, r0
 8007d44:	63ac      	str	r4, [r5, #56]	; 0x38
 8007d46:	4628      	mov	r0, r5
 8007d48:	f007 fd22 	bl	800f790 <__cxa_begin_cleanup>
 8007d4c:	2800      	cmp	r0, #0
 8007d4e:	f43f af1a 	beq.w	8007b86 <__gnu_unwind_pr_common+0xce>
 8007d52:	4648      	mov	r0, r9
 8007d54:	4632      	mov	r2, r6
 8007d56:	210f      	movs	r1, #15
 8007d58:	f7ff fe68 	bl	8007a2c <_Unwind_SetGR>
 8007d5c:	2007      	movs	r0, #7
 8007d5e:	e713      	b.n	8007b88 <__gnu_unwind_pr_common+0xd0>
 8007d60:	4608      	mov	r0, r1
 8007d62:	3001      	adds	r0, #1
 8007d64:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8007d68:	f7ff fc52 	bl	8007610 <selfrel_offset31>
 8007d6c:	210f      	movs	r1, #15
 8007d6e:	4602      	mov	r2, r0
 8007d70:	4648      	mov	r0, r9
 8007d72:	f7ff fe5b 	bl	8007a2c <_Unwind_SetGR>
 8007d76:	4648      	mov	r0, r9
 8007d78:	462a      	mov	r2, r5
 8007d7a:	4639      	mov	r1, r7
 8007d7c:	f7ff fe56 	bl	8007a2c <_Unwind_SetGR>
 8007d80:	2007      	movs	r0, #7
 8007d82:	e701      	b.n	8007b88 <__gnu_unwind_pr_common+0xd0>
 8007d84:	08010175 	.word	0x08010175

08007d88 <__aeabi_unwind_cpp_pr0>:
 8007d88:	2300      	movs	r3, #0
 8007d8a:	e695      	b.n	8007ab8 <__gnu_unwind_pr_common>

08007d8c <__aeabi_unwind_cpp_pr1>:
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e693      	b.n	8007ab8 <__gnu_unwind_pr_common>

08007d90 <__aeabi_unwind_cpp_pr2>:
 8007d90:	2302      	movs	r3, #2
 8007d92:	e691      	b.n	8007ab8 <__gnu_unwind_pr_common>

08007d94 <_Unwind_VRS_Pop>:
 8007d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d96:	4604      	mov	r4, r0
 8007d98:	b0c5      	sub	sp, #276	; 0x114
 8007d9a:	2904      	cmp	r1, #4
 8007d9c:	d80d      	bhi.n	8007dba <_Unwind_VRS_Pop+0x26>
 8007d9e:	e8df f001 	tbb	[pc, r1]
 8007da2:	0353      	.short	0x0353
 8007da4:	310c      	.short	0x310c
 8007da6:	0f          	.byte	0x0f
 8007da7:	00          	.byte	0x00
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8007dae:	b295      	uxth	r5, r2
 8007db0:	d162      	bne.n	8007e78 <_Unwind_VRS_Pop+0xe4>
 8007db2:	1972      	adds	r2, r6, r5
 8007db4:	2a10      	cmp	r2, #16
 8007db6:	f240 809b 	bls.w	8007ef0 <_Unwind_VRS_Pop+0x15c>
 8007dba:	2002      	movs	r0, #2
 8007dbc:	b045      	add	sp, #276	; 0x114
 8007dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d1fa      	bne.n	8007dba <_Unwind_VRS_Pop+0x26>
 8007dc4:	2a10      	cmp	r2, #16
 8007dc6:	d8f8      	bhi.n	8007dba <_Unwind_VRS_Pop+0x26>
 8007dc8:	6823      	ldr	r3, [r4, #0]
 8007dca:	06d8      	lsls	r0, r3, #27
 8007dcc:	f100 80c6 	bmi.w	8007f5c <_Unwind_VRS_Pop+0x1c8>
 8007dd0:	ae22      	add	r6, sp, #136	; 0x88
 8007dd2:	4630      	mov	r0, r6
 8007dd4:	9201      	str	r2, [sp, #4]
 8007dd6:	f000 f973 	bl	80080c0 <__gnu_Unwind_Save_WMMXC>
 8007dda:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007ddc:	9a01      	ldr	r2, [sp, #4]
 8007dde:	2300      	movs	r3, #0
 8007de0:	2501      	movs	r5, #1
 8007de2:	fa05 f103 	lsl.w	r1, r5, r3
 8007de6:	4211      	tst	r1, r2
 8007de8:	d003      	beq.n	8007df2 <_Unwind_VRS_Pop+0x5e>
 8007dea:	6801      	ldr	r1, [r0, #0]
 8007dec:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 8007df0:	3004      	adds	r0, #4
 8007df2:	3301      	adds	r3, #1
 8007df4:	2b04      	cmp	r3, #4
 8007df6:	d1f4      	bne.n	8007de2 <_Unwind_VRS_Pop+0x4e>
 8007df8:	63a0      	str	r0, [r4, #56]	; 0x38
 8007dfa:	4630      	mov	r0, r6
 8007dfc:	f000 f956 	bl	80080ac <__gnu_Unwind_Restore_WMMXC>
 8007e00:	2000      	movs	r0, #0
 8007e02:	e7db      	b.n	8007dbc <_Unwind_VRS_Pop+0x28>
 8007e04:	2b03      	cmp	r3, #3
 8007e06:	d1d8      	bne.n	8007dba <_Unwind_VRS_Pop+0x26>
 8007e08:	0c15      	lsrs	r5, r2, #16
 8007e0a:	b297      	uxth	r7, r2
 8007e0c:	19eb      	adds	r3, r5, r7
 8007e0e:	2b10      	cmp	r3, #16
 8007e10:	d8d3      	bhi.n	8007dba <_Unwind_VRS_Pop+0x26>
 8007e12:	6823      	ldr	r3, [r4, #0]
 8007e14:	071e      	lsls	r6, r3, #28
 8007e16:	f100 80b5 	bmi.w	8007f84 <_Unwind_VRS_Pop+0x1f0>
 8007e1a:	ae22      	add	r6, sp, #136	; 0x88
 8007e1c:	4630      	mov	r0, r6
 8007e1e:	f000 f923 	bl	8008068 <__gnu_Unwind_Save_WMMXD>
 8007e22:	00ed      	lsls	r5, r5, #3
 8007e24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007e26:	b14f      	cbz	r7, 8007e3c <_Unwind_VRS_Pop+0xa8>
 8007e28:	3d04      	subs	r5, #4
 8007e2a:	1971      	adds	r1, r6, r5
 8007e2c:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
 8007e30:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e34:	f841 2f04 	str.w	r2, [r1, #4]!
 8007e38:	4283      	cmp	r3, r0
 8007e3a:	d1f9      	bne.n	8007e30 <_Unwind_VRS_Pop+0x9c>
 8007e3c:	4630      	mov	r0, r6
 8007e3e:	63a3      	str	r3, [r4, #56]	; 0x38
 8007e40:	f000 f8f0 	bl	8008024 <__gnu_Unwind_Restore_WMMXD>
 8007e44:	2000      	movs	r0, #0
 8007e46:	e7b9      	b.n	8007dbc <_Unwind_VRS_Pop+0x28>
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1b6      	bne.n	8007dba <_Unwind_VRS_Pop+0x26>
 8007e4c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8007e4e:	b297      	uxth	r7, r2
 8007e50:	1d20      	adds	r0, r4, #4
 8007e52:	2601      	movs	r6, #1
 8007e54:	fa06 f103 	lsl.w	r1, r6, r3
 8007e58:	4239      	tst	r1, r7
 8007e5a:	f103 0301 	add.w	r3, r3, #1
 8007e5e:	d002      	beq.n	8007e66 <_Unwind_VRS_Pop+0xd2>
 8007e60:	6829      	ldr	r1, [r5, #0]
 8007e62:	6001      	str	r1, [r0, #0]
 8007e64:	3504      	adds	r5, #4
 8007e66:	2b10      	cmp	r3, #16
 8007e68:	f100 0004 	add.w	r0, r0, #4
 8007e6c:	d1f2      	bne.n	8007e54 <_Unwind_VRS_Pop+0xc0>
 8007e6e:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8007e72:	d13b      	bne.n	8007eec <_Unwind_VRS_Pop+0x158>
 8007e74:	63a5      	str	r5, [r4, #56]	; 0x38
 8007e76:	e7a1      	b.n	8007dbc <_Unwind_VRS_Pop+0x28>
 8007e78:	2b05      	cmp	r3, #5
 8007e7a:	d19e      	bne.n	8007dba <_Unwind_VRS_Pop+0x26>
 8007e7c:	1977      	adds	r7, r6, r5
 8007e7e:	2f20      	cmp	r7, #32
 8007e80:	d89b      	bhi.n	8007dba <_Unwind_VRS_Pop+0x26>
 8007e82:	2e0f      	cmp	r6, #15
 8007e84:	d966      	bls.n	8007f54 <_Unwind_VRS_Pop+0x1c0>
 8007e86:	462f      	mov	r7, r5
 8007e88:	2d00      	cmp	r5, #0
 8007e8a:	d13a      	bne.n	8007f02 <_Unwind_VRS_Pop+0x16e>
 8007e8c:	462a      	mov	r2, r5
 8007e8e:	2700      	movs	r7, #0
 8007e90:	2a00      	cmp	r2, #0
 8007e92:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007e94:	dd72      	ble.n	8007f7c <_Unwind_VRS_Pop+0x1e8>
 8007e96:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8007e9a:	4601      	mov	r1, r0
 8007e9c:	a844      	add	r0, sp, #272	; 0x110
 8007e9e:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8007ea2:	388c      	subs	r0, #140	; 0x8c
 8007ea4:	f851 5b04 	ldr.w	r5, [r1], #4
 8007ea8:	f840 5f04 	str.w	r5, [r0, #4]!
 8007eac:	4291      	cmp	r1, r2
 8007eae:	d1f9      	bne.n	8007ea4 <_Unwind_VRS_Pop+0x110>
 8007eb0:	4608      	mov	r0, r1
 8007eb2:	b197      	cbz	r7, 8007eda <_Unwind_VRS_Pop+0x146>
 8007eb4:	2e10      	cmp	r6, #16
 8007eb6:	4632      	mov	r2, r6
 8007eb8:	a944      	add	r1, sp, #272	; 0x110
 8007eba:	bf38      	it	cc
 8007ebc:	2210      	movcc	r2, #16
 8007ebe:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8007ec2:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8007ec6:	0079      	lsls	r1, r7, #1
 8007ec8:	3a04      	subs	r2, #4
 8007eca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007ece:	f850 5b04 	ldr.w	r5, [r0], #4
 8007ed2:	f842 5f04 	str.w	r5, [r2, #4]!
 8007ed6:	4288      	cmp	r0, r1
 8007ed8:	d1f9      	bne.n	8007ece <_Unwind_VRS_Pop+0x13a>
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d048      	beq.n	8007f70 <_Unwind_VRS_Pop+0x1dc>
 8007ede:	2e0f      	cmp	r6, #15
 8007ee0:	63a1      	str	r1, [r4, #56]	; 0x38
 8007ee2:	d933      	bls.n	8007f4c <_Unwind_VRS_Pop+0x1b8>
 8007ee4:	b117      	cbz	r7, 8007eec <_Unwind_VRS_Pop+0x158>
 8007ee6:	a802      	add	r0, sp, #8
 8007ee8:	f000 f894 	bl	8008014 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8007eec:	2000      	movs	r0, #0
 8007eee:	e765      	b.n	8007dbc <_Unwind_VRS_Pop+0x28>
 8007ef0:	2e0f      	cmp	r6, #15
 8007ef2:	f63f af62 	bhi.w	8007dba <_Unwind_VRS_Pop+0x26>
 8007ef6:	2700      	movs	r7, #0
 8007ef8:	6822      	ldr	r2, [r4, #0]
 8007efa:	07d1      	lsls	r1, r2, #31
 8007efc:	d417      	bmi.n	8007f2e <_Unwind_VRS_Pop+0x19a>
 8007efe:	2f00      	cmp	r7, #0
 8007f00:	d060      	beq.n	8007fc4 <_Unwind_VRS_Pop+0x230>
 8007f02:	6822      	ldr	r2, [r4, #0]
 8007f04:	0751      	lsls	r1, r2, #29
 8007f06:	d445      	bmi.n	8007f94 <_Unwind_VRS_Pop+0x200>
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d04d      	beq.n	8007fa8 <_Unwind_VRS_Pop+0x214>
 8007f0c:	2e0f      	cmp	r6, #15
 8007f0e:	d806      	bhi.n	8007f1e <_Unwind_VRS_Pop+0x18a>
 8007f10:	a822      	add	r0, sp, #136	; 0x88
 8007f12:	9301      	str	r3, [sp, #4]
 8007f14:	f000 f87a 	bl	800800c <__gnu_Unwind_Save_VFP_D>
 8007f18:	9b01      	ldr	r3, [sp, #4]
 8007f1a:	2f00      	cmp	r7, #0
 8007f1c:	d0b6      	beq.n	8007e8c <_Unwind_VRS_Pop+0xf8>
 8007f1e:	a802      	add	r0, sp, #8
 8007f20:	9301      	str	r3, [sp, #4]
 8007f22:	f000 f87b 	bl	800801c <__gnu_Unwind_Save_VFP_D_16_to_31>
 8007f26:	9b01      	ldr	r3, [sp, #4]
 8007f28:	f1c6 0210 	rsb	r2, r6, #16
 8007f2c:	e7b0      	b.n	8007e90 <_Unwind_VRS_Pop+0xfc>
 8007f2e:	f022 0101 	bic.w	r1, r2, #1
 8007f32:	2b05      	cmp	r3, #5
 8007f34:	6021      	str	r1, [r4, #0]
 8007f36:	9301      	str	r3, [sp, #4]
 8007f38:	4620      	mov	r0, r4
 8007f3a:	d03b      	beq.n	8007fb4 <_Unwind_VRS_Pop+0x220>
 8007f3c:	f022 0203 	bic.w	r2, r2, #3
 8007f40:	f840 2b48 	str.w	r2, [r0], #72
 8007f44:	f000 f85a 	bl	8007ffc <__gnu_Unwind_Save_VFP>
 8007f48:	9b01      	ldr	r3, [sp, #4]
 8007f4a:	e7d8      	b.n	8007efe <_Unwind_VRS_Pop+0x16a>
 8007f4c:	a822      	add	r0, sp, #136	; 0x88
 8007f4e:	f000 f859 	bl	8008004 <__gnu_Unwind_Restore_VFP_D>
 8007f52:	e7c7      	b.n	8007ee4 <_Unwind_VRS_Pop+0x150>
 8007f54:	2f10      	cmp	r7, #16
 8007f56:	d9ce      	bls.n	8007ef6 <_Unwind_VRS_Pop+0x162>
 8007f58:	3f10      	subs	r7, #16
 8007f5a:	e7cd      	b.n	8007ef8 <_Unwind_VRS_Pop+0x164>
 8007f5c:	f023 0310 	bic.w	r3, r3, #16
 8007f60:	6023      	str	r3, [r4, #0]
 8007f62:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8007f66:	9201      	str	r2, [sp, #4]
 8007f68:	f000 f8aa 	bl	80080c0 <__gnu_Unwind_Save_WMMXC>
 8007f6c:	9a01      	ldr	r2, [sp, #4]
 8007f6e:	e72f      	b.n	8007dd0 <_Unwind_VRS_Pop+0x3c>
 8007f70:	3104      	adds	r1, #4
 8007f72:	63a1      	str	r1, [r4, #56]	; 0x38
 8007f74:	a822      	add	r0, sp, #136	; 0x88
 8007f76:	f000 f83d 	bl	8007ff4 <__gnu_Unwind_Restore_VFP>
 8007f7a:	e7b7      	b.n	8007eec <_Unwind_VRS_Pop+0x158>
 8007f7c:	2f00      	cmp	r7, #0
 8007f7e:	d199      	bne.n	8007eb4 <_Unwind_VRS_Pop+0x120>
 8007f80:	4601      	mov	r1, r0
 8007f82:	e7aa      	b.n	8007eda <_Unwind_VRS_Pop+0x146>
 8007f84:	f023 0308 	bic.w	r3, r3, #8
 8007f88:	6023      	str	r3, [r4, #0]
 8007f8a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8007f8e:	f000 f86b 	bl	8008068 <__gnu_Unwind_Save_WMMXD>
 8007f92:	e742      	b.n	8007e1a <_Unwind_VRS_Pop+0x86>
 8007f94:	4620      	mov	r0, r4
 8007f96:	f022 0204 	bic.w	r2, r2, #4
 8007f9a:	f840 2bd0 	str.w	r2, [r0], #208
 8007f9e:	9301      	str	r3, [sp, #4]
 8007fa0:	f000 f83c 	bl	800801c <__gnu_Unwind_Save_VFP_D_16_to_31>
 8007fa4:	9b01      	ldr	r3, [sp, #4]
 8007fa6:	e7af      	b.n	8007f08 <_Unwind_VRS_Pop+0x174>
 8007fa8:	a822      	add	r0, sp, #136	; 0x88
 8007faa:	9301      	str	r3, [sp, #4]
 8007fac:	f000 f826 	bl	8007ffc <__gnu_Unwind_Save_VFP>
 8007fb0:	9b01      	ldr	r3, [sp, #4]
 8007fb2:	e7b9      	b.n	8007f28 <_Unwind_VRS_Pop+0x194>
 8007fb4:	f041 0102 	orr.w	r1, r1, #2
 8007fb8:	f840 1b48 	str.w	r1, [r0], #72
 8007fbc:	f000 f826 	bl	800800c <__gnu_Unwind_Save_VFP_D>
 8007fc0:	9b01      	ldr	r3, [sp, #4]
 8007fc2:	e79c      	b.n	8007efe <_Unwind_VRS_Pop+0x16a>
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d003      	beq.n	8007fd0 <_Unwind_VRS_Pop+0x23c>
 8007fc8:	2e0f      	cmp	r6, #15
 8007fca:	f63f af5f 	bhi.w	8007e8c <_Unwind_VRS_Pop+0xf8>
 8007fce:	e79f      	b.n	8007f10 <_Unwind_VRS_Pop+0x17c>
 8007fd0:	a822      	add	r0, sp, #136	; 0x88
 8007fd2:	9301      	str	r3, [sp, #4]
 8007fd4:	f000 f812 	bl	8007ffc <__gnu_Unwind_Save_VFP>
 8007fd8:	9b01      	ldr	r3, [sp, #4]
 8007fda:	e757      	b.n	8007e8c <_Unwind_VRS_Pop+0xf8>

08007fdc <__restore_core_regs>:
 8007fdc:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8007fe0:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8007fe4:	469c      	mov	ip, r3
 8007fe6:	46a6      	mov	lr, r4
 8007fe8:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8007fec:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8007ff0:	46e5      	mov	sp, ip
 8007ff2:	bd00      	pop	{pc}

08007ff4 <__gnu_Unwind_Restore_VFP>:
 8007ff4:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8007ff8:	4770      	bx	lr
 8007ffa:	bf00      	nop

08007ffc <__gnu_Unwind_Save_VFP>:
 8007ffc:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop

08008004 <__gnu_Unwind_Restore_VFP_D>:
 8008004:	ec90 0b20 	vldmia	r0, {d0-d15}
 8008008:	4770      	bx	lr
 800800a:	bf00      	nop

0800800c <__gnu_Unwind_Save_VFP_D>:
 800800c:	ec80 0b20 	vstmia	r0, {d0-d15}
 8008010:	4770      	bx	lr
 8008012:	bf00      	nop

08008014 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8008014:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8008018:	4770      	bx	lr
 800801a:	bf00      	nop

0800801c <__gnu_Unwind_Save_VFP_D_16_to_31>:
 800801c:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8008020:	4770      	bx	lr
 8008022:	bf00      	nop

08008024 <__gnu_Unwind_Restore_WMMXD>:
 8008024:	ecf0 0102 	ldfe	f0, [r0], #8
 8008028:	ecf0 1102 	ldfe	f1, [r0], #8
 800802c:	ecf0 2102 	ldfe	f2, [r0], #8
 8008030:	ecf0 3102 	ldfe	f3, [r0], #8
 8008034:	ecf0 4102 	ldfe	f4, [r0], #8
 8008038:	ecf0 5102 	ldfe	f5, [r0], #8
 800803c:	ecf0 6102 	ldfe	f6, [r0], #8
 8008040:	ecf0 7102 	ldfe	f7, [r0], #8
 8008044:	ecf0 8102 	ldfp	f0, [r0], #8
 8008048:	ecf0 9102 	ldfp	f1, [r0], #8
 800804c:	ecf0 a102 	ldfp	f2, [r0], #8
 8008050:	ecf0 b102 	ldfp	f3, [r0], #8
 8008054:	ecf0 c102 	ldfp	f4, [r0], #8
 8008058:	ecf0 d102 	ldfp	f5, [r0], #8
 800805c:	ecf0 e102 	ldfp	f6, [r0], #8
 8008060:	ecf0 f102 	ldfp	f7, [r0], #8
 8008064:	4770      	bx	lr
 8008066:	bf00      	nop

08008068 <__gnu_Unwind_Save_WMMXD>:
 8008068:	ece0 0102 	stfe	f0, [r0], #8
 800806c:	ece0 1102 	stfe	f1, [r0], #8
 8008070:	ece0 2102 	stfe	f2, [r0], #8
 8008074:	ece0 3102 	stfe	f3, [r0], #8
 8008078:	ece0 4102 	stfe	f4, [r0], #8
 800807c:	ece0 5102 	stfe	f5, [r0], #8
 8008080:	ece0 6102 	stfe	f6, [r0], #8
 8008084:	ece0 7102 	stfe	f7, [r0], #8
 8008088:	ece0 8102 	stfp	f0, [r0], #8
 800808c:	ece0 9102 	stfp	f1, [r0], #8
 8008090:	ece0 a102 	stfp	f2, [r0], #8
 8008094:	ece0 b102 	stfp	f3, [r0], #8
 8008098:	ece0 c102 	stfp	f4, [r0], #8
 800809c:	ece0 d102 	stfp	f5, [r0], #8
 80080a0:	ece0 e102 	stfp	f6, [r0], #8
 80080a4:	ece0 f102 	stfp	f7, [r0], #8
 80080a8:	4770      	bx	lr
 80080aa:	bf00      	nop

080080ac <__gnu_Unwind_Restore_WMMXC>:
 80080ac:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 80080b0:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 80080b4:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 80080b8:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop

080080c0 <__gnu_Unwind_Save_WMMXC>:
 80080c0:	fca0 8101 	stc2	1, cr8, [r0], #4
 80080c4:	fca0 9101 	stc2	1, cr9, [r0], #4
 80080c8:	fca0 a101 	stc2	1, cr10, [r0], #4
 80080cc:	fca0 b101 	stc2	1, cr11, [r0], #4
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop

080080d4 <_Unwind_RaiseException>:
 80080d4:	46ec      	mov	ip, sp
 80080d6:	b500      	push	{lr}
 80080d8:	e92d 5000 	stmdb	sp!, {ip, lr}
 80080dc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80080e0:	f04f 0300 	mov.w	r3, #0
 80080e4:	e92d 000c 	stmdb	sp!, {r2, r3}
 80080e8:	a901      	add	r1, sp, #4
 80080ea:	f7ff fbf3 	bl	80078d4 <__gnu_Unwind_RaiseException>
 80080ee:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80080f2:	b012      	add	sp, #72	; 0x48
 80080f4:	4770      	bx	lr
 80080f6:	bf00      	nop

080080f8 <_Unwind_Resume>:
 80080f8:	46ec      	mov	ip, sp
 80080fa:	b500      	push	{lr}
 80080fc:	e92d 5000 	stmdb	sp!, {ip, lr}
 8008100:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8008104:	f04f 0300 	mov.w	r3, #0
 8008108:	e92d 000c 	stmdb	sp!, {r2, r3}
 800810c:	a901      	add	r1, sp, #4
 800810e:	f7ff fc1b 	bl	8007948 <__gnu_Unwind_Resume>
 8008112:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8008116:	b012      	add	sp, #72	; 0x48
 8008118:	4770      	bx	lr
 800811a:	bf00      	nop

0800811c <_Unwind_Resume_or_Rethrow>:
 800811c:	46ec      	mov	ip, sp
 800811e:	b500      	push	{lr}
 8008120:	e92d 5000 	stmdb	sp!, {ip, lr}
 8008124:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8008128:	f04f 0300 	mov.w	r3, #0
 800812c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8008130:	a901      	add	r1, sp, #4
 8008132:	f7ff fc2b 	bl	800798c <__gnu_Unwind_Resume_or_Rethrow>
 8008136:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800813a:	b012      	add	sp, #72	; 0x48
 800813c:	4770      	bx	lr
 800813e:	bf00      	nop

08008140 <_Unwind_ForcedUnwind>:
 8008140:	46ec      	mov	ip, sp
 8008142:	b500      	push	{lr}
 8008144:	e92d 5000 	stmdb	sp!, {ip, lr}
 8008148:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800814c:	f04f 0300 	mov.w	r3, #0
 8008150:	e92d 000c 	stmdb	sp!, {r2, r3}
 8008154:	ab01      	add	r3, sp, #4
 8008156:	f7ff fbed 	bl	8007934 <__gnu_Unwind_ForcedUnwind>
 800815a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800815e:	b012      	add	sp, #72	; 0x48
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop

08008164 <_Unwind_Backtrace>:
 8008164:	46ec      	mov	ip, sp
 8008166:	b500      	push	{lr}
 8008168:	e92d 5000 	stmdb	sp!, {ip, lr}
 800816c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8008170:	f04f 0300 	mov.w	r3, #0
 8008174:	e92d 000c 	stmdb	sp!, {r2, r3}
 8008178:	aa01      	add	r2, sp, #4
 800817a:	f7ff fc65 	bl	8007a48 <__gnu_Unwind_Backtrace>
 800817e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8008182:	b012      	add	sp, #72	; 0x48
 8008184:	4770      	bx	lr
 8008186:	bf00      	nop

08008188 <next_unwind_byte>:
 8008188:	7a02      	ldrb	r2, [r0, #8]
 800818a:	b91a      	cbnz	r2, 8008194 <next_unwind_byte+0xc>
 800818c:	7a43      	ldrb	r3, [r0, #9]
 800818e:	b943      	cbnz	r3, 80081a2 <next_unwind_byte+0x1a>
 8008190:	20b0      	movs	r0, #176	; 0xb0
 8008192:	4770      	bx	lr
 8008194:	6803      	ldr	r3, [r0, #0]
 8008196:	3a01      	subs	r2, #1
 8008198:	7202      	strb	r2, [r0, #8]
 800819a:	021a      	lsls	r2, r3, #8
 800819c:	6002      	str	r2, [r0, #0]
 800819e:	0e18      	lsrs	r0, r3, #24
 80081a0:	4770      	bx	lr
 80081a2:	6842      	ldr	r2, [r0, #4]
 80081a4:	3b01      	subs	r3, #1
 80081a6:	b410      	push	{r4}
 80081a8:	7243      	strb	r3, [r0, #9]
 80081aa:	6813      	ldr	r3, [r2, #0]
 80081ac:	2103      	movs	r1, #3
 80081ae:	1d14      	adds	r4, r2, #4
 80081b0:	7201      	strb	r1, [r0, #8]
 80081b2:	021a      	lsls	r2, r3, #8
 80081b4:	6044      	str	r4, [r0, #4]
 80081b6:	6002      	str	r2, [r0, #0]
 80081b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081bc:	0e18      	lsrs	r0, r3, #24
 80081be:	4770      	bx	lr

080081c0 <_Unwind_GetGR.constprop.0>:
 80081c0:	b500      	push	{lr}
 80081c2:	b085      	sub	sp, #20
 80081c4:	aa03      	add	r2, sp, #12
 80081c6:	2300      	movs	r3, #0
 80081c8:	9200      	str	r2, [sp, #0]
 80081ca:	4619      	mov	r1, r3
 80081cc:	220c      	movs	r2, #12
 80081ce:	f7ff fbed 	bl	80079ac <_Unwind_VRS_Get>
 80081d2:	9803      	ldr	r0, [sp, #12]
 80081d4:	b005      	add	sp, #20
 80081d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80081da:	bf00      	nop

080081dc <unwind_UCB_from_context>:
 80081dc:	e7f0      	b.n	80081c0 <_Unwind_GetGR.constprop.0>
 80081de:	bf00      	nop

080081e0 <__gnu_unwind_execute>:
 80081e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80081e4:	4606      	mov	r6, r0
 80081e6:	b085      	sub	sp, #20
 80081e8:	460f      	mov	r7, r1
 80081ea:	f04f 0800 	mov.w	r8, #0
 80081ee:	4638      	mov	r0, r7
 80081f0:	f7ff ffca 	bl	8008188 <next_unwind_byte>
 80081f4:	28b0      	cmp	r0, #176	; 0xb0
 80081f6:	4604      	mov	r4, r0
 80081f8:	d023      	beq.n	8008242 <__gnu_unwind_execute+0x62>
 80081fa:	0605      	lsls	r5, r0, #24
 80081fc:	d427      	bmi.n	800824e <__gnu_unwind_execute+0x6e>
 80081fe:	2300      	movs	r3, #0
 8008200:	f10d 090c 	add.w	r9, sp, #12
 8008204:	4619      	mov	r1, r3
 8008206:	0085      	lsls	r5, r0, #2
 8008208:	220d      	movs	r2, #13
 800820a:	f8cd 9000 	str.w	r9, [sp]
 800820e:	4630      	mov	r0, r6
 8008210:	f7ff fbcc 	bl	80079ac <_Unwind_VRS_Get>
 8008214:	b2ed      	uxtb	r5, r5
 8008216:	9b03      	ldr	r3, [sp, #12]
 8008218:	f8cd 9000 	str.w	r9, [sp]
 800821c:	0660      	lsls	r0, r4, #25
 800821e:	f105 0504 	add.w	r5, r5, #4
 8008222:	bf4c      	ite	mi
 8008224:	1b5d      	submi	r5, r3, r5
 8008226:	18ed      	addpl	r5, r5, r3
 8008228:	2300      	movs	r3, #0
 800822a:	4619      	mov	r1, r3
 800822c:	220d      	movs	r2, #13
 800822e:	4630      	mov	r0, r6
 8008230:	9503      	str	r5, [sp, #12]
 8008232:	f7ff fbe1 	bl	80079f8 <_Unwind_VRS_Set>
 8008236:	4638      	mov	r0, r7
 8008238:	f7ff ffa6 	bl	8008188 <next_unwind_byte>
 800823c:	28b0      	cmp	r0, #176	; 0xb0
 800823e:	4604      	mov	r4, r0
 8008240:	d1db      	bne.n	80081fa <__gnu_unwind_execute+0x1a>
 8008242:	f1b8 0f00 	cmp.w	r8, #0
 8008246:	f000 8095 	beq.w	8008374 <__gnu_unwind_execute+0x194>
 800824a:	2000      	movs	r0, #0
 800824c:	e01c      	b.n	8008288 <__gnu_unwind_execute+0xa8>
 800824e:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8008252:	2b80      	cmp	r3, #128	; 0x80
 8008254:	d05d      	beq.n	8008312 <__gnu_unwind_execute+0x132>
 8008256:	2b90      	cmp	r3, #144	; 0x90
 8008258:	d019      	beq.n	800828e <__gnu_unwind_execute+0xae>
 800825a:	2ba0      	cmp	r3, #160	; 0xa0
 800825c:	d02c      	beq.n	80082b8 <__gnu_unwind_execute+0xd8>
 800825e:	2bb0      	cmp	r3, #176	; 0xb0
 8008260:	d03f      	beq.n	80082e2 <__gnu_unwind_execute+0x102>
 8008262:	2bc0      	cmp	r3, #192	; 0xc0
 8008264:	d06c      	beq.n	8008340 <__gnu_unwind_execute+0x160>
 8008266:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800826a:	2bd0      	cmp	r3, #208	; 0xd0
 800826c:	d10b      	bne.n	8008286 <__gnu_unwind_execute+0xa6>
 800826e:	f000 0207 	and.w	r2, r0, #7
 8008272:	3201      	adds	r2, #1
 8008274:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8008278:	2305      	movs	r3, #5
 800827a:	2101      	movs	r1, #1
 800827c:	4630      	mov	r0, r6
 800827e:	f7ff fd89 	bl	8007d94 <_Unwind_VRS_Pop>
 8008282:	2800      	cmp	r0, #0
 8008284:	d0b3      	beq.n	80081ee <__gnu_unwind_execute+0xe>
 8008286:	2009      	movs	r0, #9
 8008288:	b005      	add	sp, #20
 800828a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800828e:	f000 030d 	and.w	r3, r0, #13
 8008292:	2b0d      	cmp	r3, #13
 8008294:	d0f7      	beq.n	8008286 <__gnu_unwind_execute+0xa6>
 8008296:	ad03      	add	r5, sp, #12
 8008298:	2300      	movs	r3, #0
 800829a:	f000 020f 	and.w	r2, r0, #15
 800829e:	4619      	mov	r1, r3
 80082a0:	9500      	str	r5, [sp, #0]
 80082a2:	4630      	mov	r0, r6
 80082a4:	f7ff fb82 	bl	80079ac <_Unwind_VRS_Get>
 80082a8:	2300      	movs	r3, #0
 80082aa:	9500      	str	r5, [sp, #0]
 80082ac:	4619      	mov	r1, r3
 80082ae:	220d      	movs	r2, #13
 80082b0:	4630      	mov	r0, r6
 80082b2:	f7ff fba1 	bl	80079f8 <_Unwind_VRS_Set>
 80082b6:	e79a      	b.n	80081ee <__gnu_unwind_execute+0xe>
 80082b8:	43c2      	mvns	r2, r0
 80082ba:	f002 0307 	and.w	r3, r2, #7
 80082be:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 80082c2:	411a      	asrs	r2, r3
 80082c4:	0701      	lsls	r1, r0, #28
 80082c6:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 80082ca:	f04f 0300 	mov.w	r3, #0
 80082ce:	bf48      	it	mi
 80082d0:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 80082d4:	4619      	mov	r1, r3
 80082d6:	4630      	mov	r0, r6
 80082d8:	f7ff fd5c 	bl	8007d94 <_Unwind_VRS_Pop>
 80082dc:	2800      	cmp	r0, #0
 80082de:	d1d2      	bne.n	8008286 <__gnu_unwind_execute+0xa6>
 80082e0:	e785      	b.n	80081ee <__gnu_unwind_execute+0xe>
 80082e2:	28b1      	cmp	r0, #177	; 0xb1
 80082e4:	d057      	beq.n	8008396 <__gnu_unwind_execute+0x1b6>
 80082e6:	28b2      	cmp	r0, #178	; 0xb2
 80082e8:	d068      	beq.n	80083bc <__gnu_unwind_execute+0x1dc>
 80082ea:	28b3      	cmp	r0, #179	; 0xb3
 80082ec:	f000 8095 	beq.w	800841a <__gnu_unwind_execute+0x23a>
 80082f0:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 80082f4:	2bb4      	cmp	r3, #180	; 0xb4
 80082f6:	d0c6      	beq.n	8008286 <__gnu_unwind_execute+0xa6>
 80082f8:	f000 0207 	and.w	r2, r0, #7
 80082fc:	3201      	adds	r2, #1
 80082fe:	2301      	movs	r3, #1
 8008300:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8008304:	4619      	mov	r1, r3
 8008306:	4630      	mov	r0, r6
 8008308:	f7ff fd44 	bl	8007d94 <_Unwind_VRS_Pop>
 800830c:	2800      	cmp	r0, #0
 800830e:	d1ba      	bne.n	8008286 <__gnu_unwind_execute+0xa6>
 8008310:	e76d      	b.n	80081ee <__gnu_unwind_execute+0xe>
 8008312:	4638      	mov	r0, r7
 8008314:	f7ff ff38 	bl	8008188 <next_unwind_byte>
 8008318:	0224      	lsls	r4, r4, #8
 800831a:	4304      	orrs	r4, r0
 800831c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8008320:	d0b1      	beq.n	8008286 <__gnu_unwind_execute+0xa6>
 8008322:	0124      	lsls	r4, r4, #4
 8008324:	2300      	movs	r3, #0
 8008326:	b2a2      	uxth	r2, r4
 8008328:	4619      	mov	r1, r3
 800832a:	4630      	mov	r0, r6
 800832c:	f7ff fd32 	bl	8007d94 <_Unwind_VRS_Pop>
 8008330:	2800      	cmp	r0, #0
 8008332:	d1a8      	bne.n	8008286 <__gnu_unwind_execute+0xa6>
 8008334:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8008338:	bf18      	it	ne
 800833a:	f04f 0801 	movne.w	r8, #1
 800833e:	e756      	b.n	80081ee <__gnu_unwind_execute+0xe>
 8008340:	28c6      	cmp	r0, #198	; 0xc6
 8008342:	d07d      	beq.n	8008440 <__gnu_unwind_execute+0x260>
 8008344:	28c7      	cmp	r0, #199	; 0xc7
 8008346:	f000 8086 	beq.w	8008456 <__gnu_unwind_execute+0x276>
 800834a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800834e:	2bc0      	cmp	r3, #192	; 0xc0
 8008350:	f000 8094 	beq.w	800847c <__gnu_unwind_execute+0x29c>
 8008354:	28c8      	cmp	r0, #200	; 0xc8
 8008356:	f000 809f 	beq.w	8008498 <__gnu_unwind_execute+0x2b8>
 800835a:	28c9      	cmp	r0, #201	; 0xc9
 800835c:	d193      	bne.n	8008286 <__gnu_unwind_execute+0xa6>
 800835e:	4638      	mov	r0, r7
 8008360:	f7ff ff12 	bl	8008188 <next_unwind_byte>
 8008364:	0302      	lsls	r2, r0, #12
 8008366:	f000 000f 	and.w	r0, r0, #15
 800836a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 800836e:	3001      	adds	r0, #1
 8008370:	4302      	orrs	r2, r0
 8008372:	e781      	b.n	8008278 <__gnu_unwind_execute+0x98>
 8008374:	ac03      	add	r4, sp, #12
 8008376:	4643      	mov	r3, r8
 8008378:	220e      	movs	r2, #14
 800837a:	4641      	mov	r1, r8
 800837c:	9400      	str	r4, [sp, #0]
 800837e:	4630      	mov	r0, r6
 8008380:	f7ff fb14 	bl	80079ac <_Unwind_VRS_Get>
 8008384:	9400      	str	r4, [sp, #0]
 8008386:	4630      	mov	r0, r6
 8008388:	4643      	mov	r3, r8
 800838a:	220f      	movs	r2, #15
 800838c:	4641      	mov	r1, r8
 800838e:	f7ff fb33 	bl	80079f8 <_Unwind_VRS_Set>
 8008392:	4640      	mov	r0, r8
 8008394:	e778      	b.n	8008288 <__gnu_unwind_execute+0xa8>
 8008396:	4638      	mov	r0, r7
 8008398:	f7ff fef6 	bl	8008188 <next_unwind_byte>
 800839c:	2800      	cmp	r0, #0
 800839e:	f43f af72 	beq.w	8008286 <__gnu_unwind_execute+0xa6>
 80083a2:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80083a6:	f47f af6e 	bne.w	8008286 <__gnu_unwind_execute+0xa6>
 80083aa:	4602      	mov	r2, r0
 80083ac:	4619      	mov	r1, r3
 80083ae:	4630      	mov	r0, r6
 80083b0:	f7ff fcf0 	bl	8007d94 <_Unwind_VRS_Pop>
 80083b4:	2800      	cmp	r0, #0
 80083b6:	f47f af66 	bne.w	8008286 <__gnu_unwind_execute+0xa6>
 80083ba:	e718      	b.n	80081ee <__gnu_unwind_execute+0xe>
 80083bc:	2300      	movs	r3, #0
 80083be:	f10d 090c 	add.w	r9, sp, #12
 80083c2:	220d      	movs	r2, #13
 80083c4:	4619      	mov	r1, r3
 80083c6:	f8cd 9000 	str.w	r9, [sp]
 80083ca:	4630      	mov	r0, r6
 80083cc:	f7ff faee 	bl	80079ac <_Unwind_VRS_Get>
 80083d0:	4638      	mov	r0, r7
 80083d2:	f7ff fed9 	bl	8008188 <next_unwind_byte>
 80083d6:	0602      	lsls	r2, r0, #24
 80083d8:	f04f 0402 	mov.w	r4, #2
 80083dc:	d50c      	bpl.n	80083f8 <__gnu_unwind_execute+0x218>
 80083de:	9b03      	ldr	r3, [sp, #12]
 80083e0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80083e4:	40a0      	lsls	r0, r4
 80083e6:	4403      	add	r3, r0
 80083e8:	4638      	mov	r0, r7
 80083ea:	9303      	str	r3, [sp, #12]
 80083ec:	f7ff fecc 	bl	8008188 <next_unwind_byte>
 80083f0:	0603      	lsls	r3, r0, #24
 80083f2:	f104 0407 	add.w	r4, r4, #7
 80083f6:	d4f2      	bmi.n	80083de <__gnu_unwind_execute+0x1fe>
 80083f8:	9b03      	ldr	r3, [sp, #12]
 80083fa:	f8cd 9000 	str.w	r9, [sp]
 80083fe:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8008402:	40a2      	lsls	r2, r4
 8008404:	f503 7401 	add.w	r4, r3, #516	; 0x204
 8008408:	2300      	movs	r3, #0
 800840a:	4414      	add	r4, r2
 800840c:	4619      	mov	r1, r3
 800840e:	220d      	movs	r2, #13
 8008410:	4630      	mov	r0, r6
 8008412:	9403      	str	r4, [sp, #12]
 8008414:	f7ff faf0 	bl	80079f8 <_Unwind_VRS_Set>
 8008418:	e6e9      	b.n	80081ee <__gnu_unwind_execute+0xe>
 800841a:	4638      	mov	r0, r7
 800841c:	f7ff feb4 	bl	8008188 <next_unwind_byte>
 8008420:	0301      	lsls	r1, r0, #12
 8008422:	f000 000f 	and.w	r0, r0, #15
 8008426:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 800842a:	1c42      	adds	r2, r0, #1
 800842c:	2301      	movs	r3, #1
 800842e:	430a      	orrs	r2, r1
 8008430:	4630      	mov	r0, r6
 8008432:	4619      	mov	r1, r3
 8008434:	f7ff fcae 	bl	8007d94 <_Unwind_VRS_Pop>
 8008438:	2800      	cmp	r0, #0
 800843a:	f47f af24 	bne.w	8008286 <__gnu_unwind_execute+0xa6>
 800843e:	e6d6      	b.n	80081ee <__gnu_unwind_execute+0xe>
 8008440:	4638      	mov	r0, r7
 8008442:	f7ff fea1 	bl	8008188 <next_unwind_byte>
 8008446:	0301      	lsls	r1, r0, #12
 8008448:	f000 000f 	and.w	r0, r0, #15
 800844c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8008450:	1c42      	adds	r2, r0, #1
 8008452:	2303      	movs	r3, #3
 8008454:	e7eb      	b.n	800842e <__gnu_unwind_execute+0x24e>
 8008456:	4638      	mov	r0, r7
 8008458:	f7ff fe96 	bl	8008188 <next_unwind_byte>
 800845c:	2800      	cmp	r0, #0
 800845e:	f43f af12 	beq.w	8008286 <__gnu_unwind_execute+0xa6>
 8008462:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8008466:	f47f af0e 	bne.w	8008286 <__gnu_unwind_execute+0xa6>
 800846a:	4602      	mov	r2, r0
 800846c:	2104      	movs	r1, #4
 800846e:	4630      	mov	r0, r6
 8008470:	f7ff fc90 	bl	8007d94 <_Unwind_VRS_Pop>
 8008474:	2800      	cmp	r0, #0
 8008476:	f47f af06 	bne.w	8008286 <__gnu_unwind_execute+0xa6>
 800847a:	e6b8      	b.n	80081ee <__gnu_unwind_execute+0xe>
 800847c:	f000 020f 	and.w	r2, r0, #15
 8008480:	3201      	adds	r2, #1
 8008482:	2303      	movs	r3, #3
 8008484:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8008488:	4619      	mov	r1, r3
 800848a:	4630      	mov	r0, r6
 800848c:	f7ff fc82 	bl	8007d94 <_Unwind_VRS_Pop>
 8008490:	2800      	cmp	r0, #0
 8008492:	f47f aef8 	bne.w	8008286 <__gnu_unwind_execute+0xa6>
 8008496:	e6aa      	b.n	80081ee <__gnu_unwind_execute+0xe>
 8008498:	4638      	mov	r0, r7
 800849a:	f7ff fe75 	bl	8008188 <next_unwind_byte>
 800849e:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80084a2:	f000 030f 	and.w	r3, r0, #15
 80084a6:	3210      	adds	r2, #16
 80084a8:	3301      	adds	r3, #1
 80084aa:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 80084ae:	e6e3      	b.n	8008278 <__gnu_unwind_execute+0x98>

080084b0 <__gnu_unwind_frame>:
 80084b0:	b510      	push	{r4, lr}
 80084b2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80084b4:	b084      	sub	sp, #16
 80084b6:	685a      	ldr	r2, [r3, #4]
 80084b8:	2003      	movs	r0, #3
 80084ba:	f88d 000c 	strb.w	r0, [sp, #12]
 80084be:	79dc      	ldrb	r4, [r3, #7]
 80084c0:	f88d 400d 	strb.w	r4, [sp, #13]
 80084c4:	0212      	lsls	r2, r2, #8
 80084c6:	3308      	adds	r3, #8
 80084c8:	4608      	mov	r0, r1
 80084ca:	a901      	add	r1, sp, #4
 80084cc:	9201      	str	r2, [sp, #4]
 80084ce:	9302      	str	r3, [sp, #8]
 80084d0:	f7ff fe86 	bl	80081e0 <__gnu_unwind_execute>
 80084d4:	b004      	add	sp, #16
 80084d6:	bd10      	pop	{r4, pc}

080084d8 <_Unwind_GetRegionStart>:
 80084d8:	b508      	push	{r3, lr}
 80084da:	f7ff fe7f 	bl	80081dc <unwind_UCB_from_context>
 80084de:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80084e0:	bd08      	pop	{r3, pc}
 80084e2:	bf00      	nop

080084e4 <_Unwind_GetLanguageSpecificData>:
 80084e4:	b508      	push	{r3, lr}
 80084e6:	f7ff fe79 	bl	80081dc <unwind_UCB_from_context>
 80084ea:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80084ec:	79c3      	ldrb	r3, [r0, #7]
 80084ee:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80084f2:	3008      	adds	r0, #8
 80084f4:	bd08      	pop	{r3, pc}
 80084f6:	bf00      	nop

080084f8 <_Unwind_GetTextRelBase>:
 80084f8:	b508      	push	{r3, lr}
 80084fa:	f009 f92c 	bl	8011756 <abort>
 80084fe:	bf00      	nop

08008500 <_Unwind_GetDataRelBase>:
 8008500:	b508      	push	{r3, lr}
 8008502:	f7ff fff9 	bl	80084f8 <_Unwind_GetTextRelBase>
 8008506:	bf00      	nop

08008508 <__aeabi_idiv0>:
 8008508:	4770      	bx	lr
 800850a:	bf00      	nop

0800850c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800850c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800850e:	4b0a      	ldr	r3, [pc, #40]	; (8008538 <HAL_InitTick+0x2c>)
{
 8008510:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8008512:	6818      	ldr	r0, [r3, #0]
 8008514:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008518:	fbb0 f0f3 	udiv	r0, r0, r3
 800851c:	f001 f8c0 	bl	80096a0 <HAL_SYSTICK_Config>
 8008520:	4604      	mov	r4, r0
 8008522:	b938      	cbnz	r0, 8008534 <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8008524:	4602      	mov	r2, r0
 8008526:	4629      	mov	r1, r5
 8008528:	f04f 30ff 	mov.w	r0, #4294967295
 800852c:	f001 f876 	bl	800961c <HAL_NVIC_SetPriority>
 8008530:	4620      	mov	r0, r4
 8008532:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8008534:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8008536:	bd38      	pop	{r3, r4, r5, pc}
 8008538:	20000004 	.word	0x20000004

0800853c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800853c:	4a09      	ldr	r2, [pc, #36]	; (8008564 <HAL_Init+0x28>)
 800853e:	6813      	ldr	r3, [r2, #0]
 8008540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8008544:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008546:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008548:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800854a:	f001 f849 	bl	80095e0 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800854e:	2000      	movs	r0, #0
 8008550:	f7ff ffdc 	bl	800850c <HAL_InitTick>
 8008554:	4604      	mov	r4, r0
 8008556:	b918      	cbnz	r0, 8008560 <HAL_Init+0x24>
    HAL_MspInit();
 8008558:	f006 fe46 	bl	800f1e8 <HAL_MspInit>
}
 800855c:	4620      	mov	r0, r4
 800855e:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8008560:	2401      	movs	r4, #1
 8008562:	e7fb      	b.n	800855c <HAL_Init+0x20>
 8008564:	40022000 	.word	0x40022000

08008568 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8008568:	4a02      	ldr	r2, [pc, #8]	; (8008574 <HAL_IncTick+0xc>)
 800856a:	6813      	ldr	r3, [r2, #0]
 800856c:	3301      	adds	r3, #1
 800856e:	6013      	str	r3, [r2, #0]
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	20000950 	.word	0x20000950

08008578 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8008578:	4b01      	ldr	r3, [pc, #4]	; (8008580 <HAL_GetTick+0x8>)
 800857a:	6818      	ldr	r0, [r3, #0]
}
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop
 8008580:	20000950 	.word	0x20000950

08008584 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008584:	b538      	push	{r3, r4, r5, lr}
 8008586:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008588:	f7ff fff6 	bl	8008578 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800858c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800858e:	4605      	mov	r5, r0
  {
    wait++;
 8008590:	bf18      	it	ne
 8008592:	3401      	addne	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008594:	f7ff fff0 	bl	8008578 <HAL_GetTick>
 8008598:	1b40      	subs	r0, r0, r5
 800859a:	4284      	cmp	r4, r0
 800859c:	d8fa      	bhi.n	8008594 <HAL_Delay+0x10>
  {
  }
}
 800859e:	bd38      	pop	{r3, r4, r5, pc}

080085a0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80085a0:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80085a2:	0dcc      	lsrs	r4, r1, #23
 80085a4:	f004 0404 	and.w	r4, r4, #4
 80085a8:	3014      	adds	r0, #20
  
  MODIFY_REG(*preg,
 80085aa:	f3c1 5104 	ubfx	r1, r1, #20, #5
 80085ae:	2307      	movs	r3, #7
 80085b0:	fa03 f501 	lsl.w	r5, r3, r1
 80085b4:	5823      	ldr	r3, [r4, r0]
 80085b6:	fa02 f101 	lsl.w	r1, r2, r1
 80085ba:	ea23 0305 	bic.w	r3, r3, r5
 80085be:	4319      	orrs	r1, r3
 80085c0:	5021      	str	r1, [r4, r0]
 80085c2:	bd30      	pop	{r4, r5, pc}

080085c4 <LL_ADC_IsEnabled>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80085c4:	6880      	ldr	r0, [r0, #8]
}
 80085c6:	f000 0001 	and.w	r0, r0, #1
 80085ca:	4770      	bx	lr

080085cc <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80085cc:	6880      	ldr	r0, [r0, #8]
}
 80085ce:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80085d2:	4770      	bx	lr

080085d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80085d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0;
 80085d6:	2300      	movs	r3, #0
 80085d8:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80085da:	4604      	mov	r4, r0
 80085dc:	2800      	cmp	r0, #0
 80085de:	f000 8168 	beq.w	80088b2 <HAL_ADC_Init+0x2de>
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80085e2:	6803      	ldr	r3, [r0, #0]
 80085e4:	4ab4      	ldr	r2, [pc, #720]	; (80088b8 <HAL_ADC_Init+0x2e4>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d00c      	beq.n	8008604 <HAL_ADC_Init+0x30>
 80085ea:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d008      	beq.n	8008604 <HAL_ADC_Init+0x30>
 80085f2:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d004      	beq.n	8008604 <HAL_ADC_Init+0x30>
 80085fa:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
 80085fe:	48af      	ldr	r0, [pc, #700]	; (80088bc <HAL_ADC_Init+0x2e8>)
 8008600:	f006 fdb6 	bl	800f170 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8008604:	6863      	ldr	r3, [r4, #4]
 8008606:	f433 3240 	bics.w	r2, r3, #196608	; 0x30000
 800860a:	d01b      	beq.n	8008644 <HAL_ADC_Init+0x70>
 800860c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008610:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8008614:	d016      	beq.n	8008644 <HAL_ADC_Init+0x70>
 8008616:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800861a:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 800861e:	d011      	beq.n	8008644 <HAL_ADC_Init+0x70>
 8008620:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008624:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8008628:	d00c      	beq.n	8008644 <HAL_ADC_Init+0x70>
 800862a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800862e:	d009      	beq.n	8008644 <HAL_ADC_Init+0x70>
 8008630:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8008634:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008638:	d004      	beq.n	8008644 <HAL_ADC_Init+0x70>
 800863a:	f240 11b3 	movw	r1, #435	; 0x1b3
 800863e:	489f      	ldr	r0, [pc, #636]	; (80088bc <HAL_ADC_Init+0x2e8>)
 8008640:	f006 fd96 	bl	800f170 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8008644:	68a3      	ldr	r3, [r4, #8]
 8008646:	f033 0318 	bics.w	r3, r3, #24
 800864a:	d004      	beq.n	8008656 <HAL_ADC_Init+0x82>
 800864c:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8008650:	489a      	ldr	r0, [pc, #616]	; (80088bc <HAL_ADC_Init+0x2e8>)
 8008652:	f006 fd8d 	bl	800f170 <assert_failed>
#if defined(ADC_CFGR_DFSDMCFG) &&defined(DFSDM1_Channel0)
  assert_param(IS_ADC_DFSDMCFG_MODE(hadc));
#endif
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8008656:	68e3      	ldr	r3, [r4, #12]
 8008658:	f033 0320 	bics.w	r3, r3, #32
 800865c:	d004      	beq.n	8008668 <HAL_ADC_Init+0x94>
 800865e:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8008662:	4896      	ldr	r0, [pc, #600]	; (80088bc <HAL_ADC_Init+0x2e8>)
 8008664:	f006 fd84 	bl	800f170 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8008668:	6923      	ldr	r3, [r4, #16]
 800866a:	2b01      	cmp	r3, #1
 800866c:	d904      	bls.n	8008678 <HAL_ADC_Init+0xa4>
 800866e:	f240 11b9 	movw	r1, #441	; 0x1b9
 8008672:	4892      	ldr	r0, [pc, #584]	; (80088bc <HAL_ADC_Init+0x2e8>)
 8008674:	f006 fd7c 	bl	800f170 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8008678:	7e63      	ldrb	r3, [r4, #25]
 800867a:	2b01      	cmp	r3, #1
 800867c:	d904      	bls.n	8008688 <HAL_ADC_Init+0xb4>
 800867e:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
 8008682:	488e      	ldr	r0, [pc, #568]	; (80088bc <HAL_ADC_Init+0x2e8>)
 8008684:	f006 fd74 	bl	800f170 <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8008688:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800868a:	f433 6340 	bics.w	r3, r3, #3072	; 0xc00
 800868e:	d004      	beq.n	800869a <HAL_ADC_Init+0xc6>
 8008690:	f240 11bb 	movw	r1, #443	; 0x1bb
 8008694:	4889      	ldr	r0, [pc, #548]	; (80088bc <HAL_ADC_Init+0x2e8>)
 8008696:	f006 fd6b 	bl	800f170 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc, hadc->Init.ExternalTrigConv));
 800869a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800869c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80086a0:	f5b2 6f88 	cmp.w	r2, #1088	; 0x440
 80086a4:	d021      	beq.n	80086ea <HAL_ADC_Init+0x116>
 80086a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80086aa:	f5b2 6f90 	cmp.w	r2, #1152	; 0x480
 80086ae:	d01c      	beq.n	80086ea <HAL_ADC_Init+0x116>
 80086b0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80086b4:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 80086b8:	d017      	beq.n	80086ea <HAL_ADC_Init+0x116>
 80086ba:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80086be:	f5b2 6fb8 	cmp.w	r2, #1472	; 0x5c0
 80086c2:	d012      	beq.n	80086ea <HAL_ADC_Init+0x116>
 80086c4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80086c8:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
 80086cc:	d00d      	beq.n	80086ea <HAL_ADC_Init+0x116>
 80086ce:	f5b3 6fe8 	cmp.w	r3, #1856	; 0x740
 80086d2:	d00a      	beq.n	80086ea <HAL_ADC_Init+0x116>
 80086d4:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 80086d8:	d007      	beq.n	80086ea <HAL_ADC_Init+0x116>
 80086da:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 80086de:	d004      	beq.n	80086ea <HAL_ADC_Init+0x116>
 80086e0:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 80086e4:	4875      	ldr	r0, [pc, #468]	; (80088bc <HAL_ADC_Init+0x2e8>)
 80086e6:	f006 fd43 	bl	800f170 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80086ea:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d904      	bls.n	80086fc <HAL_ADC_Init+0x128>
 80086f2:	f240 11bd 	movw	r1, #445	; 0x1bd
 80086f6:	4871      	ldr	r0, [pc, #452]	; (80088bc <HAL_ADC_Init+0x2e8>)
 80086f8:	f006 fd3a 	bl	800f170 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 80086fc:	6963      	ldr	r3, [r4, #20]
 80086fe:	2b04      	cmp	r3, #4
 8008700:	d006      	beq.n	8008710 <HAL_ADC_Init+0x13c>
 8008702:	2b08      	cmp	r3, #8
 8008704:	d004      	beq.n	8008710 <HAL_ADC_Init+0x13c>
 8008706:	f44f 71df 	mov.w	r1, #446	; 0x1be
 800870a:	486c      	ldr	r0, [pc, #432]	; (80088bc <HAL_ADC_Init+0x2e8>)
 800870c:	f006 fd30 	bl	800f170 <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 8008710:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008712:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8008716:	d004      	beq.n	8008722 <HAL_ADC_Init+0x14e>
 8008718:	f240 11bf 	movw	r1, #447	; 0x1bf
 800871c:	4867      	ldr	r0, [pc, #412]	; (80088bc <HAL_ADC_Init+0x2e8>)
 800871e:	f006 fd27 	bl	800f170 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 8008722:	7e23      	ldrb	r3, [r4, #24]
 8008724:	2b01      	cmp	r3, #1
 8008726:	d904      	bls.n	8008732 <HAL_ADC_Init+0x15e>
 8008728:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800872c:	4863      	ldr	r0, [pc, #396]	; (80088bc <HAL_ADC_Init+0x2e8>)
 800872e:	f006 fd1f 	bl	800f170 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 8008732:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8008736:	2b01      	cmp	r3, #1
 8008738:	d904      	bls.n	8008744 <HAL_ADC_Init+0x170>
 800873a:	f240 11c1 	movw	r1, #449	; 0x1c1
 800873e:	485f      	ldr	r0, [pc, #380]	; (80088bc <HAL_ADC_Init+0x2e8>)
 8008740:	f006 fd16 	bl	800f170 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8008744:	6923      	ldr	r3, [r4, #16]
 8008746:	b1f3      	cbz	r3, 8008786 <HAL_ADC_Init+0x1b2>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8008748:	69e3      	ldr	r3, [r4, #28]
 800874a:	3b01      	subs	r3, #1
 800874c:	2b0f      	cmp	r3, #15
 800874e:	d904      	bls.n	800875a <HAL_ADC_Init+0x186>
 8008750:	f240 11c5 	movw	r1, #453	; 0x1c5
 8008754:	4859      	ldr	r0, [pc, #356]	; (80088bc <HAL_ADC_Init+0x2e8>)
 8008756:	f006 fd0b 	bl	800f170 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800875a:	f894 3020 	ldrb.w	r3, [r4, #32]
 800875e:	2b01      	cmp	r3, #1
 8008760:	d904      	bls.n	800876c <HAL_ADC_Init+0x198>
 8008762:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8008766:	4855      	ldr	r0, [pc, #340]	; (80088bc <HAL_ADC_Init+0x2e8>)
 8008768:	f006 fd02 	bl	800f170 <assert_failed>
    
    if(hadc->Init.DiscontinuousConvMode == ENABLE)
 800876c:	f894 3020 	ldrb.w	r3, [r4, #32]
 8008770:	2b01      	cmp	r3, #1
 8008772:	d114      	bne.n	800879e <HAL_ADC_Init+0x1ca>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8008774:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008776:	3b01      	subs	r3, #1
 8008778:	2b07      	cmp	r3, #7
 800877a:	d908      	bls.n	800878e <HAL_ADC_Init+0x1ba>
 800877c:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 8008780:	484e      	ldr	r0, [pc, #312]	; (80088bc <HAL_ADC_Init+0x2e8>)
 8008782:	f006 fcf5 	bl	800f170 <assert_failed>
    }
  }
  
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
 8008786:	f894 3020 	ldrb.w	r3, [r4, #32]
 800878a:	2b01      	cmp	r3, #1
 800878c:	d107      	bne.n	800879e <HAL_ADC_Init+0x1ca>
 800878e:	7e63      	ldrb	r3, [r4, #25]
 8008790:	2b01      	cmp	r3, #1
 8008792:	d104      	bne.n	800879e <HAL_ADC_Init+0x1ca>
 8008794:	f240 11cf 	movw	r1, #463	; 0x1cf
 8008798:	4848      	ldr	r0, [pc, #288]	; (80088bc <HAL_ADC_Init+0x2e8>)
 800879a:	f006 fce9 	bl	800f170 <assert_failed>
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 800879e:	6d65      	ldr	r5, [r4, #84]	; 0x54
 80087a0:	b92d      	cbnz	r5, 80087ae <HAL_ADC_Init+0x1da>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80087a2:	4620      	mov	r0, r4
 80087a4:	f006 f8d4 	bl	800e950 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80087a8:	65a5      	str	r5, [r4, #88]	; 0x58
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80087aa:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  }
  
  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if(LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80087ae:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80087b0:	6883      	ldr	r3, [r0, #8]
 80087b2:	009a      	lsls	r2, r3, #2
 80087b4:	f100 808c 	bmi.w	80088d0 <HAL_ADC_Init+0x2fc>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80087b8:	6883      	ldr	r3, [r0, #8]
 80087ba:	00db      	lsls	r3, r3, #3
 80087bc:	f140 808f 	bpl.w	80088de <HAL_ADC_Init+0x30a>
 80087c0:	6883      	ldr	r3, [r0, #8]
 80087c2:	00dd      	lsls	r5, r3, #3
 80087c4:	f140 8099 	bpl.w	80088fa <HAL_ADC_Init+0x326>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80087c8:	2500      	movs	r5, #0
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80087ca:	f7ff feff 	bl	80085cc <LL_ADC_REG_IsConversionOngoing>
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80087ce:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80087d0:	f013 0f10 	tst.w	r3, #16
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80087d4:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80087d6:	d169      	bne.n	80088ac <HAL_ADC_Init+0x2d8>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80087d8:	2800      	cmp	r0, #0
 80087da:	d167      	bne.n	80088ac <HAL_ADC_Init+0x2d8>
    ADC_STATE_CLR_SET(hadc->State,
 80087dc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80087e0:	f043 0302 	orr.w	r3, r3, #2
 80087e4:	6563      	str	r3, [r4, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80087e6:	6820      	ldr	r0, [r4, #0]
 80087e8:	f7ff feec 	bl	80085c4 <LL_ADC_IsEnabled>
 80087ec:	b998      	cbnz	r0, 8008816 <HAL_ADC_Init+0x242>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80087ee:	4832      	ldr	r0, [pc, #200]	; (80088b8 <HAL_ADC_Init+0x2e4>)
 80087f0:	f7ff fee8 	bl	80085c4 <LL_ADC_IsEnabled>
 80087f4:	4603      	mov	r3, r0
 80087f6:	4832      	ldr	r0, [pc, #200]	; (80088c0 <HAL_ADC_Init+0x2ec>)
 80087f8:	f7ff fee4 	bl	80085c4 <LL_ADC_IsEnabled>
 80087fc:	4303      	orrs	r3, r0
 80087fe:	4831      	ldr	r0, [pc, #196]	; (80088c4 <HAL_ADC_Init+0x2f0>)
 8008800:	f7ff fee0 	bl	80085c4 <LL_ADC_IsEnabled>
 8008804:	4303      	orrs	r3, r0
 8008806:	d106      	bne.n	8008816 <HAL_ADC_Init+0x242>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8008808:	4a2f      	ldr	r2, [pc, #188]	; (80088c8 <HAL_ADC_Init+0x2f4>)
 800880a:	6861      	ldr	r1, [r4, #4]
 800880c:	6893      	ldr	r3, [r2, #8]
 800880e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8008812:	430b      	orrs	r3, r1
 8008814:	6093      	str	r3, [r2, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8008816:	68e1      	ldr	r1, [r4, #12]
 8008818:	6b63      	ldr	r3, [r4, #52]	; 0x34
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode)  );
 800881a:	f894 2020 	ldrb.w	r2, [r4, #32]
                hadc->Init.DataAlign                                                   |
 800881e:	430b      	orrs	r3, r1
 8008820:	68a1      	ldr	r1, [r4, #8]
 8008822:	430b      	orrs	r3, r1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008824:	7e61      	ldrb	r1, [r4, #25]
    
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008826:	2a01      	cmp	r2, #1
                hadc->Init.DataAlign                                                   |
 8008828:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800882c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8008830:	bf02      	ittt	eq
 8008832:	6a62      	ldreq	r2, [r4, #36]	; 0x24
 8008834:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8008838:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800883c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800883e:	b122      	cbz	r2, 800884a <HAL_ADC_Init+0x276>
    {
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8008840:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008842:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8008846:	430a      	orrs	r2, r1
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008848:	4313      	orrs	r3, r2
                 );
    }
    
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR); 
 800884a:	6820      	ldr	r0, [r4, #0]
 800884c:	4a1f      	ldr	r2, [pc, #124]	; (80088cc <HAL_ADC_Init+0x2f8>)
 800884e:	68c1      	ldr	r1, [r0, #12]
 8008850:	400a      	ands	r2, r1
 8008852:	4313      	orrs	r3, r2
 8008854:	60c3      	str	r3, [r0, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008856:	f7ff feb9 	bl	80085cc <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800885a:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800885c:	6893      	ldr	r3, [r2, #8]
 800885e:	0719      	lsls	r1, r3, #28
 8008860:	d555      	bpl.n	800890e <HAL_ADC_Init+0x33a>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008862:	6923      	ldr	r3, [r4, #16]
 8008864:	6822      	ldr	r2, [r4, #0]
 8008866:	2b01      	cmp	r3, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008868:	bf05      	ittet	eq
 800886a:	6b11      	ldreq	r1, [r2, #48]	; 0x30
 800886c:	69e3      	ldreq	r3, [r4, #28]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800886e:	6b13      	ldrne	r3, [r2, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008870:	f103 33ff 	addeq.w	r3, r3, #4294967295
 8008874:	bf06      	itte	eq
 8008876:	f021 010f 	biceq.w	r1, r1, #15
 800887a:	430b      	orreq	r3, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800887c:	f023 030f 	bicne.w	r3, r3, #15
 8008880:	6313      	str	r3, [r2, #48]	; 0x30
    }
    
    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008882:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008884:	f023 0303 	bic.w	r3, r3, #3
 8008888:	f043 0301 	orr.w	r3, r3, #1
 800888c:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 800888e:	4628      	mov	r0, r5
 8008890:	b003      	add	sp, #12
 8008892:	bd30      	pop	{r4, r5, pc}
      wait_loop_index--;
 8008894:	9b01      	ldr	r3, [sp, #4]
 8008896:	3b01      	subs	r3, #1
 8008898:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 800889a:	9b01      	ldr	r3, [sp, #4]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d1f9      	bne.n	8008894 <HAL_ADC_Init+0x2c0>
 80088a0:	e78e      	b.n	80087c0 <HAL_ADC_Init+0x1ec>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80088a2:	6913      	ldr	r3, [r2, #16]
 80088a4:	f023 0301 	bic.w	r3, r3, #1
 80088a8:	6113      	str	r3, [r2, #16]
 80088aa:	e7da      	b.n	8008862 <HAL_ADC_Init+0x28e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80088ac:	f043 0310 	orr.w	r3, r3, #16
 80088b0:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 80088b2:	2501      	movs	r5, #1
 80088b4:	e7eb      	b.n	800888e <HAL_ADC_Init+0x2ba>
 80088b6:	bf00      	nop
 80088b8:	50040000 	.word	0x50040000
 80088bc:	080174a0 	.word	0x080174a0
 80088c0:	50040100 	.word	0x50040100
 80088c4:	50040200 	.word	0x50040200
 80088c8:	50040300 	.word	0x50040300
 80088cc:	fff0c007 	.word	0xfff0c007
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80088d0:	6883      	ldr	r3, [r0, #8]
 80088d2:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80088d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80088da:	6083      	str	r3, [r0, #8]
 80088dc:	e76c      	b.n	80087b8 <HAL_ADC_Init+0x1e4>
  MODIFY_REG(ADCx->CR,
 80088de:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80088e0:	4a34      	ldr	r2, [pc, #208]	; (80089b4 <HAL_ADC_Init+0x3e0>)
 80088e2:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80088e6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80088ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088ee:	6083      	str	r3, [r0, #8]
 80088f0:	4b31      	ldr	r3, [pc, #196]	; (80089b8 <HAL_ADC_Init+0x3e4>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80088f8:	e7ce      	b.n	8008898 <HAL_ADC_Init+0x2c4>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80088fa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80088fc:	f043 0310 	orr.w	r3, r3, #16
 8008900:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008902:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008904:	f043 0301 	orr.w	r3, r3, #1
 8008908:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 800890a:	2501      	movs	r5, #1
 800890c:	e75d      	b.n	80087ca <HAL_ADC_Init+0x1f6>
    if (   (tmp_adc_is_conversion_on_going_regular == 0UL)
 800890e:	2800      	cmp	r0, #0
 8008910:	d1a7      	bne.n	8008862 <HAL_ADC_Init+0x28e>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8008912:	68d1      	ldr	r1, [r2, #12]
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8008914:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008918:	7e20      	ldrb	r0, [r4, #24]
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800891a:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800891c:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                            |
 8008920:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8008924:	f021 0102 	bic.w	r1, r1, #2
 8008928:	430b      	orrs	r3, r1
 800892a:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 800892c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8008930:	2b01      	cmp	r3, #1
 8008932:	d1b6      	bne.n	80088a2 <HAL_ADC_Init+0x2ce>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
 8008934:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008936:	2a1c      	cmp	r2, #28
 8008938:	d804      	bhi.n	8008944 <HAL_ADC_Init+0x370>
 800893a:	f04f 3311 	mov.w	r3, #286331153	; 0x11111111
 800893e:	40d3      	lsrs	r3, r2
 8008940:	07db      	lsls	r3, r3, #31
 8008942:	d404      	bmi.n	800894e <HAL_ADC_Init+0x37a>
 8008944:	f44f 7120 	mov.w	r1, #640	; 0x280
 8008948:	481c      	ldr	r0, [pc, #112]	; (80089bc <HAL_ADC_Init+0x3e8>)
 800894a:	f006 fc11 	bl	800f170 <assert_failed>
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
 800894e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008950:	f033 0260 	bics.w	r2, r3, #96	; 0x60
 8008954:	d009      	beq.n	800896a <HAL_ADC_Init+0x396>
 8008956:	2a80      	cmp	r2, #128	; 0x80
 8008958:	d007      	beq.n	800896a <HAL_ADC_Init+0x396>
 800895a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800895e:	d004      	beq.n	800896a <HAL_ADC_Init+0x396>
 8008960:	f240 2181 	movw	r1, #641	; 0x281
 8008964:	4815      	ldr	r0, [pc, #84]	; (80089bc <HAL_ADC_Init+0x3e8>)
 8008966:	f006 fc03 	bl	800f170 <assert_failed>
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
 800896a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800896c:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8008970:	d004      	beq.n	800897c <HAL_ADC_Init+0x3a8>
 8008972:	f240 2182 	movw	r1, #642	; 0x282
 8008976:	4811      	ldr	r0, [pc, #68]	; (80089bc <HAL_ADC_Init+0x3e8>)
 8008978:	f006 fbfa 	bl	800f170 <assert_failed>
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));
 800897c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800897e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008982:	2b01      	cmp	r3, #1
 8008984:	d004      	beq.n	8008990 <HAL_ADC_Init+0x3bc>
 8008986:	f240 2183 	movw	r1, #643	; 0x283
 800898a:	480c      	ldr	r0, [pc, #48]	; (80089bc <HAL_ADC_Init+0x3e8>)
 800898c:	f006 fbf0 	bl	800f170 <assert_failed>
        MODIFY_REG(hadc->Instance->CFGR2,
 8008990:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008992:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008994:	6821      	ldr	r1, [r4, #0]
 8008996:	4303      	orrs	r3, r0
 8008998:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800899a:	690a      	ldr	r2, [r1, #16]
 800899c:	f043 0301 	orr.w	r3, r3, #1
 80089a0:	4303      	orrs	r3, r0
 80089a2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80089a4:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 80089a8:	4303      	orrs	r3, r0
 80089aa:	f022 0204 	bic.w	r2, r2, #4
 80089ae:	4313      	orrs	r3, r2
 80089b0:	610b      	str	r3, [r1, #16]
 80089b2:	e756      	b.n	8008862 <HAL_ADC_Init+0x28e>
 80089b4:	00030d40 	.word	0x00030d40
 80089b8:	20000004 	.word	0x20000004
 80089bc:	080174a0 	.word	0x080174a0

080089c0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80089c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80089c4:	4f40      	ldr	r7, [pc, #256]	; (8008ac8 <HAL_ADC_PollForConversion+0x108>)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
#endif
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80089c6:	6802      	ldr	r2, [r0, #0]
 80089c8:	68be      	ldr	r6, [r7, #8]
{
 80089ca:	4688      	mov	r8, r1
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80089cc:	493f      	ldr	r1, [pc, #252]	; (8008acc <HAL_ADC_PollForConversion+0x10c>)
 80089ce:	428a      	cmp	r2, r1
{
 80089d0:	4604      	mov	r4, r0
 80089d2:	f006 061f 	and.w	r6, r6, #31
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80089d6:	d00b      	beq.n	80089f0 <HAL_ADC_PollForConversion+0x30>
 80089d8:	4b3d      	ldr	r3, [pc, #244]	; (8008ad0 <HAL_ADC_PollForConversion+0x110>)
 80089da:	429a      	cmp	r2, r3
 80089dc:	d008      	beq.n	80089f0 <HAL_ADC_PollForConversion+0x30>
 80089de:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d004      	beq.n	80089f0 <HAL_ADC_PollForConversion+0x30>
 80089e6:	f240 5197 	movw	r1, #1431	; 0x597
 80089ea:	483a      	ldr	r0, [pc, #232]	; (8008ad4 <HAL_ADC_PollForConversion+0x114>)
 80089ec:	f006 fbc0 	bl	800f170 <assert_failed>
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80089f0:	6965      	ldr	r5, [r4, #20]
 80089f2:	2d08      	cmp	r5, #8
 80089f4:	d017      	beq.n	8008a26 <HAL_ADC_PollForConversion+0x66>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (    (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80089f6:	2e09      	cmp	r6, #9
 80089f8:	d810      	bhi.n	8008a1c <HAL_ADC_PollForConversion+0x5c>
 80089fa:	f240 2321 	movw	r3, #545	; 0x221
 80089fe:	40f3      	lsrs	r3, r6
 8008a00:	07dd      	lsls	r5, r3, #31
 8008a02:	d50b      	bpl.n	8008a1c <HAL_ADC_PollForConversion+0x5c>
         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8008a04:	6823      	ldr	r3, [r4, #0]
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	f013 0f01 	tst.w	r3, #1
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8008a0c:	d00a      	beq.n	8008a24 <HAL_ADC_PollForConversion+0x64>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008a0e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008a10:	f043 0320 	orr.w	r3, r3, #32
 8008a14:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 8008a16:	2001      	movs	r0, #1
 8008a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8008a1c:	68bb      	ldr	r3, [r7, #8]
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8008a1e:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 8008a22:	e7f3      	b.n	8008a0c <HAL_ADC_PollForConversion+0x4c>
        tmp_Flag_End = (ADC_FLAG_EOC);
 8008a24:	2504      	movs	r5, #4
    }
#endif
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8008a26:	f7ff fda7 	bl	8008578 <HAL_GetTick>
 8008a2a:	4607      	mov	r7, r0
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8008a2c:	6823      	ldr	r3, [r4, #0]
 8008a2e:	681a      	ldr	r2, [r3, #0]
 8008a30:	4215      	tst	r5, r2
 8008a32:	d021      	beq.n	8008a78 <HAL_ADC_PollForConversion+0xb8>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008a34:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008a36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a3a:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8008a3c:	68da      	ldr	r2, [r3, #12]
 8008a3e:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8008a42:	d10f      	bne.n	8008a64 <HAL_ADC_PollForConversion+0xa4>
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(   (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
     && (hadc->Init.ContinuousConvMode == DISABLE)
 8008a44:	7e62      	ldrb	r2, [r4, #25]
 8008a46:	b96a      	cbnz	r2, 8008a64 <HAL_ADC_PollForConversion+0xa4>
    )
  {
    /* Check whether end of sequence is reached */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	0710      	lsls	r0, r2, #28
 8008a4c:	d50a      	bpl.n	8008a64 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008a4e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008a50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a54:	6562      	str	r2, [r4, #84]	; 0x54
      
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008a56:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008a58:	04d1      	lsls	r1, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008a5a:	bf5e      	ittt	pl
 8008a5c:	6d62      	ldrpl	r2, [r4, #84]	; 0x54
 8008a5e:	f042 0201 	orrpl.w	r2, r2, #1
 8008a62:	6562      	strpl	r2, [r4, #84]	; 0x54
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008a64:	4a1a      	ldr	r2, [pc, #104]	; (8008ad0 <HAL_ADC_PollForConversion+0x110>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d022      	beq.n	8008ab0 <HAL_ADC_PollForConversion+0xf0>
       || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
       || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8008a6a:	68d8      	ldr	r0, [r3, #12]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif
  
  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8008a6c:	2d08      	cmp	r5, #8
 8008a6e:	d118      	bne.n	8008aa2 <HAL_ADC_PollForConversion+0xe2>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);  
 8008a70:	601d      	str	r5, [r3, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8008a72:	2000      	movs	r0, #0
 8008a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8008a78:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008a7c:	d0d7      	beq.n	8008a2e <HAL_ADC_PollForConversion+0x6e>
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8008a7e:	f7ff fd7b 	bl	8008578 <HAL_GetTick>
 8008a82:	1bc0      	subs	r0, r0, r7
 8008a84:	4580      	cmp	r8, r0
 8008a86:	d302      	bcc.n	8008a8e <HAL_ADC_PollForConversion+0xce>
 8008a88:	f1b8 0f00 	cmp.w	r8, #0
 8008a8c:	d1ce      	bne.n	8008a2c <HAL_ADC_PollForConversion+0x6c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8008a8e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008a90:	f043 0304 	orr.w	r3, r3, #4
 8008a94:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8008a96:	2300      	movs	r3, #0
 8008a98:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        return HAL_TIMEOUT;
 8008a9c:	2003      	movs	r0, #3
 8008a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8008aa2:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 8008aa6:	d1e4      	bne.n	8008a72 <HAL_ADC_PollForConversion+0xb2>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8008aa8:	220c      	movs	r2, #12
 8008aaa:	601a      	str	r2, [r3, #0]
 8008aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008ab0:	2e09      	cmp	r6, #9
 8008ab2:	d805      	bhi.n	8008ac0 <HAL_ADC_PollForConversion+0x100>
 8008ab4:	f240 2221 	movw	r2, #545	; 0x221
 8008ab8:	fa22 f606 	lsr.w	r6, r2, r6
 8008abc:	07f2      	lsls	r2, r6, #31
 8008abe:	d4d4      	bmi.n	8008a6a <HAL_ADC_PollForConversion+0xaa>
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8008ac0:	4a02      	ldr	r2, [pc, #8]	; (8008acc <HAL_ADC_PollForConversion+0x10c>)
 8008ac2:	68d0      	ldr	r0, [r2, #12]
 8008ac4:	e7d2      	b.n	8008a6c <HAL_ADC_PollForConversion+0xac>
 8008ac6:	bf00      	nop
 8008ac8:	50040300 	.word	0x50040300
 8008acc:	50040000 	.word	0x50040000
 8008ad0:	50040100 	.word	0x50040100
 8008ad4:	080174a0 	.word	0x080174a0

08008ad8 <HAL_ADC_GetValue>:
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8008ad8:	6803      	ldr	r3, [r0, #0]
 8008ada:	4a0a      	ldr	r2, [pc, #40]	; (8008b04 <HAL_ADC_GetValue+0x2c>)
 8008adc:	4293      	cmp	r3, r2
{
 8008ade:	b510      	push	{r4, lr}
 8008ae0:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8008ae2:	d00c      	beq.n	8008afe <HAL_ADC_GetValue+0x26>
 8008ae4:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d008      	beq.n	8008afe <HAL_ADC_GetValue+0x26>
 8008aec:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d004      	beq.n	8008afe <HAL_ADC_GetValue+0x26>
 8008af4:	f640 01b9 	movw	r1, #2233	; 0x8b9
 8008af8:	4803      	ldr	r0, [pc, #12]	; (8008b08 <HAL_ADC_GetValue+0x30>)
 8008afa:	f006 fb39 	bl	800f170 <assert_failed>

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8008afe:	6823      	ldr	r3, [r4, #0]
 8008b00:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8008b02:	bd10      	pop	{r4, pc}
 8008b04:	50040000 	.word	0x50040000
 8008b08:	080174a0 	.word	0x080174a0

08008b0c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8008b0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8008b12:	4abd      	ldr	r2, [pc, #756]	; (8008e08 <HAL_ADC_ConfigChannel+0x2fc>)
 8008b14:	6803      	ldr	r3, [r0, #0]
 8008b16:	4293      	cmp	r3, r2
{
 8008b18:	4604      	mov	r4, r0
 8008b1a:	460d      	mov	r5, r1
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8008b1c:	d00c      	beq.n	8008b38 <HAL_ADC_ConfigChannel+0x2c>
 8008b1e:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d008      	beq.n	8008b38 <HAL_ADC_ConfigChannel+0x2c>
 8008b26:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d004      	beq.n	8008b38 <HAL_ADC_ConfigChannel+0x2c>
 8008b2e:	f640 21a5 	movw	r1, #2725	; 0xaa5
 8008b32:	48b6      	ldr	r0, [pc, #728]	; (8008e0c <HAL_ADC_ConfigChannel+0x300>)
 8008b34:	f006 fb1c 	bl	800f170 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8008b38:	686b      	ldr	r3, [r5, #4]
 8008b3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008b3e:	2a18      	cmp	r2, #24
 8008b40:	d803      	bhi.n	8008b4a <HAL_ADC_ConfigChannel+0x3e>
 8008b42:	49b3      	ldr	r1, [pc, #716]	; (8008e10 <HAL_ADC_ConfigChannel+0x304>)
 8008b44:	40d1      	lsrs	r1, r2
 8008b46:	07ce      	lsls	r6, r1, #31
 8008b48:	d416      	bmi.n	8008b78 <HAL_ADC_ConfigChannel+0x6c>
 8008b4a:	f423 7100 	bic.w	r1, r3, #512	; 0x200
 8008b4e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8008b52:	d011      	beq.n	8008b78 <HAL_ADC_ConfigChannel+0x6c>
 8008b54:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8008b58:	2b18      	cmp	r3, #24
 8008b5a:	d804      	bhi.n	8008b66 <HAL_ADC_ConfigChannel+0x5a>
 8008b5c:	49ad      	ldr	r1, [pc, #692]	; (8008e14 <HAL_ADC_ConfigChannel+0x308>)
 8008b5e:	fa21 f303 	lsr.w	r3, r1, r3
 8008b62:	07d8      	lsls	r0, r3, #31
 8008b64:	d408      	bmi.n	8008b78 <HAL_ADC_ConfigChannel+0x6c>
 8008b66:	f240 2306 	movw	r3, #518	; 0x206
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d004      	beq.n	8008b78 <HAL_ADC_ConfigChannel+0x6c>
 8008b6e:	f640 21a6 	movw	r1, #2726	; 0xaa6
 8008b72:	48a6      	ldr	r0, [pc, #664]	; (8008e0c <HAL_ADC_ConfigChannel+0x300>)
 8008b74:	f006 fafc 	bl	800f170 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8008b78:	68ab      	ldr	r3, [r5, #8]
 8008b7a:	2b07      	cmp	r3, #7
 8008b7c:	d904      	bls.n	8008b88 <HAL_ADC_ConfigChannel+0x7c>
 8008b7e:	f640 21a7 	movw	r1, #2727	; 0xaa7
 8008b82:	48a2      	ldr	r0, [pc, #648]	; (8008e0c <HAL_ADC_ConfigChannel+0x300>)
 8008b84:	f006 faf4 	bl	800f170 <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
 8008b88:	68eb      	ldr	r3, [r5, #12]
 8008b8a:	2b7f      	cmp	r3, #127	; 0x7f
 8008b8c:	d007      	beq.n	8008b9e <HAL_ADC_ConfigChannel+0x92>
 8008b8e:	4aa2      	ldr	r2, [pc, #648]	; (8008e18 <HAL_ADC_ConfigChannel+0x30c>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d004      	beq.n	8008b9e <HAL_ADC_ConfigChannel+0x92>
 8008b94:	f640 21a8 	movw	r1, #2728	; 0xaa8
 8008b98:	489c      	ldr	r0, [pc, #624]	; (8008e0c <HAL_ADC_ConfigChannel+0x300>)
 8008b9a:	f006 fae9 	bl	800f170 <assert_failed>
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
 8008b9e:	692b      	ldr	r3, [r5, #16]
 8008ba0:	2b04      	cmp	r3, #4
 8008ba2:	d904      	bls.n	8008bae <HAL_ADC_ConfigChannel+0xa2>
 8008ba4:	f640 21a9 	movw	r1, #2729	; 0xaa9
 8008ba8:	4898      	ldr	r0, [pc, #608]	; (8008e0c <HAL_ADC_ConfigChannel+0x300>)
 8008baa:	f006 fae1 	bl	800f170 <assert_failed>
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 8008bae:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	089b      	lsrs	r3, r3, #2
 8008bb4:	f640 72ff 	movw	r2, #4095	; 0xfff
 8008bb8:	f003 0306 	and.w	r3, r3, #6
 8008bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8008bc0:	696a      	ldr	r2, [r5, #20]
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d904      	bls.n	8008bd0 <HAL_ADC_ConfigChannel+0xc4>
 8008bc6:	f640 21aa 	movw	r1, #2730	; 0xaaa
 8008bca:	4890      	ldr	r0, [pc, #576]	; (8008e0c <HAL_ADC_ConfigChannel+0x300>)
 8008bcc:	f006 fad0 	bl	800f170 <assert_failed>
  
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is  
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));  
 8008bd0:	692b      	ldr	r3, [r5, #16]
 8008bd2:	2b04      	cmp	r3, #4
 8008bd4:	d008      	beq.n	8008be8 <HAL_ADC_ConfigChannel+0xdc>
 8008bd6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8008bda:	2b01      	cmp	r3, #1
 8008bdc:	d104      	bne.n	8008be8 <HAL_ADC_ConfigChannel+0xdc>
 8008bde:	f640 21ae 	movw	r1, #2734	; 0xaae
 8008be2:	488a      	ldr	r0, [pc, #552]	; (8008e0c <HAL_ADC_ConfigChannel+0x300>)
 8008be4:	f006 fac4 	bl	800f170 <assert_failed>
  
  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8008be8:	68ea      	ldr	r2, [r5, #12]
 8008bea:	4b8b      	ldr	r3, [pc, #556]	; (8008e18 <HAL_ADC_ConfigChannel+0x30c>)
 8008bec:	429a      	cmp	r2, r3
 8008bee:	6823      	ldr	r3, [r4, #0]
 8008bf0:	4a85      	ldr	r2, [pc, #532]	; (8008e08 <HAL_ADC_ConfigChannel+0x2fc>)
 8008bf2:	f000 8184 	beq.w	8008efe <HAL_ADC_ConfigChannel+0x3f2>
  {
     assert_param(IS_ADC_CHANNEL(hadc, sConfig->Channel));
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d14b      	bne.n	8008c92 <HAL_ADC_ConfigChannel+0x186>
 8008bfa:	682b      	ldr	r3, [r5, #0]
 8008bfc:	4a87      	ldr	r2, [pc, #540]	; (8008e1c <HAL_ADC_ConfigChannel+0x310>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	f000 809a 	beq.w	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008c04:	4a86      	ldr	r2, [pc, #536]	; (8008e20 <HAL_ADC_ConfigChannel+0x314>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	f000 8096 	beq.w	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008c0c:	4a85      	ldr	r2, [pc, #532]	; (8008e24 <HAL_ADC_ConfigChannel+0x318>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	f000 8092 	beq.w	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008c14:	4a84      	ldr	r2, [pc, #528]	; (8008e28 <HAL_ADC_ConfigChannel+0x31c>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	f000 808e 	beq.w	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008c1c:	f102 6286 	add.w	r2, r2, #70254592	; 0x4300000
 8008c20:	3210      	adds	r2, #16
 8008c22:	4293      	cmp	r3, r2
 8008c24:	f000 8088 	beq.w	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008c28:	4a80      	ldr	r2, [pc, #512]	; (8008e2c <HAL_ADC_ConfigChannel+0x320>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	f000 8084 	beq.w	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008c30:	f102 6286 	add.w	r2, r2, #70254592	; 0x4300000
 8008c34:	3240      	adds	r2, #64	; 0x40
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d07e      	beq.n	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008c3a:	4a7d      	ldr	r2, [pc, #500]	; (8008e30 <HAL_ADC_ConfigChannel+0x324>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d07b      	beq.n	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008c40:	f102 6286 	add.w	r2, r2, #70254592	; 0x4300000
 8008c44:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d075      	beq.n	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008c4c:	4a79      	ldr	r2, [pc, #484]	; (8008e34 <HAL_ADC_ConfigChannel+0x328>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d072      	beq.n	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008c52:	f102 2204 	add.w	r2, r2, #67109888	; 0x4000400
 8008c56:	f502 1240 	add.w	r2, r2, #3145728	; 0x300000
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d06c      	beq.n	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008c5e:	f102 6286 	add.w	r2, r2, #70254592	; 0x4300000
 8008c62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d066      	beq.n	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008c6a:	4a73      	ldr	r2, [pc, #460]	; (8008e38 <HAL_ADC_ConfigChannel+0x32c>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d063      	beq.n	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008c70:	4a72      	ldr	r2, [pc, #456]	; (8008e3c <HAL_ADC_ConfigChannel+0x330>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d060      	beq.n	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008c76:	4a72      	ldr	r2, [pc, #456]	; (8008e40 <HAL_ADC_ConfigChannel+0x334>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d05d      	beq.n	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008c7c:	4a71      	ldr	r2, [pc, #452]	; (8008e44 <HAL_ADC_ConfigChannel+0x338>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d05a      	beq.n	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008c82:	4a71      	ldr	r2, [pc, #452]	; (8008e48 <HAL_ADC_ConfigChannel+0x33c>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d057      	beq.n	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008c88:	4a70      	ldr	r2, [pc, #448]	; (8008e4c <HAL_ADC_ConfigChannel+0x340>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d054      	beq.n	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008c8e:	4a70      	ldr	r2, [pc, #448]	; (8008e50 <HAL_ADC_ConfigChannel+0x344>)
 8008c90:	e04b      	b.n	8008d2a <HAL_ADC_ConfigChannel+0x21e>
 8008c92:	4a70      	ldr	r2, [pc, #448]	; (8008e54 <HAL_ADC_ConfigChannel+0x348>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	f040 80e9 	bne.w	8008e6c <HAL_ADC_ConfigChannel+0x360>
 8008c9a:	682b      	ldr	r3, [r5, #0]
 8008c9c:	4a5f      	ldr	r2, [pc, #380]	; (8008e1c <HAL_ADC_ConfigChannel+0x310>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d04a      	beq.n	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008ca2:	4a5f      	ldr	r2, [pc, #380]	; (8008e20 <HAL_ADC_ConfigChannel+0x314>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d047      	beq.n	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008ca8:	4a5e      	ldr	r2, [pc, #376]	; (8008e24 <HAL_ADC_ConfigChannel+0x318>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d044      	beq.n	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008cae:	4a5e      	ldr	r2, [pc, #376]	; (8008e28 <HAL_ADC_ConfigChannel+0x31c>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d041      	beq.n	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008cb4:	f102 6286 	add.w	r2, r2, #70254592	; 0x4300000
 8008cb8:	3210      	adds	r2, #16
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d03c      	beq.n	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008cbe:	4a5b      	ldr	r2, [pc, #364]	; (8008e2c <HAL_ADC_ConfigChannel+0x320>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d039      	beq.n	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008cc4:	f102 6286 	add.w	r2, r2, #70254592	; 0x4300000
 8008cc8:	3240      	adds	r2, #64	; 0x40
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d034      	beq.n	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008cce:	4a58      	ldr	r2, [pc, #352]	; (8008e30 <HAL_ADC_ConfigChannel+0x324>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d031      	beq.n	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008cd4:	f102 6286 	add.w	r2, r2, #70254592	; 0x4300000
 8008cd8:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d02b      	beq.n	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008ce0:	4a54      	ldr	r2, [pc, #336]	; (8008e34 <HAL_ADC_ConfigChannel+0x328>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d028      	beq.n	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008ce6:	f102 2204 	add.w	r2, r2, #67109888	; 0x4000400
 8008cea:	f502 1240 	add.w	r2, r2, #3145728	; 0x300000
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d022      	beq.n	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008cf2:	f102 6286 	add.w	r2, r2, #70254592	; 0x4300000
 8008cf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d01c      	beq.n	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008cfe:	4a4e      	ldr	r2, [pc, #312]	; (8008e38 <HAL_ADC_ConfigChannel+0x32c>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d019      	beq.n	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008d04:	4a4d      	ldr	r2, [pc, #308]	; (8008e3c <HAL_ADC_ConfigChannel+0x330>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d016      	beq.n	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008d0a:	4a4d      	ldr	r2, [pc, #308]	; (8008e40 <HAL_ADC_ConfigChannel+0x334>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d013      	beq.n	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008d10:	4a4c      	ldr	r2, [pc, #304]	; (8008e44 <HAL_ADC_ConfigChannel+0x338>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d010      	beq.n	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008d16:	4a50      	ldr	r2, [pc, #320]	; (8008e58 <HAL_ADC_ConfigChannel+0x34c>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d00d      	beq.n	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008d1c:	4a4f      	ldr	r2, [pc, #316]	; (8008e5c <HAL_ADC_ConfigChannel+0x350>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d00a      	beq.n	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008d22:	4a4f      	ldr	r2, [pc, #316]	; (8008e60 <HAL_ADC_ConfigChannel+0x354>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d007      	beq.n	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008d28:	4a4e      	ldr	r2, [pc, #312]	; (8008e64 <HAL_ADC_ConfigChannel+0x358>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d004      	beq.n	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008d2e:	f640 21b3 	movw	r1, #2739	; 0xab3
  }
  else
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
 8008d32:	4836      	ldr	r0, [pc, #216]	; (8008e0c <HAL_ADC_ConfigChannel+0x300>)
 8008d34:	f006 fa1c 	bl	800f170 <assert_failed>
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008d38:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	f000 8290 	beq.w	8009262 <HAL_ADC_ConfigChannel+0x756>
 8008d42:	2301      	movs	r3, #1
 8008d44:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008d48:	6820      	ldr	r0, [r4, #0]
 8008d4a:	f7ff fc3f 	bl	80085cc <LL_ADC_REG_IsConversionOngoing>
 8008d4e:	2800      	cmp	r0, #0
 8008d50:	f040 8281 	bne.w	8009256 <HAL_ADC_ConfigChannel+0x74a>
      }
    }
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8008d54:	6869      	ldr	r1, [r5, #4]
 8008d56:	6820      	ldr	r0, [r4, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8008d58:	098e      	lsrs	r6, r1, #6
 8008d5a:	f100 0730 	add.w	r7, r0, #48	; 0x30
 8008d5e:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 8008d62:	f001 011f 	and.w	r1, r1, #31
 8008d66:	231f      	movs	r3, #31
 8008d68:	fa03 f201 	lsl.w	r2, r3, r1
 8008d6c:	59f3      	ldr	r3, [r6, r7]
 8008d6e:	ea23 0302 	bic.w	r3, r3, r2
 8008d72:	682a      	ldr	r2, [r5, #0]
 8008d74:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8008d78:	408a      	lsls	r2, r1
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	51f3      	str	r3, [r6, r7]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008d7e:	f7ff fc25 	bl	80085cc <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008d82:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008d84:	689a      	ldr	r2, [r3, #8]
 8008d86:	0711      	lsls	r1, r2, #28
 8008d88:	f140 826d 	bpl.w	8009266 <HAL_ADC_ConfigChannel+0x75a>
    }
    
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008d8c:	6820      	ldr	r0, [r4, #0]
 8008d8e:	f7ff fc19 	bl	80085c4 <LL_ADC_IsEnabled>
 8008d92:	2800      	cmp	r0, #0
 8008d94:	f040 81d1 	bne.w	800913a <HAL_ADC_ConfigChannel+0x62e>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8008d98:	68ee      	ldr	r6, [r5, #12]
 8008d9a:	6820      	ldr	r0, [r4, #0]
 8008d9c:	682b      	ldr	r3, [r5, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8008d9e:	4a32      	ldr	r2, [pc, #200]	; (8008e68 <HAL_ADC_ConfigChannel+0x35c>)
 8008da0:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
 8008da4:	f006 0e18 	and.w	lr, r6, #24
 8008da8:	f3c3 0712 	ubfx	r7, r3, #0, #19
 8008dac:	fa22 f20e 	lsr.w	r2, r2, lr
 8008db0:	401a      	ands	r2, r3
 8008db2:	ea21 0107 	bic.w	r1, r1, r7
 8008db6:	430a      	orrs	r2, r1
 8008db8:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      
      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008dbc:	4a16      	ldr	r2, [pc, #88]	; (8008e18 <HAL_ADC_ConfigChannel+0x30c>)
 8008dbe:	4296      	cmp	r6, r2
 8008dc0:	f040 81bb 	bne.w	800913a <HAL_ADC_ConfigChannel+0x62e>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1UL) & 0x1FUL), sConfig->SamplingTime);
 8008dc4:	2f00      	cmp	r7, #0
 8008dc6:	f040 818d 	bne.w	80090e4 <HAL_ADC_ConfigChannel+0x5d8>
 8008dca:	0e9e      	lsrs	r6, r3, #26
 8008dcc:	3601      	adds	r6, #1
 8008dce:	f006 021f 	and.w	r2, r6, #31
 8008dd2:	2a09      	cmp	r2, #9
 8008dd4:	f04f 0101 	mov.w	r1, #1
 8008dd8:	ea4f 6686 	mov.w	r6, r6, lsl #26
 8008ddc:	f240 819c 	bls.w	8009118 <HAL_ADC_ConfigChannel+0x60c>
 8008de0:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8008de4:	4091      	lsls	r1, r2
 8008de6:	ea41 0206 	orr.w	r2, r1, r6
 8008dea:	2f00      	cmp	r7, #0
 8008dec:	f040 81c5 	bne.w	800917a <HAL_ADC_ConfigChannel+0x66e>
 8008df0:	0e9b      	lsrs	r3, r3, #26
 8008df2:	3301      	adds	r3, #1
 8008df4:	f003 031f 	and.w	r3, r3, #31
 8008df8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8008dfc:	391e      	subs	r1, #30
 8008dfe:	0509      	lsls	r1, r1, #20
 8008e00:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8008e04:	e195      	b.n	8009132 <HAL_ADC_ConfigChannel+0x626>
 8008e06:	bf00      	nop
 8008e08:	50040000 	.word	0x50040000
 8008e0c:	080174a0 	.word	0x080174a0
 8008e10:	01041040 	.word	0x01041040
 8008e14:	01041001 	.word	0x01041001
 8008e18:	407f0000 	.word	0x407f0000
 8008e1c:	04300002 	.word	0x04300002
 8008e20:	08600004 	.word	0x08600004
 8008e24:	0c900008 	.word	0x0c900008
 8008e28:	10c00010 	.word	0x10c00010
 8008e2c:	19200040 	.word	0x19200040
 8008e30:	21800100 	.word	0x21800100
 8008e34:	2a000400 	.word	0x2a000400
 8008e38:	36902000 	.word	0x36902000
 8008e3c:	3ac04000 	.word	0x3ac04000
 8008e40:	3ef08000 	.word	0x3ef08000
 8008e44:	43210000 	.word	0x43210000
 8008e48:	80000001 	.word	0x80000001
 8008e4c:	c7520000 	.word	0xc7520000
 8008e50:	cb840000 	.word	0xcb840000
 8008e54:	50040100 	.word	0x50040100
 8008e58:	47520000 	.word	0x47520000
 8008e5c:	4b840000 	.word	0x4b840000
 8008e60:	c75a0000 	.word	0xc75a0000
 8008e64:	cb8c0000 	.word	0xcb8c0000
 8008e68:	0007ffff 	.word	0x0007ffff
     assert_param(IS_ADC_CHANNEL(hadc, sConfig->Channel));
 8008e6c:	4ac5      	ldr	r2, [pc, #788]	; (8009184 <HAL_ADC_ConfigChannel+0x678>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	f47f af5d 	bne.w	8008d2e <HAL_ADC_ConfigChannel+0x222>
 8008e74:	682b      	ldr	r3, [r5, #0]
 8008e76:	4ac4      	ldr	r2, [pc, #784]	; (8009188 <HAL_ADC_ConfigChannel+0x67c>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	f43f af5d 	beq.w	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008e7e:	4ac3      	ldr	r2, [pc, #780]	; (800918c <HAL_ADC_ConfigChannel+0x680>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	f43f af59 	beq.w	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008e86:	4ac2      	ldr	r2, [pc, #776]	; (8009190 <HAL_ADC_ConfigChannel+0x684>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	f43f af55 	beq.w	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008e8e:	4ac1      	ldr	r2, [pc, #772]	; (8009194 <HAL_ADC_ConfigChannel+0x688>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	f43f af51 	beq.w	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008e96:	4ac0      	ldr	r2, [pc, #768]	; (8009198 <HAL_ADC_ConfigChannel+0x68c>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	f43f af4d 	beq.w	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008e9e:	f102 6286 	add.w	r2, r2, #70254592	; 0x4300000
 8008ea2:	3240      	adds	r2, #64	; 0x40
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	f43f af47 	beq.w	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008eaa:	4abc      	ldr	r2, [pc, #752]	; (800919c <HAL_ADC_ConfigChannel+0x690>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	f43f af43 	beq.w	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008eb2:	f102 6286 	add.w	r2, r2, #70254592	; 0x4300000
 8008eb6:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	f43f af3c 	beq.w	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008ec0:	4ab7      	ldr	r2, [pc, #732]	; (80091a0 <HAL_ADC_ConfigChannel+0x694>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	f43f af38 	beq.w	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008ec8:	f102 2204 	add.w	r2, r2, #67109888	; 0x4000400
 8008ecc:	f502 1240 	add.w	r2, r2, #3145728	; 0x300000
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	f43f af31 	beq.w	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008ed6:	f102 6286 	add.w	r2, r2, #70254592	; 0x4300000
 8008eda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	f43f af2a 	beq.w	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008ee4:	4aaf      	ldr	r2, [pc, #700]	; (80091a4 <HAL_ADC_ConfigChannel+0x698>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	f43f af26 	beq.w	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008eec:	49ae      	ldr	r1, [pc, #696]	; (80091a8 <HAL_ADC_ConfigChannel+0x69c>)
 8008eee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008ef2:	428a      	cmp	r2, r1
 8008ef4:	f43f af20 	beq.w	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008ef8:	49ac      	ldr	r1, [pc, #688]	; (80091ac <HAL_ADC_ConfigChannel+0x6a0>)
 8008efa:	428a      	cmp	r2, r1
 8008efc:	e6c3      	b.n	8008c86 <HAL_ADC_ConfigChannel+0x17a>
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d002      	beq.n	8008f08 <HAL_ADC_ConfigChannel+0x3fc>
 8008f02:	4aab      	ldr	r2, [pc, #684]	; (80091b0 <HAL_ADC_ConfigChannel+0x6a4>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d14c      	bne.n	8008fa2 <HAL_ADC_ConfigChannel+0x496>
 8008f08:	682b      	ldr	r3, [r5, #0]
 8008f0a:	4a9f      	ldr	r2, [pc, #636]	; (8009188 <HAL_ADC_ConfigChannel+0x67c>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	f43f af13 	beq.w	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008f12:	4a9e      	ldr	r2, [pc, #632]	; (800918c <HAL_ADC_ConfigChannel+0x680>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	f43f af0f 	beq.w	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008f1a:	4a9d      	ldr	r2, [pc, #628]	; (8009190 <HAL_ADC_ConfigChannel+0x684>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	f43f af0b 	beq.w	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008f22:	4a9c      	ldr	r2, [pc, #624]	; (8009194 <HAL_ADC_ConfigChannel+0x688>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	f43f af07 	beq.w	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008f2a:	f102 6286 	add.w	r2, r2, #70254592	; 0x4300000
 8008f2e:	3210      	adds	r2, #16
 8008f30:	4293      	cmp	r3, r2
 8008f32:	f43f af01 	beq.w	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008f36:	4a98      	ldr	r2, [pc, #608]	; (8009198 <HAL_ADC_ConfigChannel+0x68c>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	f43f aefd 	beq.w	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008f3e:	f102 6286 	add.w	r2, r2, #70254592	; 0x4300000
 8008f42:	3240      	adds	r2, #64	; 0x40
 8008f44:	4293      	cmp	r3, r2
 8008f46:	f43f aef7 	beq.w	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008f4a:	4a94      	ldr	r2, [pc, #592]	; (800919c <HAL_ADC_ConfigChannel+0x690>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	f43f aef3 	beq.w	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008f52:	f102 6286 	add.w	r2, r2, #70254592	; 0x4300000
 8008f56:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	f43f aeec 	beq.w	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008f60:	4a8f      	ldr	r2, [pc, #572]	; (80091a0 <HAL_ADC_ConfigChannel+0x694>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	f43f aee8 	beq.w	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008f68:	f102 2204 	add.w	r2, r2, #67109888	; 0x4000400
 8008f6c:	f502 1240 	add.w	r2, r2, #3145728	; 0x300000
 8008f70:	4293      	cmp	r3, r2
 8008f72:	f43f aee1 	beq.w	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008f76:	f102 6286 	add.w	r2, r2, #70254592	; 0x4300000
 8008f7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	f43f aeda 	beq.w	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008f84:	4a87      	ldr	r2, [pc, #540]	; (80091a4 <HAL_ADC_ConfigChannel+0x698>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	f43f aed6 	beq.w	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008f8c:	4a86      	ldr	r2, [pc, #536]	; (80091a8 <HAL_ADC_ConfigChannel+0x69c>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	f43f aed2 	beq.w	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008f94:	4a85      	ldr	r2, [pc, #532]	; (80091ac <HAL_ADC_ConfigChannel+0x6a0>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	f43f aece 	beq.w	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008f9c:	f640 21b7 	movw	r1, #2743	; 0xab7
 8008fa0:	e6c7      	b.n	8008d32 <HAL_ADC_ConfigChannel+0x226>
 8008fa2:	4a78      	ldr	r2, [pc, #480]	; (8009184 <HAL_ADC_ConfigChannel+0x678>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d1f9      	bne.n	8008f9c <HAL_ADC_ConfigChannel+0x490>
 8008fa8:	682b      	ldr	r3, [r5, #0]
 8008faa:	4a77      	ldr	r2, [pc, #476]	; (8009188 <HAL_ADC_ConfigChannel+0x67c>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	f43f aec3 	beq.w	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008fb2:	4a76      	ldr	r2, [pc, #472]	; (800918c <HAL_ADC_ConfigChannel+0x680>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	f43f aebf 	beq.w	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008fba:	4a75      	ldr	r2, [pc, #468]	; (8009190 <HAL_ADC_ConfigChannel+0x684>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	f43f aebb 	beq.w	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008fc2:	4a75      	ldr	r2, [pc, #468]	; (8009198 <HAL_ADC_ConfigChannel+0x68c>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	f43f aeb7 	beq.w	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008fca:	f102 6286 	add.w	r2, r2, #70254592	; 0x4300000
 8008fce:	3240      	adds	r2, #64	; 0x40
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	f43f aeb1 	beq.w	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008fd6:	4a71      	ldr	r2, [pc, #452]	; (800919c <HAL_ADC_ConfigChannel+0x690>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	f43f aead 	beq.w	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008fde:	f102 6286 	add.w	r2, r2, #70254592	; 0x4300000
 8008fe2:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	f43f aea6 	beq.w	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008fec:	4a6c      	ldr	r2, [pc, #432]	; (80091a0 <HAL_ADC_ConfigChannel+0x694>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	f43f aea2 	beq.w	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8008ff4:	f102 2204 	add.w	r2, r2, #67109888	; 0x4000400
 8008ff8:	f502 1240 	add.w	r2, r2, #3145728	; 0x300000
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	f43f ae9b 	beq.w	8008d38 <HAL_ADC_ConfigChannel+0x22c>
 8009002:	f102 6286 	add.w	r2, r2, #70254592	; 0x4300000
 8009006:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800900a:	e7c4      	b.n	8008f96 <HAL_ADC_ConfigChannel+0x48a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800900c:	f8de 1060 	ldr.w	r1, [lr, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009010:	f3c3 0012 	ubfx	r0, r3, #0, #19
 8009014:	f3c1 6784 	ubfx	r7, r1, #26, #5
 8009018:	f10e 0664 	add.w	r6, lr, #100	; 0x64
 800901c:	2800      	cmp	r0, #0
 800901e:	d13a      	bne.n	8009096 <HAL_ADC_ConfigChannel+0x58a>
 8009020:	f3c3 6084 	ubfx	r0, r3, #26, #5
 8009024:	4287      	cmp	r7, r0
 8009026:	f040 8143 	bne.w	80092b0 <HAL_ADC_ConfigChannel+0x7a4>
  MODIFY_REG(*preg,
 800902a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800902e:	f8ce 1060 	str.w	r1, [lr, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009032:	682b      	ldr	r3, [r5, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8009034:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
 8009038:	f3c3 0712 	ubfx	r7, r3, #0, #19
 800903c:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8009040:	bb9f      	cbnz	r7, 80090aa <HAL_ADC_ConfigChannel+0x59e>
 8009042:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8009046:	4283      	cmp	r3, r0
 8009048:	f040 8137 	bne.w	80092ba <HAL_ADC_ConfigChannel+0x7ae>
  MODIFY_REG(*preg,
 800904c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009050:	6031      	str	r1, [r6, #0]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009052:	682b      	ldr	r3, [r5, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8009054:	6891      	ldr	r1, [r2, #8]
 8009056:	f3c3 0712 	ubfx	r7, r3, #0, #19
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800905a:	f102 0608 	add.w	r6, r2, #8
 800905e:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8009062:	bb77      	cbnz	r7, 80090c2 <HAL_ADC_ConfigChannel+0x5b6>
 8009064:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8009068:	4283      	cmp	r3, r0
 800906a:	f040 812d 	bne.w	80092c8 <HAL_ADC_ConfigChannel+0x7bc>
  MODIFY_REG(*preg,
 800906e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009072:	6031      	str	r1, [r6, #0]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009074:	682b      	ldr	r3, [r5, #0]
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009076:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800907a:	68d2      	ldr	r2, [r2, #12]
 800907c:	f3c3 0612 	ubfx	r6, r3, #0, #19
 8009080:	f3c2 6184 	ubfx	r1, r2, #26, #5
 8009084:	bb4e      	cbnz	r6, 80090da <HAL_ADC_ConfigChannel+0x5ce>
 8009086:	f3c3 6384 	ubfx	r3, r3, #26, #5
 800908a:	428b      	cmp	r3, r1
  MODIFY_REG(*preg,
 800908c:	bf04      	itt	eq
 800908e:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8009092:	6002      	streq	r2, [r0, #0]
 8009094:	e67a      	b.n	8008d8c <HAL_ADC_ConfigChannel+0x280>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009096:	fa93 f0a3 	rbit	r0, r3
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800909a:	fab0 f080 	clz	r0, r0
 800909e:	4287      	cmp	r7, r0
 80090a0:	d0c3      	beq.n	800902a <HAL_ADC_ConfigChannel+0x51e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80090a2:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80090a6:	f3c1 6084 	ubfx	r0, r1, #26, #5
 80090aa:	fa93 f3a3 	rbit	r3, r3
 80090ae:	fab3 f383 	clz	r3, r3
 80090b2:	4283      	cmp	r3, r0
 80090b4:	d0ca      	beq.n	800904c <HAL_ADC_ConfigChannel+0x540>
 80090b6:	6891      	ldr	r1, [r2, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80090b8:	682b      	ldr	r3, [r5, #0]
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80090ba:	f102 0608 	add.w	r6, r2, #8
 80090be:	f3c1 6084 	ubfx	r0, r1, #26, #5
 80090c2:	fa93 f3a3 	rbit	r3, r3
 80090c6:	fab3 f383 	clz	r3, r3
 80090ca:	4283      	cmp	r3, r0
 80090cc:	d0cf      	beq.n	800906e <HAL_ADC_ConfigChannel+0x562>
 80090ce:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80090d2:	68d2      	ldr	r2, [r2, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80090d4:	682b      	ldr	r3, [r5, #0]
 80090d6:	f3c2 6184 	ubfx	r1, r2, #26, #5
 80090da:	fa93 f3a3 	rbit	r3, r3
 80090de:	fab3 f383 	clz	r3, r3
 80090e2:	e7d2      	b.n	800908a <HAL_ADC_ConfigChannel+0x57e>
 80090e4:	fa93 f2a3 	rbit	r2, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1UL) & 0x1FUL), sConfig->SamplingTime);
 80090e8:	fab2 f282 	clz	r2, r2
 80090ec:	3201      	adds	r2, #1
 80090ee:	f002 021f 	and.w	r2, r2, #31
 80090f2:	2a09      	cmp	r2, #9
 80090f4:	d92b      	bls.n	800914e <HAL_ADC_ConfigChannel+0x642>
 80090f6:	fa93 f2a3 	rbit	r2, r3
 80090fa:	fab2 f282 	clz	r2, r2
 80090fe:	3201      	adds	r2, #1
 8009100:	0692      	lsls	r2, r2, #26
 8009102:	f002 46f8 	and.w	r6, r2, #2080374784	; 0x7c000000
 8009106:	fa93 f1a3 	rbit	r1, r3
 800910a:	fab1 f181 	clz	r1, r1
 800910e:	3101      	adds	r1, #1
 8009110:	f001 021f 	and.w	r2, r1, #31
 8009114:	2101      	movs	r1, #1
 8009116:	e665      	b.n	8008de4 <HAL_ADC_ConfigChannel+0x2d8>
 8009118:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 800911c:	4091      	lsls	r1, r2
 800911e:	ea41 0206 	orr.w	r2, r1, r6
 8009122:	bb2f      	cbnz	r7, 8009170 <HAL_ADC_ConfigChannel+0x664>
 8009124:	0e99      	lsrs	r1, r3, #26
 8009126:	3101      	adds	r1, #1
 8009128:	f001 011f 	and.w	r1, r1, #31
 800912c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8009130:	0509      	lsls	r1, r1, #20
 8009132:	4311      	orrs	r1, r2
 8009134:	68aa      	ldr	r2, [r5, #8]
 8009136:	f7ff fa33 	bl	80085a0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */
    
    if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800913a:	682a      	ldr	r2, [r5, #0]
 800913c:	4b1d      	ldr	r3, [pc, #116]	; (80091b4 <HAL_ADC_ConfigChannel+0x6a8>)
 800913e:	421a      	tst	r2, r3
 8009140:	d13a      	bne.n	80091b8 <HAL_ADC_ConfigChannel+0x6ac>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009142:	2000      	movs	r0, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009144:	2300      	movs	r3, #0
 8009146:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  
  /* Return function status */
  return tmp_hal_status;
}
 800914a:	b003      	add	sp, #12
 800914c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800914e:	fa93 f6a3 	rbit	r6, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1UL) & 0x1FUL), sConfig->SamplingTime);
 8009152:	fab6 f686 	clz	r6, r6
 8009156:	3601      	adds	r6, #1
 8009158:	06b6      	lsls	r6, r6, #26
 800915a:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 800915e:	fa93 f1a3 	rbit	r1, r3
 8009162:	fab1 f181 	clz	r1, r1
 8009166:	3101      	adds	r1, #1
 8009168:	f001 021f 	and.w	r2, r1, #31
 800916c:	2101      	movs	r1, #1
 800916e:	e7d5      	b.n	800911c <HAL_ADC_ConfigChannel+0x610>
 8009170:	fa93 f1a3 	rbit	r1, r3
 8009174:	fab1 f181 	clz	r1, r1
 8009178:	e7d5      	b.n	8009126 <HAL_ADC_ConfigChannel+0x61a>
 800917a:	fa93 f3a3 	rbit	r3, r3
 800917e:	fab3 f383 	clz	r3, r3
 8009182:	e636      	b.n	8008df2 <HAL_ADC_ConfigChannel+0x2e6>
 8009184:	50040200 	.word	0x50040200
 8009188:	04300002 	.word	0x04300002
 800918c:	08600004 	.word	0x08600004
 8009190:	0c900008 	.word	0x0c900008
 8009194:	10c00010 	.word	0x10c00010
 8009198:	19200040 	.word	0x19200040
 800919c:	21800100 	.word	0x21800100
 80091a0:	2a000400 	.word	0x2a000400
 80091a4:	36902000 	.word	0x36902000
 80091a8:	3ac04000 	.word	0x3ac04000
 80091ac:	3ef08000 	.word	0x3ef08000
 80091b0:	50040100 	.word	0x50040100
 80091b4:	80080000 	.word	0x80080000
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80091b8:	4947      	ldr	r1, [pc, #284]	; (80092d8 <HAL_ADC_ConfigChannel+0x7cc>)
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80091ba:	4b48      	ldr	r3, [pc, #288]	; (80092dc <HAL_ADC_ConfigChannel+0x7d0>)
 80091bc:	6888      	ldr	r0, [r1, #8]
 80091be:	429a      	cmp	r2, r3
 80091c0:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 80091c4:	460d      	mov	r5, r1
 80091c6:	d11e      	bne.n	8009206 <HAL_ADC_ConfigChannel+0x6fa>
 80091c8:	0202      	lsls	r2, r0, #8
 80091ca:	d4ba      	bmi.n	8009142 <HAL_ADC_ConfigChannel+0x636>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) 
 80091cc:	6823      	ldr	r3, [r4, #0]
 80091ce:	4a44      	ldr	r2, [pc, #272]	; (80092e0 <HAL_ADC_ConfigChannel+0x7d4>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d003      	beq.n	80091dc <HAL_ADC_ConfigChannel+0x6d0>
 80091d4:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80091d8:	4293      	cmp	r3, r2
 80091da:	d1b2      	bne.n	8009142 <HAL_ADC_ConfigChannel+0x636>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80091dc:	68ab      	ldr	r3, [r5, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80091de:	4a41      	ldr	r2, [pc, #260]	; (80092e4 <HAL_ADC_ConfigChannel+0x7d8>)
 80091e0:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80091e4:	4333      	orrs	r3, r6
 80091e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80091ea:	60ab      	str	r3, [r5, #8]
 80091ec:	4b3e      	ldr	r3, [pc, #248]	; (80092e8 <HAL_ADC_ConfigChannel+0x7dc>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	fbb3 f2f2 	udiv	r2, r3, r2
 80091f4:	230c      	movs	r3, #12
 80091f6:	4353      	muls	r3, r2
            wait_loop_index--;
 80091f8:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0UL)
 80091fa:	9b01      	ldr	r3, [sp, #4]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d0a0      	beq.n	8009142 <HAL_ADC_ConfigChannel+0x636>
            wait_loop_index--;
 8009200:	9b01      	ldr	r3, [sp, #4]
 8009202:	3b01      	subs	r3, #1
 8009204:	e7f8      	b.n	80091f8 <HAL_ADC_ConfigChannel+0x6ec>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8009206:	4b39      	ldr	r3, [pc, #228]	; (80092ec <HAL_ADC_ConfigChannel+0x7e0>)
 8009208:	429a      	cmp	r2, r3
 800920a:	d111      	bne.n	8009230 <HAL_ADC_ConfigChannel+0x724>
 800920c:	01c3      	lsls	r3, r0, #7
 800920e:	d498      	bmi.n	8009142 <HAL_ADC_ConfigChannel+0x636>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009210:	6823      	ldr	r3, [r4, #0]
 8009212:	4a33      	ldr	r2, [pc, #204]	; (80092e0 <HAL_ADC_ConfigChannel+0x7d4>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d003      	beq.n	8009220 <HAL_ADC_ConfigChannel+0x714>
 8009218:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800921c:	4293      	cmp	r3, r2
 800921e:	d190      	bne.n	8009142 <HAL_ADC_ConfigChannel+0x636>
 8009220:	68ab      	ldr	r3, [r5, #8]
 8009222:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8009226:	4333      	orrs	r3, r6
 8009228:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800922c:	60ab      	str	r3, [r5, #8]
 800922e:	e788      	b.n	8009142 <HAL_ADC_ConfigChannel+0x636>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8009230:	4b2f      	ldr	r3, [pc, #188]	; (80092f0 <HAL_ADC_ConfigChannel+0x7e4>)
 8009232:	429a      	cmp	r2, r3
 8009234:	d185      	bne.n	8009142 <HAL_ADC_ConfigChannel+0x636>
 8009236:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 800923a:	d182      	bne.n	8009142 <HAL_ADC_ConfigChannel+0x636>
        if (ADC_VREFINT_INSTANCE(hadc))
 800923c:	6822      	ldr	r2, [r4, #0]
 800923e:	4b28      	ldr	r3, [pc, #160]	; (80092e0 <HAL_ADC_ConfigChannel+0x7d4>)
 8009240:	429a      	cmp	r2, r3
 8009242:	f47f af7e 	bne.w	8009142 <HAL_ADC_ConfigChannel+0x636>
 8009246:	688b      	ldr	r3, [r1, #8]
 8009248:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 800924c:	4333      	orrs	r3, r6
 800924e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009252:	608b      	str	r3, [r1, #8]
 8009254:	e776      	b.n	8009144 <HAL_ADC_ConfigChannel+0x638>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009256:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8009258:	f042 0220 	orr.w	r2, r2, #32
 800925c:	6562      	str	r2, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 800925e:	4618      	mov	r0, r3
 8009260:	e770      	b.n	8009144 <HAL_ADC_ConfigChannel+0x638>
  __HAL_LOCK(hadc);
 8009262:	2002      	movs	r0, #2
 8009264:	e771      	b.n	800914a <HAL_ADC_ConfigChannel+0x63e>
    if (   (tmp_adc_is_conversion_on_going_regular == 0UL)
 8009266:	2800      	cmp	r0, #0
 8009268:	f47f ad90 	bne.w	8008d8c <HAL_ADC_ConfigChannel+0x280>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800926c:	68aa      	ldr	r2, [r5, #8]
 800926e:	6829      	ldr	r1, [r5, #0]
 8009270:	4618      	mov	r0, r3
 8009272:	f7ff f995 	bl	80085a0 <LL_ADC_SetChannelSamplingTime>
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8009276:	692e      	ldr	r6, [r5, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8009278:	f8d4 e000 	ldr.w	lr, [r4]
 800927c:	682b      	ldr	r3, [r5, #0]
 800927e:	f8de 100c 	ldr.w	r1, [lr, #12]
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8009282:	2e04      	cmp	r6, #4
 8009284:	f10e 0260 	add.w	r2, lr, #96	; 0x60
 8009288:	f43f aec0 	beq.w	800900c <HAL_ADC_ConfigChannel+0x500>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800928c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8009290:	0048      	lsls	r0, r1, #1
 8009292:	6969      	ldr	r1, [r5, #20]
  MODIFY_REG(*preg,
 8009294:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 8009298:	4081      	lsls	r1, r0
 800929a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800929e:	4319      	orrs	r1, r3
 80092a0:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 80092a4:	4b13      	ldr	r3, [pc, #76]	; (80092f4 <HAL_ADC_ConfigChannel+0x7e8>)
 80092a6:	4003      	ands	r3, r0
 80092a8:	4319      	orrs	r1, r3
 80092aa:	f842 1026 	str.w	r1, [r2, r6, lsl #2]
 80092ae:	e56d      	b.n	8008d8c <HAL_ADC_ConfigChannel+0x280>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80092b0:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80092b4:	f3c1 6084 	ubfx	r0, r1, #26, #5
 80092b8:	e6c3      	b.n	8009042 <HAL_ADC_ConfigChannel+0x536>
 80092ba:	6891      	ldr	r1, [r2, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80092bc:	682b      	ldr	r3, [r5, #0]
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80092be:	f102 0608 	add.w	r6, r2, #8
 80092c2:	f3c1 6084 	ubfx	r0, r1, #26, #5
 80092c6:	e6cd      	b.n	8009064 <HAL_ADC_ConfigChannel+0x558>
 80092c8:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80092cc:	68d2      	ldr	r2, [r2, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80092ce:	682b      	ldr	r3, [r5, #0]
 80092d0:	f3c2 6184 	ubfx	r1, r2, #26, #5
 80092d4:	e6d7      	b.n	8009086 <HAL_ADC_ConfigChannel+0x57a>
 80092d6:	bf00      	nop
 80092d8:	50040300 	.word	0x50040300
 80092dc:	c7520000 	.word	0xc7520000
 80092e0:	50040000 	.word	0x50040000
 80092e4:	00030d40 	.word	0x00030d40
 80092e8:	20000004 	.word	0x20000004
 80092ec:	cb840000 	.word	0xcb840000
 80092f0:	80000001 	.word	0x80000001
 80092f4:	03fff000 	.word	0x03fff000

080092f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80092f8:	b570      	push	{r4, r5, r6, lr}
 80092fa:	4604      	mov	r4, r0
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80092fc:	6800      	ldr	r0, [r0, #0]
 80092fe:	f7ff f961 	bl	80085c4 <LL_ADC_IsEnabled>
 8009302:	b108      	cbz	r0, 8009308 <ADC_Enable+0x10>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8009304:	2000      	movs	r0, #0
 8009306:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8009308:	6822      	ldr	r2, [r4, #0]
 800930a:	4b15      	ldr	r3, [pc, #84]	; (8009360 <ADC_Enable+0x68>)
 800930c:	6891      	ldr	r1, [r2, #8]
 800930e:	4219      	tst	r1, r3
 8009310:	d009      	beq.n	8009326 <ADC_Enable+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009312:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009314:	f043 0310 	orr.w	r3, r3, #16
 8009318:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800931a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800931c:	f043 0301 	orr.w	r3, r3, #1
 8009320:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8009322:	2001      	movs	r0, #1
 8009324:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8009326:	6893      	ldr	r3, [r2, #8]
 8009328:	4d0e      	ldr	r5, [pc, #56]	; (8009364 <ADC_Enable+0x6c>)
 800932a:	402b      	ands	r3, r5
 800932c:	f043 0301 	orr.w	r3, r3, #1
 8009330:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8009332:	f7ff f921 	bl	8008578 <HAL_GetTick>
 8009336:	4606      	mov	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009338:	6820      	ldr	r0, [r4, #0]
 800933a:	6803      	ldr	r3, [r0, #0]
 800933c:	07db      	lsls	r3, r3, #31
 800933e:	d4e1      	bmi.n	8009304 <ADC_Enable+0xc>
      if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009340:	f7ff f940 	bl	80085c4 <LL_ADC_IsEnabled>
 8009344:	b928      	cbnz	r0, 8009352 <ADC_Enable+0x5a>
        LL_ADC_Enable(hadc->Instance);
 8009346:	6822      	ldr	r2, [r4, #0]
 8009348:	6893      	ldr	r3, [r2, #8]
 800934a:	402b      	ands	r3, r5
 800934c:	f043 0301 	orr.w	r3, r3, #1
 8009350:	6093      	str	r3, [r2, #8]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8009352:	f7ff f911 	bl	8008578 <HAL_GetTick>
 8009356:	1b80      	subs	r0, r0, r6
 8009358:	2802      	cmp	r0, #2
 800935a:	d9ed      	bls.n	8009338 <ADC_Enable+0x40>
 800935c:	e7d9      	b.n	8009312 <ADC_Enable+0x1a>
 800935e:	bf00      	nop
 8009360:	8000003f 	.word	0x8000003f
 8009364:	7fffffc0 	.word	0x7fffffc0

08009368 <HAL_ADC_Start>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8009368:	4b3e      	ldr	r3, [pc, #248]	; (8009464 <HAL_ADC_Start+0xfc>)
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800936a:	4a3f      	ldr	r2, [pc, #252]	; (8009468 <HAL_ADC_Start+0x100>)
{
 800936c:	b570      	push	{r4, r5, r6, lr}
 800936e:	689e      	ldr	r6, [r3, #8]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8009370:	6803      	ldr	r3, [r0, #0]
 8009372:	4293      	cmp	r3, r2
{
 8009374:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8009376:	d00c      	beq.n	8009392 <HAL_ADC_Start+0x2a>
 8009378:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800937c:	4293      	cmp	r3, r2
 800937e:	d008      	beq.n	8009392 <HAL_ADC_Start+0x2a>
 8009380:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8009384:	4293      	cmp	r3, r2
 8009386:	d004      	beq.n	8009392 <HAL_ADC_Start+0x2a>
 8009388:	f44f 619b 	mov.w	r1, #1240	; 0x4d8
 800938c:	4837      	ldr	r0, [pc, #220]	; (800946c <HAL_ADC_Start+0x104>)
 800938e:	f005 feef 	bl	800f170 <assert_failed>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009392:	6820      	ldr	r0, [r4, #0]
 8009394:	f7ff f91a 	bl	80085cc <LL_ADC_REG_IsConversionOngoing>
 8009398:	4605      	mov	r5, r0
 800939a:	2800      	cmp	r0, #0
 800939c:	d15a      	bne.n	8009454 <HAL_ADC_Start+0xec>
    __HAL_LOCK(hadc);
 800939e:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80093a2:	2b01      	cmp	r3, #1
 80093a4:	d056      	beq.n	8009454 <HAL_ADC_Start+0xec>
 80093a6:	2301      	movs	r3, #1
 80093a8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    tmp_hal_status = ADC_Enable(hadc);
 80093ac:	4620      	mov	r0, r4
 80093ae:	f7ff ffa3 	bl	80092f8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80093b2:	2800      	cmp	r0, #0
 80093b4:	d14b      	bne.n	800944e <HAL_ADC_Start+0xe6>
      ADC_STATE_CLR_SET(hadc->State,
 80093b6:	6d63      	ldr	r3, [r4, #84]	; 0x54
      if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80093b8:	4a2d      	ldr	r2, [pc, #180]	; (8009470 <HAL_ADC_Start+0x108>)
      ADC_STATE_CLR_SET(hadc->State,
 80093ba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80093be:	f023 0301 	bic.w	r3, r3, #1
 80093c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093c6:	6563      	str	r3, [r4, #84]	; 0x54
      if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80093c8:	6823      	ldr	r3, [r4, #0]
 80093ca:	4293      	cmp	r3, r2
 80093cc:	f006 061f 	and.w	r6, r6, #31
 80093d0:	d042      	beq.n	8009458 <HAL_ADC_Start+0xf0>
 80093d2:	461d      	mov	r5, r3
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80093d4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80093d6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80093da:	6562      	str	r2, [r4, #84]	; 0x54
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80093dc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80093de:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80093e2:	bf1c      	itt	ne
 80093e4:	6da2      	ldrne	r2, [r4, #88]	; 0x58
 80093e6:	f022 0206 	bicne.w	r2, r2, #6
        ADC_CLEAR_ERRORCODE(hadc); 
 80093ea:	65a2      	str	r2, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80093ec:	221c      	movs	r2, #28
 80093ee:	601a      	str	r2, [r3, #0]
      if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80093f0:	42ab      	cmp	r3, r5
      __HAL_UNLOCK(hadc);
 80093f2:	f04f 0200 	mov.w	r2, #0
 80093f6:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
      if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80093fa:	d008      	beq.n	800940e <HAL_ADC_Start+0xa6>
           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80093fc:	2e09      	cmp	r6, #9
 80093fe:	bf9d      	ittte	ls
 8009400:	f240 2221 	movwls	r2, #545	; 0x221
 8009404:	40f2      	lsrls	r2, r6
 8009406:	43d2      	mvnls	r2, r2
 8009408:	2201      	movhi	r2, #1
 800940a:	07d1      	lsls	r1, r2, #31
 800940c:	d411      	bmi.n	8009432 <HAL_ADC_Start+0xca>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800940e:	68da      	ldr	r2, [r3, #12]
 8009410:	0192      	lsls	r2, r2, #6
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8009412:	bf41      	itttt	mi
 8009414:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8009416:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 800941a:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 800941e:	6562      	strmi	r2, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 8009420:	689a      	ldr	r2, [r3, #8]
 8009422:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8009426:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800942a:	f042 0204 	orr.w	r2, r2, #4
 800942e:	609a      	str	r2, [r3, #8]
 8009430:	bd70      	pop	{r4, r5, r6, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8009432:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009434:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009438:	6563      	str	r3, [r4, #84]	; 0x54
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800943a:	68eb      	ldr	r3, [r5, #12]
 800943c:	019b      	lsls	r3, r3, #6
 800943e:	d50f      	bpl.n	8009460 <HAL_ADC_Start+0xf8>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8009440:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009442:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009446:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800944a:	6563      	str	r3, [r4, #84]	; 0x54
 800944c:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UNLOCK(hadc);
 800944e:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8009452:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = HAL_BUSY;
 8009454:	2002      	movs	r0, #2
 8009456:	bd70      	pop	{r4, r5, r6, pc}
      if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8009458:	4d03      	ldr	r5, [pc, #12]	; (8009468 <HAL_ADC_Start+0x100>)
           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800945a:	2e00      	cmp	r6, #0
 800945c:	d0ba      	beq.n	80093d4 <HAL_ADC_Start+0x6c>
 800945e:	e7bd      	b.n	80093dc <HAL_ADC_Start+0x74>
}
 8009460:	bd70      	pop	{r4, r5, r6, pc}
 8009462:	bf00      	nop
 8009464:	50040300 	.word	0x50040300
 8009468:	50040000 	.word	0x50040000
 800946c:	080174a0 	.word	0x080174a0
 8009470:	50040100 	.word	0x50040100

08009474 <LL_ADC_IsEnabled>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009474:	6880      	ldr	r0, [r0, #8]
}
 8009476:	f000 0001 	and.w	r0, r0, #1
 800947a:	4770      	bx	lr

0800947c <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800947c:	6880      	ldr	r0, [r0, #8]
}
 800947e:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8009482:	4770      	bx	lr

08009484 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8009484:	b530      	push	{r4, r5, lr}
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef  tmphadcSlave;
  uint32_t tmphadcSlave_conversion_on_going;
  
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 8009486:	6802      	ldr	r2, [r0, #0]
 8009488:	4b50      	ldr	r3, [pc, #320]	; (80095cc <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800948a:	429a      	cmp	r2, r3
{
 800948c:	b09b      	sub	sp, #108	; 0x6c
 800948e:	4604      	mov	r4, r0
 8009490:	460d      	mov	r5, r1
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 8009492:	d004      	beq.n	800949e <HAL_ADCEx_MultiModeConfigChannel+0x1a>
 8009494:	f640 012c 	movw	r1, #2092	; 0x82c
 8009498:	484d      	ldr	r0, [pc, #308]	; (80095d0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800949a:	f005 fe69 	bl	800f170 <assert_failed>
  assert_param(IS_ADC_MULTIMODE(multimode->Mode));
 800949e:	682a      	ldr	r2, [r5, #0]
 80094a0:	2a09      	cmp	r2, #9
 80094a2:	d804      	bhi.n	80094ae <HAL_ADCEx_MultiModeConfigChannel+0x2a>
 80094a4:	f240 23ef 	movw	r3, #751	; 0x2ef
 80094a8:	40d3      	lsrs	r3, r2
 80094aa:	07db      	lsls	r3, r3, #31
 80094ac:	d404      	bmi.n	80094b8 <HAL_ADCEx_MultiModeConfigChannel+0x34>
 80094ae:	f640 012d 	movw	r1, #2093	; 0x82d
 80094b2:	4847      	ldr	r0, [pc, #284]	; (80095d0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80094b4:	f005 fe5c 	bl	800f170 <assert_failed>
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80094b8:	682b      	ldr	r3, [r5, #0]
 80094ba:	b1d3      	cbz	r3, 80094f2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
  {
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
 80094bc:	686b      	ldr	r3, [r5, #4]
 80094be:	f433 4200 	bics.w	r2, r3, #32768	; 0x8000
 80094c2:	d007      	beq.n	80094d4 <HAL_ADCEx_MultiModeConfigChannel+0x50>
 80094c4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80094c8:	d004      	beq.n	80094d4 <HAL_ADCEx_MultiModeConfigChannel+0x50>
 80094ca:	f44f 6103 	mov.w	r1, #2096	; 0x830
 80094ce:	4840      	ldr	r0, [pc, #256]	; (80095d0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80094d0:	f005 fe4e 	bl	800f170 <assert_failed>
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 80094d4:	68ab      	ldr	r3, [r5, #8]
 80094d6:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 80094da:	d00a      	beq.n	80094f2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80094dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094e0:	d007      	beq.n	80094f2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80094e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094e6:	d004      	beq.n	80094f2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80094e8:	f640 0131 	movw	r1, #2097	; 0x831
 80094ec:	4838      	ldr	r0, [pc, #224]	; (80095d0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80094ee:	f005 fe3f 	bl	800f170 <assert_failed>
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80094f2:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	d066      	beq.n	80095c8 <HAL_ADCEx_MultiModeConfigChannel+0x144>
 80094fa:	2301      	movs	r3, #1
 80094fc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8009500:	6822      	ldr	r2, [r4, #0]
 8009502:	4b32      	ldr	r3, [pc, #200]	; (80095cc <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8009504:	429a      	cmp	r2, r3
 8009506:	bf0c      	ite	eq
 8009508:	f503 7380 	addeq.w	r3, r3, #256	; 0x100
 800950c:	2300      	movne	r3, #0
 800950e:	9301      	str	r3, [sp, #4]
  
  if (tmphadcSlave.Instance == NULL)
 8009510:	9801      	ldr	r0, [sp, #4]
 8009512:	b940      	cbnz	r0, 8009526 <HAL_ADCEx_MultiModeConfigChannel+0xa2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009514:	6d63      	ldr	r3, [r4, #84]	; 0x54
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8009516:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800951a:	f043 0320 	orr.w	r3, r3, #32
 800951e:	6563      	str	r3, [r4, #84]	; 0x54
    
    return HAL_ERROR;
 8009520:	2001      	movs	r0, #1
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return tmp_hal_status;
} 
 8009522:	b01b      	add	sp, #108	; 0x6c
 8009524:	bd30      	pop	{r4, r5, pc}
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8009526:	f7ff ffa9 	bl	800947c <LL_ADC_REG_IsConversionOngoing>
 800952a:	4603      	mov	r3, r0
  if ( (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL) 
 800952c:	6820      	ldr	r0, [r4, #0]
 800952e:	f7ff ffa5 	bl	800947c <LL_ADC_REG_IsConversionOngoing>
 8009532:	2800      	cmp	r0, #0
 8009534:	d142      	bne.n	80095bc <HAL_ADCEx_MultiModeConfigChannel+0x138>
    && (tmphadcSlave_conversion_on_going == 0UL) )
 8009536:	2b00      	cmp	r3, #0
 8009538:	d140      	bne.n	80095bc <HAL_ADCEx_MultiModeConfigChannel+0x138>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800953a:	682b      	ldr	r3, [r5, #0]
 800953c:	4a25      	ldr	r2, [pc, #148]	; (80095d4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800953e:	b333      	cbz	r3, 800958e <HAL_ADCEx_MultiModeConfigChannel+0x10a>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG, 
 8009540:	6893      	ldr	r3, [r2, #8]
 8009542:	6869      	ldr	r1, [r5, #4]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009544:	4821      	ldr	r0, [pc, #132]	; (80095cc <HAL_ADCEx_MultiModeConfigChannel+0x148>)
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG, 
 8009546:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800954a:	430b      	orrs	r3, r1
 800954c:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8009550:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
 8009554:	6093      	str	r3, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009556:	f7ff ff8d 	bl	8009474 <LL_ADC_IsEnabled>
 800955a:	4603      	mov	r3, r0
 800955c:	481e      	ldr	r0, [pc, #120]	; (80095d8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800955e:	f7ff ff89 	bl	8009474 <LL_ADC_IsEnabled>
 8009562:	4303      	orrs	r3, r0
 8009564:	481d      	ldr	r0, [pc, #116]	; (80095dc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8009566:	f7ff ff85 	bl	8009474 <LL_ADC_IsEnabled>
 800956a:	4318      	orrs	r0, r3
 800956c:	d004      	beq.n	8009578 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800956e:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8009570:	2300      	movs	r3, #0
 8009572:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return tmp_hal_status;
 8009576:	e7d4      	b.n	8009522 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
          MODIFY_REG(tmpADC_Common->CCR,
 8009578:	6891      	ldr	r1, [r2, #8]
 800957a:	682b      	ldr	r3, [r5, #0]
 800957c:	68ad      	ldr	r5, [r5, #8]
 800957e:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 8009582:	432b      	orrs	r3, r5
 8009584:	f021 010f 	bic.w	r1, r1, #15
 8009588:	430b      	orrs	r3, r1
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800958a:	6093      	str	r3, [r2, #8]
 800958c:	e7f0      	b.n	8009570 <HAL_ADCEx_MultiModeConfigChannel+0xec>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800958e:	6893      	ldr	r3, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009590:	480e      	ldr	r0, [pc, #56]	; (80095cc <HAL_ADCEx_MultiModeConfigChannel+0x148>)
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8009592:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009596:	6093      	str	r3, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009598:	f7ff ff6c 	bl	8009474 <LL_ADC_IsEnabled>
 800959c:	4603      	mov	r3, r0
 800959e:	480e      	ldr	r0, [pc, #56]	; (80095d8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80095a0:	f7ff ff68 	bl	8009474 <LL_ADC_IsEnabled>
 80095a4:	4303      	orrs	r3, r0
 80095a6:	480d      	ldr	r0, [pc, #52]	; (80095dc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80095a8:	f7ff ff64 	bl	8009474 <LL_ADC_IsEnabled>
 80095ac:	4318      	orrs	r0, r3
 80095ae:	d1de      	bne.n	800956e <HAL_ADCEx_MultiModeConfigChannel+0xea>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80095b0:	6893      	ldr	r3, [r2, #8]
 80095b2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80095b6:	f023 030f 	bic.w	r3, r3, #15
 80095ba:	e7e6      	b.n	800958a <HAL_ADCEx_MultiModeConfigChannel+0x106>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80095bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80095be:	f043 0320 	orr.w	r3, r3, #32
 80095c2:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80095c4:	2001      	movs	r0, #1
 80095c6:	e7d3      	b.n	8009570 <HAL_ADCEx_MultiModeConfigChannel+0xec>
  __HAL_LOCK(hadc);
 80095c8:	2002      	movs	r0, #2
 80095ca:	e7aa      	b.n	8009522 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80095cc:	50040000 	.word	0x50040000
 80095d0:	080174d8 	.word	0x080174d8
 80095d4:	50040300 	.word	0x50040300
 80095d8:	50040100 	.word	0x50040100
 80095dc:	50040200 	.word	0x50040200

080095e0 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80095e0:	1ec3      	subs	r3, r0, #3
 80095e2:	2b04      	cmp	r3, #4
{
 80095e4:	b510      	push	{r4, lr}
 80095e6:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80095e8:	d903      	bls.n	80095f2 <HAL_NVIC_SetPriorityGrouping+0x12>
 80095ea:	21b7      	movs	r1, #183	; 0xb7
 80095ec:	4809      	ldr	r0, [pc, #36]	; (8009614 <HAL_NVIC_SetPriorityGrouping+0x34>)
 80095ee:	f005 fdbf 	bl	800f170 <assert_failed>
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80095f2:	4a09      	ldr	r2, [pc, #36]	; (8009618 <HAL_NVIC_SetPriorityGrouping+0x38>)
 80095f4:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80095f6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80095fa:	041b      	lsls	r3, r3, #16
 80095fc:	0c1b      	lsrs	r3, r3, #16
 80095fe:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8009602:	0224      	lsls	r4, r4, #8
 8009604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009608:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800960c:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 800960e:	60d4      	str	r4, [r2, #12]
 8009610:	bd10      	pop	{r4, pc}
 8009612:	bf00      	nop
 8009614:	08017513 	.word	0x08017513
 8009618:	e000ed00 	.word	0xe000ed00

0800961c <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t prioritygroup = 0x00;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800961c:	2a0f      	cmp	r2, #15
{
 800961e:	b570      	push	{r4, r5, r6, lr}
 8009620:	4604      	mov	r4, r0
 8009622:	460e      	mov	r6, r1
 8009624:	4615      	mov	r5, r2
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8009626:	d903      	bls.n	8009630 <HAL_NVIC_SetPriority+0x14>
 8009628:	21cf      	movs	r1, #207	; 0xcf
 800962a:	481a      	ldr	r0, [pc, #104]	; (8009694 <HAL_NVIC_SetPriority+0x78>)
 800962c:	f005 fda0 	bl	800f170 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8009630:	2e0f      	cmp	r6, #15
 8009632:	d903      	bls.n	800963c <HAL_NVIC_SetPriority+0x20>
 8009634:	21d0      	movs	r1, #208	; 0xd0
 8009636:	4817      	ldr	r0, [pc, #92]	; (8009694 <HAL_NVIC_SetPriority+0x78>)
 8009638:	f005 fd9a 	bl	800f170 <assert_failed>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800963c:	4b16      	ldr	r3, [pc, #88]	; (8009698 <HAL_NVIC_SetPriority+0x7c>)
 800963e:	68d9      	ldr	r1, [r3, #12]
 8009640:	f3c1 2102 	ubfx	r1, r1, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009644:	f1c1 0307 	rsb	r3, r1, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009648:	1d0a      	adds	r2, r1, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800964a:	2b04      	cmp	r3, #4
 800964c:	bf28      	it	cs
 800964e:	2304      	movcs	r3, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009650:	2001      	movs	r0, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009652:	2a06      	cmp	r2, #6
 8009654:	bf8c      	ite	hi
 8009656:	3903      	subhi	r1, #3
 8009658:	2100      	movls	r1, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800965a:	fa00 f203 	lsl.w	r2, r0, r3
 800965e:	3a01      	subs	r2, #1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009660:	4088      	lsls	r0, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009662:	4032      	ands	r2, r6
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009664:	3801      	subs	r0, #1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009666:	408a      	lsls	r2, r1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009668:	4005      	ands	r5, r0
  if ((int32_t)(IRQn) < 0)
 800966a:	2c00      	cmp	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800966c:	ea42 0205 	orr.w	r2, r2, r5
 8009670:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009674:	bfaf      	iteee	ge
 8009676:	f104 4460 	addge.w	r4, r4, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800967a:	f004 040f 	andlt.w	r4, r4, #15
 800967e:	4b07      	ldrlt	r3, [pc, #28]	; (800969c <HAL_NVIC_SetPriority+0x80>)
 8009680:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009682:	bfa5      	ittet	ge
 8009684:	f504 4461 	addge.w	r4, r4, #57600	; 0xe100
 8009688:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800968a:	551a      	strblt	r2, [r3, r4]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800968c:	f884 2300 	strbge.w	r2, [r4, #768]	; 0x300
 8009690:	bd70      	pop	{r4, r5, r6, pc}
 8009692:	bf00      	nop
 8009694:	08017513 	.word	0x08017513
 8009698:	e000ed00 	.word	0xe000ed00
 800969c:	e000ed14 	.word	0xe000ed14

080096a0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80096a0:	3801      	subs	r0, #1
 80096a2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80096a6:	d20a      	bcs.n	80096be <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80096a8:	4b06      	ldr	r3, [pc, #24]	; (80096c4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80096aa:	4a07      	ldr	r2, [pc, #28]	; (80096c8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80096ac:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80096ae:	21f0      	movs	r1, #240	; 0xf0
 80096b0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80096b4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80096b6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80096b8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80096ba:	601a      	str	r2, [r3, #0]
 80096bc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80096be:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80096c0:	4770      	bx	lr
 80096c2:	bf00      	nop
 80096c4:	e000e010 	.word	0xe000e010
 80096c8:	e000ed00 	.word	0xe000ed00

080096cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80096cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80096d0:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
{
 80096d4:	b085      	sub	sp, #20
 80096d6:	4604      	mov	r4, r0
 80096d8:	460d      	mov	r5, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80096da:	d01e      	beq.n	800971a <HAL_GPIO_Init+0x4e>
 80096dc:	4ba8      	ldr	r3, [pc, #672]	; (8009980 <HAL_GPIO_Init+0x2b4>)
 80096de:	4298      	cmp	r0, r3
 80096e0:	d01b      	beq.n	800971a <HAL_GPIO_Init+0x4e>
 80096e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80096e6:	4298      	cmp	r0, r3
 80096e8:	d017      	beq.n	800971a <HAL_GPIO_Init+0x4e>
 80096ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80096ee:	4298      	cmp	r0, r3
 80096f0:	d013      	beq.n	800971a <HAL_GPIO_Init+0x4e>
 80096f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80096f6:	4298      	cmp	r0, r3
 80096f8:	d00f      	beq.n	800971a <HAL_GPIO_Init+0x4e>
 80096fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80096fe:	4298      	cmp	r0, r3
 8009700:	d00b      	beq.n	800971a <HAL_GPIO_Init+0x4e>
 8009702:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009706:	4298      	cmp	r0, r3
 8009708:	d007      	beq.n	800971a <HAL_GPIO_Init+0x4e>
 800970a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800970e:	4298      	cmp	r0, r3
 8009710:	d003      	beq.n	800971a <HAL_GPIO_Init+0x4e>
 8009712:	21c3      	movs	r1, #195	; 0xc3
 8009714:	489b      	ldr	r0, [pc, #620]	; (8009984 <HAL_GPIO_Init+0x2b8>)
 8009716:	f005 fd2b 	bl	800f170 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800971a:	682b      	ldr	r3, [r5, #0]
 800971c:	b29a      	uxth	r2, r3
 800971e:	b112      	cbz	r2, 8009726 <HAL_GPIO_Init+0x5a>
 8009720:	0c1b      	lsrs	r3, r3, #16
 8009722:	041b      	lsls	r3, r3, #16
 8009724:	b11b      	cbz	r3, 800972e <HAL_GPIO_Init+0x62>
 8009726:	21c4      	movs	r1, #196	; 0xc4
 8009728:	4896      	ldr	r0, [pc, #600]	; (8009984 <HAL_GPIO_Init+0x2b8>)
 800972a:	f005 fd21 	bl	800f170 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800972e:	686b      	ldr	r3, [r5, #4]
 8009730:	2b12      	cmp	r3, #18
 8009732:	d803      	bhi.n	800973c <HAL_GPIO_Init+0x70>
 8009734:	4a94      	ldr	r2, [pc, #592]	; (8009988 <HAL_GPIO_Init+0x2bc>)
 8009736:	40da      	lsrs	r2, r3
 8009738:	07d1      	lsls	r1, r2, #31
 800973a:	d413      	bmi.n	8009764 <HAL_GPIO_Init+0x98>
 800973c:	4993      	ldr	r1, [pc, #588]	; (800998c <HAL_GPIO_Init+0x2c0>)
 800973e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009742:	428a      	cmp	r2, r1
 8009744:	d00e      	beq.n	8009764 <HAL_GPIO_Init+0x98>
 8009746:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 800974a:	428b      	cmp	r3, r1
 800974c:	d00a      	beq.n	8009764 <HAL_GPIO_Init+0x98>
 800974e:	f5a1 2170 	sub.w	r1, r1, #983040	; 0xf0000
 8009752:	428a      	cmp	r2, r1
 8009754:	d006      	beq.n	8009764 <HAL_GPIO_Init+0x98>
 8009756:	4a8e      	ldr	r2, [pc, #568]	; (8009990 <HAL_GPIO_Init+0x2c4>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d003      	beq.n	8009764 <HAL_GPIO_Init+0x98>
 800975c:	21c5      	movs	r1, #197	; 0xc5
 800975e:	4889      	ldr	r0, [pc, #548]	; (8009984 <HAL_GPIO_Init+0x2b8>)
 8009760:	f005 fd06 	bl	800f170 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8009764:	68ab      	ldr	r3, [r5, #8]
 8009766:	2b02      	cmp	r3, #2
 8009768:	d903      	bls.n	8009772 <HAL_GPIO_Init+0xa6>
 800976a:	21c6      	movs	r1, #198	; 0xc6
 800976c:	4885      	ldr	r0, [pc, #532]	; (8009984 <HAL_GPIO_Init+0x2b8>)
 800976e:	f005 fcff 	bl	800f170 <assert_failed>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009772:	4f88      	ldr	r7, [pc, #544]	; (8009994 <HAL_GPIO_Init+0x2c8>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8009774:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8009998 <HAL_GPIO_Init+0x2cc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8009778:	2600      	movs	r6, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800977a:	682b      	ldr	r3, [r5, #0]
 800977c:	fa33 f206 	lsrs.w	r2, r3, r6
 8009780:	d102      	bne.n	8009788 <HAL_GPIO_Init+0xbc>
      }
    }

    position++;
  }
}
 8009782:	b005      	add	sp, #20
 8009784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009788:	f04f 0a01 	mov.w	sl, #1
 800978c:	fa0a fa06 	lsl.w	sl, sl, r6
    if (iocurrent != 0x00u)
 8009790:	ea13 080a 	ands.w	r8, r3, sl
 8009794:	f000 80e5 	beq.w	8009962 <HAL_GPIO_Init+0x296>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009798:	686b      	ldr	r3, [r5, #4]
 800979a:	f023 0310 	bic.w	r3, r3, #16
 800979e:	2b02      	cmp	r3, #2
 80097a0:	d137      	bne.n	8009812 <HAL_GPIO_Init+0x146>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80097a2:	f1b4 4f90 	cmp.w	r4, #1207959552	; 0x48000000
 80097a6:	d01e      	beq.n	80097e6 <HAL_GPIO_Init+0x11a>
 80097a8:	4b75      	ldr	r3, [pc, #468]	; (8009980 <HAL_GPIO_Init+0x2b4>)
 80097aa:	429c      	cmp	r4, r3
 80097ac:	d01b      	beq.n	80097e6 <HAL_GPIO_Init+0x11a>
 80097ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097b2:	429c      	cmp	r4, r3
 80097b4:	d017      	beq.n	80097e6 <HAL_GPIO_Init+0x11a>
 80097b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097ba:	429c      	cmp	r4, r3
 80097bc:	d013      	beq.n	80097e6 <HAL_GPIO_Init+0x11a>
 80097be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097c2:	429c      	cmp	r4, r3
 80097c4:	d00f      	beq.n	80097e6 <HAL_GPIO_Init+0x11a>
 80097c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097ca:	429c      	cmp	r4, r3
 80097cc:	d00b      	beq.n	80097e6 <HAL_GPIO_Init+0x11a>
 80097ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097d2:	429c      	cmp	r4, r3
 80097d4:	d007      	beq.n	80097e6 <HAL_GPIO_Init+0x11a>
 80097d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097da:	429c      	cmp	r4, r3
 80097dc:	d003      	beq.n	80097e6 <HAL_GPIO_Init+0x11a>
 80097de:	21d5      	movs	r1, #213	; 0xd5
 80097e0:	4868      	ldr	r0, [pc, #416]	; (8009984 <HAL_GPIO_Init+0x2b8>)
 80097e2:	f005 fcc5 	bl	800f170 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80097e6:	692b      	ldr	r3, [r5, #16]
 80097e8:	2b0f      	cmp	r3, #15
 80097ea:	d903      	bls.n	80097f4 <HAL_GPIO_Init+0x128>
 80097ec:	21d6      	movs	r1, #214	; 0xd6
 80097ee:	4865      	ldr	r0, [pc, #404]	; (8009984 <HAL_GPIO_Init+0x2b8>)
 80097f0:	f005 fcbe 	bl	800f170 <assert_failed>
        temp = GPIOx->AFR[position >> 3u];
 80097f4:	08f2      	lsrs	r2, r6, #3
 80097f6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80097fa:	f006 0307 	and.w	r3, r6, #7
 80097fe:	0099      	lsls	r1, r3, #2
        temp = GPIOx->AFR[position >> 3u];
 8009800:	6a10      	ldr	r0, [r2, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009802:	230f      	movs	r3, #15
 8009804:	408b      	lsls	r3, r1
 8009806:	ea20 0003 	bic.w	r0, r0, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800980a:	692b      	ldr	r3, [r5, #16]
 800980c:	408b      	lsls	r3, r1
 800980e:	4303      	orrs	r3, r0
        GPIOx->AFR[position >> 3u] = temp;
 8009810:	6213      	str	r3, [r2, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009812:	686a      	ldr	r2, [r5, #4]
      temp = GPIOx->MODER;
 8009814:	6820      	ldr	r0, [r4, #0]
 8009816:	0073      	lsls	r3, r6, #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009818:	f04f 0b03 	mov.w	fp, #3
 800981c:	fa0b fb03 	lsl.w	fp, fp, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009820:	f002 0103 	and.w	r1, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009824:	ea6f 0b0b 	mvn.w	fp, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009828:	f022 0210 	bic.w	r2, r2, #16
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800982c:	ea00 000b 	and.w	r0, r0, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009830:	4099      	lsls	r1, r3
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009832:	3a01      	subs	r2, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009834:	4301      	orrs	r1, r0
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009836:	2a01      	cmp	r2, #1
      GPIOx->MODER = temp;
 8009838:	6021      	str	r1, [r4, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800983a:	d818      	bhi.n	800986e <HAL_GPIO_Init+0x1a2>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800983c:	68ea      	ldr	r2, [r5, #12]
 800983e:	2a03      	cmp	r2, #3
 8009840:	d905      	bls.n	800984e <HAL_GPIO_Init+0x182>
 8009842:	21ea      	movs	r1, #234	; 0xea
 8009844:	484f      	ldr	r0, [pc, #316]	; (8009984 <HAL_GPIO_Init+0x2b8>)
 8009846:	9301      	str	r3, [sp, #4]
 8009848:	f005 fc92 	bl	800f170 <assert_failed>
 800984c:	9b01      	ldr	r3, [sp, #4]
        temp = GPIOx->OSPEEDR;
 800984e:	68a1      	ldr	r1, [r4, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009850:	68ea      	ldr	r2, [r5, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009852:	ea0b 0101 	and.w	r1, fp, r1
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009856:	409a      	lsls	r2, r3
 8009858:	430a      	orrs	r2, r1
        GPIOx->OSPEEDR = temp;
 800985a:	60a2      	str	r2, [r4, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800985c:	686a      	ldr	r2, [r5, #4]
        temp = GPIOx->OTYPER;
 800985e:	6861      	ldr	r1, [r4, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8009860:	f3c2 1200 	ubfx	r2, r2, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009864:	ea21 010a 	bic.w	r1, r1, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8009868:	40b2      	lsls	r2, r6
 800986a:	430a      	orrs	r2, r1
        GPIOx->OTYPER = temp;
 800986c:	6062      	str	r2, [r4, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800986e:	6869      	ldr	r1, [r5, #4]
 8009870:	f001 0203 	and.w	r2, r1, #3
 8009874:	2a03      	cmp	r2, #3
 8009876:	d108      	bne.n	800988a <HAL_GPIO_Init+0x1be>
        temp = GPIOx->ASCR;
 8009878:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800987a:	ea22 0a0a 	bic.w	sl, r2, sl
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800987e:	f3c1 02c0 	ubfx	r2, r1, #3, #1
 8009882:	40b2      	lsls	r2, r6
 8009884:	ea42 020a 	orr.w	r2, r2, sl
        GPIOx->ASCR = temp;
 8009888:	62e2      	str	r2, [r4, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 800988a:	68e2      	ldr	r2, [r4, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800988c:	ea0b 0b02 	and.w	fp, fp, r2
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8009890:	68aa      	ldr	r2, [r5, #8]
 8009892:	fa02 f303 	lsl.w	r3, r2, r3
 8009896:	ea43 030b 	orr.w	r3, r3, fp
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800989a:	00ca      	lsls	r2, r1, #3
      GPIOx->PUPDR = temp;
 800989c:	60e3      	str	r3, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800989e:	d560      	bpl.n	8009962 <HAL_GPIO_Init+0x296>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80098a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098a2:	f043 0301 	orr.w	r3, r3, #1
 80098a6:	663b      	str	r3, [r7, #96]	; 0x60
 80098a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098aa:	f026 0003 	bic.w	r0, r6, #3
 80098ae:	f003 0301 	and.w	r3, r3, #1
 80098b2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80098b6:	9303      	str	r3, [sp, #12]
 80098b8:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 80098bc:	9b03      	ldr	r3, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 80098be:	6882      	ldr	r2, [r0, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80098c0:	f006 0303 	and.w	r3, r6, #3
 80098c4:	f04f 0c0f 	mov.w	ip, #15
 80098c8:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 80098cc:	fa0c f30e 	lsl.w	r3, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80098d0:	f1b4 4f90 	cmp.w	r4, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80098d4:	ea22 0c03 	bic.w	ip, r2, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80098d8:	d045      	beq.n	8009966 <HAL_GPIO_Init+0x29a>
 80098da:	4b29      	ldr	r3, [pc, #164]	; (8009980 <HAL_GPIO_Init+0x2b4>)
 80098dc:	429c      	cmp	r4, r3
 80098de:	d044      	beq.n	800996a <HAL_GPIO_Init+0x29e>
 80098e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80098e4:	429c      	cmp	r4, r3
 80098e6:	d042      	beq.n	800996e <HAL_GPIO_Init+0x2a2>
 80098e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80098ec:	429c      	cmp	r4, r3
 80098ee:	d040      	beq.n	8009972 <HAL_GPIO_Init+0x2a6>
 80098f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80098f4:	429c      	cmp	r4, r3
 80098f6:	d03e      	beq.n	8009976 <HAL_GPIO_Init+0x2aa>
 80098f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80098fc:	429c      	cmp	r4, r3
 80098fe:	d03c      	beq.n	800997a <HAL_GPIO_Init+0x2ae>
 8009900:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009904:	429c      	cmp	r4, r3
 8009906:	bf14      	ite	ne
 8009908:	2307      	movne	r3, #7
 800990a:	2306      	moveq	r3, #6
 800990c:	fa03 f30e 	lsl.w	r3, r3, lr
 8009910:	ea43 030c 	orr.w	r3, r3, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8009914:	6083      	str	r3, [r0, #8]
        temp = EXTI->IMR1;
 8009916:	f8d9 2000 	ldr.w	r2, [r9]
        temp &= ~(iocurrent);
 800991a:	ea6f 0008 	mvn.w	r0, r8
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800991e:	03cb      	lsls	r3, r1, #15
        temp &= ~(iocurrent);
 8009920:	bf54      	ite	pl
 8009922:	4002      	andpl	r2, r0
          temp |= iocurrent;
 8009924:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->IMR1 = temp;
 8009928:	f8c9 2000 	str.w	r2, [r9]
        temp = EXTI->EMR1;
 800992c:	f8d9 2004 	ldr.w	r2, [r9, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009930:	038b      	lsls	r3, r1, #14
        temp &= ~(iocurrent);
 8009932:	bf54      	ite	pl
 8009934:	4002      	andpl	r2, r0
          temp |= iocurrent;
 8009936:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->EMR1 = temp;
 800993a:	f8c9 2004 	str.w	r2, [r9, #4]
        temp = EXTI->RTSR1;
 800993e:	f8d9 2008 	ldr.w	r2, [r9, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009942:	02cb      	lsls	r3, r1, #11
        temp &= ~(iocurrent);
 8009944:	bf54      	ite	pl
 8009946:	4002      	andpl	r2, r0
          temp |= iocurrent;
 8009948:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR1 = temp;
 800994c:	f8c9 2008 	str.w	r2, [r9, #8]
        temp = EXTI->FTSR1;
 8009950:	f8d9 300c 	ldr.w	r3, [r9, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009954:	028a      	lsls	r2, r1, #10
        temp &= ~(iocurrent);
 8009956:	bf54      	ite	pl
 8009958:	4003      	andpl	r3, r0
          temp |= iocurrent;
 800995a:	ea48 0303 	orrmi.w	r3, r8, r3
        EXTI->FTSR1 = temp;
 800995e:	f8c9 300c 	str.w	r3, [r9, #12]
    position++;
 8009962:	3601      	adds	r6, #1
 8009964:	e709      	b.n	800977a <HAL_GPIO_Init+0xae>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8009966:	2300      	movs	r3, #0
 8009968:	e7d0      	b.n	800990c <HAL_GPIO_Init+0x240>
 800996a:	2301      	movs	r3, #1
 800996c:	e7ce      	b.n	800990c <HAL_GPIO_Init+0x240>
 800996e:	2302      	movs	r3, #2
 8009970:	e7cc      	b.n	800990c <HAL_GPIO_Init+0x240>
 8009972:	2303      	movs	r3, #3
 8009974:	e7ca      	b.n	800990c <HAL_GPIO_Init+0x240>
 8009976:	2304      	movs	r3, #4
 8009978:	e7c8      	b.n	800990c <HAL_GPIO_Init+0x240>
 800997a:	2305      	movs	r3, #5
 800997c:	e7c6      	b.n	800990c <HAL_GPIO_Init+0x240>
 800997e:	bf00      	nop
 8009980:	48000400 	.word	0x48000400
 8009984:	0801754e 	.word	0x0801754e
 8009988:	0006080f 	.word	0x0006080f
 800998c:	10110000 	.word	0x10110000
 8009990:	10220000 	.word	0x10220000
 8009994:	40021000 	.word	0x40021000
 8009998:	40010400 	.word	0x40010400

0800999c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800999c:	b538      	push	{r3, r4, r5, lr}
 800999e:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80099a0:	460c      	mov	r4, r1
 80099a2:	b921      	cbnz	r1, 80099ae <HAL_GPIO_ReadPin+0x12>
 80099a4:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 80099a8:	4804      	ldr	r0, [pc, #16]	; (80099bc <HAL_GPIO_ReadPin+0x20>)
 80099aa:	f005 fbe1 	bl	800f170 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80099ae:	692b      	ldr	r3, [r5, #16]
 80099b0:	421c      	tst	r4, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80099b2:	bf14      	ite	ne
 80099b4:	2001      	movne	r0, #1
 80099b6:	2000      	moveq	r0, #0
 80099b8:	bd38      	pop	{r3, r4, r5, pc}
 80099ba:	bf00      	nop
 80099bc:	0801754e 	.word	0x0801754e

080099c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80099c0:	b570      	push	{r4, r5, r6, lr}
 80099c2:	4605      	mov	r5, r0
 80099c4:	4616      	mov	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80099c6:	460c      	mov	r4, r1
 80099c8:	b921      	cbnz	r1, 80099d4 <HAL_GPIO_WritePin+0x14>
 80099ca:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80099ce:	4808      	ldr	r0, [pc, #32]	; (80099f0 <HAL_GPIO_WritePin+0x30>)
 80099d0:	f005 fbce 	bl	800f170 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80099d4:	2e01      	cmp	r6, #1
 80099d6:	d906      	bls.n	80099e6 <HAL_GPIO_WritePin+0x26>
 80099d8:	f240 11c3 	movw	r1, #451	; 0x1c3
 80099dc:	4804      	ldr	r0, [pc, #16]	; (80099f0 <HAL_GPIO_WritePin+0x30>)
 80099de:	f005 fbc7 	bl	800f170 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80099e2:	61ac      	str	r4, [r5, #24]
 80099e4:	bd70      	pop	{r4, r5, r6, pc}
  if(PinState != GPIO_PIN_RESET)
 80099e6:	2e00      	cmp	r6, #0
 80099e8:	d1fb      	bne.n	80099e2 <HAL_GPIO_WritePin+0x22>
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80099ea:	62ac      	str	r4, [r5, #40]	; 0x28
 80099ec:	bd70      	pop	{r4, r5, r6, pc}
 80099ee:	bf00      	nop
 80099f0:	0801754e 	.word	0x0801754e

080099f4 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80099f4:	6803      	ldr	r3, [r0, #0]
 80099f6:	699a      	ldr	r2, [r3, #24]
 80099f8:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 80099fa:	bf44      	itt	mi
 80099fc:	2200      	movmi	r2, #0
 80099fe:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009a00:	699a      	ldr	r2, [r3, #24]
 8009a02:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009a04:	bf5e      	ittt	pl
 8009a06:	699a      	ldrpl	r2, [r3, #24]
 8009a08:	f042 0201 	orrpl.w	r2, r2, #1
 8009a0c:	619a      	strpl	r2, [r3, #24]
 8009a0e:	4770      	bx	lr

08009a10 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8009a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a14:	4616      	mov	r6, r2
 8009a16:	461f      	mov	r7, r3
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8009a18:	4a23      	ldr	r2, [pc, #140]	; (8009aa8 <I2C_TransferConfig+0x98>)
 8009a1a:	6803      	ldr	r3, [r0, #0]
{
 8009a1c:	9d06      	ldr	r5, [sp, #24]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8009a1e:	4293      	cmp	r3, r2
{
 8009a20:	4680      	mov	r8, r0
 8009a22:	460c      	mov	r4, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8009a24:	d00c      	beq.n	8009a40 <I2C_TransferConfig+0x30>
 8009a26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d008      	beq.n	8009a40 <I2C_TransferConfig+0x30>
 8009a2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d004      	beq.n	8009a40 <I2C_TransferConfig+0x30>
 8009a36:	f641 01aa 	movw	r1, #6314	; 0x18aa
 8009a3a:	481c      	ldr	r0, [pc, #112]	; (8009aac <I2C_TransferConfig+0x9c>)
 8009a3c:	f005 fb98 	bl	800f170 <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 8009a40:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 8009a44:	d007      	beq.n	8009a56 <I2C_TransferConfig+0x46>
 8009a46:	f037 7380 	bics.w	r3, r7, #16777216	; 0x1000000
 8009a4a:	d004      	beq.n	8009a56 <I2C_TransferConfig+0x46>
 8009a4c:	f641 01ab 	movw	r1, #6315	; 0x18ab
 8009a50:	4816      	ldr	r0, [pc, #88]	; (8009aac <I2C_TransferConfig+0x9c>)
 8009a52:	f005 fb8d 	bl	800f170 <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 8009a56:	4b16      	ldr	r3, [pc, #88]	; (8009ab0 <I2C_TransferConfig+0xa0>)
 8009a58:	429d      	cmp	r5, r3
 8009a5a:	d00b      	beq.n	8009a74 <I2C_TransferConfig+0x64>
 8009a5c:	f425 6280 	bic.w	r2, r5, #1024	; 0x400
 8009a60:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d005      	beq.n	8009a74 <I2C_TransferConfig+0x64>
 8009a68:	b125      	cbz	r5, 8009a74 <I2C_TransferConfig+0x64>
 8009a6a:	f641 01ac 	movw	r1, #6316	; 0x18ac
 8009a6e:	480f      	ldr	r0, [pc, #60]	; (8009aac <I2C_TransferConfig+0x9c>)
 8009a70:	f005 fb7e 	bl	800f170 <assert_failed>

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8009a74:	f3c4 0309 	ubfx	r3, r4, #0, #10
 8009a78:	433b      	orrs	r3, r7
 8009a7a:	432b      	orrs	r3, r5
 8009a7c:	0d6d      	lsrs	r5, r5, #21
 8009a7e:	f405 6580 	and.w	r5, r5, #1024	; 0x400
 8009a82:	f8d8 1000 	ldr.w	r1, [r8]
 8009a86:	f045 757f 	orr.w	r5, r5, #66846720	; 0x3fc0000
 8009a8a:	f445 3558 	orr.w	r5, r5, #221184	; 0x36000
 8009a8e:	684a      	ldr	r2, [r1, #4]
 8009a90:	f445 757f 	orr.w	r5, r5, #1020	; 0x3fc
 8009a94:	f045 0503 	orr.w	r5, r5, #3
 8009a98:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8009a9c:	ea22 0505 	bic.w	r5, r2, r5
 8009aa0:	432b      	orrs	r3, r5
 8009aa2:	604b      	str	r3, [r1, #4]
 8009aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009aa8:	40005400 	.word	0x40005400
 8009aac:	08017587 	.word	0x08017587
 8009ab0:	80004000 	.word	0x80004000

08009ab4 <I2C_WaitOnFlagUntilTimeout>:
{
 8009ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ab8:	9f06      	ldr	r7, [sp, #24]
 8009aba:	4604      	mov	r4, r0
 8009abc:	4688      	mov	r8, r1
 8009abe:	4616      	mov	r6, r2
 8009ac0:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009ac2:	6822      	ldr	r2, [r4, #0]
 8009ac4:	6993      	ldr	r3, [r2, #24]
 8009ac6:	ea38 0303 	bics.w	r3, r8, r3
 8009aca:	bf0c      	ite	eq
 8009acc:	2301      	moveq	r3, #1
 8009ace:	2300      	movne	r3, #0
 8009ad0:	42b3      	cmp	r3, r6
 8009ad2:	d002      	beq.n	8009ada <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8009ad4:	2000      	movs	r0, #0
}
 8009ad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8009ada:	1c6b      	adds	r3, r5, #1
 8009adc:	d0f2      	beq.n	8009ac4 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ade:	f7fe fd4b 	bl	8008578 <HAL_GetTick>
 8009ae2:	1bc0      	subs	r0, r0, r7
 8009ae4:	4285      	cmp	r5, r0
 8009ae6:	d301      	bcc.n	8009aec <I2C_WaitOnFlagUntilTimeout+0x38>
 8009ae8:	2d00      	cmp	r5, #0
 8009aea:	d1ea      	bne.n	8009ac2 <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009aec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009aee:	f043 0320 	orr.w	r3, r3, #32
 8009af2:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009af4:	2320      	movs	r3, #32
 8009af6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009afa:	2300      	movs	r3, #0
 8009afc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8009b00:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8009b04:	2001      	movs	r0, #1
 8009b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009b0a <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009b0a:	6803      	ldr	r3, [r0, #0]
{
 8009b0c:	b570      	push	{r4, r5, r6, lr}
 8009b0e:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009b10:	6998      	ldr	r0, [r3, #24]
 8009b12:	f010 0010 	ands.w	r0, r0, #16
{
 8009b16:	460d      	mov	r5, r1
 8009b18:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009b1a:	d116      	bne.n	8009b4a <I2C_IsAcknowledgeFailed+0x40>
 8009b1c:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8009b1e:	1c69      	adds	r1, r5, #1
 8009b20:	d014      	beq.n	8009b4c <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b22:	f7fe fd29 	bl	8008578 <HAL_GetTick>
 8009b26:	1b80      	subs	r0, r0, r6
 8009b28:	4285      	cmp	r5, r0
 8009b2a:	d300      	bcc.n	8009b2e <I2C_IsAcknowledgeFailed+0x24>
 8009b2c:	b96d      	cbnz	r5, 8009b4a <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009b2e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009b30:	f043 0320 	orr.w	r3, r3, #32
 8009b34:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009b36:	2320      	movs	r3, #32
 8009b38:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8009b42:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8009b46:	2001      	movs	r0, #1
}
 8009b48:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b4a:	6823      	ldr	r3, [r4, #0]
 8009b4c:	6999      	ldr	r1, [r3, #24]
 8009b4e:	068a      	lsls	r2, r1, #26
 8009b50:	d5e5      	bpl.n	8009b1e <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b52:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b54:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b56:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8009b58:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b5a:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8009b5c:	f7ff ff4a 	bl	80099f4 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8009b60:	6822      	ldr	r2, [r4, #0]
 8009b62:	6853      	ldr	r3, [r2, #4]
 8009b64:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8009b68:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8009b6c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8009b70:	f023 0301 	bic.w	r3, r3, #1
 8009b74:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009b76:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009b78:	f043 0304 	orr.w	r3, r3, #4
 8009b7c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009b7e:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 8009b82:	e7db      	b.n	8009b3c <I2C_IsAcknowledgeFailed+0x32>

08009b84 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8009b84:	b570      	push	{r4, r5, r6, lr}
 8009b86:	4604      	mov	r4, r0
 8009b88:	460d      	mov	r5, r1
 8009b8a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009b8c:	6823      	ldr	r3, [r4, #0]
 8009b8e:	699b      	ldr	r3, [r3, #24]
 8009b90:	079b      	lsls	r3, r3, #30
 8009b92:	d501      	bpl.n	8009b98 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8009b94:	2000      	movs	r0, #0
 8009b96:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b98:	4632      	mov	r2, r6
 8009b9a:	4629      	mov	r1, r5
 8009b9c:	4620      	mov	r0, r4
 8009b9e:	f7ff ffb4 	bl	8009b0a <I2C_IsAcknowledgeFailed>
 8009ba2:	b9a0      	cbnz	r0, 8009bce <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8009ba4:	1c6a      	adds	r2, r5, #1
 8009ba6:	d0f1      	beq.n	8009b8c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ba8:	f7fe fce6 	bl	8008578 <HAL_GetTick>
 8009bac:	1b80      	subs	r0, r0, r6
 8009bae:	4285      	cmp	r5, r0
 8009bb0:	d301      	bcc.n	8009bb6 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8009bb2:	2d00      	cmp	r5, #0
 8009bb4:	d1ea      	bne.n	8009b8c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009bb6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009bb8:	f043 0320 	orr.w	r3, r3, #32
 8009bbc:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009bbe:	2320      	movs	r3, #32
 8009bc0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8009bca:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8009bce:	2001      	movs	r0, #1
}
 8009bd0:	bd70      	pop	{r4, r5, r6, pc}
	...

08009bd4 <I2C_RequestMemoryWrite>:
{
 8009bd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bd6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009bd8:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009bda:	4b16      	ldr	r3, [pc, #88]	; (8009c34 <I2C_RequestMemoryWrite+0x60>)
 8009bdc:	9300      	str	r3, [sp, #0]
{
 8009bde:	4605      	mov	r5, r0
 8009be0:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009be2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009be6:	b2fa      	uxtb	r2, r7
 8009be8:	f7ff ff12 	bl	8009a10 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009bec:	4632      	mov	r2, r6
 8009bee:	9908      	ldr	r1, [sp, #32]
 8009bf0:	4628      	mov	r0, r5
 8009bf2:	f7ff ffc7 	bl	8009b84 <I2C_WaitOnTXISFlagUntilTimeout>
 8009bf6:	b110      	cbz	r0, 8009bfe <I2C_RequestMemoryWrite+0x2a>
    return HAL_ERROR;
 8009bf8:	2001      	movs	r0, #1
}
 8009bfa:	b003      	add	sp, #12
 8009bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009bfe:	2f01      	cmp	r7, #1
 8009c00:	682b      	ldr	r3, [r5, #0]
 8009c02:	d10c      	bne.n	8009c1e <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009c04:	b2e4      	uxtb	r4, r4
 8009c06:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009c08:	9b08      	ldr	r3, [sp, #32]
 8009c0a:	9600      	str	r6, [sp, #0]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	2180      	movs	r1, #128	; 0x80
 8009c10:	4628      	mov	r0, r5
 8009c12:	f7ff ff4f 	bl	8009ab4 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8009c16:	3000      	adds	r0, #0
 8009c18:	bf18      	it	ne
 8009c1a:	2001      	movne	r0, #1
 8009c1c:	e7ed      	b.n	8009bfa <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009c1e:	0a22      	lsrs	r2, r4, #8
 8009c20:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c22:	9908      	ldr	r1, [sp, #32]
 8009c24:	4632      	mov	r2, r6
 8009c26:	4628      	mov	r0, r5
 8009c28:	f7ff ffac 	bl	8009b84 <I2C_WaitOnTXISFlagUntilTimeout>
 8009c2c:	2800      	cmp	r0, #0
 8009c2e:	d1e3      	bne.n	8009bf8 <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009c30:	682b      	ldr	r3, [r5, #0]
 8009c32:	e7e7      	b.n	8009c04 <I2C_RequestMemoryWrite+0x30>
 8009c34:	80002000 	.word	0x80002000

08009c38 <I2C_RequestMemoryRead>:
{
 8009c38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c3a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009c3c:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009c3e:	4b16      	ldr	r3, [pc, #88]	; (8009c98 <I2C_RequestMemoryRead+0x60>)
 8009c40:	9300      	str	r3, [sp, #0]
{
 8009c42:	4605      	mov	r5, r0
 8009c44:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009c46:	2300      	movs	r3, #0
 8009c48:	b2fa      	uxtb	r2, r7
 8009c4a:	f7ff fee1 	bl	8009a10 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c4e:	4632      	mov	r2, r6
 8009c50:	9908      	ldr	r1, [sp, #32]
 8009c52:	4628      	mov	r0, r5
 8009c54:	f7ff ff96 	bl	8009b84 <I2C_WaitOnTXISFlagUntilTimeout>
 8009c58:	b110      	cbz	r0, 8009c60 <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 8009c5a:	2001      	movs	r0, #1
}
 8009c5c:	b003      	add	sp, #12
 8009c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009c60:	2f01      	cmp	r7, #1
 8009c62:	682b      	ldr	r3, [r5, #0]
 8009c64:	d10c      	bne.n	8009c80 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009c66:	b2e4      	uxtb	r4, r4
 8009c68:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009c6a:	9b08      	ldr	r3, [sp, #32]
 8009c6c:	9600      	str	r6, [sp, #0]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	2140      	movs	r1, #64	; 0x40
 8009c72:	4628      	mov	r0, r5
 8009c74:	f7ff ff1e 	bl	8009ab4 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8009c78:	3000      	adds	r0, #0
 8009c7a:	bf18      	it	ne
 8009c7c:	2001      	movne	r0, #1
 8009c7e:	e7ed      	b.n	8009c5c <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009c80:	0a22      	lsrs	r2, r4, #8
 8009c82:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c84:	9908      	ldr	r1, [sp, #32]
 8009c86:	4632      	mov	r2, r6
 8009c88:	4628      	mov	r0, r5
 8009c8a:	f7ff ff7b 	bl	8009b84 <I2C_WaitOnTXISFlagUntilTimeout>
 8009c8e:	2800      	cmp	r0, #0
 8009c90:	d1e3      	bne.n	8009c5a <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009c92:	682b      	ldr	r3, [r5, #0]
 8009c94:	e7e7      	b.n	8009c66 <I2C_RequestMemoryRead+0x2e>
 8009c96:	bf00      	nop
 8009c98:	80002000 	.word	0x80002000

08009c9c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8009c9c:	b570      	push	{r4, r5, r6, lr}
 8009c9e:	4604      	mov	r4, r0
 8009ca0:	460d      	mov	r5, r1
 8009ca2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009ca4:	6823      	ldr	r3, [r4, #0]
 8009ca6:	699b      	ldr	r3, [r3, #24]
 8009ca8:	069b      	lsls	r3, r3, #26
 8009caa:	d501      	bpl.n	8009cb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8009cac:	2000      	movs	r0, #0
 8009cae:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009cb0:	4632      	mov	r2, r6
 8009cb2:	4629      	mov	r1, r5
 8009cb4:	4620      	mov	r0, r4
 8009cb6:	f7ff ff28 	bl	8009b0a <I2C_IsAcknowledgeFailed>
 8009cba:	b990      	cbnz	r0, 8009ce2 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cbc:	f7fe fc5c 	bl	8008578 <HAL_GetTick>
 8009cc0:	1b80      	subs	r0, r0, r6
 8009cc2:	4285      	cmp	r5, r0
 8009cc4:	d301      	bcc.n	8009cca <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8009cc6:	2d00      	cmp	r5, #0
 8009cc8:	d1ec      	bne.n	8009ca4 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009cca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009ccc:	f043 0320 	orr.w	r3, r3, #32
 8009cd0:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009cd2:	2320      	movs	r3, #32
 8009cd4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8009cde:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8009ce2:	2001      	movs	r0, #1
}
 8009ce4:	bd70      	pop	{r4, r5, r6, pc}

08009ce6 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8009ce6:	b570      	push	{r4, r5, r6, lr}
 8009ce8:	4604      	mov	r4, r0
 8009cea:	460d      	mov	r5, r1
 8009cec:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009cee:	6823      	ldr	r3, [r4, #0]
 8009cf0:	699b      	ldr	r3, [r3, #24]
 8009cf2:	075b      	lsls	r3, r3, #29
 8009cf4:	d40e      	bmi.n	8009d14 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009cf6:	4632      	mov	r2, r6
 8009cf8:	4629      	mov	r1, r5
 8009cfa:	4620      	mov	r0, r4
 8009cfc:	f7ff ff05 	bl	8009b0a <I2C_IsAcknowledgeFailed>
 8009d00:	b9f0      	cbnz	r0, 8009d40 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009d02:	6823      	ldr	r3, [r4, #0]
 8009d04:	699a      	ldr	r2, [r3, #24]
 8009d06:	0691      	lsls	r1, r2, #26
 8009d08:	d51c      	bpl.n	8009d44 <I2C_WaitOnRXNEFlagUntilTimeout+0x5e>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009d0a:	699a      	ldr	r2, [r3, #24]
 8009d0c:	0752      	lsls	r2, r2, #29
 8009d0e:	d503      	bpl.n	8009d18 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
 8009d10:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8009d12:	b10a      	cbz	r2, 8009d18 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        return HAL_OK;
 8009d14:	2000      	movs	r0, #0
 8009d16:	bd70      	pop	{r4, r5, r6, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009d18:	2120      	movs	r1, #32
 8009d1a:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8009d1c:	685a      	ldr	r2, [r3, #4]
 8009d1e:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8009d22:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8009d26:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8009d2a:	f022 0201 	bic.w	r2, r2, #1
 8009d2e:	605a      	str	r2, [r3, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009d30:	2300      	movs	r3, #0
 8009d32:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009d34:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8009d3c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8009d40:	2001      	movs	r0, #1
}
 8009d42:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d44:	f7fe fc18 	bl	8008578 <HAL_GetTick>
 8009d48:	1b80      	subs	r0, r0, r6
 8009d4a:	4285      	cmp	r5, r0
 8009d4c:	d301      	bcc.n	8009d52 <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
 8009d4e:	2d00      	cmp	r5, #0
 8009d50:	d1cd      	bne.n	8009cee <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009d52:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009d54:	f043 0320 	orr.w	r3, r3, #32
 8009d58:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009d5a:	2320      	movs	r3, #32
 8009d5c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8009d60:	2300      	movs	r3, #0
 8009d62:	e7eb      	b.n	8009d3c <I2C_WaitOnRXNEFlagUntilTimeout+0x56>

08009d64 <HAL_I2C_Init>:
{
 8009d64:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8009d66:	4604      	mov	r4, r0
 8009d68:	2800      	cmp	r0, #0
 8009d6a:	f000 809a 	beq.w	8009ea2 <HAL_I2C_Init+0x13e>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8009d6e:	6803      	ldr	r3, [r0, #0]
 8009d70:	4a4d      	ldr	r2, [pc, #308]	; (8009ea8 <HAL_I2C_Init+0x144>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d00c      	beq.n	8009d90 <HAL_I2C_Init+0x2c>
 8009d76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d008      	beq.n	8009d90 <HAL_I2C_Init+0x2c>
 8009d7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d004      	beq.n	8009d90 <HAL_I2C_Init+0x2c>
 8009d86:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
 8009d8a:	4848      	ldr	r0, [pc, #288]	; (8009eac <HAL_I2C_Init+0x148>)
 8009d8c:	f005 f9f0 	bl	800f170 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8009d90:	68a3      	ldr	r3, [r4, #8]
 8009d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d96:	d304      	bcc.n	8009da2 <HAL_I2C_Init+0x3e>
 8009d98:	f240 11ef 	movw	r1, #495	; 0x1ef
 8009d9c:	4843      	ldr	r0, [pc, #268]	; (8009eac <HAL_I2C_Init+0x148>)
 8009d9e:	f005 f9e7 	bl	800f170 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8009da2:	68e3      	ldr	r3, [r4, #12]
 8009da4:	3b01      	subs	r3, #1
 8009da6:	2b01      	cmp	r3, #1
 8009da8:	d904      	bls.n	8009db4 <HAL_I2C_Init+0x50>
 8009daa:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8009dae:	483f      	ldr	r0, [pc, #252]	; (8009eac <HAL_I2C_Init+0x148>)
 8009db0:	f005 f9de 	bl	800f170 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8009db4:	6923      	ldr	r3, [r4, #16]
 8009db6:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 8009dba:	d004      	beq.n	8009dc6 <HAL_I2C_Init+0x62>
 8009dbc:	f240 11f1 	movw	r1, #497	; 0x1f1
 8009dc0:	483a      	ldr	r0, [pc, #232]	; (8009eac <HAL_I2C_Init+0x148>)
 8009dc2:	f005 f9d5 	bl	800f170 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8009dc6:	6963      	ldr	r3, [r4, #20]
 8009dc8:	2bff      	cmp	r3, #255	; 0xff
 8009dca:	d904      	bls.n	8009dd6 <HAL_I2C_Init+0x72>
 8009dcc:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8009dd0:	4836      	ldr	r0, [pc, #216]	; (8009eac <HAL_I2C_Init+0x148>)
 8009dd2:	f005 f9cd 	bl	800f170 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8009dd6:	69a3      	ldr	r3, [r4, #24]
 8009dd8:	2b07      	cmp	r3, #7
 8009dda:	d904      	bls.n	8009de6 <HAL_I2C_Init+0x82>
 8009ddc:	f240 11f3 	movw	r1, #499	; 0x1f3
 8009de0:	4832      	ldr	r0, [pc, #200]	; (8009eac <HAL_I2C_Init+0x148>)
 8009de2:	f005 f9c5 	bl	800f170 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8009de6:	69e3      	ldr	r3, [r4, #28]
 8009de8:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 8009dec:	d004      	beq.n	8009df8 <HAL_I2C_Init+0x94>
 8009dee:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8009df2:	482e      	ldr	r0, [pc, #184]	; (8009eac <HAL_I2C_Init+0x148>)
 8009df4:	f005 f9bc 	bl	800f170 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8009df8:	6a23      	ldr	r3, [r4, #32]
 8009dfa:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 8009dfe:	d004      	beq.n	8009e0a <HAL_I2C_Init+0xa6>
 8009e00:	f240 11f5 	movw	r1, #501	; 0x1f5
 8009e04:	4829      	ldr	r0, [pc, #164]	; (8009eac <HAL_I2C_Init+0x148>)
 8009e06:	f005 f9b3 	bl	800f170 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009e0a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8009e0e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009e12:	b923      	cbnz	r3, 8009e1e <HAL_I2C_Init+0xba>
    hi2c->Lock = HAL_UNLOCKED;
 8009e14:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8009e18:	4620      	mov	r0, r4
 8009e1a:	f004 fe73 	bl	800eb04 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8009e1e:	2324      	movs	r3, #36	; 0x24
 8009e20:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8009e24:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009e26:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	f022 0201 	bic.w	r2, r2, #1
 8009e2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009e30:	6862      	ldr	r2, [r4, #4]
 8009e32:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009e36:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009e38:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009e3a:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009e3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009e40:	609a      	str	r2, [r3, #8]
 8009e42:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009e44:	d124      	bne.n	8009e90 <HAL_I2C_Init+0x12c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009e46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e4a:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009e4c:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8009e4e:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009e50:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8009e54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e58:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009e5a:	68da      	ldr	r2, [r3, #12]
 8009e5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009e60:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8009e62:	6922      	ldr	r2, [r4, #16]
 8009e64:	430a      	orrs	r2, r1
 8009e66:	69a1      	ldr	r1, [r4, #24]
 8009e68:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009e6c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009e6e:	6a21      	ldr	r1, [r4, #32]
 8009e70:	69e2      	ldr	r2, [r4, #28]
 8009e72:	430a      	orrs	r2, r1
 8009e74:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8009e76:	681a      	ldr	r2, [r3, #0]
 8009e78:	f042 0201 	orr.w	r2, r2, #1
 8009e7c:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e7e:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8009e80:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e82:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009e84:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009e88:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e8a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8009e8e:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009e90:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009e94:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009e96:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009e98:	bf04      	itt	eq
 8009e9a:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8009e9e:	605a      	streq	r2, [r3, #4]
 8009ea0:	e7d4      	b.n	8009e4c <HAL_I2C_Init+0xe8>
    return HAL_ERROR;
 8009ea2:	2001      	movs	r0, #1
}
 8009ea4:	bd10      	pop	{r4, pc}
 8009ea6:	bf00      	nop
 8009ea8:	40005400 	.word	0x40005400
 8009eac:	08017587 	.word	0x08017587

08009eb0 <HAL_I2C_Master_Transmit>:
{
 8009eb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009eb4:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009eb6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8009eba:	2b20      	cmp	r3, #32
{
 8009ebc:	4604      	mov	r4, r0
 8009ebe:	460e      	mov	r6, r1
 8009ec0:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ec2:	f040 8084 	bne.w	8009fce <HAL_I2C_Master_Transmit+0x11e>
    __HAL_LOCK(hi2c);
 8009ec6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009eca:	2b01      	cmp	r3, #1
 8009ecc:	d07f      	beq.n	8009fce <HAL_I2C_Master_Transmit+0x11e>
 8009ece:	2701      	movs	r7, #1
 8009ed0:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8009ed4:	f7fe fb50 	bl	8008578 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009ed8:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8009eda:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009edc:	9000      	str	r0, [sp, #0]
 8009ede:	463a      	mov	r2, r7
 8009ee0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009ee4:	4620      	mov	r0, r4
 8009ee6:	f7ff fde5 	bl	8009ab4 <I2C_WaitOnFlagUntilTimeout>
 8009eea:	b118      	cbz	r0, 8009ef4 <HAL_I2C_Master_Transmit+0x44>
      return HAL_ERROR;
 8009eec:	2001      	movs	r0, #1
}
 8009eee:	b003      	add	sp, #12
 8009ef0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009ef4:	2321      	movs	r3, #33	; 0x21
 8009ef6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009efa:	2310      	movs	r3, #16
 8009efc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009f00:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8009f02:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009f06:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8009f08:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009f0c:	b29b      	uxth	r3, r3
 8009f0e:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8009f10:	6360      	str	r0, [r4, #52]	; 0x34
 8009f12:	4b30      	ldr	r3, [pc, #192]	; (8009fd4 <HAL_I2C_Master_Transmit+0x124>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009f14:	d926      	bls.n	8009f64 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009f16:	22ff      	movs	r2, #255	; 0xff
 8009f18:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009f1a:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009f1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009f20:	4631      	mov	r1, r6
 8009f22:	4620      	mov	r0, r4
 8009f24:	f7ff fd74 	bl	8009a10 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009f28:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f2a:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 8009f2c:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f2e:	462a      	mov	r2, r5
 8009f30:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8009f32:	b9fb      	cbnz	r3, 8009f74 <HAL_I2C_Master_Transmit+0xc4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f34:	f7ff feb2 	bl	8009c9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8009f38:	2800      	cmp	r0, #0
 8009f3a:	d1d7      	bne.n	8009eec <HAL_I2C_Master_Transmit+0x3c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009f3c:	6823      	ldr	r3, [r4, #0]
 8009f3e:	2120      	movs	r1, #32
 8009f40:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8009f42:	685a      	ldr	r2, [r3, #4]
 8009f44:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8009f48:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8009f4c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8009f50:	f022 0201 	bic.w	r2, r2, #1
 8009f54:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009f56:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009f5a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009f5e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8009f62:	e7c4      	b.n	8009eee <HAL_I2C_Master_Transmit+0x3e>
      hi2c->XferSize = hi2c->XferCount;
 8009f64:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8009f66:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8009f68:	b292      	uxth	r2, r2
 8009f6a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009f6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009f70:	b2d2      	uxtb	r2, r2
 8009f72:	e7d5      	b.n	8009f20 <HAL_I2C_Master_Transmit+0x70>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f74:	f7ff fe06 	bl	8009b84 <I2C_WaitOnTXISFlagUntilTimeout>
 8009f78:	2800      	cmp	r0, #0
 8009f7a:	d1b7      	bne.n	8009eec <HAL_I2C_Master_Transmit+0x3c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009f7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f7e:	6822      	ldr	r2, [r4, #0]
 8009f80:	f813 1b01 	ldrb.w	r1, [r3], #1
 8009f84:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8009f86:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8009f88:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8009f8a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8009f8c:	3b01      	subs	r3, #1
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009f92:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8009f94:	3a01      	subs	r2, #1
 8009f96:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009f98:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8009f9a:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d0c3      	beq.n	8009f28 <HAL_I2C_Master_Transmit+0x78>
 8009fa0:	2a00      	cmp	r2, #0
 8009fa2:	d1c1      	bne.n	8009f28 <HAL_I2C_Master_Transmit+0x78>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009fa4:	9500      	str	r5, [sp, #0]
 8009fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fa8:	2180      	movs	r1, #128	; 0x80
 8009faa:	4620      	mov	r0, r4
 8009fac:	f7ff fd82 	bl	8009ab4 <I2C_WaitOnFlagUntilTimeout>
 8009fb0:	2800      	cmp	r0, #0
 8009fb2:	d19b      	bne.n	8009eec <HAL_I2C_Master_Transmit+0x3c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009fb4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009fb6:	b29b      	uxth	r3, r3
 8009fb8:	2bff      	cmp	r3, #255	; 0xff
 8009fba:	d903      	bls.n	8009fc4 <HAL_I2C_Master_Transmit+0x114>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009fbc:	22ff      	movs	r2, #255	; 0xff
 8009fbe:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009fc0:	9000      	str	r0, [sp, #0]
 8009fc2:	e7ab      	b.n	8009f1c <HAL_I2C_Master_Transmit+0x6c>
          hi2c->XferSize = hi2c->XferCount;
 8009fc4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009fc6:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8009fc8:	b292      	uxth	r2, r2
 8009fca:	8522      	strh	r2, [r4, #40]	; 0x28
 8009fcc:	e7ce      	b.n	8009f6c <HAL_I2C_Master_Transmit+0xbc>
    return HAL_BUSY;
 8009fce:	2002      	movs	r0, #2
 8009fd0:	e78d      	b.n	8009eee <HAL_I2C_Master_Transmit+0x3e>
 8009fd2:	bf00      	nop
 8009fd4:	80002000 	.word	0x80002000

08009fd8 <HAL_I2C_Master_Receive>:
{
 8009fd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009fdc:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009fde:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8009fe2:	2b20      	cmp	r3, #32
{
 8009fe4:	4604      	mov	r4, r0
 8009fe6:	460e      	mov	r6, r1
 8009fe8:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009fea:	f040 8086 	bne.w	800a0fa <HAL_I2C_Master_Receive+0x122>
    __HAL_LOCK(hi2c);
 8009fee:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	f000 8081 	beq.w	800a0fa <HAL_I2C_Master_Receive+0x122>
 8009ff8:	2701      	movs	r7, #1
 8009ffa:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8009ffe:	f7fe fabb 	bl	8008578 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a002:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800a004:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a006:	9000      	str	r0, [sp, #0]
 800a008:	463a      	mov	r2, r7
 800a00a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a00e:	4620      	mov	r0, r4
 800a010:	f7ff fd50 	bl	8009ab4 <I2C_WaitOnFlagUntilTimeout>
 800a014:	b118      	cbz	r0, 800a01e <HAL_I2C_Master_Receive+0x46>
      return HAL_ERROR;
 800a016:	2001      	movs	r0, #1
}
 800a018:	b003      	add	sp, #12
 800a01a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a01e:	2322      	movs	r3, #34	; 0x22
 800a020:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a024:	2310      	movs	r3, #16
 800a026:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a02a:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800a02c:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a030:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 800a032:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a036:	b29b      	uxth	r3, r3
 800a038:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 800a03a:	6360      	str	r0, [r4, #52]	; 0x34
 800a03c:	4b30      	ldr	r3, [pc, #192]	; (800a100 <HAL_I2C_Master_Receive+0x128>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a03e:	d926      	bls.n	800a08e <HAL_I2C_Master_Receive+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a040:	22ff      	movs	r2, #255	; 0xff
 800a042:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800a044:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a046:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a04a:	4631      	mov	r1, r6
 800a04c:	4620      	mov	r0, r4
 800a04e:	f7ff fcdf 	bl	8009a10 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a052:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a054:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 800a056:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a058:	462a      	mov	r2, r5
 800a05a:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800a05c:	b9fb      	cbnz	r3, 800a09e <HAL_I2C_Master_Receive+0xc6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a05e:	f7ff fe1d 	bl	8009c9c <I2C_WaitOnSTOPFlagUntilTimeout>
 800a062:	2800      	cmp	r0, #0
 800a064:	d1d7      	bne.n	800a016 <HAL_I2C_Master_Receive+0x3e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a066:	6823      	ldr	r3, [r4, #0]
 800a068:	2120      	movs	r1, #32
 800a06a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800a06c:	685a      	ldr	r2, [r3, #4]
 800a06e:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800a072:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800a076:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800a07a:	f022 0201 	bic.w	r2, r2, #1
 800a07e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800a080:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800a084:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a088:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800a08c:	e7c4      	b.n	800a018 <HAL_I2C_Master_Receive+0x40>
      hi2c->XferSize = hi2c->XferCount;
 800a08e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800a090:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800a092:	b292      	uxth	r2, r2
 800a094:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a096:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a09a:	b2d2      	uxtb	r2, r2
 800a09c:	e7d5      	b.n	800a04a <HAL_I2C_Master_Receive+0x72>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a09e:	f7ff fe22 	bl	8009ce6 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a0a2:	2800      	cmp	r0, #0
 800a0a4:	d1b7      	bne.n	800a016 <HAL_I2C_Master_Receive+0x3e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a0a6:	6822      	ldr	r2, [r4, #0]
 800a0a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a0ac:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800a0ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800a0b0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800a0b2:	3301      	adds	r3, #1
 800a0b4:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800a0b6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a0b8:	3b01      	subs	r3, #1
 800a0ba:	b29b      	uxth	r3, r3
 800a0bc:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a0be:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800a0c0:	3a01      	subs	r2, #1
 800a0c2:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a0c4:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800a0c6:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d0c2      	beq.n	800a052 <HAL_I2C_Master_Receive+0x7a>
 800a0cc:	2a00      	cmp	r2, #0
 800a0ce:	d1c0      	bne.n	800a052 <HAL_I2C_Master_Receive+0x7a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a0d0:	9500      	str	r5, [sp, #0]
 800a0d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0d4:	2180      	movs	r1, #128	; 0x80
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	f7ff fcec 	bl	8009ab4 <I2C_WaitOnFlagUntilTimeout>
 800a0dc:	2800      	cmp	r0, #0
 800a0de:	d19a      	bne.n	800a016 <HAL_I2C_Master_Receive+0x3e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a0e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a0e2:	b29b      	uxth	r3, r3
 800a0e4:	2bff      	cmp	r3, #255	; 0xff
 800a0e6:	d903      	bls.n	800a0f0 <HAL_I2C_Master_Receive+0x118>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a0e8:	22ff      	movs	r2, #255	; 0xff
 800a0ea:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a0ec:	9000      	str	r0, [sp, #0]
 800a0ee:	e7aa      	b.n	800a046 <HAL_I2C_Master_Receive+0x6e>
          hi2c->XferSize = hi2c->XferCount;
 800a0f0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a0f2:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800a0f4:	b292      	uxth	r2, r2
 800a0f6:	8522      	strh	r2, [r4, #40]	; 0x28
 800a0f8:	e7cd      	b.n	800a096 <HAL_I2C_Master_Receive+0xbe>
    return HAL_BUSY;
 800a0fa:	2002      	movs	r0, #2
 800a0fc:	e78c      	b.n	800a018 <HAL_I2C_Master_Receive+0x40>
 800a0fe:	bf00      	nop
 800a100:	80002400 	.word	0x80002400

0800a104 <HAL_I2C_Mem_Write>:
{
 800a104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a108:	469a      	mov	sl, r3
 800a10a:	b085      	sub	sp, #20
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800a10c:	3b01      	subs	r3, #1
 800a10e:	2b01      	cmp	r3, #1
{
 800a110:	4604      	mov	r4, r0
 800a112:	460f      	mov	r7, r1
 800a114:	9203      	str	r2, [sp, #12]
 800a116:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
 800a11a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800a11e:	d904      	bls.n	800a12a <HAL_I2C_Mem_Write+0x26>
 800a120:	f640 01fd 	movw	r1, #2301	; 0x8fd
 800a124:	4857      	ldr	r0, [pc, #348]	; (800a284 <HAL_I2C_Mem_Write+0x180>)
 800a126:	f005 f823 	bl	800f170 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a12a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800a12e:	2b20      	cmp	r3, #32
 800a130:	f040 80a5 	bne.w	800a27e <HAL_I2C_Mem_Write+0x17a>
    if ((pData == NULL) || (Size == 0U))
 800a134:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a136:	b113      	cbz	r3, 800a13e <HAL_I2C_Mem_Write+0x3a>
 800a138:	f1bb 0f00 	cmp.w	fp, #0
 800a13c:	d106      	bne.n	800a14c <HAL_I2C_Mem_Write+0x48>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a13e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a142:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800a144:	2001      	movs	r0, #1
}
 800a146:	b005      	add	sp, #20
 800a148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800a14c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800a150:	2b01      	cmp	r3, #1
 800a152:	f000 8094 	beq.w	800a27e <HAL_I2C_Mem_Write+0x17a>
 800a156:	2501      	movs	r5, #1
 800a158:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    tickstart = HAL_GetTick();
 800a15c:	f7fe fa0c 	bl	8008578 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a160:	2319      	movs	r3, #25
 800a162:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 800a164:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a166:	462a      	mov	r2, r5
 800a168:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a16c:	4620      	mov	r0, r4
 800a16e:	f7ff fca1 	bl	8009ab4 <I2C_WaitOnFlagUntilTimeout>
 800a172:	4681      	mov	r9, r0
 800a174:	2800      	cmp	r0, #0
 800a176:	d1e5      	bne.n	800a144 <HAL_I2C_Mem_Write+0x40>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a178:	2321      	movs	r3, #33	; 0x21
 800a17a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a17e:	2340      	movs	r3, #64	; 0x40
 800a180:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 800a184:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a186:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800a188:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 800a18a:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 800a18c:	f8a4 b02a 	strh.w	fp, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a190:	9601      	str	r6, [sp, #4]
 800a192:	f8cd 8000 	str.w	r8, [sp]
 800a196:	4653      	mov	r3, sl
 800a198:	9a03      	ldr	r2, [sp, #12]
 800a19a:	4639      	mov	r1, r7
 800a19c:	4620      	mov	r0, r4
 800a19e:	f7ff fd19 	bl	8009bd4 <I2C_RequestMemoryWrite>
 800a1a2:	b110      	cbz	r0, 800a1aa <HAL_I2C_Mem_Write+0xa6>
      __HAL_UNLOCK(hi2c);
 800a1a4:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 800a1a8:	e7cc      	b.n	800a144 <HAL_I2C_Mem_Write+0x40>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a1aa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	2bff      	cmp	r3, #255	; 0xff
 800a1b0:	d955      	bls.n	800a25e <HAL_I2C_Mem_Write+0x15a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a1b2:	22ff      	movs	r2, #255	; 0xff
 800a1b4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a1b6:	9000      	str	r0, [sp, #0]
 800a1b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a1bc:	4639      	mov	r1, r7
 800a1be:	4620      	mov	r0, r4
 800a1c0:	f7ff fc26 	bl	8009a10 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a1c4:	4632      	mov	r2, r6
 800a1c6:	4641      	mov	r1, r8
 800a1c8:	4620      	mov	r0, r4
 800a1ca:	f7ff fcdb 	bl	8009b84 <I2C_WaitOnTXISFlagUntilTimeout>
 800a1ce:	2800      	cmp	r0, #0
 800a1d0:	d1b8      	bne.n	800a144 <HAL_I2C_Mem_Write+0x40>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a1d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1d4:	6822      	ldr	r2, [r4, #0]
 800a1d6:	f813 1b01 	ldrb.w	r1, [r3], #1
 800a1da:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800a1dc:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800a1de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800a1e0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800a1e2:	3b01      	subs	r3, #1
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a1e8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800a1ea:	3a01      	subs	r2, #1
 800a1ec:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a1ee:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800a1f0:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a1f2:	b1ab      	cbz	r3, 800a220 <HAL_I2C_Mem_Write+0x11c>
 800a1f4:	b9a2      	cbnz	r2, 800a220 <HAL_I2C_Mem_Write+0x11c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a1f6:	9600      	str	r6, [sp, #0]
 800a1f8:	4643      	mov	r3, r8
 800a1fa:	2180      	movs	r1, #128	; 0x80
 800a1fc:	4620      	mov	r0, r4
 800a1fe:	f7ff fc59 	bl	8009ab4 <I2C_WaitOnFlagUntilTimeout>
 800a202:	2800      	cmp	r0, #0
 800a204:	d19e      	bne.n	800a144 <HAL_I2C_Mem_Write+0x40>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a206:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a208:	b29b      	uxth	r3, r3
 800a20a:	2bff      	cmp	r3, #255	; 0xff
 800a20c:	d92f      	bls.n	800a26e <HAL_I2C_Mem_Write+0x16a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a20e:	22ff      	movs	r2, #255	; 0xff
 800a210:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a212:	9000      	str	r0, [sp, #0]
 800a214:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a218:	4639      	mov	r1, r7
 800a21a:	4620      	mov	r0, r4
 800a21c:	f7ff fbf8 	bl	8009a10 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 800a220:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a222:	b29b      	uxth	r3, r3
 800a224:	2b00      	cmp	r3, #0
 800a226:	d1cd      	bne.n	800a1c4 <HAL_I2C_Mem_Write+0xc0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a228:	4632      	mov	r2, r6
 800a22a:	4641      	mov	r1, r8
 800a22c:	4620      	mov	r0, r4
 800a22e:	f7ff fd35 	bl	8009c9c <I2C_WaitOnSTOPFlagUntilTimeout>
 800a232:	2800      	cmp	r0, #0
 800a234:	d186      	bne.n	800a144 <HAL_I2C_Mem_Write+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a236:	6823      	ldr	r3, [r4, #0]
 800a238:	2120      	movs	r1, #32
 800a23a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800a23c:	685a      	ldr	r2, [r3, #4]
 800a23e:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800a242:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800a246:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800a24a:	f022 0201 	bic.w	r2, r2, #1
 800a24e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800a250:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800a254:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a258:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800a25c:	e773      	b.n	800a146 <HAL_I2C_Mem_Write+0x42>
      hi2c->XferSize = hi2c->XferCount;
 800a25e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a260:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800a262:	b292      	uxth	r2, r2
 800a264:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a266:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a26a:	b2d2      	uxtb	r2, r2
 800a26c:	e7a6      	b.n	800a1bc <HAL_I2C_Mem_Write+0xb8>
          hi2c->XferSize = hi2c->XferCount;
 800a26e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a270:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800a272:	b292      	uxth	r2, r2
 800a274:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a276:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a27a:	b2d2      	uxtb	r2, r2
 800a27c:	e7cc      	b.n	800a218 <HAL_I2C_Mem_Write+0x114>
    return HAL_BUSY;
 800a27e:	2002      	movs	r0, #2
 800a280:	e761      	b.n	800a146 <HAL_I2C_Mem_Write+0x42>
 800a282:	bf00      	nop
 800a284:	08017587 	.word	0x08017587

0800a288 <HAL_I2C_Mem_Read>:
{
 800a288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a28c:	469a      	mov	sl, r3
 800a28e:	b085      	sub	sp, #20
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800a290:	3b01      	subs	r3, #1
 800a292:	2b01      	cmp	r3, #1
{
 800a294:	4604      	mov	r4, r0
 800a296:	460f      	mov	r7, r1
 800a298:	9203      	str	r2, [sp, #12]
 800a29a:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
 800a29e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800a2a2:	d904      	bls.n	800a2ae <HAL_I2C_Mem_Read+0x26>
 800a2a4:	f640 1184 	movw	r1, #2436	; 0x984
 800a2a8:	4859      	ldr	r0, [pc, #356]	; (800a410 <HAL_I2C_Mem_Read+0x188>)
 800a2aa:	f004 ff61 	bl	800f170 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a2ae:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800a2b2:	2b20      	cmp	r3, #32
 800a2b4:	f040 80a9 	bne.w	800a40a <HAL_I2C_Mem_Read+0x182>
    if ((pData == NULL) || (Size == 0U))
 800a2b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2ba:	b113      	cbz	r3, 800a2c2 <HAL_I2C_Mem_Read+0x3a>
 800a2bc:	f1bb 0f00 	cmp.w	fp, #0
 800a2c0:	d106      	bne.n	800a2d0 <HAL_I2C_Mem_Read+0x48>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a2c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a2c6:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800a2c8:	2001      	movs	r0, #1
}
 800a2ca:	b005      	add	sp, #20
 800a2cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800a2d0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	f000 8098 	beq.w	800a40a <HAL_I2C_Mem_Read+0x182>
 800a2da:	2501      	movs	r5, #1
 800a2dc:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    tickstart = HAL_GetTick();
 800a2e0:	f7fe f94a 	bl	8008578 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a2e4:	2319      	movs	r3, #25
 800a2e6:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 800a2e8:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a2ea:	462a      	mov	r2, r5
 800a2ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a2f0:	4620      	mov	r0, r4
 800a2f2:	f7ff fbdf 	bl	8009ab4 <I2C_WaitOnFlagUntilTimeout>
 800a2f6:	4681      	mov	r9, r0
 800a2f8:	2800      	cmp	r0, #0
 800a2fa:	d1e5      	bne.n	800a2c8 <HAL_I2C_Mem_Read+0x40>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a2fc:	2322      	movs	r3, #34	; 0x22
 800a2fe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a302:	2340      	movs	r3, #64	; 0x40
 800a304:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 800a308:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a30a:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800a30c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 800a30e:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 800a310:	f8a4 b02a 	strh.w	fp, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a314:	9601      	str	r6, [sp, #4]
 800a316:	f8cd 8000 	str.w	r8, [sp]
 800a31a:	4653      	mov	r3, sl
 800a31c:	9a03      	ldr	r2, [sp, #12]
 800a31e:	4639      	mov	r1, r7
 800a320:	4620      	mov	r0, r4
 800a322:	f7ff fc89 	bl	8009c38 <I2C_RequestMemoryRead>
 800a326:	b110      	cbz	r0, 800a32e <HAL_I2C_Mem_Read+0xa6>
      __HAL_UNLOCK(hi2c);
 800a328:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 800a32c:	e7cc      	b.n	800a2c8 <HAL_I2C_Mem_Read+0x40>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a32e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a330:	b29b      	uxth	r3, r3
 800a332:	2bff      	cmp	r3, #255	; 0xff
 800a334:	4b37      	ldr	r3, [pc, #220]	; (800a414 <HAL_I2C_Mem_Read+0x18c>)
 800a336:	d958      	bls.n	800a3ea <HAL_I2C_Mem_Read+0x162>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a338:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800a33a:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a33c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800a33e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800a342:	4639      	mov	r1, r7
 800a344:	4620      	mov	r0, r4
 800a346:	f7ff fb63 	bl	8009a10 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a34a:	9600      	str	r6, [sp, #0]
 800a34c:	4643      	mov	r3, r8
 800a34e:	2200      	movs	r2, #0
 800a350:	2104      	movs	r1, #4
 800a352:	4620      	mov	r0, r4
 800a354:	f7ff fbae 	bl	8009ab4 <I2C_WaitOnFlagUntilTimeout>
 800a358:	2800      	cmp	r0, #0
 800a35a:	d1b5      	bne.n	800a2c8 <HAL_I2C_Mem_Read+0x40>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a35c:	6822      	ldr	r2, [r4, #0]
 800a35e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a360:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a362:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800a364:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800a366:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800a368:	3301      	adds	r3, #1
 800a36a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800a36c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a36e:	3b01      	subs	r3, #1
 800a370:	b29b      	uxth	r3, r3
 800a372:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a374:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800a376:	3a01      	subs	r2, #1
 800a378:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a37a:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800a37c:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a37e:	b1ab      	cbz	r3, 800a3ac <HAL_I2C_Mem_Read+0x124>
 800a380:	b9a2      	cbnz	r2, 800a3ac <HAL_I2C_Mem_Read+0x124>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a382:	9600      	str	r6, [sp, #0]
 800a384:	4643      	mov	r3, r8
 800a386:	2180      	movs	r1, #128	; 0x80
 800a388:	4620      	mov	r0, r4
 800a38a:	f7ff fb93 	bl	8009ab4 <I2C_WaitOnFlagUntilTimeout>
 800a38e:	2800      	cmp	r0, #0
 800a390:	d19a      	bne.n	800a2c8 <HAL_I2C_Mem_Read+0x40>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a392:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a394:	b29b      	uxth	r3, r3
 800a396:	2bff      	cmp	r3, #255	; 0xff
 800a398:	d92f      	bls.n	800a3fa <HAL_I2C_Mem_Read+0x172>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a39a:	22ff      	movs	r2, #255	; 0xff
 800a39c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a39e:	9000      	str	r0, [sp, #0]
 800a3a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a3a4:	4639      	mov	r1, r7
 800a3a6:	4620      	mov	r0, r4
 800a3a8:	f7ff fb32 	bl	8009a10 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 800a3ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a3ae:	b29b      	uxth	r3, r3
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d1ca      	bne.n	800a34a <HAL_I2C_Mem_Read+0xc2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a3b4:	4632      	mov	r2, r6
 800a3b6:	4641      	mov	r1, r8
 800a3b8:	4620      	mov	r0, r4
 800a3ba:	f7ff fc6f 	bl	8009c9c <I2C_WaitOnSTOPFlagUntilTimeout>
 800a3be:	2800      	cmp	r0, #0
 800a3c0:	d182      	bne.n	800a2c8 <HAL_I2C_Mem_Read+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a3c2:	6823      	ldr	r3, [r4, #0]
 800a3c4:	2120      	movs	r1, #32
 800a3c6:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800a3c8:	685a      	ldr	r2, [r3, #4]
 800a3ca:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800a3ce:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800a3d2:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800a3d6:	f022 0201 	bic.w	r2, r2, #1
 800a3da:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800a3dc:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800a3e0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a3e4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800a3e8:	e76f      	b.n	800a2ca <HAL_I2C_Mem_Read+0x42>
      hi2c->XferSize = hi2c->XferCount;
 800a3ea:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800a3ec:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800a3ee:	b292      	uxth	r2, r2
 800a3f0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800a3f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a3f6:	b2d2      	uxtb	r2, r2
 800a3f8:	e7a3      	b.n	800a342 <HAL_I2C_Mem_Read+0xba>
          hi2c->XferSize = hi2c->XferCount;
 800a3fa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a3fc:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800a3fe:	b292      	uxth	r2, r2
 800a400:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a402:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a406:	b2d2      	uxtb	r2, r2
 800a408:	e7cc      	b.n	800a3a4 <HAL_I2C_Mem_Read+0x11c>
    return HAL_BUSY;
 800a40a:	2002      	movs	r0, #2
 800a40c:	e75d      	b.n	800a2ca <HAL_I2C_Mem_Read+0x42>
 800a40e:	bf00      	nop
 800a410:	08017587 	.word	0x08017587
 800a414:	80002400 	.word	0x80002400

0800a418 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a418:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800a41a:	4a1e      	ldr	r2, [pc, #120]	; (800a494 <HAL_I2CEx_ConfigAnalogFilter+0x7c>)
 800a41c:	6803      	ldr	r3, [r0, #0]
 800a41e:	4293      	cmp	r3, r2
{
 800a420:	4604      	mov	r4, r0
 800a422:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800a424:	d00b      	beq.n	800a43e <HAL_I2CEx_ConfigAnalogFilter+0x26>
 800a426:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d007      	beq.n	800a43e <HAL_I2CEx_ConfigAnalogFilter+0x26>
 800a42e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a432:	4293      	cmp	r3, r2
 800a434:	d003      	beq.n	800a43e <HAL_I2CEx_ConfigAnalogFilter+0x26>
 800a436:	2174      	movs	r1, #116	; 0x74
 800a438:	4817      	ldr	r0, [pc, #92]	; (800a498 <HAL_I2CEx_ConfigAnalogFilter+0x80>)
 800a43a:	f004 fe99 	bl	800f170 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800a43e:	f435 5380 	bics.w	r3, r5, #4096	; 0x1000
 800a442:	d003      	beq.n	800a44c <HAL_I2CEx_ConfigAnalogFilter+0x34>
 800a444:	2175      	movs	r1, #117	; 0x75
 800a446:	4814      	ldr	r0, [pc, #80]	; (800a498 <HAL_I2CEx_ConfigAnalogFilter+0x80>)
 800a448:	f004 fe92 	bl	800f170 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a44c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800a450:	b2d2      	uxtb	r2, r2
 800a452:	2a20      	cmp	r2, #32
 800a454:	d11c      	bne.n	800a490 <HAL_I2CEx_ConfigAnalogFilter+0x78>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a456:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	d018      	beq.n	800a490 <HAL_I2CEx_ConfigAnalogFilter+0x78>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a45e:	2324      	movs	r3, #36	; 0x24
 800a460:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a464:	6823      	ldr	r3, [r4, #0]
 800a466:	6819      	ldr	r1, [r3, #0]
 800a468:	f021 0101 	bic.w	r1, r1, #1
 800a46c:	6019      	str	r1, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a46e:	6819      	ldr	r1, [r3, #0]
 800a470:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 800a474:	6019      	str	r1, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a476:	6819      	ldr	r1, [r3, #0]
 800a478:	430d      	orrs	r5, r1
 800a47a:	601d      	str	r5, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a47c:	6819      	ldr	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a47e:	2000      	movs	r0, #0
    __HAL_I2C_ENABLE(hi2c);
 800a480:	f041 0101 	orr.w	r1, r1, #1
 800a484:	6019      	str	r1, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800a486:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800a48a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40

    return HAL_OK;
 800a48e:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    return HAL_BUSY;
 800a490:	2002      	movs	r0, #2
  }
}
 800a492:	bd38      	pop	{r3, r4, r5, pc}
 800a494:	40005400 	.word	0x40005400
 800a498:	080175bf 	.word	0x080175bf

0800a49c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a49c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800a49e:	4a1d      	ldr	r2, [pc, #116]	; (800a514 <HAL_I2CEx_ConfigDigitalFilter+0x78>)
 800a4a0:	6803      	ldr	r3, [r0, #0]
 800a4a2:	4293      	cmp	r3, r2
{
 800a4a4:	4604      	mov	r4, r0
 800a4a6:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800a4a8:	d00b      	beq.n	800a4c2 <HAL_I2CEx_ConfigDigitalFilter+0x26>
 800a4aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d007      	beq.n	800a4c2 <HAL_I2CEx_ConfigDigitalFilter+0x26>
 800a4b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d003      	beq.n	800a4c2 <HAL_I2CEx_ConfigDigitalFilter+0x26>
 800a4ba:	21a2      	movs	r1, #162	; 0xa2
 800a4bc:	4816      	ldr	r0, [pc, #88]	; (800a518 <HAL_I2CEx_ConfigDigitalFilter+0x7c>)
 800a4be:	f004 fe57 	bl	800f170 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800a4c2:	2d0f      	cmp	r5, #15
 800a4c4:	d903      	bls.n	800a4ce <HAL_I2CEx_ConfigDigitalFilter+0x32>
 800a4c6:	21a3      	movs	r1, #163	; 0xa3
 800a4c8:	4813      	ldr	r0, [pc, #76]	; (800a518 <HAL_I2CEx_ConfigDigitalFilter+0x7c>)
 800a4ca:	f004 fe51 	bl	800f170 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a4ce:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800a4d2:	b2d2      	uxtb	r2, r2
 800a4d4:	2a20      	cmp	r2, #32
 800a4d6:	d11b      	bne.n	800a510 <HAL_I2CEx_ConfigDigitalFilter+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a4d8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	d017      	beq.n	800a510 <HAL_I2CEx_ConfigDigitalFilter+0x74>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a4e0:	2324      	movs	r3, #36	; 0x24
 800a4e2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a4e6:	6823      	ldr	r3, [r4, #0]
 800a4e8:	6819      	ldr	r1, [r3, #0]
 800a4ea:	f021 0101 	bic.w	r1, r1, #1
 800a4ee:	6019      	str	r1, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a4f0:	6819      	ldr	r1, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a4f2:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a4f6:	ea41 2105 	orr.w	r1, r1, r5, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a4fa:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a4fc:	6819      	ldr	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a4fe:	2000      	movs	r0, #0
    __HAL_I2C_ENABLE(hi2c);
 800a500:	f041 0101 	orr.w	r1, r1, #1
 800a504:	6019      	str	r1, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800a506:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800a50a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40

    return HAL_OK;
 800a50e:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    return HAL_BUSY;
 800a510:	2002      	movs	r0, #2
  }
}
 800a512:	bd38      	pop	{r3, r4, r5, pc}
 800a514:	40005400 	.word	0x40005400
 800a518:	080175bf 	.word	0x080175bf

0800a51c <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim: LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 800a51c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpcfgr = 0;

  /* Check the LPTIM handle allocation */
  if(hlptim == NULL)
 800a51e:	4604      	mov	r4, r0
 800a520:	2800      	cmp	r0, #0
 800a522:	f000 80e0 	beq.w	800a6e6 <HAL_LPTIM_Init+0x1ca>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
 800a526:	6803      	ldr	r3, [r0, #0]
 800a528:	4a70      	ldr	r2, [pc, #448]	; (800a6ec <HAL_LPTIM_Init+0x1d0>)
 800a52a:	4293      	cmp	r3, r2
 800a52c:	d007      	beq.n	800a53e <HAL_LPTIM_Init+0x22>
 800a52e:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 800a532:	4293      	cmp	r3, r2
 800a534:	d003      	beq.n	800a53e <HAL_LPTIM_Init+0x22>
 800a536:	21e9      	movs	r1, #233	; 0xe9
 800a538:	486d      	ldr	r0, [pc, #436]	; (800a6f0 <HAL_LPTIM_Init+0x1d4>)
 800a53a:	f004 fe19 	bl	800f170 <assert_failed>

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
 800a53e:	6863      	ldr	r3, [r4, #4]
 800a540:	2b01      	cmp	r3, #1
 800a542:	d903      	bls.n	800a54c <HAL_LPTIM_Init+0x30>
 800a544:	21eb      	movs	r1, #235	; 0xeb
 800a546:	486a      	ldr	r0, [pc, #424]	; (800a6f0 <HAL_LPTIM_Init+0x1d4>)
 800a548:	f004 fe12 	bl	800f170 <assert_failed>
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
 800a54c:	68a3      	ldr	r3, [r4, #8]
 800a54e:	f433 63c0 	bics.w	r3, r3, #1536	; 0x600
 800a552:	d006      	beq.n	800a562 <HAL_LPTIM_Init+0x46>
 800a554:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a558:	d003      	beq.n	800a562 <HAL_LPTIM_Init+0x46>
 800a55a:	21ec      	movs	r1, #236	; 0xec
 800a55c:	4864      	ldr	r0, [pc, #400]	; (800a6f0 <HAL_LPTIM_Init+0x1d4>)
 800a55e:	f004 fe07 	bl	800f170 <assert_failed>
  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 800a562:	6863      	ldr	r3, [r4, #4]
 800a564:	2b01      	cmp	r3, #1
 800a566:	d111      	bne.n	800a58c <HAL_LPTIM_Init+0x70>
  {
    assert_param(IS_LPTIM_CLOCK_POLARITY(hlptim->Init.UltraLowPowerClock.Polarity));
 800a568:	68e3      	ldr	r3, [r4, #12]
 800a56a:	f033 0202 	bics.w	r2, r3, #2
 800a56e:	d005      	beq.n	800a57c <HAL_LPTIM_Init+0x60>
 800a570:	2b04      	cmp	r3, #4
 800a572:	d003      	beq.n	800a57c <HAL_LPTIM_Init+0x60>
 800a574:	21ef      	movs	r1, #239	; 0xef
 800a576:	485e      	ldr	r0, [pc, #376]	; (800a6f0 <HAL_LPTIM_Init+0x1d4>)
 800a578:	f004 fdfa 	bl	800f170 <assert_failed>
    assert_param(IS_LPTIM_CLOCK_SAMPLE_TIME(hlptim->Init.UltraLowPowerClock.SampleTime));
 800a57c:	6923      	ldr	r3, [r4, #16]
 800a57e:	f033 0318 	bics.w	r3, r3, #24
 800a582:	d003      	beq.n	800a58c <HAL_LPTIM_Init+0x70>
 800a584:	21f0      	movs	r1, #240	; 0xf0
 800a586:	485a      	ldr	r0, [pc, #360]	; (800a6f0 <HAL_LPTIM_Init+0x1d4>)
 800a588:	f004 fdf2 	bl	800f170 <assert_failed>
  }
  assert_param(IS_LPTIM_TRG_SOURCE(hlptim->Init.Trigger.Source));
 800a58c:	6963      	ldr	r3, [r4, #20]
 800a58e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a592:	4293      	cmp	r3, r2
 800a594:	d009      	beq.n	800a5aa <HAL_LPTIM_Init+0x8e>
 800a596:	f433 43c0 	bics.w	r3, r3, #24576	; 0x6000
 800a59a:	d006      	beq.n	800a5aa <HAL_LPTIM_Init+0x8e>
 800a59c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5a0:	d003      	beq.n	800a5aa <HAL_LPTIM_Init+0x8e>
 800a5a2:	21f2      	movs	r1, #242	; 0xf2
 800a5a4:	4852      	ldr	r0, [pc, #328]	; (800a6f0 <HAL_LPTIM_Init+0x1d4>)
 800a5a6:	f004 fde3 	bl	800f170 <assert_failed>
  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 800a5aa:	6962      	ldr	r2, [r4, #20]
 800a5ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d014      	beq.n	800a5de <HAL_LPTIM_Init+0xc2>
  {
    assert_param(IS_LPTIM_TRIG_SAMPLE_TIME(hlptim->Init.Trigger.SampleTime));
 800a5b4:	69e3      	ldr	r3, [r4, #28]
 800a5b6:	f033 03c0 	bics.w	r3, r3, #192	; 0xc0
 800a5ba:	d003      	beq.n	800a5c4 <HAL_LPTIM_Init+0xa8>
 800a5bc:	21f5      	movs	r1, #245	; 0xf5
 800a5be:	484c      	ldr	r0, [pc, #304]	; (800a6f0 <HAL_LPTIM_Init+0x1d4>)
 800a5c0:	f004 fdd6 	bl	800f170 <assert_failed>
    assert_param(IS_LPTIM_EXT_TRG_POLARITY(hlptim->Init.Trigger.ActiveEdge));
 800a5c4:	69a3      	ldr	r3, [r4, #24]
 800a5c6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a5ca:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 800a5ce:	d006      	beq.n	800a5de <HAL_LPTIM_Init+0xc2>
 800a5d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a5d4:	d003      	beq.n	800a5de <HAL_LPTIM_Init+0xc2>
 800a5d6:	21f6      	movs	r1, #246	; 0xf6
 800a5d8:	4845      	ldr	r0, [pc, #276]	; (800a6f0 <HAL_LPTIM_Init+0x1d4>)
 800a5da:	f004 fdc9 	bl	800f170 <assert_failed>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
 800a5de:	6a23      	ldr	r3, [r4, #32]
 800a5e0:	f433 1300 	bics.w	r3, r3, #2097152	; 0x200000
 800a5e4:	d003      	beq.n	800a5ee <HAL_LPTIM_Init+0xd2>
 800a5e6:	21f8      	movs	r1, #248	; 0xf8
 800a5e8:	4841      	ldr	r0, [pc, #260]	; (800a6f0 <HAL_LPTIM_Init+0x1d4>)
 800a5ea:	f004 fdc1 	bl	800f170 <assert_failed>
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
 800a5ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5f0:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 800a5f4:	d003      	beq.n	800a5fe <HAL_LPTIM_Init+0xe2>
 800a5f6:	21f9      	movs	r1, #249	; 0xf9
 800a5f8:	483d      	ldr	r0, [pc, #244]	; (800a6f0 <HAL_LPTIM_Init+0x1d4>)
 800a5fa:	f004 fdb9 	bl	800f170 <assert_failed>
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
 800a5fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a600:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 800a604:	d003      	beq.n	800a60e <HAL_LPTIM_Init+0xf2>
 800a606:	21fa      	movs	r1, #250	; 0xfa
 800a608:	4839      	ldr	r0, [pc, #228]	; (800a6f0 <HAL_LPTIM_Init+0x1d4>)
 800a60a:	f004 fdb1 	bl	800f170 <assert_failed>

#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if(hlptim->State == HAL_LPTIM_STATE_RESET)
 800a60e:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800a612:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a616:	b923      	cbnz	r3, 800a622 <HAL_LPTIM_Init+0x106>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800a618:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 800a61c:	4620      	mov	r0, r4
 800a61e:	f004 faf3 	bl	800ec08 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800a622:	2302      	movs	r3, #2

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800a624:	6820      	ldr	r0, [r4, #0]

  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 800a626:	6865      	ldr	r5, [r4, #4]
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800a628:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  tmpcfgr = hlptim->Instance->CFGR;
 800a62c:	68c2      	ldr	r2, [r0, #12]
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
  }
  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 800a62e:	6961      	ldr	r1, [r4, #20]
  {
    tmpcfgr &= (uint32_t)(~ (LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800a630:	4e30      	ldr	r6, [pc, #192]	; (800a6f4 <HAL_LPTIM_Init+0x1d8>)
  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 800a632:	2d01      	cmp	r5, #1
  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 800a634:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800a638:	bf08      	it	eq
 800a63a:	f022 021e 	biceq.w	r2, r2, #30
  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 800a63e:	4299      	cmp	r1, r3
    tmpcfgr &= (uint32_t)(~ (LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 800a640:	bf1c      	itt	ne
 800a642:	f422 4260 	bicne.w	r2, r2, #57344	; 0xe000
 800a646:	f022 02c0 	bicne.w	r2, r2, #192	; 0xc0
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800a64a:	4016      	ands	r6, r2
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE ));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800a64c:	68a2      	ldr	r2, [r4, #8]
 800a64e:	ea45 0302 	orr.w	r3, r5, r2
              hlptim->Init.Clock.Prescaler |
 800a652:	6a22      	ldr	r2, [r4, #32]
 800a654:	4313      	orrs	r3, r2
              hlptim->Init.OutputPolarity  |
 800a656:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a658:	4313      	orrs	r3, r2
              hlptim->Init.UpdateMode      |
 800a65a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
              hlptim->Init.CounterSource);

  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 800a65c:	2d01      	cmp	r5, #1
              hlptim->Init.UpdateMode      |
 800a65e:	ea43 0302 	orr.w	r3, r3, r2
  {
    tmpcfgr |=  (hlptim->Init.UltraLowPowerClock.Polarity |
 800a662:	bf04      	itt	eq
 800a664:	6925      	ldreq	r5, [r4, #16]
 800a666:	68e2      	ldreq	r2, [r4, #12]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800a668:	ea43 0306 	orr.w	r3, r3, r6
    tmpcfgr |=  (hlptim->Init.UltraLowPowerClock.Polarity |
 800a66c:	bf04      	itt	eq
 800a66e:	432a      	orreq	r2, r5
 800a670:	4313      	orreq	r3, r2
                hlptim->Init.UltraLowPowerClock.SampleTime);
  }

  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 800a672:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a676:	4291      	cmp	r1, r2
 800a678:	d004      	beq.n	800a684 <HAL_LPTIM_Init+0x168>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800a67a:	69a2      	ldr	r2, [r4, #24]
 800a67c:	4311      	orrs	r1, r2
                hlptim->Init.Trigger.ActiveEdge |
 800a67e:	69e2      	ldr	r2, [r4, #28]
 800a680:	4311      	orrs	r1, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800a682:	430b      	orrs	r3, r1

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;

  /* Configure LPTIM input sources */
  if(hlptim->Instance == LPTIM1)
 800a684:	4d19      	ldr	r5, [pc, #100]	; (800a6ec <HAL_LPTIM_Init+0x1d0>)
  hlptim->Instance->CFGR = tmpcfgr;
 800a686:	60c3      	str	r3, [r0, #12]
  if(hlptim->Instance == LPTIM1)
 800a688:	42a8      	cmp	r0, r5
 800a68a:	d11d      	bne.n	800a6c8 <HAL_LPTIM_Init+0x1ac>
  {
    /* Check LPTIM1 Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance,hlptim->Init.Input1Source));
 800a68c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a68e:	2b01      	cmp	r3, #1
 800a690:	d904      	bls.n	800a69c <HAL_LPTIM_Init+0x180>
 800a692:	f240 1145 	movw	r1, #325	; 0x145
 800a696:	4816      	ldr	r0, [pc, #88]	; (800a6f0 <HAL_LPTIM_Init+0x1d4>)
 800a698:	f004 fd6a 	bl	800f170 <assert_failed>
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance,hlptim->Init.Input2Source));
 800a69c:	6823      	ldr	r3, [r4, #0]
 800a69e:	42ab      	cmp	r3, r5
 800a6a0:	d103      	bne.n	800a6aa <HAL_LPTIM_Init+0x18e>
 800a6a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a6a4:	f033 0302 	bics.w	r3, r3, #2
 800a6a8:	d004      	beq.n	800a6b4 <HAL_LPTIM_Init+0x198>
 800a6aa:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800a6ae:	4810      	ldr	r0, [pc, #64]	; (800a6f0 <HAL_LPTIM_Init+0x1d4>)
 800a6b0:	f004 fd5e 	bl	800f170 <assert_failed>

    /* Configure LPTIM1 Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800a6b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a6b6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a6b8:	6822      	ldr	r2, [r4, #0]
 800a6ba:	430b      	orrs	r3, r1
 800a6bc:	6213      	str	r3, [r2, #32]
    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800a6be:	2301      	movs	r3, #1
 800a6c0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 800a6c4:	2000      	movs	r0, #0
 800a6c6:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance,hlptim->Init.Input1Source));
 800a6c8:	4b0b      	ldr	r3, [pc, #44]	; (800a6f8 <HAL_LPTIM_Init+0x1dc>)
 800a6ca:	4298      	cmp	r0, r3
 800a6cc:	d102      	bne.n	800a6d4 <HAL_LPTIM_Init+0x1b8>
 800a6ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a6d0:	2b03      	cmp	r3, #3
 800a6d2:	d904      	bls.n	800a6de <HAL_LPTIM_Init+0x1c2>
 800a6d4:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800a6d8:	4805      	ldr	r0, [pc, #20]	; (800a6f0 <HAL_LPTIM_Init+0x1d4>)
 800a6da:	f004 fd49 	bl	800f170 <assert_failed>
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 800a6de:	6823      	ldr	r3, [r4, #0]
 800a6e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a6e2:	621a      	str	r2, [r3, #32]
 800a6e4:	e7eb      	b.n	800a6be <HAL_LPTIM_Init+0x1a2>
    return HAL_ERROR;
 800a6e6:	2001      	movs	r0, #1
}
 800a6e8:	bd70      	pop	{r4, r5, r6, pc}
 800a6ea:	bf00      	nop
 800a6ec:	40007c00 	.word	0x40007c00
 800a6f0:	080175fa 	.word	0x080175fa
 800a6f4:	ff19f1fe 	.word	0xff19f1fe
 800a6f8:	40009400 	.word	0x40009400

0800a6fc <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800a6fc:	4b02      	ldr	r3, [pc, #8]	; (800a708 <HAL_PWREx_GetVoltageRange+0xc>)
 800a6fe:	6818      	ldr	r0, [r3, #0]
#endif
}
 800a700:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 800a704:	4770      	bx	lr
 800a706:	bf00      	nop
 800a708:	40007000 	.word	0x40007000

0800a70c <HAL_PWREx_ControlVoltageScaling>:
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 800a70c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
{
 800a710:	b510      	push	{r4, lr}
 800a712:	4c1c      	ldr	r4, [pc, #112]	; (800a784 <HAL_PWREx_ControlVoltageScaling+0x78>)
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 800a714:	d017      	beq.n	800a746 <HAL_PWREx_ControlVoltageScaling+0x3a>
 800a716:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800a71a:	d003      	beq.n	800a724 <HAL_PWREx_ControlVoltageScaling+0x18>
 800a71c:	21b8      	movs	r1, #184	; 0xb8
 800a71e:	481a      	ldr	r0, [pc, #104]	; (800a788 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800a720:	f004 fd26 	bl	800f170 <assert_failed>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800a724:	6823      	ldr	r3, [r4, #0]
 800a726:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a72a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a72e:	d027      	beq.n	800a780 <HAL_PWREx_ControlVoltageScaling+0x74>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a730:	6823      	ldr	r3, [r4, #0]
 800a732:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a736:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a73a:	6023      	str	r3, [r4, #0]
 800a73c:	e020      	b.n	800a780 <HAL_PWREx_ControlVoltageScaling+0x74>
        wait_loop_index--;
 800a73e:	3b01      	subs	r3, #1
 800a740:	e016      	b.n	800a770 <HAL_PWREx_ControlVoltageScaling+0x64>
        return HAL_TIMEOUT;
 800a742:	2003      	movs	r0, #3
 800a744:	bd10      	pop	{r4, pc}
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800a746:	6823      	ldr	r3, [r4, #0]
 800a748:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a74c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a750:	d016      	beq.n	800a780 <HAL_PWREx_ControlVoltageScaling+0x74>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a752:	6823      	ldr	r3, [r4, #0]
 800a754:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a758:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a75c:	6023      	str	r3, [r4, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a75e:	4b0b      	ldr	r3, [pc, #44]	; (800a78c <HAL_PWREx_ControlVoltageScaling+0x80>)
 800a760:	681a      	ldr	r2, [r3, #0]
 800a762:	2332      	movs	r3, #50	; 0x32
 800a764:	4353      	muls	r3, r2
 800a766:	4a0a      	ldr	r2, [pc, #40]	; (800a790 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800a768:	fbb3 f3f2 	udiv	r3, r3, r2
 800a76c:	4622      	mov	r2, r4
 800a76e:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a770:	6961      	ldr	r1, [r4, #20]
 800a772:	0549      	lsls	r1, r1, #21
 800a774:	d501      	bpl.n	800a77a <HAL_PWREx_ControlVoltageScaling+0x6e>
 800a776:	2b00      	cmp	r3, #0
 800a778:	d1e1      	bne.n	800a73e <HAL_PWREx_ControlVoltageScaling+0x32>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a77a:	6953      	ldr	r3, [r2, #20]
 800a77c:	055b      	lsls	r3, r3, #21
 800a77e:	d4e0      	bmi.n	800a742 <HAL_PWREx_ControlVoltageScaling+0x36>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800a780:	2000      	movs	r0, #0
 800a782:	bd10      	pop	{r4, pc}
 800a784:	40007000 	.word	0x40007000
 800a788:	08017634 	.word	0x08017634
 800a78c:	20000004 	.word	0x20000004
 800a790:	000f4240 	.word	0x000f4240

0800a794 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800a794:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a796:	4d1e      	ldr	r5, [pc, #120]	; (800a810 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 800a798:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800a79a:	00da      	lsls	r2, r3, #3
{
 800a79c:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a79e:	d518      	bpl.n	800a7d2 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800a7a0:	f7ff ffac 	bl	800a6fc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a7a4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800a7a8:	d123      	bne.n	800a7f2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 800a7aa:	2c80      	cmp	r4, #128	; 0x80
 800a7ac:	d929      	bls.n	800a802 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800a7ae:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a7b0:	bf8c      	ite	hi
 800a7b2:	2002      	movhi	r0, #2
 800a7b4:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a7b6:	4a17      	ldr	r2, [pc, #92]	; (800a814 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 800a7b8:	6813      	ldr	r3, [r2, #0]
 800a7ba:	f023 0307 	bic.w	r3, r3, #7
 800a7be:	4303      	orrs	r3, r0
 800a7c0:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800a7c2:	6813      	ldr	r3, [r2, #0]
 800a7c4:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800a7c8:	1a18      	subs	r0, r3, r0
 800a7ca:	bf18      	it	ne
 800a7cc:	2001      	movne	r0, #1
 800a7ce:	b003      	add	sp, #12
 800a7d0:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800a7d2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800a7d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7d8:	65ab      	str	r3, [r5, #88]	; 0x58
 800a7da:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800a7dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7e0:	9301      	str	r3, [sp, #4]
 800a7e2:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 800a7e4:	f7ff ff8a 	bl	800a6fc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800a7e8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800a7ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a7ee:	65ab      	str	r3, [r5, #88]	; 0x58
 800a7f0:	e7d8      	b.n	800a7a4 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 800a7f2:	2c80      	cmp	r4, #128	; 0x80
 800a7f4:	d807      	bhi.n	800a806 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 800a7f6:	d008      	beq.n	800a80a <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 800a7f8:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 800a7fc:	4258      	negs	r0, r3
 800a7fe:	4158      	adcs	r0, r3
 800a800:	e7d9      	b.n	800a7b6 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800a802:	2000      	movs	r0, #0
 800a804:	e7d7      	b.n	800a7b6 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 800a806:	2003      	movs	r0, #3
 800a808:	e7d5      	b.n	800a7b6 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 800a80a:	2002      	movs	r0, #2
 800a80c:	e7d3      	b.n	800a7b6 <RCC_SetFlashLatencyFromMSIRange+0x22>
 800a80e:	bf00      	nop
 800a810:	40021000 	.word	0x40021000
 800a814:	40022000 	.word	0x40022000

0800a818 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a818:	4b25      	ldr	r3, [pc, #148]	; (800a8b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800a81a:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a81c:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a81e:	f012 020c 	ands.w	r2, r2, #12
 800a822:	d005      	beq.n	800a830 <HAL_RCC_GetSysClockFreq+0x18>
 800a824:	2a0c      	cmp	r2, #12
 800a826:	d115      	bne.n	800a854 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a828:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800a82c:	2901      	cmp	r1, #1
 800a82e:	d118      	bne.n	800a862 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800a830:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 800a832:	4820      	ldr	r0, [pc, #128]	; (800a8b4 <HAL_RCC_GetSysClockFreq+0x9c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800a834:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800a836:	bf55      	itete	pl
 800a838:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800a83c:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800a83e:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800a842:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 800a846:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a84a:	b382      	cbz	r2, 800a8ae <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800a84c:	2a0c      	cmp	r2, #12
 800a84e:	d009      	beq.n	800a864 <HAL_RCC_GetSysClockFreq+0x4c>
 800a850:	2000      	movs	r0, #0
  return sysclockfreq;
 800a852:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800a854:	2a04      	cmp	r2, #4
 800a856:	d029      	beq.n	800a8ac <HAL_RCC_GetSysClockFreq+0x94>
 800a858:	2a08      	cmp	r2, #8
 800a85a:	4817      	ldr	r0, [pc, #92]	; (800a8b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800a85c:	bf18      	it	ne
 800a85e:	2000      	movne	r0, #0
 800a860:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800a862:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a864:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a866:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a868:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a86c:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (pllsource)
 800a870:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a872:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 800a876:	d005      	beq.n	800a884 <HAL_RCC_GetSysClockFreq+0x6c>
 800a878:	2903      	cmp	r1, #3
 800a87a:	d012      	beq.n	800a8a2 <HAL_RCC_GetSysClockFreq+0x8a>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a87c:	68d9      	ldr	r1, [r3, #12]
 800a87e:	f3c1 2106 	ubfx	r1, r1, #8, #7
 800a882:	e003      	b.n	800a88c <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a884:	68d9      	ldr	r1, [r3, #12]
 800a886:	480d      	ldr	r0, [pc, #52]	; (800a8bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800a888:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a88c:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a88e:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a892:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800a896:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a898:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a89a:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 800a89c:	fbb0 f0f3 	udiv	r0, r0, r3
 800a8a0:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a8a2:	68d9      	ldr	r1, [r3, #12]
 800a8a4:	4804      	ldr	r0, [pc, #16]	; (800a8b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800a8a6:	f3c1 2106 	ubfx	r1, r1, #8, #7
 800a8aa:	e7ef      	b.n	800a88c <HAL_RCC_GetSysClockFreq+0x74>
    sysclockfreq = HSI_VALUE;
 800a8ac:	4803      	ldr	r0, [pc, #12]	; (800a8bc <HAL_RCC_GetSysClockFreq+0xa4>)
}
 800a8ae:	4770      	bx	lr
 800a8b0:	40021000 	.word	0x40021000
 800a8b4:	080177b8 	.word	0x080177b8
 800a8b8:	007a1200 	.word	0x007a1200
 800a8bc:	00f42400 	.word	0x00f42400

0800a8c0 <HAL_RCC_OscConfig>:
{
 800a8c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 800a8c4:	4605      	mov	r5, r0
 800a8c6:	b918      	cbnz	r0, 800a8d0 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 800a8c8:	2001      	movs	r0, #1
}
 800a8ca:	b003      	add	sp, #12
 800a8cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800a8d0:	6803      	ldr	r3, [r0, #0]
 800a8d2:	b133      	cbz	r3, 800a8e2 <HAL_RCC_OscConfig+0x22>
 800a8d4:	06da      	lsls	r2, r3, #27
 800a8d6:	d104      	bne.n	800a8e2 <HAL_RCC_OscConfig+0x22>
 800a8d8:	f240 11ad 	movw	r1, #429	; 0x1ad
 800a8dc:	48a2      	ldr	r0, [pc, #648]	; (800ab68 <HAL_RCC_OscConfig+0x2a8>)
 800a8de:	f004 fc47 	bl	800f170 <assert_failed>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a8e2:	4ca2      	ldr	r4, [pc, #648]	; (800ab6c <HAL_RCC_OscConfig+0x2ac>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a8e4:	682b      	ldr	r3, [r5, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a8e6:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a8e8:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a8ea:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a8ec:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a8f0:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a8f4:	d559      	bpl.n	800a9aa <HAL_RCC_OscConfig+0xea>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 800a8f6:	69ab      	ldr	r3, [r5, #24]
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	d904      	bls.n	800a906 <HAL_RCC_OscConfig+0x46>
 800a8fc:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 800a900:	4899      	ldr	r0, [pc, #612]	; (800ab68 <HAL_RCC_OscConfig+0x2a8>)
 800a902:	f004 fc35 	bl	800f170 <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 800a906:	69eb      	ldr	r3, [r5, #28]
 800a908:	2bff      	cmp	r3, #255	; 0xff
 800a90a:	d904      	bls.n	800a916 <HAL_RCC_OscConfig+0x56>
 800a90c:	f240 11b7 	movw	r1, #439	; 0x1b7
 800a910:	4895      	ldr	r0, [pc, #596]	; (800ab68 <HAL_RCC_OscConfig+0x2a8>)
 800a912:	f004 fc2d 	bl	800f170 <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 800a916:	6a2b      	ldr	r3, [r5, #32]
 800a918:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800a91c:	d008      	beq.n	800a930 <HAL_RCC_OscConfig+0x70>
 800a91e:	2b40      	cmp	r3, #64	; 0x40
 800a920:	d006      	beq.n	800a930 <HAL_RCC_OscConfig+0x70>
 800a922:	2b80      	cmp	r3, #128	; 0x80
 800a924:	d004      	beq.n	800a930 <HAL_RCC_OscConfig+0x70>
 800a926:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 800a92a:	488f      	ldr	r0, [pc, #572]	; (800ab68 <HAL_RCC_OscConfig+0x2a8>)
 800a92c:	f004 fc20 	bl	800f170 <assert_failed>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a930:	b11e      	cbz	r6, 800a93a <HAL_RCC_OscConfig+0x7a>
 800a932:	2e0c      	cmp	r6, #12
 800a934:	d16b      	bne.n	800aa0e <HAL_RCC_OscConfig+0x14e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800a936:	2f01      	cmp	r7, #1
 800a938:	d169      	bne.n	800aa0e <HAL_RCC_OscConfig+0x14e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a93a:	6823      	ldr	r3, [r4, #0]
 800a93c:	0798      	lsls	r0, r3, #30
 800a93e:	d502      	bpl.n	800a946 <HAL_RCC_OscConfig+0x86>
 800a940:	69ab      	ldr	r3, [r5, #24]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d0c0      	beq.n	800a8c8 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a946:	6823      	ldr	r3, [r4, #0]
 800a948:	6a28      	ldr	r0, [r5, #32]
 800a94a:	0719      	lsls	r1, r3, #28
 800a94c:	bf56      	itet	pl
 800a94e:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 800a952:	6823      	ldrmi	r3, [r4, #0]
 800a954:	091b      	lsrpl	r3, r3, #4
 800a956:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a95a:	4283      	cmp	r3, r0
 800a95c:	d242      	bcs.n	800a9e4 <HAL_RCC_OscConfig+0x124>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a95e:	f7ff ff19 	bl	800a794 <RCC_SetFlashLatencyFromMSIRange>
 800a962:	2800      	cmp	r0, #0
 800a964:	d1b0      	bne.n	800a8c8 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a966:	6823      	ldr	r3, [r4, #0]
 800a968:	f043 0308 	orr.w	r3, r3, #8
 800a96c:	6023      	str	r3, [r4, #0]
 800a96e:	6823      	ldr	r3, [r4, #0]
 800a970:	6a2a      	ldr	r2, [r5, #32]
 800a972:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a976:	4313      	orrs	r3, r2
 800a978:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a97a:	6863      	ldr	r3, [r4, #4]
 800a97c:	69ea      	ldr	r2, [r5, #28]
 800a97e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a982:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a986:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a988:	f7ff ff46 	bl	800a818 <HAL_RCC_GetSysClockFreq>
 800a98c:	68a3      	ldr	r3, [r4, #8]
 800a98e:	4a78      	ldr	r2, [pc, #480]	; (800ab70 <HAL_RCC_OscConfig+0x2b0>)
 800a990:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a994:	5cd3      	ldrb	r3, [r2, r3]
 800a996:	f003 031f 	and.w	r3, r3, #31
 800a99a:	40d8      	lsrs	r0, r3
 800a99c:	4b75      	ldr	r3, [pc, #468]	; (800ab74 <HAL_RCC_OscConfig+0x2b4>)
 800a99e:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800a9a0:	2000      	movs	r0, #0
 800a9a2:	f7fd fdb3 	bl	800850c <HAL_InitTick>
        if(status != HAL_OK)
 800a9a6:	2800      	cmp	r0, #0
 800a9a8:	d18f      	bne.n	800a8ca <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a9aa:	682b      	ldr	r3, [r5, #0]
 800a9ac:	07d8      	lsls	r0, r3, #31
 800a9ae:	d465      	bmi.n	800aa7c <HAL_RCC_OscConfig+0x1bc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a9b0:	682b      	ldr	r3, [r5, #0]
 800a9b2:	0799      	lsls	r1, r3, #30
 800a9b4:	f100 80b1 	bmi.w	800ab1a <HAL_RCC_OscConfig+0x25a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a9b8:	682b      	ldr	r3, [r5, #0]
 800a9ba:	0718      	lsls	r0, r3, #28
 800a9bc:	f100 80ff 	bmi.w	800abbe <HAL_RCC_OscConfig+0x2fe>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a9c0:	682b      	ldr	r3, [r5, #0]
 800a9c2:	0759      	lsls	r1, r3, #29
 800a9c4:	f100 812d 	bmi.w	800ac22 <HAL_RCC_OscConfig+0x362>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800a9c8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800a9ca:	2b02      	cmp	r3, #2
 800a9cc:	d904      	bls.n	800a9d8 <HAL_RCC_OscConfig+0x118>
 800a9ce:	f240 3175 	movw	r1, #885	; 0x375
 800a9d2:	4865      	ldr	r0, [pc, #404]	; (800ab68 <HAL_RCC_OscConfig+0x2a8>)
 800a9d4:	f004 fbcc 	bl	800f170 <assert_failed>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a9d8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	f040 8198 	bne.w	800ad10 <HAL_RCC_OscConfig+0x450>
  return HAL_OK;
 800a9e0:	2000      	movs	r0, #0
 800a9e2:	e772      	b.n	800a8ca <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a9e4:	6823      	ldr	r3, [r4, #0]
 800a9e6:	f043 0308 	orr.w	r3, r3, #8
 800a9ea:	6023      	str	r3, [r4, #0]
 800a9ec:	6823      	ldr	r3, [r4, #0]
 800a9ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a9f2:	4303      	orrs	r3, r0
 800a9f4:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a9f6:	6863      	ldr	r3, [r4, #4]
 800a9f8:	69ea      	ldr	r2, [r5, #28]
 800a9fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a9fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800aa02:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800aa04:	f7ff fec6 	bl	800a794 <RCC_SetFlashLatencyFromMSIRange>
 800aa08:	2800      	cmp	r0, #0
 800aa0a:	d0bd      	beq.n	800a988 <HAL_RCC_OscConfig+0xc8>
 800aa0c:	e75c      	b.n	800a8c8 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800aa0e:	69ab      	ldr	r3, [r5, #24]
 800aa10:	b31b      	cbz	r3, 800aa5a <HAL_RCC_OscConfig+0x19a>
        __HAL_RCC_MSI_ENABLE();
 800aa12:	6823      	ldr	r3, [r4, #0]
 800aa14:	f043 0301 	orr.w	r3, r3, #1
 800aa18:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800aa1a:	f7fd fdad 	bl	8008578 <HAL_GetTick>
 800aa1e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800aa20:	6823      	ldr	r3, [r4, #0]
 800aa22:	079a      	lsls	r2, r3, #30
 800aa24:	d511      	bpl.n	800aa4a <HAL_RCC_OscConfig+0x18a>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800aa26:	6823      	ldr	r3, [r4, #0]
 800aa28:	f043 0308 	orr.w	r3, r3, #8
 800aa2c:	6023      	str	r3, [r4, #0]
 800aa2e:	6823      	ldr	r3, [r4, #0]
 800aa30:	6a2a      	ldr	r2, [r5, #32]
 800aa32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aa36:	4313      	orrs	r3, r2
 800aa38:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800aa3a:	6863      	ldr	r3, [r4, #4]
 800aa3c:	69ea      	ldr	r2, [r5, #28]
 800aa3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aa42:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800aa46:	6063      	str	r3, [r4, #4]
 800aa48:	e7af      	b.n	800a9aa <HAL_RCC_OscConfig+0xea>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800aa4a:	f7fd fd95 	bl	8008578 <HAL_GetTick>
 800aa4e:	eba0 0008 	sub.w	r0, r0, r8
 800aa52:	2802      	cmp	r0, #2
 800aa54:	d9e4      	bls.n	800aa20 <HAL_RCC_OscConfig+0x160>
            return HAL_TIMEOUT;
 800aa56:	2003      	movs	r0, #3
 800aa58:	e737      	b.n	800a8ca <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 800aa5a:	6823      	ldr	r3, [r4, #0]
 800aa5c:	f023 0301 	bic.w	r3, r3, #1
 800aa60:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800aa62:	f7fd fd89 	bl	8008578 <HAL_GetTick>
 800aa66:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800aa68:	6823      	ldr	r3, [r4, #0]
 800aa6a:	079b      	lsls	r3, r3, #30
 800aa6c:	d59d      	bpl.n	800a9aa <HAL_RCC_OscConfig+0xea>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800aa6e:	f7fd fd83 	bl	8008578 <HAL_GetTick>
 800aa72:	eba0 0008 	sub.w	r0, r0, r8
 800aa76:	2802      	cmp	r0, #2
 800aa78:	d9f6      	bls.n	800aa68 <HAL_RCC_OscConfig+0x1a8>
 800aa7a:	e7ec      	b.n	800aa56 <HAL_RCC_OscConfig+0x196>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800aa7c:	686b      	ldr	r3, [r5, #4]
 800aa7e:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 800aa82:	d007      	beq.n	800aa94 <HAL_RCC_OscConfig+0x1d4>
 800aa84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aa88:	d004      	beq.n	800aa94 <HAL_RCC_OscConfig+0x1d4>
 800aa8a:	f44f 7108 	mov.w	r1, #544	; 0x220
 800aa8e:	4836      	ldr	r0, [pc, #216]	; (800ab68 <HAL_RCC_OscConfig+0x2a8>)
 800aa90:	f004 fb6e 	bl	800f170 <assert_failed>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800aa94:	2e08      	cmp	r6, #8
 800aa96:	d003      	beq.n	800aaa0 <HAL_RCC_OscConfig+0x1e0>
 800aa98:	2e0c      	cmp	r6, #12
 800aa9a:	d108      	bne.n	800aaae <HAL_RCC_OscConfig+0x1ee>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 800aa9c:	2f03      	cmp	r7, #3
 800aa9e:	d106      	bne.n	800aaae <HAL_RCC_OscConfig+0x1ee>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aaa0:	6823      	ldr	r3, [r4, #0]
 800aaa2:	039a      	lsls	r2, r3, #14
 800aaa4:	d584      	bpl.n	800a9b0 <HAL_RCC_OscConfig+0xf0>
 800aaa6:	686b      	ldr	r3, [r5, #4]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d181      	bne.n	800a9b0 <HAL_RCC_OscConfig+0xf0>
 800aaac:	e70c      	b.n	800a8c8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aaae:	686b      	ldr	r3, [r5, #4]
 800aab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aab4:	d111      	bne.n	800aada <HAL_RCC_OscConfig+0x21a>
 800aab6:	6823      	ldr	r3, [r4, #0]
 800aab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aabc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800aabe:	f7fd fd5b 	bl	8008578 <HAL_GetTick>
 800aac2:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800aac4:	6823      	ldr	r3, [r4, #0]
 800aac6:	039b      	lsls	r3, r3, #14
 800aac8:	f53f af72 	bmi.w	800a9b0 <HAL_RCC_OscConfig+0xf0>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aacc:	f7fd fd54 	bl	8008578 <HAL_GetTick>
 800aad0:	eba0 0008 	sub.w	r0, r0, r8
 800aad4:	2864      	cmp	r0, #100	; 0x64
 800aad6:	d9f5      	bls.n	800aac4 <HAL_RCC_OscConfig+0x204>
 800aad8:	e7bd      	b.n	800aa56 <HAL_RCC_OscConfig+0x196>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aada:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aade:	d104      	bne.n	800aaea <HAL_RCC_OscConfig+0x22a>
 800aae0:	6823      	ldr	r3, [r4, #0]
 800aae2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aae6:	6023      	str	r3, [r4, #0]
 800aae8:	e7e5      	b.n	800aab6 <HAL_RCC_OscConfig+0x1f6>
 800aaea:	6822      	ldr	r2, [r4, #0]
 800aaec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800aaf0:	6022      	str	r2, [r4, #0]
 800aaf2:	6822      	ldr	r2, [r4, #0]
 800aaf4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800aaf8:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d1df      	bne.n	800aabe <HAL_RCC_OscConfig+0x1fe>
        tickstart = HAL_GetTick();
 800aafe:	f7fd fd3b 	bl	8008578 <HAL_GetTick>
 800ab02:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ab04:	6823      	ldr	r3, [r4, #0]
 800ab06:	0398      	lsls	r0, r3, #14
 800ab08:	f57f af52 	bpl.w	800a9b0 <HAL_RCC_OscConfig+0xf0>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ab0c:	f7fd fd34 	bl	8008578 <HAL_GetTick>
 800ab10:	eba0 0008 	sub.w	r0, r0, r8
 800ab14:	2864      	cmp	r0, #100	; 0x64
 800ab16:	d9f5      	bls.n	800ab04 <HAL_RCC_OscConfig+0x244>
 800ab18:	e79d      	b.n	800aa56 <HAL_RCC_OscConfig+0x196>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800ab1a:	68eb      	ldr	r3, [r5, #12]
 800ab1c:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 800ab20:	d004      	beq.n	800ab2c <HAL_RCC_OscConfig+0x26c>
 800ab22:	f240 2153 	movw	r1, #595	; 0x253
 800ab26:	4810      	ldr	r0, [pc, #64]	; (800ab68 <HAL_RCC_OscConfig+0x2a8>)
 800ab28:	f004 fb22 	bl	800f170 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800ab2c:	692b      	ldr	r3, [r5, #16]
 800ab2e:	2b1f      	cmp	r3, #31
 800ab30:	d904      	bls.n	800ab3c <HAL_RCC_OscConfig+0x27c>
 800ab32:	f44f 7115 	mov.w	r1, #596	; 0x254
 800ab36:	480c      	ldr	r0, [pc, #48]	; (800ab68 <HAL_RCC_OscConfig+0x2a8>)
 800ab38:	f004 fb1a 	bl	800f170 <assert_failed>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800ab3c:	2e04      	cmp	r6, #4
 800ab3e:	d003      	beq.n	800ab48 <HAL_RCC_OscConfig+0x288>
 800ab40:	2e0c      	cmp	r6, #12
 800ab42:	d119      	bne.n	800ab78 <HAL_RCC_OscConfig+0x2b8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 800ab44:	2f02      	cmp	r7, #2
 800ab46:	d117      	bne.n	800ab78 <HAL_RCC_OscConfig+0x2b8>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ab48:	6823      	ldr	r3, [r4, #0]
 800ab4a:	0559      	lsls	r1, r3, #21
 800ab4c:	d503      	bpl.n	800ab56 <HAL_RCC_OscConfig+0x296>
 800ab4e:	68eb      	ldr	r3, [r5, #12]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	f43f aeb9 	beq.w	800a8c8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab56:	6863      	ldr	r3, [r4, #4]
 800ab58:	692a      	ldr	r2, [r5, #16]
 800ab5a:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800ab5e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ab62:	6063      	str	r3, [r4, #4]
 800ab64:	e728      	b.n	800a9b8 <HAL_RCC_OscConfig+0xf8>
 800ab66:	bf00      	nop
 800ab68:	0801766f 	.word	0x0801766f
 800ab6c:	40021000 	.word	0x40021000
 800ab70:	0801779f 	.word	0x0801779f
 800ab74:	20000004 	.word	0x20000004
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ab78:	68eb      	ldr	r3, [r5, #12]
 800ab7a:	b17b      	cbz	r3, 800ab9c <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_HSI_ENABLE();
 800ab7c:	6823      	ldr	r3, [r4, #0]
 800ab7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab82:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800ab84:	f7fd fcf8 	bl	8008578 <HAL_GetTick>
 800ab88:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ab8a:	6823      	ldr	r3, [r4, #0]
 800ab8c:	055a      	lsls	r2, r3, #21
 800ab8e:	d4e2      	bmi.n	800ab56 <HAL_RCC_OscConfig+0x296>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ab90:	f7fd fcf2 	bl	8008578 <HAL_GetTick>
 800ab94:	1bc0      	subs	r0, r0, r7
 800ab96:	2802      	cmp	r0, #2
 800ab98:	d9f7      	bls.n	800ab8a <HAL_RCC_OscConfig+0x2ca>
 800ab9a:	e75c      	b.n	800aa56 <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_HSI_DISABLE();
 800ab9c:	6823      	ldr	r3, [r4, #0]
 800ab9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aba2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800aba4:	f7fd fce8 	bl	8008578 <HAL_GetTick>
 800aba8:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800abaa:	6823      	ldr	r3, [r4, #0]
 800abac:	055b      	lsls	r3, r3, #21
 800abae:	f57f af03 	bpl.w	800a9b8 <HAL_RCC_OscConfig+0xf8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800abb2:	f7fd fce1 	bl	8008578 <HAL_GetTick>
 800abb6:	1bc0      	subs	r0, r0, r7
 800abb8:	2802      	cmp	r0, #2
 800abba:	d9f6      	bls.n	800abaa <HAL_RCC_OscConfig+0x2ea>
 800abbc:	e74b      	b.n	800aa56 <HAL_RCC_OscConfig+0x196>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800abbe:	696b      	ldr	r3, [r5, #20]
 800abc0:	2b01      	cmp	r3, #1
 800abc2:	d904      	bls.n	800abce <HAL_RCC_OscConfig+0x30e>
 800abc4:	f44f 7125 	mov.w	r1, #660	; 0x294
 800abc8:	48a0      	ldr	r0, [pc, #640]	; (800ae4c <HAL_RCC_OscConfig+0x58c>)
 800abca:	f004 fad1 	bl	800f170 <assert_failed>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800abce:	696b      	ldr	r3, [r5, #20]
 800abd0:	b19b      	cbz	r3, 800abfa <HAL_RCC_OscConfig+0x33a>
      __HAL_RCC_LSI_ENABLE();
 800abd2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800abd6:	f043 0301 	orr.w	r3, r3, #1
 800abda:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800abde:	f7fd fccb 	bl	8008578 <HAL_GetTick>
 800abe2:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800abe4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800abe8:	079a      	lsls	r2, r3, #30
 800abea:	f53f aee9 	bmi.w	800a9c0 <HAL_RCC_OscConfig+0x100>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800abee:	f7fd fcc3 	bl	8008578 <HAL_GetTick>
 800abf2:	1bc0      	subs	r0, r0, r7
 800abf4:	2802      	cmp	r0, #2
 800abf6:	d9f5      	bls.n	800abe4 <HAL_RCC_OscConfig+0x324>
 800abf8:	e72d      	b.n	800aa56 <HAL_RCC_OscConfig+0x196>
      __HAL_RCC_LSI_DISABLE();
 800abfa:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800abfe:	f023 0301 	bic.w	r3, r3, #1
 800ac02:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800ac06:	f7fd fcb7 	bl	8008578 <HAL_GetTick>
 800ac0a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ac0c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800ac10:	079b      	lsls	r3, r3, #30
 800ac12:	f57f aed5 	bpl.w	800a9c0 <HAL_RCC_OscConfig+0x100>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ac16:	f7fd fcaf 	bl	8008578 <HAL_GetTick>
 800ac1a:	1bc0      	subs	r0, r0, r7
 800ac1c:	2802      	cmp	r0, #2
 800ac1e:	d9f5      	bls.n	800ac0c <HAL_RCC_OscConfig+0x34c>
 800ac20:	e719      	b.n	800aa56 <HAL_RCC_OscConfig+0x196>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800ac22:	68ab      	ldr	r3, [r5, #8]
 800ac24:	2b01      	cmp	r3, #1
 800ac26:	d906      	bls.n	800ac36 <HAL_RCC_OscConfig+0x376>
 800ac28:	2b05      	cmp	r3, #5
 800ac2a:	d004      	beq.n	800ac36 <HAL_RCC_OscConfig+0x376>
 800ac2c:	f240 21e7 	movw	r1, #743	; 0x2e7
 800ac30:	4886      	ldr	r0, [pc, #536]	; (800ae4c <HAL_RCC_OscConfig+0x58c>)
 800ac32:	f004 fa9d 	bl	800f170 <assert_failed>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800ac36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ac38:	00df      	lsls	r7, r3, #3
 800ac3a:	d429      	bmi.n	800ac90 <HAL_RCC_OscConfig+0x3d0>
      __HAL_RCC_PWR_CLK_ENABLE();
 800ac3c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ac3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac42:	65a3      	str	r3, [r4, #88]	; 0x58
 800ac44:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ac46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac4a:	9301      	str	r3, [sp, #4]
 800ac4c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800ac4e:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ac52:	4f7f      	ldr	r7, [pc, #508]	; (800ae50 <HAL_RCC_OscConfig+0x590>)
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	05d8      	lsls	r0, r3, #23
 800ac58:	d51d      	bpl.n	800ac96 <HAL_RCC_OscConfig+0x3d6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ac5a:	68ab      	ldr	r3, [r5, #8]
 800ac5c:	2b01      	cmp	r3, #1
 800ac5e:	d12b      	bne.n	800acb8 <HAL_RCC_OscConfig+0x3f8>
 800ac60:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800ac64:	f043 0301 	orr.w	r3, r3, #1
 800ac68:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 800ac6c:	f7fd fc84 	bl	8008578 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac70:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800ac74:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ac76:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800ac7a:	079a      	lsls	r2, r3, #30
 800ac7c:	d542      	bpl.n	800ad04 <HAL_RCC_OscConfig+0x444>
    if(pwrclkchanged == SET)
 800ac7e:	f1b8 0f00 	cmp.w	r8, #0
 800ac82:	f43f aea1 	beq.w	800a9c8 <HAL_RCC_OscConfig+0x108>
      __HAL_RCC_PWR_CLK_DISABLE();
 800ac86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ac88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ac8c:	65a3      	str	r3, [r4, #88]	; 0x58
 800ac8e:	e69b      	b.n	800a9c8 <HAL_RCC_OscConfig+0x108>
    FlagStatus       pwrclkchanged = RESET;
 800ac90:	f04f 0800 	mov.w	r8, #0
 800ac94:	e7dd      	b.n	800ac52 <HAL_RCC_OscConfig+0x392>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac9c:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800ac9e:	f7fd fc6b 	bl	8008578 <HAL_GetTick>
 800aca2:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	05d9      	lsls	r1, r3, #23
 800aca8:	d4d7      	bmi.n	800ac5a <HAL_RCC_OscConfig+0x39a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800acaa:	f7fd fc65 	bl	8008578 <HAL_GetTick>
 800acae:	eba0 0009 	sub.w	r0, r0, r9
 800acb2:	2802      	cmp	r0, #2
 800acb4:	d9f6      	bls.n	800aca4 <HAL_RCC_OscConfig+0x3e4>
 800acb6:	e6ce      	b.n	800aa56 <HAL_RCC_OscConfig+0x196>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800acb8:	2b05      	cmp	r3, #5
 800acba:	d106      	bne.n	800acca <HAL_RCC_OscConfig+0x40a>
 800acbc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800acc0:	f043 0304 	orr.w	r3, r3, #4
 800acc4:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800acc8:	e7ca      	b.n	800ac60 <HAL_RCC_OscConfig+0x3a0>
 800acca:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800acce:	f022 0201 	bic.w	r2, r2, #1
 800acd2:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 800acd6:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800acda:	f022 0204 	bic.w	r2, r2, #4
 800acde:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d1c2      	bne.n	800ac6c <HAL_RCC_OscConfig+0x3ac>
      tickstart = HAL_GetTick();
 800ace6:	f7fd fc47 	bl	8008578 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800acea:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800acee:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800acf0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800acf4:	079b      	lsls	r3, r3, #30
 800acf6:	d5c2      	bpl.n	800ac7e <HAL_RCC_OscConfig+0x3be>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800acf8:	f7fd fc3e 	bl	8008578 <HAL_GetTick>
 800acfc:	1bc0      	subs	r0, r0, r7
 800acfe:	4548      	cmp	r0, r9
 800ad00:	d9f6      	bls.n	800acf0 <HAL_RCC_OscConfig+0x430>
 800ad02:	e6a8      	b.n	800aa56 <HAL_RCC_OscConfig+0x196>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad04:	f7fd fc38 	bl	8008578 <HAL_GetTick>
 800ad08:	1bc0      	subs	r0, r0, r7
 800ad0a:	4548      	cmp	r0, r9
 800ad0c:	d9b3      	bls.n	800ac76 <HAL_RCC_OscConfig+0x3b6>
 800ad0e:	e6a2      	b.n	800aa56 <HAL_RCC_OscConfig+0x196>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ad10:	2e0c      	cmp	r6, #12
 800ad12:	f43f add9 	beq.w	800a8c8 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ad16:	2b02      	cmp	r3, #2
 800ad18:	d179      	bne.n	800ae0e <HAL_RCC_OscConfig+0x54e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800ad1a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ad1c:	2b03      	cmp	r3, #3
 800ad1e:	d904      	bls.n	800ad2a <HAL_RCC_OscConfig+0x46a>
 800ad20:	f240 317f 	movw	r1, #895	; 0x37f
 800ad24:	4849      	ldr	r0, [pc, #292]	; (800ae4c <HAL_RCC_OscConfig+0x58c>)
 800ad26:	f004 fa23 	bl	800f170 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800ad2a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800ad2c:	3b01      	subs	r3, #1
 800ad2e:	2b07      	cmp	r3, #7
 800ad30:	d904      	bls.n	800ad3c <HAL_RCC_OscConfig+0x47c>
 800ad32:	f44f 7160 	mov.w	r1, #896	; 0x380
 800ad36:	4845      	ldr	r0, [pc, #276]	; (800ae4c <HAL_RCC_OscConfig+0x58c>)
 800ad38:	f004 fa1a 	bl	800f170 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800ad3c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800ad3e:	3b08      	subs	r3, #8
 800ad40:	2b4e      	cmp	r3, #78	; 0x4e
 800ad42:	d904      	bls.n	800ad4e <HAL_RCC_OscConfig+0x48e>
 800ad44:	f240 3181 	movw	r1, #897	; 0x381
 800ad48:	4840      	ldr	r0, [pc, #256]	; (800ae4c <HAL_RCC_OscConfig+0x58c>)
 800ad4a:	f004 fa11 	bl	800f170 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800ad4e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800ad50:	2b07      	cmp	r3, #7
 800ad52:	d006      	beq.n	800ad62 <HAL_RCC_OscConfig+0x4a2>
 800ad54:	2b11      	cmp	r3, #17
 800ad56:	d004      	beq.n	800ad62 <HAL_RCC_OscConfig+0x4a2>
 800ad58:	f240 3183 	movw	r1, #899	; 0x383
 800ad5c:	483b      	ldr	r0, [pc, #236]	; (800ae4c <HAL_RCC_OscConfig+0x58c>)
 800ad5e:	f004 fa07 	bl	800f170 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800ad62:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800ad64:	2a08      	cmp	r2, #8
 800ad66:	d804      	bhi.n	800ad72 <HAL_RCC_OscConfig+0x4b2>
 800ad68:	f44f 73aa 	mov.w	r3, #340	; 0x154
 800ad6c:	40d3      	lsrs	r3, r2
 800ad6e:	07de      	lsls	r6, r3, #31
 800ad70:	d404      	bmi.n	800ad7c <HAL_RCC_OscConfig+0x4bc>
 800ad72:	f240 3185 	movw	r1, #901	; 0x385
 800ad76:	4835      	ldr	r0, [pc, #212]	; (800ae4c <HAL_RCC_OscConfig+0x58c>)
 800ad78:	f004 f9fa 	bl	800f170 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800ad7c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800ad7e:	2a08      	cmp	r2, #8
 800ad80:	d804      	bhi.n	800ad8c <HAL_RCC_OscConfig+0x4cc>
 800ad82:	f44f 73aa 	mov.w	r3, #340	; 0x154
 800ad86:	40d3      	lsrs	r3, r2
 800ad88:	07d8      	lsls	r0, r3, #31
 800ad8a:	d404      	bmi.n	800ad96 <HAL_RCC_OscConfig+0x4d6>
 800ad8c:	f240 3186 	movw	r1, #902	; 0x386
 800ad90:	482e      	ldr	r0, [pc, #184]	; (800ae4c <HAL_RCC_OscConfig+0x58c>)
 800ad92:	f004 f9ed 	bl	800f170 <assert_failed>
        __HAL_RCC_PLL_DISABLE();
 800ad96:	6823      	ldr	r3, [r4, #0]
 800ad98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ad9c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800ad9e:	f7fd fbeb 	bl	8008578 <HAL_GetTick>
 800ada2:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ada4:	6823      	ldr	r3, [r4, #0]
 800ada6:	0199      	lsls	r1, r3, #6
 800ada8:	d42b      	bmi.n	800ae02 <HAL_RCC_OscConfig+0x542>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800adaa:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800adac:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800adae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800adb2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800adb4:	3a01      	subs	r2, #1
 800adb6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800adba:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800adbc:	0912      	lsrs	r2, r2, #4
 800adbe:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800adc2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800adc4:	0852      	lsrs	r2, r2, #1
 800adc6:	3a01      	subs	r2, #1
 800adc8:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800adcc:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800adce:	0852      	lsrs	r2, r2, #1
 800add0:	3a01      	subs	r2, #1
 800add2:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800add6:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 800add8:	6823      	ldr	r3, [r4, #0]
 800adda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800adde:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ade0:	68e3      	ldr	r3, [r4, #12]
 800ade2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ade6:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 800ade8:	f7fd fbc6 	bl	8008578 <HAL_GetTick>
 800adec:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800adee:	6823      	ldr	r3, [r4, #0]
 800adf0:	019a      	lsls	r2, r3, #6
 800adf2:	f53f adf5 	bmi.w	800a9e0 <HAL_RCC_OscConfig+0x120>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800adf6:	f7fd fbbf 	bl	8008578 <HAL_GetTick>
 800adfa:	1b40      	subs	r0, r0, r5
 800adfc:	2802      	cmp	r0, #2
 800adfe:	d9f6      	bls.n	800adee <HAL_RCC_OscConfig+0x52e>
 800ae00:	e629      	b.n	800aa56 <HAL_RCC_OscConfig+0x196>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae02:	f7fd fbb9 	bl	8008578 <HAL_GetTick>
 800ae06:	1b80      	subs	r0, r0, r6
 800ae08:	2802      	cmp	r0, #2
 800ae0a:	d9cb      	bls.n	800ada4 <HAL_RCC_OscConfig+0x4e4>
 800ae0c:	e623      	b.n	800aa56 <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_PLL_DISABLE();
 800ae0e:	6823      	ldr	r3, [r4, #0]
 800ae10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ae14:	6023      	str	r3, [r4, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800ae16:	6823      	ldr	r3, [r4, #0]
 800ae18:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800ae1c:	bf02      	ittt	eq
 800ae1e:	68e3      	ldreq	r3, [r4, #12]
 800ae20:	f023 0303 	biceq.w	r3, r3, #3
 800ae24:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800ae26:	68e3      	ldr	r3, [r4, #12]
 800ae28:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800ae2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ae30:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 800ae32:	f7fd fba1 	bl	8008578 <HAL_GetTick>
 800ae36:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ae38:	6823      	ldr	r3, [r4, #0]
 800ae3a:	019b      	lsls	r3, r3, #6
 800ae3c:	f57f add0 	bpl.w	800a9e0 <HAL_RCC_OscConfig+0x120>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae40:	f7fd fb9a 	bl	8008578 <HAL_GetTick>
 800ae44:	1b40      	subs	r0, r0, r5
 800ae46:	2802      	cmp	r0, #2
 800ae48:	d9f6      	bls.n	800ae38 <HAL_RCC_OscConfig+0x578>
 800ae4a:	e604      	b.n	800aa56 <HAL_RCC_OscConfig+0x196>
 800ae4c:	0801766f 	.word	0x0801766f
 800ae50:	40007000 	.word	0x40007000

0800ae54 <HAL_RCC_ClockConfig>:
{
 800ae54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae58:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800ae5a:	4604      	mov	r4, r0
 800ae5c:	b910      	cbnz	r0, 800ae64 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800ae5e:	2001      	movs	r0, #1
 800ae60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800ae64:	6803      	ldr	r3, [r0, #0]
 800ae66:	3b01      	subs	r3, #1
 800ae68:	2b0e      	cmp	r3, #14
 800ae6a:	d904      	bls.n	800ae76 <HAL_RCC_ClockConfig+0x22>
 800ae6c:	f240 4125 	movw	r1, #1061	; 0x425
 800ae70:	4868      	ldr	r0, [pc, #416]	; (800b014 <HAL_RCC_ClockConfig+0x1c0>)
 800ae72:	f004 f97d 	bl	800f170 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800ae76:	2d04      	cmp	r5, #4
 800ae78:	d904      	bls.n	800ae84 <HAL_RCC_ClockConfig+0x30>
 800ae7a:	f240 4126 	movw	r1, #1062	; 0x426
 800ae7e:	4865      	ldr	r0, [pc, #404]	; (800b014 <HAL_RCC_ClockConfig+0x1c0>)
 800ae80:	f004 f976 	bl	800f170 <assert_failed>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ae84:	4a64      	ldr	r2, [pc, #400]	; (800b018 <HAL_RCC_ClockConfig+0x1c4>)
 800ae86:	6813      	ldr	r3, [r2, #0]
 800ae88:	f003 0307 	and.w	r3, r3, #7
 800ae8c:	429d      	cmp	r5, r3
 800ae8e:	d83e      	bhi.n	800af0e <HAL_RCC_ClockConfig+0xba>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ae90:	6823      	ldr	r3, [r4, #0]
 800ae92:	07d9      	lsls	r1, r3, #31
 800ae94:	d446      	bmi.n	800af24 <HAL_RCC_ClockConfig+0xd0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ae96:	6823      	ldr	r3, [r4, #0]
 800ae98:	079a      	lsls	r2, r3, #30
 800ae9a:	d478      	bmi.n	800af8e <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ae9c:	4a5e      	ldr	r2, [pc, #376]	; (800b018 <HAL_RCC_ClockConfig+0x1c4>)
 800ae9e:	6813      	ldr	r3, [r2, #0]
 800aea0:	f003 0307 	and.w	r3, r3, #7
 800aea4:	429d      	cmp	r5, r3
 800aea6:	f0c0 8091 	bcc.w	800afcc <HAL_RCC_ClockConfig+0x178>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aeaa:	6823      	ldr	r3, [r4, #0]
 800aeac:	4d5b      	ldr	r5, [pc, #364]	; (800b01c <HAL_RCC_ClockConfig+0x1c8>)
 800aeae:	f013 0f04 	tst.w	r3, #4
 800aeb2:	f040 8097 	bne.w	800afe4 <HAL_RCC_ClockConfig+0x190>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aeb6:	6823      	ldr	r3, [r4, #0]
 800aeb8:	071b      	lsls	r3, r3, #28
 800aeba:	d517      	bpl.n	800aeec <HAL_RCC_ClockConfig+0x98>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800aebc:	6923      	ldr	r3, [r4, #16]
 800aebe:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800aec2:	d00c      	beq.n	800aede <HAL_RCC_ClockConfig+0x8a>
 800aec4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800aec8:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 800aecc:	d007      	beq.n	800aede <HAL_RCC_ClockConfig+0x8a>
 800aece:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800aed2:	d004      	beq.n	800aede <HAL_RCC_ClockConfig+0x8a>
 800aed4:	f240 41bf 	movw	r1, #1215	; 0x4bf
 800aed8:	484e      	ldr	r0, [pc, #312]	; (800b014 <HAL_RCC_ClockConfig+0x1c0>)
 800aeda:	f004 f949 	bl	800f170 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800aede:	68ab      	ldr	r3, [r5, #8]
 800aee0:	6922      	ldr	r2, [r4, #16]
 800aee2:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800aee6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800aeea:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800aeec:	f7ff fc94 	bl	800a818 <HAL_RCC_GetSysClockFreq>
 800aef0:	68ab      	ldr	r3, [r5, #8]
 800aef2:	4a4b      	ldr	r2, [pc, #300]	; (800b020 <HAL_RCC_ClockConfig+0x1cc>)
 800aef4:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 800aef8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800aefc:	5cd3      	ldrb	r3, [r2, r3]
 800aefe:	f003 031f 	and.w	r3, r3, #31
 800af02:	40d8      	lsrs	r0, r3
 800af04:	4b47      	ldr	r3, [pc, #284]	; (800b024 <HAL_RCC_ClockConfig+0x1d0>)
 800af06:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 800af08:	2000      	movs	r0, #0
 800af0a:	f7fd baff 	b.w	800850c <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800af0e:	6813      	ldr	r3, [r2, #0]
 800af10:	f023 0307 	bic.w	r3, r3, #7
 800af14:	432b      	orrs	r3, r5
 800af16:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800af18:	6813      	ldr	r3, [r2, #0]
 800af1a:	f003 0307 	and.w	r3, r3, #7
 800af1e:	429d      	cmp	r5, r3
 800af20:	d19d      	bne.n	800ae5e <HAL_RCC_ClockConfig+0xa>
 800af22:	e7b5      	b.n	800ae90 <HAL_RCC_ClockConfig+0x3c>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800af24:	6863      	ldr	r3, [r4, #4]
 800af26:	2b03      	cmp	r3, #3
 800af28:	d904      	bls.n	800af34 <HAL_RCC_ClockConfig+0xe0>
 800af2a:	f240 413d 	movw	r1, #1085	; 0x43d
 800af2e:	4839      	ldr	r0, [pc, #228]	; (800b014 <HAL_RCC_ClockConfig+0x1c0>)
 800af30:	f004 f91e 	bl	800f170 <assert_failed>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800af34:	6862      	ldr	r2, [r4, #4]
 800af36:	4e39      	ldr	r6, [pc, #228]	; (800b01c <HAL_RCC_ClockConfig+0x1c8>)
 800af38:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800af3a:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800af3c:	d11b      	bne.n	800af76 <HAL_RCC_ClockConfig+0x122>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800af3e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800af42:	d08c      	beq.n	800ae5e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800af44:	68b3      	ldr	r3, [r6, #8]
 800af46:	f023 0303 	bic.w	r3, r3, #3
 800af4a:	4313      	orrs	r3, r2
 800af4c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800af4e:	f7fd fb13 	bl	8008578 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800af52:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800af56:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800af58:	68b3      	ldr	r3, [r6, #8]
 800af5a:	6862      	ldr	r2, [r4, #4]
 800af5c:	f003 030c 	and.w	r3, r3, #12
 800af60:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800af64:	d097      	beq.n	800ae96 <HAL_RCC_ClockConfig+0x42>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800af66:	f7fd fb07 	bl	8008578 <HAL_GetTick>
 800af6a:	1bc0      	subs	r0, r0, r7
 800af6c:	4540      	cmp	r0, r8
 800af6e:	d9f3      	bls.n	800af58 <HAL_RCC_ClockConfig+0x104>
        return HAL_TIMEOUT;
 800af70:	2003      	movs	r0, #3
}
 800af72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800af76:	2a02      	cmp	r2, #2
 800af78:	d102      	bne.n	800af80 <HAL_RCC_ClockConfig+0x12c>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800af7a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800af7e:	e7e0      	b.n	800af42 <HAL_RCC_ClockConfig+0xee>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800af80:	b912      	cbnz	r2, 800af88 <HAL_RCC_ClockConfig+0x134>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800af82:	f013 0f02 	tst.w	r3, #2
 800af86:	e7dc      	b.n	800af42 <HAL_RCC_ClockConfig+0xee>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800af88:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800af8c:	e7d9      	b.n	800af42 <HAL_RCC_ClockConfig+0xee>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800af8e:	68a3      	ldr	r3, [r4, #8]
 800af90:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 800af94:	d012      	beq.n	800afbc <HAL_RCC_ClockConfig+0x168>
 800af96:	f023 0220 	bic.w	r2, r3, #32
 800af9a:	2a90      	cmp	r2, #144	; 0x90
 800af9c:	d00e      	beq.n	800afbc <HAL_RCC_ClockConfig+0x168>
 800af9e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800afa2:	2aa0      	cmp	r2, #160	; 0xa0
 800afa4:	d00a      	beq.n	800afbc <HAL_RCC_ClockConfig+0x168>
 800afa6:	f023 0210 	bic.w	r2, r3, #16
 800afaa:	2ac0      	cmp	r2, #192	; 0xc0
 800afac:	d006      	beq.n	800afbc <HAL_RCC_ClockConfig+0x168>
 800afae:	2bf0      	cmp	r3, #240	; 0xf0
 800afb0:	d004      	beq.n	800afbc <HAL_RCC_ClockConfig+0x168>
 800afb2:	f240 4199 	movw	r1, #1177	; 0x499
 800afb6:	4817      	ldr	r0, [pc, #92]	; (800b014 <HAL_RCC_ClockConfig+0x1c0>)
 800afb8:	f004 f8da 	bl	800f170 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800afbc:	4a17      	ldr	r2, [pc, #92]	; (800b01c <HAL_RCC_ClockConfig+0x1c8>)
 800afbe:	68a1      	ldr	r1, [r4, #8]
 800afc0:	6893      	ldr	r3, [r2, #8]
 800afc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800afc6:	430b      	orrs	r3, r1
 800afc8:	6093      	str	r3, [r2, #8]
 800afca:	e767      	b.n	800ae9c <HAL_RCC_ClockConfig+0x48>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800afcc:	6813      	ldr	r3, [r2, #0]
 800afce:	f023 0307 	bic.w	r3, r3, #7
 800afd2:	432b      	orrs	r3, r5
 800afd4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800afd6:	6813      	ldr	r3, [r2, #0]
 800afd8:	f003 0307 	and.w	r3, r3, #7
 800afdc:	429d      	cmp	r5, r3
 800afde:	f47f af3e 	bne.w	800ae5e <HAL_RCC_ClockConfig+0xa>
 800afe2:	e762      	b.n	800aeaa <HAL_RCC_ClockConfig+0x56>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800afe4:	68e3      	ldr	r3, [r4, #12]
 800afe6:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800afea:	d00c      	beq.n	800b006 <HAL_RCC_ClockConfig+0x1b2>
 800afec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800aff0:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 800aff4:	d007      	beq.n	800b006 <HAL_RCC_ClockConfig+0x1b2>
 800aff6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800affa:	d004      	beq.n	800b006 <HAL_RCC_ClockConfig+0x1b2>
 800affc:	f44f 6197 	mov.w	r1, #1208	; 0x4b8
 800b000:	4804      	ldr	r0, [pc, #16]	; (800b014 <HAL_RCC_ClockConfig+0x1c0>)
 800b002:	f004 f8b5 	bl	800f170 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b006:	68ab      	ldr	r3, [r5, #8]
 800b008:	68e2      	ldr	r2, [r4, #12]
 800b00a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800b00e:	4313      	orrs	r3, r2
 800b010:	60ab      	str	r3, [r5, #8]
 800b012:	e750      	b.n	800aeb6 <HAL_RCC_ClockConfig+0x62>
 800b014:	0801766f 	.word	0x0801766f
 800b018:	40022000 	.word	0x40022000
 800b01c:	40021000 	.word	0x40021000
 800b020:	0801779f 	.word	0x0801779f
 800b024:	20000004 	.word	0x20000004

0800b028 <HAL_RCC_GetHCLKFreq>:
}
 800b028:	4b01      	ldr	r3, [pc, #4]	; (800b030 <HAL_RCC_GetHCLKFreq+0x8>)
 800b02a:	6818      	ldr	r0, [r3, #0]
 800b02c:	4770      	bx	lr
 800b02e:	bf00      	nop
 800b030:	20000004 	.word	0x20000004

0800b034 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b034:	4b05      	ldr	r3, [pc, #20]	; (800b04c <HAL_RCC_GetPCLK1Freq+0x18>)
 800b036:	4a06      	ldr	r2, [pc, #24]	; (800b050 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800b038:	689b      	ldr	r3, [r3, #8]
 800b03a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800b03e:	5cd3      	ldrb	r3, [r2, r3]
 800b040:	4a04      	ldr	r2, [pc, #16]	; (800b054 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b042:	6810      	ldr	r0, [r2, #0]
 800b044:	f003 031f 	and.w	r3, r3, #31
}
 800b048:	40d8      	lsrs	r0, r3
 800b04a:	4770      	bx	lr
 800b04c:	40021000 	.word	0x40021000
 800b050:	080177af 	.word	0x080177af
 800b054:	20000004 	.word	0x20000004

0800b058 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b058:	4b05      	ldr	r3, [pc, #20]	; (800b070 <HAL_RCC_GetPCLK2Freq+0x18>)
 800b05a:	4a06      	ldr	r2, [pc, #24]	; (800b074 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800b05c:	689b      	ldr	r3, [r3, #8]
 800b05e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800b062:	5cd3      	ldrb	r3, [r2, r3]
 800b064:	4a04      	ldr	r2, [pc, #16]	; (800b078 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b066:	6810      	ldr	r0, [r2, #0]
 800b068:	f003 031f 	and.w	r3, r3, #31
}
 800b06c:	40d8      	lsrs	r0, r3
 800b06e:	4770      	bx	lr
 800b070:	40021000 	.word	0x40021000
 800b074:	080177af 	.word	0x080177af
 800b078:	20000004 	.word	0x20000004

0800b07c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800b07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 800b07e:	6803      	ldr	r3, [r0, #0]
 800b080:	2b03      	cmp	r3, #3
{
 800b082:	4604      	mov	r4, r0
 800b084:	460e      	mov	r6, r1
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 800b086:	d904      	bls.n	800b092 <RCCEx_PLLSAI1_Config+0x16>
 800b088:	f640 3144 	movw	r1, #2884	; 0xb44
 800b08c:	4867      	ldr	r0, [pc, #412]	; (800b22c <RCCEx_PLLSAI1_Config+0x1b0>)
 800b08e:	f004 f86f 	bl	800f170 <assert_failed>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 800b092:	6863      	ldr	r3, [r4, #4]
 800b094:	3b01      	subs	r3, #1
 800b096:	2b07      	cmp	r3, #7
 800b098:	d904      	bls.n	800b0a4 <RCCEx_PLLSAI1_Config+0x28>
 800b09a:	f640 3145 	movw	r1, #2885	; 0xb45
 800b09e:	4863      	ldr	r0, [pc, #396]	; (800b22c <RCCEx_PLLSAI1_Config+0x1b0>)
 800b0a0:	f004 f866 	bl	800f170 <assert_failed>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 800b0a4:	68a3      	ldr	r3, [r4, #8]
 800b0a6:	3b08      	subs	r3, #8
 800b0a8:	2b4e      	cmp	r3, #78	; 0x4e
 800b0aa:	d904      	bls.n	800b0b6 <RCCEx_PLLSAI1_Config+0x3a>
 800b0ac:	f640 3146 	movw	r1, #2886	; 0xb46
 800b0b0:	485e      	ldr	r0, [pc, #376]	; (800b22c <RCCEx_PLLSAI1_Config+0x1b0>)
 800b0b2:	f004 f85d 	bl	800f170 <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
 800b0b6:	69a3      	ldr	r3, [r4, #24]
 800b0b8:	4a5d      	ldr	r2, [pc, #372]	; (800b230 <RCCEx_PLLSAI1_Config+0x1b4>)
 800b0ba:	4213      	tst	r3, r2
 800b0bc:	d004      	beq.n	800b0c8 <RCCEx_PLLSAI1_Config+0x4c>
 800b0be:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800b0c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b0c6:	b123      	cbz	r3, 800b0d2 <RCCEx_PLLSAI1_Config+0x56>
 800b0c8:	f640 3147 	movw	r1, #2887	; 0xb47
 800b0cc:	4857      	ldr	r0, [pc, #348]	; (800b22c <RCCEx_PLLSAI1_Config+0x1b0>)
 800b0ce:	f004 f84f 	bl	800f170 <assert_failed>

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b0d2:	4b58      	ldr	r3, [pc, #352]	; (800b234 <RCCEx_PLLSAI1_Config+0x1b8>)
 800b0d4:	6820      	ldr	r0, [r4, #0]
 800b0d6:	68da      	ldr	r2, [r3, #12]
 800b0d8:	f012 0f03 	tst.w	r2, #3
 800b0dc:	461d      	mov	r5, r3
 800b0de:	d036      	beq.n	800b14e <RCCEx_PLLSAI1_Config+0xd2>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800b0e0:	68da      	ldr	r2, [r3, #12]
 800b0e2:	f002 0203 	and.w	r2, r2, #3
 800b0e6:	4282      	cmp	r2, r0
 800b0e8:	d148      	bne.n	800b17c <RCCEx_PLLSAI1_Config+0x100>
       ||
 800b0ea:	2a00      	cmp	r2, #0
 800b0ec:	d046      	beq.n	800b17c <RCCEx_PLLSAI1_Config+0x100>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800b0ee:	68db      	ldr	r3, [r3, #12]
       ||
 800b0f0:	6862      	ldr	r2, [r4, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800b0f2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800b0f6:	3301      	adds	r3, #1
       ||
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d13f      	bne.n	800b17c <RCCEx_PLLSAI1_Config+0x100>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800b0fc:	682b      	ldr	r3, [r5, #0]
 800b0fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b102:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b104:	f7fd fa38 	bl	8008578 <HAL_GetTick>
 800b108:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b10a:	682b      	ldr	r3, [r5, #0]
 800b10c:	0118      	lsls	r0, r3, #4
 800b10e:	d43e      	bmi.n	800b18e <RCCEx_PLLSAI1_Config+0x112>
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b110:	2e00      	cmp	r6, #0
 800b112:	d043      	beq.n	800b19c <RCCEx_PLLSAI1_Config+0x120>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800b114:	2e01      	cmp	r6, #1
 800b116:	d168      	bne.n	800b1ea <RCCEx_PLLSAI1_Config+0x16e>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 800b118:	6922      	ldr	r2, [r4, #16]
 800b11a:	2a08      	cmp	r2, #8
 800b11c:	d804      	bhi.n	800b128 <RCCEx_PLLSAI1_Config+0xac>
 800b11e:	f44f 73aa 	mov.w	r3, #340	; 0x154
 800b122:	40d3      	lsrs	r3, r2
 800b124:	07d9      	lsls	r1, r3, #31
 800b126:	d404      	bmi.n	800b132 <RCCEx_PLLSAI1_Config+0xb6>
 800b128:	f640 31be 	movw	r1, #3006	; 0xbbe
 800b12c:	483f      	ldr	r0, [pc, #252]	; (800b22c <RCCEx_PLLSAI1_Config+0x1b0>)
 800b12e:	f004 f81f 	bl	800f170 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b132:	6923      	ldr	r3, [r4, #16]
 800b134:	692a      	ldr	r2, [r5, #16]
 800b136:	68a0      	ldr	r0, [r4, #8]
 800b138:	085b      	lsrs	r3, r3, #1
 800b13a:	1e59      	subs	r1, r3, #1
 800b13c:	f422 03c0 	bic.w	r3, r2, #6291456	; 0x600000
 800b140:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b144:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800b148:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 800b14c:	e03c      	b.n	800b1c8 <RCCEx_PLLSAI1_Config+0x14c>
    switch(PllSai1->PLLSAI1Source)
 800b14e:	2802      	cmp	r0, #2
 800b150:	d010      	beq.n	800b174 <RCCEx_PLLSAI1_Config+0xf8>
 800b152:	2803      	cmp	r0, #3
 800b154:	d014      	beq.n	800b180 <RCCEx_PLLSAI1_Config+0x104>
 800b156:	2801      	cmp	r0, #1
 800b158:	d110      	bne.n	800b17c <RCCEx_PLLSAI1_Config+0x100>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	079b      	lsls	r3, r3, #30
 800b15e:	d543      	bpl.n	800b1e8 <RCCEx_PLLSAI1_Config+0x16c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800b160:	68eb      	ldr	r3, [r5, #12]
 800b162:	6862      	ldr	r2, [r4, #4]
 800b164:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 800b168:	3a01      	subs	r2, #1
 800b16a:	4318      	orrs	r0, r3
 800b16c:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b170:	60e8      	str	r0, [r5, #12]
 800b172:	e7c3      	b.n	800b0fc <RCCEx_PLLSAI1_Config+0x80>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b17a:	d1f1      	bne.n	800b160 <RCCEx_PLLSAI1_Config+0xe4>
 800b17c:	2001      	movs	r0, #1
 800b17e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b180:	681a      	ldr	r2, [r3, #0]
 800b182:	0397      	lsls	r7, r2, #14
 800b184:	d4ec      	bmi.n	800b160 <RCCEx_PLLSAI1_Config+0xe4>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800b18c:	e7f5      	b.n	800b17a <RCCEx_PLLSAI1_Config+0xfe>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b18e:	f7fd f9f3 	bl	8008578 <HAL_GetTick>
 800b192:	1bc0      	subs	r0, r0, r7
 800b194:	2802      	cmp	r0, #2
 800b196:	d9b8      	bls.n	800b10a <RCCEx_PLLSAI1_Config+0x8e>
        status = HAL_TIMEOUT;
 800b198:	2003      	movs	r0, #3
 800b19a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 800b19c:	68e3      	ldr	r3, [r4, #12]
 800b19e:	2b07      	cmp	r3, #7
 800b1a0:	d006      	beq.n	800b1b0 <RCCEx_PLLSAI1_Config+0x134>
 800b1a2:	2b11      	cmp	r3, #17
 800b1a4:	d004      	beq.n	800b1b0 <RCCEx_PLLSAI1_Config+0x134>
 800b1a6:	f640 319a 	movw	r1, #2970	; 0xb9a
 800b1aa:	4820      	ldr	r0, [pc, #128]	; (800b22c <RCCEx_PLLSAI1_Config+0x1b0>)
 800b1ac:	f003 ffe0 	bl	800f170 <assert_failed>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b1b0:	692b      	ldr	r3, [r5, #16]
 800b1b2:	68a2      	ldr	r2, [r4, #8]
 800b1b4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800b1b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b1c0:	68e2      	ldr	r2, [r4, #12]
 800b1c2:	0912      	lsrs	r2, r2, #4
 800b1c4:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b1c8:	612b      	str	r3, [r5, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800b1ca:	682b      	ldr	r3, [r5, #0]
 800b1cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b1d0:	602b      	str	r3, [r5, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b1d2:	f7fd f9d1 	bl	8008578 <HAL_GetTick>
 800b1d6:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b1d8:	682b      	ldr	r3, [r5, #0]
 800b1da:	011b      	lsls	r3, r3, #4
 800b1dc:	d520      	bpl.n	800b220 <RCCEx_PLLSAI1_Config+0x1a4>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800b1de:	692b      	ldr	r3, [r5, #16]
 800b1e0:	69a2      	ldr	r2, [r4, #24]
 800b1e2:	4313      	orrs	r3, r2
 800b1e4:	612b      	str	r3, [r5, #16]
 800b1e6:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800b1e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 800b1ea:	6962      	ldr	r2, [r4, #20]
 800b1ec:	2a08      	cmp	r2, #8
 800b1ee:	d804      	bhi.n	800b1fa <RCCEx_PLLSAI1_Config+0x17e>
 800b1f0:	f44f 73aa 	mov.w	r3, #340	; 0x154
 800b1f4:	40d3      	lsrs	r3, r2
 800b1f6:	07da      	lsls	r2, r3, #31
 800b1f8:	d404      	bmi.n	800b204 <RCCEx_PLLSAI1_Config+0x188>
 800b1fa:	f44f 613d 	mov.w	r1, #3024	; 0xbd0
 800b1fe:	480b      	ldr	r0, [pc, #44]	; (800b22c <RCCEx_PLLSAI1_Config+0x1b0>)
 800b200:	f003 ffb6 	bl	800f170 <assert_failed>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b204:	6963      	ldr	r3, [r4, #20]
 800b206:	692a      	ldr	r2, [r5, #16]
 800b208:	68a0      	ldr	r0, [r4, #8]
 800b20a:	085b      	lsrs	r3, r3, #1
 800b20c:	1e59      	subs	r1, r3, #1
 800b20e:	f022 63c0 	bic.w	r3, r2, #100663296	; 0x6000000
 800b212:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b216:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800b21a:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 800b21e:	e7d3      	b.n	800b1c8 <RCCEx_PLLSAI1_Config+0x14c>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b220:	f7fd f9aa 	bl	8008578 <HAL_GetTick>
 800b224:	1b80      	subs	r0, r0, r6
 800b226:	2802      	cmp	r0, #2
 800b228:	d9d6      	bls.n	800b1d8 <RCCEx_PLLSAI1_Config+0x15c>
 800b22a:	e7b5      	b.n	800b198 <RCCEx_PLLSAI1_Config+0x11c>
 800b22c:	080176a7 	.word	0x080176a7
 800b230:	01110000 	.word	0x01110000
 800b234:	40021000 	.word	0x40021000

0800b238 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800b238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* check for PLLSAI2 Parameters used to output PLLSAI2CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI2SOURCE(PllSai2->PLLSAI2Source));
 800b23a:	6803      	ldr	r3, [r0, #0]
 800b23c:	2b03      	cmp	r3, #3
{
 800b23e:	4605      	mov	r5, r0
 800b240:	460e      	mov	r6, r1
  assert_param(IS_RCC_PLLSAI2SOURCE(PllSai2->PLLSAI2Source));
 800b242:	d904      	bls.n	800b24e <RCCEx_PLLSAI2_Config+0x16>
 800b244:	f640 4111 	movw	r1, #3089	; 0xc11
 800b248:	4859      	ldr	r0, [pc, #356]	; (800b3b0 <RCCEx_PLLSAI2_Config+0x178>)
 800b24a:	f003 ff91 	bl	800f170 <assert_failed>
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
 800b24e:	686b      	ldr	r3, [r5, #4]
 800b250:	3b01      	subs	r3, #1
 800b252:	2b07      	cmp	r3, #7
 800b254:	d904      	bls.n	800b260 <RCCEx_PLLSAI2_Config+0x28>
 800b256:	f640 4112 	movw	r1, #3090	; 0xc12
 800b25a:	4855      	ldr	r0, [pc, #340]	; (800b3b0 <RCCEx_PLLSAI2_Config+0x178>)
 800b25c:	f003 ff88 	bl	800f170 <assert_failed>
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
 800b260:	68ab      	ldr	r3, [r5, #8]
 800b262:	3b08      	subs	r3, #8
 800b264:	2b4e      	cmp	r3, #78	; 0x4e
 800b266:	d904      	bls.n	800b272 <RCCEx_PLLSAI2_Config+0x3a>
 800b268:	f640 4113 	movw	r1, #3091	; 0xc13
 800b26c:	4850      	ldr	r0, [pc, #320]	; (800b3b0 <RCCEx_PLLSAI2_Config+0x178>)
 800b26e:	f003 ff7f 	bl	800f170 <assert_failed>
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));
 800b272:	696b      	ldr	r3, [r5, #20]
 800b274:	4a4f      	ldr	r2, [pc, #316]	; (800b3b4 <RCCEx_PLLSAI2_Config+0x17c>)
 800b276:	4213      	tst	r3, r2
 800b278:	d004      	beq.n	800b284 <RCCEx_PLLSAI2_Config+0x4c>
 800b27a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b27e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b282:	b123      	cbz	r3, 800b28e <RCCEx_PLLSAI2_Config+0x56>
 800b284:	f640 4114 	movw	r1, #3092	; 0xc14
 800b288:	4849      	ldr	r0, [pc, #292]	; (800b3b0 <RCCEx_PLLSAI2_Config+0x178>)
 800b28a:	f003 ff71 	bl	800f170 <assert_failed>

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b28e:	4b4a      	ldr	r3, [pc, #296]	; (800b3b8 <RCCEx_PLLSAI2_Config+0x180>)
 800b290:	6828      	ldr	r0, [r5, #0]
 800b292:	68da      	ldr	r2, [r3, #12]
 800b294:	f012 0f03 	tst.w	r2, #3
 800b298:	461c      	mov	r4, r3
 800b29a:	d034      	beq.n	800b306 <RCCEx_PLLSAI2_Config+0xce>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800b29c:	68da      	ldr	r2, [r3, #12]
 800b29e:	f002 0203 	and.w	r2, r2, #3
 800b2a2:	4282      	cmp	r2, r0
 800b2a4:	d146      	bne.n	800b334 <RCCEx_PLLSAI2_Config+0xfc>
       ||
 800b2a6:	2a00      	cmp	r2, #0
 800b2a8:	d044      	beq.n	800b334 <RCCEx_PLLSAI2_Config+0xfc>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800b2aa:	68db      	ldr	r3, [r3, #12]
       ||
 800b2ac:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800b2ae:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800b2b2:	3301      	adds	r3, #1
       ||
 800b2b4:	4293      	cmp	r3, r2
 800b2b6:	d13d      	bne.n	800b334 <RCCEx_PLLSAI2_Config+0xfc>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800b2b8:	6823      	ldr	r3, [r4, #0]
 800b2ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b2be:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2c0:	f7fd f95a 	bl	8008578 <HAL_GetTick>
 800b2c4:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b2c6:	6823      	ldr	r3, [r4, #0]
 800b2c8:	0099      	lsls	r1, r3, #2
 800b2ca:	d43c      	bmi.n	800b346 <RCCEx_PLLSAI2_Config+0x10e>
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b2cc:	2e00      	cmp	r6, #0
 800b2ce:	d041      	beq.n	800b354 <RCCEx_PLLSAI2_Config+0x11c>
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
 800b2d0:	692a      	ldr	r2, [r5, #16]
 800b2d2:	2a08      	cmp	r2, #8
 800b2d4:	d804      	bhi.n	800b2e0 <RCCEx_PLLSAI2_Config+0xa8>
 800b2d6:	f44f 73aa 	mov.w	r3, #340	; 0x154
 800b2da:	40d3      	lsrs	r3, r2
 800b2dc:	07da      	lsls	r2, r3, #31
 800b2de:	d404      	bmi.n	800b2ea <RCCEx_PLLSAI2_Config+0xb2>
 800b2e0:	f640 419f 	movw	r1, #3231	; 0xc9f
 800b2e4:	4832      	ldr	r0, [pc, #200]	; (800b3b0 <RCCEx_PLLSAI2_Config+0x178>)
 800b2e6:	f003 ff43 	bl	800f170 <assert_failed>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b2ea:	692b      	ldr	r3, [r5, #16]
 800b2ec:	6962      	ldr	r2, [r4, #20]
 800b2ee:	68a8      	ldr	r0, [r5, #8]
 800b2f0:	085b      	lsrs	r3, r3, #1
 800b2f2:	1e59      	subs	r1, r3, #1
 800b2f4:	f022 63c0 	bic.w	r3, r2, #100663296	; 0x6000000
 800b2f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b2fc:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800b300:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 800b304:	e03c      	b.n	800b380 <RCCEx_PLLSAI2_Config+0x148>
    switch(PllSai2->PLLSAI2Source)
 800b306:	2802      	cmp	r0, #2
 800b308:	d010      	beq.n	800b32c <RCCEx_PLLSAI2_Config+0xf4>
 800b30a:	2803      	cmp	r0, #3
 800b30c:	d014      	beq.n	800b338 <RCCEx_PLLSAI2_Config+0x100>
 800b30e:	2801      	cmp	r0, #1
 800b310:	d110      	bne.n	800b334 <RCCEx_PLLSAI2_Config+0xfc>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	079b      	lsls	r3, r3, #30
 800b316:	d543      	bpl.n	800b3a0 <RCCEx_PLLSAI2_Config+0x168>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800b318:	68e3      	ldr	r3, [r4, #12]
 800b31a:	686a      	ldr	r2, [r5, #4]
 800b31c:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 800b320:	3a01      	subs	r2, #1
 800b322:	4318      	orrs	r0, r3
 800b324:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b328:	60e0      	str	r0, [r4, #12]
 800b32a:	e7c5      	b.n	800b2b8 <RCCEx_PLLSAI2_Config+0x80>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b332:	d1f1      	bne.n	800b318 <RCCEx_PLLSAI2_Config+0xe0>
 800b334:	2001      	movs	r0, #1
 800b336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b338:	681a      	ldr	r2, [r3, #0]
 800b33a:	0397      	lsls	r7, r2, #14
 800b33c:	d4ec      	bmi.n	800b318 <RCCEx_PLLSAI2_Config+0xe0>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800b344:	e7f5      	b.n	800b332 <RCCEx_PLLSAI2_Config+0xfa>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b346:	f7fd f917 	bl	8008578 <HAL_GetTick>
 800b34a:	1bc0      	subs	r0, r0, r7
 800b34c:	2802      	cmp	r0, #2
 800b34e:	d9ba      	bls.n	800b2c6 <RCCEx_PLLSAI2_Config+0x8e>
        status = HAL_TIMEOUT;
 800b350:	2003      	movs	r0, #3
 800b352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
 800b354:	68eb      	ldr	r3, [r5, #12]
 800b356:	2b07      	cmp	r3, #7
 800b358:	d006      	beq.n	800b368 <RCCEx_PLLSAI2_Config+0x130>
 800b35a:	2b11      	cmp	r3, #17
 800b35c:	d004      	beq.n	800b368 <RCCEx_PLLSAI2_Config+0x130>
 800b35e:	f640 4167 	movw	r1, #3175	; 0xc67
 800b362:	4813      	ldr	r0, [pc, #76]	; (800b3b0 <RCCEx_PLLSAI2_Config+0x178>)
 800b364:	f003 ff04 	bl	800f170 <assert_failed>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b368:	6963      	ldr	r3, [r4, #20]
 800b36a:	68aa      	ldr	r2, [r5, #8]
 800b36c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800b370:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b374:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b378:	68ea      	ldr	r2, [r5, #12]
 800b37a:	0912      	lsrs	r2, r2, #4
 800b37c:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b380:	6163      	str	r3, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800b382:	6823      	ldr	r3, [r4, #0]
 800b384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b388:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b38a:	f7fd f8f5 	bl	8008578 <HAL_GetTick>
 800b38e:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b390:	6823      	ldr	r3, [r4, #0]
 800b392:	009b      	lsls	r3, r3, #2
 800b394:	d505      	bpl.n	800b3a2 <RCCEx_PLLSAI2_Config+0x16a>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800b396:	6963      	ldr	r3, [r4, #20]
 800b398:	696a      	ldr	r2, [r5, #20]
 800b39a:	4313      	orrs	r3, r2
 800b39c:	6163      	str	r3, [r4, #20]
 800b39e:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800b3a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b3a2:	f7fd f8e9 	bl	8008578 <HAL_GetTick>
 800b3a6:	1b80      	subs	r0, r0, r6
 800b3a8:	2802      	cmp	r0, #2
 800b3aa:	d9f1      	bls.n	800b390 <RCCEx_PLLSAI2_Config+0x158>
 800b3ac:	e7d0      	b.n	800b350 <RCCEx_PLLSAI2_Config+0x118>
 800b3ae:	bf00      	nop
 800b3b0:	080176a7 	.word	0x080176a7
 800b3b4:	01010000 	.word	0x01010000
 800b3b8:	40021000 	.word	0x40021000

0800b3bc <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800b3bc:	6803      	ldr	r3, [r0, #0]
 800b3be:	f3c3 0313 	ubfx	r3, r3, #0, #20
{
 800b3c2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800b3c6:	4604      	mov	r4, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800b3c8:	b91b      	cbnz	r3, 800b3d2 <HAL_RCCEx_PeriphCLKConfig+0x16>
 800b3ca:	21db      	movs	r1, #219	; 0xdb
 800b3cc:	4865      	ldr	r0, [pc, #404]	; (800b564 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b3ce:	f003 fecf 	bl	800f170 <assert_failed>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b3d2:	6826      	ldr	r6, [r4, #0]
 800b3d4:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
 800b3d8:	d02c      	beq.n	800b434 <HAL_RCCEx_PeriphCLKConfig+0x78>
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 800b3da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b3dc:	f433 0340 	bics.w	r3, r3, #12582912	; 0xc00000
 800b3e0:	d003      	beq.n	800b3ea <HAL_RCCEx_PeriphCLKConfig+0x2e>
 800b3e2:	21e3      	movs	r1, #227	; 0xe3
 800b3e4:	485f      	ldr	r0, [pc, #380]	; (800b564 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b3e6:	f003 fec3 	bl	800f170 <assert_failed>
    switch(PeriphClkInit->Sai1ClockSelection)
 800b3ea:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800b3ec:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800b3f0:	d035      	beq.n	800b45e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800b3f2:	d802      	bhi.n	800b3fa <HAL_RCCEx_PeriphCLKConfig+0x3e>
 800b3f4:	b1c1      	cbz	r1, 800b428 <HAL_RCCEx_PeriphCLKConfig+0x6c>
      ret = HAL_ERROR;
 800b3f6:	2601      	movs	r6, #1
 800b3f8:	e01c      	b.n	800b434 <HAL_RCCEx_PeriphCLKConfig+0x78>
    switch(PeriphClkInit->Sai1ClockSelection)
 800b3fa:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800b3fe:	d00d      	beq.n	800b41c <HAL_RCCEx_PeriphCLKConfig+0x60>
 800b400:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 800b404:	d1f7      	bne.n	800b3f6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b406:	4a58      	ldr	r2, [pc, #352]	; (800b568 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b408:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800b40a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b40e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800b412:	430b      	orrs	r3, r1
 800b414:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800b418:	2600      	movs	r6, #0
 800b41a:	e00b      	b.n	800b434 <HAL_RCCEx_PeriphCLKConfig+0x78>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b41c:	4a52      	ldr	r2, [pc, #328]	; (800b568 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b41e:	68d3      	ldr	r3, [r2, #12]
 800b420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b424:	60d3      	str	r3, [r2, #12]
      break;
 800b426:	e7ee      	b.n	800b406 <HAL_RCCEx_PeriphCLKConfig+0x4a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b428:	1d20      	adds	r0, r4, #4
 800b42a:	f7ff fe27 	bl	800b07c <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800b42e:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800b430:	2800      	cmp	r0, #0
 800b432:	d0e8      	beq.n	800b406 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800b434:	6823      	ldr	r3, [r4, #0]
 800b436:	04db      	lsls	r3, r3, #19
 800b438:	d50f      	bpl.n	800b45a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));
 800b43a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800b43c:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 800b440:	d004      	beq.n	800b44c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b442:	f240 1121 	movw	r1, #289	; 0x121
 800b446:	4847      	ldr	r0, [pc, #284]	; (800b564 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b448:	f003 fe92 	bl	800f170 <assert_failed>
    switch(PeriphClkInit->Sai2ClockSelection)
 800b44c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800b44e:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 800b452:	d07f      	beq.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800b454:	d809      	bhi.n	800b46a <HAL_RCCEx_PeriphCLKConfig+0xae>
 800b456:	b1b1      	cbz	r1, 800b486 <HAL_RCCEx_PeriphCLKConfig+0xca>
      ret = HAL_ERROR;
 800b458:	2601      	movs	r6, #1
 800b45a:	4635      	mov	r5, r6
 800b45c:	e022      	b.n	800b4a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800b45e:	2100      	movs	r1, #0
 800b460:	f104 0020 	add.w	r0, r4, #32
 800b464:	f7ff fee8 	bl	800b238 <RCCEx_PLLSAI2_Config>
 800b468:	e7e1      	b.n	800b42e <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->Sai2ClockSelection)
 800b46a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800b46e:	d004      	beq.n	800b47a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800b470:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 800b474:	d1f0      	bne.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 800b476:	4635      	mov	r5, r6
 800b478:	e009      	b.n	800b48e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b47a:	4a3b      	ldr	r2, [pc, #236]	; (800b568 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b47c:	68d3      	ldr	r3, [r2, #12]
 800b47e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b482:	60d3      	str	r3, [r2, #12]
 800b484:	e7f7      	b.n	800b476 <HAL_RCCEx_PeriphCLKConfig+0xba>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b486:	1d20      	adds	r0, r4, #4
 800b488:	f7ff fdf8 	bl	800b07c <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800b48c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800b48e:	2d00      	cmp	r5, #0
 800b490:	d166      	bne.n	800b560 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b492:	4a35      	ldr	r2, [pc, #212]	; (800b568 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b494:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800b496:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b49a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800b49e:	430b      	orrs	r3, r1
 800b4a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b4a4:	6823      	ldr	r3, [r4, #0]
 800b4a6:	039f      	lsls	r7, r3, #14
 800b4a8:	f140 8210 	bpl.w	800b8cc <HAL_RCCEx_PeriphCLKConfig+0x510>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800b4ac:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b4b0:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 800b4b4:	d004      	beq.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800b4b6:	f44f 71ab 	mov.w	r1, #342	; 0x156
 800b4ba:	482a      	ldr	r0, [pc, #168]	; (800b564 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b4bc:	f003 fe58 	bl	800f170 <assert_failed>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b4c0:	4f29      	ldr	r7, [pc, #164]	; (800b568 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b4c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b4c4:	00d8      	lsls	r0, r3, #3
 800b4c6:	f140 822f 	bpl.w	800b928 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    FlagStatus       pwrclkchanged = RESET;
 800b4ca:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b4ce:	f8df 909c 	ldr.w	r9, [pc, #156]	; 800b56c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
 800b4d2:	f8d9 3000 	ldr.w	r3, [r9]
 800b4d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b4da:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 800b4de:	f7fd f84b 	bl	8008578 <HAL_GetTick>
 800b4e2:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b4e4:	f8d9 3000 	ldr.w	r3, [r9]
 800b4e8:	05d9      	lsls	r1, r3, #23
 800b4ea:	d541      	bpl.n	800b570 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    if(ret == HAL_OK)
 800b4ec:	2d00      	cmp	r5, #0
 800b4ee:	d146      	bne.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b4f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b4f4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800b4f8:	d015      	beq.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 800b4fa:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d011      	beq.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0x16a>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b502:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 800b506:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800b50a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b50e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b512:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b51a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b51e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800b522:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b526:	07da      	lsls	r2, r3, #31
 800b528:	d509      	bpl.n	800b53e <HAL_RCCEx_PeriphCLKConfig+0x182>
        tickstart = HAL_GetTick();
 800b52a:	f7fd f825 	bl	8008578 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b52e:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800b532:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b534:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b538:	079b      	lsls	r3, r3, #30
 800b53a:	f140 81c0 	bpl.w	800b8be <HAL_RCCEx_PeriphCLKConfig+0x502>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b53e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b542:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800b546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b54a:	4313      	orrs	r3, r2
 800b54c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b550:	4635      	mov	r5, r6
 800b552:	e014      	b.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800b554:	2100      	movs	r1, #0
 800b556:	f104 0020 	add.w	r0, r4, #32
 800b55a:	f7ff fe6d 	bl	800b238 <RCCEx_PLLSAI2_Config>
 800b55e:	e795      	b.n	800b48c <HAL_RCCEx_PeriphCLKConfig+0xd0>
 800b560:	462e      	mov	r6, r5
 800b562:	e79f      	b.n	800b4a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800b564:	080176a7 	.word	0x080176a7
 800b568:	40021000 	.word	0x40021000
 800b56c:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b570:	f7fd f802 	bl	8008578 <HAL_GetTick>
 800b574:	eba0 000a 	sub.w	r0, r0, sl
 800b578:	2802      	cmp	r0, #2
 800b57a:	d9b3      	bls.n	800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x128>
        ret = HAL_TIMEOUT;
 800b57c:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 800b57e:	f1b8 0f00 	cmp.w	r8, #0
 800b582:	d003      	beq.n	800b58c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      __HAL_RCC_PWR_CLK_DISABLE();
 800b584:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b586:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b58a:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b58c:	6823      	ldr	r3, [r4, #0]
 800b58e:	07de      	lsls	r6, r3, #31
 800b590:	d510      	bpl.n	800b5b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800b592:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b594:	2b03      	cmp	r3, #3
 800b596:	d904      	bls.n	800b5a2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
 800b598:	f240 11ab 	movw	r1, #427	; 0x1ab
 800b59c:	48b8      	ldr	r0, [pc, #736]	; (800b880 <HAL_RCCEx_PeriphCLKConfig+0x4c4>)
 800b59e:	f003 fde7 	bl	800f170 <assert_failed>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b5a2:	4ab8      	ldr	r2, [pc, #736]	; (800b884 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
 800b5a4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b5a6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b5aa:	f023 0303 	bic.w	r3, r3, #3
 800b5ae:	430b      	orrs	r3, r1
 800b5b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b5b4:	6823      	ldr	r3, [r4, #0]
 800b5b6:	0798      	lsls	r0, r3, #30
 800b5b8:	d511      	bpl.n	800b5de <HAL_RCCEx_PeriphCLKConfig+0x222>
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800b5ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b5bc:	f033 030c 	bics.w	r3, r3, #12
 800b5c0:	d004      	beq.n	800b5cc <HAL_RCCEx_PeriphCLKConfig+0x210>
 800b5c2:	f240 11b5 	movw	r1, #437	; 0x1b5
 800b5c6:	48ae      	ldr	r0, [pc, #696]	; (800b880 <HAL_RCCEx_PeriphCLKConfig+0x4c4>)
 800b5c8:	f003 fdd2 	bl	800f170 <assert_failed>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b5cc:	4aad      	ldr	r2, [pc, #692]	; (800b884 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
 800b5ce:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b5d0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b5d4:	f023 030c 	bic.w	r3, r3, #12
 800b5d8:	430b      	orrs	r3, r1
 800b5da:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b5de:	6823      	ldr	r3, [r4, #0]
 800b5e0:	0759      	lsls	r1, r3, #29
 800b5e2:	d511      	bpl.n	800b608 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800b5e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b5e6:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800b5ea:	d004      	beq.n	800b5f6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
 800b5ec:	f240 11c1 	movw	r1, #449	; 0x1c1
 800b5f0:	48a3      	ldr	r0, [pc, #652]	; (800b880 <HAL_RCCEx_PeriphCLKConfig+0x4c4>)
 800b5f2:	f003 fdbd 	bl	800f170 <assert_failed>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b5f6:	4aa3      	ldr	r2, [pc, #652]	; (800b884 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
 800b5f8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b5fa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b5fe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800b602:	430b      	orrs	r3, r1
 800b604:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b608:	6823      	ldr	r3, [r4, #0]
 800b60a:	071a      	lsls	r2, r3, #28
 800b60c:	d511      	bpl.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0x276>
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800b60e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b610:	f033 03c0 	bics.w	r3, r3, #192	; 0xc0
 800b614:	d004      	beq.n	800b620 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800b616:	f240 11cf 	movw	r1, #463	; 0x1cf
 800b61a:	4899      	ldr	r0, [pc, #612]	; (800b880 <HAL_RCCEx_PeriphCLKConfig+0x4c4>)
 800b61c:	f003 fda8 	bl	800f170 <assert_failed>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b620:	4a98      	ldr	r2, [pc, #608]	; (800b884 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
 800b622:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b624:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b628:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b62c:	430b      	orrs	r3, r1
 800b62e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b632:	6823      	ldr	r3, [r4, #0]
 800b634:	06db      	lsls	r3, r3, #27
 800b636:	d511      	bpl.n	800b65c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800b638:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800b63a:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 800b63e:	d004      	beq.n	800b64a <HAL_RCCEx_PeriphCLKConfig+0x28e>
 800b640:	f240 11dd 	movw	r1, #477	; 0x1dd
 800b644:	488e      	ldr	r0, [pc, #568]	; (800b880 <HAL_RCCEx_PeriphCLKConfig+0x4c4>)
 800b646:	f003 fd93 	bl	800f170 <assert_failed>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b64a:	4a8e      	ldr	r2, [pc, #568]	; (800b884 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
 800b64c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b64e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b652:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b656:	430b      	orrs	r3, r1
 800b658:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b65c:	6823      	ldr	r3, [r4, #0]
 800b65e:	069f      	lsls	r7, r3, #26
 800b660:	d511      	bpl.n	800b686 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 800b662:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800b664:	f433 6340 	bics.w	r3, r3, #3072	; 0xc00
 800b668:	d004      	beq.n	800b674 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800b66a:	f240 11e9 	movw	r1, #489	; 0x1e9
 800b66e:	4884      	ldr	r0, [pc, #528]	; (800b880 <HAL_RCCEx_PeriphCLKConfig+0x4c4>)
 800b670:	f003 fd7e 	bl	800f170 <assert_failed>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b674:	4a83      	ldr	r2, [pc, #524]	; (800b884 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
 800b676:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800b678:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b67c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800b680:	430b      	orrs	r3, r1
 800b682:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b686:	6823      	ldr	r3, [r4, #0]
 800b688:	059e      	lsls	r6, r3, #22
 800b68a:	d511      	bpl.n	800b6b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800b68c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800b68e:	f433 2340 	bics.w	r3, r3, #786432	; 0xc0000
 800b692:	d004      	beq.n	800b69e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800b694:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800b698:	4879      	ldr	r0, [pc, #484]	; (800b880 <HAL_RCCEx_PeriphCLKConfig+0x4c4>)
 800b69a:	f003 fd69 	bl	800f170 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b69e:	4a79      	ldr	r2, [pc, #484]	; (800b884 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
 800b6a0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b6a2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b6a6:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800b6aa:	430b      	orrs	r3, r1
 800b6ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b6b0:	6823      	ldr	r3, [r4, #0]
 800b6b2:	0558      	lsls	r0, r3, #21
 800b6b4:	d511      	bpl.n	800b6da <HAL_RCCEx_PeriphCLKConfig+0x31e>
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 800b6b6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b6b8:	f433 1340 	bics.w	r3, r3, #3145728	; 0x300000
 800b6bc:	d004      	beq.n	800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800b6be:	f240 11f9 	movw	r1, #505	; 0x1f9
 800b6c2:	486f      	ldr	r0, [pc, #444]	; (800b880 <HAL_RCCEx_PeriphCLKConfig+0x4c4>)
 800b6c4:	f003 fd54 	bl	800f170 <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b6c8:	4a6e      	ldr	r2, [pc, #440]	; (800b884 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
 800b6ca:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800b6cc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b6d0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800b6d4:	430b      	orrs	r3, r1
 800b6d6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b6da:	6823      	ldr	r3, [r4, #0]
 800b6dc:	0659      	lsls	r1, r3, #25
 800b6de:	d514      	bpl.n	800b70a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800b6e0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b6e2:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 800b6e6:	d007      	beq.n	800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b6e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b6ec:	d004      	beq.n	800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b6ee:	f240 2101 	movw	r1, #513	; 0x201
 800b6f2:	4863      	ldr	r0, [pc, #396]	; (800b880 <HAL_RCCEx_PeriphCLKConfig+0x4c4>)
 800b6f4:	f003 fd3c 	bl	800f170 <assert_failed>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b6f8:	4a62      	ldr	r2, [pc, #392]	; (800b884 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
 800b6fa:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800b6fc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b700:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800b704:	430b      	orrs	r3, r1
 800b706:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b70a:	6823      	ldr	r3, [r4, #0]
 800b70c:	061a      	lsls	r2, r3, #24
 800b70e:	d514      	bpl.n	800b73a <HAL_RCCEx_PeriphCLKConfig+0x37e>
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800b710:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b712:	f433 4280 	bics.w	r2, r3, #16384	; 0x4000
 800b716:	d007      	beq.n	800b728 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800b718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b71c:	d004      	beq.n	800b728 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800b71e:	f240 210d 	movw	r1, #525	; 0x20d
 800b722:	4857      	ldr	r0, [pc, #348]	; (800b880 <HAL_RCCEx_PeriphCLKConfig+0x4c4>)
 800b724:	f003 fd24 	bl	800f170 <assert_failed>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b728:	4a56      	ldr	r2, [pc, #344]	; (800b884 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
 800b72a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800b72c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b730:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800b734:	430b      	orrs	r3, r1
 800b736:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b73a:	6823      	ldr	r3, [r4, #0]
 800b73c:	05db      	lsls	r3, r3, #23
 800b73e:	d514      	bpl.n	800b76a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800b740:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b742:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 800b746:	d007      	beq.n	800b758 <HAL_RCCEx_PeriphCLKConfig+0x39c>
 800b748:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b74c:	d004      	beq.n	800b758 <HAL_RCCEx_PeriphCLKConfig+0x39c>
 800b74e:	f240 2119 	movw	r1, #537	; 0x219
 800b752:	484b      	ldr	r0, [pc, #300]	; (800b880 <HAL_RCCEx_PeriphCLKConfig+0x4c4>)
 800b754:	f003 fd0c 	bl	800f170 <assert_failed>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b758:	4a4a      	ldr	r2, [pc, #296]	; (800b884 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
 800b75a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b75c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b760:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800b764:	430b      	orrs	r3, r1
 800b766:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b76a:	6823      	ldr	r3, [r4, #0]
 800b76c:	049f      	lsls	r7, r3, #18
 800b76e:	d519      	bpl.n	800b7a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 800b770:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b772:	f033 6340 	bics.w	r3, r3, #201326592	; 0xc000000
 800b776:	d004      	beq.n	800b782 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 800b778:	f240 2132 	movw	r1, #562	; 0x232
 800b77c:	4840      	ldr	r0, [pc, #256]	; (800b880 <HAL_RCCEx_PeriphCLKConfig+0x4c4>)
 800b77e:	f003 fcf7 	bl	800f170 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b782:	4a40      	ldr	r2, [pc, #256]	; (800b884 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
 800b784:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800b786:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b78a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800b78e:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b790:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b794:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b798:	f040 809a 	bne.w	800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b79c:	68d3      	ldr	r3, [r2, #12]
 800b79e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b7a2:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800b7a4:	6823      	ldr	r3, [r4, #0]
 800b7a6:	031e      	lsls	r6, r3, #12
 800b7a8:	d519      	bpl.n	800b7de <HAL_RCCEx_PeriphCLKConfig+0x422>
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 800b7aa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b7ac:	f033 6340 	bics.w	r3, r3, #201326592	; 0xc000000
 800b7b0:	d004      	beq.n	800b7bc <HAL_RCCEx_PeriphCLKConfig+0x400>
 800b7b2:	f240 2153 	movw	r1, #595	; 0x253
 800b7b6:	4832      	ldr	r0, [pc, #200]	; (800b880 <HAL_RCCEx_PeriphCLKConfig+0x4c4>)
 800b7b8:	f003 fcda 	bl	800f170 <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b7bc:	4a31      	ldr	r2, [pc, #196]	; (800b884 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
 800b7be:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800b7c0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b7c4:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800b7c8:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800b7ca:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b7ce:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800b7d2:	f040 8089 	bne.w	800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b7d6:	68d3      	ldr	r3, [r2, #12]
 800b7d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b7dc:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b7de:	6823      	ldr	r3, [r4, #0]
 800b7e0:	0358      	lsls	r0, r3, #13
 800b7e2:	d518      	bpl.n	800b816 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 800b7e4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800b7e6:	f033 6340 	bics.w	r3, r3, #201326592	; 0xc000000
 800b7ea:	d004      	beq.n	800b7f6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800b7ec:	f44f 711e 	mov.w	r1, #632	; 0x278
 800b7f0:	4823      	ldr	r0, [pc, #140]	; (800b880 <HAL_RCCEx_PeriphCLKConfig+0x4c4>)
 800b7f2:	f003 fcbd 	bl	800f170 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b7f6:	4a23      	ldr	r2, [pc, #140]	; (800b884 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
 800b7f8:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800b7fa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b7fe:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800b802:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b804:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b808:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b80c:	d178      	bne.n	800b900 <HAL_RCCEx_PeriphCLKConfig+0x544>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b80e:	68d3      	ldr	r3, [r2, #12]
 800b810:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b814:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b816:	6823      	ldr	r3, [r4, #0]
 800b818:	0459      	lsls	r1, r3, #17
 800b81a:	d51b      	bpl.n	800b854 <HAL_RCCEx_PeriphCLKConfig+0x498>
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 800b81c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b81e:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 800b822:	d004      	beq.n	800b82e <HAL_RCCEx_PeriphCLKConfig+0x472>
 800b824:	f44f 7126 	mov.w	r1, #664	; 0x298
 800b828:	4815      	ldr	r0, [pc, #84]	; (800b880 <HAL_RCCEx_PeriphCLKConfig+0x4c4>)
 800b82a:	f003 fca1 	bl	800f170 <assert_failed>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b82e:	4915      	ldr	r1, [pc, #84]	; (800b884 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
 800b830:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800b832:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800b836:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800b83a:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b83c:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b840:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b844:	d167      	bne.n	800b916 <HAL_RCCEx_PeriphCLKConfig+0x55a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800b846:	2102      	movs	r1, #2
 800b848:	1d20      	adds	r0, r4, #4
 800b84a:	f7ff fc17 	bl	800b07c <RCCEx_PLLSAI1_Config>
 800b84e:	2800      	cmp	r0, #0
 800b850:	bf18      	it	ne
 800b852:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b854:	6823      	ldr	r3, [r4, #0]
 800b856:	041a      	lsls	r2, r3, #16
 800b858:	d516      	bpl.n	800b888 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 800b85a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800b85c:	f033 4380 	bics.w	r3, r3, #1073741824	; 0x40000000
 800b860:	d004      	beq.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800b862:	f44f 7131 	mov.w	r1, #708	; 0x2c4
 800b866:	4806      	ldr	r0, [pc, #24]	; (800b880 <HAL_RCCEx_PeriphCLKConfig+0x4c4>)
 800b868:	f003 fc82 	bl	800f170 <assert_failed>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b86c:	4a05      	ldr	r2, [pc, #20]	; (800b884 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
 800b86e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800b870:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b874:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b878:	430b      	orrs	r3, r1
 800b87a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800b87e:	e003      	b.n	800b888 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 800b880:	080176a7 	.word	0x080176a7
 800b884:	40021000 	.word	0x40021000
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b888:	6823      	ldr	r3, [r4, #0]
 800b88a:	03db      	lsls	r3, r3, #15
 800b88c:	d513      	bpl.n	800b8b6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800b88e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800b892:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 800b896:	d004      	beq.n	800b8a2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800b898:	f240 21d2 	movw	r1, #722	; 0x2d2
 800b89c:	4828      	ldr	r0, [pc, #160]	; (800b940 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800b89e:	f003 fc67 	bl	800f170 <assert_failed>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b8a2:	4a28      	ldr	r2, [pc, #160]	; (800b944 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800b8a4:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800b8a8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b8ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b8b0:	430b      	orrs	r3, r1
 800b8b2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800b8b6:	4628      	mov	r0, r5
 800b8b8:	b002      	add	sp, #8
 800b8ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b8be:	f7fc fe5b 	bl	8008578 <HAL_GetTick>
 800b8c2:	1b40      	subs	r0, r0, r5
 800b8c4:	4548      	cmp	r0, r9
 800b8c6:	f67f ae35 	bls.w	800b534 <HAL_RCCEx_PeriphCLKConfig+0x178>
 800b8ca:	e657      	b.n	800b57c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800b8cc:	4635      	mov	r5, r6
 800b8ce:	e65d      	b.n	800b58c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b8d0:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800b8d4:	f47f af66 	bne.w	800b7a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b8d8:	2101      	movs	r1, #1
 800b8da:	1d20      	adds	r0, r4, #4
 800b8dc:	f7ff fbce 	bl	800b07c <RCCEx_PLLSAI1_Config>
 800b8e0:	2800      	cmp	r0, #0
 800b8e2:	bf18      	it	ne
 800b8e4:	4605      	movne	r5, r0
 800b8e6:	e75d      	b.n	800b7a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800b8e8:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800b8ec:	f47f af77 	bne.w	800b7de <HAL_RCCEx_PeriphCLKConfig+0x422>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b8f0:	2101      	movs	r1, #1
 800b8f2:	1d20      	adds	r0, r4, #4
 800b8f4:	f7ff fbc2 	bl	800b07c <RCCEx_PLLSAI1_Config>
 800b8f8:	2800      	cmp	r0, #0
 800b8fa:	bf18      	it	ne
 800b8fc:	4605      	movne	r5, r0
 800b8fe:	e76e      	b.n	800b7de <HAL_RCCEx_PeriphCLKConfig+0x422>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800b900:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800b904:	d187      	bne.n	800b816 <HAL_RCCEx_PeriphCLKConfig+0x45a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b906:	2101      	movs	r1, #1
 800b908:	1d20      	adds	r0, r4, #4
 800b90a:	f7ff fbb7 	bl	800b07c <RCCEx_PLLSAI1_Config>
 800b90e:	2800      	cmp	r0, #0
 800b910:	bf18      	it	ne
 800b912:	4605      	movne	r5, r0
 800b914:	e77f      	b.n	800b816 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800b916:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800b91a:	d19b      	bne.n	800b854 <HAL_RCCEx_PeriphCLKConfig+0x498>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800b91c:	2102      	movs	r1, #2
 800b91e:	f104 0020 	add.w	r0, r4, #32
 800b922:	f7ff fc89 	bl	800b238 <RCCEx_PLLSAI2_Config>
 800b926:	e792      	b.n	800b84e <HAL_RCCEx_PeriphCLKConfig+0x492>
      __HAL_RCC_PWR_CLK_ENABLE();
 800b928:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b92a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b92e:	65bb      	str	r3, [r7, #88]	; 0x58
 800b930:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b936:	9301      	str	r3, [sp, #4]
 800b938:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800b93a:	f04f 0801 	mov.w	r8, #1
 800b93e:	e5c6      	b.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0x112>
 800b940:	080176a7 	.word	0x080176a7
 800b944:	40021000 	.word	0x40021000

0800b948 <HAL_TIM_IC_MspInit>:
 800b948:	4770      	bx	lr
	...

0800b94c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b94c:	4a30      	ldr	r2, [pc, #192]	; (800ba10 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800b94e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b950:	4290      	cmp	r0, r2
 800b952:	d012      	beq.n	800b97a <TIM_Base_SetConfig+0x2e>
 800b954:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b958:	d00f      	beq.n	800b97a <TIM_Base_SetConfig+0x2e>
 800b95a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800b95e:	4290      	cmp	r0, r2
 800b960:	d00b      	beq.n	800b97a <TIM_Base_SetConfig+0x2e>
 800b962:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b966:	4290      	cmp	r0, r2
 800b968:	d007      	beq.n	800b97a <TIM_Base_SetConfig+0x2e>
 800b96a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b96e:	4290      	cmp	r0, r2
 800b970:	d003      	beq.n	800b97a <TIM_Base_SetConfig+0x2e>
 800b972:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800b976:	4290      	cmp	r0, r2
 800b978:	d119      	bne.n	800b9ae <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800b97a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b97c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800b980:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b982:	4a23      	ldr	r2, [pc, #140]	; (800ba10 <TIM_Base_SetConfig+0xc4>)
 800b984:	4290      	cmp	r0, r2
 800b986:	d01d      	beq.n	800b9c4 <TIM_Base_SetConfig+0x78>
 800b988:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b98c:	d01a      	beq.n	800b9c4 <TIM_Base_SetConfig+0x78>
 800b98e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800b992:	4290      	cmp	r0, r2
 800b994:	d016      	beq.n	800b9c4 <TIM_Base_SetConfig+0x78>
 800b996:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b99a:	4290      	cmp	r0, r2
 800b99c:	d012      	beq.n	800b9c4 <TIM_Base_SetConfig+0x78>
 800b99e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b9a2:	4290      	cmp	r0, r2
 800b9a4:	d00e      	beq.n	800b9c4 <TIM_Base_SetConfig+0x78>
 800b9a6:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800b9aa:	4290      	cmp	r0, r2
 800b9ac:	d00a      	beq.n	800b9c4 <TIM_Base_SetConfig+0x78>
 800b9ae:	4a19      	ldr	r2, [pc, #100]	; (800ba14 <TIM_Base_SetConfig+0xc8>)
 800b9b0:	4290      	cmp	r0, r2
 800b9b2:	d007      	beq.n	800b9c4 <TIM_Base_SetConfig+0x78>
 800b9b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b9b8:	4290      	cmp	r0, r2
 800b9ba:	d003      	beq.n	800b9c4 <TIM_Base_SetConfig+0x78>
 800b9bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b9c0:	4290      	cmp	r0, r2
 800b9c2:	d103      	bne.n	800b9cc <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b9c4:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800b9c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b9ca:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b9cc:	694a      	ldr	r2, [r1, #20]
 800b9ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b9d2:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800b9d4:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b9d6:	688b      	ldr	r3, [r1, #8]
 800b9d8:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b9da:	680b      	ldr	r3, [r1, #0]
 800b9dc:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b9de:	4b0c      	ldr	r3, [pc, #48]	; (800ba10 <TIM_Base_SetConfig+0xc4>)
 800b9e0:	4298      	cmp	r0, r3
 800b9e2:	d00f      	beq.n	800ba04 <TIM_Base_SetConfig+0xb8>
 800b9e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9e8:	4298      	cmp	r0, r3
 800b9ea:	d00b      	beq.n	800ba04 <TIM_Base_SetConfig+0xb8>
 800b9ec:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800b9f0:	4298      	cmp	r0, r3
 800b9f2:	d007      	beq.n	800ba04 <TIM_Base_SetConfig+0xb8>
 800b9f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b9f8:	4298      	cmp	r0, r3
 800b9fa:	d003      	beq.n	800ba04 <TIM_Base_SetConfig+0xb8>
 800b9fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ba00:	4298      	cmp	r0, r3
 800ba02:	d101      	bne.n	800ba08 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ba04:	690b      	ldr	r3, [r1, #16]
 800ba06:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ba08:	2301      	movs	r3, #1
 800ba0a:	6143      	str	r3, [r0, #20]
 800ba0c:	4770      	bx	lr
 800ba0e:	bf00      	nop
 800ba10:	40012c00 	.word	0x40012c00
 800ba14:	40014000 	.word	0x40014000

0800ba18 <HAL_TIM_Base_Init>:
{
 800ba18:	b510      	push	{r4, lr}
  if (htim == NULL)
 800ba1a:	4604      	mov	r4, r0
 800ba1c:	2800      	cmp	r0, #0
 800ba1e:	d069      	beq.n	800baf4 <HAL_TIM_Base_Init+0xdc>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ba20:	6803      	ldr	r3, [r0, #0]
 800ba22:	4a35      	ldr	r2, [pc, #212]	; (800baf8 <HAL_TIM_Base_Init+0xe0>)
 800ba24:	4293      	cmp	r3, r2
 800ba26:	d02b      	beq.n	800ba80 <HAL_TIM_Base_Init+0x68>
 800ba28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba2c:	d028      	beq.n	800ba80 <HAL_TIM_Base_Init+0x68>
 800ba2e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800ba32:	4293      	cmp	r3, r2
 800ba34:	d024      	beq.n	800ba80 <HAL_TIM_Base_Init+0x68>
 800ba36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	d020      	beq.n	800ba80 <HAL_TIM_Base_Init+0x68>
 800ba3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ba42:	4293      	cmp	r3, r2
 800ba44:	d01c      	beq.n	800ba80 <HAL_TIM_Base_Init+0x68>
 800ba46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	d018      	beq.n	800ba80 <HAL_TIM_Base_Init+0x68>
 800ba4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ba52:	4293      	cmp	r3, r2
 800ba54:	d014      	beq.n	800ba80 <HAL_TIM_Base_Init+0x68>
 800ba56:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	d010      	beq.n	800ba80 <HAL_TIM_Base_Init+0x68>
 800ba5e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d00c      	beq.n	800ba80 <HAL_TIM_Base_Init+0x68>
 800ba66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d008      	beq.n	800ba80 <HAL_TIM_Base_Init+0x68>
 800ba6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d004      	beq.n	800ba80 <HAL_TIM_Base_Init+0x68>
 800ba76:	f240 110f 	movw	r1, #271	; 0x10f
 800ba7a:	4820      	ldr	r0, [pc, #128]	; (800bafc <HAL_TIM_Base_Init+0xe4>)
 800ba7c:	f003 fb78 	bl	800f170 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800ba80:	68a3      	ldr	r3, [r4, #8]
 800ba82:	f033 0210 	bics.w	r2, r3, #16
 800ba86:	d00a      	beq.n	800ba9e <HAL_TIM_Base_Init+0x86>
 800ba88:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800ba8c:	2a20      	cmp	r2, #32
 800ba8e:	d006      	beq.n	800ba9e <HAL_TIM_Base_Init+0x86>
 800ba90:	2b40      	cmp	r3, #64	; 0x40
 800ba92:	d004      	beq.n	800ba9e <HAL_TIM_Base_Init+0x86>
 800ba94:	f44f 7188 	mov.w	r1, #272	; 0x110
 800ba98:	4818      	ldr	r0, [pc, #96]	; (800bafc <HAL_TIM_Base_Init+0xe4>)
 800ba9a:	f003 fb69 	bl	800f170 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800ba9e:	6923      	ldr	r3, [r4, #16]
 800baa0:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800baa4:	d007      	beq.n	800bab6 <HAL_TIM_Base_Init+0x9e>
 800baa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800baaa:	d004      	beq.n	800bab6 <HAL_TIM_Base_Init+0x9e>
 800baac:	f240 1111 	movw	r1, #273	; 0x111
 800bab0:	4812      	ldr	r0, [pc, #72]	; (800bafc <HAL_TIM_Base_Init+0xe4>)
 800bab2:	f003 fb5d 	bl	800f170 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800bab6:	69a3      	ldr	r3, [r4, #24]
 800bab8:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800babc:	d004      	beq.n	800bac8 <HAL_TIM_Base_Init+0xb0>
 800babe:	f44f 7189 	mov.w	r1, #274	; 0x112
 800bac2:	480e      	ldr	r0, [pc, #56]	; (800bafc <HAL_TIM_Base_Init+0xe4>)
 800bac4:	f003 fb54 	bl	800f170 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800bac8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800bacc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800bad0:	b923      	cbnz	r3, 800badc <HAL_TIM_Base_Init+0xc4>
    htim->Lock = HAL_UNLOCKED;
 800bad2:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800bad6:	4620      	mov	r0, r4
 800bad8:	f003 fc76 	bl	800f3c8 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800badc:	2302      	movs	r3, #2
 800bade:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bae2:	6820      	ldr	r0, [r4, #0]
 800bae4:	1d21      	adds	r1, r4, #4
 800bae6:	f7ff ff31 	bl	800b94c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800baea:	2301      	movs	r3, #1
 800baec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800baf0:	2000      	movs	r0, #0
 800baf2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800baf4:	2001      	movs	r0, #1
}
 800baf6:	bd10      	pop	{r4, pc}
 800baf8:	40012c00 	.word	0x40012c00
 800bafc:	080176e2 	.word	0x080176e2

0800bb00 <HAL_TIM_IC_Init>:
{
 800bb00:	b510      	push	{r4, lr}
  if (htim == NULL)
 800bb02:	4604      	mov	r4, r0
 800bb04:	2800      	cmp	r0, #0
 800bb06:	d069      	beq.n	800bbdc <HAL_TIM_IC_Init+0xdc>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800bb08:	6803      	ldr	r3, [r0, #0]
 800bb0a:	4a35      	ldr	r2, [pc, #212]	; (800bbe0 <HAL_TIM_IC_Init+0xe0>)
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d02b      	beq.n	800bb68 <HAL_TIM_IC_Init+0x68>
 800bb10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb14:	d028      	beq.n	800bb68 <HAL_TIM_IC_Init+0x68>
 800bb16:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d024      	beq.n	800bb68 <HAL_TIM_IC_Init+0x68>
 800bb1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bb22:	4293      	cmp	r3, r2
 800bb24:	d020      	beq.n	800bb68 <HAL_TIM_IC_Init+0x68>
 800bb26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d01c      	beq.n	800bb68 <HAL_TIM_IC_Init+0x68>
 800bb2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bb32:	4293      	cmp	r3, r2
 800bb34:	d018      	beq.n	800bb68 <HAL_TIM_IC_Init+0x68>
 800bb36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	d014      	beq.n	800bb68 <HAL_TIM_IC_Init+0x68>
 800bb3e:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 800bb42:	4293      	cmp	r3, r2
 800bb44:	d010      	beq.n	800bb68 <HAL_TIM_IC_Init+0x68>
 800bb46:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800bb4a:	4293      	cmp	r3, r2
 800bb4c:	d00c      	beq.n	800bb68 <HAL_TIM_IC_Init+0x68>
 800bb4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bb52:	4293      	cmp	r3, r2
 800bb54:	d008      	beq.n	800bb68 <HAL_TIM_IC_Init+0x68>
 800bb56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bb5a:	4293      	cmp	r3, r2
 800bb5c:	d004      	beq.n	800bb68 <HAL_TIM_IC_Init+0x68>
 800bb5e:	f240 61b1 	movw	r1, #1713	; 0x6b1
 800bb62:	4820      	ldr	r0, [pc, #128]	; (800bbe4 <HAL_TIM_IC_Init+0xe4>)
 800bb64:	f003 fb04 	bl	800f170 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800bb68:	68a3      	ldr	r3, [r4, #8]
 800bb6a:	f033 0210 	bics.w	r2, r3, #16
 800bb6e:	d00a      	beq.n	800bb86 <HAL_TIM_IC_Init+0x86>
 800bb70:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800bb74:	2a20      	cmp	r2, #32
 800bb76:	d006      	beq.n	800bb86 <HAL_TIM_IC_Init+0x86>
 800bb78:	2b40      	cmp	r3, #64	; 0x40
 800bb7a:	d004      	beq.n	800bb86 <HAL_TIM_IC_Init+0x86>
 800bb7c:	f240 61b2 	movw	r1, #1714	; 0x6b2
 800bb80:	4818      	ldr	r0, [pc, #96]	; (800bbe4 <HAL_TIM_IC_Init+0xe4>)
 800bb82:	f003 faf5 	bl	800f170 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800bb86:	6923      	ldr	r3, [r4, #16]
 800bb88:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800bb8c:	d007      	beq.n	800bb9e <HAL_TIM_IC_Init+0x9e>
 800bb8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb92:	d004      	beq.n	800bb9e <HAL_TIM_IC_Init+0x9e>
 800bb94:	f240 61b3 	movw	r1, #1715	; 0x6b3
 800bb98:	4812      	ldr	r0, [pc, #72]	; (800bbe4 <HAL_TIM_IC_Init+0xe4>)
 800bb9a:	f003 fae9 	bl	800f170 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800bb9e:	69a3      	ldr	r3, [r4, #24]
 800bba0:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800bba4:	d004      	beq.n	800bbb0 <HAL_TIM_IC_Init+0xb0>
 800bba6:	f240 61b4 	movw	r1, #1716	; 0x6b4
 800bbaa:	480e      	ldr	r0, [pc, #56]	; (800bbe4 <HAL_TIM_IC_Init+0xe4>)
 800bbac:	f003 fae0 	bl	800f170 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800bbb0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800bbb4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800bbb8:	b923      	cbnz	r3, 800bbc4 <HAL_TIM_IC_Init+0xc4>
    htim->Lock = HAL_UNLOCKED;
 800bbba:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 800bbbe:	4620      	mov	r0, r4
 800bbc0:	f7ff fec2 	bl	800b948 <HAL_TIM_IC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800bbc4:	2302      	movs	r3, #2
 800bbc6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bbca:	6820      	ldr	r0, [r4, #0]
 800bbcc:	1d21      	adds	r1, r4, #4
 800bbce:	f7ff febd 	bl	800b94c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800bbd8:	2000      	movs	r0, #0
 800bbda:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800bbdc:	2001      	movs	r0, #1
}
 800bbde:	bd10      	pop	{r4, pc}
 800bbe0:	40012c00 	.word	0x40012c00
 800bbe4:	080176e2 	.word	0x080176e2

0800bbe8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800bbe8:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bbea:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800bbec:	4e18      	ldr	r6, [pc, #96]	; (800bc50 <TIM_TI1_SetConfig+0x68>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bbee:	f024 0401 	bic.w	r4, r4, #1
 800bbf2:	6204      	str	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800bbf4:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 800bbf6:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800bbf8:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800bbfa:	d016      	beq.n	800bc2a <TIM_TI1_SetConfig+0x42>
 800bbfc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800bc00:	d013      	beq.n	800bc2a <TIM_TI1_SetConfig+0x42>
 800bc02:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 800bc06:	42b0      	cmp	r0, r6
 800bc08:	d00f      	beq.n	800bc2a <TIM_TI1_SetConfig+0x42>
 800bc0a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800bc0e:	42b0      	cmp	r0, r6
 800bc10:	d00b      	beq.n	800bc2a <TIM_TI1_SetConfig+0x42>
 800bc12:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800bc16:	42b0      	cmp	r0, r6
 800bc18:	d007      	beq.n	800bc2a <TIM_TI1_SetConfig+0x42>
 800bc1a:	f506 3694 	add.w	r6, r6, #75776	; 0x12800
 800bc1e:	42b0      	cmp	r0, r6
 800bc20:	d003      	beq.n	800bc2a <TIM_TI1_SetConfig+0x42>
 800bc22:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 800bc26:	42b0      	cmp	r0, r6
 800bc28:	d10f      	bne.n	800bc4a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800bc2a:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 800bc2e:	4322      	orrs	r2, r4
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800bc30:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bc32:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800bc36:	b2db      	uxtb	r3, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bc38:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800bc3c:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800bc40:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800bc42:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bc44:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800bc46:	6201      	str	r1, [r0, #32]
}
 800bc48:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800bc4a:	f044 0201 	orr.w	r2, r4, #1
 800bc4e:	e7ef      	b.n	800bc30 <TIM_TI1_SetConfig+0x48>
 800bc50:	40012c00 	.word	0x40012c00

0800bc54 <HAL_TIM_IC_ConfigChannel>:
{
 800bc54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc56:	4616      	mov	r6, r2
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800bc58:	6803      	ldr	r3, [r0, #0]
 800bc5a:	4a98      	ldr	r2, [pc, #608]	; (800bebc <HAL_TIM_IC_ConfigChannel+0x268>)
 800bc5c:	4293      	cmp	r3, r2
{
 800bc5e:	4605      	mov	r5, r0
 800bc60:	460c      	mov	r4, r1
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800bc62:	d023      	beq.n	800bcac <HAL_TIM_IC_ConfigChannel+0x58>
 800bc64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc68:	d020      	beq.n	800bcac <HAL_TIM_IC_ConfigChannel+0x58>
 800bc6a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d01c      	beq.n	800bcac <HAL_TIM_IC_ConfigChannel+0x58>
 800bc72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d018      	beq.n	800bcac <HAL_TIM_IC_ConfigChannel+0x58>
 800bc7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	d014      	beq.n	800bcac <HAL_TIM_IC_ConfigChannel+0x58>
 800bc82:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d010      	beq.n	800bcac <HAL_TIM_IC_ConfigChannel+0x58>
 800bc8a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d00c      	beq.n	800bcac <HAL_TIM_IC_ConfigChannel+0x58>
 800bc92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bc96:	4293      	cmp	r3, r2
 800bc98:	d008      	beq.n	800bcac <HAL_TIM_IC_ConfigChannel+0x58>
 800bc9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bc9e:	4293      	cmp	r3, r2
 800bca0:	d004      	beq.n	800bcac <HAL_TIM_IC_ConfigChannel+0x58>
 800bca2:	f640 516a 	movw	r1, #3434	; 0xd6a
 800bca6:	4886      	ldr	r0, [pc, #536]	; (800bec0 <HAL_TIM_IC_ConfigChannel+0x26c>)
 800bca8:	f003 fa62 	bl	800f170 <assert_failed>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 800bcac:	6823      	ldr	r3, [r4, #0]
 800bcae:	f033 0202 	bics.w	r2, r3, #2
 800bcb2:	d006      	beq.n	800bcc2 <HAL_TIM_IC_ConfigChannel+0x6e>
 800bcb4:	2b0a      	cmp	r3, #10
 800bcb6:	d004      	beq.n	800bcc2 <HAL_TIM_IC_ConfigChannel+0x6e>
 800bcb8:	f640 516b 	movw	r1, #3435	; 0xd6b
 800bcbc:	4880      	ldr	r0, [pc, #512]	; (800bec0 <HAL_TIM_IC_ConfigChannel+0x26c>)
 800bcbe:	f003 fa57 	bl	800f170 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 800bcc2:	6863      	ldr	r3, [r4, #4]
 800bcc4:	3b01      	subs	r3, #1
 800bcc6:	2b02      	cmp	r3, #2
 800bcc8:	d904      	bls.n	800bcd4 <HAL_TIM_IC_ConfigChannel+0x80>
 800bcca:	f640 516c 	movw	r1, #3436	; 0xd6c
 800bcce:	487c      	ldr	r0, [pc, #496]	; (800bec0 <HAL_TIM_IC_ConfigChannel+0x26c>)
 800bcd0:	f003 fa4e 	bl	800f170 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 800bcd4:	68a3      	ldr	r3, [r4, #8]
 800bcd6:	f033 030c 	bics.w	r3, r3, #12
 800bcda:	d004      	beq.n	800bce6 <HAL_TIM_IC_ConfigChannel+0x92>
 800bcdc:	f640 516d 	movw	r1, #3437	; 0xd6d
 800bce0:	4877      	ldr	r0, [pc, #476]	; (800bec0 <HAL_TIM_IC_ConfigChannel+0x26c>)
 800bce2:	f003 fa45 	bl	800f170 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 800bce6:	68e3      	ldr	r3, [r4, #12]
 800bce8:	2b0f      	cmp	r3, #15
 800bcea:	d904      	bls.n	800bcf6 <HAL_TIM_IC_ConfigChannel+0xa2>
 800bcec:	f640 516e 	movw	r1, #3438	; 0xd6e
 800bcf0:	4873      	ldr	r0, [pc, #460]	; (800bec0 <HAL_TIM_IC_ConfigChannel+0x26c>)
 800bcf2:	f003 fa3d 	bl	800f170 <assert_failed>
  __HAL_LOCK(htim);
 800bcf6:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800bcfa:	2b01      	cmp	r3, #1
 800bcfc:	f04f 0002 	mov.w	r0, #2
 800bd00:	d01a      	beq.n	800bd38 <HAL_TIM_IC_ConfigChannel+0xe4>
 800bd02:	2301      	movs	r3, #1
 800bd04:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800bd08:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
  if (Channel == TIM_CHANNEL_1)
 800bd0c:	b9ae      	cbnz	r6, 800bd3a <HAL_TIM_IC_ConfigChannel+0xe6>
    TIM_TI1_SetConfig(htim->Instance,
 800bd0e:	e894 0006 	ldmia.w	r4, {r1, r2}
 800bd12:	68e3      	ldr	r3, [r4, #12]
 800bd14:	6828      	ldr	r0, [r5, #0]
 800bd16:	f7ff ff67 	bl	800bbe8 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800bd1a:	682b      	ldr	r3, [r5, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800bd1c:	68a1      	ldr	r1, [r4, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800bd1e:	699a      	ldr	r2, [r3, #24]
 800bd20:	f022 020c 	bic.w	r2, r2, #12
 800bd24:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800bd26:	699a      	ldr	r2, [r3, #24]
 800bd28:	430a      	orrs	r2, r1
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800bd2a:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 800bd2c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800bd2e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800bd30:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800bd34:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
}
 800bd38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 800bd3a:	2e04      	cmp	r6, #4
 800bd3c:	682b      	ldr	r3, [r5, #0]
 800bd3e:	4a5f      	ldr	r2, [pc, #380]	; (800bebc <HAL_TIM_IC_ConfigChannel+0x268>)
 800bd40:	d141      	bne.n	800bdc6 <HAL_TIM_IC_ConfigChannel+0x172>
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800bd42:	4293      	cmp	r3, r2
 800bd44:	d01b      	beq.n	800bd7e <HAL_TIM_IC_ConfigChannel+0x12a>
 800bd46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd4a:	d018      	beq.n	800bd7e <HAL_TIM_IC_ConfigChannel+0x12a>
 800bd4c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800bd50:	4293      	cmp	r3, r2
 800bd52:	d014      	beq.n	800bd7e <HAL_TIM_IC_ConfigChannel+0x12a>
 800bd54:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bd58:	4293      	cmp	r3, r2
 800bd5a:	d010      	beq.n	800bd7e <HAL_TIM_IC_ConfigChannel+0x12a>
 800bd5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bd60:	4293      	cmp	r3, r2
 800bd62:	d00c      	beq.n	800bd7e <HAL_TIM_IC_ConfigChannel+0x12a>
 800bd64:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800bd68:	4293      	cmp	r3, r2
 800bd6a:	d008      	beq.n	800bd7e <HAL_TIM_IC_ConfigChannel+0x12a>
 800bd6c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800bd70:	4293      	cmp	r3, r2
 800bd72:	d004      	beq.n	800bd7e <HAL_TIM_IC_ConfigChannel+0x12a>
 800bd74:	f640 5186 	movw	r1, #3462	; 0xd86
 800bd78:	4851      	ldr	r0, [pc, #324]	; (800bec0 <HAL_TIM_IC_ConfigChannel+0x26c>)
 800bd7a:	f003 f9f9 	bl	800f170 <assert_failed>
    TIM_TI2_SetConfig(htim->Instance,
 800bd7e:	682b      	ldr	r3, [r5, #0]
 800bd80:	68e1      	ldr	r1, [r4, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bd82:	6a1e      	ldr	r6, [r3, #32]
 800bd84:	f026 0610 	bic.w	r6, r6, #16
    TIM_TI2_SetConfig(htim->Instance,
 800bd88:	e894 0084 	ldmia.w	r4, {r2, r7}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bd8c:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd8e:	6998      	ldr	r0, [r3, #24]
  tmpccer = TIMx->CCER;
 800bd90:	6a1e      	ldr	r6, [r3, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800bd92:	f420 7040 	bic.w	r0, r0, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800bd96:	ea40 2007 	orr.w	r0, r0, r7, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800bd9a:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bd9c:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800bda0:	b289      	uxth	r1, r1

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800bda2:	0112      	lsls	r2, r2, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800bda4:	4301      	orrs	r1, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800bda6:	f002 02a0 	and.w	r2, r2, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bdaa:	f026 00a0 	bic.w	r0, r6, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800bdae:	4302      	orrs	r2, r0

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bdb0:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800bdb2:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800bdb4:	699a      	ldr	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800bdb6:	68a1      	ldr	r1, [r4, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800bdb8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800bdbc:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800bdbe:	699a      	ldr	r2, [r3, #24]
 800bdc0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800bdc4:	e7b1      	b.n	800bd2a <HAL_TIM_IC_ConfigChannel+0xd6>
  else if (Channel == TIM_CHANNEL_3)
 800bdc6:	2e08      	cmp	r6, #8
 800bdc8:	d13b      	bne.n	800be42 <HAL_TIM_IC_ConfigChannel+0x1ee>
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800bdca:	4293      	cmp	r3, r2
 800bdcc:	d016      	beq.n	800bdfc <HAL_TIM_IC_ConfigChannel+0x1a8>
 800bdce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdd2:	d013      	beq.n	800bdfc <HAL_TIM_IC_ConfigChannel+0x1a8>
 800bdd4:	4a3b      	ldr	r2, [pc, #236]	; (800bec4 <HAL_TIM_IC_ConfigChannel+0x270>)
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	d010      	beq.n	800bdfc <HAL_TIM_IC_ConfigChannel+0x1a8>
 800bdda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bdde:	4293      	cmp	r3, r2
 800bde0:	d00c      	beq.n	800bdfc <HAL_TIM_IC_ConfigChannel+0x1a8>
 800bde2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bde6:	4293      	cmp	r3, r2
 800bde8:	d008      	beq.n	800bdfc <HAL_TIM_IC_ConfigChannel+0x1a8>
 800bdea:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800bdee:	4293      	cmp	r3, r2
 800bdf0:	d004      	beq.n	800bdfc <HAL_TIM_IC_ConfigChannel+0x1a8>
 800bdf2:	f640 5196 	movw	r1, #3478	; 0xd96
 800bdf6:	4832      	ldr	r0, [pc, #200]	; (800bec0 <HAL_TIM_IC_ConfigChannel+0x26c>)
 800bdf8:	f003 f9ba 	bl	800f170 <assert_failed>
    TIM_TI3_SetConfig(htim->Instance,
 800bdfc:	682b      	ldr	r3, [r5, #0]
 800bdfe:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800be00:	6a1e      	ldr	r6, [r3, #32]
    TIM_TI3_SetConfig(htim->Instance,
 800be02:	6860      	ldr	r0, [r4, #4]
 800be04:	68e1      	ldr	r1, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800be06:	f426 7680 	bic.w	r6, r6, #256	; 0x100
 800be0a:	621e      	str	r6, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800be0c:	69df      	ldr	r7, [r3, #28]
  tmpccer = TIMx->CCER;
 800be0e:	6a1e      	ldr	r6, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800be10:	f027 0703 	bic.w	r7, r7, #3
  tmpccmr2 |= TIM_ICSelection;
 800be14:	4338      	orrs	r0, r7

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800be16:	0109      	lsls	r1, r1, #4
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800be18:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800be1c:	b2c9      	uxtb	r1, r1

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800be1e:	0212      	lsls	r2, r2, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800be20:	4301      	orrs	r1, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800be22:	f402 6220 	and.w	r2, r2, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800be26:	f426 6020 	bic.w	r0, r6, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800be2a:	4302      	orrs	r2, r0

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800be2c:	61d9      	str	r1, [r3, #28]
  TIMx->CCER = tmpccer;
 800be2e:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800be30:	69da      	ldr	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800be32:	68a1      	ldr	r1, [r4, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800be34:	f022 020c 	bic.w	r2, r2, #12
 800be38:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800be3a:	69da      	ldr	r2, [r3, #28]
 800be3c:	430a      	orrs	r2, r1
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800be3e:	61da      	str	r2, [r3, #28]
 800be40:	e774      	b.n	800bd2c <HAL_TIM_IC_ConfigChannel+0xd8>
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800be42:	4293      	cmp	r3, r2
 800be44:	d016      	beq.n	800be74 <HAL_TIM_IC_ConfigChannel+0x220>
 800be46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be4a:	d013      	beq.n	800be74 <HAL_TIM_IC_ConfigChannel+0x220>
 800be4c:	4a1d      	ldr	r2, [pc, #116]	; (800bec4 <HAL_TIM_IC_ConfigChannel+0x270>)
 800be4e:	4293      	cmp	r3, r2
 800be50:	d010      	beq.n	800be74 <HAL_TIM_IC_ConfigChannel+0x220>
 800be52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800be56:	4293      	cmp	r3, r2
 800be58:	d00c      	beq.n	800be74 <HAL_TIM_IC_ConfigChannel+0x220>
 800be5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800be5e:	4293      	cmp	r3, r2
 800be60:	d008      	beq.n	800be74 <HAL_TIM_IC_ConfigChannel+0x220>
 800be62:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800be66:	4293      	cmp	r3, r2
 800be68:	d004      	beq.n	800be74 <HAL_TIM_IC_ConfigChannel+0x220>
 800be6a:	f640 51a6 	movw	r1, #3494	; 0xda6
 800be6e:	4814      	ldr	r0, [pc, #80]	; (800bec0 <HAL_TIM_IC_ConfigChannel+0x26c>)
 800be70:	f003 f97e 	bl	800f170 <assert_failed>
    TIM_TI4_SetConfig(htim->Instance,
 800be74:	682b      	ldr	r3, [r5, #0]
 800be76:	68e1      	ldr	r1, [r4, #12]
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800be78:	6a1e      	ldr	r6, [r3, #32]
 800be7a:	f426 5680 	bic.w	r6, r6, #4096	; 0x1000
    TIM_TI4_SetConfig(htim->Instance,
 800be7e:	e894 0084 	ldmia.w	r4, {r2, r7}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800be82:	621e      	str	r6, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800be84:	69d8      	ldr	r0, [r3, #28]
  tmpccer = TIMx->CCER;
 800be86:	6a1e      	ldr	r6, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800be88:	f420 7040 	bic.w	r0, r0, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800be8c:	ea40 2007 	orr.w	r0, r0, r7, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800be90:	0309      	lsls	r1, r1, #12
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800be92:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800be96:	b289      	uxth	r1, r1

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800be98:	0312      	lsls	r2, r2, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800be9a:	4301      	orrs	r1, r0
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800be9c:	f402 4220 	and.w	r2, r2, #40960	; 0xa000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800bea0:	f426 4020 	bic.w	r0, r6, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800bea4:	4302      	orrs	r2, r0

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800bea6:	61d9      	str	r1, [r3, #28]
  TIMx->CCER = tmpccer ;
 800bea8:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800beaa:	69da      	ldr	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800beac:	68a1      	ldr	r1, [r4, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800beae:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800beb2:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800beb4:	69da      	ldr	r2, [r3, #28]
 800beb6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800beba:	e7c0      	b.n	800be3e <HAL_TIM_IC_ConfigChannel+0x1ea>
 800bebc:	40012c00 	.word	0x40012c00
 800bec0:	080176e2 	.word	0x080176e2
 800bec4:	40000400 	.word	0x40000400

0800bec8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bec8:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800beca:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800becc:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bece:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bed2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800bed6:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bed8:	6083      	str	r3, [r0, #8]
 800beda:	bd10      	pop	{r4, pc}

0800bedc <TIM_SlaveTimer_SetConfig>:
  tmpsmcr = htim->Instance->SMCR;
 800bedc:	6803      	ldr	r3, [r0, #0]
 800bede:	689a      	ldr	r2, [r3, #8]
{
 800bee0:	b570      	push	{r4, r5, r6, lr}
 800bee2:	460c      	mov	r4, r1
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800bee4:	6849      	ldr	r1, [r1, #4]
  tmpsmcr &= ~TIM_SMCR_TS;
 800bee6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800beea:	430a      	orrs	r2, r1
{
 800beec:	4605      	mov	r5, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 800beee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800bef2:	6820      	ldr	r0, [r4, #0]
  tmpsmcr &= ~TIM_SMCR_SMS;
 800bef4:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800bef8:	4302      	orrs	r2, r0
  switch (sSlaveConfig->InputTrigger)
 800befa:	2930      	cmp	r1, #48	; 0x30
  htim->Instance->SMCR = tmpsmcr;
 800befc:	609a      	str	r2, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 800befe:	d007      	beq.n	800bf10 <TIM_SlaveTimer_SetConfig+0x34>
 800bf00:	d82e      	bhi.n	800bf60 <TIM_SlaveTimer_SetConfig+0x84>
 800bf02:	2910      	cmp	r1, #16
 800bf04:	d004      	beq.n	800bf10 <TIM_SlaveTimer_SetConfig+0x34>
 800bf06:	2920      	cmp	r1, #32
 800bf08:	d002      	beq.n	800bf10 <TIM_SlaveTimer_SetConfig+0x34>
 800bf0a:	2900      	cmp	r1, #0
 800bf0c:	f040 8150 	bne.w	800c1b0 <TIM_SlaveTimer_SetConfig+0x2d4>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800bf10:	4aa8      	ldr	r2, [pc, #672]	; (800c1b4 <TIM_SlaveTimer_SetConfig+0x2d8>)
 800bf12:	4293      	cmp	r3, r2
 800bf14:	f000 814c 	beq.w	800c1b0 <TIM_SlaveTimer_SetConfig+0x2d4>
 800bf18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf1c:	f000 8148 	beq.w	800c1b0 <TIM_SlaveTimer_SetConfig+0x2d4>
 800bf20:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800bf24:	4293      	cmp	r3, r2
 800bf26:	f000 8143 	beq.w	800c1b0 <TIM_SlaveTimer_SetConfig+0x2d4>
 800bf2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bf2e:	4293      	cmp	r3, r2
 800bf30:	f000 813e 	beq.w	800c1b0 <TIM_SlaveTimer_SetConfig+0x2d4>
 800bf34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bf38:	4293      	cmp	r3, r2
 800bf3a:	f000 8139 	beq.w	800c1b0 <TIM_SlaveTimer_SetConfig+0x2d4>
 800bf3e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800bf42:	4293      	cmp	r3, r2
 800bf44:	f000 8134 	beq.w	800c1b0 <TIM_SlaveTimer_SetConfig+0x2d4>
 800bf48:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800bf4c:	4293      	cmp	r3, r2
 800bf4e:	f000 812f 	beq.w	800c1b0 <TIM_SlaveTimer_SetConfig+0x2d4>
 800bf52:	f241 71f6 	movw	r1, #6134	; 0x17f6
 800bf56:	4898      	ldr	r0, [pc, #608]	; (800c1b8 <TIM_SlaveTimer_SetConfig+0x2dc>)
}
 800bf58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800bf5c:	f003 b908 	b.w	800f170 <assert_failed>
  switch (sSlaveConfig->InputTrigger)
 800bf60:	2950      	cmp	r1, #80	; 0x50
 800bf62:	f000 808e 	beq.w	800c082 <TIM_SlaveTimer_SetConfig+0x1a6>
 800bf66:	d802      	bhi.n	800bf6e <TIM_SlaveTimer_SetConfig+0x92>
 800bf68:	2940      	cmp	r1, #64	; 0x40
 800bf6a:	d04c      	beq.n	800c006 <TIM_SlaveTimer_SetConfig+0x12a>
 800bf6c:	bd70      	pop	{r4, r5, r6, pc}
 800bf6e:	2960      	cmp	r1, #96	; 0x60
 800bf70:	f000 80d5 	beq.w	800c11e <TIM_SlaveTimer_SetConfig+0x242>
 800bf74:	2970      	cmp	r1, #112	; 0x70
 800bf76:	f040 811b 	bne.w	800c1b0 <TIM_SlaveTimer_SetConfig+0x2d4>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800bf7a:	4a8e      	ldr	r2, [pc, #568]	; (800c1b4 <TIM_SlaveTimer_SetConfig+0x2d8>)
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	d01b      	beq.n	800bfb8 <TIM_SlaveTimer_SetConfig+0xdc>
 800bf80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf84:	d018      	beq.n	800bfb8 <TIM_SlaveTimer_SetConfig+0xdc>
 800bf86:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800bf8a:	4293      	cmp	r3, r2
 800bf8c:	d014      	beq.n	800bfb8 <TIM_SlaveTimer_SetConfig+0xdc>
 800bf8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bf92:	4293      	cmp	r3, r2
 800bf94:	d010      	beq.n	800bfb8 <TIM_SlaveTimer_SetConfig+0xdc>
 800bf96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bf9a:	4293      	cmp	r3, r2
 800bf9c:	d00c      	beq.n	800bfb8 <TIM_SlaveTimer_SetConfig+0xdc>
 800bf9e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800bfa2:	4293      	cmp	r3, r2
 800bfa4:	d008      	beq.n	800bfb8 <TIM_SlaveTimer_SetConfig+0xdc>
 800bfa6:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	d004      	beq.n	800bfb8 <TIM_SlaveTimer_SetConfig+0xdc>
 800bfae:	f241 71b3 	movw	r1, #6067	; 0x17b3
 800bfb2:	4881      	ldr	r0, [pc, #516]	; (800c1b8 <TIM_SlaveTimer_SetConfig+0x2dc>)
 800bfb4:	f003 f8dc 	bl	800f170 <assert_failed>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 800bfb8:	68e3      	ldr	r3, [r4, #12]
 800bfba:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800bfbe:	d004      	beq.n	800bfca <TIM_SlaveTimer_SetConfig+0xee>
 800bfc0:	f241 71b4 	movw	r1, #6068	; 0x17b4
 800bfc4:	487c      	ldr	r0, [pc, #496]	; (800c1b8 <TIM_SlaveTimer_SetConfig+0x2dc>)
 800bfc6:	f003 f8d3 	bl	800f170 <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800bfca:	68a3      	ldr	r3, [r4, #8]
 800bfcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bfd0:	d009      	beq.n	800bfe6 <TIM_SlaveTimer_SetConfig+0x10a>
 800bfd2:	f033 0202 	bics.w	r2, r3, #2
 800bfd6:	d006      	beq.n	800bfe6 <TIM_SlaveTimer_SetConfig+0x10a>
 800bfd8:	2b0a      	cmp	r3, #10
 800bfda:	d004      	beq.n	800bfe6 <TIM_SlaveTimer_SetConfig+0x10a>
 800bfdc:	f241 71b5 	movw	r1, #6069	; 0x17b5
 800bfe0:	4875      	ldr	r0, [pc, #468]	; (800c1b8 <TIM_SlaveTimer_SetConfig+0x2dc>)
 800bfe2:	f003 f8c5 	bl	800f170 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800bfe6:	6923      	ldr	r3, [r4, #16]
 800bfe8:	2b0f      	cmp	r3, #15
 800bfea:	d904      	bls.n	800bff6 <TIM_SlaveTimer_SetConfig+0x11a>
 800bfec:	f241 71b6 	movw	r1, #6070	; 0x17b6
 800bff0:	4871      	ldr	r0, [pc, #452]	; (800c1b8 <TIM_SlaveTimer_SetConfig+0x2dc>)
 800bff2:	f003 f8bd 	bl	800f170 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800bff6:	6923      	ldr	r3, [r4, #16]
 800bff8:	68a2      	ldr	r2, [r4, #8]
 800bffa:	68e1      	ldr	r1, [r4, #12]
 800bffc:	6828      	ldr	r0, [r5, #0]
}
 800bffe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      TIM_ETR_SetConfig(htim->Instance,
 800c002:	f7ff bf61 	b.w	800bec8 <TIM_ETR_SetConfig>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800c006:	4a6b      	ldr	r2, [pc, #428]	; (800c1b4 <TIM_SlaveTimer_SetConfig+0x2d8>)
 800c008:	4293      	cmp	r3, r2
 800c00a:	d023      	beq.n	800c054 <TIM_SlaveTimer_SetConfig+0x178>
 800c00c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c010:	d020      	beq.n	800c054 <TIM_SlaveTimer_SetConfig+0x178>
 800c012:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800c016:	4293      	cmp	r3, r2
 800c018:	d01c      	beq.n	800c054 <TIM_SlaveTimer_SetConfig+0x178>
 800c01a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c01e:	4293      	cmp	r3, r2
 800c020:	d018      	beq.n	800c054 <TIM_SlaveTimer_SetConfig+0x178>
 800c022:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c026:	4293      	cmp	r3, r2
 800c028:	d014      	beq.n	800c054 <TIM_SlaveTimer_SetConfig+0x178>
 800c02a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800c02e:	4293      	cmp	r3, r2
 800c030:	d010      	beq.n	800c054 <TIM_SlaveTimer_SetConfig+0x178>
 800c032:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800c036:	4293      	cmp	r3, r2
 800c038:	d00c      	beq.n	800c054 <TIM_SlaveTimer_SetConfig+0x178>
 800c03a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c03e:	4293      	cmp	r3, r2
 800c040:	d008      	beq.n	800c054 <TIM_SlaveTimer_SetConfig+0x178>
 800c042:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c046:	4293      	cmp	r3, r2
 800c048:	d004      	beq.n	800c054 <TIM_SlaveTimer_SetConfig+0x178>
 800c04a:	f241 71c2 	movw	r1, #6082	; 0x17c2
 800c04e:	485a      	ldr	r0, [pc, #360]	; (800c1b8 <TIM_SlaveTimer_SetConfig+0x2dc>)
 800c050:	f003 f88e 	bl	800f170 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800c054:	6923      	ldr	r3, [r4, #16]
 800c056:	2b0f      	cmp	r3, #15
 800c058:	d904      	bls.n	800c064 <TIM_SlaveTimer_SetConfig+0x188>
 800c05a:	f241 71c3 	movw	r1, #6083	; 0x17c3
 800c05e:	4856      	ldr	r0, [pc, #344]	; (800c1b8 <TIM_SlaveTimer_SetConfig+0x2dc>)
 800c060:	f003 f886 	bl	800f170 <assert_failed>
      tmpccer = htim->Instance->CCER;
 800c064:	682b      	ldr	r3, [r5, #0]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800c066:	6920      	ldr	r0, [r4, #16]
      tmpccer = htim->Instance->CCER;
 800c068:	6a19      	ldr	r1, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800c06a:	6a1a      	ldr	r2, [r3, #32]
 800c06c:	f022 0201 	bic.w	r2, r2, #1
 800c070:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800c072:	699a      	ldr	r2, [r3, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c074:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800c078:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800c07c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c07e:	6219      	str	r1, [r3, #32]
 800c080:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800c082:	4a4c      	ldr	r2, [pc, #304]	; (800c1b4 <TIM_SlaveTimer_SetConfig+0x2d8>)
 800c084:	4293      	cmp	r3, r2
 800c086:	d023      	beq.n	800c0d0 <TIM_SlaveTimer_SetConfig+0x1f4>
 800c088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c08c:	d020      	beq.n	800c0d0 <TIM_SlaveTimer_SetConfig+0x1f4>
 800c08e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800c092:	4293      	cmp	r3, r2
 800c094:	d01c      	beq.n	800c0d0 <TIM_SlaveTimer_SetConfig+0x1f4>
 800c096:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c09a:	4293      	cmp	r3, r2
 800c09c:	d018      	beq.n	800c0d0 <TIM_SlaveTimer_SetConfig+0x1f4>
 800c09e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d014      	beq.n	800c0d0 <TIM_SlaveTimer_SetConfig+0x1f4>
 800c0a6:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800c0aa:	4293      	cmp	r3, r2
 800c0ac:	d010      	beq.n	800c0d0 <TIM_SlaveTimer_SetConfig+0x1f4>
 800c0ae:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800c0b2:	4293      	cmp	r3, r2
 800c0b4:	d00c      	beq.n	800c0d0 <TIM_SlaveTimer_SetConfig+0x1f4>
 800c0b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	d008      	beq.n	800c0d0 <TIM_SlaveTimer_SetConfig+0x1f4>
 800c0be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c0c2:	4293      	cmp	r3, r2
 800c0c4:	d004      	beq.n	800c0d0 <TIM_SlaveTimer_SetConfig+0x1f4>
 800c0c6:	f241 71d7 	movw	r1, #6103	; 0x17d7
 800c0ca:	483b      	ldr	r0, [pc, #236]	; (800c1b8 <TIM_SlaveTimer_SetConfig+0x2dc>)
 800c0cc:	f003 f850 	bl	800f170 <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800c0d0:	68a3      	ldr	r3, [r4, #8]
 800c0d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c0d6:	d009      	beq.n	800c0ec <TIM_SlaveTimer_SetConfig+0x210>
 800c0d8:	f033 0202 	bics.w	r2, r3, #2
 800c0dc:	d006      	beq.n	800c0ec <TIM_SlaveTimer_SetConfig+0x210>
 800c0de:	2b0a      	cmp	r3, #10
 800c0e0:	d004      	beq.n	800c0ec <TIM_SlaveTimer_SetConfig+0x210>
 800c0e2:	f241 71d8 	movw	r1, #6104	; 0x17d8
 800c0e6:	4834      	ldr	r0, [pc, #208]	; (800c1b8 <TIM_SlaveTimer_SetConfig+0x2dc>)
 800c0e8:	f003 f842 	bl	800f170 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800c0ec:	6923      	ldr	r3, [r4, #16]
 800c0ee:	2b0f      	cmp	r3, #15
 800c0f0:	d904      	bls.n	800c0fc <TIM_SlaveTimer_SetConfig+0x220>
 800c0f2:	f241 71d9 	movw	r1, #6105	; 0x17d9
 800c0f6:	4830      	ldr	r0, [pc, #192]	; (800c1b8 <TIM_SlaveTimer_SetConfig+0x2dc>)
 800c0f8:	f003 f83a 	bl	800f170 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c0fc:	682b      	ldr	r3, [r5, #0]
 800c0fe:	68a1      	ldr	r1, [r4, #8]
  tmpccer = TIMx->CCER;
 800c100:	6a18      	ldr	r0, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c102:	6925      	ldr	r5, [r4, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c104:	6a1c      	ldr	r4, [r3, #32]
 800c106:	f024 0401 	bic.w	r4, r4, #1
 800c10a:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c10c:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c10e:	f020 000a 	bic.w	r0, r0, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c112:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c116:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 800c11a:	4301      	orrs	r1, r0
 800c11c:	e7ae      	b.n	800c07c <TIM_SlaveTimer_SetConfig+0x1a0>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800c11e:	4a25      	ldr	r2, [pc, #148]	; (800c1b4 <TIM_SlaveTimer_SetConfig+0x2d8>)
 800c120:	4293      	cmp	r3, r2
 800c122:	d01b      	beq.n	800c15c <TIM_SlaveTimer_SetConfig+0x280>
 800c124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c128:	d018      	beq.n	800c15c <TIM_SlaveTimer_SetConfig+0x280>
 800c12a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800c12e:	4293      	cmp	r3, r2
 800c130:	d014      	beq.n	800c15c <TIM_SlaveTimer_SetConfig+0x280>
 800c132:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c136:	4293      	cmp	r3, r2
 800c138:	d010      	beq.n	800c15c <TIM_SlaveTimer_SetConfig+0x280>
 800c13a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c13e:	4293      	cmp	r3, r2
 800c140:	d00c      	beq.n	800c15c <TIM_SlaveTimer_SetConfig+0x280>
 800c142:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800c146:	4293      	cmp	r3, r2
 800c148:	d008      	beq.n	800c15c <TIM_SlaveTimer_SetConfig+0x280>
 800c14a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800c14e:	4293      	cmp	r3, r2
 800c150:	d004      	beq.n	800c15c <TIM_SlaveTimer_SetConfig+0x280>
 800c152:	f241 71e5 	movw	r1, #6117	; 0x17e5
 800c156:	4818      	ldr	r0, [pc, #96]	; (800c1b8 <TIM_SlaveTimer_SetConfig+0x2dc>)
 800c158:	f003 f80a 	bl	800f170 <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800c15c:	68a3      	ldr	r3, [r4, #8]
 800c15e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c162:	d009      	beq.n	800c178 <TIM_SlaveTimer_SetConfig+0x29c>
 800c164:	f033 0202 	bics.w	r2, r3, #2
 800c168:	d006      	beq.n	800c178 <TIM_SlaveTimer_SetConfig+0x29c>
 800c16a:	2b0a      	cmp	r3, #10
 800c16c:	d004      	beq.n	800c178 <TIM_SlaveTimer_SetConfig+0x29c>
 800c16e:	f241 71e6 	movw	r1, #6118	; 0x17e6
 800c172:	4811      	ldr	r0, [pc, #68]	; (800c1b8 <TIM_SlaveTimer_SetConfig+0x2dc>)
 800c174:	f002 fffc 	bl	800f170 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800c178:	6923      	ldr	r3, [r4, #16]
 800c17a:	2b0f      	cmp	r3, #15
 800c17c:	d904      	bls.n	800c188 <TIM_SlaveTimer_SetConfig+0x2ac>
 800c17e:	f241 71e7 	movw	r1, #6119	; 0x17e7
 800c182:	480d      	ldr	r0, [pc, #52]	; (800c1b8 <TIM_SlaveTimer_SetConfig+0x2dc>)
 800c184:	f002 fff4 	bl	800f170 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c188:	682b      	ldr	r3, [r5, #0]
 800c18a:	68a5      	ldr	r5, [r4, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c18c:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c18e:	6924      	ldr	r4, [r4, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c190:	f020 0010 	bic.w	r0, r0, #16
 800c194:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c196:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800c198:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c19a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c19e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c1a2:	ea41 3104 	orr.w	r1, r1, r4, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800c1a6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800c1aa:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800c1ac:	621a      	str	r2, [r3, #32]
 800c1ae:	bd70      	pop	{r4, r5, r6, pc}
 800c1b0:	bd70      	pop	{r4, r5, r6, pc}
 800c1b2:	bf00      	nop
 800c1b4:	40012c00 	.word	0x40012c00
 800c1b8:	080176e2 	.word	0x080176e2

0800c1bc <HAL_TIM_SlaveConfigSynchronization>:
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800c1bc:	6803      	ldr	r3, [r0, #0]
 800c1be:	4a2b      	ldr	r2, [pc, #172]	; (800c26c <HAL_TIM_SlaveConfigSynchronization+0xb0>)
 800c1c0:	4293      	cmp	r3, r2
{
 800c1c2:	b570      	push	{r4, r5, r6, lr}
 800c1c4:	4604      	mov	r4, r0
 800c1c6:	460d      	mov	r5, r1
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800c1c8:	d01b      	beq.n	800c202 <HAL_TIM_SlaveConfigSynchronization+0x46>
 800c1ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1ce:	d018      	beq.n	800c202 <HAL_TIM_SlaveConfigSynchronization+0x46>
 800c1d0:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800c1d4:	4293      	cmp	r3, r2
 800c1d6:	d014      	beq.n	800c202 <HAL_TIM_SlaveConfigSynchronization+0x46>
 800c1d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c1dc:	4293      	cmp	r3, r2
 800c1de:	d010      	beq.n	800c202 <HAL_TIM_SlaveConfigSynchronization+0x46>
 800c1e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	d00c      	beq.n	800c202 <HAL_TIM_SlaveConfigSynchronization+0x46>
 800c1e8:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800c1ec:	4293      	cmp	r3, r2
 800c1ee:	d008      	beq.n	800c202 <HAL_TIM_SlaveConfigSynchronization+0x46>
 800c1f0:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800c1f4:	4293      	cmp	r3, r2
 800c1f6:	d004      	beq.n	800c202 <HAL_TIM_SlaveConfigSynchronization+0x46>
 800c1f8:	f241 214c 	movw	r1, #4684	; 0x124c
 800c1fc:	481c      	ldr	r0, [pc, #112]	; (800c270 <HAL_TIM_SlaveConfigSynchronization+0xb4>)
 800c1fe:	f002 ffb7 	bl	800f170 <assert_failed>
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 800c202:	682b      	ldr	r3, [r5, #0]
 800c204:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 800c208:	d007      	beq.n	800c21a <HAL_TIM_SlaveConfigSynchronization+0x5e>
 800c20a:	3b04      	subs	r3, #4
 800c20c:	2b03      	cmp	r3, #3
 800c20e:	d904      	bls.n	800c21a <HAL_TIM_SlaveConfigSynchronization+0x5e>
 800c210:	f241 214d 	movw	r1, #4685	; 0x124d
 800c214:	4816      	ldr	r0, [pc, #88]	; (800c270 <HAL_TIM_SlaveConfigSynchronization+0xb4>)
 800c216:	f002 ffab 	bl	800f170 <assert_failed>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 800c21a:	686b      	ldr	r3, [r5, #4]
 800c21c:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800c220:	d006      	beq.n	800c230 <HAL_TIM_SlaveConfigSynchronization+0x74>
 800c222:	2b40      	cmp	r3, #64	; 0x40
 800c224:	d004      	beq.n	800c230 <HAL_TIM_SlaveConfigSynchronization+0x74>
 800c226:	f241 214e 	movw	r1, #4686	; 0x124e
 800c22a:	4811      	ldr	r0, [pc, #68]	; (800c270 <HAL_TIM_SlaveConfigSynchronization+0xb4>)
 800c22c:	f002 ffa0 	bl	800f170 <assert_failed>
  __HAL_LOCK(htim);
 800c230:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800c234:	2b01      	cmp	r3, #1
 800c236:	f04f 0002 	mov.w	r0, #2
 800c23a:	d016      	beq.n	800c26a <HAL_TIM_SlaveConfigSynchronization+0xae>
 800c23c:	2601      	movs	r6, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800c23e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 800c242:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 800c246:	4620      	mov	r0, r4
 800c248:	4629      	mov	r1, r5
 800c24a:	f7ff fe47 	bl	800bedc <TIM_SlaveTimer_SetConfig>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800c24e:	6823      	ldr	r3, [r4, #0]
 800c250:	68da      	ldr	r2, [r3, #12]
 800c252:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c256:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800c258:	68da      	ldr	r2, [r3, #12]
  __HAL_UNLOCK(htim);
 800c25a:	2000      	movs	r0, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800c25c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c260:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 800c262:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800c266:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800c26a:	bd70      	pop	{r4, r5, r6, pc}
 800c26c:	40012c00 	.word	0x40012c00
 800c270:	080176e2 	.word	0x080176e2

0800c274 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 800c276:	4a3d      	ldr	r2, [pc, #244]	; (800c36c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c278:	6803      	ldr	r3, [r0, #0]
 800c27a:	4293      	cmp	r3, r2
{
 800c27c:	4605      	mov	r5, r0
 800c27e:	460e      	mov	r6, r1
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 800c280:	d023      	beq.n	800c2ca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800c282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c286:	d020      	beq.n	800c2ca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800c288:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800c28c:	4293      	cmp	r3, r2
 800c28e:	d01c      	beq.n	800c2ca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800c290:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c294:	4293      	cmp	r3, r2
 800c296:	d018      	beq.n	800c2ca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800c298:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c29c:	4293      	cmp	r3, r2
 800c29e:	d014      	beq.n	800c2ca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800c2a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c2a4:	4293      	cmp	r3, r2
 800c2a6:	d010      	beq.n	800c2ca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800c2a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d00c      	beq.n	800c2ca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800c2b0:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 800c2b4:	4293      	cmp	r3, r2
 800c2b6:	d008      	beq.n	800c2ca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800c2b8:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800c2bc:	4293      	cmp	r3, r2
 800c2be:	d004      	beq.n	800c2ca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800c2c0:	f240 613e 	movw	r1, #1598	; 0x63e
 800c2c4:	482a      	ldr	r0, [pc, #168]	; (800c370 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c2c6:	f002 ff53 	bl	800f170 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800c2ca:	6833      	ldr	r3, [r6, #0]
 800c2cc:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800c2d0:	d006      	beq.n	800c2e0 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 800c2d2:	2b40      	cmp	r3, #64	; 0x40
 800c2d4:	d004      	beq.n	800c2e0 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 800c2d6:	f240 613f 	movw	r1, #1599	; 0x63f
 800c2da:	4825      	ldr	r0, [pc, #148]	; (800c370 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c2dc:	f002 ff48 	bl	800f170 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800c2e0:	68b3      	ldr	r3, [r6, #8]
 800c2e2:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800c2e6:	d004      	beq.n	800c2f2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800c2e8:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800c2ec:	4820      	ldr	r0, [pc, #128]	; (800c370 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c2ee:	f002 ff3f 	bl	800f170 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800c2f2:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800c2f6:	2b01      	cmp	r3, #1
 800c2f8:	f04f 0002 	mov.w	r0, #2
 800c2fc:	d035      	beq.n	800c36a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
 800c2fe:	2301      	movs	r3, #1
 800c300:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c304:	4a19      	ldr	r2, [pc, #100]	; (800c36c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
  tmpcr2 = htim->Instance->CR2;
 800c306:	682b      	ldr	r3, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800c308:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c30c:	4293      	cmp	r3, r2
  tmpcr2 = htim->Instance->CR2;
 800c30e:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800c310:	689f      	ldr	r7, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c312:	d003      	beq.n	800c31c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800c314:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c318:	4293      	cmp	r3, r2
 800c31a:	d115      	bne.n	800c348 <HAL_TIMEx_MasterConfigSynchronization+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800c31c:	6873      	ldr	r3, [r6, #4]
 800c31e:	f433 1340 	bics.w	r3, r3, #3145728	; 0x300000
 800c322:	d00d      	beq.n	800c340 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800c324:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c328:	d00a      	beq.n	800c340 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800c32a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c32e:	d007      	beq.n	800c340 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800c330:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c334:	d004      	beq.n	800c340 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800c336:	f240 6152 	movw	r1, #1618	; 0x652
 800c33a:	480d      	ldr	r0, [pc, #52]	; (800c370 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c33c:	f002 ff18 	bl	800f170 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c340:	6873      	ldr	r3, [r6, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c342:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c346:	431c      	orrs	r4, r3
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c348:	6833      	ldr	r3, [r6, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800c34a:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c34e:	431c      	orrs	r4, r3

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c350:	68b3      	ldr	r3, [r6, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 800c352:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c356:	431f      	orrs	r7, r3

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c358:	682b      	ldr	r3, [r5, #0]
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800c35a:	2000      	movs	r0, #0
  htim->Instance->CR2 = tmpcr2;
 800c35c:	605c      	str	r4, [r3, #4]
  htim->Instance->SMCR = tmpsmcr;
 800c35e:	609f      	str	r7, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 800c360:	2301      	movs	r3, #1
 800c362:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800c366:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c

  return HAL_OK;
}
 800c36a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c36c:	40012c00 	.word	0x40012c00
 800c370:	0801771a 	.word	0x0801771a

0800c374 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t usartdiv                   = 0x00000000U;
  HAL_StatusTypeDef ret               = HAL_OK;
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800c376:	6842      	ldr	r2, [r0, #4]
 800c378:	4bb5      	ldr	r3, [pc, #724]	; (800c650 <UART_SetConfig+0x2dc>)
 800c37a:	429a      	cmp	r2, r3
{
 800c37c:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800c37e:	d904      	bls.n	800c38a <UART_SetConfig+0x16>
 800c380:	f640 21ec 	movw	r1, #2796	; 0xaec
 800c384:	48b3      	ldr	r0, [pc, #716]	; (800c654 <UART_SetConfig+0x2e0>)
 800c386:	f002 fef3 	bl	800f170 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800c38a:	68a3      	ldr	r3, [r4, #8]
 800c38c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c390:	d007      	beq.n	800c3a2 <UART_SetConfig+0x2e>
 800c392:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800c396:	d004      	beq.n	800c3a2 <UART_SetConfig+0x2e>
 800c398:	f640 21ed 	movw	r1, #2797	; 0xaed
 800c39c:	48ad      	ldr	r0, [pc, #692]	; (800c654 <UART_SetConfig+0x2e0>)
 800c39e:	f002 fee7 	bl	800f170 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 800c3a2:	4bad      	ldr	r3, [pc, #692]	; (800c658 <UART_SetConfig+0x2e4>)
 800c3a4:	6822      	ldr	r2, [r4, #0]
 800c3a6:	429a      	cmp	r2, r3
 800c3a8:	68e3      	ldr	r3, [r4, #12]
 800c3aa:	d16a      	bne.n	800c482 <UART_SetConfig+0x10e>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 800c3ac:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800c3b0:	d004      	beq.n	800c3bc <UART_SetConfig+0x48>
 800c3b2:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800c3b6:	48a7      	ldr	r0, [pc, #668]	; (800c654 <UART_SetConfig+0x2e0>)
 800c3b8:	f002 feda 	bl	800f170 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800c3bc:	6923      	ldr	r3, [r4, #16]
 800c3be:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800c3c2:	d007      	beq.n	800c3d4 <UART_SetConfig+0x60>
 800c3c4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c3c8:	d004      	beq.n	800c3d4 <UART_SetConfig+0x60>
 800c3ca:	f640 21f8 	movw	r1, #2808	; 0xaf8
 800c3ce:	48a1      	ldr	r0, [pc, #644]	; (800c654 <UART_SetConfig+0x2e0>)
 800c3d0:	f002 fece 	bl	800f170 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800c3d4:	6963      	ldr	r3, [r4, #20]
 800c3d6:	f033 020c 	bics.w	r2, r3, #12
 800c3da:	d100      	bne.n	800c3de <UART_SetConfig+0x6a>
 800c3dc:	b923      	cbnz	r3, 800c3e8 <UART_SetConfig+0x74>
 800c3de:	f640 21f9 	movw	r1, #2809	; 0xaf9
 800c3e2:	489c      	ldr	r0, [pc, #624]	; (800c654 <UART_SetConfig+0x2e0>)
 800c3e4:	f002 fec4 	bl	800f170 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800c3e8:	69a3      	ldr	r3, [r4, #24]
 800c3ea:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 800c3ee:	d004      	beq.n	800c3fa <UART_SetConfig+0x86>
 800c3f0:	f640 21fa 	movw	r1, #2810	; 0xafa
 800c3f4:	4897      	ldr	r0, [pc, #604]	; (800c654 <UART_SetConfig+0x2e0>)
 800c3f6:	f002 febb 	bl	800f170 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800c3fa:	69e3      	ldr	r3, [r4, #28]
 800c3fc:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800c400:	d004      	beq.n	800c40c <UART_SetConfig+0x98>
 800c402:	f640 21fb 	movw	r1, #2811	; 0xafb
 800c406:	4893      	ldr	r0, [pc, #588]	; (800c654 <UART_SetConfig+0x2e0>)
 800c408:	f002 feb2 	bl	800f170 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c40c:	6920      	ldr	r0, [r4, #16]
 800c40e:	68a3      	ldr	r3, [r4, #8]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c410:	6822      	ldr	r2, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c412:	69e1      	ldr	r1, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c414:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c416:	4303      	orrs	r3, r0
 800c418:	6960      	ldr	r0, [r4, #20]
 800c41a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c41c:	488f      	ldr	r0, [pc, #572]	; (800c65c <UART_SetConfig+0x2e8>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c41e:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c420:	4028      	ands	r0, r5
 800c422:	4303      	orrs	r3, r0
 800c424:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c426:	6853      	ldr	r3, [r2, #4]
 800c428:	68e0      	ldr	r0, [r4, #12]
 800c42a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800c42e:	4303      	orrs	r3, r0
 800c430:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c432:	4b89      	ldr	r3, [pc, #548]	; (800c658 <UART_SetConfig+0x2e4>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c434:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c436:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c438:	bf1c      	itt	ne
 800c43a:	6a23      	ldrne	r3, [r4, #32]
 800c43c:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c43e:	6893      	ldr	r3, [r2, #8]
 800c440:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800c444:	4303      	orrs	r3, r0
 800c446:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c448:	4b85      	ldr	r3, [pc, #532]	; (800c660 <UART_SetConfig+0x2ec>)
 800c44a:	429a      	cmp	r2, r3
 800c44c:	d128      	bne.n	800c4a0 <UART_SetConfig+0x12c>
 800c44e:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800c452:	4a84      	ldr	r2, [pc, #528]	; (800c664 <UART_SetConfig+0x2f0>)
 800c454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c458:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c45c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800c460:	5cd3      	ldrb	r3, [r2, r3]
 800c462:	f040 8167 	bne.w	800c734 <UART_SetConfig+0x3c0>
  {
    switch (clocksource)
 800c466:	2b08      	cmp	r3, #8
 800c468:	f200 814e 	bhi.w	800c708 <UART_SetConfig+0x394>
 800c46c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c470:	010c005c 	.word	0x010c005c
 800c474:	014c0159 	.word	0x014c0159
 800c478:	014c013c 	.word	0x014c013c
 800c47c:	014c014c 	.word	0x014c014c
 800c480:	0042      	.short	0x0042
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800c482:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800c486:	d004      	beq.n	800c492 <UART_SetConfig+0x11e>
 800c488:	f640 21f4 	movw	r1, #2804	; 0xaf4
 800c48c:	4871      	ldr	r0, [pc, #452]	; (800c654 <UART_SetConfig+0x2e0>)
 800c48e:	f002 fe6f 	bl	800f170 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800c492:	6a23      	ldr	r3, [r4, #32]
 800c494:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800c498:	d090      	beq.n	800c3bc <UART_SetConfig+0x48>
 800c49a:	f640 21f5 	movw	r1, #2805	; 0xaf5
 800c49e:	e78a      	b.n	800c3b6 <UART_SetConfig+0x42>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c4a0:	4b71      	ldr	r3, [pc, #452]	; (800c668 <UART_SetConfig+0x2f4>)
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d107      	bne.n	800c4b6 <UART_SetConfig+0x142>
 800c4a6:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 800c4aa:	4a70      	ldr	r2, [pc, #448]	; (800c66c <UART_SetConfig+0x2f8>)
 800c4ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4b0:	f003 030c 	and.w	r3, r3, #12
 800c4b4:	e7d2      	b.n	800c45c <UART_SetConfig+0xe8>
 800c4b6:	4b6e      	ldr	r3, [pc, #440]	; (800c670 <UART_SetConfig+0x2fc>)
 800c4b8:	429a      	cmp	r2, r3
 800c4ba:	d120      	bne.n	800c4fe <UART_SetConfig+0x18a>
 800c4bc:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 800c4c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4c4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c4c8:	2b10      	cmp	r3, #16
 800c4ca:	f000 810a 	beq.w	800c6e2 <UART_SetConfig+0x36e>
 800c4ce:	d808      	bhi.n	800c4e2 <UART_SetConfig+0x16e>
 800c4d0:	b333      	cbz	r3, 800c520 <UART_SetConfig+0x1ac>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c4d2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800c4d6:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 800c4da:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c4de:	d02d      	beq.n	800c53c <UART_SetConfig+0x1c8>
 800c4e0:	e0de      	b.n	800c6a0 <UART_SetConfig+0x32c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c4e2:	2b20      	cmp	r3, #32
 800c4e4:	f000 811a 	beq.w	800c71c <UART_SetConfig+0x3a8>
 800c4e8:	2b30      	cmp	r3, #48	; 0x30
 800c4ea:	d1f2      	bne.n	800c4d2 <UART_SetConfig+0x15e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c4ec:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800c4f0:	f040 80ee 	bne.w	800c6d0 <UART_SetConfig+0x35c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800c4f4:	6860      	ldr	r0, [r4, #4]
 800c4f6:	0843      	lsrs	r3, r0, #1
 800c4f8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c4fc:	e117      	b.n	800c72e <UART_SetConfig+0x3ba>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c4fe:	4b5d      	ldr	r3, [pc, #372]	; (800c674 <UART_SetConfig+0x300>)
 800c500:	429a      	cmp	r2, r3
 800c502:	d134      	bne.n	800c56e <UART_SetConfig+0x1fa>
 800c504:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 800c508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c50c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c510:	2b40      	cmp	r3, #64	; 0x40
 800c512:	f000 80e2 	beq.w	800c6da <UART_SetConfig+0x366>
 800c516:	d820      	bhi.n	800c55a <UART_SetConfig+0x1e6>
 800c518:	bb2b      	cbnz	r3, 800c566 <UART_SetConfig+0x1f2>
  if (UART_INSTANCE_LOWPOWER(huart))
 800c51a:	4b4f      	ldr	r3, [pc, #316]	; (800c658 <UART_SetConfig+0x2e4>)
 800c51c:	429a      	cmp	r2, r3
 800c51e:	d050      	beq.n	800c5c2 <UART_SetConfig+0x24e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c520:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800c524:	f040 80b3 	bne.w	800c68e <UART_SetConfig+0x31a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800c528:	f7fe fd84 	bl	800b034 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800c52c:	6861      	ldr	r1, [r4, #4]
 800c52e:	084a      	lsrs	r2, r1, #1
 800c530:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 800c534:	fbb3 f3f1 	udiv	r3, r3, r1
 800c538:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800c53a:	2200      	movs	r2, #0
        break;
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c53c:	f1a3 0010 	sub.w	r0, r3, #16
 800c540:	f64f 71ef 	movw	r1, #65519	; 0xffef
 800c544:	4288      	cmp	r0, r1
 800c546:	f200 80df 	bhi.w	800c708 <UART_SetConfig+0x394>
    {
      brrtemp = usartdiv & 0xFFF0U;
 800c54a:	f023 010f 	bic.w	r1, r3, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
      huart->Instance->BRR = brrtemp;
 800c54e:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c550:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 800c554:	430b      	orrs	r3, r1
 800c556:	60c3      	str	r3, [r0, #12]
 800c558:	e0d7      	b.n	800c70a <UART_SetConfig+0x396>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c55a:	2b80      	cmp	r3, #128	; 0x80
 800c55c:	f000 80da 	beq.w	800c714 <UART_SetConfig+0x3a0>
 800c560:	2bc0      	cmp	r3, #192	; 0xc0
 800c562:	f000 80c4 	beq.w	800c6ee <UART_SetConfig+0x37a>
  if (UART_INSTANCE_LOWPOWER(huart))
 800c566:	4b3c      	ldr	r3, [pc, #240]	; (800c658 <UART_SetConfig+0x2e4>)
 800c568:	429a      	cmp	r2, r3
 800c56a:	d1b2      	bne.n	800c4d2 <UART_SetConfig+0x15e>
 800c56c:	e0cc      	b.n	800c708 <UART_SetConfig+0x394>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c56e:	4b42      	ldr	r3, [pc, #264]	; (800c678 <UART_SetConfig+0x304>)
 800c570:	429a      	cmp	r2, r3
 800c572:	d111      	bne.n	800c598 <UART_SetConfig+0x224>
 800c574:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 800c578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c57c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c580:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c584:	f000 80a9 	beq.w	800c6da <UART_SetConfig+0x366>
 800c588:	d9c6      	bls.n	800c518 <UART_SetConfig+0x1a4>
 800c58a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c58e:	f000 80c1 	beq.w	800c714 <UART_SetConfig+0x3a0>
 800c592:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c596:	e7e4      	b.n	800c562 <UART_SetConfig+0x1ee>
 800c598:	4b2f      	ldr	r3, [pc, #188]	; (800c658 <UART_SetConfig+0x2e4>)
 800c59a:	429a      	cmp	r2, r3
 800c59c:	d199      	bne.n	800c4d2 <UART_SetConfig+0x15e>
 800c59e:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 800c5a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5a6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c5aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c5ae:	f000 8094 	beq.w	800c6da <UART_SetConfig+0x366>
 800c5b2:	d9b1      	bls.n	800c518 <UART_SetConfig+0x1a4>
 800c5b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c5b8:	f000 80ac 	beq.w	800c714 <UART_SetConfig+0x3a0>
 800c5bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c5c0:	e7cf      	b.n	800c562 <UART_SetConfig+0x1ee>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800c5c2:	f7fe fd37 	bl	800b034 <HAL_RCC_GetPCLK1Freq>
        break;
 800c5c6:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 800c5c8:	2800      	cmp	r0, #0
 800c5ca:	f040 8097 	bne.w	800c6fc <UART_SetConfig+0x388>
 800c5ce:	4602      	mov	r2, r0
 800c5d0:	e09b      	b.n	800c70a <UART_SetConfig+0x396>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800c5d2:	f7fe f921 	bl	800a818 <HAL_RCC_GetSysClockFreq>
        break;
 800c5d6:	2304      	movs	r3, #4
 800c5d8:	e7f6      	b.n	800c5c8 <UART_SetConfig+0x254>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800c5da:	4828      	ldr	r0, [pc, #160]	; (800c67c <UART_SetConfig+0x308>)
  if (UART_INSTANCE_LOWPOWER(huart))
 800c5dc:	2302      	movs	r3, #2
 800c5de:	e08d      	b.n	800c6fc <UART_SetConfig+0x388>
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 800c5e0:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800c5e4:	f200 8090 	bhi.w	800c708 <UART_SetConfig+0x394>
        switch (clocksource)
 800c5e8:	2b08      	cmp	r3, #8
 800c5ea:	d82e      	bhi.n	800c64a <UART_SetConfig+0x2d6>
 800c5ec:	e8df f003 	tbb	[pc, r3]
 800c5f0:	2d1c2d05 	.word	0x2d1c2d05
 800c5f4:	2d2d2d24 	.word	0x2d2d2d24
 800c5f8:	27          	.byte	0x27
 800c5f9:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800c5fa:	f7fe fd1b 	bl	800b034 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800c5fe:	6862      	ldr	r2, [r4, #4]
 800c600:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c604:	0856      	lsrs	r6, r2, #1
 800c606:	2700      	movs	r7, #0
 800c608:	fbe1 6700 	umlal	r6, r7, r1, r0
 800c60c:	2300      	movs	r3, #0
 800c60e:	4630      	mov	r0, r6
 800c610:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800c612:	f7fa fe77 	bl	8007304 <__aeabi_uldivmod>
            break;
 800c616:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c618:	4b19      	ldr	r3, [pc, #100]	; (800c680 <UART_SetConfig+0x30c>)
 800c61a:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 800c61e:	4299      	cmp	r1, r3
 800c620:	d872      	bhi.n	800c708 <UART_SetConfig+0x394>
          huart->Instance->BRR = usartdiv;
 800c622:	6823      	ldr	r3, [r4, #0]
 800c624:	60d8      	str	r0, [r3, #12]
 800c626:	e070      	b.n	800c70a <UART_SetConfig+0x396>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800c628:	4816      	ldr	r0, [pc, #88]	; (800c684 <UART_SetConfig+0x310>)
 800c62a:	0855      	lsrs	r5, r2, #1
 800c62c:	2300      	movs	r3, #0
 800c62e:	2100      	movs	r1, #0
 800c630:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800c632:	f141 0100 	adc.w	r1, r1, #0
 800c636:	e7ec      	b.n	800c612 <UART_SetConfig+0x29e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800c638:	f7fe f8ee 	bl	800a818 <HAL_RCC_GetSysClockFreq>
 800c63c:	e7df      	b.n	800c5fe <UART_SetConfig+0x28a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800c63e:	0850      	lsrs	r0, r2, #1
 800c640:	2100      	movs	r1, #0
 800c642:	2300      	movs	r3, #0
 800c644:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 800c648:	e7f3      	b.n	800c632 <UART_SetConfig+0x2be>
            ret = HAL_ERROR;
 800c64a:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 800c64c:	2000      	movs	r0, #0
 800c64e:	e7e3      	b.n	800c618 <UART_SetConfig+0x2a4>
 800c650:	00989680 	.word	0x00989680
 800c654:	08017766 	.word	0x08017766
 800c658:	40008000 	.word	0x40008000
 800c65c:	efff69f3 	.word	0xefff69f3
 800c660:	40013800 	.word	0x40013800
 800c664:	08017755 	.word	0x08017755
 800c668:	40004400 	.word	0x40004400
 800c66c:	08017759 	.word	0x08017759
 800c670:	40004800 	.word	0x40004800
 800c674:	40004c00 	.word	0x40004c00
 800c678:	40005000 	.word	0x40005000
 800c67c:	00f42400 	.word	0x00f42400
 800c680:	000ffcff 	.word	0x000ffcff
 800c684:	f4240000 	.word	0xf4240000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800c688:	f7fe fce6 	bl	800b058 <HAL_RCC_GetPCLK2Freq>
 800c68c:	e74e      	b.n	800c52c <UART_SetConfig+0x1b8>
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800c68e:	f7fe fcd1 	bl	800b034 <HAL_RCC_GetPCLK1Freq>
        break;
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800c692:	6862      	ldr	r2, [r4, #4]
 800c694:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800c698:	fbb3 f3f2 	udiv	r3, r3, r2
 800c69c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800c69e:	2200      	movs	r2, #0
        ret = HAL_ERROR;
        break;
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c6a0:	f1a3 0010 	sub.w	r0, r3, #16
 800c6a4:	f64f 71ef 	movw	r1, #65519	; 0xffef
 800c6a8:	4288      	cmp	r0, r1
 800c6aa:	d82d      	bhi.n	800c708 <UART_SetConfig+0x394>
    {
      huart->Instance->BRR = usartdiv;
 800c6ac:	6821      	ldr	r1, [r4, #0]
 800c6ae:	60cb      	str	r3, [r1, #12]
 800c6b0:	e02b      	b.n	800c70a <UART_SetConfig+0x396>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800c6b2:	f7fe fcd1 	bl	800b058 <HAL_RCC_GetPCLK2Freq>
 800c6b6:	e7ec      	b.n	800c692 <UART_SetConfig+0x31e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800c6b8:	6860      	ldr	r0, [r4, #4]
 800c6ba:	0843      	lsrs	r3, r0, #1
 800c6bc:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800c6c0:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800c6c4:	fbb3 f3f0 	udiv	r3, r3, r0
 800c6c8:	e7e8      	b.n	800c69c <UART_SetConfig+0x328>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800c6ca:	f7fe f8a5 	bl	800a818 <HAL_RCC_GetSysClockFreq>
 800c6ce:	e7e0      	b.n	800c692 <UART_SetConfig+0x31e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800c6d0:	6860      	ldr	r0, [r4, #4]
 800c6d2:	0843      	lsrs	r3, r0, #1
 800c6d4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c6d8:	e7f4      	b.n	800c6c4 <UART_SetConfig+0x350>
  if (UART_INSTANCE_LOWPOWER(huart))
 800c6da:	4b22      	ldr	r3, [pc, #136]	; (800c764 <UART_SetConfig+0x3f0>)
 800c6dc:	429a      	cmp	r2, r3
 800c6de:	f43f af78 	beq.w	800c5d2 <UART_SetConfig+0x25e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c6e2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800c6e6:	d1f0      	bne.n	800c6ca <UART_SetConfig+0x356>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800c6e8:	f7fe f896 	bl	800a818 <HAL_RCC_GetSysClockFreq>
 800c6ec:	e71e      	b.n	800c52c <UART_SetConfig+0x1b8>
  if (UART_INSTANCE_LOWPOWER(huart))
 800c6ee:	4b1d      	ldr	r3, [pc, #116]	; (800c764 <UART_SetConfig+0x3f0>)
 800c6f0:	429a      	cmp	r2, r3
 800c6f2:	f47f aefb 	bne.w	800c4ec <UART_SetConfig+0x178>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800c6f6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 800c6fa:	2308      	movs	r3, #8
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 800c6fc:	6862      	ldr	r2, [r4, #4]
 800c6fe:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800c702:	4281      	cmp	r1, r0
 800c704:	f67f af6c 	bls.w	800c5e0 <UART_SetConfig+0x26c>
        ret = HAL_ERROR;
 800c708:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c70a:	2300      	movs	r3, #0
 800c70c:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800c70e:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 800c710:	4610      	mov	r0, r2
 800c712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (UART_INSTANCE_LOWPOWER(huart))
 800c714:	4b13      	ldr	r3, [pc, #76]	; (800c764 <UART_SetConfig+0x3f0>)
 800c716:	429a      	cmp	r2, r3
 800c718:	f43f af5f 	beq.w	800c5da <UART_SetConfig+0x266>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c71c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800c720:	d1ca      	bne.n	800c6b8 <UART_SetConfig+0x344>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800c722:	6860      	ldr	r0, [r4, #4]
 800c724:	0843      	lsrs	r3, r0, #1
 800c726:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800c72a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800c72e:	fbb3 f3f0 	udiv	r3, r3, r0
 800c732:	e701      	b.n	800c538 <UART_SetConfig+0x1c4>
    switch (clocksource)
 800c734:	2b08      	cmp	r3, #8
 800c736:	d8e7      	bhi.n	800c708 <UART_SetConfig+0x394>
 800c738:	a201      	add	r2, pc, #4	; (adr r2, 800c740 <UART_SetConfig+0x3cc>)
 800c73a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c73e:	bf00      	nop
 800c740:	0800c68f 	.word	0x0800c68f
 800c744:	0800c6b3 	.word	0x0800c6b3
 800c748:	0800c6b9 	.word	0x0800c6b9
 800c74c:	0800c709 	.word	0x0800c709
 800c750:	0800c6cb 	.word	0x0800c6cb
 800c754:	0800c709 	.word	0x0800c709
 800c758:	0800c709 	.word	0x0800c709
 800c75c:	0800c709 	.word	0x0800c709
 800c760:	0800c6d1 	.word	0x0800c6d1
 800c764:	40008000 	.word	0x40008000

0800c768 <UART_AdvFeatureConfig>:
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800c768:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c76a:	2bff      	cmp	r3, #255	; 0xff
{
 800c76c:	b510      	push	{r4, lr}
 800c76e:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800c770:	d904      	bls.n	800c77c <UART_AdvFeatureConfig+0x14>
 800c772:	f640 4114 	movw	r1, #3092	; 0xc14
 800c776:	4864      	ldr	r0, [pc, #400]	; (800c908 <UART_AdvFeatureConfig+0x1a0>)
 800c778:	f002 fcfa 	bl	800f170 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c77c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c77e:	07d8      	lsls	r0, r3, #31
 800c780:	d50f      	bpl.n	800c7a2 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800c782:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c784:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 800c788:	d004      	beq.n	800c794 <UART_AdvFeatureConfig+0x2c>
 800c78a:	f640 4119 	movw	r1, #3097	; 0xc19
 800c78e:	485e      	ldr	r0, [pc, #376]	; (800c908 <UART_AdvFeatureConfig+0x1a0>)
 800c790:	f002 fcee 	bl	800f170 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c794:	6822      	ldr	r2, [r4, #0]
 800c796:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800c798:	6853      	ldr	r3, [r2, #4]
 800c79a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c79e:	430b      	orrs	r3, r1
 800c7a0:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c7a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7a4:	0799      	lsls	r1, r3, #30
 800c7a6:	d50f      	bpl.n	800c7c8 <UART_AdvFeatureConfig+0x60>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800c7a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c7aa:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800c7ae:	d004      	beq.n	800c7ba <UART_AdvFeatureConfig+0x52>
 800c7b0:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 800c7b4:	4854      	ldr	r0, [pc, #336]	; (800c908 <UART_AdvFeatureConfig+0x1a0>)
 800c7b6:	f002 fcdb 	bl	800f170 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c7ba:	6822      	ldr	r2, [r4, #0]
 800c7bc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c7be:	6853      	ldr	r3, [r2, #4]
 800c7c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c7c4:	430b      	orrs	r3, r1
 800c7c6:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c7c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7ca:	075a      	lsls	r2, r3, #29
 800c7cc:	d50f      	bpl.n	800c7ee <UART_AdvFeatureConfig+0x86>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800c7ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c7d0:	f433 2380 	bics.w	r3, r3, #262144	; 0x40000
 800c7d4:	d004      	beq.n	800c7e0 <UART_AdvFeatureConfig+0x78>
 800c7d6:	f640 4127 	movw	r1, #3111	; 0xc27
 800c7da:	484b      	ldr	r0, [pc, #300]	; (800c908 <UART_AdvFeatureConfig+0x1a0>)
 800c7dc:	f002 fcc8 	bl	800f170 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c7e0:	6822      	ldr	r2, [r4, #0]
 800c7e2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c7e4:	6853      	ldr	r3, [r2, #4]
 800c7e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c7ea:	430b      	orrs	r3, r1
 800c7ec:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c7ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7f0:	071b      	lsls	r3, r3, #28
 800c7f2:	d50f      	bpl.n	800c814 <UART_AdvFeatureConfig+0xac>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800c7f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c7f6:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800c7fa:	d004      	beq.n	800c806 <UART_AdvFeatureConfig+0x9e>
 800c7fc:	f640 412e 	movw	r1, #3118	; 0xc2e
 800c800:	4841      	ldr	r0, [pc, #260]	; (800c908 <UART_AdvFeatureConfig+0x1a0>)
 800c802:	f002 fcb5 	bl	800f170 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c806:	6822      	ldr	r2, [r4, #0]
 800c808:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c80a:	6853      	ldr	r3, [r2, #4]
 800c80c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c810:	430b      	orrs	r3, r1
 800c812:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c814:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c816:	06d8      	lsls	r0, r3, #27
 800c818:	d50f      	bpl.n	800c83a <UART_AdvFeatureConfig+0xd2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800c81a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c81c:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800c820:	d004      	beq.n	800c82c <UART_AdvFeatureConfig+0xc4>
 800c822:	f640 4135 	movw	r1, #3125	; 0xc35
 800c826:	4838      	ldr	r0, [pc, #224]	; (800c908 <UART_AdvFeatureConfig+0x1a0>)
 800c828:	f002 fca2 	bl	800f170 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c82c:	6822      	ldr	r2, [r4, #0]
 800c82e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c830:	6893      	ldr	r3, [r2, #8]
 800c832:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c836:	430b      	orrs	r3, r1
 800c838:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c83a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c83c:	0699      	lsls	r1, r3, #26
 800c83e:	d50f      	bpl.n	800c860 <UART_AdvFeatureConfig+0xf8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800c840:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c842:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800c846:	d004      	beq.n	800c852 <UART_AdvFeatureConfig+0xea>
 800c848:	f640 413c 	movw	r1, #3132	; 0xc3c
 800c84c:	482e      	ldr	r0, [pc, #184]	; (800c908 <UART_AdvFeatureConfig+0x1a0>)
 800c84e:	f002 fc8f 	bl	800f170 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c852:	6822      	ldr	r2, [r4, #0]
 800c854:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c856:	6893      	ldr	r3, [r2, #8]
 800c858:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c85c:	430b      	orrs	r3, r1
 800c85e:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c860:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c862:	065a      	lsls	r2, r3, #25
 800c864:	d53b      	bpl.n	800c8de <UART_AdvFeatureConfig+0x176>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800c866:	6823      	ldr	r3, [r4, #0]
 800c868:	4a28      	ldr	r2, [pc, #160]	; (800c90c <UART_AdvFeatureConfig+0x1a4>)
 800c86a:	4293      	cmp	r3, r2
 800c86c:	d014      	beq.n	800c898 <UART_AdvFeatureConfig+0x130>
 800c86e:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 800c872:	4293      	cmp	r3, r2
 800c874:	d010      	beq.n	800c898 <UART_AdvFeatureConfig+0x130>
 800c876:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d00c      	beq.n	800c898 <UART_AdvFeatureConfig+0x130>
 800c87e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c882:	4293      	cmp	r3, r2
 800c884:	d008      	beq.n	800c898 <UART_AdvFeatureConfig+0x130>
 800c886:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c88a:	4293      	cmp	r3, r2
 800c88c:	d004      	beq.n	800c898 <UART_AdvFeatureConfig+0x130>
 800c88e:	f640 4143 	movw	r1, #3139	; 0xc43
 800c892:	481d      	ldr	r0, [pc, #116]	; (800c908 <UART_AdvFeatureConfig+0x1a0>)
 800c894:	f002 fc6c 	bl	800f170 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800c898:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c89a:	f433 1380 	bics.w	r3, r3, #1048576	; 0x100000
 800c89e:	d004      	beq.n	800c8aa <UART_AdvFeatureConfig+0x142>
 800c8a0:	f640 4144 	movw	r1, #3140	; 0xc44
 800c8a4:	4818      	ldr	r0, [pc, #96]	; (800c908 <UART_AdvFeatureConfig+0x1a0>)
 800c8a6:	f002 fc63 	bl	800f170 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c8aa:	6821      	ldr	r1, [r4, #0]
 800c8ac:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800c8ae:	684b      	ldr	r3, [r1, #4]
 800c8b0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c8b4:	4313      	orrs	r3, r2
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c8b6:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c8ba:	604b      	str	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c8bc:	d10f      	bne.n	800c8de <UART_AdvFeatureConfig+0x176>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800c8be:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800c8c0:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 800c8c4:	d004      	beq.n	800c8d0 <UART_AdvFeatureConfig+0x168>
 800c8c6:	f640 4149 	movw	r1, #3145	; 0xc49
 800c8ca:	480f      	ldr	r0, [pc, #60]	; (800c908 <UART_AdvFeatureConfig+0x1a0>)
 800c8cc:	f002 fc50 	bl	800f170 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c8d0:	6822      	ldr	r2, [r4, #0]
 800c8d2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c8d4:	6853      	ldr	r3, [r2, #4]
 800c8d6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800c8da:	430b      	orrs	r3, r1
 800c8dc:	6053      	str	r3, [r2, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c8de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c8e0:	061b      	lsls	r3, r3, #24
 800c8e2:	d50f      	bpl.n	800c904 <UART_AdvFeatureConfig+0x19c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800c8e4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c8e6:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 800c8ea:	d004      	beq.n	800c8f6 <UART_AdvFeatureConfig+0x18e>
 800c8ec:	f640 4151 	movw	r1, #3153	; 0xc51
 800c8f0:	4805      	ldr	r0, [pc, #20]	; (800c908 <UART_AdvFeatureConfig+0x1a0>)
 800c8f2:	f002 fc3d 	bl	800f170 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c8f6:	6822      	ldr	r2, [r4, #0]
 800c8f8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c8fa:	6853      	ldr	r3, [r2, #4]
 800c8fc:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800c900:	430b      	orrs	r3, r1
 800c902:	6053      	str	r3, [r2, #4]
 800c904:	bd10      	pop	{r4, pc}
 800c906:	bf00      	nop
 800c908:	08017766 	.word	0x08017766
 800c90c:	40013800 	.word	0x40013800

0800c910 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800c910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c914:	9d06      	ldr	r5, [sp, #24]
 800c916:	4604      	mov	r4, r0
 800c918:	460f      	mov	r7, r1
 800c91a:	4616      	mov	r6, r2
 800c91c:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c91e:	6821      	ldr	r1, [r4, #0]
 800c920:	69ca      	ldr	r2, [r1, #28]
 800c922:	ea37 0302 	bics.w	r3, r7, r2
 800c926:	bf0c      	ite	eq
 800c928:	2201      	moveq	r2, #1
 800c92a:	2200      	movne	r2, #0
 800c92c:	42b2      	cmp	r2, r6
 800c92e:	d002      	beq.n	800c936 <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800c930:	2000      	movs	r0, #0
}
 800c932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800c936:	1c6b      	adds	r3, r5, #1
 800c938:	d0f2      	beq.n	800c920 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c93a:	b99d      	cbnz	r5, 800c964 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c93c:	6823      	ldr	r3, [r4, #0]
 800c93e:	681a      	ldr	r2, [r3, #0]
 800c940:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c944:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c946:	689a      	ldr	r2, [r3, #8]
 800c948:	f022 0201 	bic.w	r2, r2, #1
 800c94c:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800c94e:	2320      	movs	r3, #32
 800c950:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 800c954:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 800c958:	2300      	movs	r3, #0
 800c95a:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 800c95e:	2003      	movs	r0, #3
 800c960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c964:	f7fb fe08 	bl	8008578 <HAL_GetTick>
 800c968:	eba0 0008 	sub.w	r0, r0, r8
 800c96c:	4285      	cmp	r5, r0
 800c96e:	d2d6      	bcs.n	800c91e <UART_WaitOnFlagUntilTimeout+0xe>
 800c970:	e7e4      	b.n	800c93c <UART_WaitOnFlagUntilTimeout+0x2c>

0800c972 <UART_CheckIdleState>:
{
 800c972:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c974:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c976:	2600      	movs	r6, #0
 800c978:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 800c97a:	f7fb fdfd 	bl	8008578 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c97e:	6823      	ldr	r3, [r4, #0]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 800c984:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c986:	d417      	bmi.n	800c9b8 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c988:	6823      	ldr	r3, [r4, #0]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	075b      	lsls	r3, r3, #29
 800c98e:	d50a      	bpl.n	800c9a6 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c990:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c994:	9300      	str	r3, [sp, #0]
 800c996:	2200      	movs	r2, #0
 800c998:	462b      	mov	r3, r5
 800c99a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c99e:	4620      	mov	r0, r4
 800c9a0:	f7ff ffb6 	bl	800c910 <UART_WaitOnFlagUntilTimeout>
 800c9a4:	b9a0      	cbnz	r0, 800c9d0 <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 800c9a6:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800c9a8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800c9aa:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 800c9ae:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 800c9b2:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 800c9b6:	e00c      	b.n	800c9d2 <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c9b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c9bc:	9300      	str	r3, [sp, #0]
 800c9be:	4632      	mov	r2, r6
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c9c6:	4620      	mov	r0, r4
 800c9c8:	f7ff ffa2 	bl	800c910 <UART_WaitOnFlagUntilTimeout>
 800c9cc:	2800      	cmp	r0, #0
 800c9ce:	d0db      	beq.n	800c988 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800c9d0:	2003      	movs	r0, #3
}
 800c9d2:	b002      	add	sp, #8
 800c9d4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c9d8 <HAL_UART_Init>:
{
 800c9d8:	b510      	push	{r4, lr}
  if (huart == NULL)
 800c9da:	4604      	mov	r4, r0
 800c9dc:	2800      	cmp	r0, #0
 800c9de:	d065      	beq.n	800caac <HAL_UART_Init+0xd4>
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800c9e0:	6981      	ldr	r1, [r0, #24]
 800c9e2:	6803      	ldr	r3, [r0, #0]
 800c9e4:	4a32      	ldr	r2, [pc, #200]	; (800cab0 <HAL_UART_Init+0xd8>)
 800c9e6:	2900      	cmp	r1, #0
 800c9e8:	d048      	beq.n	800ca7c <HAL_UART_Init+0xa4>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	d018      	beq.n	800ca20 <HAL_UART_Init+0x48>
 800c9ee:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 800c9f2:	4293      	cmp	r3, r2
 800c9f4:	d014      	beq.n	800ca20 <HAL_UART_Init+0x48>
 800c9f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d010      	beq.n	800ca20 <HAL_UART_Init+0x48>
 800c9fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ca02:	4293      	cmp	r3, r2
 800ca04:	d00c      	beq.n	800ca20 <HAL_UART_Init+0x48>
 800ca06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	d008      	beq.n	800ca20 <HAL_UART_Init+0x48>
 800ca0e:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d004      	beq.n	800ca20 <HAL_UART_Init+0x48>
 800ca16:	f44f 71a9 	mov.w	r1, #338	; 0x152
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 800ca1a:	4826      	ldr	r0, [pc, #152]	; (800cab4 <HAL_UART_Init+0xdc>)
 800ca1c:	f002 fba8 	bl	800f170 <assert_failed>
  if (huart->gState == HAL_UART_STATE_RESET)
 800ca20:	f894 3071 	ldrb.w	r3, [r4, #113]	; 0x71
 800ca24:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ca28:	b923      	cbnz	r3, 800ca34 <HAL_UART_Init+0x5c>
    huart->Lock = HAL_UNLOCKED;
 800ca2a:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800ca2e:	4620      	mov	r0, r4
 800ca30:	f002 fd18 	bl	800f464 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800ca34:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800ca36:	2324      	movs	r3, #36	; 0x24
 800ca38:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 800ca3c:	6813      	ldr	r3, [r2, #0]
 800ca3e:	f023 0301 	bic.w	r3, r3, #1
 800ca42:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ca44:	4620      	mov	r0, r4
 800ca46:	f7ff fc95 	bl	800c374 <UART_SetConfig>
 800ca4a:	2801      	cmp	r0, #1
 800ca4c:	d02e      	beq.n	800caac <HAL_UART_Init+0xd4>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ca4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca50:	b113      	cbz	r3, 800ca58 <HAL_UART_Init+0x80>
    UART_AdvFeatureConfig(huart);
 800ca52:	4620      	mov	r0, r4
 800ca54:	f7ff fe88 	bl	800c768 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ca58:	6823      	ldr	r3, [r4, #0]
 800ca5a:	685a      	ldr	r2, [r3, #4]
 800ca5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ca60:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ca62:	689a      	ldr	r2, [r3, #8]
 800ca64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ca68:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800ca6a:	681a      	ldr	r2, [r3, #0]
 800ca6c:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800ca70:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800ca72:	601a      	str	r2, [r3, #0]
}
 800ca74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800ca78:	f7ff bf7b 	b.w	800c972 <UART_CheckIdleState>
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	d0cf      	beq.n	800ca20 <HAL_UART_Init+0x48>
 800ca80:	4a0d      	ldr	r2, [pc, #52]	; (800cab8 <HAL_UART_Init+0xe0>)
 800ca82:	4293      	cmp	r3, r2
 800ca84:	d0cc      	beq.n	800ca20 <HAL_UART_Init+0x48>
 800ca86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ca8a:	4293      	cmp	r3, r2
 800ca8c:	d0c8      	beq.n	800ca20 <HAL_UART_Init+0x48>
 800ca8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ca92:	4293      	cmp	r3, r2
 800ca94:	d0c4      	beq.n	800ca20 <HAL_UART_Init+0x48>
 800ca96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d0c0      	beq.n	800ca20 <HAL_UART_Init+0x48>
 800ca9e:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800caa2:	4293      	cmp	r3, r2
 800caa4:	d0bc      	beq.n	800ca20 <HAL_UART_Init+0x48>
 800caa6:	f240 1157 	movw	r1, #343	; 0x157
 800caaa:	e7b6      	b.n	800ca1a <HAL_UART_Init+0x42>
}
 800caac:	2001      	movs	r0, #1
 800caae:	bd10      	pop	{r4, pc}
 800cab0:	40013800 	.word	0x40013800
 800cab4:	08017766 	.word	0x08017766
 800cab8:	40004400 	.word	0x40004400

0800cabc <_ZN10SFE_BMP180C1EP19__I2C_HandleTypeDef>:
#include <SFE_BMP180.h>
#include <stdio.h>
#include <math.h>


SFE_BMP180::SFE_BMP180(I2C_HandleTypeDef *pI2C)
 800cabc:	b480      	push	{r7}
 800cabe:	b083      	sub	sp, #12
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
 800cac4:	6039      	str	r1, [r7, #0]
// Base library Constructor
{
	m_pI2C = pI2C;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	683a      	ldr	r2, [r7, #0]
 800caca:	651a      	str	r2, [r3, #80]	; 0x50
}
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	4618      	mov	r0, r3
 800cad0:	370c      	adds	r7, #12
 800cad2:	46bd      	mov	sp, r7
 800cad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad8:	4770      	bx	lr

0800cada <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 800cada:	b5b0      	push	{r4, r5, r7, lr}
 800cadc:	b082      	sub	sp, #8
 800cade:	af00      	add	r7, sp, #0
 800cae0:	6078      	str	r0, [r7, #4]
 800cae2:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f7fa f87f 	bl	8006be8 <__aeabi_i2d>
 800caea:	4604      	mov	r4, r0
 800caec:	460d      	mov	r5, r1
 800caee:	6838      	ldr	r0, [r7, #0]
 800caf0:	f7fa f87a 	bl	8006be8 <__aeabi_i2d>
 800caf4:	4602      	mov	r2, r0
 800caf6:	460b      	mov	r3, r1
 800caf8:	ec43 2b11 	vmov	d1, r2, r3
 800cafc:	ec45 4b10 	vmov	d0, r4, r5
 800cb00:	f003 fdc6 	bl	8010690 <pow>
 800cb04:	eeb0 7a40 	vmov.f32	s14, s0
 800cb08:	eef0 7a60 	vmov.f32	s15, s1
    }
 800cb0c:	eeb0 0a47 	vmov.f32	s0, s14
 800cb10:	eef0 0a67 	vmov.f32	s1, s15
 800cb14:	3708      	adds	r7, #8
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bdb0      	pop	{r4, r5, r7, pc}
 800cb1a:	0000      	movs	r0, r0
 800cb1c:	0000      	movs	r0, r0
	...

0800cb20 <_ZN10SFE_BMP1805BeginEv>:


bool SFE_BMP180::Begin()
// Initialize library for subsequent pressure measurements
{
 800cb20:	b5b0      	push	{r4, r5, r7, lr}
 800cb22:	b090      	sub	sp, #64	; 0x40
 800cb24:	af04      	add	r7, sp, #16
 800cb26:	6078      	str	r0, [r7, #4]
	// The BMP180 includes factory calibration data stored on the device.
	// Each device has different numbers, these must be retrieved and
	// used in the calculations when taking pressure measurements.

	// Retrieve calibration data from device:
	m_error= HAL_I2C_Mem_Read(m_pI2C, BMP180_ADDR << 1, 0xAA, I2C_MEMADD_SIZE_8BIT, buf, 22, 500);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800cb2c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800cb30:	9302      	str	r3, [sp, #8]
 800cb32:	2316      	movs	r3, #22
 800cb34:	9301      	str	r3, [sp, #4]
 800cb36:	f107 030c 	add.w	r3, r7, #12
 800cb3a:	9300      	str	r3, [sp, #0]
 800cb3c:	2301      	movs	r3, #1
 800cb3e:	22aa      	movs	r2, #170	; 0xaa
 800cb40:	21ee      	movs	r1, #238	; 0xee
 800cb42:	f7fd fba1 	bl	800a288 <HAL_I2C_Mem_Read>
 800cb46:	4603      	mov	r3, r0
 800cb48:	461a      	mov	r2, r3
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	
	if(m_error == HAL_OK)
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	f040 8322 	bne.w	800d1a0 <_ZN10SFE_BMP1805BeginEv+0x680>

		// Example from http://wmrx00.sourceforge.net/Arduino/BMP180-Calcs.pdf
		// AC1 = 7911; AC2 = -934; AC3 = -14306; AC4 = 31567; AC5 = 25671; AC6 = 18974;
		// VB1 = 5498; VB2 = 46; MB = -32768; MC = -11075; MD = 2432;

		m_AC1 = (int16_t)((buf[0]<<8)  | buf[1]);		// data from register address 0xAA MSB first
 800cb5c:	7b3b      	ldrb	r3, [r7, #12]
 800cb5e:	021b      	lsls	r3, r3, #8
 800cb60:	b21a      	sxth	r2, r3
 800cb62:	7b7b      	ldrb	r3, [r7, #13]
 800cb64:	b21b      	sxth	r3, r3
 800cb66:	4313      	orrs	r3, r2
 800cb68:	b21a      	sxth	r2, r3
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	801a      	strh	r2, [r3, #0]
		m_AC2 = (int16_t)((buf[2]<<8)  | buf[3]);
 800cb6e:	7bbb      	ldrb	r3, [r7, #14]
 800cb70:	021b      	lsls	r3, r3, #8
 800cb72:	b21a      	sxth	r2, r3
 800cb74:	7bfb      	ldrb	r3, [r7, #15]
 800cb76:	b21b      	sxth	r3, r3
 800cb78:	4313      	orrs	r3, r2
 800cb7a:	b21a      	sxth	r2, r3
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	805a      	strh	r2, [r3, #2]
		m_AC3 = (int16_t)((buf[4]<<8)  | buf[5]);
 800cb80:	7c3b      	ldrb	r3, [r7, #16]
 800cb82:	021b      	lsls	r3, r3, #8
 800cb84:	b21a      	sxth	r2, r3
 800cb86:	7c7b      	ldrb	r3, [r7, #17]
 800cb88:	b21b      	sxth	r3, r3
 800cb8a:	4313      	orrs	r3, r2
 800cb8c:	b21a      	sxth	r2, r3
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	809a      	strh	r2, [r3, #4]
		m_AC4 = (int16_t)((buf[6]<<8)  | buf[7]);
 800cb92:	7cbb      	ldrb	r3, [r7, #18]
 800cb94:	021b      	lsls	r3, r3, #8
 800cb96:	b21a      	sxth	r2, r3
 800cb98:	7cfb      	ldrb	r3, [r7, #19]
 800cb9a:	b21b      	sxth	r3, r3
 800cb9c:	4313      	orrs	r3, r2
 800cb9e:	b21b      	sxth	r3, r3
 800cba0:	b29a      	uxth	r2, r3
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	821a      	strh	r2, [r3, #16]
		m_AC5 = (int16_t)((buf[8]<<8)  | buf[9]);
 800cba6:	7d3b      	ldrb	r3, [r7, #20]
 800cba8:	021b      	lsls	r3, r3, #8
 800cbaa:	b21a      	sxth	r2, r3
 800cbac:	7d7b      	ldrb	r3, [r7, #21]
 800cbae:	b21b      	sxth	r3, r3
 800cbb0:	4313      	orrs	r3, r2
 800cbb2:	b21b      	sxth	r3, r3
 800cbb4:	b29a      	uxth	r2, r3
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	825a      	strh	r2, [r3, #18]
		m_AC6 = (int16_t)((buf[10]<<8) | buf[11]);
 800cbba:	7dbb      	ldrb	r3, [r7, #22]
 800cbbc:	021b      	lsls	r3, r3, #8
 800cbbe:	b21a      	sxth	r2, r3
 800cbc0:	7dfb      	ldrb	r3, [r7, #23]
 800cbc2:	b21b      	sxth	r3, r3
 800cbc4:	4313      	orrs	r3, r2
 800cbc6:	b21b      	sxth	r3, r3
 800cbc8:	b29a      	uxth	r2, r3
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	829a      	strh	r2, [r3, #20]
		m_VB1 = (int16_t)((buf[12]<<8) | buf[13]);
 800cbce:	7e3b      	ldrb	r3, [r7, #24]
 800cbd0:	021b      	lsls	r3, r3, #8
 800cbd2:	b21a      	sxth	r2, r3
 800cbd4:	7e7b      	ldrb	r3, [r7, #25]
 800cbd6:	b21b      	sxth	r3, r3
 800cbd8:	4313      	orrs	r3, r2
 800cbda:	b21a      	sxth	r2, r3
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	80da      	strh	r2, [r3, #6]
		m_VB2 = (int16_t)((buf[14]<<8) | buf[15]);
 800cbe0:	7ebb      	ldrb	r3, [r7, #26]
 800cbe2:	021b      	lsls	r3, r3, #8
 800cbe4:	b21a      	sxth	r2, r3
 800cbe6:	7efb      	ldrb	r3, [r7, #27]
 800cbe8:	b21b      	sxth	r3, r3
 800cbea:	4313      	orrs	r3, r2
 800cbec:	b21a      	sxth	r2, r3
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	811a      	strh	r2, [r3, #8]
		m_MB  = (int16_t)((buf[16]<<8) | buf[17]);
 800cbf2:	7f3b      	ldrb	r3, [r7, #28]
 800cbf4:	021b      	lsls	r3, r3, #8
 800cbf6:	b21a      	sxth	r2, r3
 800cbf8:	7f7b      	ldrb	r3, [r7, #29]
 800cbfa:	b21b      	sxth	r3, r3
 800cbfc:	4313      	orrs	r3, r2
 800cbfe:	b21a      	sxth	r2, r3
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	815a      	strh	r2, [r3, #10]
		m_MC  = (int16_t)((buf[18]<<8) | buf[19]);
 800cc04:	7fbb      	ldrb	r3, [r7, #30]
 800cc06:	021b      	lsls	r3, r3, #8
 800cc08:	b21a      	sxth	r2, r3
 800cc0a:	7ffb      	ldrb	r3, [r7, #31]
 800cc0c:	b21b      	sxth	r3, r3
 800cc0e:	4313      	orrs	r3, r2
 800cc10:	b21a      	sxth	r2, r3
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	819a      	strh	r2, [r3, #12]
		m_MD  = (int16_t)((buf[20]<<8) | buf[21]);
 800cc16:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cc1a:	021b      	lsls	r3, r3, #8
 800cc1c:	b21a      	sxth	r2, r3
 800cc1e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800cc22:	b21b      	sxth	r3, r3
 800cc24:	4313      	orrs	r3, r2
 800cc26:	b21a      	sxth	r2, r3
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	81da      	strh	r2, [r3, #14]

		printf("BMP180: AC1=%d \n", m_AC1);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cc32:	4619      	mov	r1, r3
 800cc34:	48d8      	ldr	r0, [pc, #864]	; (800cf98 <_ZN10SFE_BMP1805BeginEv+0x478>)
 800cc36:	f005 fa81 	bl	801213c <printf>
		printf("BMP180: AC2=%d \n", m_AC2);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cc40:	4619      	mov	r1, r3
 800cc42:	48d6      	ldr	r0, [pc, #856]	; (800cf9c <_ZN10SFE_BMP1805BeginEv+0x47c>)
 800cc44:	f005 fa7a 	bl	801213c <printf>
		printf("BMP180: AC3=%d \n", m_AC3);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800cc4e:	4619      	mov	r1, r3
 800cc50:	48d3      	ldr	r0, [pc, #844]	; (800cfa0 <_ZN10SFE_BMP1805BeginEv+0x480>)
 800cc52:	f005 fa73 	bl	801213c <printf>
		printf("BMP180: AC4=%d \n", m_AC4);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	8a1b      	ldrh	r3, [r3, #16]
 800cc5a:	4619      	mov	r1, r3
 800cc5c:	48d1      	ldr	r0, [pc, #836]	; (800cfa4 <_ZN10SFE_BMP1805BeginEv+0x484>)
 800cc5e:	f005 fa6d 	bl	801213c <printf>
		printf("BMP180: AC5=%d \n", m_AC5);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	8a5b      	ldrh	r3, [r3, #18]
 800cc66:	4619      	mov	r1, r3
 800cc68:	48cf      	ldr	r0, [pc, #828]	; (800cfa8 <_ZN10SFE_BMP1805BeginEv+0x488>)
 800cc6a:	f005 fa67 	bl	801213c <printf>
		printf("BMP180: AC6=%d \n", m_AC6);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	8a9b      	ldrh	r3, [r3, #20]
 800cc72:	4619      	mov	r1, r3
 800cc74:	48cd      	ldr	r0, [pc, #820]	; (800cfac <_ZN10SFE_BMP1805BeginEv+0x48c>)
 800cc76:	f005 fa61 	bl	801213c <printf>
		printf("BMP180: VB1=%d \n", m_VB1);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800cc80:	4619      	mov	r1, r3
 800cc82:	48cb      	ldr	r0, [pc, #812]	; (800cfb0 <_ZN10SFE_BMP1805BeginEv+0x490>)
 800cc84:	f005 fa5a 	bl	801213c <printf>
		printf("BMP180: VB2=%d \n", m_VB2);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cc8e:	4619      	mov	r1, r3
 800cc90:	48c8      	ldr	r0, [pc, #800]	; (800cfb4 <_ZN10SFE_BMP1805BeginEv+0x494>)
 800cc92:	f005 fa53 	bl	801213c <printf>
		printf("BMP180: MB=%d \n", m_MB);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800cc9c:	4619      	mov	r1, r3
 800cc9e:	48c6      	ldr	r0, [pc, #792]	; (800cfb8 <_ZN10SFE_BMP1805BeginEv+0x498>)
 800cca0:	f005 fa4c 	bl	801213c <printf>
		printf("BMP180: MC=%d \n", m_MC);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800ccaa:	4619      	mov	r1, r3
 800ccac:	48c3      	ldr	r0, [pc, #780]	; (800cfbc <_ZN10SFE_BMP1805BeginEv+0x49c>)
 800ccae:	f005 fa45 	bl	801213c <printf>
		printf("BMP180: MD=%d \n", m_MD);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800ccb8:	4619      	mov	r1, r3
 800ccba:	48c1      	ldr	r0, [pc, #772]	; (800cfc0 <_ZN10SFE_BMP1805BeginEv+0x4a0>)
 800ccbc:	f005 fa3e 	bl	801213c <printf>
		
		// Compute floating-point polynominals:

		c3 = 160.0 * pow(2,-15) * m_AC3;
 800ccc0:	f06f 010e 	mvn.w	r1, #14
 800ccc4:	2002      	movs	r0, #2
 800ccc6:	f7ff ff08 	bl	800cada <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800ccca:	ec51 0b10 	vmov	r0, r1, d0
 800ccce:	f04f 0200 	mov.w	r2, #0
 800ccd2:	4bbc      	ldr	r3, [pc, #752]	; (800cfc4 <_ZN10SFE_BMP1805BeginEv+0x4a4>)
 800ccd4:	f7f9 ffee 	bl	8006cb4 <__aeabi_dmul>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	460c      	mov	r4, r1
 800ccdc:	4625      	mov	r5, r4
 800ccde:	461c      	mov	r4, r3
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800cce6:	4618      	mov	r0, r3
 800cce8:	f7f9 ff7e 	bl	8006be8 <__aeabi_i2d>
 800ccec:	4602      	mov	r2, r0
 800ccee:	460b      	mov	r3, r1
 800ccf0:	4620      	mov	r0, r4
 800ccf2:	4629      	mov	r1, r5
 800ccf4:	f7f9 ffde 	bl	8006cb4 <__aeabi_dmul>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	460c      	mov	r4, r1
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	4621      	mov	r1, r4
 800cd00:	f7fa fab0 	bl	8007264 <__aeabi_d2f>
 800cd04:	4603      	mov	r3, r0
 800cd06:	62fb      	str	r3, [r7, #44]	; 0x2c
		c4 = pow(10,-3) * pow(2,-15) * m_AC4;
 800cd08:	f06f 0102 	mvn.w	r1, #2
 800cd0c:	200a      	movs	r0, #10
 800cd0e:	f7ff fee4 	bl	800cada <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800cd12:	ec55 4b10 	vmov	r4, r5, d0
 800cd16:	f06f 010e 	mvn.w	r1, #14
 800cd1a:	2002      	movs	r0, #2
 800cd1c:	f7ff fedd 	bl	800cada <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800cd20:	ec53 2b10 	vmov	r2, r3, d0
 800cd24:	4620      	mov	r0, r4
 800cd26:	4629      	mov	r1, r5
 800cd28:	f7f9 ffc4 	bl	8006cb4 <__aeabi_dmul>
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	460c      	mov	r4, r1
 800cd30:	4625      	mov	r5, r4
 800cd32:	461c      	mov	r4, r3
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	8a1b      	ldrh	r3, [r3, #16]
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f7f9 ff55 	bl	8006be8 <__aeabi_i2d>
 800cd3e:	4602      	mov	r2, r0
 800cd40:	460b      	mov	r3, r1
 800cd42:	4620      	mov	r0, r4
 800cd44:	4629      	mov	r1, r5
 800cd46:	f7f9 ffb5 	bl	8006cb4 <__aeabi_dmul>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	460c      	mov	r4, r1
 800cd4e:	4618      	mov	r0, r3
 800cd50:	4621      	mov	r1, r4
 800cd52:	f7fa fa87 	bl	8007264 <__aeabi_d2f>
 800cd56:	4603      	mov	r3, r0
 800cd58:	62bb      	str	r3, [r7, #40]	; 0x28
		b1 = pow(160,2) * pow(2,-30) * m_VB1;
 800cd5a:	2102      	movs	r1, #2
 800cd5c:	20a0      	movs	r0, #160	; 0xa0
 800cd5e:	f7ff febc 	bl	800cada <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800cd62:	ec55 4b10 	vmov	r4, r5, d0
 800cd66:	f06f 011d 	mvn.w	r1, #29
 800cd6a:	2002      	movs	r0, #2
 800cd6c:	f7ff feb5 	bl	800cada <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800cd70:	ec53 2b10 	vmov	r2, r3, d0
 800cd74:	4620      	mov	r0, r4
 800cd76:	4629      	mov	r1, r5
 800cd78:	f7f9 ff9c 	bl	8006cb4 <__aeabi_dmul>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	460c      	mov	r4, r1
 800cd80:	4625      	mov	r5, r4
 800cd82:	461c      	mov	r4, r3
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f7f9 ff2c 	bl	8006be8 <__aeabi_i2d>
 800cd90:	4602      	mov	r2, r0
 800cd92:	460b      	mov	r3, r1
 800cd94:	4620      	mov	r0, r4
 800cd96:	4629      	mov	r1, r5
 800cd98:	f7f9 ff8c 	bl	8006cb4 <__aeabi_dmul>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	460c      	mov	r4, r1
 800cda0:	4618      	mov	r0, r3
 800cda2:	4621      	mov	r1, r4
 800cda4:	f7fa fa5e 	bl	8007264 <__aeabi_d2f>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	627b      	str	r3, [r7, #36]	; 0x24
		m_c5 = (pow(2,-15) / 160) * m_AC5;
 800cdac:	f06f 010e 	mvn.w	r1, #14
 800cdb0:	2002      	movs	r0, #2
 800cdb2:	f7ff fe92 	bl	800cada <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800cdb6:	ec51 0b10 	vmov	r0, r1, d0
 800cdba:	f04f 0200 	mov.w	r2, #0
 800cdbe:	4b81      	ldr	r3, [pc, #516]	; (800cfc4 <_ZN10SFE_BMP1805BeginEv+0x4a4>)
 800cdc0:	f7fa f8a2 	bl	8006f08 <__aeabi_ddiv>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	460c      	mov	r4, r1
 800cdc8:	4625      	mov	r5, r4
 800cdca:	461c      	mov	r4, r3
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	8a5b      	ldrh	r3, [r3, #18]
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f7f9 ff09 	bl	8006be8 <__aeabi_i2d>
 800cdd6:	4602      	mov	r2, r0
 800cdd8:	460b      	mov	r3, r1
 800cdda:	4620      	mov	r0, r4
 800cddc:	4629      	mov	r1, r5
 800cdde:	f7f9 ff69 	bl	8006cb4 <__aeabi_dmul>
 800cde2:	4603      	mov	r3, r0
 800cde4:	460c      	mov	r4, r1
 800cde6:	4618      	mov	r0, r3
 800cde8:	4621      	mov	r1, r4
 800cdea:	f7fa fa3b 	bl	8007264 <__aeabi_d2f>
 800cdee:	4602      	mov	r2, r0
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	619a      	str	r2, [r3, #24]
		m_c6 = m_AC6;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	8a9b      	ldrh	r3, [r3, #20]
 800cdf8:	ee07 3a90 	vmov	s15, r3
 800cdfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	edc3 7a07 	vstr	s15, [r3, #28]
		m_mc = (pow(2,11) / pow(160,2)) * m_MC;
 800ce06:	210b      	movs	r1, #11
 800ce08:	2002      	movs	r0, #2
 800ce0a:	f7ff fe66 	bl	800cada <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800ce0e:	ec55 4b10 	vmov	r4, r5, d0
 800ce12:	2102      	movs	r1, #2
 800ce14:	20a0      	movs	r0, #160	; 0xa0
 800ce16:	f7ff fe60 	bl	800cada <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800ce1a:	ec53 2b10 	vmov	r2, r3, d0
 800ce1e:	4620      	mov	r0, r4
 800ce20:	4629      	mov	r1, r5
 800ce22:	f7fa f871 	bl	8006f08 <__aeabi_ddiv>
 800ce26:	4603      	mov	r3, r0
 800ce28:	460c      	mov	r4, r1
 800ce2a:	4625      	mov	r5, r4
 800ce2c:	461c      	mov	r4, r3
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800ce34:	4618      	mov	r0, r3
 800ce36:	f7f9 fed7 	bl	8006be8 <__aeabi_i2d>
 800ce3a:	4602      	mov	r2, r0
 800ce3c:	460b      	mov	r3, r1
 800ce3e:	4620      	mov	r0, r4
 800ce40:	4629      	mov	r1, r5
 800ce42:	f7f9 ff37 	bl	8006cb4 <__aeabi_dmul>
 800ce46:	4603      	mov	r3, r0
 800ce48:	460c      	mov	r4, r1
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	4621      	mov	r1, r4
 800ce4e:	f7fa fa09 	bl	8007264 <__aeabi_d2f>
 800ce52:	4602      	mov	r2, r0
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	621a      	str	r2, [r3, #32]
		m_md = m_MD / 160.0;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f7f9 fec2 	bl	8006be8 <__aeabi_i2d>
 800ce64:	f04f 0200 	mov.w	r2, #0
 800ce68:	4b56      	ldr	r3, [pc, #344]	; (800cfc4 <_ZN10SFE_BMP1805BeginEv+0x4a4>)
 800ce6a:	f7fa f84d 	bl	8006f08 <__aeabi_ddiv>
 800ce6e:	4603      	mov	r3, r0
 800ce70:	460c      	mov	r4, r1
 800ce72:	4618      	mov	r0, r3
 800ce74:	4621      	mov	r1, r4
 800ce76:	f7fa f9f5 	bl	8007264 <__aeabi_d2f>
 800ce7a:	4602      	mov	r2, r0
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	625a      	str	r2, [r3, #36]	; 0x24
		m_x0 = m_AC1;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ce86:	ee07 3a90 	vmov	s15, r3
 800ce8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		m_x1 = 160.0 * pow(2,-13) * m_AC2;
 800ce94:	f06f 010c 	mvn.w	r1, #12
 800ce98:	2002      	movs	r0, #2
 800ce9a:	f7ff fe1e 	bl	800cada <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800ce9e:	ec51 0b10 	vmov	r0, r1, d0
 800cea2:	f04f 0200 	mov.w	r2, #0
 800cea6:	4b47      	ldr	r3, [pc, #284]	; (800cfc4 <_ZN10SFE_BMP1805BeginEv+0x4a4>)
 800cea8:	f7f9 ff04 	bl	8006cb4 <__aeabi_dmul>
 800ceac:	4603      	mov	r3, r0
 800ceae:	460c      	mov	r4, r1
 800ceb0:	4625      	mov	r5, r4
 800ceb2:	461c      	mov	r4, r3
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ceba:	4618      	mov	r0, r3
 800cebc:	f7f9 fe94 	bl	8006be8 <__aeabi_i2d>
 800cec0:	4602      	mov	r2, r0
 800cec2:	460b      	mov	r3, r1
 800cec4:	4620      	mov	r0, r4
 800cec6:	4629      	mov	r1, r5
 800cec8:	f7f9 fef4 	bl	8006cb4 <__aeabi_dmul>
 800cecc:	4603      	mov	r3, r0
 800cece:	460c      	mov	r4, r1
 800ced0:	4618      	mov	r0, r3
 800ced2:	4621      	mov	r1, r4
 800ced4:	f7fa f9c6 	bl	8007264 <__aeabi_d2f>
 800ced8:	4602      	mov	r2, r0
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	62da      	str	r2, [r3, #44]	; 0x2c
		m_x2 = pow(160,2) * pow(2,-25) * m_VB2;
 800cede:	2102      	movs	r1, #2
 800cee0:	20a0      	movs	r0, #160	; 0xa0
 800cee2:	f7ff fdfa 	bl	800cada <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800cee6:	ec55 4b10 	vmov	r4, r5, d0
 800ceea:	f06f 0118 	mvn.w	r1, #24
 800ceee:	2002      	movs	r0, #2
 800cef0:	f7ff fdf3 	bl	800cada <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800cef4:	ec53 2b10 	vmov	r2, r3, d0
 800cef8:	4620      	mov	r0, r4
 800cefa:	4629      	mov	r1, r5
 800cefc:	f7f9 feda 	bl	8006cb4 <__aeabi_dmul>
 800cf00:	4603      	mov	r3, r0
 800cf02:	460c      	mov	r4, r1
 800cf04:	4625      	mov	r5, r4
 800cf06:	461c      	mov	r4, r3
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f7f9 fe6a 	bl	8006be8 <__aeabi_i2d>
 800cf14:	4602      	mov	r2, r0
 800cf16:	460b      	mov	r3, r1
 800cf18:	4620      	mov	r0, r4
 800cf1a:	4629      	mov	r1, r5
 800cf1c:	f7f9 feca 	bl	8006cb4 <__aeabi_dmul>
 800cf20:	4603      	mov	r3, r0
 800cf22:	460c      	mov	r4, r1
 800cf24:	4618      	mov	r0, r3
 800cf26:	4621      	mov	r1, r4
 800cf28:	f7fa f99c 	bl	8007264 <__aeabi_d2f>
 800cf2c:	4602      	mov	r2, r0
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	631a      	str	r2, [r3, #48]	; 0x30
		m_y0 = c4 * pow(2,15);
 800cf32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf34:	f7f9 fe6a 	bl	8006c0c <__aeabi_f2d>
 800cf38:	4604      	mov	r4, r0
 800cf3a:	460d      	mov	r5, r1
 800cf3c:	210f      	movs	r1, #15
 800cf3e:	2002      	movs	r0, #2
 800cf40:	f7ff fdcb 	bl	800cada <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800cf44:	ec53 2b10 	vmov	r2, r3, d0
 800cf48:	4620      	mov	r0, r4
 800cf4a:	4629      	mov	r1, r5
 800cf4c:	f7f9 feb2 	bl	8006cb4 <__aeabi_dmul>
 800cf50:	4603      	mov	r3, r0
 800cf52:	460c      	mov	r4, r1
 800cf54:	4618      	mov	r0, r3
 800cf56:	4621      	mov	r1, r4
 800cf58:	f7fa f984 	bl	8007264 <__aeabi_d2f>
 800cf5c:	4602      	mov	r2, r0
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	635a      	str	r2, [r3, #52]	; 0x34
		m_y1 = c4 * c3;
 800cf62:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cf66:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800cf6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		m_y2 = c4 * b1;
 800cf74:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cf78:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800cf7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		m_y0 = (3791.0 - 8.0) / 1600.0;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	4a0f      	ldr	r2, [pc, #60]	; (800cfc8 <_ZN10SFE_BMP1805BeginEv+0x4a8>)
 800cf8a:	635a      	str	r2, [r3, #52]	; 0x34
		m_y1 = 1.0 - 7357.0 * pow(2,-20);
 800cf8c:	f06f 0113 	mvn.w	r1, #19
 800cf90:	2002      	movs	r0, #2
 800cf92:	f7ff fda2 	bl	800cada <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800cf96:	e019      	b.n	800cfcc <_ZN10SFE_BMP1805BeginEv+0x4ac>
 800cf98:	08016888 	.word	0x08016888
 800cf9c:	0801689c 	.word	0x0801689c
 800cfa0:	080168b0 	.word	0x080168b0
 800cfa4:	080168c4 	.word	0x080168c4
 800cfa8:	080168d8 	.word	0x080168d8
 800cfac:	080168ec 	.word	0x080168ec
 800cfb0:	08016900 	.word	0x08016900
 800cfb4:	08016914 	.word	0x08016914
 800cfb8:	08016928 	.word	0x08016928
 800cfbc:	08016938 	.word	0x08016938
 800cfc0:	08016948 	.word	0x08016948
 800cfc4:	40640000 	.word	0x40640000
 800cfc8:	401751ec 	.word	0x401751ec
 800cfcc:	ec51 0b10 	vmov	r0, r1, d0
 800cfd0:	a38a      	add	r3, pc, #552	; (adr r3, 800d1fc <_ZN10SFE_BMP1805BeginEv+0x6dc>)
 800cfd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd6:	f7f9 fe6d 	bl	8006cb4 <__aeabi_dmul>
 800cfda:	4603      	mov	r3, r0
 800cfdc:	460c      	mov	r4, r1
 800cfde:	461a      	mov	r2, r3
 800cfe0:	4623      	mov	r3, r4
 800cfe2:	f04f 0000 	mov.w	r0, #0
 800cfe6:	4974      	ldr	r1, [pc, #464]	; (800d1b8 <_ZN10SFE_BMP1805BeginEv+0x698>)
 800cfe8:	f7f9 fcb0 	bl	800694c <__aeabi_dsub>
 800cfec:	4603      	mov	r3, r0
 800cfee:	460c      	mov	r4, r1
 800cff0:	4618      	mov	r0, r3
 800cff2:	4621      	mov	r1, r4
 800cff4:	f7fa f936 	bl	8007264 <__aeabi_d2f>
 800cff8:	4602      	mov	r2, r0
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	639a      	str	r2, [r3, #56]	; 0x38
		m_y2 = 3038.0 * 100.0 * pow(2,-36);
 800cffe:	f06f 0123 	mvn.w	r1, #35	; 0x23
 800d002:	2002      	movs	r0, #2
 800d004:	f7ff fd69 	bl	800cada <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800d008:	ec51 0b10 	vmov	r0, r1, d0
 800d00c:	a368      	add	r3, pc, #416	; (adr r3, 800d1b0 <_ZN10SFE_BMP1805BeginEv+0x690>)
 800d00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d012:	f7f9 fe4f 	bl	8006cb4 <__aeabi_dmul>
 800d016:	4603      	mov	r3, r0
 800d018:	460c      	mov	r4, r1
 800d01a:	4618      	mov	r0, r3
 800d01c:	4621      	mov	r1, r4
 800d01e:	f7fa f921 	bl	8007264 <__aeabi_d2f>
 800d022:	4602      	mov	r2, r0
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	63da      	str	r2, [r3, #60]	; 0x3c

		printf("BMP180: c3=%f\n", c3);
 800d028:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d02a:	f7f9 fdef 	bl	8006c0c <__aeabi_f2d>
 800d02e:	4603      	mov	r3, r0
 800d030:	460c      	mov	r4, r1
 800d032:	461a      	mov	r2, r3
 800d034:	4623      	mov	r3, r4
 800d036:	4861      	ldr	r0, [pc, #388]	; (800d1bc <_ZN10SFE_BMP1805BeginEv+0x69c>)
 800d038:	f005 f880 	bl	801213c <printf>
		printf("BMP180: c4=%f\n", c4);
 800d03c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d03e:	f7f9 fde5 	bl	8006c0c <__aeabi_f2d>
 800d042:	4603      	mov	r3, r0
 800d044:	460c      	mov	r4, r1
 800d046:	461a      	mov	r2, r3
 800d048:	4623      	mov	r3, r4
 800d04a:	485d      	ldr	r0, [pc, #372]	; (800d1c0 <_ZN10SFE_BMP1805BeginEv+0x6a0>)
 800d04c:	f005 f876 	bl	801213c <printf>
		printf("BMP180: m_c5=%f\n", m_c5);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	699b      	ldr	r3, [r3, #24]
 800d054:	4618      	mov	r0, r3
 800d056:	f7f9 fdd9 	bl	8006c0c <__aeabi_f2d>
 800d05a:	4603      	mov	r3, r0
 800d05c:	460c      	mov	r4, r1
 800d05e:	461a      	mov	r2, r3
 800d060:	4623      	mov	r3, r4
 800d062:	4858      	ldr	r0, [pc, #352]	; (800d1c4 <_ZN10SFE_BMP1805BeginEv+0x6a4>)
 800d064:	f005 f86a 	bl	801213c <printf>
		printf("BMP180: m_c6=%f\n", m_c6);
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	69db      	ldr	r3, [r3, #28]
 800d06c:	4618      	mov	r0, r3
 800d06e:	f7f9 fdcd 	bl	8006c0c <__aeabi_f2d>
 800d072:	4603      	mov	r3, r0
 800d074:	460c      	mov	r4, r1
 800d076:	461a      	mov	r2, r3
 800d078:	4623      	mov	r3, r4
 800d07a:	4853      	ldr	r0, [pc, #332]	; (800d1c8 <_ZN10SFE_BMP1805BeginEv+0x6a8>)
 800d07c:	f005 f85e 	bl	801213c <printf>
		printf("BMP180: b1=%f\n", b1);
 800d080:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d082:	f7f9 fdc3 	bl	8006c0c <__aeabi_f2d>
 800d086:	4603      	mov	r3, r0
 800d088:	460c      	mov	r4, r1
 800d08a:	461a      	mov	r2, r3
 800d08c:	4623      	mov	r3, r4
 800d08e:	484f      	ldr	r0, [pc, #316]	; (800d1cc <_ZN10SFE_BMP1805BeginEv+0x6ac>)
 800d090:	f005 f854 	bl	801213c <printf>
		printf("BMP180: m_mc=%f\n", m_mc);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	6a1b      	ldr	r3, [r3, #32]
 800d098:	4618      	mov	r0, r3
 800d09a:	f7f9 fdb7 	bl	8006c0c <__aeabi_f2d>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	460c      	mov	r4, r1
 800d0a2:	461a      	mov	r2, r3
 800d0a4:	4623      	mov	r3, r4
 800d0a6:	484a      	ldr	r0, [pc, #296]	; (800d1d0 <_ZN10SFE_BMP1805BeginEv+0x6b0>)
 800d0a8:	f005 f848 	bl	801213c <printf>
		printf("BMP180: m_md=%f\n", m_md);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f7f9 fdab 	bl	8006c0c <__aeabi_f2d>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	460c      	mov	r4, r1
 800d0ba:	461a      	mov	r2, r3
 800d0bc:	4623      	mov	r3, r4
 800d0be:	4845      	ldr	r0, [pc, #276]	; (800d1d4 <_ZN10SFE_BMP1805BeginEv+0x6b4>)
 800d0c0:	f005 f83c 	bl	801213c <printf>
		printf("BMP180: m_x0=%f\n", m_x0);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f7f9 fd9f 	bl	8006c0c <__aeabi_f2d>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	460c      	mov	r4, r1
 800d0d2:	461a      	mov	r2, r3
 800d0d4:	4623      	mov	r3, r4
 800d0d6:	4840      	ldr	r0, [pc, #256]	; (800d1d8 <_ZN10SFE_BMP1805BeginEv+0x6b8>)
 800d0d8:	f005 f830 	bl	801213c <printf>
		printf("BMP180: m_x1=%f\n", m_x1);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	f7f9 fd93 	bl	8006c0c <__aeabi_f2d>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	460c      	mov	r4, r1
 800d0ea:	461a      	mov	r2, r3
 800d0ec:	4623      	mov	r3, r4
 800d0ee:	483b      	ldr	r0, [pc, #236]	; (800d1dc <_ZN10SFE_BMP1805BeginEv+0x6bc>)
 800d0f0:	f005 f824 	bl	801213c <printf>
		printf("BMP180: m_x2=%f\n", m_x2);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	f7f9 fd87 	bl	8006c0c <__aeabi_f2d>
 800d0fe:	4603      	mov	r3, r0
 800d100:	460c      	mov	r4, r1
 800d102:	461a      	mov	r2, r3
 800d104:	4623      	mov	r3, r4
 800d106:	4836      	ldr	r0, [pc, #216]	; (800d1e0 <_ZN10SFE_BMP1805BeginEv+0x6c0>)
 800d108:	f005 f818 	bl	801213c <printf>
		printf("BMP180: m_y0=%f\n", m_y0);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d110:	4618      	mov	r0, r3
 800d112:	f7f9 fd7b 	bl	8006c0c <__aeabi_f2d>
 800d116:	4603      	mov	r3, r0
 800d118:	460c      	mov	r4, r1
 800d11a:	461a      	mov	r2, r3
 800d11c:	4623      	mov	r3, r4
 800d11e:	4831      	ldr	r0, [pc, #196]	; (800d1e4 <_ZN10SFE_BMP1805BeginEv+0x6c4>)
 800d120:	f005 f80c 	bl	801213c <printf>
		printf("BMP180: m_y1=%f\n", m_y1);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d128:	4618      	mov	r0, r3
 800d12a:	f7f9 fd6f 	bl	8006c0c <__aeabi_f2d>
 800d12e:	4603      	mov	r3, r0
 800d130:	460c      	mov	r4, r1
 800d132:	461a      	mov	r2, r3
 800d134:	4623      	mov	r3, r4
 800d136:	482c      	ldr	r0, [pc, #176]	; (800d1e8 <_ZN10SFE_BMP1805BeginEv+0x6c8>)
 800d138:	f005 f800 	bl	801213c <printf>
		printf("BMP180: m_y2=%f\n", m_y2);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d140:	4618      	mov	r0, r3
 800d142:	f7f9 fd63 	bl	8006c0c <__aeabi_f2d>
 800d146:	4603      	mov	r3, r0
 800d148:	460c      	mov	r4, r1
 800d14a:	461a      	mov	r2, r3
 800d14c:	4623      	mov	r3, r4
 800d14e:	4827      	ldr	r0, [pc, #156]	; (800d1ec <_ZN10SFE_BMP1805BeginEv+0x6cc>)
 800d150:	f004 fff4 	bl	801213c <printf>
		printf("BMP180: m_p0=%f\n", m_p0);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d158:	4618      	mov	r0, r3
 800d15a:	f7f9 fd57 	bl	8006c0c <__aeabi_f2d>
 800d15e:	4603      	mov	r3, r0
 800d160:	460c      	mov	r4, r1
 800d162:	461a      	mov	r2, r3
 800d164:	4623      	mov	r3, r4
 800d166:	4822      	ldr	r0, [pc, #136]	; (800d1f0 <_ZN10SFE_BMP1805BeginEv+0x6d0>)
 800d168:	f004 ffe8 	bl	801213c <printf>
		printf("BMP180: m_p1=%f\n", m_p1);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d170:	4618      	mov	r0, r3
 800d172:	f7f9 fd4b 	bl	8006c0c <__aeabi_f2d>
 800d176:	4603      	mov	r3, r0
 800d178:	460c      	mov	r4, r1
 800d17a:	461a      	mov	r2, r3
 800d17c:	4623      	mov	r3, r4
 800d17e:	481d      	ldr	r0, [pc, #116]	; (800d1f4 <_ZN10SFE_BMP1805BeginEv+0x6d4>)
 800d180:	f004 ffdc 	bl	801213c <printf>
		printf("BMP180: m_p2=%f\n", m_p2);
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d188:	4618      	mov	r0, r3
 800d18a:	f7f9 fd3f 	bl	8006c0c <__aeabi_f2d>
 800d18e:	4603      	mov	r3, r0
 800d190:	460c      	mov	r4, r1
 800d192:	461a      	mov	r2, r3
 800d194:	4623      	mov	r3, r4
 800d196:	4818      	ldr	r0, [pc, #96]	; (800d1f8 <_ZN10SFE_BMP1805BeginEv+0x6d8>)
 800d198:	f004 ffd0 	bl	801213c <printf>
		
		// Success!
		return true;
 800d19c:	2301      	movs	r3, #1
 800d19e:	e000      	b.n	800d1a2 <_ZN10SFE_BMP1805BeginEv+0x682>
	}
	else
	{
		// Error reading calibration data; bad component or connection?
		return false;
 800d1a0:	2300      	movs	r3, #0
	}
}
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	3730      	adds	r7, #48	; 0x30
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bdb0      	pop	{r4, r5, r7, pc}
 800d1aa:	bf00      	nop
 800d1ac:	f3af 8000 	nop.w
 800d1b0:	00000000 	.word	0x00000000
 800d1b4:	41128ae0 	.word	0x41128ae0
 800d1b8:	3ff00000 	.word	0x3ff00000
 800d1bc:	08016958 	.word	0x08016958
 800d1c0:	08016968 	.word	0x08016968
 800d1c4:	08016978 	.word	0x08016978
 800d1c8:	0801698c 	.word	0x0801698c
 800d1cc:	080169a0 	.word	0x080169a0
 800d1d0:	080169b0 	.word	0x080169b0
 800d1d4:	080169c4 	.word	0x080169c4
 800d1d8:	080169d8 	.word	0x080169d8
 800d1dc:	080169ec 	.word	0x080169ec
 800d1e0:	08016a00 	.word	0x08016a00
 800d1e4:	08016a14 	.word	0x08016a14
 800d1e8:	08016a28 	.word	0x08016a28
 800d1ec:	08016a3c 	.word	0x08016a3c
 800d1f0:	08016a50 	.word	0x08016a50
 800d1f4:	08016a64 	.word	0x08016a64
 800d1f8:	08016a78 	.word	0x08016a78
 800d1fc:	00000000 	.word	0x00000000
 800d200:	40bcbd00 	.word	0x40bcbd00

0800d204 <_ZN10SFE_BMP18016StartTemperatureEv>:


byte SFE_BMP180::StartTemperature(void)
// Begin a temperature reading.
// Will return delay in ms to wait, or 0 if I2C error
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b084      	sub	sp, #16
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
	byte data;
	bool result;

	data = BMP180_COMMAND_TEMPERATURE;
 800d20c:	232e      	movs	r3, #46	; 0x2e
 800d20e:	73bb      	strb	r3, [r7, #14]

	result = WriteBytes(BMP180_REG_CONTROL, &data, 1);
 800d210:	f107 020e 	add.w	r2, r7, #14
 800d214:	2301      	movs	r3, #1
 800d216:	21f4      	movs	r1, #244	; 0xf4
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	f000 fabe 	bl	800d79a <_ZN10SFE_BMP18010WriteBytesEhPhi>
 800d21e:	4603      	mov	r3, r0
 800d220:	73fb      	strb	r3, [r7, #15]
	
	if (result) 	// good write?
 800d222:	7bfb      	ldrb	r3, [r7, #15]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d001      	beq.n	800d22c <_ZN10SFE_BMP18016StartTemperatureEv+0x28>
		return 5; 	// return the delay in ms (rounded up) to wait before retrieving data
 800d228:	2305      	movs	r3, #5
 800d22a:	e000      	b.n	800d22e <_ZN10SFE_BMP18016StartTemperatureEv+0x2a>
	else
		return 0; 	// or return 0 if there was a problem communicating with the BMP
 800d22c:	2300      	movs	r3, #0
	
}
 800d22e:	4618      	mov	r0, r3
 800d230:	3710      	adds	r7, #16
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}
	...

0800d238 <_ZN10SFE_BMP18014GetTemperatureERf>:
// Retrieve a previously-started temperature reading.
// Requires begin() to be called once prior to retrieve calibration parameters.
// Requires startTemperature() to have been called prior and sufficient time elapsed.
// T: external variable to hold result.
// Returns 1 if successful, 0 if I2C error.
{
 800d238:	b5b0      	push	{r4, r5, r7, lr}
 800d23a:	b086      	sub	sp, #24
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
 800d240:	6039      	str	r1, [r7, #0]
	byte data[2];
	bool result;
	float tu, a;
	

	result = ReadBytes(BMP180_REG_RESULT, data, 2);
 800d242:	f107 0208 	add.w	r2, r7, #8
 800d246:	2302      	movs	r3, #2
 800d248:	21f6      	movs	r1, #246	; 0xf6
 800d24a:	6878      	ldr	r0, [r7, #4]
 800d24c:	f000 fa4e 	bl	800d6ec <_ZN10SFE_BMP1809ReadBytesEhPhi>
 800d250:	4603      	mov	r3, r0
 800d252:	75fb      	strb	r3, [r7, #23]

	if (result) // good read, calculate temperature
 800d254:	7dfb      	ldrb	r3, [r7, #23]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d05f      	beq.n	800d31a <_ZN10SFE_BMP18014GetTemperatureERf+0xe2>
	{
		tu = (data[0] * 256.0) + data[1];
 800d25a:	7a3b      	ldrb	r3, [r7, #8]
 800d25c:	4618      	mov	r0, r3
 800d25e:	f7f9 fcc3 	bl	8006be8 <__aeabi_i2d>
 800d262:	f04f 0200 	mov.w	r2, #0
 800d266:	4b2f      	ldr	r3, [pc, #188]	; (800d324 <_ZN10SFE_BMP18014GetTemperatureERf+0xec>)
 800d268:	f7f9 fd24 	bl	8006cb4 <__aeabi_dmul>
 800d26c:	4603      	mov	r3, r0
 800d26e:	460c      	mov	r4, r1
 800d270:	4625      	mov	r5, r4
 800d272:	461c      	mov	r4, r3
 800d274:	7a7b      	ldrb	r3, [r7, #9]
 800d276:	4618      	mov	r0, r3
 800d278:	f7f9 fcb6 	bl	8006be8 <__aeabi_i2d>
 800d27c:	4602      	mov	r2, r0
 800d27e:	460b      	mov	r3, r1
 800d280:	4620      	mov	r0, r4
 800d282:	4629      	mov	r1, r5
 800d284:	f7f9 fb64 	bl	8006950 <__adddf3>
 800d288:	4603      	mov	r3, r0
 800d28a:	460c      	mov	r4, r1
 800d28c:	4618      	mov	r0, r3
 800d28e:	4621      	mov	r1, r4
 800d290:	f7f9 ffe8 	bl	8007264 <__aeabi_d2f>
 800d294:	4603      	mov	r3, r0
 800d296:	613b      	str	r3, [r7, #16]
		//tu = 27898;

		//example from http://wmrx00.sourceforge.net/Arduino/BMP085-Calcs.pdf
		//tu = 0x69EC;
		
		a = m_c5 * (tu - m_c6);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	ed93 7a06 	vldr	s14, [r3, #24]
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	edd3 7a07 	vldr	s15, [r3, #28]
 800d2a4:	edd7 6a04 	vldr	s13, [r7, #16]
 800d2a8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d2ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2b0:	edc7 7a03 	vstr	s15, [r7, #12]
		temperature = a + (m_mc / (a + m_md));
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	edd3 6a08 	vldr	s13, [r3, #32]
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800d2c0:	edd7 7a03 	vldr	s15, [r7, #12]
 800d2c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d2c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2cc:	edd7 7a03 	vldr	s15, [r7, #12]
 800d2d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	edc3 7a00 	vstr	s15, [r3]

		printf("BMP_GetTemperature: tu=%f\n", tu);
 800d2da:	6938      	ldr	r0, [r7, #16]
 800d2dc:	f7f9 fc96 	bl	8006c0c <__aeabi_f2d>
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	460c      	mov	r4, r1
 800d2e4:	461a      	mov	r2, r3
 800d2e6:	4623      	mov	r3, r4
 800d2e8:	480f      	ldr	r0, [pc, #60]	; (800d328 <_ZN10SFE_BMP18014GetTemperatureERf+0xf0>)
 800d2ea:	f004 ff27 	bl	801213c <printf>
		printf("BMP_GetTemperature: a=%f\n", a);
 800d2ee:	68f8      	ldr	r0, [r7, #12]
 800d2f0:	f7f9 fc8c 	bl	8006c0c <__aeabi_f2d>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	460c      	mov	r4, r1
 800d2f8:	461a      	mov	r2, r3
 800d2fa:	4623      	mov	r3, r4
 800d2fc:	480b      	ldr	r0, [pc, #44]	; (800d32c <_ZN10SFE_BMP18014GetTemperatureERf+0xf4>)
 800d2fe:	f004 ff1d 	bl	801213c <printf>
		printf("BMP_GetTemperature: temperature=%f\n", temperature);
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	4618      	mov	r0, r3
 800d308:	f7f9 fc80 	bl	8006c0c <__aeabi_f2d>
 800d30c:	4603      	mov	r3, r0
 800d30e:	460c      	mov	r4, r1
 800d310:	461a      	mov	r2, r3
 800d312:	4623      	mov	r3, r4
 800d314:	4806      	ldr	r0, [pc, #24]	; (800d330 <_ZN10SFE_BMP18014GetTemperatureERf+0xf8>)
 800d316:	f004 ff11 	bl	801213c <printf>
	}

	return(result);
 800d31a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d31c:	4618      	mov	r0, r3
 800d31e:	3718      	adds	r7, #24
 800d320:	46bd      	mov	sp, r7
 800d322:	bdb0      	pop	{r4, r5, r7, pc}
 800d324:	40700000 	.word	0x40700000
 800d328:	08016a8c 	.word	0x08016a8c
 800d32c:	08016aa8 	.word	0x08016aa8
 800d330:	08016ac4 	.word	0x08016ac4

0800d334 <_ZN10SFE_BMP18013StartPressureEi>:

byte SFE_BMP180::StartPressure(int oversampling)
// Begin a pressure reading.
// Over sampling: 0 to 3, higher numbers are slower, higher-res outputs.
// Will return delay in ms to wait, or 0 if I2C error.
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b084      	sub	sp, #16
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
 800d33c:	6039      	str	r1, [r7, #0]
	byte data;
	bool result;
	byte delay;
	
	switch (oversampling)
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	2b03      	cmp	r3, #3
 800d342:	d81f      	bhi.n	800d384 <_ZN10SFE_BMP18013StartPressureEi+0x50>
 800d344:	a201      	add	r2, pc, #4	; (adr r2, 800d34c <_ZN10SFE_BMP18013StartPressureEi+0x18>)
 800d346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d34a:	bf00      	nop
 800d34c:	0800d35d 	.word	0x0800d35d
 800d350:	0800d367 	.word	0x0800d367
 800d354:	0800d371 	.word	0x0800d371
 800d358:	0800d37b 	.word	0x0800d37b
	{
		case 0:
			data = BMP180_COMMAND_PRESSURE0;
 800d35c:	2334      	movs	r3, #52	; 0x34
 800d35e:	737b      	strb	r3, [r7, #13]
			delay = 5;
 800d360:	2305      	movs	r3, #5
 800d362:	73fb      	strb	r3, [r7, #15]
		break;
 800d364:	e013      	b.n	800d38e <_ZN10SFE_BMP18013StartPressureEi+0x5a>
		case 1:
			data = BMP180_COMMAND_PRESSURE1;
 800d366:	2374      	movs	r3, #116	; 0x74
 800d368:	737b      	strb	r3, [r7, #13]
			delay = 8;
 800d36a:	2308      	movs	r3, #8
 800d36c:	73fb      	strb	r3, [r7, #15]
		break;
 800d36e:	e00e      	b.n	800d38e <_ZN10SFE_BMP18013StartPressureEi+0x5a>
		case 2:
			data = BMP180_COMMAND_PRESSURE2;
 800d370:	23b4      	movs	r3, #180	; 0xb4
 800d372:	737b      	strb	r3, [r7, #13]
			delay = 14;
 800d374:	230e      	movs	r3, #14
 800d376:	73fb      	strb	r3, [r7, #15]
		break;
 800d378:	e009      	b.n	800d38e <_ZN10SFE_BMP18013StartPressureEi+0x5a>
		case 3:
			data = BMP180_COMMAND_PRESSURE3;
 800d37a:	23f4      	movs	r3, #244	; 0xf4
 800d37c:	737b      	strb	r3, [r7, #13]
			delay = 26;
 800d37e:	231a      	movs	r3, #26
 800d380:	73fb      	strb	r3, [r7, #15]
		break;
 800d382:	e004      	b.n	800d38e <_ZN10SFE_BMP18013StartPressureEi+0x5a>
		default:
			data = BMP180_COMMAND_PRESSURE0;
 800d384:	2334      	movs	r3, #52	; 0x34
 800d386:	737b      	strb	r3, [r7, #13]
			delay = 5;
 800d388:	2305      	movs	r3, #5
 800d38a:	73fb      	strb	r3, [r7, #15]
		break;
 800d38c:	bf00      	nop
	}
	result = WriteBytes(BMP180_REG_CONTROL, &data, 1);
 800d38e:	f107 020d 	add.w	r2, r7, #13
 800d392:	2301      	movs	r3, #1
 800d394:	21f4      	movs	r1, #244	; 0xf4
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f000 f9ff 	bl	800d79a <_ZN10SFE_BMP18010WriteBytesEhPhi>
 800d39c:	4603      	mov	r3, r0
 800d39e:	73bb      	strb	r3, [r7, #14]

	if (result) // good write?
 800d3a0:	7bbb      	ldrb	r3, [r7, #14]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d001      	beq.n	800d3aa <_ZN10SFE_BMP18013StartPressureEi+0x76>
		return(delay); // return the delay in ms (rounded up) to wait before retrieving data
 800d3a6:	7bfb      	ldrb	r3, [r7, #15]
 800d3a8:	e000      	b.n	800d3ac <_ZN10SFE_BMP18013StartPressureEi+0x78>
	else
		return(0); // or return 0 if there was a problem communicating with the BMP
 800d3aa:	2300      	movs	r3, #0
}
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	3710      	adds	r7, #16
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}

0800d3b4 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 800d3b4:	b5b0      	push	{r4, r5, r7, lr}
 800d3b6:	b082      	sub	sp, #8
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	ed87 0a01 	vstr	s0, [r7, #4]
 800d3be:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 800d3c0:	6878      	ldr	r0, [r7, #4]
 800d3c2:	f7f9 fc23 	bl	8006c0c <__aeabi_f2d>
 800d3c6:	4604      	mov	r4, r0
 800d3c8:	460d      	mov	r5, r1
 800d3ca:	6838      	ldr	r0, [r7, #0]
 800d3cc:	f7f9 fc0c 	bl	8006be8 <__aeabi_i2d>
 800d3d0:	4602      	mov	r2, r0
 800d3d2:	460b      	mov	r3, r1
 800d3d4:	ec43 2b11 	vmov	d1, r2, r3
 800d3d8:	ec45 4b10 	vmov	d0, r4, r5
 800d3dc:	f003 f958 	bl	8010690 <pow>
 800d3e0:	eeb0 7a40 	vmov.f32	s14, s0
 800d3e4:	eef0 7a60 	vmov.f32	s15, s1
    }
 800d3e8:	eeb0 0a47 	vmov.f32	s0, s14
 800d3ec:	eef0 0a67 	vmov.f32	s1, s15
 800d3f0:	3708      	adds	r7, #8
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800d3f8 <_ZN10SFE_BMP18011GetPressureERff>:
// pressure: external variable to hold pressure.
// temperature: previously-calculated temperature.
// Returns 1 for success, 0 for I2C error.

// Note that calculated pressure value is absolute mbars, to compensate for altitude call SeaLevel().
{
 800d3f8:	b5b0      	push	{r4, r5, r7, lr}
 800d3fa:	b08e      	sub	sp, #56	; 0x38
 800d3fc:	af02      	add	r7, sp, #8
 800d3fe:	60f8      	str	r0, [r7, #12]
 800d400:	60b9      	str	r1, [r7, #8]
 800d402:	ed87 0a01 	vstr	s0, [r7, #4]
	byte data[3];
	bool result;
	float pu,s,x,y,z;

	result = ReadBytes(BMP180_REG_RESULT, data, 3);
 800d406:	f107 0214 	add.w	r2, r7, #20
 800d40a:	2303      	movs	r3, #3
 800d40c:	21f6      	movs	r1, #246	; 0xf6
 800d40e:	68f8      	ldr	r0, [r7, #12]
 800d410:	f000 f96c 	bl	800d6ec <_ZN10SFE_BMP1809ReadBytesEhPhi>
 800d414:	4603      	mov	r3, r0
 800d416:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	
	if (result) 	// good read, calculate pressure
 800d41a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d41e:	2b00      	cmp	r3, #0
 800d420:	f000 814c 	beq.w	800d6bc <_ZN10SFE_BMP18011GetPressureERff+0x2c4>
	{
		pu = (data[0] * 256.0) + data[1] + (data[2]/256.0);
 800d424:	7d3b      	ldrb	r3, [r7, #20]
 800d426:	4618      	mov	r0, r3
 800d428:	f7f9 fbde 	bl	8006be8 <__aeabi_i2d>
 800d42c:	f04f 0200 	mov.w	r2, #0
 800d430:	4ba5      	ldr	r3, [pc, #660]	; (800d6c8 <_ZN10SFE_BMP18011GetPressureERff+0x2d0>)
 800d432:	f7f9 fc3f 	bl	8006cb4 <__aeabi_dmul>
 800d436:	4603      	mov	r3, r0
 800d438:	460c      	mov	r4, r1
 800d43a:	4625      	mov	r5, r4
 800d43c:	461c      	mov	r4, r3
 800d43e:	7d7b      	ldrb	r3, [r7, #21]
 800d440:	4618      	mov	r0, r3
 800d442:	f7f9 fbd1 	bl	8006be8 <__aeabi_i2d>
 800d446:	4602      	mov	r2, r0
 800d448:	460b      	mov	r3, r1
 800d44a:	4620      	mov	r0, r4
 800d44c:	4629      	mov	r1, r5
 800d44e:	f7f9 fa7f 	bl	8006950 <__adddf3>
 800d452:	4603      	mov	r3, r0
 800d454:	460c      	mov	r4, r1
 800d456:	4625      	mov	r5, r4
 800d458:	461c      	mov	r4, r3
 800d45a:	7dbb      	ldrb	r3, [r7, #22]
 800d45c:	4618      	mov	r0, r3
 800d45e:	f7f9 fbc3 	bl	8006be8 <__aeabi_i2d>
 800d462:	f04f 0200 	mov.w	r2, #0
 800d466:	4b98      	ldr	r3, [pc, #608]	; (800d6c8 <_ZN10SFE_BMP18011GetPressureERff+0x2d0>)
 800d468:	f7f9 fd4e 	bl	8006f08 <__aeabi_ddiv>
 800d46c:	4602      	mov	r2, r0
 800d46e:	460b      	mov	r3, r1
 800d470:	4620      	mov	r0, r4
 800d472:	4629      	mov	r1, r5
 800d474:	f7f9 fa6c 	bl	8006950 <__adddf3>
 800d478:	4603      	mov	r3, r0
 800d47a:	460c      	mov	r4, r1
 800d47c:	4618      	mov	r0, r3
 800d47e:	4621      	mov	r1, r4
 800d480:	f7f9 fef0 	bl	8007264 <__aeabi_d2f>
 800d484:	4603      	mov	r3, r0
 800d486:	62bb      	str	r3, [r7, #40]	; 0x28
		//pu = 23843;

		//example from http://wmrx00.sourceforge.net/Arduino/BMP085-Calcs.pdf, pu = 0x982FC0;	
		//pu = (0x98 * 256.0) + 0x2F + (0xC0/256.0);
		
		s = temperature - 25.0;
 800d488:	edd7 7a01 	vldr	s15, [r7, #4]
 800d48c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800d490:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d494:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		x = (m_x2 * pow(s, 2)) + (m_x1 * s) + m_x0;
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d49c:	4618      	mov	r0, r3
 800d49e:	f7f9 fbb5 	bl	8006c0c <__aeabi_f2d>
 800d4a2:	4604      	mov	r4, r0
 800d4a4:	460d      	mov	r5, r1
 800d4a6:	2002      	movs	r0, #2
 800d4a8:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800d4ac:	f7ff ff82 	bl	800d3b4 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800d4b0:	ec53 2b10 	vmov	r2, r3, d0
 800d4b4:	4620      	mov	r0, r4
 800d4b6:	4629      	mov	r1, r5
 800d4b8:	f7f9 fbfc 	bl	8006cb4 <__aeabi_dmul>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	460c      	mov	r4, r1
 800d4c0:	4625      	mov	r5, r4
 800d4c2:	461c      	mov	r4, r3
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800d4ca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800d4ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4d2:	ee17 0a90 	vmov	r0, s15
 800d4d6:	f7f9 fb99 	bl	8006c0c <__aeabi_f2d>
 800d4da:	4602      	mov	r2, r0
 800d4dc:	460b      	mov	r3, r1
 800d4de:	4620      	mov	r0, r4
 800d4e0:	4629      	mov	r1, r5
 800d4e2:	f7f9 fa35 	bl	8006950 <__adddf3>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	460c      	mov	r4, r1
 800d4ea:	4625      	mov	r5, r4
 800d4ec:	461c      	mov	r4, r3
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	f7f9 fb8a 	bl	8006c0c <__aeabi_f2d>
 800d4f8:	4602      	mov	r2, r0
 800d4fa:	460b      	mov	r3, r1
 800d4fc:	4620      	mov	r0, r4
 800d4fe:	4629      	mov	r1, r5
 800d500:	f7f9 fa26 	bl	8006950 <__adddf3>
 800d504:	4603      	mov	r3, r0
 800d506:	460c      	mov	r4, r1
 800d508:	4618      	mov	r0, r3
 800d50a:	4621      	mov	r1, r4
 800d50c:	f7f9 feaa 	bl	8007264 <__aeabi_d2f>
 800d510:	4603      	mov	r3, r0
 800d512:	623b      	str	r3, [r7, #32]
		y = (m_y2 * pow(s, 2)) + (m_y1 * s) + m_y0;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d518:	4618      	mov	r0, r3
 800d51a:	f7f9 fb77 	bl	8006c0c <__aeabi_f2d>
 800d51e:	4604      	mov	r4, r0
 800d520:	460d      	mov	r5, r1
 800d522:	2002      	movs	r0, #2
 800d524:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800d528:	f7ff ff44 	bl	800d3b4 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800d52c:	ec53 2b10 	vmov	r2, r3, d0
 800d530:	4620      	mov	r0, r4
 800d532:	4629      	mov	r1, r5
 800d534:	f7f9 fbbe 	bl	8006cb4 <__aeabi_dmul>
 800d538:	4603      	mov	r3, r0
 800d53a:	460c      	mov	r4, r1
 800d53c:	4625      	mov	r5, r4
 800d53e:	461c      	mov	r4, r3
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800d546:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800d54a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d54e:	ee17 0a90 	vmov	r0, s15
 800d552:	f7f9 fb5b 	bl	8006c0c <__aeabi_f2d>
 800d556:	4602      	mov	r2, r0
 800d558:	460b      	mov	r3, r1
 800d55a:	4620      	mov	r0, r4
 800d55c:	4629      	mov	r1, r5
 800d55e:	f7f9 f9f7 	bl	8006950 <__adddf3>
 800d562:	4603      	mov	r3, r0
 800d564:	460c      	mov	r4, r1
 800d566:	4625      	mov	r5, r4
 800d568:	461c      	mov	r4, r3
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d56e:	4618      	mov	r0, r3
 800d570:	f7f9 fb4c 	bl	8006c0c <__aeabi_f2d>
 800d574:	4602      	mov	r2, r0
 800d576:	460b      	mov	r3, r1
 800d578:	4620      	mov	r0, r4
 800d57a:	4629      	mov	r1, r5
 800d57c:	f7f9 f9e8 	bl	8006950 <__adddf3>
 800d580:	4603      	mov	r3, r0
 800d582:	460c      	mov	r4, r1
 800d584:	4618      	mov	r0, r3
 800d586:	4621      	mov	r1, r4
 800d588:	f7f9 fe6c 	bl	8007264 <__aeabi_d2f>
 800d58c:	4603      	mov	r3, r0
 800d58e:	61fb      	str	r3, [r7, #28]
		z = (pu - x) / y;
 800d590:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d594:	edd7 7a08 	vldr	s15, [r7, #32]
 800d598:	ee77 6a67 	vsub.f32	s13, s14, s15
 800d59c:	ed97 7a07 	vldr	s14, [r7, #28]
 800d5a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d5a4:	edc7 7a06 	vstr	s15, [r7, #24]
		pressure = (m_p2 * pow(z, 2)) + (m_p1 * z) + m_p0;
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	f7f9 fb2d 	bl	8006c0c <__aeabi_f2d>
 800d5b2:	4604      	mov	r4, r0
 800d5b4:	460d      	mov	r5, r1
 800d5b6:	2002      	movs	r0, #2
 800d5b8:	ed97 0a06 	vldr	s0, [r7, #24]
 800d5bc:	f7ff fefa 	bl	800d3b4 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800d5c0:	ec53 2b10 	vmov	r2, r3, d0
 800d5c4:	4620      	mov	r0, r4
 800d5c6:	4629      	mov	r1, r5
 800d5c8:	f7f9 fb74 	bl	8006cb4 <__aeabi_dmul>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	460c      	mov	r4, r1
 800d5d0:	4625      	mov	r5, r4
 800d5d2:	461c      	mov	r4, r3
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800d5da:	edd7 7a06 	vldr	s15, [r7, #24]
 800d5de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5e2:	ee17 0a90 	vmov	r0, s15
 800d5e6:	f7f9 fb11 	bl	8006c0c <__aeabi_f2d>
 800d5ea:	4602      	mov	r2, r0
 800d5ec:	460b      	mov	r3, r1
 800d5ee:	4620      	mov	r0, r4
 800d5f0:	4629      	mov	r1, r5
 800d5f2:	f7f9 f9ad 	bl	8006950 <__adddf3>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	460c      	mov	r4, r1
 800d5fa:	4625      	mov	r5, r4
 800d5fc:	461c      	mov	r4, r3
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d602:	4618      	mov	r0, r3
 800d604:	f7f9 fb02 	bl	8006c0c <__aeabi_f2d>
 800d608:	4602      	mov	r2, r0
 800d60a:	460b      	mov	r3, r1
 800d60c:	4620      	mov	r0, r4
 800d60e:	4629      	mov	r1, r5
 800d610:	f7f9 f99e 	bl	8006950 <__adddf3>
 800d614:	4603      	mov	r3, r0
 800d616:	460c      	mov	r4, r1
 800d618:	4618      	mov	r0, r3
 800d61a:	4621      	mov	r1, r4
 800d61c:	f7f9 fe22 	bl	8007264 <__aeabi_d2f>
 800d620:	4602      	mov	r2, r0
 800d622:	68bb      	ldr	r3, [r7, #8]
 800d624:	601a      	str	r2, [r3, #0]

		printf("%s(%d): Pressure=%f\n", __FUNCTION__, __LINE__, pressure);
 800d626:	68bb      	ldr	r3, [r7, #8]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	4618      	mov	r0, r3
 800d62c:	f7f9 faee 	bl	8006c0c <__aeabi_f2d>
 800d630:	4603      	mov	r3, r0
 800d632:	460c      	mov	r4, r1
 800d634:	e88d 0018 	stmia.w	sp, {r3, r4}
 800d638:	f44f 7283 	mov.w	r2, #262	; 0x106
 800d63c:	4923      	ldr	r1, [pc, #140]	; (800d6cc <_ZN10SFE_BMP18011GetPressureERff+0x2d4>)
 800d63e:	4824      	ldr	r0, [pc, #144]	; (800d6d0 <_ZN10SFE_BMP18011GetPressureERff+0x2d8>)
 800d640:	f004 fd7c 	bl	801213c <printf>
		printf("BMP180: Temp=%f\n", temperature);
 800d644:	6878      	ldr	r0, [r7, #4]
 800d646:	f7f9 fae1 	bl	8006c0c <__aeabi_f2d>
 800d64a:	4603      	mov	r3, r0
 800d64c:	460c      	mov	r4, r1
 800d64e:	461a      	mov	r2, r3
 800d650:	4623      	mov	r3, r4
 800d652:	4820      	ldr	r0, [pc, #128]	; (800d6d4 <_ZN10SFE_BMP18011GetPressureERff+0x2dc>)
 800d654:	f004 fd72 	bl	801213c <printf>
		printf("BMP180: s=%f\n", s);
 800d658:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d65a:	f7f9 fad7 	bl	8006c0c <__aeabi_f2d>
 800d65e:	4603      	mov	r3, r0
 800d660:	460c      	mov	r4, r1
 800d662:	461a      	mov	r2, r3
 800d664:	4623      	mov	r3, r4
 800d666:	481c      	ldr	r0, [pc, #112]	; (800d6d8 <_ZN10SFE_BMP18011GetPressureERff+0x2e0>)
 800d668:	f004 fd68 	bl	801213c <printf>
		printf("BMP180: x=%f\n", x);
 800d66c:	6a38      	ldr	r0, [r7, #32]
 800d66e:	f7f9 facd 	bl	8006c0c <__aeabi_f2d>
 800d672:	4603      	mov	r3, r0
 800d674:	460c      	mov	r4, r1
 800d676:	461a      	mov	r2, r3
 800d678:	4623      	mov	r3, r4
 800d67a:	4818      	ldr	r0, [pc, #96]	; (800d6dc <_ZN10SFE_BMP18011GetPressureERff+0x2e4>)
 800d67c:	f004 fd5e 	bl	801213c <printf>
		printf("BMP180: y=%f\n", y);
 800d680:	69f8      	ldr	r0, [r7, #28]
 800d682:	f7f9 fac3 	bl	8006c0c <__aeabi_f2d>
 800d686:	4603      	mov	r3, r0
 800d688:	460c      	mov	r4, r1
 800d68a:	461a      	mov	r2, r3
 800d68c:	4623      	mov	r3, r4
 800d68e:	4814      	ldr	r0, [pc, #80]	; (800d6e0 <_ZN10SFE_BMP18011GetPressureERff+0x2e8>)
 800d690:	f004 fd54 	bl	801213c <printf>
		printf("BMP180: z=%f\n", z);
 800d694:	69b8      	ldr	r0, [r7, #24]
 800d696:	f7f9 fab9 	bl	8006c0c <__aeabi_f2d>
 800d69a:	4603      	mov	r3, r0
 800d69c:	460c      	mov	r4, r1
 800d69e:	461a      	mov	r2, r3
 800d6a0:	4623      	mov	r3, r4
 800d6a2:	4810      	ldr	r0, [pc, #64]	; (800d6e4 <_ZN10SFE_BMP18011GetPressureERff+0x2ec>)
 800d6a4:	f004 fd4a 	bl	801213c <printf>
		printf("BMP180: pu=%f\n", pu);
 800d6a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6aa:	f7f9 faaf 	bl	8006c0c <__aeabi_f2d>
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	460c      	mov	r4, r1
 800d6b2:	461a      	mov	r2, r3
 800d6b4:	4623      	mov	r3, r4
 800d6b6:	480c      	ldr	r0, [pc, #48]	; (800d6e8 <_ZN10SFE_BMP18011GetPressureERff+0x2f0>)
 800d6b8:	f004 fd40 	bl	801213c <printf>
	}
	return(result);
 800d6bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	3730      	adds	r7, #48	; 0x30
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bdb0      	pop	{r4, r5, r7, pc}
 800d6c8:	40700000 	.word	0x40700000
 800d6cc:	08016b64 	.word	0x08016b64
 800d6d0:	08016ae8 	.word	0x08016ae8
 800d6d4:	08016b00 	.word	0x08016b00
 800d6d8:	08016b14 	.word	0x08016b14
 800d6dc:	08016b24 	.word	0x08016b24
 800d6e0:	08016b34 	.word	0x08016b34
 800d6e4:	08016b44 	.word	0x08016b44
 800d6e8:	08016b54 	.word	0x08016b54

0800d6ec <_ZN10SFE_BMP1809ReadBytesEhPhi>:

bool SFE_BMP180::ReadBytes(byte regAddr, byte *values, int length)
// Read an array of bytes from device
// values: external array to hold data. Put starting register in values[0].
// length: number of bytes to read
{
 800d6ec:	b590      	push	{r4, r7, lr}
 800d6ee:	b0cb      	sub	sp, #300	; 0x12c
 800d6f0:	af04      	add	r7, sp, #16
 800d6f2:	f107 040c 	add.w	r4, r7, #12
 800d6f6:	6020      	str	r0, [r4, #0]
 800d6f8:	4608      	mov	r0, r1
 800d6fa:	1d39      	adds	r1, r7, #4
 800d6fc:	600a      	str	r2, [r1, #0]
 800d6fe:	463a      	mov	r2, r7
 800d700:	6013      	str	r3, [r2, #0]
 800d702:	f107 030b 	add.w	r3, r7, #11
 800d706:	4602      	mov	r2, r0
 800d708:	701a      	strb	r2, [r3, #0]
	byte buf[255];

	m_error = HAL_I2C_Mem_Read(m_pI2C, BMP180_ADDR << 1, regAddr, I2C_MEMADD_SIZE_8BIT, buf, length, 500);
 800d70a:	f107 030c 	add.w	r3, r7, #12
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d712:	f107 030b 	add.w	r3, r7, #11
 800d716:	781b      	ldrb	r3, [r3, #0]
 800d718:	b299      	uxth	r1, r3
 800d71a:	463b      	mov	r3, r7
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	b29b      	uxth	r3, r3
 800d720:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800d724:	9202      	str	r2, [sp, #8]
 800d726:	9301      	str	r3, [sp, #4]
 800d728:	f107 0314 	add.w	r3, r7, #20
 800d72c:	9300      	str	r3, [sp, #0]
 800d72e:	2301      	movs	r3, #1
 800d730:	460a      	mov	r2, r1
 800d732:	21ee      	movs	r1, #238	; 0xee
 800d734:	f7fc fda8 	bl	800a288 <HAL_I2C_Mem_Read>
 800d738:	4603      	mov	r3, r0
 800d73a:	461a      	mov	r2, r3
 800d73c:	f107 030c 	add.w	r3, r7, #12
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

	if (m_error == HAL_OK)
 800d746:	f107 030c 	add.w	r3, r7, #12
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800d750:	2b00      	cmp	r3, #0
 800d752:	d11c      	bne.n	800d78e <_ZN10SFE_BMP1809ReadBytesEhPhi+0xa2>
	{
		for(int ix = 0; ix < length; ix++)
 800d754:	2300      	movs	r3, #0
 800d756:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800d75a:	463b      	mov	r3, r7
 800d75c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	429a      	cmp	r2, r3
 800d764:	da11      	bge.n	800d78a <_ZN10SFE_BMP1809ReadBytesEhPhi+0x9e>
		{
			values[ix] = buf[ix];
 800d766:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d76a:	1d3a      	adds	r2, r7, #4
 800d76c:	6812      	ldr	r2, [r2, #0]
 800d76e:	4413      	add	r3, r2
 800d770:	f107 0114 	add.w	r1, r7, #20
 800d774:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800d778:	440a      	add	r2, r1
 800d77a:	7812      	ldrb	r2, [r2, #0]
 800d77c:	701a      	strb	r2, [r3, #0]
		for(int ix = 0; ix < length; ix++)
 800d77e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d782:	3301      	adds	r3, #1
 800d784:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800d788:	e7e7      	b.n	800d75a <_ZN10SFE_BMP1809ReadBytesEhPhi+0x6e>
		}
		return true;
 800d78a:	2301      	movs	r3, #1
 800d78c:	e000      	b.n	800d790 <_ZN10SFE_BMP1809ReadBytesEhPhi+0xa4>
	}
	return false;
 800d78e:	2300      	movs	r3, #0
}
 800d790:	4618      	mov	r0, r3
 800d792:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800d796:	46bd      	mov	sp, r7
 800d798:	bd90      	pop	{r4, r7, pc}

0800d79a <_ZN10SFE_BMP18010WriteBytesEhPhi>:
bool SFE_BMP180::WriteBytes(byte regAddr, byte *values, int length)
// Write an array of bytes to device
// registerAddress: register to start writing
// values: external array of data to write. Put starting register in values[0].
// length: number of bytes to write
{
 800d79a:	b580      	push	{r7, lr}
 800d79c:	b088      	sub	sp, #32
 800d79e:	af04      	add	r7, sp, #16
 800d7a0:	60f8      	str	r0, [r7, #12]
 800d7a2:	607a      	str	r2, [r7, #4]
 800d7a4:	603b      	str	r3, [r7, #0]
 800d7a6:	460b      	mov	r3, r1
 800d7a8:	72fb      	strb	r3, [r7, #11]
	m_error= HAL_I2C_Mem_Write(m_pI2C, BMP180_ADDR << 1, regAddr, I2C_MEMADD_SIZE_8BIT, values, length, 500);
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d7ae:	7afb      	ldrb	r3, [r7, #11]
 800d7b0:	b299      	uxth	r1, r3
 800d7b2:	683b      	ldr	r3, [r7, #0]
 800d7b4:	b29b      	uxth	r3, r3
 800d7b6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800d7ba:	9202      	str	r2, [sp, #8]
 800d7bc:	9301      	str	r3, [sp, #4]
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	9300      	str	r3, [sp, #0]
 800d7c2:	2301      	movs	r3, #1
 800d7c4:	460a      	mov	r2, r1
 800d7c6:	21ee      	movs	r1, #238	; 0xee
 800d7c8:	f7fc fc9c 	bl	800a104 <HAL_I2C_Mem_Write>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	461a      	mov	r2, r3
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

	if (m_error == HAL_OK)
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d101      	bne.n	800d7e4 <_ZN10SFE_BMP18010WriteBytesEhPhi+0x4a>
		return true;
 800d7e0:	2301      	movs	r3, #1
 800d7e2:	e000      	b.n	800d7e6 <_ZN10SFE_BMP18010WriteBytesEhPhi+0x4c>
	else
		return false;
 800d7e4:	2300      	movs	r3, #0
}
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	3710      	adds	r7, #16
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	bd80      	pop	{r7, pc}
	...

0800d7f0 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b084      	sub	sp, #16
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
	uint32_t clk_cycle_start = DWT->CYCCNT;
 800d7f8:	4b0f      	ldr	r3, [pc, #60]	; (800d838 <DWT_Delay_us+0x48>)
 800d7fa:	685b      	ldr	r3, [r3, #4]
 800d7fc:	60fb      	str	r3, [r7, #12]

	/* Go to number of cycles for system */
	microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800d7fe:	f7fd fc13 	bl	800b028 <HAL_RCC_GetHCLKFreq>
 800d802:	4602      	mov	r2, r0
 800d804:	4b0d      	ldr	r3, [pc, #52]	; (800d83c <DWT_Delay_us+0x4c>)
 800d806:	fba3 2302 	umull	r2, r3, r3, r2
 800d80a:	0c9a      	lsrs	r2, r3, #18
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	fb02 f303 	mul.w	r3, r2, r3
 800d812:	607b      	str	r3, [r7, #4]

	/* Delay till end */
	while ((DWT->CYCCNT - clk_cycle_start) < microseconds)
 800d814:	4b08      	ldr	r3, [pc, #32]	; (800d838 <DWT_Delay_us+0x48>)
 800d816:	685a      	ldr	r2, [r3, #4]
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	1ad2      	subs	r2, r2, r3
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	429a      	cmp	r2, r3
 800d820:	bf34      	ite	cc
 800d822:	2301      	movcc	r3, #1
 800d824:	2300      	movcs	r3, #0
 800d826:	b2db      	uxtb	r3, r3
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d000      	beq.n	800d82e <DWT_Delay_us+0x3e>
 800d82c:	e7f2      	b.n	800d814 <DWT_Delay_us+0x24>
		;
}
 800d82e:	bf00      	nop
 800d830:	3710      	adds	r7, #16
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}
 800d836:	bf00      	nop
 800d838:	e0001000 	.word	0xe0001000
 800d83c:	431bde83 	.word	0x431bde83

0800d840 <_ZN5DHT11C1EP12GPIO_TypeDefm>:

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

DHT11::DHT11(GPIO_TypeDef  *port, uint32_t pin)
 800d840:	b480      	push	{r7}
 800d842:	b085      	sub	sp, #20
 800d844:	af00      	add	r7, sp, #0
 800d846:	60f8      	str	r0, [r7, #12]
 800d848:	60b9      	str	r1, [r7, #8]
 800d84a:	607a      	str	r2, [r7, #4]
{
	m_port = port;
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	68ba      	ldr	r2, [r7, #8]
 800d850:	601a      	str	r2, [r3, #0]
	m_pin = pin;
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	687a      	ldr	r2, [r7, #4]
 800d856:	605a      	str	r2, [r3, #4]
}
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	4618      	mov	r0, r3
 800d85c:	3714      	adds	r7, #20
 800d85e:	46bd      	mov	sp, r7
 800d860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d864:	4770      	bx	lr

0800d866 <_ZN5DHT1113SetGpioOutputEv>:

void DHT11::SetGpioOutput(void)
{
 800d866:	b580      	push	{r7, lr}
 800d868:	b082      	sub	sp, #8
 800d86a:	af00      	add	r7, sp, #0
 800d86c:	6078      	str	r0, [r7, #4]
	/*Configure GPIO pin output: PA2 */
	GPIO_InitStruct.Pin = m_pin;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	685a      	ldr	r2, [r3, #4]
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	62da      	str	r2, [r3, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2201      	movs	r2, #1
 800d87a:	631a      	str	r2, [r3, #48]	; 0x30
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2200      	movs	r2, #0
 800d880:	639a      	str	r2, [r3, #56]	; 0x38

	HAL_GPIO_Init(m_port, &GPIO_InitStruct);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681a      	ldr	r2, [r3, #0]
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	332c      	adds	r3, #44	; 0x2c
 800d88a:	4619      	mov	r1, r3
 800d88c:	4610      	mov	r0, r2
 800d88e:	f7fb ff1d 	bl	80096cc <HAL_GPIO_Init>
}
 800d892:	bf00      	nop
 800d894:	3708      	adds	r7, #8
 800d896:	46bd      	mov	sp, r7
 800d898:	bd80      	pop	{r7, pc}

0800d89a <_ZN5DHT1112SetGpioInputEv>:

void DHT11::SetGpioInput(void)
{
 800d89a:	b580      	push	{r7, lr}
 800d89c:	b082      	sub	sp, #8
 800d89e:	af00      	add	r7, sp, #0
 800d8a0:	6078      	str	r0, [r7, #4]
	/*Configure GPIO pin input: PA2 */
	GPIO_InitStruct.Pin = m_pin;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	685a      	ldr	r2, [r3, #4]
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	62da      	str	r2, [r3, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	631a      	str	r2, [r3, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_GPIO_Init(m_port, &GPIO_InitStruct);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681a      	ldr	r2, [r3, #0]
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	332c      	adds	r3, #44	; 0x2c
 800d8be:	4619      	mov	r1, r3
 800d8c0:	4610      	mov	r0, r2
 800d8c2:	f7fb ff03 	bl	80096cc <HAL_GPIO_Init>
}
 800d8c6:	bf00      	nop
 800d8c8:	3708      	adds	r7, #8
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	bd80      	pop	{r7, pc}

0800d8ce <_ZN5DHT115StartEv>:

void DHT11::Start(void)
{
 800d8ce:	b580      	push	{r7, lr}
 800d8d0:	b082      	sub	sp, #8
 800d8d2:	af00      	add	r7, sp, #0
 800d8d4:	6078      	str	r0, [r7, #4]
	SetGpioOutput();  // set the pin as output
 800d8d6:	6878      	ldr	r0, [r7, #4]
 800d8d8:	f7ff ffc5 	bl	800d866 <_ZN5DHT1113SetGpioOutputEv>

	HAL_GPIO_WritePin(m_port, m_pin, GPIO_PIN_RESET); 		 // pull the pin low
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	6818      	ldr	r0, [r3, #0]
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	685b      	ldr	r3, [r3, #4]
 800d8e4:	b29b      	uxth	r3, r3
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	4619      	mov	r1, r3
 800d8ea:	f7fc f869 	bl	80099c0 <HAL_GPIO_WritePin>

	HAL_Delay(18);   // wait for 18ms
 800d8ee:	2012      	movs	r0, #18
 800d8f0:	f7fa fe48 	bl	8008584 <HAL_Delay>

	SetGpioInput();   // set as input
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f7ff ffd0 	bl	800d89a <_ZN5DHT1112SetGpioInputEv>

}
 800d8fa:	bf00      	nop
 800d8fc:	3708      	adds	r7, #8
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}

0800d902 <_ZN5DHT1113CheckResponseEv>:

void DHT11::CheckResponse(void)
{
 800d902:	b580      	push	{r7, lr}
 800d904:	b082      	sub	sp, #8
 800d906:	af00      	add	r7, sp, #0
 800d908:	6078      	str	r0, [r7, #4]
	DWT_Delay_us(40);
 800d90a:	2028      	movs	r0, #40	; 0x28
 800d90c:	f7ff ff70 	bl	800d7f0 <DWT_Delay_us>

	if (!(HAL_GPIO_ReadPin(m_port, m_pin)))
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681a      	ldr	r2, [r3, #0]
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	685b      	ldr	r3, [r3, #4]
 800d918:	b29b      	uxth	r3, r3
 800d91a:	4619      	mov	r1, r3
 800d91c:	4610      	mov	r0, r2
 800d91e:	f7fc f83d 	bl	800999c <HAL_GPIO_ReadPin>
 800d922:	4603      	mov	r3, r0
 800d924:	2b00      	cmp	r3, #0
 800d926:	bf0c      	ite	eq
 800d928:	2301      	moveq	r3, #1
 800d92a:	2300      	movne	r3, #0
 800d92c:	b2db      	uxtb	r3, r3
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d017      	beq.n	800d962 <_ZN5DHT1113CheckResponseEv+0x60>
	{
		DWT_Delay_us(80);
 800d932:	2050      	movs	r0, #80	; 0x50
 800d934:	f7ff ff5c 	bl	800d7f0 <DWT_Delay_us>
		if ((HAL_GPIO_ReadPin(m_port, m_pin)))
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681a      	ldr	r2, [r3, #0]
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	685b      	ldr	r3, [r3, #4]
 800d940:	b29b      	uxth	r3, r3
 800d942:	4619      	mov	r1, r3
 800d944:	4610      	mov	r0, r2
 800d946:	f7fc f829 	bl	800999c <HAL_GPIO_ReadPin>
 800d94a:	4603      	mov	r3, r0
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	bf14      	ite	ne
 800d950:	2301      	movne	r3, #1
 800d952:	2300      	moveq	r3, #0
 800d954:	b2db      	uxtb	r3, r3
 800d956:	2b00      	cmp	r3, #0
 800d958:	d003      	beq.n	800d962 <_ZN5DHT1113CheckResponseEv+0x60>
			check = 1;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	2201      	movs	r2, #1
 800d95e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	}

	while ((HAL_GPIO_ReadPin(m_port, m_pin)))
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681a      	ldr	r2, [r3, #0]
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	685b      	ldr	r3, [r3, #4]
 800d96a:	b29b      	uxth	r3, r3
 800d96c:	4619      	mov	r1, r3
 800d96e:	4610      	mov	r0, r2
 800d970:	f7fc f814 	bl	800999c <HAL_GPIO_ReadPin>
 800d974:	4603      	mov	r3, r0
 800d976:	2b00      	cmp	r3, #0
 800d978:	bf14      	ite	ne
 800d97a:	2301      	movne	r3, #1
 800d97c:	2300      	moveq	r3, #0
 800d97e:	b2db      	uxtb	r3, r3
 800d980:	2b00      	cmp	r3, #0
 800d982:	d000      	beq.n	800d986 <_ZN5DHT1113CheckResponseEv+0x84>
 800d984:	e7ed      	b.n	800d962 <_ZN5DHT1113CheckResponseEv+0x60>
		;   // wait for the pin to go low
}
 800d986:	bf00      	nop
 800d988:	3708      	adds	r7, #8
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}

0800d98e <_ZN5DHT118ReadDataEv>:

uint8_t DHT11::ReadData(void)
{
 800d98e:	b580      	push	{r7, lr}
 800d990:	b084      	sub	sp, #16
 800d992:	af00      	add	r7, sp, #0
 800d994:	6078      	str	r0, [r7, #4]
	uint8_t i, j;

	for (j = 0; j < 8; j++)
 800d996:	2300      	movs	r3, #0
 800d998:	73bb      	strb	r3, [r7, #14]
 800d99a:	7bbb      	ldrb	r3, [r7, #14]
 800d99c:	2b07      	cmp	r3, #7
 800d99e:	dc56      	bgt.n	800da4e <_ZN5DHT118ReadDataEv+0xc0>
	{
		while (!(HAL_GPIO_ReadPin(m_port, m_pin)))			;   // wait for the pin to go high
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681a      	ldr	r2, [r3, #0]
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	685b      	ldr	r3, [r3, #4]
 800d9a8:	b29b      	uxth	r3, r3
 800d9aa:	4619      	mov	r1, r3
 800d9ac:	4610      	mov	r0, r2
 800d9ae:	f7fb fff5 	bl	800999c <HAL_GPIO_ReadPin>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	bf0c      	ite	eq
 800d9b8:	2301      	moveq	r3, #1
 800d9ba:	2300      	movne	r3, #0
 800d9bc:	b2db      	uxtb	r3, r3
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d000      	beq.n	800d9c4 <_ZN5DHT118ReadDataEv+0x36>
 800d9c2:	e7ed      	b.n	800d9a0 <_ZN5DHT118ReadDataEv+0x12>

		DWT_Delay_us(40);   // wait for 40 us
 800d9c4:	2028      	movs	r0, #40	; 0x28
 800d9c6:	f7ff ff13 	bl	800d7f0 <DWT_Delay_us>
		if ((HAL_GPIO_ReadPin(m_port, m_pin)) == 0)   // if the pin is low
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681a      	ldr	r2, [r3, #0]
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	685b      	ldr	r3, [r3, #4]
 800d9d2:	b29b      	uxth	r3, r3
 800d9d4:	4619      	mov	r1, r3
 800d9d6:	4610      	mov	r0, r2
 800d9d8:	f7fb ffe0 	bl	800999c <HAL_GPIO_ReadPin>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	bf0c      	ite	eq
 800d9e2:	2301      	moveq	r3, #1
 800d9e4:	2300      	movne	r3, #0
 800d9e6:	b2db      	uxtb	r3, r3
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d00e      	beq.n	800da0a <_ZN5DHT118ReadDataEv+0x7c>
		{
			i &= ~(1 << (7 - j));   // write 0
 800d9ec:	7bbb      	ldrb	r3, [r7, #14]
 800d9ee:	f1c3 0307 	rsb	r3, r3, #7
 800d9f2:	2201      	movs	r2, #1
 800d9f4:	fa02 f303 	lsl.w	r3, r2, r3
 800d9f8:	b25b      	sxtb	r3, r3
 800d9fa:	43db      	mvns	r3, r3
 800d9fc:	b25a      	sxtb	r2, r3
 800d9fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da02:	4013      	ands	r3, r2
 800da04:	b25b      	sxtb	r3, r3
 800da06:	73fb      	strb	r3, [r7, #15]
 800da08:	e00b      	b.n	800da22 <_ZN5DHT118ReadDataEv+0x94>
		}
		else
			i |= (1 << (7 - j));  // if the pin is high, write 1
 800da0a:	7bbb      	ldrb	r3, [r7, #14]
 800da0c:	f1c3 0307 	rsb	r3, r3, #7
 800da10:	2201      	movs	r2, #1
 800da12:	fa02 f303 	lsl.w	r3, r2, r3
 800da16:	b25a      	sxtb	r2, r3
 800da18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da1c:	4313      	orrs	r3, r2
 800da1e:	b25b      	sxtb	r3, r3
 800da20:	73fb      	strb	r3, [r7, #15]

		while ((HAL_GPIO_ReadPin(m_port, m_pin)));  // wait for the pin to go low
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681a      	ldr	r2, [r3, #0]
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	685b      	ldr	r3, [r3, #4]
 800da2a:	b29b      	uxth	r3, r3
 800da2c:	4619      	mov	r1, r3
 800da2e:	4610      	mov	r0, r2
 800da30:	f7fb ffb4 	bl	800999c <HAL_GPIO_ReadPin>
 800da34:	4603      	mov	r3, r0
 800da36:	2b00      	cmp	r3, #0
 800da38:	bf14      	ite	ne
 800da3a:	2301      	movne	r3, #1
 800da3c:	2300      	moveq	r3, #0
 800da3e:	b2db      	uxtb	r3, r3
 800da40:	2b00      	cmp	r3, #0
 800da42:	d000      	beq.n	800da46 <_ZN5DHT118ReadDataEv+0xb8>
 800da44:	e7ed      	b.n	800da22 <_ZN5DHT118ReadDataEv+0x94>
	for (j = 0; j < 8; j++)
 800da46:	7bbb      	ldrb	r3, [r7, #14]
 800da48:	3301      	adds	r3, #1
 800da4a:	73bb      	strb	r3, [r7, #14]
 800da4c:	e7a5      	b.n	800d99a <_ZN5DHT118ReadDataEv+0xc>
	}
	return i;
 800da4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800da50:	4618      	mov	r0, r3
 800da52:	3710      	adds	r7, #16
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}

0800da58 <_ZN5DHT1110ReadSensorEv>:

bool DHT11::ReadSensor(void)
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b084      	sub	sp, #16
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
	int sum;
	Start();
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	f7ff ff34 	bl	800d8ce <_ZN5DHT115StartEv>
	CheckResponse();
 800da66:	6878      	ldr	r0, [r7, #4]
 800da68:	f7ff ff4b 	bl	800d902 <_ZN5DHT1113CheckResponseEv>

	m_Rh[0] = ReadData();
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	f7ff ff8e 	bl	800d98e <_ZN5DHT118ReadDataEv>
 800da72:	4603      	mov	r3, r0
 800da74:	461a      	mov	r2, r3
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	721a      	strb	r2, [r3, #8]
	m_Rh[1] = ReadData();
 800da7a:	6878      	ldr	r0, [r7, #4]
 800da7c:	f7ff ff87 	bl	800d98e <_ZN5DHT118ReadDataEv>
 800da80:	4603      	mov	r3, r0
 800da82:	461a      	mov	r2, r3
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	725a      	strb	r2, [r3, #9]
	m_Temp[0] = ReadData();
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	f7ff ff80 	bl	800d98e <_ZN5DHT118ReadDataEv>
 800da8e:	4603      	mov	r3, r0
 800da90:	461a      	mov	r2, r3
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	729a      	strb	r2, [r3, #10]
	m_Temp[1] = ReadData();
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	f7ff ff79 	bl	800d98e <_ZN5DHT118ReadDataEv>
 800da9c:	4603      	mov	r3, r0
 800da9e:	461a      	mov	r2, r3
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	72da      	strb	r2, [r3, #11]
	sum = ReadData();
 800daa4:	6878      	ldr	r0, [r7, #4]
 800daa6:	f7ff ff72 	bl	800d98e <_ZN5DHT118ReadDataEv>
 800daaa:	4603      	mov	r3, r0
 800daac:	60fb      	str	r3, [r7, #12]

	if (sum != (m_Rh[0] + m_Rh[1] + m_Temp[0] + m_Temp[1])) 	// if the data is correct
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	7a1b      	ldrb	r3, [r3, #8]
 800dab2:	461a      	mov	r2, r3
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	7a5b      	ldrb	r3, [r3, #9]
 800dab8:	4413      	add	r3, r2
 800daba:	687a      	ldr	r2, [r7, #4]
 800dabc:	7a92      	ldrb	r2, [r2, #10]
 800dabe:	4413      	add	r3, r2
 800dac0:	687a      	ldr	r2, [r7, #4]
 800dac2:	7ad2      	ldrb	r2, [r2, #11]
 800dac4:	441a      	add	r2, r3
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	429a      	cmp	r2, r3
 800daca:	d001      	beq.n	800dad0 <_ZN5DHT1110ReadSensorEv+0x78>
		return false;
 800dacc:	2300      	movs	r3, #0
 800dace:	e000      	b.n	800dad2 <_ZN5DHT1110ReadSensorEv+0x7a>

	return true;
 800dad0:	2301      	movs	r3, #1
}
 800dad2:	4618      	mov	r0, r3
 800dad4:	3710      	adds	r7, #16
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}
 800dada:	0000      	movs	r0, r0
 800dadc:	0000      	movs	r0, r0
	...

0800dae0 <_ZN5DHT1114GetTemperatureEv>:

float DHT11::GetTemperature(void)
{
 800dae0:	b5b0      	push	{r4, r5, r7, lr}
 800dae2:	b082      	sub	sp, #8
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
	return (float)m_Temp[0] + m_Temp[1]/255.0;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	7a9b      	ldrb	r3, [r3, #10]
 800daec:	ee07 3a90 	vmov	s15, r3
 800daf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800daf4:	ee17 0a90 	vmov	r0, s15
 800daf8:	f7f9 f888 	bl	8006c0c <__aeabi_f2d>
 800dafc:	4604      	mov	r4, r0
 800dafe:	460d      	mov	r5, r1
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	7adb      	ldrb	r3, [r3, #11]
 800db04:	4618      	mov	r0, r3
 800db06:	f7f9 f86f 	bl	8006be8 <__aeabi_i2d>
 800db0a:	a30d      	add	r3, pc, #52	; (adr r3, 800db40 <_ZN5DHT1114GetTemperatureEv+0x60>)
 800db0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db10:	f7f9 f9fa 	bl	8006f08 <__aeabi_ddiv>
 800db14:	4602      	mov	r2, r0
 800db16:	460b      	mov	r3, r1
 800db18:	4620      	mov	r0, r4
 800db1a:	4629      	mov	r1, r5
 800db1c:	f7f8 ff18 	bl	8006950 <__adddf3>
 800db20:	4603      	mov	r3, r0
 800db22:	460c      	mov	r4, r1
 800db24:	4618      	mov	r0, r3
 800db26:	4621      	mov	r1, r4
 800db28:	f7f9 fb9c 	bl	8007264 <__aeabi_d2f>
 800db2c:	4603      	mov	r3, r0
 800db2e:	ee07 3a90 	vmov	s15, r3
}
 800db32:	eeb0 0a67 	vmov.f32	s0, s15
 800db36:	3708      	adds	r7, #8
 800db38:	46bd      	mov	sp, r7
 800db3a:	bdb0      	pop	{r4, r5, r7, pc}
 800db3c:	f3af 8000 	nop.w
 800db40:	00000000 	.word	0x00000000
 800db44:	406fe000 	.word	0x406fe000

0800db48 <_ZN5DHT1111GetHumidityEv>:

float DHT11::GetHumidity(void)
{
 800db48:	b5b0      	push	{r4, r5, r7, lr}
 800db4a:	b082      	sub	sp, #8
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
	return (float)m_Rh[0] + m_Rh[1]/255.0;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	7a1b      	ldrb	r3, [r3, #8]
 800db54:	ee07 3a90 	vmov	s15, r3
 800db58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db5c:	ee17 0a90 	vmov	r0, s15
 800db60:	f7f9 f854 	bl	8006c0c <__aeabi_f2d>
 800db64:	4604      	mov	r4, r0
 800db66:	460d      	mov	r5, r1
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	7a5b      	ldrb	r3, [r3, #9]
 800db6c:	4618      	mov	r0, r3
 800db6e:	f7f9 f83b 	bl	8006be8 <__aeabi_i2d>
 800db72:	a30d      	add	r3, pc, #52	; (adr r3, 800dba8 <_ZN5DHT1111GetHumidityEv+0x60>)
 800db74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db78:	f7f9 f9c6 	bl	8006f08 <__aeabi_ddiv>
 800db7c:	4602      	mov	r2, r0
 800db7e:	460b      	mov	r3, r1
 800db80:	4620      	mov	r0, r4
 800db82:	4629      	mov	r1, r5
 800db84:	f7f8 fee4 	bl	8006950 <__adddf3>
 800db88:	4603      	mov	r3, r0
 800db8a:	460c      	mov	r4, r1
 800db8c:	4618      	mov	r0, r3
 800db8e:	4621      	mov	r1, r4
 800db90:	f7f9 fb68 	bl	8007264 <__aeabi_d2f>
 800db94:	4603      	mov	r3, r0
 800db96:	ee07 3a90 	vmov	s15, r3
}
 800db9a:	eeb0 0a67 	vmov.f32	s0, s15
 800db9e:	3708      	adds	r7, #8
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bdb0      	pop	{r4, r5, r7, pc}
 800dba4:	f3af 8000 	nop.w
 800dba8:	00000000 	.word	0x00000000
 800dbac:	406fe000 	.word	0x406fe000

0800dbb0 <DWT_Delay_Init>:
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void)
{
	/* Disable TRC */
	CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800dbb0:	4b0d      	ldr	r3, [pc, #52]	; (800dbe8 <DWT_Delay_Init+0x38>)
 800dbb2:	68da      	ldr	r2, [r3, #12]
 800dbb4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800dbb8:	60da      	str	r2, [r3, #12]
	/* Enable TRC */
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800dbba:	68da      	ldr	r2, [r3, #12]
 800dbbc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800dbc0:	60da      	str	r2, [r3, #12]

	/* Disable clock cycle counter */
	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800dbc2:	4b0a      	ldr	r3, [pc, #40]	; (800dbec <DWT_Delay_Init+0x3c>)
 800dbc4:	681a      	ldr	r2, [r3, #0]
 800dbc6:	f022 0201 	bic.w	r2, r2, #1
 800dbca:	601a      	str	r2, [r3, #0]
	/* Enable  clock cycle counter */
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800dbcc:	681a      	ldr	r2, [r3, #0]
 800dbce:	f042 0201 	orr.w	r2, r2, #1
 800dbd2:	601a      	str	r2, [r3, #0]

	/* Reset the clock cycle counter value */
	DWT->CYCCNT = 0;
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	605a      	str	r2, [r3, #4]

	/* 3 NO OPERATION instructions */
	__ASM
 800dbd8:	bf00      	nop
	volatile ("NOP");
	__ASM
 800dbda:	bf00      	nop
	volatile ("NOP");
	__ASM
 800dbdc:	bf00      	nop
	volatile ("NOP");

	/* Check if clock cycle counter has started */
	if (DWT->CYCCNT)
 800dbde:	6858      	ldr	r0, [r3, #4]
	}
	else
	{
		return 1; /*clock cycle counter not started*/
	}
}
 800dbe0:	fab0 f080 	clz	r0, r0
 800dbe4:	0940      	lsrs	r0, r0, #5
 800dbe6:	4770      	bx	lr
 800dbe8:	e000edf0 	.word	0xe000edf0
 800dbec:	e0001000 	.word	0xe0001000

0800dbf0 <_ZN16NS_energyShield29writeByteEhhh>:
#define DELAY 100
#define ES2_DELAY 1

// Write one byte via TWI
void NS_energyShield2::writeByte(uint8_t slaveAddress, uint8_t registerAddress, uint8_t data)
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b086      	sub	sp, #24
 800dbf4:	af04      	add	r7, sp, #16
 800dbf6:	6078      	str	r0, [r7, #4]
 800dbf8:	4608      	mov	r0, r1
 800dbfa:	4611      	mov	r1, r2
 800dbfc:	461a      	mov	r2, r3
 800dbfe:	4603      	mov	r3, r0
 800dc00:	70fb      	strb	r3, [r7, #3]
 800dc02:	460b      	mov	r3, r1
 800dc04:	70bb      	strb	r3, [r7, #2]
 800dc06:	4613      	mov	r3, r2
 800dc08:	707b      	strb	r3, [r7, #1]
	HAL_I2C_Mem_Write(_pI2C, slaveAddress << 1, registerAddress, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	68d8      	ldr	r0, [r3, #12]
 800dc0e:	78fb      	ldrb	r3, [r7, #3]
 800dc10:	b29b      	uxth	r3, r3
 800dc12:	005b      	lsls	r3, r3, #1
 800dc14:	b299      	uxth	r1, r3
 800dc16:	78bb      	ldrb	r3, [r7, #2]
 800dc18:	b29a      	uxth	r2, r3
 800dc1a:	2364      	movs	r3, #100	; 0x64
 800dc1c:	9302      	str	r3, [sp, #8]
 800dc1e:	2301      	movs	r3, #1
 800dc20:	9301      	str	r3, [sp, #4]
 800dc22:	1c7b      	adds	r3, r7, #1
 800dc24:	9300      	str	r3, [sp, #0]
 800dc26:	2301      	movs	r3, #1
 800dc28:	f7fc fa6c 	bl	800a104 <HAL_I2C_Mem_Write>

	HAL_Delay(ES2_DELAY);
 800dc2c:	2001      	movs	r0, #1
 800dc2e:	f7fa fca9 	bl	8008584 <HAL_Delay>

	return;	
 800dc32:	bf00      	nop
}
 800dc34:	3708      	adds	r7, #8
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}

0800dc3a <_ZN16NS_energyShield28readByteEhh>:

// Read one byte via TWI
uint8_t NS_energyShield2::readByte(uint8_t slaveAddress, uint8_t registerAddress)
{
 800dc3a:	b580      	push	{r7, lr}
 800dc3c:	b088      	sub	sp, #32
 800dc3e:	af04      	add	r7, sp, #16
 800dc40:	6078      	str	r0, [r7, #4]
 800dc42:	460b      	mov	r3, r1
 800dc44:	70fb      	strb	r3, [r7, #3]
 800dc46:	4613      	mov	r3, r2
 800dc48:	70bb      	strb	r3, [r7, #2]
	uint8_t data;

	HAL_I2C_Mem_Read(_pI2C, slaveAddress << 1, registerAddress, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	68d8      	ldr	r0, [r3, #12]
 800dc4e:	78fb      	ldrb	r3, [r7, #3]
 800dc50:	b29b      	uxth	r3, r3
 800dc52:	005b      	lsls	r3, r3, #1
 800dc54:	b299      	uxth	r1, r3
 800dc56:	78bb      	ldrb	r3, [r7, #2]
 800dc58:	b29a      	uxth	r2, r3
 800dc5a:	2364      	movs	r3, #100	; 0x64
 800dc5c:	9302      	str	r3, [sp, #8]
 800dc5e:	2301      	movs	r3, #1
 800dc60:	9301      	str	r3, [sp, #4]
 800dc62:	f107 030f 	add.w	r3, r7, #15
 800dc66:	9300      	str	r3, [sp, #0]
 800dc68:	2301      	movs	r3, #1
 800dc6a:	f7fc fb0d 	bl	800a288 <HAL_I2C_Mem_Read>
	HAL_Delay(ES2_DELAY);
 800dc6e:	2001      	movs	r0, #1
 800dc70:	f7fa fc88 	bl	8008584 <HAL_Delay>

	return data;
 800dc74:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc76:	4618      	mov	r0, r3
 800dc78:	3710      	adds	r7, #16
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bd80      	pop	{r7, pc}

0800dc7e <_ZN16NS_energyShield212writeCommandEhht>:

// Write standard command to BQ fuel gauge (TI)
void NS_energyShield2::writeCommand(uint8_t slaveAddress, uint8_t registerAddress, uint16_t dataWord)
{
 800dc7e:	b580      	push	{r7, lr}
 800dc80:	b088      	sub	sp, #32
 800dc82:	af04      	add	r7, sp, #16
 800dc84:	6078      	str	r0, [r7, #4]
 800dc86:	4608      	mov	r0, r1
 800dc88:	4611      	mov	r1, r2
 800dc8a:	461a      	mov	r2, r3
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	70fb      	strb	r3, [r7, #3]
 800dc90:	460b      	mov	r3, r1
 800dc92:	70bb      	strb	r3, [r7, #2]
 800dc94:	4613      	mov	r3, r2
 800dc96:	803b      	strh	r3, [r7, #0]
	uint8_t buf[2];

	buf[0] = dataWord & 0xFF;
 800dc98:	883b      	ldrh	r3, [r7, #0]
 800dc9a:	b2db      	uxtb	r3, r3
 800dc9c:	733b      	strb	r3, [r7, #12]
	buf[1] = dataWord >> 8;
 800dc9e:	883b      	ldrh	r3, [r7, #0]
 800dca0:	121b      	asrs	r3, r3, #8
 800dca2:	b2db      	uxtb	r3, r3
 800dca4:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Mem_Write(_pI2C, slaveAddress << 1, registerAddress, I2C_MEMADD_SIZE_8BIT, buf, 2, 100);
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	68d8      	ldr	r0, [r3, #12]
 800dcaa:	78fb      	ldrb	r3, [r7, #3]
 800dcac:	b29b      	uxth	r3, r3
 800dcae:	005b      	lsls	r3, r3, #1
 800dcb0:	b299      	uxth	r1, r3
 800dcb2:	78bb      	ldrb	r3, [r7, #2]
 800dcb4:	b29a      	uxth	r2, r3
 800dcb6:	2364      	movs	r3, #100	; 0x64
 800dcb8:	9302      	str	r3, [sp, #8]
 800dcba:	2302      	movs	r3, #2
 800dcbc:	9301      	str	r3, [sp, #4]
 800dcbe:	f107 030c 	add.w	r3, r7, #12
 800dcc2:	9300      	str	r3, [sp, #0]
 800dcc4:	2301      	movs	r3, #1
 800dcc6:	f7fc fa1d 	bl	800a104 <HAL_I2C_Mem_Write>

	HAL_Delay(ES2_DELAY);
 800dcca:	2001      	movs	r0, #1
 800dccc:	f7fa fc5a 	bl	8008584 <HAL_Delay>

  return;
 800dcd0:	bf00      	nop
}
 800dcd2:	3710      	adds	r7, #16
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bd80      	pop	{r7, pc}

0800dcd8 <_ZN16NS_energyShield211readCommandEhh>:

// Read standard command to BQ fuel gauge (TI)
uint16_t NS_energyShield2::readCommand(uint8_t slaveAddress, uint8_t registerAddress)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b088      	sub	sp, #32
 800dcdc:	af04      	add	r7, sp, #16
 800dcde:	6078      	str	r0, [r7, #4]
 800dce0:	460b      	mov	r3, r1
 800dce2:	70fb      	strb	r3, [r7, #3]
 800dce4:	4613      	mov	r3, r2
 800dce6:	70bb      	strb	r3, [r7, #2]
	uint16_t dataWord;
	uint8_t buf[2];

	HAL_I2C_Mem_Read(_pI2C, slaveAddress << 1, registerAddress, I2C_MEMADD_SIZE_8BIT, buf, 2, 100);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	68d8      	ldr	r0, [r3, #12]
 800dcec:	78fb      	ldrb	r3, [r7, #3]
 800dcee:	b29b      	uxth	r3, r3
 800dcf0:	005b      	lsls	r3, r3, #1
 800dcf2:	b299      	uxth	r1, r3
 800dcf4:	78bb      	ldrb	r3, [r7, #2]
 800dcf6:	b29a      	uxth	r2, r3
 800dcf8:	2364      	movs	r3, #100	; 0x64
 800dcfa:	9302      	str	r3, [sp, #8]
 800dcfc:	2302      	movs	r3, #2
 800dcfe:	9301      	str	r3, [sp, #4]
 800dd00:	f107 030c 	add.w	r3, r7, #12
 800dd04:	9300      	str	r3, [sp, #0]
 800dd06:	2301      	movs	r3, #1
 800dd08:	f7fc fabe 	bl	800a288 <HAL_I2C_Mem_Read>

	HAL_Delay(ES2_DELAY);
 800dd0c:	2001      	movs	r0, #1
 800dd0e:	f7fa fc39 	bl	8008584 <HAL_Delay>

	dataWord = buf[0];
 800dd12:	7b3b      	ldrb	r3, [r7, #12]
 800dd14:	81fb      	strh	r3, [r7, #14]
	dataWord |= buf[1] << 8;
 800dd16:	7b7b      	ldrb	r3, [r7, #13]
 800dd18:	021b      	lsls	r3, r3, #8
 800dd1a:	b21a      	sxth	r2, r3
 800dd1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dd20:	4313      	orrs	r3, r2
 800dd22:	b21b      	sxth	r3, r3
 800dd24:	81fb      	strh	r3, [r7, #14]

	return dataWord;
 800dd26:	89fb      	ldrh	r3, [r7, #14]
} 
 800dd28:	4618      	mov	r0, r3
 800dd2a:	3710      	adds	r7, #16
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bd80      	pop	{r7, pc}

0800dd30 <_ZN16NS_energyShield214readSubCommandEht>:

// Read Control() subcommand to BQ fuel gauge (TI)
uint16_t NS_energyShield2::readSubCommand(uint8_t slaveAddress, uint16_t controlData)
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b086      	sub	sp, #24
 800dd34:	af02      	add	r7, sp, #8
 800dd36:	6078      	str	r0, [r7, #4]
 800dd38:	460b      	mov	r3, r1
 800dd3a:	70fb      	strb	r3, [r7, #3]
 800dd3c:	4613      	mov	r3, r2
 800dd3e:	803b      	strh	r3, [r7, #0]
	uint16_t dataWord;
	uint8_t buf[3];

	buf[0] = 0;
 800dd40:	2300      	movs	r3, #0
 800dd42:	723b      	strb	r3, [r7, #8]
	buf[1] = controlData & 0xFF;
 800dd44:	883b      	ldrh	r3, [r7, #0]
 800dd46:	b2db      	uxtb	r3, r3
 800dd48:	727b      	strb	r3, [r7, #9]
	buf[2] = controlData >> 8;
 800dd4a:	883b      	ldrh	r3, [r7, #0]
 800dd4c:	121b      	asrs	r3, r3, #8
 800dd4e:	b2db      	uxtb	r3, r3
 800dd50:	72bb      	strb	r3, [r7, #10]

	HAL_I2C_Master_Transmit(_pI2C, slaveAddress << 1, buf, 3, 100);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	68d8      	ldr	r0, [r3, #12]
 800dd56:	78fb      	ldrb	r3, [r7, #3]
 800dd58:	b29b      	uxth	r3, r3
 800dd5a:	005b      	lsls	r3, r3, #1
 800dd5c:	b299      	uxth	r1, r3
 800dd5e:	f107 0208 	add.w	r2, r7, #8
 800dd62:	2364      	movs	r3, #100	; 0x64
 800dd64:	9300      	str	r3, [sp, #0]
 800dd66:	2303      	movs	r3, #3
 800dd68:	f7fc f8a2 	bl	8009eb0 <HAL_I2C_Master_Transmit>

	dataWord = readCommand(slaveAddress, 0x00);
 800dd6c:	78fb      	ldrb	r3, [r7, #3]
 800dd6e:	2200      	movs	r2, #0
 800dd70:	4619      	mov	r1, r3
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	f7ff ffb0 	bl	800dcd8 <_ZN16NS_energyShield211readCommandEhh>
 800dd78:	4603      	mov	r3, r0
 800dd7a:	81fb      	strh	r3, [r7, #14]

	HAL_Delay(ES2_DELAY);
 800dd7c:	2001      	movs	r0, #1
 800dd7e:	f7fa fc01 	bl	8008584 <HAL_Delay>

	return dataWord;
 800dd82:	89fb      	ldrh	r3, [r7, #14]
} 
 800dd84:	4618      	mov	r0, r3
 800dd86:	3710      	adds	r7, #16
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	bd80      	pop	{r7, pc}

0800dd8c <_ZN16NS_energyShield213checkIfSealedEh>:

// Check if fuel gauge is in "Sealed" state
bool NS_energyShield2::checkIfSealed(uint8_t slaveAddress)
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b084      	sub	sp, #16
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
 800dd94:	460b      	mov	r3, r1
 800dd96:	70fb      	strb	r3, [r7, #3]
  uint16_t flags;

  flags = readSubCommand(slaveAddress, 0x0000);
 800dd98:	78fb      	ldrb	r3, [r7, #3]
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	4619      	mov	r1, r3
 800dd9e:	6878      	ldr	r0, [r7, #4]
 800dda0:	f7ff ffc6 	bl	800dd30 <_ZN16NS_energyShield214readSubCommandEht>
 800dda4:	4603      	mov	r3, r0
 800dda6:	81fb      	strh	r3, [r7, #14]
  
  return ((flags & 0x2000) != 0);
 800dda8:	89fb      	ldrh	r3, [r7, #14]
 800ddaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	bf14      	ite	ne
 800ddb2:	2301      	movne	r3, #1
 800ddb4:	2300      	moveq	r3, #0
 800ddb6:	b2db      	uxtb	r3, r3
}
 800ddb8:	4618      	mov	r0, r3
 800ddba:	3710      	adds	r7, #16
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	bd80      	pop	{r7, pc}

0800ddc0 <_ZN16NS_energyShield214setupFuelGaugeEhttth>:

int NS_energyShield2::setupFuelGauge(uint8_t slaveAddress, uint16_t newDesignCapacity_mAh, uint16_t newTerminationVoltage_mV, uint16_t chargeTerminationCurrent_mA, uint8_t alarmSOC)
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b08c      	sub	sp, #48	; 0x30
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	60f8      	str	r0, [r7, #12]
 800ddc8:	4608      	mov	r0, r1
 800ddca:	4611      	mov	r1, r2
 800ddcc:	461a      	mov	r2, r3
 800ddce:	4603      	mov	r3, r0
 800ddd0:	72fb      	strb	r3, [r7, #11]
 800ddd2:	460b      	mov	r3, r1
 800ddd4:	813b      	strh	r3, [r7, #8]
 800ddd6:	4613      	mov	r3, r2
 800ddd8:	80fb      	strh	r3, [r7, #6]
	uint16_t oldOpConfig;
	uint16_t newOpConfig;
	uint16_t oldSOC1Set;
	uint16_t oldSOC1Clear;
		
	newDesignEnergy = (uint16_t) (((int)newDesignCapacity_mAh*37)/10);
 800ddda:	893a      	ldrh	r2, [r7, #8]
 800dddc:	4613      	mov	r3, r2
 800ddde:	00db      	lsls	r3, r3, #3
 800dde0:	4413      	add	r3, r2
 800dde2:	009b      	lsls	r3, r3, #2
 800dde4:	4413      	add	r3, r2
 800dde6:	4ab9      	ldr	r2, [pc, #740]	; (800e0cc <_ZN16NS_energyShield214setupFuelGaugeEhttth+0x30c>)
 800dde8:	fb82 1203 	smull	r1, r2, r2, r3
 800ddec:	1092      	asrs	r2, r2, #2
 800ddee:	17db      	asrs	r3, r3, #31
 800ddf0:	1ad3      	subs	r3, r2, r3
 800ddf2:	85bb      	strh	r3, [r7, #44]	; 0x2c
	newTerminationRate = (uint16_t) (newDesignCapacity_mAh*10)/chargeTerminationCurrent_mA;
 800ddf4:	893b      	ldrh	r3, [r7, #8]
 800ddf6:	461a      	mov	r2, r3
 800ddf8:	0092      	lsls	r2, r2, #2
 800ddfa:	4413      	add	r3, r2
 800ddfc:	005b      	lsls	r3, r3, #1
 800ddfe:	b29a      	uxth	r2, r3
 800de00:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800de02:	fbb2 f3f3 	udiv	r3, r2, r3
 800de06:	857b      	strh	r3, [r7, #42]	; 0x2a
	
	i=0;
 800de08:	2300      	movs	r3, #0
 800de0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	do
	{
		++i;
 800de0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800de12:	3301      	adds	r3, #1
 800de14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (i > 100)
 800de18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800de1c:	2b64      	cmp	r3, #100	; 0x64
 800de1e:	dd01      	ble.n	800de24 <_ZN16NS_energyShield214setupFuelGaugeEhttth+0x64>
			return 1; // Failed
 800de20:	2301      	movs	r3, #1
 800de22:	e291      	b.n	800e348 <_ZN16NS_energyShield214setupFuelGaugeEhttth+0x588>
		// Un-seal
		writeCommand(slaveAddress, 0x00, 0x8000);
 800de24:	7af9      	ldrb	r1, [r7, #11]
 800de26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800de2a:	2200      	movs	r2, #0
 800de2c:	68f8      	ldr	r0, [r7, #12]
 800de2e:	f7ff ff26 	bl	800dc7e <_ZN16NS_energyShield212writeCommandEhht>
		writeCommand(slaveAddress, 0x00, 0x8000);
 800de32:	7af9      	ldrb	r1, [r7, #11]
 800de34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800de38:	2200      	movs	r2, #0
 800de3a:	68f8      	ldr	r0, [r7, #12]
 800de3c:	f7ff ff1f 	bl	800dc7e <_ZN16NS_energyShield212writeCommandEhht>
		HAL_Delay(10);
 800de40:	200a      	movs	r0, #10
 800de42:	f7fa fb9f 	bl	8008584 <HAL_Delay>
	do
 800de46:	7afb      	ldrb	r3, [r7, #11]
 800de48:	4619      	mov	r1, r3
 800de4a:	68f8      	ldr	r0, [r7, #12]
 800de4c:	f7ff ff9e 	bl	800dd8c <_ZN16NS_energyShield213checkIfSealedEh>
 800de50:	4603      	mov	r3, r0
 800de52:	2b00      	cmp	r3, #0
 800de54:	d000      	beq.n	800de58 <_ZN16NS_energyShield214setupFuelGaugeEhttth+0x98>
 800de56:	e7da      	b.n	800de0e <_ZN16NS_energyShield214setupFuelGaugeEhttth+0x4e>
	} while (checkIfSealed(slaveAddress));
	
	//Change to CONFIG UPDATE mode
	writeCommand(slaveAddress, 0x00, 0x0013);
 800de58:	7af9      	ldrb	r1, [r7, #11]
 800de5a:	2313      	movs	r3, #19
 800de5c:	2200      	movs	r2, #0
 800de5e:	68f8      	ldr	r0, [r7, #12]
 800de60:	f7ff ff0d 	bl	800dc7e <_ZN16NS_energyShield212writeCommandEhht>
	do
	{
		flags = readCommand(slaveAddress, 0x06);
 800de64:	7afb      	ldrb	r3, [r7, #11]
 800de66:	2206      	movs	r2, #6
 800de68:	4619      	mov	r1, r3
 800de6a:	68f8      	ldr	r0, [r7, #12]
 800de6c:	f7ff ff34 	bl	800dcd8 <_ZN16NS_energyShield211readCommandEhh>
 800de70:	4603      	mov	r3, r0
 800de72:	853b      	strh	r3, [r7, #40]	; 0x28
	} while (!(flags & 0x0010));
 800de74:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800de76:	f003 0310 	and.w	r3, r3, #16
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d100      	bne.n	800de80 <_ZN16NS_energyShield214setupFuelGaugeEhttth+0xc0>
	do
 800de7e:	e7f1      	b.n	800de64 <_ZN16NS_energyShield214setupFuelGaugeEhttth+0xa4>
	
	// Setup Block RAM update
	writeByte(slaveAddress, 0x61, 0x00);
 800de80:	7af9      	ldrb	r1, [r7, #11]
 800de82:	2300      	movs	r3, #0
 800de84:	2261      	movs	r2, #97	; 0x61
 800de86:	68f8      	ldr	r0, [r7, #12]
 800de88:	f7ff feb2 	bl	800dbf0 <_ZN16NS_energyShield29writeByteEhhh>
	writeByte(slaveAddress, 0x3E, 0x52);
 800de8c:	7af9      	ldrb	r1, [r7, #11]
 800de8e:	2352      	movs	r3, #82	; 0x52
 800de90:	223e      	movs	r2, #62	; 0x3e
 800de92:	68f8      	ldr	r0, [r7, #12]
 800de94:	f7ff feac 	bl	800dbf0 <_ZN16NS_energyShield29writeByteEhhh>
	writeByte(slaveAddress,0x3F, 0x00);
 800de98:	7af9      	ldrb	r1, [r7, #11]
 800de9a:	2300      	movs	r3, #0
 800de9c:	223f      	movs	r2, #63	; 0x3f
 800de9e:	68f8      	ldr	r0, [r7, #12]
 800dea0:	f7ff fea6 	bl	800dbf0 <_ZN16NS_energyShield29writeByteEhhh>
		
	oldCheckSum = readByte(slaveAddress, 0x60);
 800dea4:	7afb      	ldrb	r3, [r7, #11]
 800dea6:	2260      	movs	r2, #96	; 0x60
 800dea8:	4619      	mov	r1, r3
 800deaa:	68f8      	ldr	r0, [r7, #12]
 800deac:	f7ff fec5 	bl	800dc3a <_ZN16NS_energyShield28readByteEhh>
 800deb0:	4603      	mov	r3, r0
 800deb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	
	i = 0;
 800deb6:	2300      	movs	r3, #0
 800deb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	do {		
		++i;
 800debc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dec0:	3301      	adds	r3, #1
 800dec2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (i > 100)
 800dec6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800deca:	2b64      	cmp	r3, #100	; 0x64
 800decc:	dd01      	ble.n	800ded2 <_ZN16NS_energyShield214setupFuelGaugeEhttth+0x112>
			return 2; // Failed
 800dece:	2302      	movs	r3, #2
 800ded0:	e23a      	b.n	800e348 <_ZN16NS_energyShield214setupFuelGaugeEhttth+0x588>
		
		// Compute new checksum
		tempCheckSum = 0xFF - oldCheckSum;
 800ded2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ded6:	43db      	mvns	r3, r3
 800ded8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		
		oldDesignCapacity = readCommand(slaveAddress,0x4A);
 800dedc:	7afb      	ldrb	r3, [r7, #11]
 800dede:	224a      	movs	r2, #74	; 0x4a
 800dee0:	4619      	mov	r1, r3
 800dee2:	68f8      	ldr	r0, [r7, #12]
 800dee4:	f7ff fef8 	bl	800dcd8 <_ZN16NS_energyShield211readCommandEhh>
 800dee8:	4603      	mov	r3, r0
 800deea:	84bb      	strh	r3, [r7, #36]	; 0x24
		oldDesignEnergy = readCommand(slaveAddress, 0x4C);
 800deec:	7afb      	ldrb	r3, [r7, #11]
 800deee:	224c      	movs	r2, #76	; 0x4c
 800def0:	4619      	mov	r1, r3
 800def2:	68f8      	ldr	r0, [r7, #12]
 800def4:	f7ff fef0 	bl	800dcd8 <_ZN16NS_energyShield211readCommandEhh>
 800def8:	4603      	mov	r3, r0
 800defa:	847b      	strh	r3, [r7, #34]	; 0x22
		oldTerminationVoltage = readCommand(slaveAddress,0x50);
 800defc:	7afb      	ldrb	r3, [r7, #11]
 800defe:	2250      	movs	r2, #80	; 0x50
 800df00:	4619      	mov	r1, r3
 800df02:	68f8      	ldr	r0, [r7, #12]
 800df04:	f7ff fee8 	bl	800dcd8 <_ZN16NS_energyShield211readCommandEhh>
 800df08:	4603      	mov	r3, r0
 800df0a:	843b      	strh	r3, [r7, #32]
		oldTaperRate = readCommand(slaveAddress, 0x5B);
 800df0c:	7afb      	ldrb	r3, [r7, #11]
 800df0e:	225b      	movs	r2, #91	; 0x5b
 800df10:	4619      	mov	r1, r3
 800df12:	68f8      	ldr	r0, [r7, #12]
 800df14:	f7ff fee0 	bl	800dcd8 <_ZN16NS_energyShield211readCommandEhh>
 800df18:	4603      	mov	r3, r0
 800df1a:	83fb      	strh	r3, [r7, #30]
		
		tempCheckSum -= oldDesignCapacity >> 8;
 800df1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df1e:	121b      	asrs	r3, r3, #8
 800df20:	b2db      	uxtb	r3, r3
 800df22:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800df26:	1ad3      	subs	r3, r2, r3
 800df28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		tempCheckSum -= oldDesignCapacity & 0xFF;
 800df2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df2e:	b2db      	uxtb	r3, r3
 800df30:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800df34:	1ad3      	subs	r3, r2, r3
 800df36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		
		tempCheckSum -= oldDesignEnergy >> 8;
 800df3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800df3c:	121b      	asrs	r3, r3, #8
 800df3e:	b2db      	uxtb	r3, r3
 800df40:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800df44:	1ad3      	subs	r3, r2, r3
 800df46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		tempCheckSum -= oldDesignEnergy & 0xFF;
 800df4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800df4c:	b2db      	uxtb	r3, r3
 800df4e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800df52:	1ad3      	subs	r3, r2, r3
 800df54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		
		tempCheckSum -= oldTerminationVoltage >> 8;
 800df58:	8c3b      	ldrh	r3, [r7, #32]
 800df5a:	121b      	asrs	r3, r3, #8
 800df5c:	b2db      	uxtb	r3, r3
 800df5e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800df62:	1ad3      	subs	r3, r2, r3
 800df64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		tempCheckSum -= oldTerminationVoltage & 0xFF;
 800df68:	8c3b      	ldrh	r3, [r7, #32]
 800df6a:	b2db      	uxtb	r3, r3
 800df6c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800df70:	1ad3      	subs	r3, r2, r3
 800df72:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		
		tempCheckSum -= oldTaperRate >> 8;
 800df76:	8bfb      	ldrh	r3, [r7, #30]
 800df78:	121b      	asrs	r3, r3, #8
 800df7a:	b2db      	uxtb	r3, r3
 800df7c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800df80:	1ad3      	subs	r3, r2, r3
 800df82:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		tempCheckSum -= oldTaperRate & 0xFF;
 800df86:	8bfb      	ldrh	r3, [r7, #30]
 800df88:	b2db      	uxtb	r3, r3
 800df8a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800df8e:	1ad3      	subs	r3, r2, r3
 800df90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		
		writeByte(slaveAddress, 0x4A, newDesignCapacity_mAh >> 8);
 800df94:	893b      	ldrh	r3, [r7, #8]
 800df96:	121b      	asrs	r3, r3, #8
 800df98:	b2db      	uxtb	r3, r3
 800df9a:	7af9      	ldrb	r1, [r7, #11]
 800df9c:	224a      	movs	r2, #74	; 0x4a
 800df9e:	68f8      	ldr	r0, [r7, #12]
 800dfa0:	f7ff fe26 	bl	800dbf0 <_ZN16NS_energyShield29writeByteEhhh>
		writeByte(slaveAddress, 0x4B, newDesignCapacity_mAh & 0xFF);
 800dfa4:	893b      	ldrh	r3, [r7, #8]
 800dfa6:	b2db      	uxtb	r3, r3
 800dfa8:	7af9      	ldrb	r1, [r7, #11]
 800dfaa:	224b      	movs	r2, #75	; 0x4b
 800dfac:	68f8      	ldr	r0, [r7, #12]
 800dfae:	f7ff fe1f 	bl	800dbf0 <_ZN16NS_energyShield29writeByteEhhh>
		
		writeByte(slaveAddress, 0x4C, newDesignEnergy >> 8);
 800dfb2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dfb4:	121b      	asrs	r3, r3, #8
 800dfb6:	b2db      	uxtb	r3, r3
 800dfb8:	7af9      	ldrb	r1, [r7, #11]
 800dfba:	224c      	movs	r2, #76	; 0x4c
 800dfbc:	68f8      	ldr	r0, [r7, #12]
 800dfbe:	f7ff fe17 	bl	800dbf0 <_ZN16NS_energyShield29writeByteEhhh>
		writeByte(slaveAddress, 0x4D, newDesignEnergy & 0xFF);
 800dfc2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dfc4:	b2db      	uxtb	r3, r3
 800dfc6:	7af9      	ldrb	r1, [r7, #11]
 800dfc8:	224d      	movs	r2, #77	; 0x4d
 800dfca:	68f8      	ldr	r0, [r7, #12]
 800dfcc:	f7ff fe10 	bl	800dbf0 <_ZN16NS_energyShield29writeByteEhhh>
		
		writeByte(slaveAddress, 0x50, newTerminationVoltage_mV >> 8);
 800dfd0:	88fb      	ldrh	r3, [r7, #6]
 800dfd2:	121b      	asrs	r3, r3, #8
 800dfd4:	b2db      	uxtb	r3, r3
 800dfd6:	7af9      	ldrb	r1, [r7, #11]
 800dfd8:	2250      	movs	r2, #80	; 0x50
 800dfda:	68f8      	ldr	r0, [r7, #12]
 800dfdc:	f7ff fe08 	bl	800dbf0 <_ZN16NS_energyShield29writeByteEhhh>
		writeByte(slaveAddress, 0x51, newTerminationVoltage_mV & 0xFF);
 800dfe0:	88fb      	ldrh	r3, [r7, #6]
 800dfe2:	b2db      	uxtb	r3, r3
 800dfe4:	7af9      	ldrb	r1, [r7, #11]
 800dfe6:	2251      	movs	r2, #81	; 0x51
 800dfe8:	68f8      	ldr	r0, [r7, #12]
 800dfea:	f7ff fe01 	bl	800dbf0 <_ZN16NS_energyShield29writeByteEhhh>
		
		writeByte(slaveAddress, 0x5B, newTerminationRate >> 8);
 800dfee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800dff0:	121b      	asrs	r3, r3, #8
 800dff2:	b2db      	uxtb	r3, r3
 800dff4:	7af9      	ldrb	r1, [r7, #11]
 800dff6:	225b      	movs	r2, #91	; 0x5b
 800dff8:	68f8      	ldr	r0, [r7, #12]
 800dffa:	f7ff fdf9 	bl	800dbf0 <_ZN16NS_energyShield29writeByteEhhh>
		writeByte(slaveAddress, 0x5C, newTerminationRate & 0xFF);
 800dffe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e000:	b2db      	uxtb	r3, r3
 800e002:	7af9      	ldrb	r1, [r7, #11]
 800e004:	225c      	movs	r2, #92	; 0x5c
 800e006:	68f8      	ldr	r0, [r7, #12]
 800e008:	f7ff fdf2 	bl	800dbf0 <_ZN16NS_energyShield29writeByteEhhh>
		
		// Finish computing new checksum		
		tempCheckSum += newDesignCapacity_mAh >> 8;
 800e00c:	893b      	ldrh	r3, [r7, #8]
 800e00e:	121b      	asrs	r3, r3, #8
 800e010:	b2da      	uxtb	r2, r3
 800e012:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e016:	4413      	add	r3, r2
 800e018:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		tempCheckSum += newDesignCapacity_mAh & 0xFF;
 800e01c:	893b      	ldrh	r3, [r7, #8]
 800e01e:	b2da      	uxtb	r2, r3
 800e020:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e024:	4413      	add	r3, r2
 800e026:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		
		tempCheckSum += newDesignEnergy >> 8;
 800e02a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e02c:	121b      	asrs	r3, r3, #8
 800e02e:	b2da      	uxtb	r2, r3
 800e030:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e034:	4413      	add	r3, r2
 800e036:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		tempCheckSum += newDesignEnergy & 0xFF;
 800e03a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e03c:	b2da      	uxtb	r2, r3
 800e03e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e042:	4413      	add	r3, r2
 800e044:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		
		tempCheckSum += newTerminationVoltage_mV >> 8;
 800e048:	88fb      	ldrh	r3, [r7, #6]
 800e04a:	121b      	asrs	r3, r3, #8
 800e04c:	b2da      	uxtb	r2, r3
 800e04e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e052:	4413      	add	r3, r2
 800e054:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		tempCheckSum += newTerminationVoltage_mV & 0xFF;
 800e058:	88fb      	ldrh	r3, [r7, #6]
 800e05a:	b2da      	uxtb	r2, r3
 800e05c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e060:	4413      	add	r3, r2
 800e062:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		
		tempCheckSum += newTerminationRate >> 8;
 800e066:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e068:	121b      	asrs	r3, r3, #8
 800e06a:	b2da      	uxtb	r2, r3
 800e06c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e070:	4413      	add	r3, r2
 800e072:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		tempCheckSum += newTerminationRate & 0xFF;
 800e076:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e078:	b2da      	uxtb	r2, r3
 800e07a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e07e:	4413      	add	r3, r2
 800e080:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		
		newCheckSum = 0xFF - tempCheckSum;
 800e084:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e088:	43db      	mvns	r3, r3
 800e08a:	777b      	strb	r3, [r7, #29]
		writeByte(slaveAddress, 0x60, newCheckSum);
 800e08c:	7f7b      	ldrb	r3, [r7, #29]
 800e08e:	7af9      	ldrb	r1, [r7, #11]
 800e090:	2260      	movs	r2, #96	; 0x60
 800e092:	68f8      	ldr	r0, [r7, #12]
 800e094:	f7ff fdac 	bl	800dbf0 <_ZN16NS_energyShield29writeByteEhhh>
		
		// Verify RAM update is complete
		writeByte(slaveAddress, 0x3E, 0x52);
 800e098:	7af9      	ldrb	r1, [r7, #11]
 800e09a:	2352      	movs	r3, #82	; 0x52
 800e09c:	223e      	movs	r2, #62	; 0x3e
 800e09e:	68f8      	ldr	r0, [r7, #12]
 800e0a0:	f7ff fda6 	bl	800dbf0 <_ZN16NS_energyShield29writeByteEhhh>
		writeByte(slaveAddress, 0x3F, 0x00);
 800e0a4:	7af9      	ldrb	r1, [r7, #11]
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	223f      	movs	r2, #63	; 0x3f
 800e0aa:	68f8      	ldr	r0, [r7, #12]
 800e0ac:	f7ff fda0 	bl	800dbf0 <_ZN16NS_energyShield29writeByteEhhh>
		
		checkSum = readByte(slaveAddress, 0x60);
 800e0b0:	7afb      	ldrb	r3, [r7, #11]
 800e0b2:	2260      	movs	r2, #96	; 0x60
 800e0b4:	4619      	mov	r1, r3
 800e0b6:	68f8      	ldr	r0, [r7, #12]
 800e0b8:	f7ff fdbf 	bl	800dc3a <_ZN16NS_energyShield28readByteEhh>
 800e0bc:	4603      	mov	r3, r0
 800e0be:	773b      	strb	r3, [r7, #28]
	
	} while (checkSum != newCheckSum);
 800e0c0:	7f3a      	ldrb	r2, [r7, #28]
 800e0c2:	7f7b      	ldrb	r3, [r7, #29]
 800e0c4:	429a      	cmp	r2, r3
 800e0c6:	d003      	beq.n	800e0d0 <_ZN16NS_energyShield214setupFuelGaugeEhttth+0x310>
	do {		
 800e0c8:	e6f8      	b.n	800debc <_ZN16NS_energyShield214setupFuelGaugeEhttth+0xfc>
 800e0ca:	bf00      	nop
 800e0cc:	66666667 	.word	0x66666667
	
	// Setup Block RAM update for Subclass ID 0x40 (64)
	writeByte(slaveAddress, 0x61, 0x00); // Enable block access
 800e0d0:	7af9      	ldrb	r1, [r7, #11]
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	2261      	movs	r2, #97	; 0x61
 800e0d6:	68f8      	ldr	r0, [r7, #12]
 800e0d8:	f7ff fd8a 	bl	800dbf0 <_ZN16NS_energyShield29writeByteEhhh>
	writeByte(slaveAddress, 0x3E, 0x40); // Set subclass ID
 800e0dc:	7af9      	ldrb	r1, [r7, #11]
 800e0de:	2340      	movs	r3, #64	; 0x40
 800e0e0:	223e      	movs	r2, #62	; 0x3e
 800e0e2:	68f8      	ldr	r0, [r7, #12]
 800e0e4:	f7ff fd84 	bl	800dbf0 <_ZN16NS_energyShield29writeByteEhhh>
	writeByte(slaveAddress,0x3F, 0x00);  // Set block offset 0 or 32
 800e0e8:	7af9      	ldrb	r1, [r7, #11]
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	223f      	movs	r2, #63	; 0x3f
 800e0ee:	68f8      	ldr	r0, [r7, #12]
 800e0f0:	f7ff fd7e 	bl	800dbf0 <_ZN16NS_energyShield29writeByteEhhh>
	oldCheckSum = readByte(slaveAddress, 0x60);
 800e0f4:	7afb      	ldrb	r3, [r7, #11]
 800e0f6:	2260      	movs	r2, #96	; 0x60
 800e0f8:	4619      	mov	r1, r3
 800e0fa:	68f8      	ldr	r0, [r7, #12]
 800e0fc:	f7ff fd9d 	bl	800dc3a <_ZN16NS_energyShield28readByteEhh>
 800e100:	4603      	mov	r3, r0
 800e102:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	
	i = 0;
 800e106:	2300      	movs	r3, #0
 800e108:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	do
	{
		++i;
 800e10c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e110:	3301      	adds	r3, #1
 800e112:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (i > 100)
 800e116:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e11a:	2b64      	cmp	r3, #100	; 0x64
 800e11c:	dd01      	ble.n	800e122 <_ZN16NS_energyShield214setupFuelGaugeEhttth+0x362>
			return 2; // Failed
 800e11e:	2302      	movs	r3, #2
 800e120:	e112      	b.n	800e348 <_ZN16NS_energyShield214setupFuelGaugeEhttth+0x588>
		
		// Compute new checksum
		tempCheckSum = 0xFF - oldCheckSum;
 800e122:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e126:	43db      	mvns	r3, r3
 800e128:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		
		oldOpConfig = readCommand(slaveAddress,0x40);
 800e12c:	7afb      	ldrb	r3, [r7, #11]
 800e12e:	2240      	movs	r2, #64	; 0x40
 800e130:	4619      	mov	r1, r3
 800e132:	68f8      	ldr	r0, [r7, #12]
 800e134:	f7ff fdd0 	bl	800dcd8 <_ZN16NS_energyShield211readCommandEhh>
 800e138:	4603      	mov	r3, r0
 800e13a:	837b      	strh	r3, [r7, #26]
		
		newOpConfig = oldOpConfig | 0x0004; // Enable BATLOWEN Bit
 800e13c:	8b7b      	ldrh	r3, [r7, #26]
 800e13e:	f043 0304 	orr.w	r3, r3, #4
 800e142:	833b      	strh	r3, [r7, #24]
		
		// Check if already set correctly
		if (newOpConfig == oldOpConfig)
 800e144:	8b3a      	ldrh	r2, [r7, #24]
 800e146:	8b7b      	ldrh	r3, [r7, #26]
 800e148:	429a      	cmp	r2, r3
 800e14a:	d04f      	beq.n	800e1ec <_ZN16NS_energyShield214setupFuelGaugeEhttth+0x42c>
			break;
		
		tempCheckSum -= oldOpConfig >> 8;
 800e14c:	8b7b      	ldrh	r3, [r7, #26]
 800e14e:	121b      	asrs	r3, r3, #8
 800e150:	b2db      	uxtb	r3, r3
 800e152:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800e156:	1ad3      	subs	r3, r2, r3
 800e158:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		tempCheckSum -= oldOpConfig & 0xFF;
 800e15c:	8b7b      	ldrh	r3, [r7, #26]
 800e15e:	b2db      	uxtb	r3, r3
 800e160:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800e164:	1ad3      	subs	r3, r2, r3
 800e166:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		
		writeByte(slaveAddress, 0x40, newOpConfig >> 8);
 800e16a:	8b3b      	ldrh	r3, [r7, #24]
 800e16c:	121b      	asrs	r3, r3, #8
 800e16e:	b2db      	uxtb	r3, r3
 800e170:	7af9      	ldrb	r1, [r7, #11]
 800e172:	2240      	movs	r2, #64	; 0x40
 800e174:	68f8      	ldr	r0, [r7, #12]
 800e176:	f7ff fd3b 	bl	800dbf0 <_ZN16NS_energyShield29writeByteEhhh>
		writeByte(slaveAddress, 0x41, newOpConfig & 0xFF);
 800e17a:	8b3b      	ldrh	r3, [r7, #24]
 800e17c:	b2db      	uxtb	r3, r3
 800e17e:	7af9      	ldrb	r1, [r7, #11]
 800e180:	2241      	movs	r2, #65	; 0x41
 800e182:	68f8      	ldr	r0, [r7, #12]
 800e184:	f7ff fd34 	bl	800dbf0 <_ZN16NS_energyShield29writeByteEhhh>
		
		// Finish computing new checksum		
		tempCheckSum += newOpConfig >> 8;
 800e188:	8b3b      	ldrh	r3, [r7, #24]
 800e18a:	121b      	asrs	r3, r3, #8
 800e18c:	b2da      	uxtb	r2, r3
 800e18e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e192:	4413      	add	r3, r2
 800e194:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		tempCheckSum += newOpConfig & 0xFF;
 800e198:	8b3b      	ldrh	r3, [r7, #24]
 800e19a:	b2da      	uxtb	r2, r3
 800e19c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e1a0:	4413      	add	r3, r2
 800e1a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		
		newCheckSum = 0xFF - tempCheckSum;
 800e1a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e1aa:	43db      	mvns	r3, r3
 800e1ac:	777b      	strb	r3, [r7, #29]
		writeByte(slaveAddress, 0x60, newCheckSum);
 800e1ae:	7f7b      	ldrb	r3, [r7, #29]
 800e1b0:	7af9      	ldrb	r1, [r7, #11]
 800e1b2:	2260      	movs	r2, #96	; 0x60
 800e1b4:	68f8      	ldr	r0, [r7, #12]
 800e1b6:	f7ff fd1b 	bl	800dbf0 <_ZN16NS_energyShield29writeByteEhhh>
		
		// Verify RAM update is complete
		writeByte(slaveAddress, 0x3E, 0x40);
 800e1ba:	7af9      	ldrb	r1, [r7, #11]
 800e1bc:	2340      	movs	r3, #64	; 0x40
 800e1be:	223e      	movs	r2, #62	; 0x3e
 800e1c0:	68f8      	ldr	r0, [r7, #12]
 800e1c2:	f7ff fd15 	bl	800dbf0 <_ZN16NS_energyShield29writeByteEhhh>
		writeByte(slaveAddress, 0x3F, 0x00);
 800e1c6:	7af9      	ldrb	r1, [r7, #11]
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	223f      	movs	r2, #63	; 0x3f
 800e1cc:	68f8      	ldr	r0, [r7, #12]
 800e1ce:	f7ff fd0f 	bl	800dbf0 <_ZN16NS_energyShield29writeByteEhhh>
		checkSum = readByte(slaveAddress, 0x60);
 800e1d2:	7afb      	ldrb	r3, [r7, #11]
 800e1d4:	2260      	movs	r2, #96	; 0x60
 800e1d6:	4619      	mov	r1, r3
 800e1d8:	68f8      	ldr	r0, [r7, #12]
 800e1da:	f7ff fd2e 	bl	800dc3a <_ZN16NS_energyShield28readByteEhh>
 800e1de:	4603      	mov	r3, r0
 800e1e0:	773b      	strb	r3, [r7, #28]
	
	} while (checkSum != newCheckSum);
 800e1e2:	7f3a      	ldrb	r2, [r7, #28]
 800e1e4:	7f7b      	ldrb	r3, [r7, #29]
 800e1e6:	429a      	cmp	r2, r3
 800e1e8:	d001      	beq.n	800e1ee <_ZN16NS_energyShield214setupFuelGaugeEhttth+0x42e>
	do
 800e1ea:	e78f      	b.n	800e10c <_ZN16NS_energyShield214setupFuelGaugeEhttth+0x34c>
			break;
 800e1ec:	bf00      	nop
	
	
	// Setup Block RAM update for Subclass ID 0x40 (64)
	writeByte(slaveAddress, 0x3E, 0x31); // Set subclass ID
 800e1ee:	7af9      	ldrb	r1, [r7, #11]
 800e1f0:	2331      	movs	r3, #49	; 0x31
 800e1f2:	223e      	movs	r2, #62	; 0x3e
 800e1f4:	68f8      	ldr	r0, [r7, #12]
 800e1f6:	f7ff fcfb 	bl	800dbf0 <_ZN16NS_energyShield29writeByteEhhh>
	writeByte(slaveAddress,0x3F, 0x00);  // Set block offset 0 or 32
 800e1fa:	7af9      	ldrb	r1, [r7, #11]
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	223f      	movs	r2, #63	; 0x3f
 800e200:	68f8      	ldr	r0, [r7, #12]
 800e202:	f7ff fcf5 	bl	800dbf0 <_ZN16NS_energyShield29writeByteEhhh>
	oldCheckSum = readByte(slaveAddress, 0x60);
 800e206:	7afb      	ldrb	r3, [r7, #11]
 800e208:	2260      	movs	r2, #96	; 0x60
 800e20a:	4619      	mov	r1, r3
 800e20c:	68f8      	ldr	r0, [r7, #12]
 800e20e:	f7ff fd14 	bl	800dc3a <_ZN16NS_energyShield28readByteEhh>
 800e212:	4603      	mov	r3, r0
 800e214:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	
	i = 0;
 800e218:	2300      	movs	r3, #0
 800e21a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	do {		
		++i;
 800e21e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e222:	3301      	adds	r3, #1
 800e224:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (i > 100)
 800e228:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e22c:	2b64      	cmp	r3, #100	; 0x64
 800e22e:	dd01      	ble.n	800e234 <_ZN16NS_energyShield214setupFuelGaugeEhttth+0x474>
			return 2; // Failed
 800e230:	2302      	movs	r3, #2
 800e232:	e089      	b.n	800e348 <_ZN16NS_energyShield214setupFuelGaugeEhttth+0x588>
		
		// Compute new checksum
		tempCheckSum = 0xFF - oldCheckSum;
 800e234:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e238:	43db      	mvns	r3, r3
 800e23a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		
		oldSOC1Set = readByte(slaveAddress,0x40);
 800e23e:	7afb      	ldrb	r3, [r7, #11]
 800e240:	2240      	movs	r2, #64	; 0x40
 800e242:	4619      	mov	r1, r3
 800e244:	68f8      	ldr	r0, [r7, #12]
 800e246:	f7ff fcf8 	bl	800dc3a <_ZN16NS_energyShield28readByteEhh>
 800e24a:	4603      	mov	r3, r0
 800e24c:	82fb      	strh	r3, [r7, #22]
		oldSOC1Clear = readByte(slaveAddress,0x41);
 800e24e:	7afb      	ldrb	r3, [r7, #11]
 800e250:	2241      	movs	r2, #65	; 0x41
 800e252:	4619      	mov	r1, r3
 800e254:	68f8      	ldr	r0, [r7, #12]
 800e256:	f7ff fcf0 	bl	800dc3a <_ZN16NS_energyShield28readByteEhh>
 800e25a:	4603      	mov	r3, r0
 800e25c:	82bb      	strh	r3, [r7, #20]
		
		// Check if already set correctly
		if ((oldSOC1Set == alarmSOC) && (oldSOC1Clear == alarmSOC))
 800e25e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e262:	b29b      	uxth	r3, r3
 800e264:	8afa      	ldrh	r2, [r7, #22]
 800e266:	429a      	cmp	r2, r3
 800e268:	d105      	bne.n	800e276 <_ZN16NS_energyShield214setupFuelGaugeEhttth+0x4b6>
 800e26a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e26e:	b29b      	uxth	r3, r3
 800e270:	8aba      	ldrh	r2, [r7, #20]
 800e272:	429a      	cmp	r2, r3
 800e274:	d04c      	beq.n	800e310 <_ZN16NS_energyShield214setupFuelGaugeEhttth+0x550>
			break;
		
		tempCheckSum -= oldSOC1Set;
 800e276:	8afb      	ldrh	r3, [r7, #22]
 800e278:	b2db      	uxtb	r3, r3
 800e27a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800e27e:	1ad3      	subs	r3, r2, r3
 800e280:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		tempCheckSum -= oldSOC1Clear;
 800e284:	8abb      	ldrh	r3, [r7, #20]
 800e286:	b2db      	uxtb	r3, r3
 800e288:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800e28c:	1ad3      	subs	r3, r2, r3
 800e28e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		
		writeByte(slaveAddress, 0x40, alarmSOC);
 800e292:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e296:	7af9      	ldrb	r1, [r7, #11]
 800e298:	2240      	movs	r2, #64	; 0x40
 800e29a:	68f8      	ldr	r0, [r7, #12]
 800e29c:	f7ff fca8 	bl	800dbf0 <_ZN16NS_energyShield29writeByteEhhh>
		writeByte(slaveAddress, 0x41, alarmSOC);
 800e2a0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e2a4:	7af9      	ldrb	r1, [r7, #11]
 800e2a6:	2241      	movs	r2, #65	; 0x41
 800e2a8:	68f8      	ldr	r0, [r7, #12]
 800e2aa:	f7ff fca1 	bl	800dbf0 <_ZN16NS_energyShield29writeByteEhhh>
		
		// Finish computing new checksum		
		tempCheckSum += alarmSOC;
 800e2ae:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800e2b2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e2b6:	4413      	add	r3, r2
 800e2b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		tempCheckSum += alarmSOC;
 800e2bc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800e2c0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e2c4:	4413      	add	r3, r2
 800e2c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		
		newCheckSum = 0xFF - tempCheckSum;
 800e2ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e2ce:	43db      	mvns	r3, r3
 800e2d0:	777b      	strb	r3, [r7, #29]
		writeByte(slaveAddress, 0x60, newCheckSum);
 800e2d2:	7f7b      	ldrb	r3, [r7, #29]
 800e2d4:	7af9      	ldrb	r1, [r7, #11]
 800e2d6:	2260      	movs	r2, #96	; 0x60
 800e2d8:	68f8      	ldr	r0, [r7, #12]
 800e2da:	f7ff fc89 	bl	800dbf0 <_ZN16NS_energyShield29writeByteEhhh>
		
		// Verify RAM update is complete
		writeByte(slaveAddress, 0x3E, 0x31);
 800e2de:	7af9      	ldrb	r1, [r7, #11]
 800e2e0:	2331      	movs	r3, #49	; 0x31
 800e2e2:	223e      	movs	r2, #62	; 0x3e
 800e2e4:	68f8      	ldr	r0, [r7, #12]
 800e2e6:	f7ff fc83 	bl	800dbf0 <_ZN16NS_energyShield29writeByteEhhh>
		writeByte(slaveAddress, 0x3F, 0x00);
 800e2ea:	7af9      	ldrb	r1, [r7, #11]
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	223f      	movs	r2, #63	; 0x3f
 800e2f0:	68f8      	ldr	r0, [r7, #12]
 800e2f2:	f7ff fc7d 	bl	800dbf0 <_ZN16NS_energyShield29writeByteEhhh>
		checkSum = readByte(slaveAddress, 0x60);
 800e2f6:	7afb      	ldrb	r3, [r7, #11]
 800e2f8:	2260      	movs	r2, #96	; 0x60
 800e2fa:	4619      	mov	r1, r3
 800e2fc:	68f8      	ldr	r0, [r7, #12]
 800e2fe:	f7ff fc9c 	bl	800dc3a <_ZN16NS_energyShield28readByteEhh>
 800e302:	4603      	mov	r3, r0
 800e304:	773b      	strb	r3, [r7, #28]
	
	} while (checkSum != newCheckSum);
 800e306:	7f3a      	ldrb	r2, [r7, #28]
 800e308:	7f7b      	ldrb	r3, [r7, #29]
 800e30a:	429a      	cmp	r2, r3
 800e30c:	d001      	beq.n	800e312 <_ZN16NS_energyShield214setupFuelGaugeEhttth+0x552>
	do {		
 800e30e:	e786      	b.n	800e21e <_ZN16NS_energyShield214setupFuelGaugeEhttth+0x45e>
			break;
 800e310:	bf00      	nop
	
	// Exit CONFIG UPDATE mode
	writeCommand(slaveAddress, 0x00, 0x0042);
 800e312:	7af9      	ldrb	r1, [r7, #11]
 800e314:	2342      	movs	r3, #66	; 0x42
 800e316:	2200      	movs	r2, #0
 800e318:	68f8      	ldr	r0, [r7, #12]
 800e31a:	f7ff fcb0 	bl	800dc7e <_ZN16NS_energyShield212writeCommandEhht>
	do {
		flags = readCommand(slaveAddress, 0x06);		
 800e31e:	7afb      	ldrb	r3, [r7, #11]
 800e320:	2206      	movs	r2, #6
 800e322:	4619      	mov	r1, r3
 800e324:	68f8      	ldr	r0, [r7, #12]
 800e326:	f7ff fcd7 	bl	800dcd8 <_ZN16NS_energyShield211readCommandEhh>
 800e32a:	4603      	mov	r3, r0
 800e32c:	853b      	strh	r3, [r7, #40]	; 0x28
	} while (flags & 0x0010);	
 800e32e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e330:	f003 0310 	and.w	r3, r3, #16
 800e334:	2b00      	cmp	r3, #0
 800e336:	d000      	beq.n	800e33a <_ZN16NS_energyShield214setupFuelGaugeEhttth+0x57a>
	do {
 800e338:	e7f1      	b.n	800e31e <_ZN16NS_energyShield214setupFuelGaugeEhttth+0x55e>
	
	// Seal fuel gauge
	writeCommand(slaveAddress, 0x00, 0x0020);	
 800e33a:	7af9      	ldrb	r1, [r7, #11]
 800e33c:	2320      	movs	r3, #32
 800e33e:	2200      	movs	r2, #0
 800e340:	68f8      	ldr	r0, [r7, #12]
 800e342:	f7ff fc9c 	bl	800dc7e <_ZN16NS_energyShield212writeCommandEhht>
	
	return 0;
 800e346:	2300      	movs	r3, #0
}
 800e348:	4618      	mov	r0, r3
 800e34a:	3730      	adds	r7, #48	; 0x30
 800e34c:	46bd      	mov	sp, r7
 800e34e:	bd80      	pop	{r7, pc}

0800e350 <_ZN16NS_energyShield29decodeBCDEh>:

// Decode tens place, units place formating (BCD)
uint8_t NS_energyShield2::decodeBCD(uint8_t bcd)
{
 800e350:	b480      	push	{r7}
 800e352:	b085      	sub	sp, #20
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
 800e358:	460b      	mov	r3, r1
 800e35a:	70fb      	strb	r3, [r7, #3]
	uint8_t _value = ((0b01110000 & bcd) >> 4) * 10 + (0b00001111 & bcd);
 800e35c:	78fb      	ldrb	r3, [r7, #3]
 800e35e:	111b      	asrs	r3, r3, #4
 800e360:	b2db      	uxtb	r3, r3
 800e362:	f003 0307 	and.w	r3, r3, #7
 800e366:	b2db      	uxtb	r3, r3
 800e368:	461a      	mov	r2, r3
 800e36a:	0092      	lsls	r2, r2, #2
 800e36c:	4413      	add	r3, r2
 800e36e:	005b      	lsls	r3, r3, #1
 800e370:	b2da      	uxtb	r2, r3
 800e372:	78fb      	ldrb	r3, [r7, #3]
 800e374:	f003 030f 	and.w	r3, r3, #15
 800e378:	b2db      	uxtb	r3, r3
 800e37a:	4413      	add	r3, r2
 800e37c:	73fb      	strb	r3, [r7, #15]

	return _value;
 800e37e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e380:	4618      	mov	r0, r3
 800e382:	3714      	adds	r7, #20
 800e384:	46bd      	mov	sp, r7
 800e386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38a:	4770      	bx	lr

0800e38c <_ZN16NS_energyShield2C1EP19__I2C_HandleTypeDef>:
*****************************************/
#include <adc.h>
#include ".\NS_energyShield2.h"

// Creates an instance of NS_energyShield2
NS_energyShield2::NS_energyShield2(I2C_HandleTypeDef *pI2C)
 800e38c:	b480      	push	{r7}
 800e38e:	b083      	sub	sp, #12
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
 800e394:	6039      	str	r1, [r7, #0]
{
	_batteryCapacity = BATTERY_CAPACITY;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800e39c:	811a      	strh	r2, [r3, #8]
	_pI2C = pI2C;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	683a      	ldr	r2, [r7, #0]
 800e3a2:	60da      	str	r2, [r3, #12]
}
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	370c      	adds	r7, #12
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b0:	4770      	bx	lr

0800e3b2 <_ZN16NS_energyShield29readClockEv>:
  return;
}

// Read current time and date into a local buffer
void NS_energyShield2::readClock()
{
 800e3b2:	b580      	push	{r7, lr}
 800e3b4:	b088      	sub	sp, #32
 800e3b6:	af04      	add	r7, sp, #16
 800e3b8:	6078      	str	r0, [r7, #4]
	int i=0;	
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	60fb      	str	r3, [r7, #12]
	
	// Read time and date
	// read from register 4 to 0xA from RTC
	HAL_I2C_Mem_Read(_pI2C, RTC_SLAVE_ADDR << 1, 0x04, I2C_MEMADD_SIZE_8BIT, _timeDate, 7, 100);
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	68d8      	ldr	r0, [r3, #12]
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	2264      	movs	r2, #100	; 0x64
 800e3c6:	9202      	str	r2, [sp, #8]
 800e3c8:	2207      	movs	r2, #7
 800e3ca:	9201      	str	r2, [sp, #4]
 800e3cc:	9300      	str	r3, [sp, #0]
 800e3ce:	2301      	movs	r3, #1
 800e3d0:	2204      	movs	r2, #4
 800e3d2:	21a2      	movs	r1, #162	; 0xa2
 800e3d4:	f7fb ff58 	bl	800a288 <HAL_I2C_Mem_Read>

	
	// Convert seconds, minutes, hours, day-of-the-month, and year from BCD to binary (skipping day-of-the-week)
	for (i = 0; i < 7; i++)
 800e3d8:	2300      	movs	r3, #0
 800e3da:	60fb      	str	r3, [r7, #12]
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	2b06      	cmp	r3, #6
 800e3e0:	dc15      	bgt.n	800e40e <_ZN16NS_energyShield29readClockEv+0x5c>
	{
		if (i != 4)
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	2b04      	cmp	r3, #4
 800e3e6:	d00e      	beq.n	800e406 <_ZN16NS_energyShield29readClockEv+0x54>
			_timeDate[i] = decodeBCD(_timeDate[i]);
 800e3e8:	687a      	ldr	r2, [r7, #4]
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	4413      	add	r3, r2
 800e3ee:	781b      	ldrb	r3, [r3, #0]
 800e3f0:	4619      	mov	r1, r3
 800e3f2:	6878      	ldr	r0, [r7, #4]
 800e3f4:	f7ff ffac 	bl	800e350 <_ZN16NS_energyShield29decodeBCDEh>
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	4619      	mov	r1, r3
 800e3fc:	687a      	ldr	r2, [r7, #4]
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	4413      	add	r3, r2
 800e402:	460a      	mov	r2, r1
 800e404:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 7; i++)
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	3301      	adds	r3, #1
 800e40a:	60fb      	str	r3, [r7, #12]
 800e40c:	e7e6      	b.n	800e3dc <_ZN16NS_energyShield29readClockEv+0x2a>
	}
	
	return;
 800e40e:	bf00      	nop
}
 800e410:	3710      	adds	r7, #16
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}

0800e416 <_ZN16NS_energyShield26secondEv>:

// Returns current second(0-59)
uint8_t NS_energyShield2::second()
{
 800e416:	b480      	push	{r7}
 800e418:	b083      	sub	sp, #12
 800e41a:	af00      	add	r7, sp, #0
 800e41c:	6078      	str	r0, [r7, #4]
	return _timeDate[0];
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	781b      	ldrb	r3, [r3, #0]
}
 800e422:	4618      	mov	r0, r3
 800e424:	370c      	adds	r7, #12
 800e426:	46bd      	mov	sp, r7
 800e428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42c:	4770      	bx	lr

0800e42e <_ZN16NS_energyShield26minuteEv>:

// Returns current minute (0-59)
uint8_t NS_energyShield2::minute()
{
 800e42e:	b480      	push	{r7}
 800e430:	b083      	sub	sp, #12
 800e432:	af00      	add	r7, sp, #0
 800e434:	6078      	str	r0, [r7, #4]
	return _timeDate[1];
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	785b      	ldrb	r3, [r3, #1]
}
 800e43a:	4618      	mov	r0, r3
 800e43c:	370c      	adds	r7, #12
 800e43e:	46bd      	mov	sp, r7
 800e440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e444:	4770      	bx	lr

0800e446 <_ZN16NS_energyShield24hourEv>:

// Returns current hour (0-23)
uint8_t NS_energyShield2::hour()
{
 800e446:	b480      	push	{r7}
 800e448:	b083      	sub	sp, #12
 800e44a:	af00      	add	r7, sp, #0
 800e44c:	6078      	str	r0, [r7, #4]
	return _timeDate[2];
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	789b      	ldrb	r3, [r3, #2]
}
 800e452:	4618      	mov	r0, r3
 800e454:	370c      	adds	r7, #12
 800e456:	46bd      	mov	sp, r7
 800e458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45c:	4770      	bx	lr

0800e45e <_ZN16NS_energyShield210dayOfMonthEv>:

// Returns current day of the month (1-31)
uint8_t NS_energyShield2::dayOfMonth()
{
 800e45e:	b480      	push	{r7}
 800e460:	b083      	sub	sp, #12
 800e462:	af00      	add	r7, sp, #0
 800e464:	6078      	str	r0, [r7, #4]
	return _timeDate[3];
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	78db      	ldrb	r3, [r3, #3]
}
 800e46a:	4618      	mov	r0, r3
 800e46c:	370c      	adds	r7, #12
 800e46e:	46bd      	mov	sp, r7
 800e470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e474:	4770      	bx	lr

0800e476 <_ZN16NS_energyShield25monthEv>:
	return _timeDate[4];
}

// Returns current month (1-12)
uint8_t NS_energyShield2::month()
{
 800e476:	b480      	push	{r7}
 800e478:	b083      	sub	sp, #12
 800e47a:	af00      	add	r7, sp, #0
 800e47c:	6078      	str	r0, [r7, #4]
	return _timeDate[5];
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	795b      	ldrb	r3, [r3, #5]
}
 800e482:	4618      	mov	r0, r3
 800e484:	370c      	adds	r7, #12
 800e486:	46bd      	mov	sp, r7
 800e488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48c:	4770      	bx	lr

0800e48e <_ZN16NS_energyShield24yearEv>:

// Returns current year (00-99)
uint8_t NS_energyShield2::year()
{
 800e48e:	b480      	push	{r7}
 800e490:	b083      	sub	sp, #12
 800e492:	af00      	add	r7, sp, #0
 800e494:	6078      	str	r0, [r7, #4]
	return _timeDate[6];
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	799b      	ldrb	r3, [r3, #6]
}
 800e49a:	4618      	mov	r0, r3
 800e49c:	370c      	adds	r7, #12
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a4:	4770      	bx	lr

0800e4a6 <_ZN16NS_energyShield211clearAlarmsEv>:

// Clears any active RTC alarms
void NS_energyShield2::clearAlarms()
{
 800e4a6:	b580      	push	{r7, lr}
 800e4a8:	b08a      	sub	sp, #40	; 0x28
 800e4aa:	af04      	add	r7, sp, #16
 800e4ac:	6078      	str	r0, [r7, #4]
	uint8_t tmp[5];

	for(int i = 0; i < 5; i++)
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	617b      	str	r3, [r7, #20]
 800e4b2:	697b      	ldr	r3, [r7, #20]
 800e4b4:	2b04      	cmp	r3, #4
 800e4b6:	dc09      	bgt.n	800e4cc <_ZN16NS_energyShield211clearAlarmsEv+0x26>
		tmp[i] = 0xff;
 800e4b8:	f107 020c 	add.w	r2, r7, #12
 800e4bc:	697b      	ldr	r3, [r7, #20]
 800e4be:	4413      	add	r3, r2
 800e4c0:	22ff      	movs	r2, #255	; 0xff
 800e4c2:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 5; i++)
 800e4c4:	697b      	ldr	r3, [r7, #20]
 800e4c6:	3301      	adds	r3, #1
 800e4c8:	617b      	str	r3, [r7, #20]
 800e4ca:	e7f2      	b.n	800e4b2 <_ZN16NS_energyShield211clearAlarmsEv+0xc>

	//HAL_Delay(15);
	HAL_I2C_Mem_Write(_pI2C, RTC_SLAVE_ADDR << 1, 0x0B, I2C_MEMADD_SIZE_8BIT, tmp, 5, 100);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	68d8      	ldr	r0, [r3, #12]
 800e4d0:	2364      	movs	r3, #100	; 0x64
 800e4d2:	9302      	str	r3, [sp, #8]
 800e4d4:	2305      	movs	r3, #5
 800e4d6:	9301      	str	r3, [sp, #4]
 800e4d8:	f107 030c 	add.w	r3, r7, #12
 800e4dc:	9300      	str	r3, [sp, #0]
 800e4de:	2301      	movs	r3, #1
 800e4e0:	220b      	movs	r2, #11
 800e4e2:	21a2      	movs	r1, #162	; 0xa2
 800e4e4:	f7fb fe0e 	bl	800a104 <HAL_I2C_Mem_Write>

	return;
 800e4e8:	bf00      	nop
}
 800e4ea:	3718      	adds	r7, #24
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}

0800e4f0 <_ZN16NS_energyShield28readVMPPEv>:
  }
}

// Read the current VMPP setting from DAC
int NS_energyShield2::readVMPP()
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b086      	sub	sp, #24
 800e4f4:	af02      	add	r7, sp, #8
 800e4f6:	6078      	str	r0, [r7, #4]
	uint8_t data[2];
	do
	{
		HAL_I2C_Master_Receive(_pI2C, DAC_SLAVE_ADDR<<1, data, 2, 100);
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	68d8      	ldr	r0, [r3, #12]
 800e4fc:	f107 020c 	add.w	r2, r7, #12
 800e500:	2364      	movs	r3, #100	; 0x64
 800e502:	9300      	str	r3, [sp, #0]
 800e504:	2302      	movs	r3, #2
 800e506:	21c0      	movs	r1, #192	; 0xc0
 800e508:	f7fb fd66 	bl	8009fd8 <HAL_I2C_Master_Receive>
	} while (!(data[0] & 0b10000000));
 800e50c:	7b3b      	ldrb	r3, [r7, #12]
 800e50e:	b25b      	sxtb	r3, r3
 800e510:	2b00      	cmp	r3, #0
 800e512:	db00      	blt.n	800e516 <_ZN16NS_energyShield28readVMPPEv+0x26>
	do
 800e514:	e7f0      	b.n	800e4f8 <_ZN16NS_energyShield28readVMPPEv+0x8>

	if (data[0] & 0b00000110)
 800e516:	7b3b      	ldrb	r3, [r7, #12]
 800e518:	f003 0306 	and.w	r3, r3, #6
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d002      	beq.n	800e526 <_ZN16NS_energyShield28readVMPPEv+0x36>
	{
		return -1;
 800e520:	f04f 33ff 	mov.w	r3, #4294967295
 800e524:	e009      	b.n	800e53a <_ZN16NS_energyShield28readVMPPEv+0x4a>
	}
	else
	{
		return ((unsigned long) (357 - (int)(data[1])) << 16) / 984;
 800e526:	7b7b      	ldrb	r3, [r7, #13]
 800e528:	f5c3 73b2 	rsb	r3, r3, #356	; 0x164
 800e52c:	3301      	adds	r3, #1
 800e52e:	041b      	lsls	r3, r3, #16
 800e530:	08db      	lsrs	r3, r3, #3
 800e532:	4a04      	ldr	r2, [pc, #16]	; (800e544 <_ZN16NS_energyShield28readVMPPEv+0x54>)
 800e534:	fba2 2303 	umull	r2, r3, r2, r3
 800e538:	091b      	lsrs	r3, r3, #4
	}
}
 800e53a:	4618      	mov	r0, r3
 800e53c:	3710      	adds	r7, #16
 800e53e:	46bd      	mov	sp, r7
 800e540:	bd80      	pop	{r7, pc}
 800e542:	bf00      	nop
 800e544:	214d0215 	.word	0x214d0215

0800e548 <_ZN16NS_energyShield27setVMPPEib>:

// Set regulated MPP voltage of solar panel and writes to EEPROM
void NS_energyShield2::setVMPP(int MPP_Voltage_mV, bool writeEEPROM)
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b08a      	sub	sp, #40	; 0x28
 800e54c:	af02      	add	r7, sp, #8
 800e54e:	60f8      	str	r0, [r7, #12]
 800e550:	60b9      	str	r1, [r7, #8]
 800e552:	4613      	mov	r3, r2
 800e554:	71fb      	strb	r3, [r7, #7]
	uint8_t DAC_setting, Control, Hbyte, Lbyte, data[2];
	uint8_t tmp[3];

	do
	{
		HAL_I2C_Master_Receive(_pI2C, DAC_SLAVE_ADDR<<1, data, 2, 100);
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	68d8      	ldr	r0, [r3, #12]
 800e55a:	f107 0218 	add.w	r2, r7, #24
 800e55e:	2364      	movs	r3, #100	; 0x64
 800e560:	9300      	str	r3, [sp, #0]
 800e562:	2302      	movs	r3, #2
 800e564:	21c0      	movs	r1, #192	; 0xc0
 800e566:	f7fb fd37 	bl	8009fd8 <HAL_I2C_Master_Receive>
	} while (!(data[0] & 0b10000000));
 800e56a:	7e3b      	ldrb	r3, [r7, #24]
 800e56c:	b25b      	sxtb	r3, r3
 800e56e:	2b00      	cmp	r3, #0
 800e570:	db00      	blt.n	800e574 <_ZN16NS_energyShield27setVMPPEib+0x2c>
	do
 800e572:	e7f0      	b.n	800e556 <_ZN16NS_energyShield27setVMPPEib+0xe>


	// Check to see if regulation is already disabled
	if ((MPP_Voltage_mV <= 0) && (data[0] & 0b00000110))
 800e574:	68bb      	ldr	r3, [r7, #8]
 800e576:	2b00      	cmp	r3, #0
 800e578:	dc04      	bgt.n	800e584 <_ZN16NS_energyShield27setVMPPEib+0x3c>
 800e57a:	7e3b      	ldrb	r3, [r7, #24]
 800e57c:	f003 0306 	and.w	r3, r3, #6
 800e580:	2b00      	cmp	r3, #0
 800e582:	d139      	bne.n	800e5f8 <_ZN16NS_energyShield27setVMPPEib+0xb0>
		return;

	// Calculates the required DAC voltage to bias the feedback 
	DAC_setting = 357 - ((unsigned long) 984 * MPP_Voltage_mV >> 16);
 800e584:	68bb      	ldr	r3, [r7, #8]
 800e586:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800e58a:	fb02 f303 	mul.w	r3, r2, r3
 800e58e:	0c1b      	lsrs	r3, r3, #16
 800e590:	b2db      	uxtb	r3, r3
 800e592:	f1c3 0365 	rsb	r3, r3, #101	; 0x65
 800e596:	773b      	strb	r3, [r7, #28]

	if (data[1] != DAC_setting)
 800e598:	7e7b      	ldrb	r3, [r7, #25]
 800e59a:	7f3a      	ldrb	r2, [r7, #28]
 800e59c:	429a      	cmp	r2, r3
 800e59e:	d02d      	beq.n	800e5fc <_ZN16NS_energyShield27setVMPPEib+0xb4>
	{
		if (MPP_Voltage_mV > 0)
 800e5a0:	68bb      	ldr	r3, [r7, #8]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	dd0b      	ble.n	800e5be <_ZN16NS_energyShield27setVMPPEib+0x76>
		{
			// Formats data for transmission
			Control = writeEEPROM ? 0x70 : 0x50;
 800e5a6:	79fb      	ldrb	r3, [r7, #7]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d001      	beq.n	800e5b0 <_ZN16NS_energyShield27setVMPPEib+0x68>
 800e5ac:	2370      	movs	r3, #112	; 0x70
 800e5ae:	e000      	b.n	800e5b2 <_ZN16NS_energyShield27setVMPPEib+0x6a>
 800e5b0:	2350      	movs	r3, #80	; 0x50
 800e5b2:	77fb      	strb	r3, [r7, #31]
			Hbyte = DAC_setting;
 800e5b4:	7f3b      	ldrb	r3, [r7, #28]
 800e5b6:	77bb      	strb	r3, [r7, #30]
			Lbyte = 0x00;
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	777b      	strb	r3, [r7, #29]
 800e5bc:	e00a      	b.n	800e5d4 <_ZN16NS_energyShield27setVMPPEib+0x8c>
		}
		else
		{
			// Sets DAC to high impedance, low power state
			Control = writeEEPROM ? 0x76 : 0x56;
 800e5be:	79fb      	ldrb	r3, [r7, #7]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d001      	beq.n	800e5c8 <_ZN16NS_energyShield27setVMPPEib+0x80>
 800e5c4:	2376      	movs	r3, #118	; 0x76
 800e5c6:	e000      	b.n	800e5ca <_ZN16NS_energyShield27setVMPPEib+0x82>
 800e5c8:	2356      	movs	r3, #86	; 0x56
 800e5ca:	77fb      	strb	r3, [r7, #31]
			Hbyte = 0x00;
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	77bb      	strb	r3, [r7, #30]
			Lbyte = 0x00;
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	777b      	strb	r3, [r7, #29]
		}
		tmp[0] = Control;
 800e5d4:	7ffb      	ldrb	r3, [r7, #31]
 800e5d6:	753b      	strb	r3, [r7, #20]
		tmp[1] = Hbyte;
 800e5d8:	7fbb      	ldrb	r3, [r7, #30]
 800e5da:	757b      	strb	r3, [r7, #21]
		tmp[2] = Lbyte;
 800e5dc:	7f7b      	ldrb	r3, [r7, #29]
 800e5de:	75bb      	strb	r3, [r7, #22]

		// Write value to DAC
		HAL_I2C_Master_Transmit(_pI2C, DAC_SLAVE_ADDR<<1, tmp, 3, 100);
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	68d8      	ldr	r0, [r3, #12]
 800e5e4:	f107 0214 	add.w	r2, r7, #20
 800e5e8:	2364      	movs	r3, #100	; 0x64
 800e5ea:	9300      	str	r3, [sp, #0]
 800e5ec:	2303      	movs	r3, #3
 800e5ee:	21c0      	movs	r1, #192	; 0xc0
 800e5f0:	f7fb fc5e 	bl	8009eb0 <HAL_I2C_Master_Transmit>
	}

	return;
 800e5f4:	bf00      	nop
 800e5f6:	e001      	b.n	800e5fc <_ZN16NS_energyShield27setVMPPEib+0xb4>
		return;
 800e5f8:	bf00      	nop
 800e5fa:	e000      	b.n	800e5fe <_ZN16NS_energyShield27setVMPPEib+0xb6>
	return;
 800e5fc:	bf00      	nop
}
 800e5fe:	3720      	adds	r7, #32
 800e600:	46bd      	mov	sp, r7
 800e602:	bd80      	pop	{r7, pc}

0800e604 <_ZN16NS_energyShield214batteryVoltageEv>:

// Returns battery voltage from fuel gauge in mV
uint16_t NS_energyShield2::batteryVoltage()
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b084      	sub	sp, #16
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
	uint16_t voltage = readCommand(FG_SLAVE_ADDR, 0x04);
 800e60c:	2204      	movs	r2, #4
 800e60e:	2155      	movs	r1, #85	; 0x55
 800e610:	6878      	ldr	r0, [r7, #4]
 800e612:	f7ff fb61 	bl	800dcd8 <_ZN16NS_energyShield211readCommandEhh>
 800e616:	4603      	mov	r3, r0
 800e618:	81fb      	strh	r3, [r7, #14]
	return voltage;
 800e61a:	89fb      	ldrh	r3, [r7, #14]
}
 800e61c:	4618      	mov	r0, r3
 800e61e:	3710      	adds	r7, #16
 800e620:	46bd      	mov	sp, r7
 800e622:	bd80      	pop	{r7, pc}

0800e624 <_ZN16NS_energyShield214batteryCurrentEv>:

// Returns 1 second average of current from fuel gauge in mA
int16_t NS_energyShield2::batteryCurrent()
{
 800e624:	b580      	push	{r7, lr}
 800e626:	b084      	sub	sp, #16
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
	int16_t current = readCommand(FG_SLAVE_ADDR, 0x10);
 800e62c:	2210      	movs	r2, #16
 800e62e:	2155      	movs	r1, #85	; 0x55
 800e630:	6878      	ldr	r0, [r7, #4]
 800e632:	f7ff fb51 	bl	800dcd8 <_ZN16NS_energyShield211readCommandEhh>
 800e636:	4603      	mov	r3, r0
 800e638:	81fb      	strh	r3, [r7, #14]
	return current;
 800e63a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800e63e:	4618      	mov	r0, r3
 800e640:	3710      	adds	r7, #16
 800e642:	46bd      	mov	sp, r7
 800e644:	bd80      	pop	{r7, pc}

0800e646 <_ZN16NS_energyShield211temperatureEv>:

// Returns temperature from fuel gauge in tenths of a degree Celsius (0.1 C)
int16_t NS_energyShield2::temperature()
{
 800e646:	b580      	push	{r7, lr}
 800e648:	b084      	sub	sp, #16
 800e64a:	af00      	add	r7, sp, #0
 800e64c:	6078      	str	r0, [r7, #4]
	int16_t temp = readCommand(FG_SLAVE_ADDR, 0x02);
 800e64e:	2202      	movs	r2, #2
 800e650:	2155      	movs	r1, #85	; 0x55
 800e652:	6878      	ldr	r0, [r7, #4]
 800e654:	f7ff fb40 	bl	800dcd8 <_ZN16NS_energyShield211readCommandEhh>
 800e658:	4603      	mov	r3, r0
 800e65a:	81fb      	strh	r3, [r7, #14]
	temp -= 2732;
 800e65c:	89fb      	ldrh	r3, [r7, #14]
 800e65e:	f6a3 23ac 	subw	r3, r3, #2732	; 0xaac
 800e662:	b29b      	uxth	r3, r3
 800e664:	81fb      	strh	r3, [r7, #14]
	return temp;
 800e666:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800e66a:	4618      	mov	r0, r3
 800e66c:	3710      	adds	r7, #16
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd80      	pop	{r7, pc}

0800e672 <_ZN16NS_energyShield23SOCEv>:

// Returns state-of-charge from fuel gauge in percent of full charge (1%)
uint16_t NS_energyShield2::SOC()
{
 800e672:	b580      	push	{r7, lr}
 800e674:	b084      	sub	sp, #16
 800e676:	af00      	add	r7, sp, #0
 800e678:	6078      	str	r0, [r7, #4]
	uint16_t SOC = readCommand(FG_SLAVE_ADDR, 0x1C);
 800e67a:	221c      	movs	r2, #28
 800e67c:	2155      	movs	r1, #85	; 0x55
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	f7ff fb2a 	bl	800dcd8 <_ZN16NS_energyShield211readCommandEhh>
 800e684:	4603      	mov	r3, r0
 800e686:	81fb      	strh	r3, [r7, #14]
	return SOC;
 800e688:	89fb      	ldrh	r3, [r7, #14]
}
 800e68a:	4618      	mov	r0, r3
 800e68c:	3710      	adds	r7, #16
 800e68e:	46bd      	mov	sp, r7
 800e690:	bd80      	pop	{r7, pc}

0800e692 <_ZN16NS_energyShield218fullChargeCapacityEv>:

// Returns full-charge capacity from fuel gauge in mAh
uint16_t NS_energyShield2::fullChargeCapacity()
{
 800e692:	b580      	push	{r7, lr}
 800e694:	b084      	sub	sp, #16
 800e696:	af00      	add	r7, sp, #0
 800e698:	6078      	str	r0, [r7, #4]
	uint16_t fullChargeCapacity = readCommand(FG_SLAVE_ADDR, 0x0E);
 800e69a:	220e      	movs	r2, #14
 800e69c:	2155      	movs	r1, #85	; 0x55
 800e69e:	6878      	ldr	r0, [r7, #4]
 800e6a0:	f7ff fb1a 	bl	800dcd8 <_ZN16NS_energyShield211readCommandEhh>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	81fb      	strh	r3, [r7, #14]
	return fullChargeCapacity;
 800e6a8:	89fb      	ldrh	r3, [r7, #14]
}
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	3710      	adds	r7, #16
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	bd80      	pop	{r7, pc}

0800e6b2 <_ZN16NS_energyShield217remainingCapacityEv>:

// Returns remaining capacity from fuel gauge in mAh
uint16_t NS_energyShield2::remainingCapacity()
{
 800e6b2:	b580      	push	{r7, lr}
 800e6b4:	b084      	sub	sp, #16
 800e6b6:	af00      	add	r7, sp, #0
 800e6b8:	6078      	str	r0, [r7, #4]
	uint16_t remainingCapacity = readCommand(FG_SLAVE_ADDR, 0x0C);
 800e6ba:	220c      	movs	r2, #12
 800e6bc:	2155      	movs	r1, #85	; 0x55
 800e6be:	6878      	ldr	r0, [r7, #4]
 800e6c0:	f7ff fb0a 	bl	800dcd8 <_ZN16NS_energyShield211readCommandEhh>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	81fb      	strh	r3, [r7, #14]
	return remainingCapacity;
 800e6c8:	89fb      	ldrh	r3, [r7, #14]
}
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	3710      	adds	r7, #16
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	bd80      	pop	{r7, pc}
	...

0800e6d4 <_ZN16NS_energyShield212inputVoltageEh>:
	return 0;
}

// Returns solar/adapter input voltage in mV (default pin, A0)
uint16_t NS_energyShield2::inputVoltage(uint8_t analogChannel)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b084      	sub	sp, #16
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
 800e6dc:	460b      	mov	r3, r1
 800e6de:	70fb      	strb	r3, [r7, #3]
	uint16_t voltage = 0;
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	81fb      	strh	r3, [r7, #14]

	if (analogChannel == 0) 			// PA0 is configured ADC1_IN5
 800e6e4:	78fb      	ldrb	r3, [r7, #3]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d127      	bne.n	800e73a <_ZN16NS_energyShield212inputVoltageEh+0x66>
	{
		HAL_ADC_Start(&hadc1);
 800e6ea:	4816      	ldr	r0, [pc, #88]	; (800e744 <_ZN16NS_energyShield212inputVoltageEh+0x70>)
 800e6ec:	f7fa fe3c 	bl	8009368 <HAL_ADC_Start>
		for (int ix = 0; ix < 4; ix++)
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	60bb      	str	r3, [r7, #8]
 800e6f4:	68bb      	ldr	r3, [r7, #8]
 800e6f6:	2b03      	cmp	r3, #3
 800e6f8:	dc18      	bgt.n	800e72c <_ZN16NS_energyShield212inputVoltageEh+0x58>
		{
			if (HAL_ADC_PollForConversion(&hadc1, 4000) == HAL_OK)
 800e6fa:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 800e6fe:	4811      	ldr	r0, [pc, #68]	; (800e744 <_ZN16NS_energyShield212inputVoltageEh+0x70>)
 800e700:	f7fa f95e 	bl	80089c0 <HAL_ADC_PollForConversion>
 800e704:	4603      	mov	r3, r0
 800e706:	2b00      	cmp	r3, #0
 800e708:	bf0c      	ite	eq
 800e70a:	2301      	moveq	r3, #1
 800e70c:	2300      	movne	r3, #0
 800e70e:	b2db      	uxtb	r3, r3
 800e710:	2b00      	cmp	r3, #0
 800e712:	d007      	beq.n	800e724 <_ZN16NS_energyShield212inputVoltageEh+0x50>
			{
				voltage += HAL_ADC_GetValue(&hadc1);
 800e714:	480b      	ldr	r0, [pc, #44]	; (800e744 <_ZN16NS_energyShield212inputVoltageEh+0x70>)
 800e716:	f7fa f9df 	bl	8008ad8 <HAL_ADC_GetValue>
 800e71a:	4603      	mov	r3, r0
 800e71c:	b29a      	uxth	r2, r3
 800e71e:	89fb      	ldrh	r3, [r7, #14]
 800e720:	4413      	add	r3, r2
 800e722:	81fb      	strh	r3, [r7, #14]
		for (int ix = 0; ix < 4; ix++)
 800e724:	68bb      	ldr	r3, [r7, #8]
 800e726:	3301      	adds	r3, #1
 800e728:	60bb      	str	r3, [r7, #8]
 800e72a:	e7e3      	b.n	800e6f4 <_ZN16NS_energyShield212inputVoltageEh+0x20>
			}
		}
		voltage = (unsigned long) (voltage / 4) * 5;
 800e72c:	89fb      	ldrh	r3, [r7, #14]
 800e72e:	089b      	lsrs	r3, r3, #2
 800e730:	b29b      	uxth	r3, r3
 800e732:	461a      	mov	r2, r3
 800e734:	0092      	lsls	r2, r2, #2
 800e736:	4413      	add	r3, r2
 800e738:	81fb      	strh	r3, [r7, #14]
	}

	return voltage;
 800e73a:	89fb      	ldrh	r3, [r7, #14]
}
 800e73c:	4618      	mov	r0, r3
 800e73e:	3710      	adds	r7, #16
 800e740:	46bd      	mov	sp, r7
 800e742:	bd80      	pop	{r7, pc}
 800e744:	20000954 	.word	0x20000954

0800e748 <_ZN16NS_energyShield25beginEv>:

// Set up energyShield 2 for use
int NS_energyShield2::begin()
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b086      	sub	sp, #24
 800e74c:	af02      	add	r7, sp, #8
 800e74e:	6078      	str	r0, [r7, #4]
	int error=0;
 800e750:	2300      	movs	r3, #0
 800e752:	60fb      	str	r3, [r7, #12]
	
	// Setup RTC
	writeByte(RTC_SLAVE_ADDR, 0x00, 0b01001001); // Normal Mode, Run (Not Stop), No Reset, No Correction, 24-Hour, 12.5pF
 800e754:	2349      	movs	r3, #73	; 0x49
 800e756:	2200      	movs	r2, #0
 800e758:	2151      	movs	r1, #81	; 0x51
 800e75a:	6878      	ldr	r0, [r7, #4]
 800e75c:	f7ff fa48 	bl	800dbf0 <_ZN16NS_energyShield29writeByteEhhh>
	writeByte(RTC_SLAVE_ADDR, 0x01, 0b11000111); // Alarm Interrupt Enabled, Leave Alarm Flag Unchanged, Disable MI, HMI, and TF, No CLKOUT
 800e760:	23c7      	movs	r3, #199	; 0xc7
 800e762:	2201      	movs	r2, #1
 800e764:	2151      	movs	r1, #81	; 0x51
 800e766:	6878      	ldr	r0, [r7, #4]
 800e768:	f7ff fa42 	bl	800dbf0 <_ZN16NS_energyShield29writeByteEhhh>
	clearAlarms();
 800e76c:	6878      	ldr	r0, [r7, #4]
 800e76e:	f7ff fe9a 	bl	800e4a6 <_ZN16NS_energyShield211clearAlarmsEv>
	
	// Setup Fuel Gauge	
	error |= setupFuelGauge(FG_SLAVE_ADDR, _batteryCapacity, BATTERY_TERMVOLT_MV, BATTERY_TERMCUR_MA, ALARM_SOC); // Write correct RAM values
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	891a      	ldrh	r2, [r3, #8]
 800e776:	230a      	movs	r3, #10
 800e778:	9301      	str	r3, [sp, #4]
 800e77a:	2341      	movs	r3, #65	; 0x41
 800e77c:	9300      	str	r3, [sp, #0]
 800e77e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800e782:	2155      	movs	r1, #85	; 0x55
 800e784:	6878      	ldr	r0, [r7, #4]
 800e786:	f7ff fb1b 	bl	800ddc0 <_ZN16NS_energyShield214setupFuelGaugeEhttth>
 800e78a:	4602      	mov	r2, r0
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	4313      	orrs	r3, r2
 800e790:	60fb      	str	r3, [r7, #12]
		
	return error;
 800e792:	68fb      	ldr	r3, [r7, #12]
}
 800e794:	4618      	mov	r0, r3
 800e796:	3710      	adds	r7, #16
 800e798:	46bd      	mov	sp, r7
 800e79a:	bd80      	pop	{r7, pc}

0800e79c <_ZN12WiFiEspClassC1Ev>:


uint8_t WiFiEspClass::espMode = 0;


WiFiEspClass::WiFiEspClass()
 800e79c:	b480      	push	{r7}
 800e79e:	b083      	sub	sp, #12
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
{

}
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	370c      	adds	r7, #12
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b0:	4770      	bx	lr
	...

0800e7b4 <_Z41__static_initialization_and_destruction_0ii>:
{
  _state[sock] = NA_STATE;
}


WiFiEspClass WiFi;
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b082      	sub	sp, #8
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
 800e7bc:	6039      	str	r1, [r7, #0]
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2b01      	cmp	r3, #1
 800e7c2:	d107      	bne.n	800e7d4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800e7c4:	683b      	ldr	r3, [r7, #0]
 800e7c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e7ca:	4293      	cmp	r3, r2
 800e7cc:	d102      	bne.n	800e7d4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800e7ce:	4803      	ldr	r0, [pc, #12]	; (800e7dc <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800e7d0:	f7ff ffe4 	bl	800e79c <_ZN12WiFiEspClassC1Ev>
 800e7d4:	bf00      	nop
 800e7d6:	3708      	adds	r7, #8
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	bd80      	pop	{r7, pc}
 800e7dc:	200006b0 	.word	0x200006b0

0800e7e0 <_GLOBAL__sub_I__ZN12WiFiEspClass6_stateE>:
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	af00      	add	r7, sp, #0
 800e7e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e7e8:	2001      	movs	r0, #1
 800e7ea:	f7ff ffe3 	bl	800e7b4 <_Z41__static_initialization_and_destruction_0ii>
 800e7ee:	bd80      	pop	{r7, pc}

0800e7f0 <_Z41__static_initialization_and_destruction_0ii>:
	} while (HAL_GetTick() - _startMillis < _timeout);

	return -1; // -1 indicates timeout
}

EspDrv espDrv;
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b082      	sub	sp, #8
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
 800e7f8:	6039      	str	r1, [r7, #0]
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	2b01      	cmp	r3, #1
 800e7fe:	d10d      	bne.n	800e81c <_Z41__static_initialization_and_destruction_0ii+0x2c>
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e806:	4293      	cmp	r3, r2
 800e808:	d108      	bne.n	800e81c <_Z41__static_initialization_and_destruction_0ii+0x2c>
RingBuffer EspDrv::ringBuf(32);
 800e80a:	2120      	movs	r1, #32
 800e80c:	4805      	ldr	r0, [pc, #20]	; (800e824 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800e80e:	f000 f817 	bl	800e840 <_ZN10RingBufferC1Ej>
 800e812:	4a05      	ldr	r2, [pc, #20]	; (800e828 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 800e814:	4905      	ldr	r1, [pc, #20]	; (800e82c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 800e816:	4803      	ldr	r0, [pc, #12]	; (800e824 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800e818:	f000 ff14 	bl	800f644 <__aeabi_atexit>
EspDrv espDrv;
 800e81c:	bf00      	nop
 800e81e:	3708      	adds	r7, #8
 800e820:	46bd      	mov	sp, r7
 800e822:	bd80      	pop	{r7, pc}
 800e824:	200006b8 	.word	0x200006b8
 800e828:	20000000 	.word	0x20000000
 800e82c:	0800e87f 	.word	0x0800e87f

0800e830 <_GLOBAL__sub_I_ESPTAGS>:
 800e830:	b580      	push	{r7, lr}
 800e832:	af00      	add	r7, sp, #0
 800e834:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e838:	2001      	movs	r0, #1
 800e83a:	f7ff ffd9 	bl	800e7f0 <_Z41__static_initialization_and_destruction_0ii>
 800e83e:	bd80      	pop	{r7, pc}

0800e840 <_ZN10RingBufferC1Ej>:
#include "RingBuffer.h"

// #include <Arduino.h>
#include <string.h>

RingBuffer::RingBuffer(unsigned int size)
 800e840:	b580      	push	{r7, lr}
 800e842:	b082      	sub	sp, #8
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
 800e848:	6039      	str	r1, [r7, #0]
{
	_size = size;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	683a      	ldr	r2, [r7, #0]
 800e84e:	601a      	str	r2, [r3, #0]
	// add one char to terminate the string
	ringBuf = new char[size + 1];
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	3301      	adds	r3, #1
 800e854:	4618      	mov	r0, r3
 800e856:	f000 ff37 	bl	800f6c8 <_Znaj>
 800e85a:	4603      	mov	r3, r0
 800e85c:	461a      	mov	r2, r3
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	605a      	str	r2, [r3, #4]
	ringBufEnd = &ringBuf[size];
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	685a      	ldr	r2, [r3, #4]
 800e866:	683b      	ldr	r3, [r7, #0]
 800e868:	441a      	add	r2, r3
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	609a      	str	r2, [r3, #8]
	init();
 800e86e:	6878      	ldr	r0, [r7, #4]
 800e870:	f000 f810 	bl	800e894 <_ZN10RingBuffer4initEv>
}
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	4618      	mov	r0, r3
 800e878:	3708      	adds	r7, #8
 800e87a:	46bd      	mov	sp, r7
 800e87c:	bd80      	pop	{r7, pc}

0800e87e <_ZN10RingBufferD1Ev>:

RingBuffer::~RingBuffer()
 800e87e:	b480      	push	{r7}
 800e880:	b083      	sub	sp, #12
 800e882:	af00      	add	r7, sp, #0
 800e884:	6078      	str	r0, [r7, #4]
{
}
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	4618      	mov	r0, r3
 800e88a:	370c      	adds	r7, #12
 800e88c:	46bd      	mov	sp, r7
 800e88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e892:	4770      	bx	lr

0800e894 <_ZN10RingBuffer4initEv>:
{
	ringBufP = ringBuf;
}

void RingBuffer::init()
{
 800e894:	b580      	push	{r7, lr}
 800e896:	b082      	sub	sp, #8
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
	ringBufP = ringBuf;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	685a      	ldr	r2, [r3, #4]
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	60da      	str	r2, [r3, #12]
	memset(ringBuf, 0, _size + 1);
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	6858      	ldr	r0, [r3, #4]
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	3301      	adds	r3, #1
 800e8ae:	461a      	mov	r2, r3
 800e8b0:	2100      	movs	r1, #0
 800e8b2:	f003 fc2f 	bl	8012114 <memset>
}
 800e8b6:	bf00      	nop
 800e8b8:	3708      	adds	r7, #8
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	bd80      	pop	{r7, pc}
	...

0800e8c0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800e8c0:	b510      	push	{r4, lr}
  ADC_MultiModeTypeDef multimode = {0};
 800e8c2:	2400      	movs	r4, #0
{
 800e8c4:	b08a      	sub	sp, #40	; 0x28
  ADC_ChannelConfTypeDef sConfig = {0};
 800e8c6:	2218      	movs	r2, #24
 800e8c8:	4621      	mov	r1, r4
 800e8ca:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 800e8cc:	9401      	str	r4, [sp, #4]
 800e8ce:	9402      	str	r4, [sp, #8]
 800e8d0:	9403      	str	r4, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 800e8d2:	f003 fc1f 	bl	8012114 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 800e8d6:	481b      	ldr	r0, [pc, #108]	; (800e944 <MX_ADC1_Init+0x84>)
 800e8d8:	4b1b      	ldr	r3, [pc, #108]	; (800e948 <MX_ADC1_Init+0x88>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800e8da:	6084      	str	r4, [r0, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800e8dc:	e880 0018 	stmia.w	r0, {r3, r4}
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800e8e0:	2304      	movs	r3, #4
 800e8e2:	6143      	str	r3, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
 800e8e4:	2301      	movs	r3, #1
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800e8e6:	60c4      	str	r4, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800e8e8:	6104      	str	r4, [r0, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800e8ea:	7604      	strb	r4, [r0, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800e8ec:	7643      	strb	r3, [r0, #25]
  hadc1.Init.NbrOfConversion = 1;
 800e8ee:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800e8f0:	f880 4020 	strb.w	r4, [r0, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800e8f4:	6284      	str	r4, [r0, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800e8f6:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800e8f8:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800e8fc:	6344      	str	r4, [r0, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800e8fe:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800e902:	f7f9 fe67 	bl	80085d4 <HAL_ADC_Init>
 800e906:	b108      	cbz	r0, 800e90c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800e908:	f000 fc2b 	bl	800f162 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800e90c:	a901      	add	r1, sp, #4
 800e90e:	480d      	ldr	r0, [pc, #52]	; (800e944 <MX_ADC1_Init+0x84>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800e910:	9401      	str	r4, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800e912:	f7fa fdb7 	bl	8009484 <HAL_ADCEx_MultiModeConfigChannel>
 800e916:	b108      	cbz	r0, 800e91c <MX_ADC1_Init+0x5c>
  {
    Error_Handler();
 800e918:	f000 fc23 	bl	800f162 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800e91c:	4b0b      	ldr	r3, [pc, #44]	; (800e94c <MX_ADC1_Init+0x8c>)
 800e91e:	9304      	str	r3, [sp, #16]
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800e920:	227f      	movs	r2, #127	; 0x7f
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800e922:	2306      	movs	r3, #6
 800e924:	9305      	str	r3, [sp, #20]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800e926:	9207      	str	r2, [sp, #28]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800e928:	2300      	movs	r3, #0
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800e92a:	2204      	movs	r2, #4
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800e92c:	a904      	add	r1, sp, #16
 800e92e:	4805      	ldr	r0, [pc, #20]	; (800e944 <MX_ADC1_Init+0x84>)
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800e930:	9306      	str	r3, [sp, #24]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800e932:	9208      	str	r2, [sp, #32]
  sConfig.Offset = 0;
 800e934:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800e936:	f7fa f8e9 	bl	8008b0c <HAL_ADC_ConfigChannel>
 800e93a:	b108      	cbz	r0, 800e940 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 800e93c:	f000 fc11 	bl	800f162 <Error_Handler>
  }

}
 800e940:	b00a      	add	sp, #40	; 0x28
 800e942:	bd10      	pop	{r4, pc}
 800e944:	20000954 	.word	0x20000954
 800e948:	50040000 	.word	0x50040000
 800e94c:	14f00020 	.word	0x14f00020

0800e950 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800e950:	b510      	push	{r4, lr}
 800e952:	4604      	mov	r4, r0
 800e954:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e956:	2214      	movs	r2, #20
 800e958:	2100      	movs	r1, #0
 800e95a:	a803      	add	r0, sp, #12
 800e95c:	f003 fbda 	bl	8012114 <memset>
  if(adcHandle->Instance==ADC1)
 800e960:	6822      	ldr	r2, [r4, #0]
 800e962:	4b12      	ldr	r3, [pc, #72]	; (800e9ac <HAL_ADC_MspInit+0x5c>)
 800e964:	429a      	cmp	r2, r3
 800e966:	d11e      	bne.n	800e9a6 <HAL_ADC_MspInit+0x56>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800e968:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 800e96c:	f5a3 33f8 	sub.w	r3, r3, #126976	; 0x1f000
    PA0     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e970:	a903      	add	r1, sp, #12
    __HAL_RCC_ADC_CLK_ENABLE();
 800e972:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e974:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e978:	64da      	str	r2, [r3, #76]	; 0x4c
 800e97a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e97c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800e980:	9201      	str	r2, [sp, #4]
 800e982:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e984:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e986:	f042 0201 	orr.w	r2, r2, #1
 800e98a:	64da      	str	r2, [r3, #76]	; 0x4c
 800e98c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e98e:	f003 0301 	and.w	r3, r3, #1
 800e992:	9302      	str	r3, [sp, #8]
 800e994:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800e996:	2301      	movs	r3, #1
 800e998:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e99a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800e99e:	230b      	movs	r3, #11
 800e9a0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e9a2:	f7fa fe93 	bl	80096cc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800e9a6:	b008      	add	sp, #32
 800e9a8:	bd10      	pop	{r4, pc}
 800e9aa:	bf00      	nop
 800e9ac:	50040000 	.word	0x50040000

0800e9b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800e9b0:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e9b2:	2214      	movs	r2, #20
{
 800e9b4:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e9b6:	eb0d 0002 	add.w	r0, sp, r2
 800e9ba:	2100      	movs	r1, #0
 800e9bc:	f003 fbaa 	bl	8012114 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800e9c0:	4b21      	ldr	r3, [pc, #132]	; (800ea48 <MX_GPIO_Init+0x98>)
 800e9c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e9c4:	f042 0204 	orr.w	r2, r2, #4
 800e9c8:	64da      	str	r2, [r3, #76]	; 0x4c
 800e9ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e9cc:	f002 0204 	and.w	r2, r2, #4
 800e9d0:	9201      	str	r2, [sp, #4]
 800e9d2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800e9d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e9d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e9da:	64da      	str	r2, [r3, #76]	; 0x4c
 800e9dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e9de:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800e9e2:	9202      	str	r2, [sp, #8]
 800e9e4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e9e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e9e8:	f042 0201 	orr.w	r2, r2, #1
 800e9ec:	64da      	str	r2, [r3, #76]	; 0x4c
 800e9ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e9f0:	f002 0201 	and.w	r2, r2, #1
 800e9f4:	9203      	str	r2, [sp, #12]
 800e9f6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800e9f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e9fa:	f042 0202 	orr.w	r2, r2, #2
 800e9fe:	64da      	str	r2, [r3, #76]	; 0x4c
 800ea00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea02:	f003 0302 	and.w	r3, r3, #2

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800ea06:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ea08:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800ea0a:	2120      	movs	r1, #32
 800ea0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ea10:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800ea12:	f7fa ffd5 	bl	80099c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800ea16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea1a:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = B1_Pin;
 800ea1c:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800ea1e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800ea20:	4b0a      	ldr	r3, [pc, #40]	; (800ea4c <MX_GPIO_Init+0x9c>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800ea22:	480b      	ldr	r0, [pc, #44]	; (800ea50 <MX_GPIO_Init+0xa0>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800ea24:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea26:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800ea28:	f7fa fe50 	bl	80096cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800ea2c:	2320      	movs	r3, #32
 800ea2e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800ea30:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ea32:	2301      	movs	r3, #1
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800ea34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ea38:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea3a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ea3c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800ea3e:	f7fa fe45 	bl	80096cc <HAL_GPIO_Init>

}
 800ea42:	b00a      	add	sp, #40	; 0x28
 800ea44:	bd10      	pop	{r4, pc}
 800ea46:	bf00      	nop
 800ea48:	40021000 	.word	0x40021000
 800ea4c:	10210000 	.word	0x10210000
 800ea50:	48000800 	.word	0x48000800

0800ea54 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800ea54:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 800ea56:	4812      	ldr	r0, [pc, #72]	; (800eaa0 <MX_I2C1_Init+0x4c>)
  hi2c1.Init.Timing = 0x10909CEC;
 800ea58:	4b12      	ldr	r3, [pc, #72]	; (800eaa4 <MX_I2C1_Init+0x50>)
 800ea5a:	4913      	ldr	r1, [pc, #76]	; (800eaa8 <MX_I2C1_Init+0x54>)
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800ea5c:	2201      	movs	r2, #1
  hi2c1.Init.Timing = 0x10909CEC;
 800ea5e:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c1.Init.OwnAddress1 = 0;
 800ea62:	2300      	movs	r3, #0
 800ea64:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800ea66:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800ea68:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800ea6a:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800ea6c:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800ea6e:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800ea70:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800ea72:	f7fb f977 	bl	8009d64 <HAL_I2C_Init>
 800ea76:	b108      	cbz	r0, 800ea7c <MX_I2C1_Init+0x28>
  {
    Error_Handler();
 800ea78:	f000 fb73 	bl	800f162 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800ea7c:	2100      	movs	r1, #0
 800ea7e:	4808      	ldr	r0, [pc, #32]	; (800eaa0 <MX_I2C1_Init+0x4c>)
 800ea80:	f7fb fcca 	bl	800a418 <HAL_I2CEx_ConfigAnalogFilter>
 800ea84:	b108      	cbz	r0, 800ea8a <MX_I2C1_Init+0x36>
  {
    Error_Handler();
 800ea86:	f000 fb6c 	bl	800f162 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800ea8a:	2100      	movs	r1, #0
 800ea8c:	4804      	ldr	r0, [pc, #16]	; (800eaa0 <MX_I2C1_Init+0x4c>)
 800ea8e:	f7fb fd05 	bl	800a49c <HAL_I2CEx_ConfigDigitalFilter>
 800ea92:	b118      	cbz	r0, 800ea9c <MX_I2C1_Init+0x48>
  {
    Error_Handler();
  }

}
 800ea94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800ea98:	f000 bb63 	b.w	800f162 <Error_Handler>
 800ea9c:	bd08      	pop	{r3, pc}
 800ea9e:	bf00      	nop
 800eaa0:	20000a04 	.word	0x20000a04
 800eaa4:	10909cec 	.word	0x10909cec
 800eaa8:	40005400 	.word	0x40005400

0800eaac <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800eaac:	b508      	push	{r3, lr}

  hi2c3.Instance = I2C3;
 800eaae:	4812      	ldr	r0, [pc, #72]	; (800eaf8 <MX_I2C3_Init+0x4c>)
  hi2c3.Init.Timing = 0x10909CEC;
 800eab0:	4b12      	ldr	r3, [pc, #72]	; (800eafc <MX_I2C3_Init+0x50>)
 800eab2:	4913      	ldr	r1, [pc, #76]	; (800eb00 <MX_I2C3_Init+0x54>)
  hi2c3.Init.OwnAddress1 = 0;
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800eab4:	2201      	movs	r2, #1
  hi2c3.Init.Timing = 0x10909CEC;
 800eab6:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c3.Init.OwnAddress1 = 0;
 800eaba:	2300      	movs	r3, #0
 800eabc:	6083      	str	r3, [r0, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800eabe:	60c2      	str	r2, [r0, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800eac0:	6103      	str	r3, [r0, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800eac2:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800eac4:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800eac6:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800eac8:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800eaca:	f7fb f94b 	bl	8009d64 <HAL_I2C_Init>
 800eace:	b108      	cbz	r0, 800ead4 <MX_I2C3_Init+0x28>
  {
    Error_Handler();
 800ead0:	f000 fb47 	bl	800f162 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800ead4:	2100      	movs	r1, #0
 800ead6:	4808      	ldr	r0, [pc, #32]	; (800eaf8 <MX_I2C3_Init+0x4c>)
 800ead8:	f7fb fc9e 	bl	800a418 <HAL_I2CEx_ConfigAnalogFilter>
 800eadc:	b108      	cbz	r0, 800eae2 <MX_I2C3_Init+0x36>
  {
    Error_Handler();
 800eade:	f000 fb40 	bl	800f162 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800eae2:	2100      	movs	r1, #0
 800eae4:	4804      	ldr	r0, [pc, #16]	; (800eaf8 <MX_I2C3_Init+0x4c>)
 800eae6:	f7fb fcd9 	bl	800a49c <HAL_I2CEx_ConfigDigitalFilter>
 800eaea:	b118      	cbz	r0, 800eaf4 <MX_I2C3_Init+0x48>
  {
    Error_Handler();
  }

}
 800eaec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800eaf0:	f000 bb37 	b.w	800f162 <Error_Handler>
 800eaf4:	bd08      	pop	{r3, pc}
 800eaf6:	bf00      	nop
 800eaf8:	200009b8 	.word	0x200009b8
 800eafc:	10909cec 	.word	0x10909cec
 800eb00:	40005c00 	.word	0x40005c00

0800eb04 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800eb04:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eb06:	2214      	movs	r2, #20
{
 800eb08:	b08a      	sub	sp, #40	; 0x28
 800eb0a:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eb0c:	2100      	movs	r1, #0
 800eb0e:	eb0d 0002 	add.w	r0, sp, r2
 800eb12:	f003 faff 	bl	8012114 <memset>
  if(i2cHandle->Instance==I2C1)
 800eb16:	6823      	ldr	r3, [r4, #0]
 800eb18:	4a25      	ldr	r2, [pc, #148]	; (800ebb0 <HAL_I2C_MspInit+0xac>)
 800eb1a:	4293      	cmp	r3, r2
 800eb1c:	d123      	bne.n	800eb66 <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800eb1e:	4c25      	ldr	r4, [pc, #148]	; (800ebb4 <HAL_I2C_MspInit+0xb0>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800eb20:	4825      	ldr	r0, [pc, #148]	; (800ebb8 <HAL_I2C_MspInit+0xb4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800eb22:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800eb24:	f043 0302 	orr.w	r3, r3, #2
 800eb28:	64e3      	str	r3, [r4, #76]	; 0x4c
 800eb2a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800eb2c:	f003 0302 	and.w	r3, r3, #2
 800eb30:	9301      	str	r3, [sp, #4]
 800eb32:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800eb34:	f44f 7340 	mov.w	r3, #768	; 0x300
 800eb38:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800eb3a:	2312      	movs	r3, #18
 800eb3c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800eb3e:	2301      	movs	r3, #1
 800eb40:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eb42:	2303      	movs	r3, #3
 800eb44:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800eb46:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800eb48:	2304      	movs	r3, #4
 800eb4a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800eb4c:	f7fa fdbe 	bl	80096cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800eb50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800eb52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800eb56:	65a3      	str	r3, [r4, #88]	; 0x58
 800eb58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800eb5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800eb5e:	9302      	str	r3, [sp, #8]
 800eb60:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800eb62:	b00a      	add	sp, #40	; 0x28
 800eb64:	bd10      	pop	{r4, pc}
  else if(i2cHandle->Instance==I2C3)
 800eb66:	4a15      	ldr	r2, [pc, #84]	; (800ebbc <HAL_I2C_MspInit+0xb8>)
 800eb68:	4293      	cmp	r3, r2
 800eb6a:	d1fa      	bne.n	800eb62 <HAL_I2C_MspInit+0x5e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800eb6c:	4c11      	ldr	r4, [pc, #68]	; (800ebb4 <HAL_I2C_MspInit+0xb0>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800eb6e:	4814      	ldr	r0, [pc, #80]	; (800ebc0 <HAL_I2C_MspInit+0xbc>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800eb70:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800eb72:	f043 0304 	orr.w	r3, r3, #4
 800eb76:	64e3      	str	r3, [r4, #76]	; 0x4c
 800eb78:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800eb7a:	f003 0304 	and.w	r3, r3, #4
 800eb7e:	9303      	str	r3, [sp, #12]
 800eb80:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800eb82:	2212      	movs	r2, #18
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800eb84:	2303      	movs	r3, #3
 800eb86:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800eb88:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eb8a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800eb8c:	2201      	movs	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800eb8e:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800eb90:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800eb92:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800eb94:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800eb96:	f7fa fd99 	bl	80096cc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800eb9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800eb9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800eba0:	65a3      	str	r3, [r4, #88]	; 0x58
 800eba2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800eba4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eba8:	9304      	str	r3, [sp, #16]
 800ebaa:	9b04      	ldr	r3, [sp, #16]
}
 800ebac:	e7d9      	b.n	800eb62 <HAL_I2C_MspInit+0x5e>
 800ebae:	bf00      	nop
 800ebb0:	40005400 	.word	0x40005400
 800ebb4:	40021000 	.word	0x40021000
 800ebb8:	48000400 	.word	0x48000400
 800ebbc:	40005c00 	.word	0x40005c00
 800ebc0:	48000800 	.word	0x48000800

0800ebc4 <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 800ebc4:	b508      	push	{r3, lr}

  hlptim1.Instance = LPTIM1;
 800ebc6:	480e      	ldr	r0, [pc, #56]	; (800ec00 <MX_LPTIM1_Init+0x3c>)
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_ULPTIM;
 800ebc8:	4b0e      	ldr	r3, [pc, #56]	; (800ec04 <MX_LPTIM1_Init+0x40>)
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800ebca:	f64f 72ff 	movw	r2, #65535	; 0xffff
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_ULPTIM;
 800ebce:	f04f 0e01 	mov.w	lr, #1
 800ebd2:	e880 4008 	stmia.w	r0, {r3, lr}
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800ebd6:	6142      	str	r2, [r0, #20]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 800ebd8:	2300      	movs	r3, #0
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 800ebda:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 800ebde:	6083      	str	r3, [r0, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 800ebe0:	60c3      	str	r3, [r0, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 800ebe2:	6103      	str	r3, [r0, #16]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800ebe4:	6203      	str	r3, [r0, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800ebe6:	6243      	str	r3, [r0, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 800ebe8:	6282      	str	r2, [r0, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 800ebea:	62c3      	str	r3, [r0, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800ebec:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800ebee:	f7fb fc95 	bl	800a51c <HAL_LPTIM_Init>
 800ebf2:	b118      	cbz	r0, 800ebfc <MX_LPTIM1_Init+0x38>
  {
    Error_Handler();
  }

}
 800ebf4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800ebf8:	f000 bab3 	b.w	800f162 <Error_Handler>
 800ebfc:	bd08      	pop	{r3, pc}
 800ebfe:	bf00      	nop
 800ec00:	20000a50 	.word	0x20000a50
 800ec04:	40007c00 	.word	0x40007c00

0800ec08 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 800ec08:	b510      	push	{r4, lr}
 800ec0a:	4604      	mov	r4, r0
 800ec0c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ec0e:	2214      	movs	r2, #20
 800ec10:	2100      	movs	r1, #0
 800ec12:	a803      	add	r0, sp, #12
 800ec14:	f003 fa7e 	bl	8012114 <memset>
  if(lptimHandle->Instance==LPTIM1)
 800ec18:	6822      	ldr	r2, [r4, #0]
 800ec1a:	4b11      	ldr	r3, [pc, #68]	; (800ec60 <HAL_LPTIM_MspInit+0x58>)
 800ec1c:	429a      	cmp	r2, r3
 800ec1e:	d11d      	bne.n	800ec5c <HAL_LPTIM_MspInit+0x54>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800ec20:	f503 33ca 	add.w	r3, r3, #103424	; 0x19400
    GPIO_InitStruct.Pin = GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ec24:	a903      	add	r1, sp, #12
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800ec26:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ec28:	480e      	ldr	r0, [pc, #56]	; (800ec64 <HAL_LPTIM_MspInit+0x5c>)
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800ec2a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800ec2e:	659a      	str	r2, [r3, #88]	; 0x58
 800ec30:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ec32:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800ec36:	9201      	str	r2, [sp, #4]
 800ec38:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ec3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ec3c:	f042 0202 	orr.w	r2, r2, #2
 800ec40:	64da      	str	r2, [r3, #76]	; 0x4c
 800ec42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ec44:	f003 0302 	and.w	r3, r3, #2
 800ec48:	9302      	str	r3, [sp, #8]
 800ec4a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800ec4c:	2320      	movs	r3, #32
 800ec4e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ec50:	2302      	movs	r3, #2
 800ec52:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 800ec54:	2301      	movs	r3, #1
 800ec56:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ec58:	f7fa fd38 	bl	80096cc <HAL_GPIO_Init>

  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 800ec5c:	b008      	add	sp, #32
 800ec5e:	bd10      	pop	{r4, pc}
 800ec60:	40007c00 	.word	0x40007c00
 800ec64:	48000400 	.word	0x48000400

0800ec68 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800ec68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec6c:	b091      	sub	sp, #68	; 0x44
 800ec6e:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800ec70:	f7f9 fc64 	bl	800853c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800ec74:	f000 f9d2 	bl	800f01c <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800ec78:	f7ff fe9a 	bl	800e9b0 <MX_GPIO_Init>
	MX_I2C1_Init();
 800ec7c:	f7ff feea 	bl	800ea54 <MX_I2C1_Init>
	MX_I2C3_Init();
 800ec80:	f7ff ff14 	bl	800eaac <MX_I2C3_Init>
	MX_LPTIM1_Init();
 800ec84:	f7ff ff9e 	bl	800ebc4 <MX_LPTIM1_Init>
	MX_USART2_UART_Init();
 800ec88:	f000 fbce 	bl	800f428 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 800ec8c:	f7ff fe18 	bl	800e8c0 <MX_ADC1_Init>
	MX_TIM3_Init();
 800ec90:	f000 fb4e 	bl	800f330 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */

	Bmp.Begin();
 800ec94:	48cb      	ldr	r0, [pc, #812]	; (800efc4 <main+0x35c>)
 800ec96:	f7fd ff43 	bl	800cb20 <_ZN10SFE_BMP1805BeginEv>
	byte wait = Bmp.StartTemperature();
 800ec9a:	48ca      	ldr	r0, [pc, #808]	; (800efc4 <main+0x35c>)
 800ec9c:	f7fe fab2 	bl	800d204 <_ZN10SFE_BMP18016StartTemperatureEv>
 800eca0:	4603      	mov	r3, r0
 800eca2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	HAL_Delay(wait);
 800eca6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ecaa:	4618      	mov	r0, r3
 800ecac:	f7f9 fc6a 	bl	8008584 <HAL_Delay>
	float temp = 0.0;
 800ecb0:	f04f 0300 	mov.w	r3, #0
 800ecb4:	607b      	str	r3, [r7, #4]
	Bmp.GetTemperature(temp);
 800ecb6:	1d3b      	adds	r3, r7, #4
 800ecb8:	4619      	mov	r1, r3
 800ecba:	48c2      	ldr	r0, [pc, #776]	; (800efc4 <main+0x35c>)
 800ecbc:	f7fe fabc 	bl	800d238 <_ZN10SFE_BMP18014GetTemperatureERf>
	printf("MAIN: BMP180 temp = %f\n", temp);
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	f7f7 ffa2 	bl	8006c0c <__aeabi_f2d>
 800ecc8:	4603      	mov	r3, r0
 800ecca:	460c      	mov	r4, r1
 800eccc:	461a      	mov	r2, r3
 800ecce:	4623      	mov	r3, r4
 800ecd0:	48bd      	ldr	r0, [pc, #756]	; (800efc8 <main+0x360>)
 800ecd2:	f003 fa33 	bl	801213c <printf>

	if (Es2.begin())
 800ecd6:	48bd      	ldr	r0, [pc, #756]	; (800efcc <main+0x364>)
 800ecd8:	f7ff fd36 	bl	800e748 <_ZN16NS_energyShield25beginEv>
 800ecdc:	4603      	mov	r3, r0
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	bf14      	ite	ne
 800ece2:	2301      	movne	r3, #1
 800ece4:	2300      	moveq	r3, #0
 800ece6:	b2db      	uxtb	r3, r3
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d003      	beq.n	800ecf4 <main+0x8c>
	{
		printf("! ES2 ERROR - Initialization Failed !");
 800ecec:	48b8      	ldr	r0, [pc, #736]	; (800efd0 <main+0x368>)
 800ecee:	f003 fa25 	bl	801213c <printf>
		while (1)
 800ecf2:	e7fe      	b.n	800ecf2 <main+0x8a>
			;
	}
	if (Es2.readVMPP() != -1)
 800ecf4:	48b5      	ldr	r0, [pc, #724]	; (800efcc <main+0x364>)
 800ecf6:	f7ff fbfb 	bl	800e4f0 <_ZN16NS_energyShield28readVMPPEv>
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed00:	bf14      	ite	ne
 800ed02:	2301      	movne	r3, #1
 800ed04:	2300      	moveq	r3, #0
 800ed06:	b2db      	uxtb	r3, r3
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d005      	beq.n	800ed18 <main+0xb0>
		Es2.setVMPP(-1, 1); // Disable VMPP regulation to allow charging from any power supply (7V - 23V) and prevent excessive EEPROM writes
 800ed0c:	2201      	movs	r2, #1
 800ed0e:	f04f 31ff 	mov.w	r1, #4294967295
 800ed12:	48ae      	ldr	r0, [pc, #696]	; (800efcc <main+0x364>)
 800ed14:	f7ff fc18 	bl	800e548 <_ZN16NS_energyShield27setVMPPEib>

	DWT_Delay_Init();
 800ed18:	f7fe ff4a 	bl	800dbb0 <DWT_Delay_Init>

	dht.ReadSensor();		// dont step thru this code -- its time sensitive
 800ed1c:	48ad      	ldr	r0, [pc, #692]	; (800efd4 <main+0x36c>)
 800ed1e:	f7fe fe9b 	bl	800da58 <_ZN5DHT1110ReadSensorEv>
	printf("DHT11:: Temp=%f, Humidity=%f\n", dht.GetTemperature(), dht.GetHumidity());
 800ed22:	48ac      	ldr	r0, [pc, #688]	; (800efd4 <main+0x36c>)
 800ed24:	f7fe fedc 	bl	800dae0 <_ZN5DHT1114GetTemperatureEv>
 800ed28:	ee10 3a10 	vmov	r3, s0
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	f7f7 ff6d 	bl	8006c0c <__aeabi_f2d>
 800ed32:	4605      	mov	r5, r0
 800ed34:	460e      	mov	r6, r1
 800ed36:	48a7      	ldr	r0, [pc, #668]	; (800efd4 <main+0x36c>)
 800ed38:	f7fe ff06 	bl	800db48 <_ZN5DHT1111GetHumidityEv>
 800ed3c:	ee10 3a10 	vmov	r3, s0
 800ed40:	4618      	mov	r0, r3
 800ed42:	f7f7 ff63 	bl	8006c0c <__aeabi_f2d>
 800ed46:	4603      	mov	r3, r0
 800ed48:	460c      	mov	r4, r1
 800ed4a:	e88d 0018 	stmia.w	sp, {r3, r4}
 800ed4e:	462a      	mov	r2, r5
 800ed50:	4633      	mov	r3, r6
 800ed52:	48a1      	ldr	r0, [pc, #644]	; (800efd8 <main+0x370>)
 800ed54:	f003 f9f2 	bl	801213c <printf>
		//double pressure = 0.0;
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		// Read values from energyShield2
		int batVal = Es2.batteryVoltage();
 800ed58:	489c      	ldr	r0, [pc, #624]	; (800efcc <main+0x364>)
 800ed5a:	f7ff fc53 	bl	800e604 <_ZN16NS_energyShield214batteryVoltageEv>
 800ed5e:	4603      	mov	r3, r0
 800ed60:	62bb      	str	r3, [r7, #40]	; 0x28
		int iBattVolt = batVal / 1000;
 800ed62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed64:	4a9d      	ldr	r2, [pc, #628]	; (800efdc <main+0x374>)
 800ed66:	fb82 1203 	smull	r1, r2, r2, r3
 800ed6a:	1192      	asrs	r2, r2, #6
 800ed6c:	17db      	asrs	r3, r3, #31
 800ed6e:	1ad3      	subs	r3, r2, r3
 800ed70:	627b      	str	r3, [r7, #36]	; 0x24
		int nBattVolt = batVal % 1000;
 800ed72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed74:	4a99      	ldr	r2, [pc, #612]	; (800efdc <main+0x374>)
 800ed76:	fb82 1203 	smull	r1, r2, r2, r3
 800ed7a:	1191      	asrs	r1, r2, #6
 800ed7c:	17da      	asrs	r2, r3, #31
 800ed7e:	1a8a      	subs	r2, r1, r2
 800ed80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ed84:	fb01 f202 	mul.w	r2, r1, r2
 800ed88:	1a9b      	subs	r3, r3, r2
 800ed8a:	623b      	str	r3, [r7, #32]
		float batteryVoltage = (float) batVal / 1000.0;
 800ed8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed8e:	ee07 3a90 	vmov	s15, r3
 800ed92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ed96:	eddf 6a92 	vldr	s13, [pc, #584]	; 800efe0 <main+0x378>
 800ed9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ed9e:	edc7 7a07 	vstr	s15, [r7, #28]

		float batteryCurrent = (float) Es2.batteryCurrent() / 1000.0;
 800eda2:	488a      	ldr	r0, [pc, #552]	; (800efcc <main+0x364>)
 800eda4:	f7ff fc3e 	bl	800e624 <_ZN16NS_energyShield214batteryCurrentEv>
 800eda8:	4603      	mov	r3, r0
 800edaa:	ee07 3a90 	vmov	s15, r3
 800edae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800edb2:	eddf 6a8b 	vldr	s13, [pc, #556]	; 800efe0 <main+0x378>
 800edb6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800edba:	edc7 7a06 	vstr	s15, [r7, #24]
		uint16_t fullCapacity = Es2.fullChargeCapacity();
 800edbe:	4883      	ldr	r0, [pc, #524]	; (800efcc <main+0x364>)
 800edc0:	f7ff fc67 	bl	800e692 <_ZN16NS_energyShield218fullChargeCapacityEv>
 800edc4:	4603      	mov	r3, r0
 800edc6:	82fb      	strh	r3, [r7, #22]
		uint16_t remainingCapacity = Es2.remainingCapacity();
 800edc8:	4880      	ldr	r0, [pc, #512]	; (800efcc <main+0x364>)
 800edca:	f7ff fc72 	bl	800e6b2 <_ZN16NS_energyShield217remainingCapacityEv>
 800edce:	4603      	mov	r3, r0
 800edd0:	82bb      	strh	r3, [r7, #20]
		uint16_t stateOfCharge = Es2.SOC();
 800edd2:	487e      	ldr	r0, [pc, #504]	; (800efcc <main+0x364>)
 800edd4:	f7ff fc4d 	bl	800e672 <_ZN16NS_energyShield23SOCEv>
 800edd8:	4603      	mov	r3, r0
 800edda:	827b      	strh	r3, [r7, #18]
		float inputVoltage = (float) Es2.inputVoltage(0) / 1000;
 800eddc:	2100      	movs	r1, #0
 800edde:	487b      	ldr	r0, [pc, #492]	; (800efcc <main+0x364>)
 800ede0:	f7ff fc78 	bl	800e6d4 <_ZN16NS_energyShield212inputVoltageEh>
 800ede4:	4603      	mov	r3, r0
 800ede6:	ee07 3a90 	vmov	s15, r3
 800edea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800edee:	eddf 6a7c 	vldr	s13, [pc, #496]	; 800efe0 <main+0x378>
 800edf2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800edf6:	edc7 7a03 	vstr	s15, [r7, #12]
		float temperature = (float) Es2.temperature() / 10;
 800edfa:	4874      	ldr	r0, [pc, #464]	; (800efcc <main+0x364>)
 800edfc:	f7ff fc23 	bl	800e646 <_ZN16NS_energyShield211temperatureEv>
 800ee00:	4603      	mov	r3, r0
 800ee02:	ee07 3a90 	vmov	s15, r3
 800ee06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ee0a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800ee0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ee12:	edc7 7a02 	vstr	s15, [r7, #8]

		// Print Results
		printf("Battery Voltage    = %f V\n", batteryVoltage);
 800ee16:	69f8      	ldr	r0, [r7, #28]
 800ee18:	f7f7 fef8 	bl	8006c0c <__aeabi_f2d>
 800ee1c:	4603      	mov	r3, r0
 800ee1e:	460c      	mov	r4, r1
 800ee20:	461a      	mov	r2, r3
 800ee22:	4623      	mov	r3, r4
 800ee24:	486f      	ldr	r0, [pc, #444]	; (800efe4 <main+0x37c>)
 800ee26:	f003 f989 	bl	801213c <printf>
		printf("Battery Voltage    = %d.%03d V\n", iBattVolt, nBattVolt);
 800ee2a:	6a3a      	ldr	r2, [r7, #32]
 800ee2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ee2e:	486e      	ldr	r0, [pc, #440]	; (800efe8 <main+0x380>)
 800ee30:	f003 f984 	bl	801213c <printf>
		printf("Battery Current    = %f V\n", batteryCurrent);
 800ee34:	69b8      	ldr	r0, [r7, #24]
 800ee36:	f7f7 fee9 	bl	8006c0c <__aeabi_f2d>
 800ee3a:	4603      	mov	r3, r0
 800ee3c:	460c      	mov	r4, r1
 800ee3e:	461a      	mov	r2, r3
 800ee40:	4623      	mov	r3, r4
 800ee42:	486a      	ldr	r0, [pc, #424]	; (800efec <main+0x384>)
 800ee44:	f003 f97a 	bl	801213c <printf>
		printf("Full Capacity      = %d mAh\n", fullCapacity);
 800ee48:	8afb      	ldrh	r3, [r7, #22]
 800ee4a:	4619      	mov	r1, r3
 800ee4c:	4868      	ldr	r0, [pc, #416]	; (800eff0 <main+0x388>)
 800ee4e:	f003 f975 	bl	801213c <printf>
		printf("Remaining Capacity = %d mAh\n", remainingCapacity);
 800ee52:	8abb      	ldrh	r3, [r7, #20]
 800ee54:	4619      	mov	r1, r3
 800ee56:	4867      	ldr	r0, [pc, #412]	; (800eff4 <main+0x38c>)
 800ee58:	f003 f970 	bl	801213c <printf>
		printf("State of Charge    = %d %% \n", stateOfCharge);
 800ee5c:	8a7b      	ldrh	r3, [r7, #18]
 800ee5e:	4619      	mov	r1, r3
 800ee60:	4865      	ldr	r0, [pc, #404]	; (800eff8 <main+0x390>)
 800ee62:	f003 f96b 	bl	801213c <printf>
		printf("Input Voltage      = %f V\n", inputVoltage);
 800ee66:	68f8      	ldr	r0, [r7, #12]
 800ee68:	f7f7 fed0 	bl	8006c0c <__aeabi_f2d>
 800ee6c:	4603      	mov	r3, r0
 800ee6e:	460c      	mov	r4, r1
 800ee70:	461a      	mov	r2, r3
 800ee72:	4623      	mov	r3, r4
 800ee74:	4861      	ldr	r0, [pc, #388]	; (800effc <main+0x394>)
 800ee76:	f003 f961 	bl	801213c <printf>
		printf("Batt. Temp         = %f F\n", (temperature * 9.0 / 5.0) + 32.0);
 800ee7a:	68b8      	ldr	r0, [r7, #8]
 800ee7c:	f7f7 fec6 	bl	8006c0c <__aeabi_f2d>
 800ee80:	f04f 0200 	mov.w	r2, #0
 800ee84:	4b5e      	ldr	r3, [pc, #376]	; (800f000 <main+0x398>)
 800ee86:	f7f7 ff15 	bl	8006cb4 <__aeabi_dmul>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	460c      	mov	r4, r1
 800ee8e:	4618      	mov	r0, r3
 800ee90:	4621      	mov	r1, r4
 800ee92:	f04f 0200 	mov.w	r2, #0
 800ee96:	4b5b      	ldr	r3, [pc, #364]	; (800f004 <main+0x39c>)
 800ee98:	f7f8 f836 	bl	8006f08 <__aeabi_ddiv>
 800ee9c:	4603      	mov	r3, r0
 800ee9e:	460c      	mov	r4, r1
 800eea0:	4618      	mov	r0, r3
 800eea2:	4621      	mov	r1, r4
 800eea4:	f04f 0200 	mov.w	r2, #0
 800eea8:	4b57      	ldr	r3, [pc, #348]	; (800f008 <main+0x3a0>)
 800eeaa:	f7f7 fd51 	bl	8006950 <__adddf3>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	460c      	mov	r4, r1
 800eeb2:	461a      	mov	r2, r3
 800eeb4:	4623      	mov	r3, r4
 800eeb6:	4855      	ldr	r0, [pc, #340]	; (800f00c <main+0x3a4>)
 800eeb8:	f003 f940 	bl	801213c <printf>

		// check pressure from BMP180
		wait = Bmp.StartTemperature();
 800eebc:	4841      	ldr	r0, [pc, #260]	; (800efc4 <main+0x35c>)
 800eebe:	f7fe f9a1 	bl	800d204 <_ZN10SFE_BMP18016StartTemperatureEv>
 800eec2:	4603      	mov	r3, r0
 800eec4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		HAL_Delay(wait);
 800eec8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eecc:	4618      	mov	r0, r3
 800eece:	f7f9 fb59 	bl	8008584 <HAL_Delay>
		temp = 0.0;
 800eed2:	f04f 0300 	mov.w	r3, #0
 800eed6:	607b      	str	r3, [r7, #4]
		Bmp.GetTemperature(temp);
 800eed8:	1d3b      	adds	r3, r7, #4
 800eeda:	4619      	mov	r1, r3
 800eedc:	4839      	ldr	r0, [pc, #228]	; (800efc4 <main+0x35c>)
 800eede:	f7fe f9ab 	bl	800d238 <_ZN10SFE_BMP18014GetTemperatureERf>
		printf("BMP180 Temp = %f C, %f F\n", temp, ((temp * 9.0) / 5) + 32);
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	4618      	mov	r0, r3
 800eee6:	f7f7 fe91 	bl	8006c0c <__aeabi_f2d>
 800eeea:	4605      	mov	r5, r0
 800eeec:	460e      	mov	r6, r1
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	4618      	mov	r0, r3
 800eef2:	f7f7 fe8b 	bl	8006c0c <__aeabi_f2d>
 800eef6:	f04f 0200 	mov.w	r2, #0
 800eefa:	4b41      	ldr	r3, [pc, #260]	; (800f000 <main+0x398>)
 800eefc:	f7f7 feda 	bl	8006cb4 <__aeabi_dmul>
 800ef00:	4603      	mov	r3, r0
 800ef02:	460c      	mov	r4, r1
 800ef04:	4618      	mov	r0, r3
 800ef06:	4621      	mov	r1, r4
 800ef08:	f04f 0200 	mov.w	r2, #0
 800ef0c:	4b3d      	ldr	r3, [pc, #244]	; (800f004 <main+0x39c>)
 800ef0e:	f7f7 fffb 	bl	8006f08 <__aeabi_ddiv>
 800ef12:	4603      	mov	r3, r0
 800ef14:	460c      	mov	r4, r1
 800ef16:	4618      	mov	r0, r3
 800ef18:	4621      	mov	r1, r4
 800ef1a:	f04f 0200 	mov.w	r2, #0
 800ef1e:	4b3a      	ldr	r3, [pc, #232]	; (800f008 <main+0x3a0>)
 800ef20:	f7f7 fd16 	bl	8006950 <__adddf3>
 800ef24:	4603      	mov	r3, r0
 800ef26:	460c      	mov	r4, r1
 800ef28:	e88d 0018 	stmia.w	sp, {r3, r4}
 800ef2c:	462a      	mov	r2, r5
 800ef2e:	4633      	mov	r3, r6
 800ef30:	4837      	ldr	r0, [pc, #220]	; (800f010 <main+0x3a8>)
 800ef32:	f003 f903 	bl	801213c <printf>
		wait = Bmp.StartPressure(1);
 800ef36:	2101      	movs	r1, #1
 800ef38:	4822      	ldr	r0, [pc, #136]	; (800efc4 <main+0x35c>)
 800ef3a:	f7fe f9fb 	bl	800d334 <_ZN10SFE_BMP18013StartPressureEi>
 800ef3e:	4603      	mov	r3, r0
 800ef40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		HAL_Delay(wait);
 800ef44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ef48:	4618      	mov	r0, r3
 800ef4a:	f7f9 fb1b 	bl	8008584 <HAL_Delay>
		float pressure;
		Bmp.GetPressure(pressure, temp);
 800ef4e:	edd7 7a01 	vldr	s15, [r7, #4]
 800ef52:	463b      	mov	r3, r7
 800ef54:	eeb0 0a67 	vmov.f32	s0, s15
 800ef58:	4619      	mov	r1, r3
 800ef5a:	481a      	ldr	r0, [pc, #104]	; (800efc4 <main+0x35c>)
 800ef5c:	f7fe fa4c 	bl	800d3f8 <_ZN10SFE_BMP18011GetPressureERff>

		// Read time and date from energyShield and store locally
		// Local values will not update until readClock is called again
		Es2.readClock();
 800ef60:	481a      	ldr	r0, [pc, #104]	; (800efcc <main+0x364>)
 800ef62:	f7ff fa26 	bl	800e3b2 <_ZN16NS_energyShield29readClockEv>

		// Print time and date from locally stored values
		printf("\n\tTime:: %d:%d:%d \t Date:: %d-%d-%d\n", Es2.hour(),
 800ef66:	4819      	ldr	r0, [pc, #100]	; (800efcc <main+0x364>)
 800ef68:	f7ff fa6d 	bl	800e446 <_ZN16NS_energyShield24hourEv>
 800ef6c:	4603      	mov	r3, r0
 800ef6e:	461e      	mov	r6, r3
				Es2.minute(), Es2.second(), Es2.month(), Es2.dayOfMonth(),
 800ef70:	4816      	ldr	r0, [pc, #88]	; (800efcc <main+0x364>)
 800ef72:	f7ff fa5c 	bl	800e42e <_ZN16NS_energyShield26minuteEv>
 800ef76:	4603      	mov	r3, r0
		printf("\n\tTime:: %d:%d:%d \t Date:: %d-%d-%d\n", Es2.hour(),
 800ef78:	4698      	mov	r8, r3
				Es2.minute(), Es2.second(), Es2.month(), Es2.dayOfMonth(),
 800ef7a:	4814      	ldr	r0, [pc, #80]	; (800efcc <main+0x364>)
 800ef7c:	f7ff fa4b 	bl	800e416 <_ZN16NS_energyShield26secondEv>
 800ef80:	4603      	mov	r3, r0
		printf("\n\tTime:: %d:%d:%d \t Date:: %d-%d-%d\n", Es2.hour(),
 800ef82:	4699      	mov	r9, r3
				Es2.minute(), Es2.second(), Es2.month(), Es2.dayOfMonth(),
 800ef84:	4811      	ldr	r0, [pc, #68]	; (800efcc <main+0x364>)
 800ef86:	f7ff fa76 	bl	800e476 <_ZN16NS_energyShield25monthEv>
 800ef8a:	4603      	mov	r3, r0
		printf("\n\tTime:: %d:%d:%d \t Date:: %d-%d-%d\n", Es2.hour(),
 800ef8c:	461c      	mov	r4, r3
				Es2.minute(), Es2.second(), Es2.month(), Es2.dayOfMonth(),
 800ef8e:	480f      	ldr	r0, [pc, #60]	; (800efcc <main+0x364>)
 800ef90:	f7ff fa65 	bl	800e45e <_ZN16NS_energyShield210dayOfMonthEv>
 800ef94:	4603      	mov	r3, r0
		printf("\n\tTime:: %d:%d:%d \t Date:: %d-%d-%d\n", Es2.hour(),
 800ef96:	461d      	mov	r5, r3
				Es2.year());
 800ef98:	480c      	ldr	r0, [pc, #48]	; (800efcc <main+0x364>)
 800ef9a:	f7ff fa78 	bl	800e48e <_ZN16NS_energyShield24yearEv>
 800ef9e:	4603      	mov	r3, r0
 800efa0:	9302      	str	r3, [sp, #8]
 800efa2:	9501      	str	r5, [sp, #4]
 800efa4:	9400      	str	r4, [sp, #0]
 800efa6:	464b      	mov	r3, r9
 800efa8:	4642      	mov	r2, r8
 800efaa:	4631      	mov	r1, r6
 800efac:	4819      	ldr	r0, [pc, #100]	; (800f014 <main+0x3ac>)
 800efae:	f003 f8c5 	bl	801213c <printf>

		// Print carriage return to start new line
		printf("\n\n\n");
 800efb2:	4819      	ldr	r0, [pc, #100]	; (800f018 <main+0x3b0>)
 800efb4:	f003 f982 	bl	80122bc <puts>

		// Wait between reads
		HAL_Delay(2000);
 800efb8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800efbc:	f7f9 fae2 	bl	8008584 <HAL_Delay>

	}
 800efc0:	e6ca      	b.n	800ed58 <main+0xf0>
 800efc2:	bf00      	nop
 800efc4:	20000758 	.word	0x20000758
 800efc8:	08016b70 	.word	0x08016b70
 800efcc:	20000748 	.word	0x20000748
 800efd0:	08016b88 	.word	0x08016b88
 800efd4:	200007ac 	.word	0x200007ac
 800efd8:	08016bb0 	.word	0x08016bb0
 800efdc:	10624dd3 	.word	0x10624dd3
 800efe0:	447a0000 	.word	0x447a0000
 800efe4:	08016bd0 	.word	0x08016bd0
 800efe8:	08016bec 	.word	0x08016bec
 800efec:	08016c0c 	.word	0x08016c0c
 800eff0:	08016c28 	.word	0x08016c28
 800eff4:	08016c48 	.word	0x08016c48
 800eff8:	08016c68 	.word	0x08016c68
 800effc:	08016c88 	.word	0x08016c88
 800f000:	40220000 	.word	0x40220000
 800f004:	40140000 	.word	0x40140000
 800f008:	40400000 	.word	0x40400000
 800f00c:	08016ca4 	.word	0x08016ca4
 800f010:	08016cc0 	.word	0x08016cc0
 800f014:	08016cdc 	.word	0x08016cdc
 800f018:	08016d04 	.word	0x08016d04

0800f01c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b0b8      	sub	sp, #224	; 0xe0
 800f020:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800f022:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800f026:	2244      	movs	r2, #68	; 0x44
 800f028:	2100      	movs	r1, #0
 800f02a:	4618      	mov	r0, r3
 800f02c:	f003 f872 	bl	8012114 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800f030:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800f034:	2200      	movs	r2, #0
 800f036:	601a      	str	r2, [r3, #0]
 800f038:	605a      	str	r2, [r3, #4]
 800f03a:	609a      	str	r2, [r3, #8]
 800f03c:	60da      	str	r2, [r3, #12]
 800f03e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800f040:	463b      	mov	r3, r7
 800f042:	2288      	movs	r2, #136	; 0x88
 800f044:	2100      	movs	r1, #0
 800f046:	4618      	mov	r0, r3
 800f048:	f003 f864 	bl	8012114 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800f04c:	2302      	movs	r3, #2
 800f04e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800f052:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f056:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800f05a:	2310      	movs	r3, #16
 800f05c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800f060:	2302      	movs	r3, #2
 800f062:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800f066:	2302      	movs	r3, #2
 800f068:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800f06c:	2301      	movs	r3, #1
 800f06e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800f072:	230a      	movs	r3, #10
 800f074:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800f078:	2307      	movs	r3, #7
 800f07a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800f07e:	2302      	movs	r3, #2
 800f080:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800f084:	2302      	movs	r3, #2
 800f086:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800f08a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800f08e:	4618      	mov	r0, r3
 800f090:	f7fb fc16 	bl	800a8c0 <HAL_RCC_OscConfig>
 800f094:	4603      	mov	r3, r0
 800f096:	2b00      	cmp	r3, #0
 800f098:	bf14      	ite	ne
 800f09a:	2301      	movne	r3, #1
 800f09c:	2300      	moveq	r3, #0
 800f09e:	b2db      	uxtb	r3, r3
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d001      	beq.n	800f0a8 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 800f0a4:	f000 f85d 	bl	800f162 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800f0a8:	230f      	movs	r3, #15
 800f0aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800f0ae:	2303      	movs	r3, #3
 800f0b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800f0c6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800f0ca:	2104      	movs	r1, #4
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	f7fb fec1 	bl	800ae54 <HAL_RCC_ClockConfig>
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	bf14      	ite	ne
 800f0d8:	2301      	movne	r3, #1
 800f0da:	2300      	moveq	r3, #0
 800f0dc:	b2db      	uxtb	r3, r3
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d001      	beq.n	800f0e6 <_Z18SystemClock_Configv+0xca>
  {
    Error_Handler();
 800f0e2:	f000 f83e 	bl	800f162 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPTIM1
 800f0e6:	f244 3342 	movw	r3, #17218	; 0x4342
 800f0ea:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_HSI;
 800f0f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f0fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800f0fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f102:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800f104:	2302      	movs	r3, #2
 800f106:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800f108:	2301      	movs	r3, #1
 800f10a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800f10c:	2308      	movs	r3, #8
 800f10e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800f110:	2307      	movs	r3, #7
 800f112:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800f114:	2302      	movs	r3, #2
 800f116:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800f118:	2302      	movs	r3, #2
 800f11a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800f11c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f120:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800f122:	463b      	mov	r3, r7
 800f124:	4618      	mov	r0, r3
 800f126:	f7fc f949 	bl	800b3bc <HAL_RCCEx_PeriphCLKConfig>
 800f12a:	4603      	mov	r3, r0
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	bf14      	ite	ne
 800f130:	2301      	movne	r3, #1
 800f132:	2300      	moveq	r3, #0
 800f134:	b2db      	uxtb	r3, r3
 800f136:	2b00      	cmp	r3, #0
 800f138:	d001      	beq.n	800f13e <_Z18SystemClock_Configv+0x122>
  {
    Error_Handler();
 800f13a:	f000 f812 	bl	800f162 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800f13e:	f44f 7000 	mov.w	r0, #512	; 0x200
 800f142:	f7fb fae3 	bl	800a70c <HAL_PWREx_ControlVoltageScaling>
 800f146:	4603      	mov	r3, r0
 800f148:	2b00      	cmp	r3, #0
 800f14a:	bf14      	ite	ne
 800f14c:	2301      	movne	r3, #1
 800f14e:	2300      	moveq	r3, #0
 800f150:	b2db      	uxtb	r3, r3
 800f152:	2b00      	cmp	r3, #0
 800f154:	d001      	beq.n	800f15a <_Z18SystemClock_Configv+0x13e>
  {
    Error_Handler();
 800f156:	f000 f804 	bl	800f162 <Error_Handler>
  }
}
 800f15a:	bf00      	nop
 800f15c:	37e0      	adds	r7, #224	; 0xe0
 800f15e:	46bd      	mov	sp, r7
 800f160:	bd80      	pop	{r7, pc}

0800f162 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800f162:	b480      	push	{r7}
 800f164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800f166:	bf00      	nop
 800f168:	46bd      	mov	sp, r7
 800f16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16e:	4770      	bx	lr

0800f170 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(char *file, uint32_t line)
{
 800f170:	b480      	push	{r7}
 800f172:	b083      	sub	sp, #12
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
 800f178:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800f17a:	bf00      	nop
 800f17c:	370c      	adds	r7, #12
 800f17e:	46bd      	mov	sp, r7
 800f180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f184:	4770      	bx	lr
	...

0800f188 <_Z41__static_initialization_and_destruction_0ii>:
 800f188:	b580      	push	{r7, lr}
 800f18a:	b082      	sub	sp, #8
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
 800f190:	6039      	str	r1, [r7, #0]
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	2b01      	cmp	r3, #1
 800f196:	d112      	bne.n	800f1be <_Z41__static_initialization_and_destruction_0ii+0x36>
 800f198:	683b      	ldr	r3, [r7, #0]
 800f19a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f19e:	4293      	cmp	r3, r2
 800f1a0:	d10d      	bne.n	800f1be <_Z41__static_initialization_and_destruction_0ii+0x36>
NS_energyShield2 Es2(&hi2c3);		// use 3rd I2C
 800f1a2:	4909      	ldr	r1, [pc, #36]	; (800f1c8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800f1a4:	4809      	ldr	r0, [pc, #36]	; (800f1cc <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800f1a6:	f7ff f8f1 	bl	800e38c <_ZN16NS_energyShield2C1EP19__I2C_HandleTypeDef>
SFE_BMP180 Bmp(&hi2c3);
 800f1aa:	4907      	ldr	r1, [pc, #28]	; (800f1c8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800f1ac:	4808      	ldr	r0, [pc, #32]	; (800f1d0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800f1ae:	f7fd fc85 	bl	800cabc <_ZN10SFE_BMP180C1EP19__I2C_HandleTypeDef>
DHT11 dht(GPIOA, GPIO_PIN_1);
 800f1b2:	2202      	movs	r2, #2
 800f1b4:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800f1b8:	4806      	ldr	r0, [pc, #24]	; (800f1d4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800f1ba:	f7fe fb41 	bl	800d840 <_ZN5DHT11C1EP12GPIO_TypeDefm>
}
 800f1be:	bf00      	nop
 800f1c0:	3708      	adds	r7, #8
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	bd80      	pop	{r7, pc}
 800f1c6:	bf00      	nop
 800f1c8:	200009b8 	.word	0x200009b8
 800f1cc:	20000748 	.word	0x20000748
 800f1d0:	20000758 	.word	0x20000758
 800f1d4:	200007ac 	.word	0x200007ac

0800f1d8 <_GLOBAL__sub_I_Es2>:
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	af00      	add	r7, sp, #0
 800f1dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f1e0:	2001      	movs	r0, #1
 800f1e2:	f7ff ffd1 	bl	800f188 <_Z41__static_initialization_and_destruction_0ii>
 800f1e6:	bd80      	pop	{r7, pc}

0800f1e8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f1e8:	4b0a      	ldr	r3, [pc, #40]	; (800f214 <HAL_MspInit+0x2c>)
 800f1ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800f1ec:	f042 0201 	orr.w	r2, r2, #1
 800f1f0:	661a      	str	r2, [r3, #96]	; 0x60
 800f1f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 800f1f4:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f1f6:	f002 0201 	and.w	r2, r2, #1
 800f1fa:	9200      	str	r2, [sp, #0]
 800f1fc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800f1fe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f200:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800f204:	659a      	str	r2, [r3, #88]	; 0x58
 800f206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f20c:	9301      	str	r3, [sp, #4]
 800f20e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800f210:	b002      	add	sp, #8
 800f212:	4770      	bx	lr
 800f214:	40021000 	.word	0x40021000

0800f218 <NMI_Handler>:
 800f218:	4770      	bx	lr

0800f21a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800f21a:	e7fe      	b.n	800f21a <HardFault_Handler>

0800f21c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800f21c:	e7fe      	b.n	800f21c <MemManage_Handler>

0800f21e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800f21e:	e7fe      	b.n	800f21e <BusFault_Handler>

0800f220 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800f220:	e7fe      	b.n	800f220 <UsageFault_Handler>

0800f222 <SVC_Handler>:
 800f222:	4770      	bx	lr

0800f224 <DebugMon_Handler>:
 800f224:	4770      	bx	lr

0800f226 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800f226:	4770      	bx	lr

0800f228 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800f228:	f7f9 b99e 	b.w	8008568 <HAL_IncTick>

0800f22c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800f22c:	2001      	movs	r0, #1
 800f22e:	4770      	bx	lr

0800f230 <_kill>:

int _kill(int pid, int sig)
{
 800f230:	b508      	push	{r3, lr}
	errno = EINVAL;
 800f232:	f002 fa9d 	bl	8011770 <__errno>
 800f236:	2316      	movs	r3, #22
 800f238:	6003      	str	r3, [r0, #0]
	return -1;
}
 800f23a:	f04f 30ff 	mov.w	r0, #4294967295
 800f23e:	bd08      	pop	{r3, pc}

0800f240 <_exit>:

void _exit (int status)
{
 800f240:	b508      	push	{r3, lr}
	errno = EINVAL;
 800f242:	f002 fa95 	bl	8011770 <__errno>
 800f246:	2316      	movs	r3, #22
 800f248:	6003      	str	r3, [r0, #0]
 800f24a:	e7fe      	b.n	800f24a <_exit+0xa>

0800f24c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800f24c:	b570      	push	{r4, r5, r6, lr}
 800f24e:	460e      	mov	r6, r1
 800f250:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f252:	460c      	mov	r4, r1
 800f254:	1ba3      	subs	r3, r4, r6
 800f256:	429d      	cmp	r5, r3
 800f258:	dc01      	bgt.n	800f25e <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800f25a:	4628      	mov	r0, r5
 800f25c:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800f25e:	f3af 8000 	nop.w
 800f262:	f804 0b01 	strb.w	r0, [r4], #1
 800f266:	e7f5      	b.n	800f254 <_read+0x8>

0800f268 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800f268:	b510      	push	{r4, lr}
//	{
//		__io_putchar(*ptr++);
//	}


	for(int i = 0; i < len; i++)
 800f26a:	2300      	movs	r3, #0
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800f26c:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
 800f270:	4293      	cmp	r3, r2
 800f272:	db01      	blt.n	800f278 <_write+0x10>
		ITM_SendChar((*ptr++));

	return len;
}
 800f274:	4610      	mov	r0, r2
 800f276:	bd10      	pop	{r4, pc}
 800f278:	f8d4 0e80 	ldr.w	r0, [r4, #3712]	; 0xe80
 800f27c:	07c0      	lsls	r0, r0, #31
 800f27e:	d503      	bpl.n	800f288 <_write+0x20>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800f280:	f8d4 0e00 	ldr.w	r0, [r4, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800f284:	07c0      	lsls	r0, r0, #31
 800f286:	d402      	bmi.n	800f28e <_write+0x26>
	for(int i = 0; i < len; i++)
 800f288:	3301      	adds	r3, #1
 800f28a:	e7f1      	b.n	800f270 <_write+0x8>
  __ASM volatile ("nop");
 800f28c:	bf00      	nop
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800f28e:	6820      	ldr	r0, [r4, #0]
 800f290:	2800      	cmp	r0, #0
 800f292:	d0fb      	beq.n	800f28c <_write+0x24>
		ITM_SendChar((*ptr++));
 800f294:	5cc8      	ldrb	r0, [r1, r3]
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800f296:	7020      	strb	r0, [r4, #0]
 800f298:	e7f6      	b.n	800f288 <_write+0x20>
	...

0800f29c <_sbrk>:

caddr_t _sbrk(int incr)
{
 800f29c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800f29e:	4b0a      	ldr	r3, [pc, #40]	; (800f2c8 <_sbrk+0x2c>)
 800f2a0:	6819      	ldr	r1, [r3, #0]
{
 800f2a2:	4602      	mov	r2, r0
	if (heap_end == 0)
 800f2a4:	b909      	cbnz	r1, 800f2aa <_sbrk+0xe>
		heap_end = &end;
 800f2a6:	4909      	ldr	r1, [pc, #36]	; (800f2cc <_sbrk+0x30>)
 800f2a8:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800f2aa:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800f2ac:	4669      	mov	r1, sp
 800f2ae:	4402      	add	r2, r0
 800f2b0:	428a      	cmp	r2, r1
 800f2b2:	d906      	bls.n	800f2c2 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800f2b4:	f002 fa5c 	bl	8011770 <__errno>
 800f2b8:	230c      	movs	r3, #12
 800f2ba:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800f2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800f2c0:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800f2c2:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 800f2c4:	bd08      	pop	{r3, pc}
 800f2c6:	bf00      	nop
 800f2c8:	200007ec 	.word	0x200007ec
 800f2cc:	20000b50 	.word	0x20000b50

0800f2d0 <_close>:

int _close(int file)
{
	return -1;
}
 800f2d0:	f04f 30ff 	mov.w	r0, #4294967295
 800f2d4:	4770      	bx	lr

0800f2d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800f2d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f2da:	604b      	str	r3, [r1, #4]
	return 0;
}
 800f2dc:	2000      	movs	r0, #0
 800f2de:	4770      	bx	lr

0800f2e0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800f2e0:	2001      	movs	r0, #1
 800f2e2:	4770      	bx	lr

0800f2e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800f2e4:	2000      	movs	r0, #0
 800f2e6:	4770      	bx	lr

0800f2e8 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800f2e8:	490f      	ldr	r1, [pc, #60]	; (800f328 <SystemInit+0x40>)
 800f2ea:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800f2ee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f2f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800f2f6:	4b0d      	ldr	r3, [pc, #52]	; (800f32c <SystemInit+0x44>)
 800f2f8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800f2fa:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 800f2fc:	f042 0201 	orr.w	r2, r2, #1
 800f300:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 800f302:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800f304:	681a      	ldr	r2, [r3, #0]
 800f306:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800f30a:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800f30e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800f310:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f314:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800f316:	681a      	ldr	r2, [r3, #0]
 800f318:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f31c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800f31e:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800f320:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f324:	608b      	str	r3, [r1, #8]
 800f326:	4770      	bx	lr
 800f328:	e000ed00 	.word	0xe000ed00
 800f32c:	40021000 	.word	0x40021000

0800f330 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800f330:	b510      	push	{r4, lr}
 800f332:	b08c      	sub	sp, #48	; 0x30
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f334:	2400      	movs	r4, #0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800f336:	2214      	movs	r2, #20
 800f338:	2100      	movs	r1, #0
 800f33a:	a807      	add	r0, sp, #28
 800f33c:	f002 feea 	bl	8012114 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 800f340:	2210      	movs	r2, #16
 800f342:	4621      	mov	r1, r4
 800f344:	a803      	add	r0, sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f346:	9400      	str	r4, [sp, #0]
 800f348:	9401      	str	r4, [sp, #4]
 800f34a:	9402      	str	r4, [sp, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800f34c:	f002 fee2 	bl	8012114 <memset>

  htim3.Instance = TIM3;
 800f350:	481b      	ldr	r0, [pc, #108]	; (800f3c0 <MX_TIM3_Init+0x90>)
 800f352:	4b1c      	ldr	r3, [pc, #112]	; (800f3c4 <MX_TIM3_Init+0x94>)
  htim3.Init.Prescaler = 0;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f354:	6084      	str	r4, [r0, #8]
  htim3.Init.Prescaler = 0;
 800f356:	e880 0018 	stmia.w	r0, {r3, r4}
  htim3.Init.Period = 0;
 800f35a:	60c4      	str	r4, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f35c:	6104      	str	r4, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f35e:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800f360:	f7fc fb5a 	bl	800ba18 <HAL_TIM_Base_Init>
 800f364:	b108      	cbz	r0, 800f36a <MX_TIM3_Init+0x3a>
  {
    Error_Handler();
 800f366:	f7ff fefc 	bl	800f162 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800f36a:	4815      	ldr	r0, [pc, #84]	; (800f3c0 <MX_TIM3_Init+0x90>)
 800f36c:	f7fc fbc8 	bl	800bb00 <HAL_TIM_IC_Init>
 800f370:	b108      	cbz	r0, 800f376 <MX_TIM3_Init+0x46>
  {
    Error_Handler();
 800f372:	f7ff fef6 	bl	800f162 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 800f376:	2307      	movs	r3, #7
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800f378:	2400      	movs	r4, #0
  if (HAL_TIM_SlaveConfigSynchronization(&htim3, &sSlaveConfig) != HAL_OK)
 800f37a:	a907      	add	r1, sp, #28
 800f37c:	4810      	ldr	r0, [pc, #64]	; (800f3c0 <MX_TIM3_Init+0x90>)
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 800f37e:	9307      	str	r3, [sp, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800f380:	9408      	str	r4, [sp, #32]
  if (HAL_TIM_SlaveConfigSynchronization(&htim3, &sSlaveConfig) != HAL_OK)
 800f382:	f7fc ff1b 	bl	800c1bc <HAL_TIM_SlaveConfigSynchronization>
 800f386:	b108      	cbz	r0, 800f38c <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 800f388:	f7ff feeb 	bl	800f162 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800f38c:	4669      	mov	r1, sp
 800f38e:	480c      	ldr	r0, [pc, #48]	; (800f3c0 <MX_TIM3_Init+0x90>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f390:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f392:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800f394:	f7fc ff6e 	bl	800c274 <HAL_TIMEx_MasterConfigSynchronization>
 800f398:	b108      	cbz	r0, 800f39e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800f39a:	f7ff fee2 	bl	800f162 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800f39e:	2201      	movs	r2, #1
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800f3a0:	2300      	movs	r3, #0
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800f3a2:	9204      	str	r2, [sp, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800f3a4:	a903      	add	r1, sp, #12
 800f3a6:	2208      	movs	r2, #8
 800f3a8:	4805      	ldr	r0, [pc, #20]	; (800f3c0 <MX_TIM3_Init+0x90>)
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800f3aa:	9303      	str	r3, [sp, #12]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800f3ac:	9305      	str	r3, [sp, #20]
  sConfigIC.ICFilter = 0;
 800f3ae:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800f3b0:	f7fc fc50 	bl	800bc54 <HAL_TIM_IC_ConfigChannel>
 800f3b4:	b108      	cbz	r0, 800f3ba <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800f3b6:	f7ff fed4 	bl	800f162 <Error_Handler>
  }

}
 800f3ba:	b00c      	add	sp, #48	; 0x30
 800f3bc:	bd10      	pop	{r4, pc}
 800f3be:	bf00      	nop
 800f3c0:	20000a88 	.word	0x20000a88
 800f3c4:	40000400 	.word	0x40000400

0800f3c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800f3c8:	b510      	push	{r4, lr}
 800f3ca:	4604      	mov	r4, r0
 800f3cc:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f3ce:	2214      	movs	r2, #20
 800f3d0:	2100      	movs	r1, #0
 800f3d2:	a803      	add	r0, sp, #12
 800f3d4:	f002 fe9e 	bl	8012114 <memset>
  if(tim_baseHandle->Instance==TIM3)
 800f3d8:	6822      	ldr	r2, [r4, #0]
 800f3da:	4b11      	ldr	r3, [pc, #68]	; (800f420 <HAL_TIM_Base_MspInit+0x58>)
 800f3dc:	429a      	cmp	r2, r3
 800f3de:	d11c      	bne.n	800f41a <HAL_TIM_Base_MspInit+0x52>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800f3e0:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f3e4:	a903      	add	r1, sp, #12
    __HAL_RCC_TIM3_CLK_ENABLE();
 800f3e6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f3e8:	480e      	ldr	r0, [pc, #56]	; (800f424 <HAL_TIM_Base_MspInit+0x5c>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 800f3ea:	f042 0202 	orr.w	r2, r2, #2
 800f3ee:	659a      	str	r2, [r3, #88]	; 0x58
 800f3f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f3f2:	f002 0202 	and.w	r2, r2, #2
 800f3f6:	9201      	str	r2, [sp, #4]
 800f3f8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f3fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f3fc:	f042 0202 	orr.w	r2, r2, #2
 800f400:	64da      	str	r2, [r3, #76]	; 0x4c
 800f402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f404:	f003 0302 	and.w	r3, r3, #2
 800f408:	9302      	str	r3, [sp, #8]
 800f40a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800f40c:	2301      	movs	r3, #1
 800f40e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f410:	2302      	movs	r3, #2
 800f412:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800f414:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f416:	f7fa f959 	bl	80096cc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800f41a:	b008      	add	sp, #32
 800f41c:	bd10      	pop	{r4, pc}
 800f41e:	bf00      	nop
 800f420:	40000400 	.word	0x40000400
 800f424:	48000400 	.word	0x48000400

0800f428 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800f428:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 800f42a:	480c      	ldr	r0, [pc, #48]	; (800f45c <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 115200;
 800f42c:	4b0c      	ldr	r3, [pc, #48]	; (800f460 <MX_USART2_UART_Init+0x38>)
 800f42e:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 800f432:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800f436:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800f438:	2300      	movs	r3, #0
 800f43a:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800f43c:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800f43e:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800f440:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800f442:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800f444:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800f446:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800f448:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800f44a:	f7fd fac5 	bl	800c9d8 <HAL_UART_Init>
 800f44e:	b118      	cbz	r0, 800f458 <MX_USART2_UART_Init+0x30>
  {
    Error_Handler();
  }

}
 800f450:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800f454:	f7ff be85 	b.w	800f162 <Error_Handler>
 800f458:	bd08      	pop	{r3, pc}
 800f45a:	bf00      	nop
 800f45c:	20000ac8 	.word	0x20000ac8
 800f460:	40004400 	.word	0x40004400

0800f464 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800f464:	b510      	push	{r4, lr}
 800f466:	4604      	mov	r4, r0
 800f468:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f46a:	2214      	movs	r2, #20
 800f46c:	2100      	movs	r1, #0
 800f46e:	a803      	add	r0, sp, #12
 800f470:	f002 fe50 	bl	8012114 <memset>
  if(uartHandle->Instance==USART2)
 800f474:	6822      	ldr	r2, [r4, #0]
 800f476:	4b13      	ldr	r3, [pc, #76]	; (800f4c4 <HAL_UART_MspInit+0x60>)
 800f478:	429a      	cmp	r2, r3
 800f47a:	d120      	bne.n	800f4be <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800f47c:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f480:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 800f482:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f484:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800f488:	659a      	str	r2, [r3, #88]	; 0x58
 800f48a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f48c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800f490:	9201      	str	r2, [sp, #4]
 800f492:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f494:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f496:	f042 0201 	orr.w	r2, r2, #1
 800f49a:	64da      	str	r2, [r3, #76]	; 0x4c
 800f49c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f49e:	f003 0301 	and.w	r3, r3, #1
 800f4a2:	9302      	str	r3, [sp, #8]
 800f4a4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800f4a6:	230c      	movs	r3, #12
 800f4a8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f4aa:	2302      	movs	r3, #2
 800f4ac:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f4ae:	2303      	movs	r3, #3
 800f4b0:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f4b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800f4b6:	2307      	movs	r3, #7
 800f4b8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f4ba:	f7fa f907 	bl	80096cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800f4be:	b008      	add	sp, #32
 800f4c0:	bd10      	pop	{r4, pc}
 800f4c2:	bf00      	nop
 800f4c4:	40004400 	.word	0x40004400

0800f4c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800f4c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800f500 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800f4cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800f4ce:	e003      	b.n	800f4d8 <LoopCopyDataInit>

0800f4d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800f4d0:	4b0c      	ldr	r3, [pc, #48]	; (800f504 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800f4d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800f4d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800f4d6:	3104      	adds	r1, #4

0800f4d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800f4d8:	480b      	ldr	r0, [pc, #44]	; (800f508 <LoopForever+0xa>)
	ldr	r3, =_edata
 800f4da:	4b0c      	ldr	r3, [pc, #48]	; (800f50c <LoopForever+0xe>)
	adds	r2, r0, r1
 800f4dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800f4de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800f4e0:	d3f6      	bcc.n	800f4d0 <CopyDataInit>
	ldr	r2, =_sbss
 800f4e2:	4a0b      	ldr	r2, [pc, #44]	; (800f510 <LoopForever+0x12>)
	b	LoopFillZerobss
 800f4e4:	e002      	b.n	800f4ec <LoopFillZerobss>

0800f4e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800f4e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800f4e8:	f842 3b04 	str.w	r3, [r2], #4

0800f4ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800f4ec:	4b09      	ldr	r3, [pc, #36]	; (800f514 <LoopForever+0x16>)
	cmp	r2, r3
 800f4ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800f4f0:	d3f9      	bcc.n	800f4e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800f4f2:	f7ff fef9 	bl	800f2e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800f4f6:	f002 fb91 	bl	8011c1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800f4fa:	f7ff fbb5 	bl	800ec68 <main>

0800f4fe <LoopForever>:

LoopForever:
    b LoopForever
 800f4fe:	e7fe      	b.n	800f4fe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800f500:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800f504:	08018b6c 	.word	0x08018b6c
	ldr	r0, =_sdata
 800f508:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800f50c:	20000688 	.word	0x20000688
	ldr	r2, =_sbss
 800f510:	20000688 	.word	0x20000688
	ldr	r3, = _ebss
 800f514:	20000b50 	.word	0x20000b50

0800f518 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800f518:	e7fe      	b.n	800f518 <ADC1_2_IRQHandler>
	...

0800f51c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 800f51c:	b510      	push	{r4, lr}
 800f51e:	4b03      	ldr	r3, [pc, #12]	; (800f52c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 800f520:	6003      	str	r3, [r0, #0]
 800f522:	4604      	mov	r4, r0
 800f524:	f000 fcea 	bl	800fefc <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800f528:	4620      	mov	r0, r4
 800f52a:	bd10      	pop	{r4, pc}
 800f52c:	08017824 	.word	0x08017824

0800f530 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 800f530:	b510      	push	{r4, lr}
 800f532:	4b05      	ldr	r3, [pc, #20]	; (800f548 <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
 800f534:	6003      	str	r3, [r0, #0]
 800f536:	4604      	mov	r4, r0
 800f538:	f000 fce0 	bl	800fefc <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800f53c:	4620      	mov	r0, r4
 800f53e:	210c      	movs	r1, #12
 800f540:	f000 fcb8 	bl	800feb4 <_ZdlPvj>
 800f544:	4620      	mov	r0, r4
 800f546:	bd10      	pop	{r4, pc}
 800f548:	08017824 	.word	0x08017824

0800f54c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 800f54c:	b570      	push	{r4, r5, r6, lr}
 800f54e:	b082      	sub	sp, #8
 800f550:	460d      	mov	r5, r1
 800f552:	9c06      	ldr	r4, [sp, #24]
 800f554:	4294      	cmp	r4, r2
 800f556:	4606      	mov	r6, r0
 800f558:	d009      	beq.n	800f56e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x22>
 800f55a:	68b0      	ldr	r0, [r6, #8]
 800f55c:	6806      	ldr	r6, [r0, #0]
 800f55e:	9406      	str	r4, [sp, #24]
 800f560:	6a34      	ldr	r4, [r6, #32]
 800f562:	4629      	mov	r1, r5
 800f564:	46a4      	mov	ip, r4
 800f566:	b002      	add	sp, #8
 800f568:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f56c:	4760      	bx	ip
 800f56e:	4619      	mov	r1, r3
 800f570:	9201      	str	r2, [sp, #4]
 800f572:	9300      	str	r3, [sp, #0]
 800f574:	f000 fd20 	bl	800ffb8 <_ZNKSt9type_infoeqERKS_>
 800f578:	9b00      	ldr	r3, [sp, #0]
 800f57a:	9a01      	ldr	r2, [sp, #4]
 800f57c:	2800      	cmp	r0, #0
 800f57e:	d0ec      	beq.n	800f55a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 800f580:	2006      	movs	r0, #6
 800f582:	b002      	add	sp, #8
 800f584:	bd70      	pop	{r4, r5, r6, pc}
 800f586:	bf00      	nop

0800f588 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 800f588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f58c:	b081      	sub	sp, #4
 800f58e:	460e      	mov	r6, r1
 800f590:	4619      	mov	r1, r3
 800f592:	461f      	mov	r7, r3
 800f594:	4691      	mov	r9, r2
 800f596:	4683      	mov	fp, r0
 800f598:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f59a:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800f59e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800f5a2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800f5a4:	f000 fd08 	bl	800ffb8 <_ZNKSt9type_infoeqERKS_>
 800f5a8:	b170      	cbz	r0, 800f5c8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
 800f5aa:	2e00      	cmp	r6, #0
 800f5ac:	602c      	str	r4, [r5, #0]
 800f5ae:	f885 9004 	strb.w	r9, [r5, #4]
 800f5b2:	db1f      	blt.n	800f5f4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6c>
 800f5b4:	4434      	add	r4, r6
 800f5b6:	45a0      	cmp	r8, r4
 800f5b8:	bf0c      	ite	eq
 800f5ba:	2406      	moveq	r4, #6
 800f5bc:	2401      	movne	r4, #1
 800f5be:	71ac      	strb	r4, [r5, #6]
 800f5c0:	2000      	movs	r0, #0
 800f5c2:	b001      	add	sp, #4
 800f5c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5c8:	4544      	cmp	r4, r8
 800f5ca:	d018      	beq.n	800f5fe <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x76>
 800f5cc:	f8db 0008 	ldr.w	r0, [fp, #8]
 800f5d0:	f8d0 e000 	ldr.w	lr, [r0]
 800f5d4:	950d      	str	r5, [sp, #52]	; 0x34
 800f5d6:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800f5da:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 800f5de:	940a      	str	r4, [sp, #40]	; 0x28
 800f5e0:	f8de 401c 	ldr.w	r4, [lr, #28]
 800f5e4:	463b      	mov	r3, r7
 800f5e6:	464a      	mov	r2, r9
 800f5e8:	4631      	mov	r1, r6
 800f5ea:	46a4      	mov	ip, r4
 800f5ec:	b001      	add	sp, #4
 800f5ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5f2:	4760      	bx	ip
 800f5f4:	3602      	adds	r6, #2
 800f5f6:	d1e3      	bne.n	800f5c0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 800f5f8:	2301      	movs	r3, #1
 800f5fa:	71ab      	strb	r3, [r5, #6]
 800f5fc:	e7e0      	b.n	800f5c0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 800f5fe:	4651      	mov	r1, sl
 800f600:	4658      	mov	r0, fp
 800f602:	f000 fcd9 	bl	800ffb8 <_ZNKSt9type_infoeqERKS_>
 800f606:	2800      	cmp	r0, #0
 800f608:	d0e0      	beq.n	800f5cc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
 800f60a:	2000      	movs	r0, #0
 800f60c:	f885 9005 	strb.w	r9, [r5, #5]
 800f610:	b001      	add	sp, #4
 800f612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f616:	bf00      	nop

0800f618 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 800f618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f61c:	4607      	mov	r7, r0
 800f61e:	460c      	mov	r4, r1
 800f620:	4615      	mov	r5, r2
 800f622:	461e      	mov	r6, r3
 800f624:	f000 fc82 	bl	800ff2c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 800f628:	b108      	cbz	r0, 800f62e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x16>
 800f62a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f62e:	68b8      	ldr	r0, [r7, #8]
 800f630:	6807      	ldr	r7, [r0, #0]
 800f632:	4621      	mov	r1, r4
 800f634:	69bc      	ldr	r4, [r7, #24]
 800f636:	4633      	mov	r3, r6
 800f638:	462a      	mov	r2, r5
 800f63a:	46a4      	mov	ip, r4
 800f63c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f640:	4760      	bx	ip
 800f642:	bf00      	nop

0800f644 <__aeabi_atexit>:
 800f644:	460b      	mov	r3, r1
 800f646:	4601      	mov	r1, r0
 800f648:	4618      	mov	r0, r3
 800f64a:	f002 b88b 	b.w	8011764 <__cxa_atexit>
 800f64e:	bf00      	nop

0800f650 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800f650:	b508      	push	{r3, lr}
 800f652:	4780      	blx	r0
 800f654:	f002 f87f 	bl	8011756 <abort>
 800f658:	f000 fdfc 	bl	8010254 <__cxa_begin_catch>
 800f65c:	f002 f87b 	bl	8011756 <abort>
 800f660:	460d      	mov	r5, r1
 800f662:	4604      	mov	r4, r0
 800f664:	f000 fe34 	bl	80102d0 <__cxa_end_catch>
 800f668:	3501      	adds	r5, #1
 800f66a:	d001      	beq.n	800f670 <_ZN10__cxxabiv111__terminateEPFvvE+0x20>
 800f66c:	f000 f82e 	bl	800f6cc <__cxa_end_cleanup>
 800f670:	4620      	mov	r0, r4
 800f672:	f000 fd7f 	bl	8010174 <__cxa_call_unexpected>
 800f676:	bf00      	nop

0800f678 <_ZSt9terminatev>:
 800f678:	b508      	push	{r3, lr}
 800f67a:	4b03      	ldr	r3, [pc, #12]	; (800f688 <_ZSt9terminatev+0x10>)
 800f67c:	6818      	ldr	r0, [r3, #0]
 800f67e:	f3bf 8f5b 	dmb	ish
 800f682:	f7ff ffe5 	bl	800f650 <_ZN10__cxxabiv111__terminateEPFvvE>
 800f686:	bf00      	nop
 800f688:	20000008 	.word	0x20000008

0800f68c <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 800f68c:	b508      	push	{r3, lr}
 800f68e:	4780      	blx	r0
 800f690:	f7ff fff2 	bl	800f678 <_ZSt9terminatev>

0800f694 <_ZSt10unexpectedv>:
 800f694:	b508      	push	{r3, lr}
 800f696:	4b03      	ldr	r3, [pc, #12]	; (800f6a4 <_ZSt10unexpectedv+0x10>)
 800f698:	6818      	ldr	r0, [r3, #0]
 800f69a:	f3bf 8f5b 	dmb	ish
 800f69e:	f7ff fff5 	bl	800f68c <_ZN10__cxxabiv112__unexpectedEPFvvE>
 800f6a2:	bf00      	nop
 800f6a4:	2000000c 	.word	0x2000000c

0800f6a8 <_ZSt13get_terminatev>:
 800f6a8:	4b02      	ldr	r3, [pc, #8]	; (800f6b4 <_ZSt13get_terminatev+0xc>)
 800f6aa:	6818      	ldr	r0, [r3, #0]
 800f6ac:	f3bf 8f5b 	dmb	ish
 800f6b0:	4770      	bx	lr
 800f6b2:	bf00      	nop
 800f6b4:	20000008 	.word	0x20000008

0800f6b8 <_ZSt14get_unexpectedv>:
 800f6b8:	4b02      	ldr	r3, [pc, #8]	; (800f6c4 <_ZSt14get_unexpectedv+0xc>)
 800f6ba:	6818      	ldr	r0, [r3, #0]
 800f6bc:	f3bf 8f5b 	dmb	ish
 800f6c0:	4770      	bx	lr
 800f6c2:	bf00      	nop
 800f6c4:	2000000c 	.word	0x2000000c

0800f6c8 <_Znaj>:
 800f6c8:	f000 be48 	b.w	801035c <_Znwj>

0800f6cc <__cxa_end_cleanup>:
 800f6cc:	b41e      	push	{r1, r2, r3, r4}
 800f6ce:	f000 f891 	bl	800f7f4 <__gnu_end_cleanup>
 800f6d2:	bc1e      	pop	{r1, r2, r3, r4}
 800f6d4:	f7f8 fd10 	bl	80080f8 <_Unwind_Resume>

0800f6d8 <__cxa_type_match>:
 800f6d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6da:	7802      	ldrb	r2, [r0, #0]
 800f6dc:	2a47      	cmp	r2, #71	; 0x47
 800f6de:	b083      	sub	sp, #12
 800f6e0:	460d      	mov	r5, r1
 800f6e2:	461f      	mov	r7, r3
 800f6e4:	d01e      	beq.n	800f724 <__cxa_type_match+0x4c>
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	4c27      	ldr	r4, [pc, #156]	; (800f788 <__cxa_type_match+0xb0>)
 800f6ea:	9301      	str	r3, [sp, #4]
 800f6ec:	6823      	ldr	r3, [r4, #0]
 800f6ee:	4620      	mov	r0, r4
 800f6f0:	689b      	ldr	r3, [r3, #8]
 800f6f2:	4798      	blx	r3
 800f6f4:	b180      	cbz	r0, 800f718 <__cxa_type_match+0x40>
 800f6f6:	9b01      	ldr	r3, [sp, #4]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	9301      	str	r3, [sp, #4]
 800f6fc:	2602      	movs	r6, #2
 800f6fe:	682b      	ldr	r3, [r5, #0]
 800f700:	4621      	mov	r1, r4
 800f702:	4628      	mov	r0, r5
 800f704:	691c      	ldr	r4, [r3, #16]
 800f706:	aa01      	add	r2, sp, #4
 800f708:	2301      	movs	r3, #1
 800f70a:	47a0      	blx	r4
 800f70c:	b130      	cbz	r0, 800f71c <__cxa_type_match+0x44>
 800f70e:	9b01      	ldr	r3, [sp, #4]
 800f710:	603b      	str	r3, [r7, #0]
 800f712:	4630      	mov	r0, r6
 800f714:	b003      	add	sp, #12
 800f716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f718:	2601      	movs	r6, #1
 800f71a:	e7f0      	b.n	800f6fe <__cxa_type_match+0x26>
 800f71c:	4606      	mov	r6, r0
 800f71e:	4630      	mov	r0, r6
 800f720:	b003      	add	sp, #12
 800f722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f724:	7843      	ldrb	r3, [r0, #1]
 800f726:	2b4e      	cmp	r3, #78	; 0x4e
 800f728:	d1dd      	bne.n	800f6e6 <__cxa_type_match+0xe>
 800f72a:	7883      	ldrb	r3, [r0, #2]
 800f72c:	2b55      	cmp	r3, #85	; 0x55
 800f72e:	d1da      	bne.n	800f6e6 <__cxa_type_match+0xe>
 800f730:	78c3      	ldrb	r3, [r0, #3]
 800f732:	2b43      	cmp	r3, #67	; 0x43
 800f734:	d019      	beq.n	800f76a <__cxa_type_match+0x92>
 800f736:	78c3      	ldrb	r3, [r0, #3]
 800f738:	2b43      	cmp	r3, #67	; 0x43
 800f73a:	d1d4      	bne.n	800f6e6 <__cxa_type_match+0xe>
 800f73c:	7903      	ldrb	r3, [r0, #4]
 800f73e:	2b43      	cmp	r3, #67	; 0x43
 800f740:	d1d1      	bne.n	800f6e6 <__cxa_type_match+0xe>
 800f742:	7943      	ldrb	r3, [r0, #5]
 800f744:	2b2b      	cmp	r3, #43	; 0x2b
 800f746:	d1ce      	bne.n	800f6e6 <__cxa_type_match+0xe>
 800f748:	7983      	ldrb	r3, [r0, #6]
 800f74a:	2b2b      	cmp	r3, #43	; 0x2b
 800f74c:	d1cb      	bne.n	800f6e6 <__cxa_type_match+0xe>
 800f74e:	79c3      	ldrb	r3, [r0, #7]
 800f750:	2b01      	cmp	r3, #1
 800f752:	d8c8      	bhi.n	800f6e6 <__cxa_type_match+0xe>
 800f754:	d004      	beq.n	800f760 <__cxa_type_match+0x88>
 800f756:	f850 4c20 	ldr.w	r4, [r0, #-32]
 800f75a:	3058      	adds	r0, #88	; 0x58
 800f75c:	9001      	str	r0, [sp, #4]
 800f75e:	e7c5      	b.n	800f6ec <__cxa_type_match+0x14>
 800f760:	f850 0c20 	ldr.w	r0, [r0, #-32]
 800f764:	f850 4c78 	ldr.w	r4, [r0, #-120]
 800f768:	e7f8      	b.n	800f75c <__cxa_type_match+0x84>
 800f76a:	7903      	ldrb	r3, [r0, #4]
 800f76c:	2b46      	cmp	r3, #70	; 0x46
 800f76e:	d1e2      	bne.n	800f736 <__cxa_type_match+0x5e>
 800f770:	7943      	ldrb	r3, [r0, #5]
 800f772:	2b4f      	cmp	r3, #79	; 0x4f
 800f774:	d1df      	bne.n	800f736 <__cxa_type_match+0x5e>
 800f776:	7983      	ldrb	r3, [r0, #6]
 800f778:	2b52      	cmp	r3, #82	; 0x52
 800f77a:	d1dc      	bne.n	800f736 <__cxa_type_match+0x5e>
 800f77c:	79c3      	ldrb	r3, [r0, #7]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d1d9      	bne.n	800f736 <__cxa_type_match+0x5e>
 800f782:	9301      	str	r3, [sp, #4]
 800f784:	4c01      	ldr	r4, [pc, #4]	; (800f78c <__cxa_type_match+0xb4>)
 800f786:	e7b1      	b.n	800f6ec <__cxa_type_match+0x14>
 800f788:	080178d8 	.word	0x080178d8
 800f78c:	080178d0 	.word	0x080178d0

0800f790 <__cxa_begin_cleanup>:
 800f790:	b510      	push	{r4, lr}
 800f792:	4604      	mov	r4, r0
 800f794:	f000 ff70 	bl	8010678 <__cxa_get_globals>
 800f798:	7823      	ldrb	r3, [r4, #0]
 800f79a:	2b47      	cmp	r3, #71	; 0x47
 800f79c:	f1a4 0220 	sub.w	r2, r4, #32
 800f7a0:	d004      	beq.n	800f7ac <__cxa_begin_cleanup+0x1c>
 800f7a2:	6883      	ldr	r3, [r0, #8]
 800f7a4:	bb23      	cbnz	r3, 800f7f0 <__cxa_begin_cleanup+0x60>
 800f7a6:	6082      	str	r2, [r0, #8]
 800f7a8:	2001      	movs	r0, #1
 800f7aa:	bd10      	pop	{r4, pc}
 800f7ac:	7863      	ldrb	r3, [r4, #1]
 800f7ae:	2b4e      	cmp	r3, #78	; 0x4e
 800f7b0:	d1f7      	bne.n	800f7a2 <__cxa_begin_cleanup+0x12>
 800f7b2:	78a3      	ldrb	r3, [r4, #2]
 800f7b4:	2b55      	cmp	r3, #85	; 0x55
 800f7b6:	d1f4      	bne.n	800f7a2 <__cxa_begin_cleanup+0x12>
 800f7b8:	78e3      	ldrb	r3, [r4, #3]
 800f7ba:	2b43      	cmp	r3, #67	; 0x43
 800f7bc:	d1f1      	bne.n	800f7a2 <__cxa_begin_cleanup+0x12>
 800f7be:	7923      	ldrb	r3, [r4, #4]
 800f7c0:	2b43      	cmp	r3, #67	; 0x43
 800f7c2:	d1ee      	bne.n	800f7a2 <__cxa_begin_cleanup+0x12>
 800f7c4:	7963      	ldrb	r3, [r4, #5]
 800f7c6:	2b2b      	cmp	r3, #43	; 0x2b
 800f7c8:	d1eb      	bne.n	800f7a2 <__cxa_begin_cleanup+0x12>
 800f7ca:	79a3      	ldrb	r3, [r4, #6]
 800f7cc:	2b2b      	cmp	r3, #43	; 0x2b
 800f7ce:	d1e8      	bne.n	800f7a2 <__cxa_begin_cleanup+0x12>
 800f7d0:	79e3      	ldrb	r3, [r4, #7]
 800f7d2:	2b01      	cmp	r3, #1
 800f7d4:	d8e5      	bhi.n	800f7a2 <__cxa_begin_cleanup+0x12>
 800f7d6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800f7da:	3301      	adds	r3, #1
 800f7dc:	2b01      	cmp	r3, #1
 800f7de:	f844 3c04 	str.w	r3, [r4, #-4]
 800f7e2:	d1e1      	bne.n	800f7a8 <__cxa_begin_cleanup+0x18>
 800f7e4:	6883      	ldr	r3, [r0, #8]
 800f7e6:	f844 3c08 	str.w	r3, [r4, #-8]
 800f7ea:	6082      	str	r2, [r0, #8]
 800f7ec:	2001      	movs	r0, #1
 800f7ee:	bd10      	pop	{r4, pc}
 800f7f0:	f7ff ff42 	bl	800f678 <_ZSt9terminatev>

0800f7f4 <__gnu_end_cleanup>:
 800f7f4:	b508      	push	{r3, lr}
 800f7f6:	f000 ff3f 	bl	8010678 <__cxa_get_globals>
 800f7fa:	6883      	ldr	r3, [r0, #8]
 800f7fc:	b383      	cbz	r3, 800f860 <__gnu_end_cleanup+0x6c>
 800f7fe:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f802:	2a47      	cmp	r2, #71	; 0x47
 800f804:	d004      	beq.n	800f810 <__gnu_end_cleanup+0x1c>
 800f806:	2200      	movs	r2, #0
 800f808:	6082      	str	r2, [r0, #8]
 800f80a:	f103 0020 	add.w	r0, r3, #32
 800f80e:	bd08      	pop	{r3, pc}
 800f810:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f814:	2a4e      	cmp	r2, #78	; 0x4e
 800f816:	d1f6      	bne.n	800f806 <__gnu_end_cleanup+0x12>
 800f818:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800f81c:	2a55      	cmp	r2, #85	; 0x55
 800f81e:	d1f2      	bne.n	800f806 <__gnu_end_cleanup+0x12>
 800f820:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800f824:	2a43      	cmp	r2, #67	; 0x43
 800f826:	d1ee      	bne.n	800f806 <__gnu_end_cleanup+0x12>
 800f828:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800f82c:	2a43      	cmp	r2, #67	; 0x43
 800f82e:	d1ea      	bne.n	800f806 <__gnu_end_cleanup+0x12>
 800f830:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800f834:	2a2b      	cmp	r2, #43	; 0x2b
 800f836:	d1e6      	bne.n	800f806 <__gnu_end_cleanup+0x12>
 800f838:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800f83c:	2a2b      	cmp	r2, #43	; 0x2b
 800f83e:	d1e2      	bne.n	800f806 <__gnu_end_cleanup+0x12>
 800f840:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800f844:	2a01      	cmp	r2, #1
 800f846:	d8de      	bhi.n	800f806 <__gnu_end_cleanup+0x12>
 800f848:	69da      	ldr	r2, [r3, #28]
 800f84a:	3a01      	subs	r2, #1
 800f84c:	61da      	str	r2, [r3, #28]
 800f84e:	2a00      	cmp	r2, #0
 800f850:	d1db      	bne.n	800f80a <__gnu_end_cleanup+0x16>
 800f852:	699a      	ldr	r2, [r3, #24]
 800f854:	6082      	str	r2, [r0, #8]
 800f856:	2200      	movs	r2, #0
 800f858:	619a      	str	r2, [r3, #24]
 800f85a:	f103 0020 	add.w	r0, r3, #32
 800f85e:	bd08      	pop	{r3, pc}
 800f860:	f7ff ff0a 	bl	800f678 <_ZSt9terminatev>

0800f864 <_ZL28read_encoded_value_with_basehjPKhPj>:
 800f864:	2850      	cmp	r0, #80	; 0x50
 800f866:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f868:	d054      	beq.n	800f914 <_ZL28read_encoded_value_with_basehjPKhPj+0xb0>
 800f86a:	f000 040f 	and.w	r4, r0, #15
 800f86e:	2c0c      	cmp	r4, #12
 800f870:	d84e      	bhi.n	800f910 <_ZL28read_encoded_value_with_basehjPKhPj+0xac>
 800f872:	e8df f004 	tbb	[pc, r4]
 800f876:	3907      	.short	0x3907
 800f878:	4d170749 	.word	0x4d170749
 800f87c:	1f4d4d4d 	.word	0x1f4d4d4d
 800f880:	071b      	.short	0x071b
 800f882:	17          	.byte	0x17
 800f883:	00          	.byte	0x00
 800f884:	4615      	mov	r5, r2
 800f886:	f855 4b04 	ldr.w	r4, [r5], #4
 800f88a:	b144      	cbz	r4, 800f89e <_ZL28read_encoded_value_with_basehjPKhPj+0x3a>
 800f88c:	f000 0670 	and.w	r6, r0, #112	; 0x70
 800f890:	2e10      	cmp	r6, #16
 800f892:	bf08      	it	eq
 800f894:	4611      	moveq	r1, r2
 800f896:	440c      	add	r4, r1
 800f898:	0602      	lsls	r2, r0, #24
 800f89a:	bf48      	it	mi
 800f89c:	6824      	ldrmi	r4, [r4, #0]
 800f89e:	601c      	str	r4, [r3, #0]
 800f8a0:	4628      	mov	r0, r5
 800f8a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8a4:	4615      	mov	r5, r2
 800f8a6:	f855 4b08 	ldr.w	r4, [r5], #8
 800f8aa:	e7ee      	b.n	800f88a <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 800f8ac:	4615      	mov	r5, r2
 800f8ae:	f935 4b02 	ldrsh.w	r4, [r5], #2
 800f8b2:	e7ea      	b.n	800f88a <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 800f8b4:	2400      	movs	r4, #0
 800f8b6:	4627      	mov	r7, r4
 800f8b8:	4615      	mov	r5, r2
 800f8ba:	f815 eb01 	ldrb.w	lr, [r5], #1
 800f8be:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
 800f8c2:	40be      	lsls	r6, r7
 800f8c4:	f01e 0f80 	tst.w	lr, #128	; 0x80
 800f8c8:	ea44 0406 	orr.w	r4, r4, r6
 800f8cc:	f107 0707 	add.w	r7, r7, #7
 800f8d0:	d1f3      	bne.n	800f8ba <_ZL28read_encoded_value_with_basehjPKhPj+0x56>
 800f8d2:	2f1f      	cmp	r7, #31
 800f8d4:	d8d9      	bhi.n	800f88a <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 800f8d6:	f01e 0f40 	tst.w	lr, #64	; 0x40
 800f8da:	d0d6      	beq.n	800f88a <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 800f8dc:	f04f 36ff 	mov.w	r6, #4294967295
 800f8e0:	fa06 f707 	lsl.w	r7, r6, r7
 800f8e4:	433c      	orrs	r4, r7
 800f8e6:	e7d1      	b.n	800f88c <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
 800f8e8:	2400      	movs	r4, #0
 800f8ea:	4627      	mov	r7, r4
 800f8ec:	4615      	mov	r5, r2
 800f8ee:	f815 eb01 	ldrb.w	lr, [r5], #1
 800f8f2:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
 800f8f6:	40be      	lsls	r6, r7
 800f8f8:	f01e 0f80 	tst.w	lr, #128	; 0x80
 800f8fc:	ea44 0406 	orr.w	r4, r4, r6
 800f900:	f107 0707 	add.w	r7, r7, #7
 800f904:	d1f3      	bne.n	800f8ee <_ZL28read_encoded_value_with_basehjPKhPj+0x8a>
 800f906:	e7c0      	b.n	800f88a <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 800f908:	4615      	mov	r5, r2
 800f90a:	f835 4b02 	ldrh.w	r4, [r5], #2
 800f90e:	e7bc      	b.n	800f88a <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 800f910:	f001 ff21 	bl	8011756 <abort>
 800f914:	3203      	adds	r2, #3
 800f916:	f022 0503 	bic.w	r5, r2, #3
 800f91a:	f855 4b04 	ldr.w	r4, [r5], #4
 800f91e:	601c      	str	r4, [r3, #0]
 800f920:	4628      	mov	r0, r5
 800f922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f924 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 800f924:	28ff      	cmp	r0, #255	; 0xff
 800f926:	d00d      	beq.n	800f944 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 800f928:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800f92c:	2820      	cmp	r0, #32
 800f92e:	d015      	beq.n	800f95c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
 800f930:	d90a      	bls.n	800f948 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
 800f932:	2840      	cmp	r0, #64	; 0x40
 800f934:	d00f      	beq.n	800f956 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x32>
 800f936:	2850      	cmp	r0, #80	; 0x50
 800f938:	d004      	beq.n	800f944 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 800f93a:	2830      	cmp	r0, #48	; 0x30
 800f93c:	d108      	bne.n	800f950 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 800f93e:	4608      	mov	r0, r1
 800f940:	f7f8 bdde 	b.w	8008500 <_Unwind_GetDataRelBase>
 800f944:	2000      	movs	r0, #0
 800f946:	4770      	bx	lr
 800f948:	2800      	cmp	r0, #0
 800f94a:	d0fb      	beq.n	800f944 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 800f94c:	2810      	cmp	r0, #16
 800f94e:	d0f9      	beq.n	800f944 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 800f950:	b508      	push	{r3, lr}
 800f952:	f001 ff00 	bl	8011756 <abort>
 800f956:	4608      	mov	r0, r1
 800f958:	f7f8 bdbe 	b.w	80084d8 <_Unwind_GetRegionStart>
 800f95c:	4608      	mov	r0, r1
 800f95e:	f7f8 bdcb 	b.w	80084f8 <_Unwind_GetTextRelBase>
 800f962:	bf00      	nop

0800f964 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 800f964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f966:	460c      	mov	r4, r1
 800f968:	4615      	mov	r5, r2
 800f96a:	4607      	mov	r7, r0
 800f96c:	2800      	cmp	r0, #0
 800f96e:	d044      	beq.n	800f9fa <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x96>
 800f970:	f7f8 fdb2 	bl	80084d8 <_Unwind_GetRegionStart>
 800f974:	6028      	str	r0, [r5, #0]
 800f976:	7826      	ldrb	r6, [r4, #0]
 800f978:	2eff      	cmp	r6, #255	; 0xff
 800f97a:	f104 0401 	add.w	r4, r4, #1
 800f97e:	d032      	beq.n	800f9e6 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x82>
 800f980:	4639      	mov	r1, r7
 800f982:	4630      	mov	r0, r6
 800f984:	f7ff ffce 	bl	800f924 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800f988:	4622      	mov	r2, r4
 800f98a:	4601      	mov	r1, r0
 800f98c:	1d2b      	adds	r3, r5, #4
 800f98e:	4630      	mov	r0, r6
 800f990:	f7ff ff68 	bl	800f864 <_ZL28read_encoded_value_with_basehjPKhPj>
 800f994:	4604      	mov	r4, r0
 800f996:	1c60      	adds	r0, r4, #1
 800f998:	7823      	ldrb	r3, [r4, #0]
 800f99a:	752b      	strb	r3, [r5, #20]
 800f99c:	2bff      	cmp	r3, #255	; 0xff
 800f99e:	d029      	beq.n	800f9f4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x90>
 800f9a0:	2310      	movs	r3, #16
 800f9a2:	2400      	movs	r4, #0
 800f9a4:	752b      	strb	r3, [r5, #20]
 800f9a6:	4622      	mov	r2, r4
 800f9a8:	f810 1b01 	ldrb.w	r1, [r0], #1
 800f9ac:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800f9b0:	4093      	lsls	r3, r2
 800f9b2:	0609      	lsls	r1, r1, #24
 800f9b4:	ea44 0403 	orr.w	r4, r4, r3
 800f9b8:	f102 0207 	add.w	r2, r2, #7
 800f9bc:	d4f4      	bmi.n	800f9a8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x44>
 800f9be:	4404      	add	r4, r0
 800f9c0:	60ec      	str	r4, [r5, #12]
 800f9c2:	7803      	ldrb	r3, [r0, #0]
 800f9c4:	756b      	strb	r3, [r5, #21]
 800f9c6:	2400      	movs	r4, #0
 800f9c8:	3001      	adds	r0, #1
 800f9ca:	4622      	mov	r2, r4
 800f9cc:	f810 1b01 	ldrb.w	r1, [r0], #1
 800f9d0:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800f9d4:	4093      	lsls	r3, r2
 800f9d6:	431c      	orrs	r4, r3
 800f9d8:	060b      	lsls	r3, r1, #24
 800f9da:	f102 0207 	add.w	r2, r2, #7
 800f9de:	d4f5      	bmi.n	800f9cc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x68>
 800f9e0:	4404      	add	r4, r0
 800f9e2:	612c      	str	r4, [r5, #16]
 800f9e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9e6:	6068      	str	r0, [r5, #4]
 800f9e8:	7823      	ldrb	r3, [r4, #0]
 800f9ea:	752b      	strb	r3, [r5, #20]
 800f9ec:	2bff      	cmp	r3, #255	; 0xff
 800f9ee:	f104 0001 	add.w	r0, r4, #1
 800f9f2:	d1d5      	bne.n	800f9a0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3c>
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	60eb      	str	r3, [r5, #12]
 800f9f8:	e7e3      	b.n	800f9c2 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5e>
 800f9fa:	e7bb      	b.n	800f974 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>

0800f9fc <__gxx_personality_v0>:
 800f9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa00:	f000 0403 	and.w	r4, r0, #3
 800fa04:	b097      	sub	sp, #92	; 0x5c
 800fa06:	2300      	movs	r3, #0
 800fa08:	2c01      	cmp	r4, #1
 800fa0a:	4689      	mov	r9, r1
 800fa0c:	4617      	mov	r7, r2
 800fa0e:	930a      	str	r3, [sp, #40]	; 0x28
 800fa10:	d01e      	beq.n	800fa50 <__gxx_personality_v0+0x54>
 800fa12:	d30e      	bcc.n	800fa32 <__gxx_personality_v0+0x36>
 800fa14:	2c02      	cmp	r4, #2
 800fa16:	d10a      	bne.n	800fa2e <__gxx_personality_v0+0x32>
 800fa18:	4639      	mov	r1, r7
 800fa1a:	4648      	mov	r0, r9
 800fa1c:	f7f8 fd48 	bl	80084b0 <__gnu_unwind_frame>
 800fa20:	2800      	cmp	r0, #0
 800fa22:	f000 80a5 	beq.w	800fb70 <__gxx_personality_v0+0x174>
 800fa26:	2009      	movs	r0, #9
 800fa28:	b017      	add	sp, #92	; 0x5c
 800fa2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa2e:	f001 fe92 	bl	8011756 <abort>
 800fa32:	0700      	lsls	r0, r0, #28
 800fa34:	d4f0      	bmi.n	800fa18 <__gxx_personality_v0+0x1c>
 800fa36:	2301      	movs	r3, #1
 800fa38:	9303      	str	r3, [sp, #12]
 800fa3a:	aa16      	add	r2, sp, #88	; 0x58
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	f842 9d2c 	str.w	r9, [r2, #-44]!
 800fa42:	4619      	mov	r1, r3
 800fa44:	9200      	str	r2, [sp, #0]
 800fa46:	4638      	mov	r0, r7
 800fa48:	220c      	movs	r2, #12
 800fa4a:	f7f7 ffd5 	bl	80079f8 <_Unwind_VRS_Set>
 800fa4e:	e00f      	b.n	800fa70 <__gxx_personality_v0+0x74>
 800fa50:	f010 0408 	ands.w	r4, r0, #8
 800fa54:	f000 8090 	beq.w	800fb78 <__gxx_personality_v0+0x17c>
 800fa58:	aa16      	add	r2, sp, #88	; 0x58
 800fa5a:	f044 0402 	orr.w	r4, r4, #2
 800fa5e:	f842 1d2c 	str.w	r1, [r2, #-44]!
 800fa62:	4638      	mov	r0, r7
 800fa64:	9200      	str	r2, [sp, #0]
 800fa66:	4619      	mov	r1, r3
 800fa68:	220c      	movs	r2, #12
 800fa6a:	9403      	str	r4, [sp, #12]
 800fa6c:	f7f7 ffc4 	bl	80079f8 <_Unwind_VRS_Set>
 800fa70:	4638      	mov	r0, r7
 800fa72:	f7f8 fd37 	bl	80084e4 <_Unwind_GetLanguageSpecificData>
 800fa76:	9005      	str	r0, [sp, #20]
 800fa78:	2800      	cmp	r0, #0
 800fa7a:	d0cd      	beq.n	800fa18 <__gxx_personality_v0+0x1c>
 800fa7c:	ab10      	add	r3, sp, #64	; 0x40
 800fa7e:	461a      	mov	r2, r3
 800fa80:	9905      	ldr	r1, [sp, #20]
 800fa82:	9306      	str	r3, [sp, #24]
 800fa84:	4638      	mov	r0, r7
 800fa86:	f7ff ff6d 	bl	800f964 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 800fa8a:	4639      	mov	r1, r7
 800fa8c:	4604      	mov	r4, r0
 800fa8e:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
 800fa92:	f7ff ff47 	bl	800f924 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800fa96:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	9012      	str	r0, [sp, #72]	; 0x48
 800fa9e:	4619      	mov	r1, r3
 800faa0:	220f      	movs	r2, #15
 800faa2:	f8cd b000 	str.w	fp, [sp]
 800faa6:	4638      	mov	r0, r7
 800faa8:	f7f7 ff80 	bl	80079ac <_Unwind_VRS_Get>
 800faac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800faae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fab0:	f023 0301 	bic.w	r3, r3, #1
 800fab4:	42a2      	cmp	r2, r4
 800fab6:	f103 36ff 	add.w	r6, r3, #4294967295
 800faba:	d975      	bls.n	800fba8 <__gxx_personality_v0+0x1ac>
 800fabc:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
 800fac0:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800fac4:	f89d 5055 	ldrb.w	r5, [sp, #85]	; 0x55
 800fac8:	2100      	movs	r1, #0
 800faca:	4628      	mov	r0, r5
 800facc:	f7ff ff2a 	bl	800f924 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800fad0:	4622      	mov	r2, r4
 800fad2:	4653      	mov	r3, sl
 800fad4:	4601      	mov	r1, r0
 800fad6:	4628      	mov	r0, r5
 800fad8:	f7ff fec4 	bl	800f864 <_ZL28read_encoded_value_with_basehjPKhPj>
 800fadc:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
 800fae0:	4605      	mov	r5, r0
 800fae2:	2100      	movs	r1, #0
 800fae4:	4620      	mov	r0, r4
 800fae6:	f7ff ff1d 	bl	800f924 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800faea:	462a      	mov	r2, r5
 800faec:	4643      	mov	r3, r8
 800faee:	4601      	mov	r1, r0
 800faf0:	4620      	mov	r0, r4
 800faf2:	f7ff feb7 	bl	800f864 <_ZL28read_encoded_value_with_basehjPKhPj>
 800faf6:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
 800fafa:	4605      	mov	r5, r0
 800fafc:	2100      	movs	r1, #0
 800fafe:	4620      	mov	r0, r4
 800fb00:	f7ff ff10 	bl	800f924 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800fb04:	462a      	mov	r2, r5
 800fb06:	4601      	mov	r1, r0
 800fb08:	465b      	mov	r3, fp
 800fb0a:	4620      	mov	r0, r4
 800fb0c:	f7ff feaa 	bl	800f864 <_ZL28read_encoded_value_with_basehjPKhPj>
 800fb10:	4604      	mov	r4, r0
 800fb12:	2000      	movs	r0, #0
 800fb14:	4602      	mov	r2, r0
 800fb16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb1a:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800fb1e:	4093      	lsls	r3, r2
 800fb20:	0609      	lsls	r1, r1, #24
 800fb22:	ea40 0003 	orr.w	r0, r0, r3
 800fb26:	f102 0207 	add.w	r2, r2, #7
 800fb2a:	d4f4      	bmi.n	800fb16 <__gxx_personality_v0+0x11a>
 800fb2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fb2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fb30:	4413      	add	r3, r2
 800fb32:	429e      	cmp	r6, r3
 800fb34:	d231      	bcs.n	800fb9a <__gxx_personality_v0+0x19e>
 800fb36:	9b03      	ldr	r3, [sp, #12]
 800fb38:	07db      	lsls	r3, r3, #31
 800fb3a:	d539      	bpl.n	800fbb0 <__gxx_personality_v0+0x1b4>
 800fb3c:	2500      	movs	r5, #0
 800fb3e:	9504      	str	r5, [sp, #16]
 800fb40:	2300      	movs	r3, #0
 800fb42:	4619      	mov	r1, r3
 800fb44:	220d      	movs	r2, #13
 800fb46:	f8cd 8000 	str.w	r8, [sp]
 800fb4a:	4638      	mov	r0, r7
 800fb4c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800fb4e:	f7f7 ff2d 	bl	80079ac <_Unwind_VRS_Get>
 800fb52:	9a05      	ldr	r2, [sp, #20]
 800fb54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fb56:	f8c9 202c 	str.w	r2, [r9, #44]	; 0x2c
 800fb5a:	9a04      	ldr	r2, [sp, #16]
 800fb5c:	f8c9 4024 	str.w	r4, [r9, #36]	; 0x24
 800fb60:	f8c9 5028 	str.w	r5, [r9, #40]	; 0x28
 800fb64:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
 800fb68:	f8c9 3020 	str.w	r3, [r9, #32]
 800fb6c:	2006      	movs	r0, #6
 800fb6e:	e75b      	b.n	800fa28 <__gxx_personality_v0+0x2c>
 800fb70:	2008      	movs	r0, #8
 800fb72:	b017      	add	sp, #92	; 0x5c
 800fb74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb78:	ab10      	add	r3, sp, #64	; 0x40
 800fb7a:	9300      	str	r3, [sp, #0]
 800fb7c:	9306      	str	r3, [sp, #24]
 800fb7e:	220d      	movs	r2, #13
 800fb80:	4623      	mov	r3, r4
 800fb82:	4621      	mov	r1, r4
 800fb84:	4638      	mov	r0, r7
 800fb86:	f8d9 5020 	ldr.w	r5, [r9, #32]
 800fb8a:	f7f7 ff0f 	bl	80079ac <_Unwind_VRS_Get>
 800fb8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fb90:	429d      	cmp	r5, r3
 800fb92:	d012      	beq.n	800fbba <__gxx_personality_v0+0x1be>
 800fb94:	2302      	movs	r3, #2
 800fb96:	9303      	str	r3, [sp, #12]
 800fb98:	e74f      	b.n	800fa3a <__gxx_personality_v0+0x3e>
 800fb9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fb9c:	4413      	add	r3, r2
 800fb9e:	429e      	cmp	r6, r3
 800fba0:	d359      	bcc.n	800fc56 <__gxx_personality_v0+0x25a>
 800fba2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fba4:	42a3      	cmp	r3, r4
 800fba6:	d88d      	bhi.n	800fac4 <__gxx_personality_v0+0xc8>
 800fba8:	2500      	movs	r5, #0
 800fbaa:	9504      	str	r5, [sp, #16]
 800fbac:	2401      	movs	r4, #1
 800fbae:	e105      	b.n	800fdbc <__gxx_personality_v0+0x3c0>
 800fbb0:	9b03      	ldr	r3, [sp, #12]
 800fbb2:	071b      	lsls	r3, r3, #28
 800fbb4:	d54c      	bpl.n	800fc50 <__gxx_personality_v0+0x254>
 800fbb6:	f7ff fd5f 	bl	800f678 <_ZSt9terminatev>
 800fbba:	aa16      	add	r2, sp, #88	; 0x58
 800fbbc:	4623      	mov	r3, r4
 800fbbe:	f842 9d2c 	str.w	r9, [r2, #-44]!
 800fbc2:	4621      	mov	r1, r4
 800fbc4:	9200      	str	r2, [sp, #0]
 800fbc6:	4638      	mov	r0, r7
 800fbc8:	220c      	movs	r2, #12
 800fbca:	f7f7 ff15 	bl	80079f8 <_Unwind_VRS_Set>
 800fbce:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 800fbd2:	9304      	str	r3, [sp, #16]
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d03b      	beq.n	800fc50 <__gxx_personality_v0+0x254>
 800fbd8:	f8d9 5028 	ldr.w	r5, [r9, #40]	; 0x28
 800fbdc:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 800fbe0:	2403      	movs	r4, #3
 800fbe2:	2d00      	cmp	r5, #0
 800fbe4:	f2c0 8106 	blt.w	800fdf4 <__gxx_personality_v0+0x3f8>
 800fbe8:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
 800fbec:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800fbf0:	a916      	add	r1, sp, #88	; 0x58
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	f841 9d28 	str.w	r9, [r1, #-40]!
 800fbf8:	461a      	mov	r2, r3
 800fbfa:	9100      	str	r1, [sp, #0]
 800fbfc:	4638      	mov	r0, r7
 800fbfe:	4619      	mov	r1, r3
 800fc00:	f7f7 fefa 	bl	80079f8 <_Unwind_VRS_Set>
 800fc04:	2300      	movs	r3, #0
 800fc06:	4619      	mov	r1, r3
 800fc08:	2201      	movs	r2, #1
 800fc0a:	f8cd a000 	str.w	sl, [sp]
 800fc0e:	4638      	mov	r0, r7
 800fc10:	950d      	str	r5, [sp, #52]	; 0x34
 800fc12:	f7f7 fef1 	bl	80079f8 <_Unwind_VRS_Set>
 800fc16:	2300      	movs	r3, #0
 800fc18:	4619      	mov	r1, r3
 800fc1a:	220f      	movs	r2, #15
 800fc1c:	f8cd 8000 	str.w	r8, [sp]
 800fc20:	4638      	mov	r0, r7
 800fc22:	f7f7 fec3 	bl	80079ac <_Unwind_VRS_Get>
 800fc26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fc28:	9a04      	ldr	r2, [sp, #16]
 800fc2a:	f8cd 8000 	str.w	r8, [sp]
 800fc2e:	f003 0501 	and.w	r5, r3, #1
 800fc32:	2300      	movs	r3, #0
 800fc34:	4315      	orrs	r5, r2
 800fc36:	4638      	mov	r0, r7
 800fc38:	4619      	mov	r1, r3
 800fc3a:	220f      	movs	r2, #15
 800fc3c:	950e      	str	r5, [sp, #56]	; 0x38
 800fc3e:	f7f7 fedb 	bl	80079f8 <_Unwind_VRS_Set>
 800fc42:	2c02      	cmp	r4, #2
 800fc44:	f000 8080 	beq.w	800fd48 <__gxx_personality_v0+0x34c>
 800fc48:	2007      	movs	r0, #7
 800fc4a:	b017      	add	sp, #92	; 0x5c
 800fc4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc50:	4648      	mov	r0, r9
 800fc52:	f000 fa7f 	bl	8010154 <__cxa_call_terminate>
 800fc56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fc58:	9304      	str	r3, [sp, #16]
 800fc5a:	461a      	mov	r2, r3
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d178      	bne.n	800fd52 <__gxx_personality_v0+0x356>
 800fc60:	2800      	cmp	r0, #0
 800fc62:	f43f aed9 	beq.w	800fa18 <__gxx_personality_v0+0x1c>
 800fc66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fc68:	9a04      	ldr	r2, [sp, #16]
 800fc6a:	3801      	subs	r0, #1
 800fc6c:	4403      	add	r3, r0
 800fc6e:	2a00      	cmp	r2, #0
 800fc70:	f43f aed2 	beq.w	800fa18 <__gxx_personality_v0+0x1c>
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d075      	beq.n	800fd64 <__gxx_personality_v0+0x368>
 800fc78:	9a03      	ldr	r2, [sp, #12]
 800fc7a:	f012 0208 	ands.w	r2, r2, #8
 800fc7e:	9209      	str	r2, [sp, #36]	; 0x24
 800fc80:	f000 80f6 	beq.w	800fe70 <__gxx_personality_v0+0x474>
 800fc84:	2147      	movs	r1, #71	; 0x47
 800fc86:	224e      	movs	r2, #78	; 0x4e
 800fc88:	f889 1000 	strb.w	r1, [r9]
 800fc8c:	f889 2001 	strb.w	r2, [r9, #1]
 800fc90:	2155      	movs	r1, #85	; 0x55
 800fc92:	2243      	movs	r2, #67	; 0x43
 800fc94:	f889 1002 	strb.w	r1, [r9, #2]
 800fc98:	f889 2003 	strb.w	r2, [r9, #3]
 800fc9c:	2146      	movs	r1, #70	; 0x46
 800fc9e:	224f      	movs	r2, #79	; 0x4f
 800fca0:	f889 1004 	strb.w	r1, [r9, #4]
 800fca4:	f889 2005 	strb.w	r2, [r9, #5]
 800fca8:	2152      	movs	r1, #82	; 0x52
 800fcaa:	2200      	movs	r2, #0
 800fcac:	f889 1006 	strb.w	r1, [r9, #6]
 800fcb0:	f889 2007 	strb.w	r2, [r9, #7]
 800fcb4:	2200      	movs	r2, #0
 800fcb6:	9208      	str	r2, [sp, #32]
 800fcb8:	9707      	str	r7, [sp, #28]
 800fcba:	2500      	movs	r5, #0
 800fcbc:	4629      	mov	r1, r5
 800fcbe:	e000      	b.n	800fcc2 <__gxx_personality_v0+0x2c6>
 800fcc0:	4623      	mov	r3, r4
 800fcc2:	461c      	mov	r4, r3
 800fcc4:	f814 0b01 	ldrb.w	r0, [r4], #1
 800fcc8:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 800fccc:	408a      	lsls	r2, r1
 800fcce:	0606      	lsls	r6, r0, #24
 800fcd0:	ea45 0502 	orr.w	r5, r5, r2
 800fcd4:	f101 0107 	add.w	r1, r1, #7
 800fcd8:	d4f2      	bmi.n	800fcc0 <__gxx_personality_v0+0x2c4>
 800fcda:	291f      	cmp	r1, #31
 800fcdc:	d805      	bhi.n	800fcea <__gxx_personality_v0+0x2ee>
 800fcde:	0642      	lsls	r2, r0, #25
 800fce0:	d503      	bpl.n	800fcea <__gxx_personality_v0+0x2ee>
 800fce2:	2201      	movs	r2, #1
 800fce4:	408a      	lsls	r2, r1
 800fce6:	4252      	negs	r2, r2
 800fce8:	4315      	orrs	r5, r2
 800fcea:	2600      	movs	r6, #0
 800fcec:	4631      	mov	r1, r6
 800fcee:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800fcf2:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 800fcf6:	408a      	lsls	r2, r1
 800fcf8:	0607      	lsls	r7, r0, #24
 800fcfa:	ea46 0602 	orr.w	r6, r6, r2
 800fcfe:	f101 0107 	add.w	r1, r1, #7
 800fd02:	d4f4      	bmi.n	800fcee <__gxx_personality_v0+0x2f2>
 800fd04:	291f      	cmp	r1, #31
 800fd06:	d805      	bhi.n	800fd14 <__gxx_personality_v0+0x318>
 800fd08:	0640      	lsls	r0, r0, #25
 800fd0a:	d503      	bpl.n	800fd14 <__gxx_personality_v0+0x318>
 800fd0c:	2301      	movs	r3, #1
 800fd0e:	408b      	lsls	r3, r1
 800fd10:	425b      	negs	r3, r3
 800fd12:	431e      	orrs	r6, r3
 800fd14:	2d00      	cmp	r5, #0
 800fd16:	d05c      	beq.n	800fdd2 <__gxx_personality_v0+0x3d6>
 800fd18:	dd5e      	ble.n	800fdd8 <__gxx_personality_v0+0x3dc>
 800fd1a:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
 800fd1e:	28ff      	cmp	r0, #255	; 0xff
 800fd20:	f000 80a4 	beq.w	800fe6c <__gxx_personality_v0+0x470>
 800fd24:	f000 0307 	and.w	r3, r0, #7
 800fd28:	2b04      	cmp	r3, #4
 800fd2a:	f63f ae80 	bhi.w	800fa2e <__gxx_personality_v0+0x32>
 800fd2e:	a201      	add	r2, pc, #4	; (adr r2, 800fd34 <__gxx_personality_v0+0x338>)
 800fd30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd34:	0800fd9f 	.word	0x0800fd9f
 800fd38:	0800fa2f 	.word	0x0800fa2f
 800fd3c:	0800fda5 	.word	0x0800fda5
 800fd40:	0800fd9f 	.word	0x0800fd9f
 800fd44:	0800fd7d 	.word	0x0800fd7d
 800fd48:	4648      	mov	r0, r9
 800fd4a:	f7ff fd21 	bl	800f790 <__cxa_begin_cleanup>
 800fd4e:	2007      	movs	r0, #7
 800fd50:	e66a      	b.n	800fa28 <__gxx_personality_v0+0x2c>
 800fd52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fd54:	441a      	add	r2, r3
 800fd56:	9204      	str	r2, [sp, #16]
 800fd58:	2800      	cmp	r0, #0
 800fd5a:	d184      	bne.n	800fc66 <__gxx_personality_v0+0x26a>
 800fd5c:	9b04      	ldr	r3, [sp, #16]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	f43f ae5a 	beq.w	800fa18 <__gxx_personality_v0+0x1c>
 800fd64:	9b03      	ldr	r3, [sp, #12]
 800fd66:	f013 0301 	ands.w	r3, r3, #1
 800fd6a:	f47f ae55 	bne.w	800fa18 <__gxx_personality_v0+0x1c>
 800fd6e:	9a03      	ldr	r2, [sp, #12]
 800fd70:	f012 0508 	ands.w	r5, r2, #8
 800fd74:	f040 8097 	bne.w	800fea6 <__gxx_personality_v0+0x4aa>
 800fd78:	2402      	movs	r4, #2
 800fd7a:	e739      	b.n	800fbf0 <__gxx_personality_v0+0x1f4>
 800fd7c:	00eb      	lsls	r3, r5, #3
 800fd7e:	425b      	negs	r3, r3
 800fd80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fd82:	9912      	ldr	r1, [sp, #72]	; 0x48
 800fd84:	441a      	add	r2, r3
 800fd86:	4643      	mov	r3, r8
 800fd88:	f7ff fd6c 	bl	800f864 <_ZL28read_encoded_value_with_basehjPKhPj>
 800fd8c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800fd8e:	b199      	cbz	r1, 800fdb8 <__gxx_personality_v0+0x3bc>
 800fd90:	f1b9 0f00 	cmp.w	r9, #0
 800fd94:	d109      	bne.n	800fdaa <__gxx_personality_v0+0x3ae>
 800fd96:	2e00      	cmp	r6, #0
 800fd98:	d077      	beq.n	800fe8a <__gxx_personality_v0+0x48e>
 800fd9a:	19a3      	adds	r3, r4, r6
 800fd9c:	e78d      	b.n	800fcba <__gxx_personality_v0+0x2be>
 800fd9e:	00ab      	lsls	r3, r5, #2
 800fda0:	425b      	negs	r3, r3
 800fda2:	e7ed      	b.n	800fd80 <__gxx_personality_v0+0x384>
 800fda4:	006b      	lsls	r3, r5, #1
 800fda6:	425b      	negs	r3, r3
 800fda8:	e7ea      	b.n	800fd80 <__gxx_personality_v0+0x384>
 800fdaa:	ab0a      	add	r3, sp, #40	; 0x28
 800fdac:	2200      	movs	r2, #0
 800fdae:	4648      	mov	r0, r9
 800fdb0:	f7ff fc92 	bl	800f6d8 <__cxa_type_match>
 800fdb4:	2800      	cmp	r0, #0
 800fdb6:	d0ee      	beq.n	800fd96 <__gxx_personality_v0+0x39a>
 800fdb8:	9f07      	ldr	r7, [sp, #28]
 800fdba:	2403      	movs	r4, #3
 800fdbc:	9b03      	ldr	r3, [sp, #12]
 800fdbe:	07da      	lsls	r2, r3, #31
 800fdc0:	d460      	bmi.n	800fe84 <__gxx_personality_v0+0x488>
 800fdc2:	9b03      	ldr	r3, [sp, #12]
 800fdc4:	0719      	lsls	r1, r3, #28
 800fdc6:	d466      	bmi.n	800fe96 <__gxx_personality_v0+0x49a>
 800fdc8:	2c01      	cmp	r4, #1
 800fdca:	f43f af41 	beq.w	800fc50 <__gxx_personality_v0+0x254>
 800fdce:	9905      	ldr	r1, [sp, #20]
 800fdd0:	e707      	b.n	800fbe2 <__gxx_personality_v0+0x1e6>
 800fdd2:	2301      	movs	r3, #1
 800fdd4:	9308      	str	r3, [sp, #32]
 800fdd6:	e7de      	b.n	800fd96 <__gxx_personality_v0+0x39a>
 800fdd8:	f1b9 0f00 	cmp.w	r9, #0
 800fddc:	d001      	beq.n	800fde2 <__gxx_personality_v0+0x3e6>
 800fdde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fde0:	b35b      	cbz	r3, 800fe3a <__gxx_personality_v0+0x43e>
 800fde2:	1c6b      	adds	r3, r5, #1
 800fde4:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
 800fde8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fdea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d1d1      	bne.n	800fd96 <__gxx_personality_v0+0x39a>
 800fdf2:	e7e1      	b.n	800fdb8 <__gxx_personality_v0+0x3bc>
 800fdf4:	9a06      	ldr	r2, [sp, #24]
 800fdf6:	4638      	mov	r0, r7
 800fdf8:	f7ff fdb4 	bl	800f964 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 800fdfc:	4639      	mov	r1, r7
 800fdfe:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
 800fe02:	f7ff fd8f 	bl	800f924 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800fe06:	00aa      	lsls	r2, r5, #2
 800fe08:	f082 0203 	eor.w	r2, r2, #3
 800fe0c:	43d2      	mvns	r2, r2
 800fe0e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800fe10:	9012      	str	r0, [sp, #72]	; 0x48
 800fe12:	58b3      	ldr	r3, [r6, r2]
 800fe14:	4416      	add	r6, r2
 800fe16:	b133      	cbz	r3, 800fe26 <__gxx_personality_v0+0x42a>
 800fe18:	4632      	mov	r2, r6
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	f852 1f04 	ldr.w	r1, [r2, #4]!
 800fe20:	3301      	adds	r3, #1
 800fe22:	2900      	cmp	r1, #0
 800fe24:	d1fa      	bne.n	800fe1c <__gxx_personality_v0+0x420>
 800fe26:	2204      	movs	r2, #4
 800fe28:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
 800fe2c:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
 800fe30:	f8c9 6034 	str.w	r6, [r9, #52]	; 0x34
 800fe34:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
 800fe38:	e6d6      	b.n	800fbe8 <__gxx_personality_v0+0x1ec>
 800fe3a:	1c6f      	adds	r7, r5, #1
 800fe3c:	ebc7 7387 	rsb	r3, r7, r7, lsl #30
 800fe40:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800fe42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fe44:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 800fe48:	920f      	str	r2, [sp, #60]	; 0x3c
 800fe4a:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 800fe4e:	b921      	cbnz	r1, 800fe5a <__gxx_personality_v0+0x45e>
 800fe50:	e7b2      	b.n	800fdb8 <__gxx_personality_v0+0x3bc>
 800fe52:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800fe56:	2900      	cmp	r1, #0
 800fe58:	d0ae      	beq.n	800fdb8 <__gxx_personality_v0+0x3bc>
 800fe5a:	4439      	add	r1, r7
 800fe5c:	465b      	mov	r3, fp
 800fe5e:	2200      	movs	r2, #0
 800fe60:	4648      	mov	r0, r9
 800fe62:	f7ff fc39 	bl	800f6d8 <__cxa_type_match>
 800fe66:	2800      	cmp	r0, #0
 800fe68:	d0f3      	beq.n	800fe52 <__gxx_personality_v0+0x456>
 800fe6a:	e794      	b.n	800fd96 <__gxx_personality_v0+0x39a>
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	e787      	b.n	800fd80 <__gxx_personality_v0+0x384>
 800fe70:	f899 2007 	ldrb.w	r2, [r9, #7]
 800fe74:	2a01      	cmp	r2, #1
 800fe76:	bf0c      	ite	eq
 800fe78:	f859 2c20 	ldreq.w	r2, [r9, #-32]
 800fe7c:	f109 0258 	addne.w	r2, r9, #88	; 0x58
 800fe80:	920a      	str	r2, [sp, #40]	; 0x28
 800fe82:	e717      	b.n	800fcb4 <__gxx_personality_v0+0x2b8>
 800fe84:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800fe88:	e65a      	b.n	800fb40 <__gxx_personality_v0+0x144>
 800fe8a:	9b08      	ldr	r3, [sp, #32]
 800fe8c:	9f07      	ldr	r7, [sp, #28]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	f47f af68 	bne.w	800fd64 <__gxx_personality_v0+0x368>
 800fe94:	e5c0      	b.n	800fa18 <__gxx_personality_v0+0x1c>
 800fe96:	2c01      	cmp	r4, #1
 800fe98:	f43f ae8d 	beq.w	800fbb6 <__gxx_personality_v0+0x1ba>
 800fe9c:	2d00      	cmp	r5, #0
 800fe9e:	f6bf aea3 	bge.w	800fbe8 <__gxx_personality_v0+0x1ec>
 800fea2:	f7ff fbf7 	bl	800f694 <_ZSt10unexpectedv>
 800fea6:	461d      	mov	r5, r3
 800fea8:	2402      	movs	r4, #2
 800feaa:	e6a1      	b.n	800fbf0 <__gxx_personality_v0+0x1f4>
 800feac:	f000 f9d2 	bl	8010254 <__cxa_begin_catch>
 800feb0:	e681      	b.n	800fbb6 <__gxx_personality_v0+0x1ba>
 800feb2:	bf00      	nop

0800feb4 <_ZdlPvj>:
 800feb4:	f000 b8a6 	b.w	8010004 <_ZdlPv>

0800feb8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 800feb8:	b570      	push	{r4, r5, r6, lr}
 800feba:	6803      	ldr	r3, [r0, #0]
 800febc:	b084      	sub	sp, #16
 800febe:	2400      	movs	r4, #0
 800fec0:	699e      	ldr	r6, [r3, #24]
 800fec2:	9400      	str	r4, [sp, #0]
 800fec4:	2310      	movs	r3, #16
 800fec6:	4615      	mov	r5, r2
 800fec8:	9302      	str	r3, [sp, #8]
 800feca:	6812      	ldr	r2, [r2, #0]
 800fecc:	f88d 4004 	strb.w	r4, [sp, #4]
 800fed0:	466b      	mov	r3, sp
 800fed2:	9403      	str	r4, [sp, #12]
 800fed4:	47b0      	blx	r6
 800fed6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800feda:	f003 0306 	and.w	r3, r3, #6
 800fede:	2b06      	cmp	r3, #6
 800fee0:	bf03      	ittte	eq
 800fee2:	9b00      	ldreq	r3, [sp, #0]
 800fee4:	602b      	streq	r3, [r5, #0]
 800fee6:	2001      	moveq	r0, #1
 800fee8:	4620      	movne	r0, r4
 800feea:	b004      	add	sp, #16
 800feec:	bd70      	pop	{r4, r5, r6, pc}
 800feee:	bf00      	nop

0800fef0 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 800fef0:	9800      	ldr	r0, [sp, #0]
 800fef2:	4290      	cmp	r0, r2
 800fef4:	bf0c      	ite	eq
 800fef6:	2006      	moveq	r0, #6
 800fef8:	2001      	movne	r0, #1
 800fefa:	4770      	bx	lr

0800fefc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 800fefc:	b510      	push	{r4, lr}
 800fefe:	4b03      	ldr	r3, [pc, #12]	; (800ff0c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 800ff00:	6003      	str	r3, [r0, #0]
 800ff02:	4604      	mov	r4, r0
 800ff04:	f000 f854 	bl	800ffb0 <_ZNSt9type_infoD1Ev>
 800ff08:	4620      	mov	r0, r4
 800ff0a:	bd10      	pop	{r4, pc}
 800ff0c:	08017880 	.word	0x08017880

0800ff10 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 800ff10:	b510      	push	{r4, lr}
 800ff12:	4b05      	ldr	r3, [pc, #20]	; (800ff28 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
 800ff14:	6003      	str	r3, [r0, #0]
 800ff16:	4604      	mov	r4, r0
 800ff18:	f000 f84a 	bl	800ffb0 <_ZNSt9type_infoD1Ev>
 800ff1c:	4620      	mov	r0, r4
 800ff1e:	2108      	movs	r1, #8
 800ff20:	f7ff ffc8 	bl	800feb4 <_ZdlPvj>
 800ff24:	4620      	mov	r0, r4
 800ff26:	bd10      	pop	{r4, pc}
 800ff28:	08017880 	.word	0x08017880

0800ff2c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 800ff2c:	b538      	push	{r3, r4, r5, lr}
 800ff2e:	4615      	mov	r5, r2
 800ff30:	461c      	mov	r4, r3
 800ff32:	f000 f841 	bl	800ffb8 <_ZNKSt9type_infoeqERKS_>
 800ff36:	b120      	cbz	r0, 800ff42 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 800ff38:	2208      	movs	r2, #8
 800ff3a:	2306      	movs	r3, #6
 800ff3c:	6025      	str	r5, [r4, #0]
 800ff3e:	60e2      	str	r2, [r4, #12]
 800ff40:	7123      	strb	r3, [r4, #4]
 800ff42:	bd38      	pop	{r3, r4, r5, pc}

0800ff44 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 800ff44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff48:	4617      	mov	r7, r2
 800ff4a:	461c      	mov	r4, r3
 800ff4c:	4606      	mov	r6, r0
 800ff4e:	460d      	mov	r5, r1
 800ff50:	f000 f832 	bl	800ffb8 <_ZNKSt9type_infoeqERKS_>
 800ff54:	b908      	cbnz	r0, 800ff5a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
 800ff56:	2c03      	cmp	r4, #3
 800ff58:	d901      	bls.n	800ff5e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x1a>
 800ff5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff5e:	682b      	ldr	r3, [r5, #0]
 800ff60:	463a      	mov	r2, r7
 800ff62:	4631      	mov	r1, r6
 800ff64:	4628      	mov	r0, r5
 800ff66:	695b      	ldr	r3, [r3, #20]
 800ff68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff6c:	4718      	bx	r3
 800ff6e:	bf00      	nop

0800ff70 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 800ff70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff72:	b083      	sub	sp, #12
 800ff74:	4617      	mov	r7, r2
 800ff76:	9d08      	ldr	r5, [sp, #32]
 800ff78:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ff7a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800ff7c:	428d      	cmp	r5, r1
 800ff7e:	4606      	mov	r6, r0
 800ff80:	d00b      	beq.n	800ff9a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2a>
 800ff82:	4619      	mov	r1, r3
 800ff84:	4630      	mov	r0, r6
 800ff86:	f000 f817 	bl	800ffb8 <_ZNKSt9type_infoeqERKS_>
 800ff8a:	b118      	cbz	r0, 800ff94 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 800ff8c:	2301      	movs	r3, #1
 800ff8e:	6025      	str	r5, [r4, #0]
 800ff90:	7127      	strb	r7, [r4, #4]
 800ff92:	71a3      	strb	r3, [r4, #6]
 800ff94:	2000      	movs	r0, #0
 800ff96:	b003      	add	sp, #12
 800ff98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ff9c:	9301      	str	r3, [sp, #4]
 800ff9e:	f000 f80b 	bl	800ffb8 <_ZNKSt9type_infoeqERKS_>
 800ffa2:	b118      	cbz	r0, 800ffac <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x3c>
 800ffa4:	2000      	movs	r0, #0
 800ffa6:	7167      	strb	r7, [r4, #5]
 800ffa8:	b003      	add	sp, #12
 800ffaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ffac:	9b01      	ldr	r3, [sp, #4]
 800ffae:	e7e8      	b.n	800ff82 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x12>

0800ffb0 <_ZNSt9type_infoD1Ev>:
 800ffb0:	4770      	bx	lr
 800ffb2:	bf00      	nop

0800ffb4 <_ZNKSt9type_info14__is_pointer_pEv>:
 800ffb4:	2000      	movs	r0, #0
 800ffb6:	4770      	bx	lr

0800ffb8 <_ZNKSt9type_infoeqERKS_>:
 800ffb8:	4281      	cmp	r1, r0
 800ffba:	d011      	beq.n	800ffe0 <_ZNKSt9type_infoeqERKS_+0x28>
 800ffbc:	b508      	push	{r3, lr}
 800ffbe:	6840      	ldr	r0, [r0, #4]
 800ffc0:	7803      	ldrb	r3, [r0, #0]
 800ffc2:	2b2a      	cmp	r3, #42	; 0x2a
 800ffc4:	d00a      	beq.n	800ffdc <_ZNKSt9type_infoeqERKS_+0x24>
 800ffc6:	6849      	ldr	r1, [r1, #4]
 800ffc8:	780b      	ldrb	r3, [r1, #0]
 800ffca:	2b2a      	cmp	r3, #42	; 0x2a
 800ffcc:	bf08      	it	eq
 800ffce:	3101      	addeq	r1, #1
 800ffd0:	f7f6 fca6 	bl	8006920 <strcmp>
 800ffd4:	fab0 f080 	clz	r0, r0
 800ffd8:	0940      	lsrs	r0, r0, #5
 800ffda:	bd08      	pop	{r3, pc}
 800ffdc:	2000      	movs	r0, #0
 800ffde:	bd08      	pop	{r3, pc}
 800ffe0:	2001      	movs	r0, #1
 800ffe2:	4770      	bx	lr

0800ffe4 <_ZNSt9exceptionD1Ev>:
 800ffe4:	4770      	bx	lr
 800ffe6:	bf00      	nop

0800ffe8 <_ZNSt13bad_exceptionD1Ev>:
 800ffe8:	4770      	bx	lr
 800ffea:	bf00      	nop

0800ffec <_ZGTtNKSt13bad_exception4whatEv>:
 800ffec:	4800      	ldr	r0, [pc, #0]	; (800fff0 <_ZGTtNKSt13bad_exception4whatEv+0x4>)
 800ffee:	4770      	bx	lr
 800fff0:	080178bc 	.word	0x080178bc

0800fff4 <_ZNSt13bad_exceptionD0Ev>:
 800fff4:	b510      	push	{r4, lr}
 800fff6:	2104      	movs	r1, #4
 800fff8:	4604      	mov	r4, r0
 800fffa:	f7ff ff5b 	bl	800feb4 <_ZdlPvj>
 800fffe:	4620      	mov	r0, r4
 8010000:	bd10      	pop	{r4, pc}
 8010002:	bf00      	nop

08010004 <_ZdlPv>:
 8010004:	f001 be3c 	b.w	8011c80 <free>

08010008 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
 8010008:	b570      	push	{r4, r5, r6, lr}
 801000a:	4b3c      	ldr	r3, [pc, #240]	; (80100fc <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
 801000c:	781a      	ldrb	r2, [r3, #0]
 801000e:	b082      	sub	sp, #8
 8010010:	2a00      	cmp	r2, #0
 8010012:	d135      	bne.n	8010080 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x78>
 8010014:	2401      	movs	r4, #1
 8010016:	701c      	strb	r4, [r3, #0]
 8010018:	f000 fb00 	bl	801061c <__cxa_current_exception_type>
 801001c:	2800      	cmp	r0, #0
 801001e:	d05b      	beq.n	80100d8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xd0>
 8010020:	6844      	ldr	r4, [r0, #4]
 8010022:	4d37      	ldr	r5, [pc, #220]	; (8010100 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 8010024:	7823      	ldrb	r3, [r4, #0]
 8010026:	2b2a      	cmp	r3, #42	; 0x2a
 8010028:	ab02      	add	r3, sp, #8
 801002a:	f04f 32ff 	mov.w	r2, #4294967295
 801002e:	bf08      	it	eq
 8010030:	3401      	addeq	r4, #1
 8010032:	f843 2d04 	str.w	r2, [r3, #-4]!
 8010036:	2200      	movs	r2, #0
 8010038:	4611      	mov	r1, r2
 801003a:	4620      	mov	r0, r4
 801003c:	f7f6 fbae 	bl	800679c <__cxa_demangle>
 8010040:	682b      	ldr	r3, [r5, #0]
 8010042:	4606      	mov	r6, r0
 8010044:	68db      	ldr	r3, [r3, #12]
 8010046:	482f      	ldr	r0, [pc, #188]	; (8010104 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
 8010048:	2230      	movs	r2, #48	; 0x30
 801004a:	2101      	movs	r1, #1
 801004c:	f001 fdd8 	bl	8011c00 <fwrite>
 8010050:	9b01      	ldr	r3, [sp, #4]
 8010052:	b17b      	cbz	r3, 8010074 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6c>
 8010054:	682b      	ldr	r3, [r5, #0]
 8010056:	4620      	mov	r0, r4
 8010058:	68d9      	ldr	r1, [r3, #12]
 801005a:	f001 fc1d 	bl	8011898 <fputs>
 801005e:	682b      	ldr	r3, [r5, #0]
 8010060:	4829      	ldr	r0, [pc, #164]	; (8010108 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
 8010062:	68db      	ldr	r3, [r3, #12]
 8010064:	2202      	movs	r2, #2
 8010066:	2101      	movs	r1, #1
 8010068:	f001 fdca 	bl	8011c00 <fwrite>
 801006c:	9b01      	ldr	r3, [sp, #4]
 801006e:	b18b      	cbz	r3, 8010094 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
 8010070:	f000 fa9c 	bl	80105ac <__cxa_rethrow>
 8010074:	682b      	ldr	r3, [r5, #0]
 8010076:	4630      	mov	r0, r6
 8010078:	68d9      	ldr	r1, [r3, #12]
 801007a:	f001 fc0d 	bl	8011898 <fputs>
 801007e:	e7ee      	b.n	801005e <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x56>
 8010080:	4b1f      	ldr	r3, [pc, #124]	; (8010100 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 8010082:	4822      	ldr	r0, [pc, #136]	; (801010c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	221d      	movs	r2, #29
 8010088:	68db      	ldr	r3, [r3, #12]
 801008a:	2101      	movs	r1, #1
 801008c:	f001 fdb8 	bl	8011c00 <fwrite>
 8010090:	f001 fb61 	bl	8011756 <abort>
 8010094:	4630      	mov	r0, r6
 8010096:	f001 fdf3 	bl	8011c80 <free>
 801009a:	e7e9      	b.n	8010070 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x68>
 801009c:	2901      	cmp	r1, #1
 801009e:	460c      	mov	r4, r1
 80100a0:	d127      	bne.n	80100f2 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xea>
 80100a2:	f000 f8d7 	bl	8010254 <__cxa_begin_catch>
 80100a6:	6803      	ldr	r3, [r0, #0]
 80100a8:	689b      	ldr	r3, [r3, #8]
 80100aa:	4798      	blx	r3
 80100ac:	682b      	ldr	r3, [r5, #0]
 80100ae:	4606      	mov	r6, r0
 80100b0:	68db      	ldr	r3, [r3, #12]
 80100b2:	4817      	ldr	r0, [pc, #92]	; (8010110 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
 80100b4:	4621      	mov	r1, r4
 80100b6:	220b      	movs	r2, #11
 80100b8:	f001 fda2 	bl	8011c00 <fwrite>
 80100bc:	682b      	ldr	r3, [r5, #0]
 80100be:	4630      	mov	r0, r6
 80100c0:	68d9      	ldr	r1, [r3, #12]
 80100c2:	f001 fbe9 	bl	8011898 <fputs>
 80100c6:	682b      	ldr	r3, [r5, #0]
 80100c8:	200a      	movs	r0, #10
 80100ca:	68d9      	ldr	r1, [r3, #12]
 80100cc:	f001 fb8e 	bl	80117ec <fputc>
 80100d0:	f000 f8fe 	bl	80102d0 <__cxa_end_catch>
 80100d4:	f001 fb3f 	bl	8011756 <abort>
 80100d8:	4b09      	ldr	r3, [pc, #36]	; (8010100 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 80100da:	480e      	ldr	r0, [pc, #56]	; (8010114 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	4621      	mov	r1, r4
 80100e0:	68db      	ldr	r3, [r3, #12]
 80100e2:	222d      	movs	r2, #45	; 0x2d
 80100e4:	f001 fd8c 	bl	8011c00 <fwrite>
 80100e8:	e7f4      	b.n	80100d4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xcc>
 80100ea:	f000 f8f1 	bl	80102d0 <__cxa_end_catch>
 80100ee:	f7ff faed 	bl	800f6cc <__cxa_end_cleanup>
 80100f2:	f000 f8af 	bl	8010254 <__cxa_begin_catch>
 80100f6:	f000 f8eb 	bl	80102d0 <__cxa_end_catch>
 80100fa:	e7eb      	b.n	80100d4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xcc>
 80100fc:	200007f0 	.word	0x200007f0
 8010100:	20000014 	.word	0x20000014
 8010104:	08017990 	.word	0x08017990
 8010108:	080179c4 	.word	0x080179c4
 801010c:	08017970 	.word	0x08017970
 8010110:	080179f8 	.word	0x080179f8
 8010114:	080179c8 	.word	0x080179c8

08010118 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8010118:	7803      	ldrb	r3, [r0, #0]
 801011a:	2b47      	cmp	r3, #71	; 0x47
 801011c:	d001      	beq.n	8010122 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0xa>
 801011e:	2000      	movs	r0, #0
 8010120:	4770      	bx	lr
 8010122:	7843      	ldrb	r3, [r0, #1]
 8010124:	2b4e      	cmp	r3, #78	; 0x4e
 8010126:	d1fa      	bne.n	801011e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 8010128:	7883      	ldrb	r3, [r0, #2]
 801012a:	2b55      	cmp	r3, #85	; 0x55
 801012c:	d1f7      	bne.n	801011e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 801012e:	78c3      	ldrb	r3, [r0, #3]
 8010130:	2b43      	cmp	r3, #67	; 0x43
 8010132:	d1f4      	bne.n	801011e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 8010134:	7903      	ldrb	r3, [r0, #4]
 8010136:	2b43      	cmp	r3, #67	; 0x43
 8010138:	d1f1      	bne.n	801011e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 801013a:	7943      	ldrb	r3, [r0, #5]
 801013c:	2b2b      	cmp	r3, #43	; 0x2b
 801013e:	d1ee      	bne.n	801011e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 8010140:	7983      	ldrb	r3, [r0, #6]
 8010142:	2b2b      	cmp	r3, #43	; 0x2b
 8010144:	d1eb      	bne.n	801011e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 8010146:	79c0      	ldrb	r0, [r0, #7]
 8010148:	2801      	cmp	r0, #1
 801014a:	bf8c      	ite	hi
 801014c:	2000      	movhi	r0, #0
 801014e:	2001      	movls	r0, #1
 8010150:	4770      	bx	lr
 8010152:	bf00      	nop

08010154 <__cxa_call_terminate>:
 8010154:	b510      	push	{r4, lr}
 8010156:	b130      	cbz	r0, 8010166 <__cxa_call_terminate+0x12>
 8010158:	4604      	mov	r4, r0
 801015a:	f000 f87b 	bl	8010254 <__cxa_begin_catch>
 801015e:	4620      	mov	r0, r4
 8010160:	f7ff ffda 	bl	8010118 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8010164:	b908      	cbnz	r0, 801016a <__cxa_call_terminate+0x16>
 8010166:	f7ff fa87 	bl	800f678 <_ZSt9terminatev>
 801016a:	f854 0c14 	ldr.w	r0, [r4, #-20]
 801016e:	f7ff fa6f 	bl	800f650 <_ZN10__cxxabiv111__terminateEPFvvE>
 8010172:	bf00      	nop

08010174 <__cxa_call_unexpected>:
 8010174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010178:	b085      	sub	sp, #20
 801017a:	4602      	mov	r2, r0
 801017c:	f7ff ffcc 	bl	8010118 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8010180:	b160      	cbz	r0, 801019c <__cxa_call_unexpected+0x28>
 8010182:	f852 8c18 	ldr.w	r8, [r2, #-24]
 8010186:	f852 5c14 	ldr.w	r5, [r2, #-20]
 801018a:	6a96      	ldr	r6, [r2, #40]	; 0x28
 801018c:	6b17      	ldr	r7, [r2, #48]	; 0x30
 801018e:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8010190:	4610      	mov	r0, r2
 8010192:	f000 f85f 	bl	8010254 <__cxa_begin_catch>
 8010196:	4640      	mov	r0, r8
 8010198:	f7ff fa78 	bl	800f68c <_ZN10__cxxabiv112__unexpectedEPFvvE>
 801019c:	4610      	mov	r0, r2
 801019e:	f000 f859 	bl	8010254 <__cxa_begin_catch>
 80101a2:	f7ff fa77 	bl	800f694 <_ZSt10unexpectedv>
 80101a6:	f000 f855 	bl	8010254 <__cxa_begin_catch>
 80101aa:	f7ff fa65 	bl	800f678 <_ZSt9terminatev>
 80101ae:	f000 f851 	bl	8010254 <__cxa_begin_catch>
 80101b2:	f000 fa5d 	bl	8010670 <__cxa_get_globals_fast>
 80101b6:	6803      	ldr	r3, [r0, #0]
 80101b8:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80101bc:	2a01      	cmp	r2, #1
 80101be:	d036      	beq.n	801022e <__cxa_call_unexpected+0xba>
 80101c0:	f103 0278 	add.w	r2, r3, #120	; 0x78
 80101c4:	f10d 0a10 	add.w	sl, sp, #16
 80101c8:	f04f 0800 	mov.w	r8, #0
 80101cc:	3320      	adds	r3, #32
 80101ce:	f84a 2d08 	str.w	r2, [sl, #-8]!
 80101d2:	f027 0b03 	bic.w	fp, r7, #3
 80101d6:	9301      	str	r3, [sp, #4]
 80101d8:	46c1      	mov	r9, r8
 80101da:	45b1      	cmp	r9, r6
 80101dc:	da1b      	bge.n	8010216 <__cxa_call_unexpected+0xa2>
 80101de:	6827      	ldr	r7, [r4, #0]
 80101e0:	b107      	cbz	r7, 80101e4 <__cxa_call_unexpected+0x70>
 80101e2:	4427      	add	r7, r4
 80101e4:	4653      	mov	r3, sl
 80101e6:	2200      	movs	r2, #0
 80101e8:	4639      	mov	r1, r7
 80101ea:	9801      	ldr	r0, [sp, #4]
 80101ec:	f7ff fa74 	bl	800f6d8 <__cxa_type_match>
 80101f0:	bb10      	cbnz	r0, 8010238 <__cxa_call_unexpected+0xc4>
 80101f2:	683b      	ldr	r3, [r7, #0]
 80101f4:	4914      	ldr	r1, [pc, #80]	; (8010248 <__cxa_call_unexpected+0xd4>)
 80101f6:	691b      	ldr	r3, [r3, #16]
 80101f8:	9300      	str	r3, [sp, #0]
 80101fa:	aa04      	add	r2, sp, #16
 80101fc:	2301      	movs	r3, #1
 80101fe:	f842 0d04 	str.w	r0, [r2, #-4]!
 8010202:	4638      	mov	r0, r7
 8010204:	9f00      	ldr	r7, [sp, #0]
 8010206:	47b8      	blx	r7
 8010208:	2800      	cmp	r0, #0
 801020a:	bf18      	it	ne
 801020c:	4680      	movne	r8, r0
 801020e:	f109 0901 	add.w	r9, r9, #1
 8010212:	445c      	add	r4, fp
 8010214:	e7e1      	b.n	80101da <__cxa_call_unexpected+0x66>
 8010216:	f1b8 0f00 	cmp.w	r8, #0
 801021a:	d00a      	beq.n	8010232 <__cxa_call_unexpected+0xbe>
 801021c:	2004      	movs	r0, #4
 801021e:	f000 f929 	bl	8010474 <__cxa_allocate_exception>
 8010222:	4b0a      	ldr	r3, [pc, #40]	; (801024c <__cxa_call_unexpected+0xd8>)
 8010224:	6003      	str	r3, [r0, #0]
 8010226:	4a0a      	ldr	r2, [pc, #40]	; (8010250 <__cxa_call_unexpected+0xdc>)
 8010228:	4907      	ldr	r1, [pc, #28]	; (8010248 <__cxa_call_unexpected+0xd4>)
 801022a:	f000 f981 	bl	8010530 <__cxa_throw>
 801022e:	681a      	ldr	r2, [r3, #0]
 8010230:	e7c8      	b.n	80101c4 <__cxa_call_unexpected+0x50>
 8010232:	4628      	mov	r0, r5
 8010234:	f7ff fa0c 	bl	800f650 <_ZN10__cxxabiv111__terminateEPFvvE>
 8010238:	f000 f9b8 	bl	80105ac <__cxa_rethrow>
 801023c:	f000 f848 	bl	80102d0 <__cxa_end_catch>
 8010240:	f000 f846 	bl	80102d0 <__cxa_end_catch>
 8010244:	f7ff fa42 	bl	800f6cc <__cxa_end_cleanup>
 8010248:	080178e0 	.word	0x080178e0
 801024c:	08017964 	.word	0x08017964
 8010250:	0800ffe9 	.word	0x0800ffe9

08010254 <__cxa_begin_catch>:
 8010254:	b538      	push	{r3, r4, r5, lr}
 8010256:	4604      	mov	r4, r0
 8010258:	f000 fa0e 	bl	8010678 <__cxa_get_globals>
 801025c:	7822      	ldrb	r2, [r4, #0]
 801025e:	6803      	ldr	r3, [r0, #0]
 8010260:	2a47      	cmp	r2, #71	; 0x47
 8010262:	f1a4 0120 	sub.w	r1, r4, #32
 8010266:	d004      	beq.n	8010272 <__cxa_begin_catch+0x1e>
 8010268:	bb83      	cbnz	r3, 80102cc <__cxa_begin_catch+0x78>
 801026a:	461c      	mov	r4, r3
 801026c:	6001      	str	r1, [r0, #0]
 801026e:	4620      	mov	r0, r4
 8010270:	bd38      	pop	{r3, r4, r5, pc}
 8010272:	7862      	ldrb	r2, [r4, #1]
 8010274:	2a4e      	cmp	r2, #78	; 0x4e
 8010276:	d1f7      	bne.n	8010268 <__cxa_begin_catch+0x14>
 8010278:	78a2      	ldrb	r2, [r4, #2]
 801027a:	2a55      	cmp	r2, #85	; 0x55
 801027c:	d1f4      	bne.n	8010268 <__cxa_begin_catch+0x14>
 801027e:	78e2      	ldrb	r2, [r4, #3]
 8010280:	2a43      	cmp	r2, #67	; 0x43
 8010282:	d1f1      	bne.n	8010268 <__cxa_begin_catch+0x14>
 8010284:	7922      	ldrb	r2, [r4, #4]
 8010286:	2a43      	cmp	r2, #67	; 0x43
 8010288:	d1ee      	bne.n	8010268 <__cxa_begin_catch+0x14>
 801028a:	7962      	ldrb	r2, [r4, #5]
 801028c:	2a2b      	cmp	r2, #43	; 0x2b
 801028e:	d1eb      	bne.n	8010268 <__cxa_begin_catch+0x14>
 8010290:	79a2      	ldrb	r2, [r4, #6]
 8010292:	2a2b      	cmp	r2, #43	; 0x2b
 8010294:	d1e8      	bne.n	8010268 <__cxa_begin_catch+0x14>
 8010296:	79e2      	ldrb	r2, [r4, #7]
 8010298:	2a01      	cmp	r2, #1
 801029a:	d8e5      	bhi.n	8010268 <__cxa_begin_catch+0x14>
 801029c:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 80102a0:	2a00      	cmp	r2, #0
 80102a2:	db10      	blt.n	80102c6 <__cxa_begin_catch+0x72>
 80102a4:	3201      	adds	r2, #1
 80102a6:	6845      	ldr	r5, [r0, #4]
 80102a8:	f844 2c0c 	str.w	r2, [r4, #-12]
 80102ac:	3d01      	subs	r5, #1
 80102ae:	6045      	str	r5, [r0, #4]
 80102b0:	428b      	cmp	r3, r1
 80102b2:	bf1c      	itt	ne
 80102b4:	f844 3c10 	strne.w	r3, [r4, #-16]
 80102b8:	6001      	strne	r1, [r0, #0]
 80102ba:	4620      	mov	r0, r4
 80102bc:	6a64      	ldr	r4, [r4, #36]	; 0x24
 80102be:	f7f7 fb6d 	bl	800799c <_Unwind_Complete>
 80102c2:	4620      	mov	r0, r4
 80102c4:	bd38      	pop	{r3, r4, r5, pc}
 80102c6:	f1c2 0201 	rsb	r2, r2, #1
 80102ca:	e7ec      	b.n	80102a6 <__cxa_begin_catch+0x52>
 80102cc:	f7ff f9d4 	bl	800f678 <_ZSt9terminatev>

080102d0 <__cxa_end_catch>:
 80102d0:	b508      	push	{r3, lr}
 80102d2:	f000 f9cd 	bl	8010670 <__cxa_get_globals_fast>
 80102d6:	4602      	mov	r2, r0
 80102d8:	6800      	ldr	r0, [r0, #0]
 80102da:	2800      	cmp	r0, #0
 80102dc:	d03d      	beq.n	801035a <__cxa_end_catch+0x8a>
 80102de:	f890 3020 	ldrb.w	r3, [r0, #32]
 80102e2:	2b47      	cmp	r3, #71	; 0x47
 80102e4:	d006      	beq.n	80102f4 <__cxa_end_catch+0x24>
 80102e6:	2300      	movs	r3, #0
 80102e8:	6013      	str	r3, [r2, #0]
 80102ea:	3020      	adds	r0, #32
 80102ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80102f0:	f7f7 bb56 	b.w	80079a0 <_Unwind_DeleteException>
 80102f4:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80102f8:	2b4e      	cmp	r3, #78	; 0x4e
 80102fa:	d1f4      	bne.n	80102e6 <__cxa_end_catch+0x16>
 80102fc:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8010300:	2b55      	cmp	r3, #85	; 0x55
 8010302:	d1f0      	bne.n	80102e6 <__cxa_end_catch+0x16>
 8010304:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8010308:	2b43      	cmp	r3, #67	; 0x43
 801030a:	d1ec      	bne.n	80102e6 <__cxa_end_catch+0x16>
 801030c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8010310:	2b43      	cmp	r3, #67	; 0x43
 8010312:	d1e8      	bne.n	80102e6 <__cxa_end_catch+0x16>
 8010314:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8010318:	2b2b      	cmp	r3, #43	; 0x2b
 801031a:	d1e4      	bne.n	80102e6 <__cxa_end_catch+0x16>
 801031c:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 8010320:	2b2b      	cmp	r3, #43	; 0x2b
 8010322:	d1e0      	bne.n	80102e6 <__cxa_end_catch+0x16>
 8010324:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 8010328:	2b01      	cmp	r3, #1
 801032a:	d8dc      	bhi.n	80102e6 <__cxa_end_catch+0x16>
 801032c:	6943      	ldr	r3, [r0, #20]
 801032e:	2b00      	cmp	r3, #0
 8010330:	db05      	blt.n	801033e <__cxa_end_catch+0x6e>
 8010332:	3b01      	subs	r3, #1
 8010334:	d008      	beq.n	8010348 <__cxa_end_catch+0x78>
 8010336:	1c5a      	adds	r2, r3, #1
 8010338:	d00d      	beq.n	8010356 <__cxa_end_catch+0x86>
 801033a:	6143      	str	r3, [r0, #20]
 801033c:	bd08      	pop	{r3, pc}
 801033e:	3301      	adds	r3, #1
 8010340:	d1fb      	bne.n	801033a <__cxa_end_catch+0x6a>
 8010342:	6901      	ldr	r1, [r0, #16]
 8010344:	6011      	str	r1, [r2, #0]
 8010346:	e7f8      	b.n	801033a <__cxa_end_catch+0x6a>
 8010348:	6903      	ldr	r3, [r0, #16]
 801034a:	6013      	str	r3, [r2, #0]
 801034c:	3020      	adds	r0, #32
 801034e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010352:	f7f7 bb25 	b.w	80079a0 <_Unwind_DeleteException>
 8010356:	f7ff f98f 	bl	800f678 <_ZSt9terminatev>
 801035a:	bd08      	pop	{r3, pc}

0801035c <_Znwj>:
 801035c:	b510      	push	{r4, lr}
 801035e:	2800      	cmp	r0, #0
 8010360:	bf14      	ite	ne
 8010362:	4604      	movne	r4, r0
 8010364:	2401      	moveq	r4, #1
 8010366:	4620      	mov	r0, r4
 8010368:	f001 fc82 	bl	8011c70 <malloc>
 801036c:	b100      	cbz	r0, 8010370 <_Znwj+0x14>
 801036e:	bd10      	pop	{r4, pc}
 8010370:	f000 f986 	bl	8010680 <_ZSt15get_new_handlerv>
 8010374:	b108      	cbz	r0, 801037a <_Znwj+0x1e>
 8010376:	4780      	blx	r0
 8010378:	e7f5      	b.n	8010366 <_Znwj+0xa>
 801037a:	2004      	movs	r0, #4
 801037c:	f000 f87a 	bl	8010474 <__cxa_allocate_exception>
 8010380:	4b02      	ldr	r3, [pc, #8]	; (801038c <_Znwj+0x30>)
 8010382:	6003      	str	r3, [r0, #0]
 8010384:	4a02      	ldr	r2, [pc, #8]	; (8010390 <_Znwj+0x34>)
 8010386:	4903      	ldr	r1, [pc, #12]	; (8010394 <_Znwj+0x38>)
 8010388:	f000 f8d2 	bl	8010530 <__cxa_throw>
 801038c:	08017a38 	.word	0x08017a38
 8010390:	08010641 	.word	0x08010641
 8010394:	08017a14 	.word	0x08017a14

08010398 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
 8010398:	b4f0      	push	{r4, r5, r6, r7}
 801039a:	4c1b      	ldr	r4, [pc, #108]	; (8010408 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>)
 801039c:	f850 7c08 	ldr.w	r7, [r0, #-8]
 80103a0:	6861      	ldr	r1, [r4, #4]
 80103a2:	f1a0 0608 	sub.w	r6, r0, #8
 80103a6:	b1c9      	cbz	r1, 80103dc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x44>
 80103a8:	19f5      	adds	r5, r6, r7
 80103aa:	42a9      	cmp	r1, r5
 80103ac:	d01b      	beq.n	80103e6 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x4e>
 80103ae:	684a      	ldr	r2, [r1, #4]
 80103b0:	b32a      	cbz	r2, 80103fe <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x66>
 80103b2:	4295      	cmp	r5, r2
 80103b4:	d303      	bcc.n	80103be <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x26>
 80103b6:	e022      	b.n	80103fe <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x66>
 80103b8:	429d      	cmp	r5, r3
 80103ba:	d205      	bcs.n	80103c8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
 80103bc:	461a      	mov	r2, r3
 80103be:	6853      	ldr	r3, [r2, #4]
 80103c0:	1d0c      	adds	r4, r1, #4
 80103c2:	4611      	mov	r1, r2
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d1f7      	bne.n	80103b8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x20>
 80103c8:	6811      	ldr	r1, [r2, #0]
 80103ca:	1855      	adds	r5, r2, r1
 80103cc:	42ae      	cmp	r6, r5
 80103ce:	d013      	beq.n	80103f8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x60>
 80103d0:	f840 3c04 	str.w	r3, [r0, #-4]
 80103d4:	6823      	ldr	r3, [r4, #0]
 80103d6:	605e      	str	r6, [r3, #4]
 80103d8:	bcf0      	pop	{r4, r5, r6, r7}
 80103da:	4770      	bx	lr
 80103dc:	f840 1c04 	str.w	r1, [r0, #-4]
 80103e0:	6066      	str	r6, [r4, #4]
 80103e2:	bcf0      	pop	{r4, r5, r6, r7}
 80103e4:	4770      	bx	lr
 80103e6:	680b      	ldr	r3, [r1, #0]
 80103e8:	684a      	ldr	r2, [r1, #4]
 80103ea:	f840 2c04 	str.w	r2, [r0, #-4]
 80103ee:	441f      	add	r7, r3
 80103f0:	f840 7c08 	str.w	r7, [r0, #-8]
 80103f4:	6066      	str	r6, [r4, #4]
 80103f6:	e7ef      	b.n	80103d8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x40>
 80103f8:	440f      	add	r7, r1
 80103fa:	6017      	str	r7, [r2, #0]
 80103fc:	e7ec      	b.n	80103d8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x40>
 80103fe:	4613      	mov	r3, r2
 8010400:	3404      	adds	r4, #4
 8010402:	460a      	mov	r2, r1
 8010404:	e7e0      	b.n	80103c8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
 8010406:	bf00      	nop
 8010408:	200007f4 	.word	0x200007f4

0801040c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
 801040c:	b430      	push	{r4, r5}
 801040e:	4c18      	ldr	r4, [pc, #96]	; (8010470 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x64>)
 8010410:	f100 0108 	add.w	r1, r0, #8
 8010414:	6863      	ldr	r3, [r4, #4]
 8010416:	2908      	cmp	r1, #8
 8010418:	bf38      	it	cc
 801041a:	2108      	movcc	r1, #8
 801041c:	b313      	cbz	r3, 8010464 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
 801041e:	3107      	adds	r1, #7
 8010420:	681a      	ldr	r2, [r3, #0]
 8010422:	f021 0107 	bic.w	r1, r1, #7
 8010426:	4291      	cmp	r1, r2
 8010428:	d804      	bhi.n	8010434 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x28>
 801042a:	e01d      	b.n	8010468 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x5c>
 801042c:	6802      	ldr	r2, [r0, #0]
 801042e:	4291      	cmp	r1, r2
 8010430:	d905      	bls.n	801043e <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x32>
 8010432:	4603      	mov	r3, r0
 8010434:	6858      	ldr	r0, [r3, #4]
 8010436:	2800      	cmp	r0, #0
 8010438:	d1f8      	bne.n	801042c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x20>
 801043a:	bc30      	pop	{r4, r5}
 801043c:	4770      	bx	lr
 801043e:	3304      	adds	r3, #4
 8010440:	1a52      	subs	r2, r2, r1
 8010442:	2a07      	cmp	r2, #7
 8010444:	d90a      	bls.n	801045c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
 8010446:	1845      	adds	r5, r0, r1
 8010448:	6844      	ldr	r4, [r0, #4]
 801044a:	606c      	str	r4, [r5, #4]
 801044c:	681c      	ldr	r4, [r3, #0]
 801044e:	5042      	str	r2, [r0, r1]
 8010450:	6021      	str	r1, [r4, #0]
 8010452:	601d      	str	r5, [r3, #0]
 8010454:	f104 0008 	add.w	r0, r4, #8
 8010458:	bc30      	pop	{r4, r5}
 801045a:	4770      	bx	lr
 801045c:	6842      	ldr	r2, [r0, #4]
 801045e:	601a      	str	r2, [r3, #0]
 8010460:	4604      	mov	r4, r0
 8010462:	e7f7      	b.n	8010454 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
 8010464:	4618      	mov	r0, r3
 8010466:	e7e8      	b.n	801043a <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x2e>
 8010468:	4618      	mov	r0, r3
 801046a:	1d23      	adds	r3, r4, #4
 801046c:	e7e8      	b.n	8010440 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x34>
 801046e:	bf00      	nop
 8010470:	200007f4 	.word	0x200007f4

08010474 <__cxa_allocate_exception>:
 8010474:	b538      	push	{r3, r4, r5, lr}
 8010476:	f100 0580 	add.w	r5, r0, #128	; 0x80
 801047a:	4628      	mov	r0, r5
 801047c:	f001 fbf8 	bl	8011c70 <malloc>
 8010480:	4604      	mov	r4, r0
 8010482:	b138      	cbz	r0, 8010494 <__cxa_allocate_exception+0x20>
 8010484:	2280      	movs	r2, #128	; 0x80
 8010486:	2100      	movs	r1, #0
 8010488:	4620      	mov	r0, r4
 801048a:	f001 fe43 	bl	8012114 <memset>
 801048e:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8010492:	bd38      	pop	{r3, r4, r5, pc}
 8010494:	4628      	mov	r0, r5
 8010496:	f7ff ffb9 	bl	801040c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
 801049a:	4604      	mov	r4, r0
 801049c:	2800      	cmp	r0, #0
 801049e:	d1f1      	bne.n	8010484 <__cxa_allocate_exception+0x10>
 80104a0:	f7ff f8ea 	bl	800f678 <_ZSt9terminatev>

080104a4 <__cxa_free_exception>:
 80104a4:	4a06      	ldr	r2, [pc, #24]	; (80104c0 <__cxa_free_exception+0x1c>)
 80104a6:	6893      	ldr	r3, [r2, #8]
 80104a8:	3880      	subs	r0, #128	; 0x80
 80104aa:	4298      	cmp	r0, r3
 80104ac:	d905      	bls.n	80104ba <__cxa_free_exception+0x16>
 80104ae:	68d2      	ldr	r2, [r2, #12]
 80104b0:	4413      	add	r3, r2
 80104b2:	4298      	cmp	r0, r3
 80104b4:	d201      	bcs.n	80104ba <__cxa_free_exception+0x16>
 80104b6:	f7ff bf6f 	b.w	8010398 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
 80104ba:	f001 bbe1 	b.w	8011c80 <free>
 80104be:	bf00      	nop
 80104c0:	200007f4 	.word	0x200007f4

080104c4 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 80104c4:	b538      	push	{r3, r4, r5, lr}
 80104c6:	4c08      	ldr	r4, [pc, #32]	; (80104e8 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 80104c8:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
 80104cc:	4628      	mov	r0, r5
 80104ce:	60e5      	str	r5, [r4, #12]
 80104d0:	f001 fbce 	bl	8011c70 <malloc>
 80104d4:	60a0      	str	r0, [r4, #8]
 80104d6:	b120      	cbz	r0, 80104e2 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1e>
 80104d8:	2300      	movs	r3, #0
 80104da:	6060      	str	r0, [r4, #4]
 80104dc:	6005      	str	r5, [r0, #0]
 80104de:	6043      	str	r3, [r0, #4]
 80104e0:	bd38      	pop	{r3, r4, r5, pc}
 80104e2:	60e0      	str	r0, [r4, #12]
 80104e4:	6060      	str	r0, [r4, #4]
 80104e6:	bd38      	pop	{r3, r4, r5, pc}
 80104e8:	200007f4 	.word	0x200007f4

080104ec <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
 80104ec:	2801      	cmp	r0, #1
 80104ee:	b510      	push	{r4, lr}
 80104f0:	d81a      	bhi.n	8010528 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3c>
 80104f2:	f3bf 8f5b 	dmb	ish
 80104f6:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
 80104fa:	e853 2f00 	ldrex	r2, [r3]
 80104fe:	3a01      	subs	r2, #1
 8010500:	e843 2000 	strex	r0, r2, [r3]
 8010504:	2800      	cmp	r0, #0
 8010506:	d1f8      	bne.n	80104fa <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
 8010508:	f3bf 8f5b 	dmb	ish
 801050c:	b95a      	cbnz	r2, 8010526 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3a>
 801050e:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 8010512:	f101 0458 	add.w	r4, r1, #88	; 0x58
 8010516:	b10b      	cbz	r3, 801051c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x30>
 8010518:	4620      	mov	r0, r4
 801051a:	4798      	blx	r3
 801051c:	4620      	mov	r0, r4
 801051e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010522:	f7ff bfbf 	b.w	80104a4 <__cxa_free_exception>
 8010526:	bd10      	pop	{r4, pc}
 8010528:	f851 0c14 	ldr.w	r0, [r1, #-20]
 801052c:	f7ff f890 	bl	800f650 <_ZN10__cxxabiv111__terminateEPFvvE>

08010530 <__cxa_throw>:
 8010530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010532:	4604      	mov	r4, r0
 8010534:	460f      	mov	r7, r1
 8010536:	4616      	mov	r6, r2
 8010538:	f000 f89e 	bl	8010678 <__cxa_get_globals>
 801053c:	6843      	ldr	r3, [r0, #4]
 801053e:	2501      	movs	r5, #1
 8010540:	442b      	add	r3, r5
 8010542:	6043      	str	r3, [r0, #4]
 8010544:	f844 7c78 	str.w	r7, [r4, #-120]
 8010548:	f844 6c74 	str.w	r6, [r4, #-116]
 801054c:	f844 5c80 	str.w	r5, [r4, #-128]
 8010550:	f7ff f8b2 	bl	800f6b8 <_ZSt14get_unexpectedv>
 8010554:	f844 0c70 	str.w	r0, [r4, #-112]
 8010558:	f7ff f8a6 	bl	800f6a8 <_ZSt13get_terminatev>
 801055c:	2347      	movs	r3, #71	; 0x47
 801055e:	2243      	movs	r2, #67	; 0x43
 8010560:	f04f 0e4e 	mov.w	lr, #78	; 0x4e
 8010564:	4910      	ldr	r1, [pc, #64]	; (80105a8 <__cxa_throw+0x78>)
 8010566:	f804 3c58 	strb.w	r3, [r4, #-88]
 801056a:	f1a4 0558 	sub.w	r5, r4, #88	; 0x58
 801056e:	232b      	movs	r3, #43	; 0x2b
 8010570:	2755      	movs	r7, #85	; 0x55
 8010572:	2600      	movs	r6, #0
 8010574:	f844 0c6c 	str.w	r0, [r4, #-108]
 8010578:	f804 ec57 	strb.w	lr, [r4, #-87]
 801057c:	f844 1c50 	str.w	r1, [r4, #-80]
 8010580:	f804 2c55 	strb.w	r2, [r4, #-85]
 8010584:	f804 2c54 	strb.w	r2, [r4, #-84]
 8010588:	f804 3c53 	strb.w	r3, [r4, #-83]
 801058c:	f804 3c52 	strb.w	r3, [r4, #-82]
 8010590:	f804 7c56 	strb.w	r7, [r4, #-86]
 8010594:	f804 6c51 	strb.w	r6, [r4, #-81]
 8010598:	4628      	mov	r0, r5
 801059a:	f7f7 fd9b 	bl	80080d4 <_Unwind_RaiseException>
 801059e:	4628      	mov	r0, r5
 80105a0:	f7ff fe58 	bl	8010254 <__cxa_begin_catch>
 80105a4:	f7ff f868 	bl	800f678 <_ZSt9terminatev>
 80105a8:	080104ed 	.word	0x080104ed

080105ac <__cxa_rethrow>:
 80105ac:	b510      	push	{r4, lr}
 80105ae:	f000 f863 	bl	8010678 <__cxa_get_globals>
 80105b2:	6842      	ldr	r2, [r0, #4]
 80105b4:	6804      	ldr	r4, [r0, #0]
 80105b6:	3201      	adds	r2, #1
 80105b8:	6042      	str	r2, [r0, #4]
 80105ba:	b164      	cbz	r4, 80105d6 <__cxa_rethrow+0x2a>
 80105bc:	f894 2020 	ldrb.w	r2, [r4, #32]
 80105c0:	2a47      	cmp	r2, #71	; 0x47
 80105c2:	d00a      	beq.n	80105da <__cxa_rethrow+0x2e>
 80105c4:	2200      	movs	r2, #0
 80105c6:	6002      	str	r2, [r0, #0]
 80105c8:	3420      	adds	r4, #32
 80105ca:	4620      	mov	r0, r4
 80105cc:	f7f7 fda6 	bl	800811c <_Unwind_Resume_or_Rethrow>
 80105d0:	4620      	mov	r0, r4
 80105d2:	f7ff fe3f 	bl	8010254 <__cxa_begin_catch>
 80105d6:	f7ff f84f 	bl	800f678 <_ZSt9terminatev>
 80105da:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 80105de:	2a4e      	cmp	r2, #78	; 0x4e
 80105e0:	d1f0      	bne.n	80105c4 <__cxa_rethrow+0x18>
 80105e2:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 80105e6:	2a55      	cmp	r2, #85	; 0x55
 80105e8:	d1ec      	bne.n	80105c4 <__cxa_rethrow+0x18>
 80105ea:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 80105ee:	2a43      	cmp	r2, #67	; 0x43
 80105f0:	d1e8      	bne.n	80105c4 <__cxa_rethrow+0x18>
 80105f2:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80105f6:	2a43      	cmp	r2, #67	; 0x43
 80105f8:	d1e4      	bne.n	80105c4 <__cxa_rethrow+0x18>
 80105fa:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 80105fe:	2a2b      	cmp	r2, #43	; 0x2b
 8010600:	d1e0      	bne.n	80105c4 <__cxa_rethrow+0x18>
 8010602:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8010606:	2a2b      	cmp	r2, #43	; 0x2b
 8010608:	d1dc      	bne.n	80105c4 <__cxa_rethrow+0x18>
 801060a:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 801060e:	2a01      	cmp	r2, #1
 8010610:	d8d8      	bhi.n	80105c4 <__cxa_rethrow+0x18>
 8010612:	6962      	ldr	r2, [r4, #20]
 8010614:	4252      	negs	r2, r2
 8010616:	6162      	str	r2, [r4, #20]
 8010618:	e7d6      	b.n	80105c8 <__cxa_rethrow+0x1c>
 801061a:	bf00      	nop

0801061c <__cxa_current_exception_type>:
 801061c:	b508      	push	{r3, lr}
 801061e:	f000 f82b 	bl	8010678 <__cxa_get_globals>
 8010622:	6800      	ldr	r0, [r0, #0]
 8010624:	b130      	cbz	r0, 8010634 <__cxa_current_exception_type+0x18>
 8010626:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 801062a:	2b01      	cmp	r3, #1
 801062c:	bf04      	itt	eq
 801062e:	6800      	ldreq	r0, [r0, #0]
 8010630:	3878      	subeq	r0, #120	; 0x78
 8010632:	6800      	ldr	r0, [r0, #0]
 8010634:	bd08      	pop	{r3, pc}
 8010636:	bf00      	nop

08010638 <_ZNKSt9bad_alloc4whatEv>:
 8010638:	4800      	ldr	r0, [pc, #0]	; (801063c <_ZNKSt9bad_alloc4whatEv+0x4>)
 801063a:	4770      	bx	lr
 801063c:	08017a04 	.word	0x08017a04

08010640 <_ZNSt9bad_allocD1Ev>:
 8010640:	b510      	push	{r4, lr}
 8010642:	4b03      	ldr	r3, [pc, #12]	; (8010650 <_ZNSt9bad_allocD1Ev+0x10>)
 8010644:	6003      	str	r3, [r0, #0]
 8010646:	4604      	mov	r4, r0
 8010648:	f7ff fccc 	bl	800ffe4 <_ZNSt9exceptionD1Ev>
 801064c:	4620      	mov	r0, r4
 801064e:	bd10      	pop	{r4, pc}
 8010650:	08017a38 	.word	0x08017a38

08010654 <_ZNSt9bad_allocD0Ev>:
 8010654:	b510      	push	{r4, lr}
 8010656:	4b05      	ldr	r3, [pc, #20]	; (801066c <_ZNSt9bad_allocD0Ev+0x18>)
 8010658:	6003      	str	r3, [r0, #0]
 801065a:	4604      	mov	r4, r0
 801065c:	f7ff fcc2 	bl	800ffe4 <_ZNSt9exceptionD1Ev>
 8010660:	4620      	mov	r0, r4
 8010662:	2104      	movs	r1, #4
 8010664:	f7ff fc26 	bl	800feb4 <_ZdlPvj>
 8010668:	4620      	mov	r0, r4
 801066a:	bd10      	pop	{r4, pc}
 801066c:	08017a38 	.word	0x08017a38

08010670 <__cxa_get_globals_fast>:
 8010670:	4800      	ldr	r0, [pc, #0]	; (8010674 <__cxa_get_globals_fast+0x4>)
 8010672:	4770      	bx	lr
 8010674:	20000804 	.word	0x20000804

08010678 <__cxa_get_globals>:
 8010678:	4800      	ldr	r0, [pc, #0]	; (801067c <__cxa_get_globals+0x4>)
 801067a:	4770      	bx	lr
 801067c:	20000804 	.word	0x20000804

08010680 <_ZSt15get_new_handlerv>:
 8010680:	4b02      	ldr	r3, [pc, #8]	; (801068c <_ZSt15get_new_handlerv+0xc>)
 8010682:	6818      	ldr	r0, [r3, #0]
 8010684:	f3bf 8f5b 	dmb	ish
 8010688:	4770      	bx	lr
 801068a:	bf00      	nop
 801068c:	20000810 	.word	0x20000810

08010690 <pow>:
 8010690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010694:	ed2d 8b04 	vpush	{d8-d9}
 8010698:	b08d      	sub	sp, #52	; 0x34
 801069a:	ec57 6b10 	vmov	r6, r7, d0
 801069e:	ec55 4b11 	vmov	r4, r5, d1
 80106a2:	f000 f96d 	bl	8010980 <__ieee754_pow>
 80106a6:	4bae      	ldr	r3, [pc, #696]	; (8010960 <pow+0x2d0>)
 80106a8:	eeb0 8a40 	vmov.f32	s16, s0
 80106ac:	eef0 8a60 	vmov.f32	s17, s1
 80106b0:	f993 9000 	ldrsb.w	r9, [r3]
 80106b4:	f1b9 3fff 	cmp.w	r9, #4294967295
 80106b8:	4698      	mov	r8, r3
 80106ba:	d05f      	beq.n	801077c <pow+0xec>
 80106bc:	4622      	mov	r2, r4
 80106be:	462b      	mov	r3, r5
 80106c0:	4620      	mov	r0, r4
 80106c2:	4629      	mov	r1, r5
 80106c4:	f7f6 fd90 	bl	80071e8 <__aeabi_dcmpun>
 80106c8:	4683      	mov	fp, r0
 80106ca:	2800      	cmp	r0, #0
 80106cc:	d156      	bne.n	801077c <pow+0xec>
 80106ce:	4632      	mov	r2, r6
 80106d0:	463b      	mov	r3, r7
 80106d2:	4630      	mov	r0, r6
 80106d4:	4639      	mov	r1, r7
 80106d6:	f7f6 fd87 	bl	80071e8 <__aeabi_dcmpun>
 80106da:	9001      	str	r0, [sp, #4]
 80106dc:	b1e8      	cbz	r0, 801071a <pow+0x8a>
 80106de:	2200      	movs	r2, #0
 80106e0:	2300      	movs	r3, #0
 80106e2:	4620      	mov	r0, r4
 80106e4:	4629      	mov	r1, r5
 80106e6:	f7f6 fd4d 	bl	8007184 <__aeabi_dcmpeq>
 80106ea:	2800      	cmp	r0, #0
 80106ec:	d046      	beq.n	801077c <pow+0xec>
 80106ee:	2301      	movs	r3, #1
 80106f0:	9302      	str	r3, [sp, #8]
 80106f2:	4b9c      	ldr	r3, [pc, #624]	; (8010964 <pow+0x2d4>)
 80106f4:	9303      	str	r3, [sp, #12]
 80106f6:	4b9c      	ldr	r3, [pc, #624]	; (8010968 <pow+0x2d8>)
 80106f8:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80106fc:	2200      	movs	r2, #0
 80106fe:	f1b9 0f02 	cmp.w	r9, #2
 8010702:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010706:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801070a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801070e:	d033      	beq.n	8010778 <pow+0xe8>
 8010710:	a802      	add	r0, sp, #8
 8010712:	f000 ff06 	bl	8011522 <matherr>
 8010716:	bb48      	cbnz	r0, 801076c <pow+0xdc>
 8010718:	e05e      	b.n	80107d8 <pow+0x148>
 801071a:	f04f 0a00 	mov.w	sl, #0
 801071e:	f04f 0b00 	mov.w	fp, #0
 8010722:	4652      	mov	r2, sl
 8010724:	465b      	mov	r3, fp
 8010726:	4630      	mov	r0, r6
 8010728:	4639      	mov	r1, r7
 801072a:	f7f6 fd2b 	bl	8007184 <__aeabi_dcmpeq>
 801072e:	ec4b ab19 	vmov	d9, sl, fp
 8010732:	2800      	cmp	r0, #0
 8010734:	d055      	beq.n	80107e2 <pow+0x152>
 8010736:	4652      	mov	r2, sl
 8010738:	465b      	mov	r3, fp
 801073a:	4620      	mov	r0, r4
 801073c:	4629      	mov	r1, r5
 801073e:	f7f6 fd21 	bl	8007184 <__aeabi_dcmpeq>
 8010742:	4680      	mov	r8, r0
 8010744:	b318      	cbz	r0, 801078e <pow+0xfe>
 8010746:	2301      	movs	r3, #1
 8010748:	9302      	str	r3, [sp, #8]
 801074a:	4b86      	ldr	r3, [pc, #536]	; (8010964 <pow+0x2d4>)
 801074c:	9303      	str	r3, [sp, #12]
 801074e:	9b01      	ldr	r3, [sp, #4]
 8010750:	930a      	str	r3, [sp, #40]	; 0x28
 8010752:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010756:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801075a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801075e:	f1b9 0f00 	cmp.w	r9, #0
 8010762:	d0d5      	beq.n	8010710 <pow+0x80>
 8010764:	4b80      	ldr	r3, [pc, #512]	; (8010968 <pow+0x2d8>)
 8010766:	2200      	movs	r2, #0
 8010768:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801076c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801076e:	b11b      	cbz	r3, 8010778 <pow+0xe8>
 8010770:	f000 fffe 	bl	8011770 <__errno>
 8010774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010776:	6003      	str	r3, [r0, #0]
 8010778:	ed9d 8b08 	vldr	d8, [sp, #32]
 801077c:	eeb0 0a48 	vmov.f32	s0, s16
 8010780:	eef0 0a68 	vmov.f32	s1, s17
 8010784:	b00d      	add	sp, #52	; 0x34
 8010786:	ecbd 8b04 	vpop	{d8-d9}
 801078a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801078e:	ec45 4b10 	vmov	d0, r4, r5
 8010792:	f000 febe 	bl	8011512 <finite>
 8010796:	2800      	cmp	r0, #0
 8010798:	d0f0      	beq.n	801077c <pow+0xec>
 801079a:	4652      	mov	r2, sl
 801079c:	465b      	mov	r3, fp
 801079e:	4620      	mov	r0, r4
 80107a0:	4629      	mov	r1, r5
 80107a2:	f7f6 fcf9 	bl	8007198 <__aeabi_dcmplt>
 80107a6:	2800      	cmp	r0, #0
 80107a8:	d0e8      	beq.n	801077c <pow+0xec>
 80107aa:	2301      	movs	r3, #1
 80107ac:	9302      	str	r3, [sp, #8]
 80107ae:	4b6d      	ldr	r3, [pc, #436]	; (8010964 <pow+0x2d4>)
 80107b0:	9303      	str	r3, [sp, #12]
 80107b2:	4b6b      	ldr	r3, [pc, #428]	; (8010960 <pow+0x2d0>)
 80107b4:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80107b8:	f993 3000 	ldrsb.w	r3, [r3]
 80107bc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80107c0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80107c4:	b913      	cbnz	r3, 80107cc <pow+0x13c>
 80107c6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80107ca:	e7a1      	b.n	8010710 <pow+0x80>
 80107cc:	4967      	ldr	r1, [pc, #412]	; (801096c <pow+0x2dc>)
 80107ce:	2000      	movs	r0, #0
 80107d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80107d4:	2b02      	cmp	r3, #2
 80107d6:	d19b      	bne.n	8010710 <pow+0x80>
 80107d8:	f000 ffca 	bl	8011770 <__errno>
 80107dc:	2321      	movs	r3, #33	; 0x21
 80107de:	6003      	str	r3, [r0, #0]
 80107e0:	e7c4      	b.n	801076c <pow+0xdc>
 80107e2:	eeb0 0a48 	vmov.f32	s0, s16
 80107e6:	eef0 0a68 	vmov.f32	s1, s17
 80107ea:	f000 fe92 	bl	8011512 <finite>
 80107ee:	9001      	str	r0, [sp, #4]
 80107f0:	2800      	cmp	r0, #0
 80107f2:	f040 808a 	bne.w	801090a <pow+0x27a>
 80107f6:	ec47 6b10 	vmov	d0, r6, r7
 80107fa:	f000 fe8a 	bl	8011512 <finite>
 80107fe:	2800      	cmp	r0, #0
 8010800:	f000 8083 	beq.w	801090a <pow+0x27a>
 8010804:	ec45 4b10 	vmov	d0, r4, r5
 8010808:	f000 fe83 	bl	8011512 <finite>
 801080c:	2800      	cmp	r0, #0
 801080e:	d07c      	beq.n	801090a <pow+0x27a>
 8010810:	ec53 2b18 	vmov	r2, r3, d8
 8010814:	ee18 0a10 	vmov	r0, s16
 8010818:	4619      	mov	r1, r3
 801081a:	f7f6 fce5 	bl	80071e8 <__aeabi_dcmpun>
 801081e:	f998 9000 	ldrsb.w	r9, [r8]
 8010822:	4b50      	ldr	r3, [pc, #320]	; (8010964 <pow+0x2d4>)
 8010824:	b1b0      	cbz	r0, 8010854 <pow+0x1c4>
 8010826:	2201      	movs	r2, #1
 8010828:	9303      	str	r3, [sp, #12]
 801082a:	9b01      	ldr	r3, [sp, #4]
 801082c:	9202      	str	r2, [sp, #8]
 801082e:	930a      	str	r3, [sp, #40]	; 0x28
 8010830:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010834:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010838:	f1b9 0f00 	cmp.w	r9, #0
 801083c:	d0c3      	beq.n	80107c6 <pow+0x136>
 801083e:	4652      	mov	r2, sl
 8010840:	465b      	mov	r3, fp
 8010842:	4650      	mov	r0, sl
 8010844:	4659      	mov	r1, fp
 8010846:	f7f6 fb5f 	bl	8006f08 <__aeabi_ddiv>
 801084a:	f1b9 0f02 	cmp.w	r9, #2
 801084e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010852:	e7c0      	b.n	80107d6 <pow+0x146>
 8010854:	2203      	movs	r2, #3
 8010856:	9202      	str	r2, [sp, #8]
 8010858:	9303      	str	r3, [sp, #12]
 801085a:	900a      	str	r0, [sp, #40]	; 0x28
 801085c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010860:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010864:	f1b9 0f00 	cmp.w	r9, #0
 8010868:	d12c      	bne.n	80108c4 <pow+0x234>
 801086a:	4b41      	ldr	r3, [pc, #260]	; (8010970 <pow+0x2e0>)
 801086c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8010870:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010874:	4630      	mov	r0, r6
 8010876:	4652      	mov	r2, sl
 8010878:	465b      	mov	r3, fp
 801087a:	4639      	mov	r1, r7
 801087c:	f7f6 fc8c 	bl	8007198 <__aeabi_dcmplt>
 8010880:	2800      	cmp	r0, #0
 8010882:	d066      	beq.n	8010952 <pow+0x2c2>
 8010884:	2200      	movs	r2, #0
 8010886:	4b3b      	ldr	r3, [pc, #236]	; (8010974 <pow+0x2e4>)
 8010888:	4620      	mov	r0, r4
 801088a:	4629      	mov	r1, r5
 801088c:	f7f6 fa12 	bl	8006cb4 <__aeabi_dmul>
 8010890:	4604      	mov	r4, r0
 8010892:	460d      	mov	r5, r1
 8010894:	ec45 4b10 	vmov	d0, r4, r5
 8010898:	f000 fe4e 	bl	8011538 <rint>
 801089c:	4620      	mov	r0, r4
 801089e:	ec53 2b10 	vmov	r2, r3, d0
 80108a2:	4629      	mov	r1, r5
 80108a4:	f7f6 fc6e 	bl	8007184 <__aeabi_dcmpeq>
 80108a8:	b920      	cbnz	r0, 80108b4 <pow+0x224>
 80108aa:	4b33      	ldr	r3, [pc, #204]	; (8010978 <pow+0x2e8>)
 80108ac:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80108b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80108b4:	f998 3000 	ldrsb.w	r3, [r8]
 80108b8:	2b02      	cmp	r3, #2
 80108ba:	d14a      	bne.n	8010952 <pow+0x2c2>
 80108bc:	f000 ff58 	bl	8011770 <__errno>
 80108c0:	2322      	movs	r3, #34	; 0x22
 80108c2:	e78c      	b.n	80107de <pow+0x14e>
 80108c4:	4b2d      	ldr	r3, [pc, #180]	; (801097c <pow+0x2ec>)
 80108c6:	2200      	movs	r2, #0
 80108c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80108cc:	4630      	mov	r0, r6
 80108ce:	4652      	mov	r2, sl
 80108d0:	465b      	mov	r3, fp
 80108d2:	4639      	mov	r1, r7
 80108d4:	f7f6 fc60 	bl	8007198 <__aeabi_dcmplt>
 80108d8:	2800      	cmp	r0, #0
 80108da:	d0eb      	beq.n	80108b4 <pow+0x224>
 80108dc:	2200      	movs	r2, #0
 80108de:	4b25      	ldr	r3, [pc, #148]	; (8010974 <pow+0x2e4>)
 80108e0:	4620      	mov	r0, r4
 80108e2:	4629      	mov	r1, r5
 80108e4:	f7f6 f9e6 	bl	8006cb4 <__aeabi_dmul>
 80108e8:	4604      	mov	r4, r0
 80108ea:	460d      	mov	r5, r1
 80108ec:	ec45 4b10 	vmov	d0, r4, r5
 80108f0:	f000 fe22 	bl	8011538 <rint>
 80108f4:	4620      	mov	r0, r4
 80108f6:	ec53 2b10 	vmov	r2, r3, d0
 80108fa:	4629      	mov	r1, r5
 80108fc:	f7f6 fc42 	bl	8007184 <__aeabi_dcmpeq>
 8010900:	2800      	cmp	r0, #0
 8010902:	d1d7      	bne.n	80108b4 <pow+0x224>
 8010904:	2200      	movs	r2, #0
 8010906:	4b19      	ldr	r3, [pc, #100]	; (801096c <pow+0x2dc>)
 8010908:	e7d2      	b.n	80108b0 <pow+0x220>
 801090a:	2200      	movs	r2, #0
 801090c:	2300      	movs	r3, #0
 801090e:	ec51 0b18 	vmov	r0, r1, d8
 8010912:	f7f6 fc37 	bl	8007184 <__aeabi_dcmpeq>
 8010916:	2800      	cmp	r0, #0
 8010918:	f43f af30 	beq.w	801077c <pow+0xec>
 801091c:	ec47 6b10 	vmov	d0, r6, r7
 8010920:	f000 fdf7 	bl	8011512 <finite>
 8010924:	2800      	cmp	r0, #0
 8010926:	f43f af29 	beq.w	801077c <pow+0xec>
 801092a:	ec45 4b10 	vmov	d0, r4, r5
 801092e:	f000 fdf0 	bl	8011512 <finite>
 8010932:	2800      	cmp	r0, #0
 8010934:	f43f af22 	beq.w	801077c <pow+0xec>
 8010938:	2304      	movs	r3, #4
 801093a:	9302      	str	r3, [sp, #8]
 801093c:	4b09      	ldr	r3, [pc, #36]	; (8010964 <pow+0x2d4>)
 801093e:	9303      	str	r3, [sp, #12]
 8010940:	2300      	movs	r3, #0
 8010942:	930a      	str	r3, [sp, #40]	; 0x28
 8010944:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010948:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801094c:	ed8d 9b08 	vstr	d9, [sp, #32]
 8010950:	e7b0      	b.n	80108b4 <pow+0x224>
 8010952:	a802      	add	r0, sp, #8
 8010954:	f000 fde5 	bl	8011522 <matherr>
 8010958:	2800      	cmp	r0, #0
 801095a:	f47f af07 	bne.w	801076c <pow+0xdc>
 801095e:	e7ad      	b.n	80108bc <pow+0x22c>
 8010960:	20000010 	.word	0x20000010
 8010964:	08018294 	.word	0x08018294
 8010968:	3ff00000 	.word	0x3ff00000
 801096c:	fff00000 	.word	0xfff00000
 8010970:	47efffff 	.word	0x47efffff
 8010974:	3fe00000 	.word	0x3fe00000
 8010978:	c7efffff 	.word	0xc7efffff
 801097c:	7ff00000 	.word	0x7ff00000

08010980 <__ieee754_pow>:
 8010980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010984:	b091      	sub	sp, #68	; 0x44
 8010986:	ed8d 1b00 	vstr	d1, [sp]
 801098a:	e89d 0204 	ldmia.w	sp, {r2, r9}
 801098e:	ec57 6b10 	vmov	r6, r7, d0
 8010992:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8010996:	ea58 0302 	orrs.w	r3, r8, r2
 801099a:	ee10 aa10 	vmov	sl, s0
 801099e:	463d      	mov	r5, r7
 80109a0:	f000 84bd 	beq.w	801131e <__ieee754_pow+0x99e>
 80109a4:	4b78      	ldr	r3, [pc, #480]	; (8010b88 <__ieee754_pow+0x208>)
 80109a6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80109aa:	429c      	cmp	r4, r3
 80109ac:	dc09      	bgt.n	80109c2 <__ieee754_pow+0x42>
 80109ae:	d103      	bne.n	80109b8 <__ieee754_pow+0x38>
 80109b0:	b93e      	cbnz	r6, 80109c2 <__ieee754_pow+0x42>
 80109b2:	45a0      	cmp	r8, r4
 80109b4:	dc0d      	bgt.n	80109d2 <__ieee754_pow+0x52>
 80109b6:	e001      	b.n	80109bc <__ieee754_pow+0x3c>
 80109b8:	4598      	cmp	r8, r3
 80109ba:	dc02      	bgt.n	80109c2 <__ieee754_pow+0x42>
 80109bc:	4598      	cmp	r8, r3
 80109be:	d10e      	bne.n	80109de <__ieee754_pow+0x5e>
 80109c0:	b16a      	cbz	r2, 80109de <__ieee754_pow+0x5e>
 80109c2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80109c6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80109ca:	ea54 030a 	orrs.w	r3, r4, sl
 80109ce:	f000 84a6 	beq.w	801131e <__ieee754_pow+0x99e>
 80109d2:	486e      	ldr	r0, [pc, #440]	; (8010b8c <__ieee754_pow+0x20c>)
 80109d4:	b011      	add	sp, #68	; 0x44
 80109d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109da:	f000 bda5 	b.w	8011528 <nan>
 80109de:	2d00      	cmp	r5, #0
 80109e0:	da53      	bge.n	8010a8a <__ieee754_pow+0x10a>
 80109e2:	4b6b      	ldr	r3, [pc, #428]	; (8010b90 <__ieee754_pow+0x210>)
 80109e4:	4598      	cmp	r8, r3
 80109e6:	dc4d      	bgt.n	8010a84 <__ieee754_pow+0x104>
 80109e8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80109ec:	4598      	cmp	r8, r3
 80109ee:	dd4c      	ble.n	8010a8a <__ieee754_pow+0x10a>
 80109f0:	ea4f 5328 	mov.w	r3, r8, asr #20
 80109f4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80109f8:	2b14      	cmp	r3, #20
 80109fa:	dd26      	ble.n	8010a4a <__ieee754_pow+0xca>
 80109fc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8010a00:	fa22 f103 	lsr.w	r1, r2, r3
 8010a04:	fa01 f303 	lsl.w	r3, r1, r3
 8010a08:	429a      	cmp	r2, r3
 8010a0a:	d13e      	bne.n	8010a8a <__ieee754_pow+0x10a>
 8010a0c:	f001 0101 	and.w	r1, r1, #1
 8010a10:	f1c1 0b02 	rsb	fp, r1, #2
 8010a14:	2a00      	cmp	r2, #0
 8010a16:	d15b      	bne.n	8010ad0 <__ieee754_pow+0x150>
 8010a18:	4b5b      	ldr	r3, [pc, #364]	; (8010b88 <__ieee754_pow+0x208>)
 8010a1a:	4598      	cmp	r8, r3
 8010a1c:	d124      	bne.n	8010a68 <__ieee754_pow+0xe8>
 8010a1e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8010a22:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010a26:	ea53 030a 	orrs.w	r3, r3, sl
 8010a2a:	f000 8478 	beq.w	801131e <__ieee754_pow+0x99e>
 8010a2e:	4b59      	ldr	r3, [pc, #356]	; (8010b94 <__ieee754_pow+0x214>)
 8010a30:	429c      	cmp	r4, r3
 8010a32:	dd2d      	ble.n	8010a90 <__ieee754_pow+0x110>
 8010a34:	f1b9 0f00 	cmp.w	r9, #0
 8010a38:	f280 8475 	bge.w	8011326 <__ieee754_pow+0x9a6>
 8010a3c:	2000      	movs	r0, #0
 8010a3e:	2100      	movs	r1, #0
 8010a40:	ec41 0b10 	vmov	d0, r0, r1
 8010a44:	b011      	add	sp, #68	; 0x44
 8010a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a4a:	2a00      	cmp	r2, #0
 8010a4c:	d13e      	bne.n	8010acc <__ieee754_pow+0x14c>
 8010a4e:	f1c3 0314 	rsb	r3, r3, #20
 8010a52:	fa48 f103 	asr.w	r1, r8, r3
 8010a56:	fa01 f303 	lsl.w	r3, r1, r3
 8010a5a:	4598      	cmp	r8, r3
 8010a5c:	f040 846b 	bne.w	8011336 <__ieee754_pow+0x9b6>
 8010a60:	f001 0101 	and.w	r1, r1, #1
 8010a64:	f1c1 0b02 	rsb	fp, r1, #2
 8010a68:	4b4b      	ldr	r3, [pc, #300]	; (8010b98 <__ieee754_pow+0x218>)
 8010a6a:	4598      	cmp	r8, r3
 8010a6c:	d118      	bne.n	8010aa0 <__ieee754_pow+0x120>
 8010a6e:	f1b9 0f00 	cmp.w	r9, #0
 8010a72:	f280 845c 	bge.w	801132e <__ieee754_pow+0x9ae>
 8010a76:	4948      	ldr	r1, [pc, #288]	; (8010b98 <__ieee754_pow+0x218>)
 8010a78:	4632      	mov	r2, r6
 8010a7a:	463b      	mov	r3, r7
 8010a7c:	2000      	movs	r0, #0
 8010a7e:	f7f6 fa43 	bl	8006f08 <__aeabi_ddiv>
 8010a82:	e7dd      	b.n	8010a40 <__ieee754_pow+0xc0>
 8010a84:	f04f 0b02 	mov.w	fp, #2
 8010a88:	e7c4      	b.n	8010a14 <__ieee754_pow+0x94>
 8010a8a:	f04f 0b00 	mov.w	fp, #0
 8010a8e:	e7c1      	b.n	8010a14 <__ieee754_pow+0x94>
 8010a90:	f1b9 0f00 	cmp.w	r9, #0
 8010a94:	dad2      	bge.n	8010a3c <__ieee754_pow+0xbc>
 8010a96:	e89d 0009 	ldmia.w	sp, {r0, r3}
 8010a9a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010a9e:	e7cf      	b.n	8010a40 <__ieee754_pow+0xc0>
 8010aa0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8010aa4:	d106      	bne.n	8010ab4 <__ieee754_pow+0x134>
 8010aa6:	4632      	mov	r2, r6
 8010aa8:	463b      	mov	r3, r7
 8010aaa:	4610      	mov	r0, r2
 8010aac:	4619      	mov	r1, r3
 8010aae:	f7f6 f901 	bl	8006cb4 <__aeabi_dmul>
 8010ab2:	e7c5      	b.n	8010a40 <__ieee754_pow+0xc0>
 8010ab4:	4b39      	ldr	r3, [pc, #228]	; (8010b9c <__ieee754_pow+0x21c>)
 8010ab6:	4599      	cmp	r9, r3
 8010ab8:	d10a      	bne.n	8010ad0 <__ieee754_pow+0x150>
 8010aba:	2d00      	cmp	r5, #0
 8010abc:	db08      	blt.n	8010ad0 <__ieee754_pow+0x150>
 8010abe:	ec47 6b10 	vmov	d0, r6, r7
 8010ac2:	b011      	add	sp, #68	; 0x44
 8010ac4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ac8:	f000 bc6c 	b.w	80113a4 <__ieee754_sqrt>
 8010acc:	f04f 0b00 	mov.w	fp, #0
 8010ad0:	ec47 6b10 	vmov	d0, r6, r7
 8010ad4:	f000 fd16 	bl	8011504 <fabs>
 8010ad8:	ec51 0b10 	vmov	r0, r1, d0
 8010adc:	f1ba 0f00 	cmp.w	sl, #0
 8010ae0:	d127      	bne.n	8010b32 <__ieee754_pow+0x1b2>
 8010ae2:	b124      	cbz	r4, 8010aee <__ieee754_pow+0x16e>
 8010ae4:	4b2c      	ldr	r3, [pc, #176]	; (8010b98 <__ieee754_pow+0x218>)
 8010ae6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8010aea:	429a      	cmp	r2, r3
 8010aec:	d121      	bne.n	8010b32 <__ieee754_pow+0x1b2>
 8010aee:	f1b9 0f00 	cmp.w	r9, #0
 8010af2:	da05      	bge.n	8010b00 <__ieee754_pow+0x180>
 8010af4:	4602      	mov	r2, r0
 8010af6:	460b      	mov	r3, r1
 8010af8:	2000      	movs	r0, #0
 8010afa:	4927      	ldr	r1, [pc, #156]	; (8010b98 <__ieee754_pow+0x218>)
 8010afc:	f7f6 fa04 	bl	8006f08 <__aeabi_ddiv>
 8010b00:	2d00      	cmp	r5, #0
 8010b02:	da9d      	bge.n	8010a40 <__ieee754_pow+0xc0>
 8010b04:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010b08:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010b0c:	ea54 030b 	orrs.w	r3, r4, fp
 8010b10:	d108      	bne.n	8010b24 <__ieee754_pow+0x1a4>
 8010b12:	4602      	mov	r2, r0
 8010b14:	460b      	mov	r3, r1
 8010b16:	4610      	mov	r0, r2
 8010b18:	4619      	mov	r1, r3
 8010b1a:	f7f5 ff17 	bl	800694c <__aeabi_dsub>
 8010b1e:	4602      	mov	r2, r0
 8010b20:	460b      	mov	r3, r1
 8010b22:	e7ac      	b.n	8010a7e <__ieee754_pow+0xfe>
 8010b24:	f1bb 0f01 	cmp.w	fp, #1
 8010b28:	d18a      	bne.n	8010a40 <__ieee754_pow+0xc0>
 8010b2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010b2e:	4619      	mov	r1, r3
 8010b30:	e786      	b.n	8010a40 <__ieee754_pow+0xc0>
 8010b32:	0fed      	lsrs	r5, r5, #31
 8010b34:	1e6b      	subs	r3, r5, #1
 8010b36:	930d      	str	r3, [sp, #52]	; 0x34
 8010b38:	ea5b 0303 	orrs.w	r3, fp, r3
 8010b3c:	d102      	bne.n	8010b44 <__ieee754_pow+0x1c4>
 8010b3e:	4632      	mov	r2, r6
 8010b40:	463b      	mov	r3, r7
 8010b42:	e7e8      	b.n	8010b16 <__ieee754_pow+0x196>
 8010b44:	4b16      	ldr	r3, [pc, #88]	; (8010ba0 <__ieee754_pow+0x220>)
 8010b46:	4598      	cmp	r8, r3
 8010b48:	f340 80fe 	ble.w	8010d48 <__ieee754_pow+0x3c8>
 8010b4c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8010b50:	4598      	cmp	r8, r3
 8010b52:	dd0a      	ble.n	8010b6a <__ieee754_pow+0x1ea>
 8010b54:	4b0f      	ldr	r3, [pc, #60]	; (8010b94 <__ieee754_pow+0x214>)
 8010b56:	429c      	cmp	r4, r3
 8010b58:	dc0d      	bgt.n	8010b76 <__ieee754_pow+0x1f6>
 8010b5a:	f1b9 0f00 	cmp.w	r9, #0
 8010b5e:	f6bf af6d 	bge.w	8010a3c <__ieee754_pow+0xbc>
 8010b62:	a307      	add	r3, pc, #28	; (adr r3, 8010b80 <__ieee754_pow+0x200>)
 8010b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b68:	e79f      	b.n	8010aaa <__ieee754_pow+0x12a>
 8010b6a:	4b0e      	ldr	r3, [pc, #56]	; (8010ba4 <__ieee754_pow+0x224>)
 8010b6c:	429c      	cmp	r4, r3
 8010b6e:	ddf4      	ble.n	8010b5a <__ieee754_pow+0x1da>
 8010b70:	4b09      	ldr	r3, [pc, #36]	; (8010b98 <__ieee754_pow+0x218>)
 8010b72:	429c      	cmp	r4, r3
 8010b74:	dd18      	ble.n	8010ba8 <__ieee754_pow+0x228>
 8010b76:	f1b9 0f00 	cmp.w	r9, #0
 8010b7a:	dcf2      	bgt.n	8010b62 <__ieee754_pow+0x1e2>
 8010b7c:	e75e      	b.n	8010a3c <__ieee754_pow+0xbc>
 8010b7e:	bf00      	nop
 8010b80:	8800759c 	.word	0x8800759c
 8010b84:	7e37e43c 	.word	0x7e37e43c
 8010b88:	7ff00000 	.word	0x7ff00000
 8010b8c:	080182e1 	.word	0x080182e1
 8010b90:	433fffff 	.word	0x433fffff
 8010b94:	3fefffff 	.word	0x3fefffff
 8010b98:	3ff00000 	.word	0x3ff00000
 8010b9c:	3fe00000 	.word	0x3fe00000
 8010ba0:	41e00000 	.word	0x41e00000
 8010ba4:	3feffffe 	.word	0x3feffffe
 8010ba8:	2200      	movs	r2, #0
 8010baa:	4b63      	ldr	r3, [pc, #396]	; (8010d38 <__ieee754_pow+0x3b8>)
 8010bac:	f7f5 fece 	bl	800694c <__aeabi_dsub>
 8010bb0:	a355      	add	r3, pc, #340	; (adr r3, 8010d08 <__ieee754_pow+0x388>)
 8010bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bb6:	4604      	mov	r4, r0
 8010bb8:	460d      	mov	r5, r1
 8010bba:	f7f6 f87b 	bl	8006cb4 <__aeabi_dmul>
 8010bbe:	a354      	add	r3, pc, #336	; (adr r3, 8010d10 <__ieee754_pow+0x390>)
 8010bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bc4:	4606      	mov	r6, r0
 8010bc6:	460f      	mov	r7, r1
 8010bc8:	4620      	mov	r0, r4
 8010bca:	4629      	mov	r1, r5
 8010bcc:	f7f6 f872 	bl	8006cb4 <__aeabi_dmul>
 8010bd0:	2200      	movs	r2, #0
 8010bd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010bd6:	4b59      	ldr	r3, [pc, #356]	; (8010d3c <__ieee754_pow+0x3bc>)
 8010bd8:	4620      	mov	r0, r4
 8010bda:	4629      	mov	r1, r5
 8010bdc:	f7f6 f86a 	bl	8006cb4 <__aeabi_dmul>
 8010be0:	4602      	mov	r2, r0
 8010be2:	460b      	mov	r3, r1
 8010be4:	a14c      	add	r1, pc, #304	; (adr r1, 8010d18 <__ieee754_pow+0x398>)
 8010be6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010bea:	f7f5 feaf 	bl	800694c <__aeabi_dsub>
 8010bee:	4622      	mov	r2, r4
 8010bf0:	462b      	mov	r3, r5
 8010bf2:	f7f6 f85f 	bl	8006cb4 <__aeabi_dmul>
 8010bf6:	4602      	mov	r2, r0
 8010bf8:	460b      	mov	r3, r1
 8010bfa:	2000      	movs	r0, #0
 8010bfc:	4950      	ldr	r1, [pc, #320]	; (8010d40 <__ieee754_pow+0x3c0>)
 8010bfe:	f7f5 fea5 	bl	800694c <__aeabi_dsub>
 8010c02:	4622      	mov	r2, r4
 8010c04:	462b      	mov	r3, r5
 8010c06:	4680      	mov	r8, r0
 8010c08:	4689      	mov	r9, r1
 8010c0a:	4620      	mov	r0, r4
 8010c0c:	4629      	mov	r1, r5
 8010c0e:	f7f6 f851 	bl	8006cb4 <__aeabi_dmul>
 8010c12:	4602      	mov	r2, r0
 8010c14:	460b      	mov	r3, r1
 8010c16:	4640      	mov	r0, r8
 8010c18:	4649      	mov	r1, r9
 8010c1a:	f7f6 f84b 	bl	8006cb4 <__aeabi_dmul>
 8010c1e:	a340      	add	r3, pc, #256	; (adr r3, 8010d20 <__ieee754_pow+0x3a0>)
 8010c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c24:	f7f6 f846 	bl	8006cb4 <__aeabi_dmul>
 8010c28:	4602      	mov	r2, r0
 8010c2a:	460b      	mov	r3, r1
 8010c2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010c30:	f7f5 fe8c 	bl	800694c <__aeabi_dsub>
 8010c34:	4602      	mov	r2, r0
 8010c36:	460b      	mov	r3, r1
 8010c38:	4604      	mov	r4, r0
 8010c3a:	460d      	mov	r5, r1
 8010c3c:	4630      	mov	r0, r6
 8010c3e:	4639      	mov	r1, r7
 8010c40:	f7f5 fe86 	bl	8006950 <__adddf3>
 8010c44:	2000      	movs	r0, #0
 8010c46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010c4a:	4632      	mov	r2, r6
 8010c4c:	463b      	mov	r3, r7
 8010c4e:	f7f5 fe7d 	bl	800694c <__aeabi_dsub>
 8010c52:	4602      	mov	r2, r0
 8010c54:	460b      	mov	r3, r1
 8010c56:	4620      	mov	r0, r4
 8010c58:	4629      	mov	r1, r5
 8010c5a:	f7f5 fe77 	bl	800694c <__aeabi_dsub>
 8010c5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010c60:	f10b 33ff 	add.w	r3, fp, #4294967295
 8010c64:	4313      	orrs	r3, r2
 8010c66:	4606      	mov	r6, r0
 8010c68:	460f      	mov	r7, r1
 8010c6a:	f040 81eb 	bne.w	8011044 <__ieee754_pow+0x6c4>
 8010c6e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8010d28 <__ieee754_pow+0x3a8>
 8010c72:	e9dd 4500 	ldrd	r4, r5, [sp]
 8010c76:	2400      	movs	r4, #0
 8010c78:	4622      	mov	r2, r4
 8010c7a:	462b      	mov	r3, r5
 8010c7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010c80:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010c84:	f7f5 fe62 	bl	800694c <__aeabi_dsub>
 8010c88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010c8c:	f7f6 f812 	bl	8006cb4 <__aeabi_dmul>
 8010c90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c94:	4680      	mov	r8, r0
 8010c96:	4689      	mov	r9, r1
 8010c98:	4630      	mov	r0, r6
 8010c9a:	4639      	mov	r1, r7
 8010c9c:	f7f6 f80a 	bl	8006cb4 <__aeabi_dmul>
 8010ca0:	4602      	mov	r2, r0
 8010ca2:	460b      	mov	r3, r1
 8010ca4:	4640      	mov	r0, r8
 8010ca6:	4649      	mov	r1, r9
 8010ca8:	f7f5 fe52 	bl	8006950 <__adddf3>
 8010cac:	4622      	mov	r2, r4
 8010cae:	462b      	mov	r3, r5
 8010cb0:	4680      	mov	r8, r0
 8010cb2:	4689      	mov	r9, r1
 8010cb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010cb8:	f7f5 fffc 	bl	8006cb4 <__aeabi_dmul>
 8010cbc:	460b      	mov	r3, r1
 8010cbe:	4604      	mov	r4, r0
 8010cc0:	460d      	mov	r5, r1
 8010cc2:	4602      	mov	r2, r0
 8010cc4:	4649      	mov	r1, r9
 8010cc6:	4640      	mov	r0, r8
 8010cc8:	e9cd 4500 	strd	r4, r5, [sp]
 8010ccc:	f7f5 fe40 	bl	8006950 <__adddf3>
 8010cd0:	4b1c      	ldr	r3, [pc, #112]	; (8010d44 <__ieee754_pow+0x3c4>)
 8010cd2:	4299      	cmp	r1, r3
 8010cd4:	4606      	mov	r6, r0
 8010cd6:	460f      	mov	r7, r1
 8010cd8:	468b      	mov	fp, r1
 8010cda:	f340 82f7 	ble.w	80112cc <__ieee754_pow+0x94c>
 8010cde:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8010ce2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8010ce6:	4303      	orrs	r3, r0
 8010ce8:	f000 81ea 	beq.w	80110c0 <__ieee754_pow+0x740>
 8010cec:	a310      	add	r3, pc, #64	; (adr r3, 8010d30 <__ieee754_pow+0x3b0>)
 8010cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010cf6:	f7f5 ffdd 	bl	8006cb4 <__aeabi_dmul>
 8010cfa:	a30d      	add	r3, pc, #52	; (adr r3, 8010d30 <__ieee754_pow+0x3b0>)
 8010cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d00:	e6d5      	b.n	8010aae <__ieee754_pow+0x12e>
 8010d02:	bf00      	nop
 8010d04:	f3af 8000 	nop.w
 8010d08:	60000000 	.word	0x60000000
 8010d0c:	3ff71547 	.word	0x3ff71547
 8010d10:	f85ddf44 	.word	0xf85ddf44
 8010d14:	3e54ae0b 	.word	0x3e54ae0b
 8010d18:	55555555 	.word	0x55555555
 8010d1c:	3fd55555 	.word	0x3fd55555
 8010d20:	652b82fe 	.word	0x652b82fe
 8010d24:	3ff71547 	.word	0x3ff71547
 8010d28:	00000000 	.word	0x00000000
 8010d2c:	bff00000 	.word	0xbff00000
 8010d30:	8800759c 	.word	0x8800759c
 8010d34:	7e37e43c 	.word	0x7e37e43c
 8010d38:	3ff00000 	.word	0x3ff00000
 8010d3c:	3fd00000 	.word	0x3fd00000
 8010d40:	3fe00000 	.word	0x3fe00000
 8010d44:	408fffff 	.word	0x408fffff
 8010d48:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8010d4c:	f04f 0200 	mov.w	r2, #0
 8010d50:	da05      	bge.n	8010d5e <__ieee754_pow+0x3de>
 8010d52:	4bd3      	ldr	r3, [pc, #844]	; (80110a0 <__ieee754_pow+0x720>)
 8010d54:	f7f5 ffae 	bl	8006cb4 <__aeabi_dmul>
 8010d58:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8010d5c:	460c      	mov	r4, r1
 8010d5e:	1523      	asrs	r3, r4, #20
 8010d60:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010d64:	4413      	add	r3, r2
 8010d66:	9307      	str	r3, [sp, #28]
 8010d68:	4bce      	ldr	r3, [pc, #824]	; (80110a4 <__ieee754_pow+0x724>)
 8010d6a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8010d6e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8010d72:	429c      	cmp	r4, r3
 8010d74:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010d78:	dd08      	ble.n	8010d8c <__ieee754_pow+0x40c>
 8010d7a:	4bcb      	ldr	r3, [pc, #812]	; (80110a8 <__ieee754_pow+0x728>)
 8010d7c:	429c      	cmp	r4, r3
 8010d7e:	f340 815e 	ble.w	801103e <__ieee754_pow+0x6be>
 8010d82:	9b07      	ldr	r3, [sp, #28]
 8010d84:	3301      	adds	r3, #1
 8010d86:	9307      	str	r3, [sp, #28]
 8010d88:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8010d8c:	f04f 0a00 	mov.w	sl, #0
 8010d90:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8010d94:	930c      	str	r3, [sp, #48]	; 0x30
 8010d96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010d98:	4bc4      	ldr	r3, [pc, #784]	; (80110ac <__ieee754_pow+0x72c>)
 8010d9a:	4413      	add	r3, r2
 8010d9c:	ed93 7b00 	vldr	d7, [r3]
 8010da0:	4629      	mov	r1, r5
 8010da2:	ec53 2b17 	vmov	r2, r3, d7
 8010da6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8010daa:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010dae:	f7f5 fdcd 	bl	800694c <__aeabi_dsub>
 8010db2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010db6:	4606      	mov	r6, r0
 8010db8:	460f      	mov	r7, r1
 8010dba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010dbe:	f7f5 fdc7 	bl	8006950 <__adddf3>
 8010dc2:	4602      	mov	r2, r0
 8010dc4:	460b      	mov	r3, r1
 8010dc6:	2000      	movs	r0, #0
 8010dc8:	49b9      	ldr	r1, [pc, #740]	; (80110b0 <__ieee754_pow+0x730>)
 8010dca:	f7f6 f89d 	bl	8006f08 <__aeabi_ddiv>
 8010dce:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8010dd2:	4602      	mov	r2, r0
 8010dd4:	460b      	mov	r3, r1
 8010dd6:	4630      	mov	r0, r6
 8010dd8:	4639      	mov	r1, r7
 8010dda:	f7f5 ff6b 	bl	8006cb4 <__aeabi_dmul>
 8010dde:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010de2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8010de6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8010dea:	2300      	movs	r3, #0
 8010dec:	9302      	str	r3, [sp, #8]
 8010dee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010df2:	106d      	asrs	r5, r5, #1
 8010df4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8010df8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8010dfc:	2200      	movs	r2, #0
 8010dfe:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8010e02:	4640      	mov	r0, r8
 8010e04:	4649      	mov	r1, r9
 8010e06:	4614      	mov	r4, r2
 8010e08:	461d      	mov	r5, r3
 8010e0a:	f7f5 ff53 	bl	8006cb4 <__aeabi_dmul>
 8010e0e:	4602      	mov	r2, r0
 8010e10:	460b      	mov	r3, r1
 8010e12:	4630      	mov	r0, r6
 8010e14:	4639      	mov	r1, r7
 8010e16:	f7f5 fd99 	bl	800694c <__aeabi_dsub>
 8010e1a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010e1e:	4606      	mov	r6, r0
 8010e20:	460f      	mov	r7, r1
 8010e22:	4620      	mov	r0, r4
 8010e24:	4629      	mov	r1, r5
 8010e26:	f7f5 fd91 	bl	800694c <__aeabi_dsub>
 8010e2a:	4602      	mov	r2, r0
 8010e2c:	460b      	mov	r3, r1
 8010e2e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010e32:	f7f5 fd8b 	bl	800694c <__aeabi_dsub>
 8010e36:	4642      	mov	r2, r8
 8010e38:	464b      	mov	r3, r9
 8010e3a:	f7f5 ff3b 	bl	8006cb4 <__aeabi_dmul>
 8010e3e:	4602      	mov	r2, r0
 8010e40:	460b      	mov	r3, r1
 8010e42:	4630      	mov	r0, r6
 8010e44:	4639      	mov	r1, r7
 8010e46:	f7f5 fd81 	bl	800694c <__aeabi_dsub>
 8010e4a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8010e4e:	f7f5 ff31 	bl	8006cb4 <__aeabi_dmul>
 8010e52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010e56:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010e5a:	4610      	mov	r0, r2
 8010e5c:	4619      	mov	r1, r3
 8010e5e:	f7f5 ff29 	bl	8006cb4 <__aeabi_dmul>
 8010e62:	a37b      	add	r3, pc, #492	; (adr r3, 8011050 <__ieee754_pow+0x6d0>)
 8010e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e68:	4604      	mov	r4, r0
 8010e6a:	460d      	mov	r5, r1
 8010e6c:	f7f5 ff22 	bl	8006cb4 <__aeabi_dmul>
 8010e70:	a379      	add	r3, pc, #484	; (adr r3, 8011058 <__ieee754_pow+0x6d8>)
 8010e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e76:	f7f5 fd6b 	bl	8006950 <__adddf3>
 8010e7a:	4622      	mov	r2, r4
 8010e7c:	462b      	mov	r3, r5
 8010e7e:	f7f5 ff19 	bl	8006cb4 <__aeabi_dmul>
 8010e82:	a377      	add	r3, pc, #476	; (adr r3, 8011060 <__ieee754_pow+0x6e0>)
 8010e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e88:	f7f5 fd62 	bl	8006950 <__adddf3>
 8010e8c:	4622      	mov	r2, r4
 8010e8e:	462b      	mov	r3, r5
 8010e90:	f7f5 ff10 	bl	8006cb4 <__aeabi_dmul>
 8010e94:	a374      	add	r3, pc, #464	; (adr r3, 8011068 <__ieee754_pow+0x6e8>)
 8010e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e9a:	f7f5 fd59 	bl	8006950 <__adddf3>
 8010e9e:	4622      	mov	r2, r4
 8010ea0:	462b      	mov	r3, r5
 8010ea2:	f7f5 ff07 	bl	8006cb4 <__aeabi_dmul>
 8010ea6:	a372      	add	r3, pc, #456	; (adr r3, 8011070 <__ieee754_pow+0x6f0>)
 8010ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eac:	f7f5 fd50 	bl	8006950 <__adddf3>
 8010eb0:	4622      	mov	r2, r4
 8010eb2:	462b      	mov	r3, r5
 8010eb4:	f7f5 fefe 	bl	8006cb4 <__aeabi_dmul>
 8010eb8:	a36f      	add	r3, pc, #444	; (adr r3, 8011078 <__ieee754_pow+0x6f8>)
 8010eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ebe:	f7f5 fd47 	bl	8006950 <__adddf3>
 8010ec2:	4622      	mov	r2, r4
 8010ec4:	4606      	mov	r6, r0
 8010ec6:	460f      	mov	r7, r1
 8010ec8:	462b      	mov	r3, r5
 8010eca:	4620      	mov	r0, r4
 8010ecc:	4629      	mov	r1, r5
 8010ece:	f7f5 fef1 	bl	8006cb4 <__aeabi_dmul>
 8010ed2:	4602      	mov	r2, r0
 8010ed4:	460b      	mov	r3, r1
 8010ed6:	4630      	mov	r0, r6
 8010ed8:	4639      	mov	r1, r7
 8010eda:	f7f5 feeb 	bl	8006cb4 <__aeabi_dmul>
 8010ede:	4642      	mov	r2, r8
 8010ee0:	4604      	mov	r4, r0
 8010ee2:	460d      	mov	r5, r1
 8010ee4:	464b      	mov	r3, r9
 8010ee6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010eea:	f7f5 fd31 	bl	8006950 <__adddf3>
 8010eee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010ef2:	f7f5 fedf 	bl	8006cb4 <__aeabi_dmul>
 8010ef6:	4622      	mov	r2, r4
 8010ef8:	462b      	mov	r3, r5
 8010efa:	f7f5 fd29 	bl	8006950 <__adddf3>
 8010efe:	4642      	mov	r2, r8
 8010f00:	4606      	mov	r6, r0
 8010f02:	460f      	mov	r7, r1
 8010f04:	464b      	mov	r3, r9
 8010f06:	4640      	mov	r0, r8
 8010f08:	4649      	mov	r1, r9
 8010f0a:	f7f5 fed3 	bl	8006cb4 <__aeabi_dmul>
 8010f0e:	2200      	movs	r2, #0
 8010f10:	4b68      	ldr	r3, [pc, #416]	; (80110b4 <__ieee754_pow+0x734>)
 8010f12:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8010f16:	f7f5 fd1b 	bl	8006950 <__adddf3>
 8010f1a:	4632      	mov	r2, r6
 8010f1c:	463b      	mov	r3, r7
 8010f1e:	f7f5 fd17 	bl	8006950 <__adddf3>
 8010f22:	9802      	ldr	r0, [sp, #8]
 8010f24:	460d      	mov	r5, r1
 8010f26:	4604      	mov	r4, r0
 8010f28:	4602      	mov	r2, r0
 8010f2a:	460b      	mov	r3, r1
 8010f2c:	4640      	mov	r0, r8
 8010f2e:	4649      	mov	r1, r9
 8010f30:	f7f5 fec0 	bl	8006cb4 <__aeabi_dmul>
 8010f34:	2200      	movs	r2, #0
 8010f36:	4680      	mov	r8, r0
 8010f38:	4689      	mov	r9, r1
 8010f3a:	4b5e      	ldr	r3, [pc, #376]	; (80110b4 <__ieee754_pow+0x734>)
 8010f3c:	4620      	mov	r0, r4
 8010f3e:	4629      	mov	r1, r5
 8010f40:	f7f5 fd04 	bl	800694c <__aeabi_dsub>
 8010f44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010f48:	f7f5 fd00 	bl	800694c <__aeabi_dsub>
 8010f4c:	4602      	mov	r2, r0
 8010f4e:	460b      	mov	r3, r1
 8010f50:	4630      	mov	r0, r6
 8010f52:	4639      	mov	r1, r7
 8010f54:	f7f5 fcfa 	bl	800694c <__aeabi_dsub>
 8010f58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010f5c:	f7f5 feaa 	bl	8006cb4 <__aeabi_dmul>
 8010f60:	4622      	mov	r2, r4
 8010f62:	4606      	mov	r6, r0
 8010f64:	460f      	mov	r7, r1
 8010f66:	462b      	mov	r3, r5
 8010f68:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010f6c:	f7f5 fea2 	bl	8006cb4 <__aeabi_dmul>
 8010f70:	4602      	mov	r2, r0
 8010f72:	460b      	mov	r3, r1
 8010f74:	4630      	mov	r0, r6
 8010f76:	4639      	mov	r1, r7
 8010f78:	f7f5 fcea 	bl	8006950 <__adddf3>
 8010f7c:	4606      	mov	r6, r0
 8010f7e:	460f      	mov	r7, r1
 8010f80:	4602      	mov	r2, r0
 8010f82:	460b      	mov	r3, r1
 8010f84:	4640      	mov	r0, r8
 8010f86:	4649      	mov	r1, r9
 8010f88:	f7f5 fce2 	bl	8006950 <__adddf3>
 8010f8c:	9802      	ldr	r0, [sp, #8]
 8010f8e:	a33c      	add	r3, pc, #240	; (adr r3, 8011080 <__ieee754_pow+0x700>)
 8010f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f94:	4604      	mov	r4, r0
 8010f96:	460d      	mov	r5, r1
 8010f98:	f7f5 fe8c 	bl	8006cb4 <__aeabi_dmul>
 8010f9c:	4642      	mov	r2, r8
 8010f9e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010fa2:	464b      	mov	r3, r9
 8010fa4:	4620      	mov	r0, r4
 8010fa6:	4629      	mov	r1, r5
 8010fa8:	f7f5 fcd0 	bl	800694c <__aeabi_dsub>
 8010fac:	4602      	mov	r2, r0
 8010fae:	460b      	mov	r3, r1
 8010fb0:	4630      	mov	r0, r6
 8010fb2:	4639      	mov	r1, r7
 8010fb4:	f7f5 fcca 	bl	800694c <__aeabi_dsub>
 8010fb8:	a333      	add	r3, pc, #204	; (adr r3, 8011088 <__ieee754_pow+0x708>)
 8010fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fbe:	f7f5 fe79 	bl	8006cb4 <__aeabi_dmul>
 8010fc2:	a333      	add	r3, pc, #204	; (adr r3, 8011090 <__ieee754_pow+0x710>)
 8010fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fc8:	4606      	mov	r6, r0
 8010fca:	460f      	mov	r7, r1
 8010fcc:	4620      	mov	r0, r4
 8010fce:	4629      	mov	r1, r5
 8010fd0:	f7f5 fe70 	bl	8006cb4 <__aeabi_dmul>
 8010fd4:	4602      	mov	r2, r0
 8010fd6:	460b      	mov	r3, r1
 8010fd8:	4630      	mov	r0, r6
 8010fda:	4639      	mov	r1, r7
 8010fdc:	f7f5 fcb8 	bl	8006950 <__adddf3>
 8010fe0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010fe2:	4b35      	ldr	r3, [pc, #212]	; (80110b8 <__ieee754_pow+0x738>)
 8010fe4:	4413      	add	r3, r2
 8010fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fea:	f7f5 fcb1 	bl	8006950 <__adddf3>
 8010fee:	4604      	mov	r4, r0
 8010ff0:	9807      	ldr	r0, [sp, #28]
 8010ff2:	460d      	mov	r5, r1
 8010ff4:	f7f5 fdf8 	bl	8006be8 <__aeabi_i2d>
 8010ff8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010ffa:	4b30      	ldr	r3, [pc, #192]	; (80110bc <__ieee754_pow+0x73c>)
 8010ffc:	4413      	add	r3, r2
 8010ffe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011002:	4606      	mov	r6, r0
 8011004:	460f      	mov	r7, r1
 8011006:	4622      	mov	r2, r4
 8011008:	462b      	mov	r3, r5
 801100a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801100e:	f7f5 fc9f 	bl	8006950 <__adddf3>
 8011012:	4642      	mov	r2, r8
 8011014:	464b      	mov	r3, r9
 8011016:	f7f5 fc9b 	bl	8006950 <__adddf3>
 801101a:	4632      	mov	r2, r6
 801101c:	463b      	mov	r3, r7
 801101e:	f7f5 fc97 	bl	8006950 <__adddf3>
 8011022:	9802      	ldr	r0, [sp, #8]
 8011024:	4632      	mov	r2, r6
 8011026:	463b      	mov	r3, r7
 8011028:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801102c:	f7f5 fc8e 	bl	800694c <__aeabi_dsub>
 8011030:	4642      	mov	r2, r8
 8011032:	464b      	mov	r3, r9
 8011034:	f7f5 fc8a 	bl	800694c <__aeabi_dsub>
 8011038:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801103c:	e607      	b.n	8010c4e <__ieee754_pow+0x2ce>
 801103e:	f04f 0a01 	mov.w	sl, #1
 8011042:	e6a5      	b.n	8010d90 <__ieee754_pow+0x410>
 8011044:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8011098 <__ieee754_pow+0x718>
 8011048:	e613      	b.n	8010c72 <__ieee754_pow+0x2f2>
 801104a:	bf00      	nop
 801104c:	f3af 8000 	nop.w
 8011050:	4a454eef 	.word	0x4a454eef
 8011054:	3fca7e28 	.word	0x3fca7e28
 8011058:	93c9db65 	.word	0x93c9db65
 801105c:	3fcd864a 	.word	0x3fcd864a
 8011060:	a91d4101 	.word	0xa91d4101
 8011064:	3fd17460 	.word	0x3fd17460
 8011068:	518f264d 	.word	0x518f264d
 801106c:	3fd55555 	.word	0x3fd55555
 8011070:	db6fabff 	.word	0xdb6fabff
 8011074:	3fdb6db6 	.word	0x3fdb6db6
 8011078:	33333303 	.word	0x33333303
 801107c:	3fe33333 	.word	0x3fe33333
 8011080:	e0000000 	.word	0xe0000000
 8011084:	3feec709 	.word	0x3feec709
 8011088:	dc3a03fd 	.word	0xdc3a03fd
 801108c:	3feec709 	.word	0x3feec709
 8011090:	145b01f5 	.word	0x145b01f5
 8011094:	be3e2fe0 	.word	0xbe3e2fe0
 8011098:	00000000 	.word	0x00000000
 801109c:	3ff00000 	.word	0x3ff00000
 80110a0:	43400000 	.word	0x43400000
 80110a4:	0003988e 	.word	0x0003988e
 80110a8:	000bb679 	.word	0x000bb679
 80110ac:	08018298 	.word	0x08018298
 80110b0:	3ff00000 	.word	0x3ff00000
 80110b4:	40080000 	.word	0x40080000
 80110b8:	080182b8 	.word	0x080182b8
 80110bc:	080182a8 	.word	0x080182a8
 80110c0:	a3b6      	add	r3, pc, #728	; (adr r3, 801139c <__ieee754_pow+0xa1c>)
 80110c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110c6:	4640      	mov	r0, r8
 80110c8:	4649      	mov	r1, r9
 80110ca:	f7f5 fc41 	bl	8006950 <__adddf3>
 80110ce:	4622      	mov	r2, r4
 80110d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80110d4:	462b      	mov	r3, r5
 80110d6:	4630      	mov	r0, r6
 80110d8:	4639      	mov	r1, r7
 80110da:	f7f5 fc37 	bl	800694c <__aeabi_dsub>
 80110de:	4602      	mov	r2, r0
 80110e0:	460b      	mov	r3, r1
 80110e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80110e6:	f7f6 f875 	bl	80071d4 <__aeabi_dcmpgt>
 80110ea:	2800      	cmp	r0, #0
 80110ec:	f47f adfe 	bne.w	8010cec <__ieee754_pow+0x36c>
 80110f0:	4aa5      	ldr	r2, [pc, #660]	; (8011388 <__ieee754_pow+0xa08>)
 80110f2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80110f6:	4293      	cmp	r3, r2
 80110f8:	f340 810c 	ble.w	8011314 <__ieee754_pow+0x994>
 80110fc:	151b      	asrs	r3, r3, #20
 80110fe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8011102:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8011106:	fa4a f303 	asr.w	r3, sl, r3
 801110a:	445b      	add	r3, fp
 801110c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011110:	4e9e      	ldr	r6, [pc, #632]	; (801138c <__ieee754_pow+0xa0c>)
 8011112:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8011116:	4116      	asrs	r6, r2
 8011118:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801111c:	2000      	movs	r0, #0
 801111e:	ea23 0106 	bic.w	r1, r3, r6
 8011122:	f1c2 0214 	rsb	r2, r2, #20
 8011126:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801112a:	fa4a fa02 	asr.w	sl, sl, r2
 801112e:	f1bb 0f00 	cmp.w	fp, #0
 8011132:	4602      	mov	r2, r0
 8011134:	460b      	mov	r3, r1
 8011136:	4620      	mov	r0, r4
 8011138:	4629      	mov	r1, r5
 801113a:	bfb8      	it	lt
 801113c:	f1ca 0a00 	rsblt	sl, sl, #0
 8011140:	f7f5 fc04 	bl	800694c <__aeabi_dsub>
 8011144:	e9cd 0100 	strd	r0, r1, [sp]
 8011148:	4642      	mov	r2, r8
 801114a:	464b      	mov	r3, r9
 801114c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011150:	f7f5 fbfe 	bl	8006950 <__adddf3>
 8011154:	2000      	movs	r0, #0
 8011156:	a37a      	add	r3, pc, #488	; (adr r3, 8011340 <__ieee754_pow+0x9c0>)
 8011158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801115c:	4604      	mov	r4, r0
 801115e:	460d      	mov	r5, r1
 8011160:	f7f5 fda8 	bl	8006cb4 <__aeabi_dmul>
 8011164:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011168:	4606      	mov	r6, r0
 801116a:	460f      	mov	r7, r1
 801116c:	4620      	mov	r0, r4
 801116e:	4629      	mov	r1, r5
 8011170:	f7f5 fbec 	bl	800694c <__aeabi_dsub>
 8011174:	4602      	mov	r2, r0
 8011176:	460b      	mov	r3, r1
 8011178:	4640      	mov	r0, r8
 801117a:	4649      	mov	r1, r9
 801117c:	f7f5 fbe6 	bl	800694c <__aeabi_dsub>
 8011180:	a371      	add	r3, pc, #452	; (adr r3, 8011348 <__ieee754_pow+0x9c8>)
 8011182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011186:	f7f5 fd95 	bl	8006cb4 <__aeabi_dmul>
 801118a:	a371      	add	r3, pc, #452	; (adr r3, 8011350 <__ieee754_pow+0x9d0>)
 801118c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011190:	4680      	mov	r8, r0
 8011192:	4689      	mov	r9, r1
 8011194:	4620      	mov	r0, r4
 8011196:	4629      	mov	r1, r5
 8011198:	f7f5 fd8c 	bl	8006cb4 <__aeabi_dmul>
 801119c:	4602      	mov	r2, r0
 801119e:	460b      	mov	r3, r1
 80111a0:	4640      	mov	r0, r8
 80111a2:	4649      	mov	r1, r9
 80111a4:	f7f5 fbd4 	bl	8006950 <__adddf3>
 80111a8:	4604      	mov	r4, r0
 80111aa:	460d      	mov	r5, r1
 80111ac:	4602      	mov	r2, r0
 80111ae:	460b      	mov	r3, r1
 80111b0:	4630      	mov	r0, r6
 80111b2:	4639      	mov	r1, r7
 80111b4:	f7f5 fbcc 	bl	8006950 <__adddf3>
 80111b8:	4632      	mov	r2, r6
 80111ba:	463b      	mov	r3, r7
 80111bc:	4680      	mov	r8, r0
 80111be:	4689      	mov	r9, r1
 80111c0:	f7f5 fbc4 	bl	800694c <__aeabi_dsub>
 80111c4:	4602      	mov	r2, r0
 80111c6:	460b      	mov	r3, r1
 80111c8:	4620      	mov	r0, r4
 80111ca:	4629      	mov	r1, r5
 80111cc:	f7f5 fbbe 	bl	800694c <__aeabi_dsub>
 80111d0:	4642      	mov	r2, r8
 80111d2:	4606      	mov	r6, r0
 80111d4:	460f      	mov	r7, r1
 80111d6:	464b      	mov	r3, r9
 80111d8:	4640      	mov	r0, r8
 80111da:	4649      	mov	r1, r9
 80111dc:	f7f5 fd6a 	bl	8006cb4 <__aeabi_dmul>
 80111e0:	a35d      	add	r3, pc, #372	; (adr r3, 8011358 <__ieee754_pow+0x9d8>)
 80111e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111e6:	4604      	mov	r4, r0
 80111e8:	460d      	mov	r5, r1
 80111ea:	f7f5 fd63 	bl	8006cb4 <__aeabi_dmul>
 80111ee:	a35c      	add	r3, pc, #368	; (adr r3, 8011360 <__ieee754_pow+0x9e0>)
 80111f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111f4:	f7f5 fbaa 	bl	800694c <__aeabi_dsub>
 80111f8:	4622      	mov	r2, r4
 80111fa:	462b      	mov	r3, r5
 80111fc:	f7f5 fd5a 	bl	8006cb4 <__aeabi_dmul>
 8011200:	a359      	add	r3, pc, #356	; (adr r3, 8011368 <__ieee754_pow+0x9e8>)
 8011202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011206:	f7f5 fba3 	bl	8006950 <__adddf3>
 801120a:	4622      	mov	r2, r4
 801120c:	462b      	mov	r3, r5
 801120e:	f7f5 fd51 	bl	8006cb4 <__aeabi_dmul>
 8011212:	a357      	add	r3, pc, #348	; (adr r3, 8011370 <__ieee754_pow+0x9f0>)
 8011214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011218:	f7f5 fb98 	bl	800694c <__aeabi_dsub>
 801121c:	4622      	mov	r2, r4
 801121e:	462b      	mov	r3, r5
 8011220:	f7f5 fd48 	bl	8006cb4 <__aeabi_dmul>
 8011224:	a354      	add	r3, pc, #336	; (adr r3, 8011378 <__ieee754_pow+0x9f8>)
 8011226:	e9d3 2300 	ldrd	r2, r3, [r3]
 801122a:	f7f5 fb91 	bl	8006950 <__adddf3>
 801122e:	4622      	mov	r2, r4
 8011230:	462b      	mov	r3, r5
 8011232:	f7f5 fd3f 	bl	8006cb4 <__aeabi_dmul>
 8011236:	4602      	mov	r2, r0
 8011238:	460b      	mov	r3, r1
 801123a:	4640      	mov	r0, r8
 801123c:	4649      	mov	r1, r9
 801123e:	f7f5 fb85 	bl	800694c <__aeabi_dsub>
 8011242:	4604      	mov	r4, r0
 8011244:	460d      	mov	r5, r1
 8011246:	4602      	mov	r2, r0
 8011248:	460b      	mov	r3, r1
 801124a:	4640      	mov	r0, r8
 801124c:	4649      	mov	r1, r9
 801124e:	f7f5 fd31 	bl	8006cb4 <__aeabi_dmul>
 8011252:	2200      	movs	r2, #0
 8011254:	e9cd 0100 	strd	r0, r1, [sp]
 8011258:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801125c:	4620      	mov	r0, r4
 801125e:	4629      	mov	r1, r5
 8011260:	f7f5 fb74 	bl	800694c <__aeabi_dsub>
 8011264:	4602      	mov	r2, r0
 8011266:	460b      	mov	r3, r1
 8011268:	e9dd 0100 	ldrd	r0, r1, [sp]
 801126c:	f7f5 fe4c 	bl	8006f08 <__aeabi_ddiv>
 8011270:	4632      	mov	r2, r6
 8011272:	4604      	mov	r4, r0
 8011274:	460d      	mov	r5, r1
 8011276:	463b      	mov	r3, r7
 8011278:	4640      	mov	r0, r8
 801127a:	4649      	mov	r1, r9
 801127c:	f7f5 fd1a 	bl	8006cb4 <__aeabi_dmul>
 8011280:	4632      	mov	r2, r6
 8011282:	463b      	mov	r3, r7
 8011284:	f7f5 fb64 	bl	8006950 <__adddf3>
 8011288:	4602      	mov	r2, r0
 801128a:	460b      	mov	r3, r1
 801128c:	4620      	mov	r0, r4
 801128e:	4629      	mov	r1, r5
 8011290:	f7f5 fb5c 	bl	800694c <__aeabi_dsub>
 8011294:	4642      	mov	r2, r8
 8011296:	464b      	mov	r3, r9
 8011298:	f7f5 fb58 	bl	800694c <__aeabi_dsub>
 801129c:	4602      	mov	r2, r0
 801129e:	460b      	mov	r3, r1
 80112a0:	2000      	movs	r0, #0
 80112a2:	493b      	ldr	r1, [pc, #236]	; (8011390 <__ieee754_pow+0xa10>)
 80112a4:	f7f5 fb52 	bl	800694c <__aeabi_dsub>
 80112a8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80112ac:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80112b0:	4602      	mov	r2, r0
 80112b2:	460b      	mov	r3, r1
 80112b4:	da31      	bge.n	801131a <__ieee754_pow+0x99a>
 80112b6:	4650      	mov	r0, sl
 80112b8:	ec43 2b10 	vmov	d0, r2, r3
 80112bc:	f000 f9c4 	bl	8011648 <scalbn>
 80112c0:	ec51 0b10 	vmov	r0, r1, d0
 80112c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80112c8:	f7ff bbf1 	b.w	8010aae <__ieee754_pow+0x12e>
 80112cc:	4b31      	ldr	r3, [pc, #196]	; (8011394 <__ieee754_pow+0xa14>)
 80112ce:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80112d2:	429e      	cmp	r6, r3
 80112d4:	f77f af0c 	ble.w	80110f0 <__ieee754_pow+0x770>
 80112d8:	4b2f      	ldr	r3, [pc, #188]	; (8011398 <__ieee754_pow+0xa18>)
 80112da:	440b      	add	r3, r1
 80112dc:	4303      	orrs	r3, r0
 80112de:	d00b      	beq.n	80112f8 <__ieee754_pow+0x978>
 80112e0:	a327      	add	r3, pc, #156	; (adr r3, 8011380 <__ieee754_pow+0xa00>)
 80112e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80112ea:	f7f5 fce3 	bl	8006cb4 <__aeabi_dmul>
 80112ee:	a324      	add	r3, pc, #144	; (adr r3, 8011380 <__ieee754_pow+0xa00>)
 80112f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112f4:	f7ff bbdb 	b.w	8010aae <__ieee754_pow+0x12e>
 80112f8:	4622      	mov	r2, r4
 80112fa:	462b      	mov	r3, r5
 80112fc:	f7f5 fb26 	bl	800694c <__aeabi_dsub>
 8011300:	4602      	mov	r2, r0
 8011302:	460b      	mov	r3, r1
 8011304:	4640      	mov	r0, r8
 8011306:	4649      	mov	r1, r9
 8011308:	f7f5 ff50 	bl	80071ac <__aeabi_dcmple>
 801130c:	2800      	cmp	r0, #0
 801130e:	f43f aeef 	beq.w	80110f0 <__ieee754_pow+0x770>
 8011312:	e7e5      	b.n	80112e0 <__ieee754_pow+0x960>
 8011314:	f04f 0a00 	mov.w	sl, #0
 8011318:	e716      	b.n	8011148 <__ieee754_pow+0x7c8>
 801131a:	4621      	mov	r1, r4
 801131c:	e7d2      	b.n	80112c4 <__ieee754_pow+0x944>
 801131e:	2000      	movs	r0, #0
 8011320:	491b      	ldr	r1, [pc, #108]	; (8011390 <__ieee754_pow+0xa10>)
 8011322:	f7ff bb8d 	b.w	8010a40 <__ieee754_pow+0xc0>
 8011326:	e9dd 0100 	ldrd	r0, r1, [sp]
 801132a:	f7ff bb89 	b.w	8010a40 <__ieee754_pow+0xc0>
 801132e:	4630      	mov	r0, r6
 8011330:	4639      	mov	r1, r7
 8011332:	f7ff bb85 	b.w	8010a40 <__ieee754_pow+0xc0>
 8011336:	4693      	mov	fp, r2
 8011338:	f7ff bb96 	b.w	8010a68 <__ieee754_pow+0xe8>
 801133c:	f3af 8000 	nop.w
 8011340:	00000000 	.word	0x00000000
 8011344:	3fe62e43 	.word	0x3fe62e43
 8011348:	fefa39ef 	.word	0xfefa39ef
 801134c:	3fe62e42 	.word	0x3fe62e42
 8011350:	0ca86c39 	.word	0x0ca86c39
 8011354:	be205c61 	.word	0xbe205c61
 8011358:	72bea4d0 	.word	0x72bea4d0
 801135c:	3e663769 	.word	0x3e663769
 8011360:	c5d26bf1 	.word	0xc5d26bf1
 8011364:	3ebbbd41 	.word	0x3ebbbd41
 8011368:	af25de2c 	.word	0xaf25de2c
 801136c:	3f11566a 	.word	0x3f11566a
 8011370:	16bebd93 	.word	0x16bebd93
 8011374:	3f66c16c 	.word	0x3f66c16c
 8011378:	5555553e 	.word	0x5555553e
 801137c:	3fc55555 	.word	0x3fc55555
 8011380:	c2f8f359 	.word	0xc2f8f359
 8011384:	01a56e1f 	.word	0x01a56e1f
 8011388:	3fe00000 	.word	0x3fe00000
 801138c:	000fffff 	.word	0x000fffff
 8011390:	3ff00000 	.word	0x3ff00000
 8011394:	4090cbff 	.word	0x4090cbff
 8011398:	3f6f3400 	.word	0x3f6f3400
 801139c:	652b82fe 	.word	0x652b82fe
 80113a0:	3c971547 	.word	0x3c971547

080113a4 <__ieee754_sqrt>:
 80113a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113a8:	ec55 4b10 	vmov	r4, r5, d0
 80113ac:	4e54      	ldr	r6, [pc, #336]	; (8011500 <__ieee754_sqrt+0x15c>)
 80113ae:	43ae      	bics	r6, r5
 80113b0:	ee10 0a10 	vmov	r0, s0
 80113b4:	462b      	mov	r3, r5
 80113b6:	462a      	mov	r2, r5
 80113b8:	4621      	mov	r1, r4
 80113ba:	d113      	bne.n	80113e4 <__ieee754_sqrt+0x40>
 80113bc:	ee10 2a10 	vmov	r2, s0
 80113c0:	462b      	mov	r3, r5
 80113c2:	ee10 0a10 	vmov	r0, s0
 80113c6:	4629      	mov	r1, r5
 80113c8:	f7f5 fc74 	bl	8006cb4 <__aeabi_dmul>
 80113cc:	4602      	mov	r2, r0
 80113ce:	460b      	mov	r3, r1
 80113d0:	4620      	mov	r0, r4
 80113d2:	4629      	mov	r1, r5
 80113d4:	f7f5 fabc 	bl	8006950 <__adddf3>
 80113d8:	4604      	mov	r4, r0
 80113da:	460d      	mov	r5, r1
 80113dc:	ec45 4b10 	vmov	d0, r4, r5
 80113e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113e4:	2d00      	cmp	r5, #0
 80113e6:	dc10      	bgt.n	801140a <__ieee754_sqrt+0x66>
 80113e8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80113ec:	4330      	orrs	r0, r6
 80113ee:	d0f5      	beq.n	80113dc <__ieee754_sqrt+0x38>
 80113f0:	b15d      	cbz	r5, 801140a <__ieee754_sqrt+0x66>
 80113f2:	ee10 2a10 	vmov	r2, s0
 80113f6:	462b      	mov	r3, r5
 80113f8:	4620      	mov	r0, r4
 80113fa:	4629      	mov	r1, r5
 80113fc:	f7f5 faa6 	bl	800694c <__aeabi_dsub>
 8011400:	4602      	mov	r2, r0
 8011402:	460b      	mov	r3, r1
 8011404:	f7f5 fd80 	bl	8006f08 <__aeabi_ddiv>
 8011408:	e7e6      	b.n	80113d8 <__ieee754_sqrt+0x34>
 801140a:	151b      	asrs	r3, r3, #20
 801140c:	d10c      	bne.n	8011428 <__ieee754_sqrt+0x84>
 801140e:	2a00      	cmp	r2, #0
 8011410:	d06d      	beq.n	80114ee <__ieee754_sqrt+0x14a>
 8011412:	2000      	movs	r0, #0
 8011414:	02d6      	lsls	r6, r2, #11
 8011416:	d56e      	bpl.n	80114f6 <__ieee754_sqrt+0x152>
 8011418:	1e44      	subs	r4, r0, #1
 801141a:	1b1b      	subs	r3, r3, r4
 801141c:	f1c0 0420 	rsb	r4, r0, #32
 8011420:	fa21 f404 	lsr.w	r4, r1, r4
 8011424:	4322      	orrs	r2, r4
 8011426:	4081      	lsls	r1, r0
 8011428:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801142c:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8011430:	07dd      	lsls	r5, r3, #31
 8011432:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8011436:	bf42      	ittt	mi
 8011438:	0052      	lslmi	r2, r2, #1
 801143a:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 801143e:	0049      	lslmi	r1, r1, #1
 8011440:	1058      	asrs	r0, r3, #1
 8011442:	2500      	movs	r5, #0
 8011444:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8011448:	441a      	add	r2, r3
 801144a:	0049      	lsls	r1, r1, #1
 801144c:	2316      	movs	r3, #22
 801144e:	462c      	mov	r4, r5
 8011450:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8011454:	19a7      	adds	r7, r4, r6
 8011456:	4297      	cmp	r7, r2
 8011458:	bfde      	ittt	le
 801145a:	1bd2      	suble	r2, r2, r7
 801145c:	19bc      	addle	r4, r7, r6
 801145e:	19ad      	addle	r5, r5, r6
 8011460:	0052      	lsls	r2, r2, #1
 8011462:	3b01      	subs	r3, #1
 8011464:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8011468:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801146c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011470:	d1f0      	bne.n	8011454 <__ieee754_sqrt+0xb0>
 8011472:	f04f 0e20 	mov.w	lr, #32
 8011476:	469c      	mov	ip, r3
 8011478:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801147c:	42a2      	cmp	r2, r4
 801147e:	eb06 070c 	add.w	r7, r6, ip
 8011482:	dc02      	bgt.n	801148a <__ieee754_sqrt+0xe6>
 8011484:	d112      	bne.n	80114ac <__ieee754_sqrt+0x108>
 8011486:	428f      	cmp	r7, r1
 8011488:	d810      	bhi.n	80114ac <__ieee754_sqrt+0x108>
 801148a:	2f00      	cmp	r7, #0
 801148c:	eb07 0c06 	add.w	ip, r7, r6
 8011490:	da34      	bge.n	80114fc <__ieee754_sqrt+0x158>
 8011492:	f1bc 0f00 	cmp.w	ip, #0
 8011496:	db31      	blt.n	80114fc <__ieee754_sqrt+0x158>
 8011498:	f104 0801 	add.w	r8, r4, #1
 801149c:	1b12      	subs	r2, r2, r4
 801149e:	428f      	cmp	r7, r1
 80114a0:	bf88      	it	hi
 80114a2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80114a6:	1bc9      	subs	r1, r1, r7
 80114a8:	4433      	add	r3, r6
 80114aa:	4644      	mov	r4, r8
 80114ac:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 80114b0:	f1be 0e01 	subs.w	lr, lr, #1
 80114b4:	443a      	add	r2, r7
 80114b6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80114ba:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80114be:	d1dd      	bne.n	801147c <__ieee754_sqrt+0xd8>
 80114c0:	430a      	orrs	r2, r1
 80114c2:	d006      	beq.n	80114d2 <__ieee754_sqrt+0x12e>
 80114c4:	1c5c      	adds	r4, r3, #1
 80114c6:	bf13      	iteet	ne
 80114c8:	3301      	addne	r3, #1
 80114ca:	3501      	addeq	r5, #1
 80114cc:	4673      	moveq	r3, lr
 80114ce:	f023 0301 	bicne.w	r3, r3, #1
 80114d2:	106a      	asrs	r2, r5, #1
 80114d4:	085b      	lsrs	r3, r3, #1
 80114d6:	07e9      	lsls	r1, r5, #31
 80114d8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80114dc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80114e0:	bf48      	it	mi
 80114e2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80114e6:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80114ea:	461c      	mov	r4, r3
 80114ec:	e776      	b.n	80113dc <__ieee754_sqrt+0x38>
 80114ee:	0aca      	lsrs	r2, r1, #11
 80114f0:	3b15      	subs	r3, #21
 80114f2:	0549      	lsls	r1, r1, #21
 80114f4:	e78b      	b.n	801140e <__ieee754_sqrt+0x6a>
 80114f6:	0052      	lsls	r2, r2, #1
 80114f8:	3001      	adds	r0, #1
 80114fa:	e78b      	b.n	8011414 <__ieee754_sqrt+0x70>
 80114fc:	46a0      	mov	r8, r4
 80114fe:	e7cd      	b.n	801149c <__ieee754_sqrt+0xf8>
 8011500:	7ff00000 	.word	0x7ff00000

08011504 <fabs>:
 8011504:	ec53 2b10 	vmov	r2, r3, d0
 8011508:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801150c:	ec43 2b10 	vmov	d0, r2, r3
 8011510:	4770      	bx	lr

08011512 <finite>:
 8011512:	ee10 3a90 	vmov	r3, s1
 8011516:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801151a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801151e:	0fc0      	lsrs	r0, r0, #31
 8011520:	4770      	bx	lr

08011522 <matherr>:
 8011522:	2000      	movs	r0, #0
 8011524:	4770      	bx	lr
	...

08011528 <nan>:
 8011528:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011530 <nan+0x8>
 801152c:	4770      	bx	lr
 801152e:	bf00      	nop
 8011530:	00000000 	.word	0x00000000
 8011534:	7ff80000 	.word	0x7ff80000

08011538 <rint>:
 8011538:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801153a:	ec51 0b10 	vmov	r0, r1, d0
 801153e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8011542:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 8011546:	2e13      	cmp	r6, #19
 8011548:	ee10 7a10 	vmov	r7, s0
 801154c:	460b      	mov	r3, r1
 801154e:	4602      	mov	r2, r0
 8011550:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8011554:	dc58      	bgt.n	8011608 <rint+0xd0>
 8011556:	2e00      	cmp	r6, #0
 8011558:	da2b      	bge.n	80115b2 <rint+0x7a>
 801155a:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801155e:	4302      	orrs	r2, r0
 8011560:	d023      	beq.n	80115aa <rint+0x72>
 8011562:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8011566:	4302      	orrs	r2, r0
 8011568:	4251      	negs	r1, r2
 801156a:	4311      	orrs	r1, r2
 801156c:	0b09      	lsrs	r1, r1, #12
 801156e:	0c5b      	lsrs	r3, r3, #17
 8011570:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 8011574:	045b      	lsls	r3, r3, #17
 8011576:	ea41 0703 	orr.w	r7, r1, r3
 801157a:	4b31      	ldr	r3, [pc, #196]	; (8011640 <rint+0x108>)
 801157c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011580:	4639      	mov	r1, r7
 8011582:	e9d3 6700 	ldrd	r6, r7, [r3]
 8011586:	ee10 0a10 	vmov	r0, s0
 801158a:	4632      	mov	r2, r6
 801158c:	463b      	mov	r3, r7
 801158e:	f7f5 f9df 	bl	8006950 <__adddf3>
 8011592:	e9cd 0100 	strd	r0, r1, [sp]
 8011596:	463b      	mov	r3, r7
 8011598:	4632      	mov	r2, r6
 801159a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801159e:	f7f5 f9d5 	bl	800694c <__aeabi_dsub>
 80115a2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80115a6:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 80115aa:	ec41 0b10 	vmov	d0, r0, r1
 80115ae:	b003      	add	sp, #12
 80115b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115b2:	4c24      	ldr	r4, [pc, #144]	; (8011644 <rint+0x10c>)
 80115b4:	4134      	asrs	r4, r6
 80115b6:	ea01 0704 	and.w	r7, r1, r4
 80115ba:	4307      	orrs	r7, r0
 80115bc:	d0f5      	beq.n	80115aa <rint+0x72>
 80115be:	0861      	lsrs	r1, r4, #1
 80115c0:	ea03 0001 	and.w	r0, r3, r1
 80115c4:	4302      	orrs	r2, r0
 80115c6:	d00b      	beq.n	80115e0 <rint+0xa8>
 80115c8:	ea23 0101 	bic.w	r1, r3, r1
 80115cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80115d0:	2e13      	cmp	r6, #19
 80115d2:	fa43 f306 	asr.w	r3, r3, r6
 80115d6:	bf0c      	ite	eq
 80115d8:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 80115dc:	2200      	movne	r2, #0
 80115de:	430b      	orrs	r3, r1
 80115e0:	4619      	mov	r1, r3
 80115e2:	4b17      	ldr	r3, [pc, #92]	; (8011640 <rint+0x108>)
 80115e4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80115e8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80115ec:	4610      	mov	r0, r2
 80115ee:	462b      	mov	r3, r5
 80115f0:	4622      	mov	r2, r4
 80115f2:	f7f5 f9ad 	bl	8006950 <__adddf3>
 80115f6:	e9cd 0100 	strd	r0, r1, [sp]
 80115fa:	4622      	mov	r2, r4
 80115fc:	462b      	mov	r3, r5
 80115fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011602:	f7f5 f9a3 	bl	800694c <__aeabi_dsub>
 8011606:	e7d0      	b.n	80115aa <rint+0x72>
 8011608:	2e33      	cmp	r6, #51	; 0x33
 801160a:	dd08      	ble.n	801161e <rint+0xe6>
 801160c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8011610:	d1cb      	bne.n	80115aa <rint+0x72>
 8011612:	ee10 2a10 	vmov	r2, s0
 8011616:	460b      	mov	r3, r1
 8011618:	f7f5 f99a 	bl	8006950 <__adddf3>
 801161c:	e7c5      	b.n	80115aa <rint+0x72>
 801161e:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8011622:	f04f 34ff 	mov.w	r4, #4294967295
 8011626:	40f4      	lsrs	r4, r6
 8011628:	4220      	tst	r0, r4
 801162a:	d0be      	beq.n	80115aa <rint+0x72>
 801162c:	0861      	lsrs	r1, r4, #1
 801162e:	420f      	tst	r7, r1
 8011630:	bf1f      	itttt	ne
 8011632:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 8011636:	ea27 0101 	bicne.w	r1, r7, r1
 801163a:	4132      	asrne	r2, r6
 801163c:	430a      	orrne	r2, r1
 801163e:	e7cf      	b.n	80115e0 <rint+0xa8>
 8011640:	080182c8 	.word	0x080182c8
 8011644:	000fffff 	.word	0x000fffff

08011648 <scalbn>:
 8011648:	b570      	push	{r4, r5, r6, lr}
 801164a:	ec55 4b10 	vmov	r4, r5, d0
 801164e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8011652:	4606      	mov	r6, r0
 8011654:	462b      	mov	r3, r5
 8011656:	b9b2      	cbnz	r2, 8011686 <scalbn+0x3e>
 8011658:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801165c:	4323      	orrs	r3, r4
 801165e:	d03c      	beq.n	80116da <scalbn+0x92>
 8011660:	2200      	movs	r2, #0
 8011662:	4b33      	ldr	r3, [pc, #204]	; (8011730 <scalbn+0xe8>)
 8011664:	4629      	mov	r1, r5
 8011666:	ee10 0a10 	vmov	r0, s0
 801166a:	f7f5 fb23 	bl	8006cb4 <__aeabi_dmul>
 801166e:	4a31      	ldr	r2, [pc, #196]	; (8011734 <scalbn+0xec>)
 8011670:	4296      	cmp	r6, r2
 8011672:	4604      	mov	r4, r0
 8011674:	460d      	mov	r5, r1
 8011676:	460b      	mov	r3, r1
 8011678:	da13      	bge.n	80116a2 <scalbn+0x5a>
 801167a:	a329      	add	r3, pc, #164	; (adr r3, 8011720 <scalbn+0xd8>)
 801167c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011680:	f7f5 fb18 	bl	8006cb4 <__aeabi_dmul>
 8011684:	e00a      	b.n	801169c <scalbn+0x54>
 8011686:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801168a:	428a      	cmp	r2, r1
 801168c:	d10c      	bne.n	80116a8 <scalbn+0x60>
 801168e:	ee10 2a10 	vmov	r2, s0
 8011692:	462b      	mov	r3, r5
 8011694:	4620      	mov	r0, r4
 8011696:	4629      	mov	r1, r5
 8011698:	f7f5 f95a 	bl	8006950 <__adddf3>
 801169c:	4604      	mov	r4, r0
 801169e:	460d      	mov	r5, r1
 80116a0:	e01b      	b.n	80116da <scalbn+0x92>
 80116a2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80116a6:	3a36      	subs	r2, #54	; 0x36
 80116a8:	4432      	add	r2, r6
 80116aa:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80116ae:	428a      	cmp	r2, r1
 80116b0:	dd0b      	ble.n	80116ca <scalbn+0x82>
 80116b2:	ec45 4b11 	vmov	d1, r4, r5
 80116b6:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8011728 <scalbn+0xe0>
 80116ba:	f000 f83f 	bl	801173c <copysign>
 80116be:	a31a      	add	r3, pc, #104	; (adr r3, 8011728 <scalbn+0xe0>)
 80116c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116c4:	ec51 0b10 	vmov	r0, r1, d0
 80116c8:	e7da      	b.n	8011680 <scalbn+0x38>
 80116ca:	2a00      	cmp	r2, #0
 80116cc:	dd08      	ble.n	80116e0 <scalbn+0x98>
 80116ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80116d2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80116d6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80116da:	ec45 4b10 	vmov	d0, r4, r5
 80116de:	bd70      	pop	{r4, r5, r6, pc}
 80116e0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80116e4:	da0d      	bge.n	8011702 <scalbn+0xba>
 80116e6:	f24c 3350 	movw	r3, #50000	; 0xc350
 80116ea:	429e      	cmp	r6, r3
 80116ec:	ec45 4b11 	vmov	d1, r4, r5
 80116f0:	dce1      	bgt.n	80116b6 <scalbn+0x6e>
 80116f2:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8011720 <scalbn+0xd8>
 80116f6:	f000 f821 	bl	801173c <copysign>
 80116fa:	a309      	add	r3, pc, #36	; (adr r3, 8011720 <scalbn+0xd8>)
 80116fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011700:	e7e0      	b.n	80116c4 <scalbn+0x7c>
 8011702:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011706:	3236      	adds	r2, #54	; 0x36
 8011708:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801170c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011710:	4620      	mov	r0, r4
 8011712:	4629      	mov	r1, r5
 8011714:	2200      	movs	r2, #0
 8011716:	4b08      	ldr	r3, [pc, #32]	; (8011738 <scalbn+0xf0>)
 8011718:	e7b2      	b.n	8011680 <scalbn+0x38>
 801171a:	bf00      	nop
 801171c:	f3af 8000 	nop.w
 8011720:	c2f8f359 	.word	0xc2f8f359
 8011724:	01a56e1f 	.word	0x01a56e1f
 8011728:	8800759c 	.word	0x8800759c
 801172c:	7e37e43c 	.word	0x7e37e43c
 8011730:	43500000 	.word	0x43500000
 8011734:	ffff3cb0 	.word	0xffff3cb0
 8011738:	3c900000 	.word	0x3c900000

0801173c <copysign>:
 801173c:	ec53 2b10 	vmov	r2, r3, d0
 8011740:	ee11 0a90 	vmov	r0, s3
 8011744:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011748:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801174c:	ea41 0300 	orr.w	r3, r1, r0
 8011750:	ec43 2b10 	vmov	d0, r2, r3
 8011754:	4770      	bx	lr

08011756 <abort>:
 8011756:	b508      	push	{r3, lr}
 8011758:	2006      	movs	r0, #6
 801175a:	f000 ff77 	bl	801264c <raise>
 801175e:	2001      	movs	r0, #1
 8011760:	f7fd fd6e 	bl	800f240 <_exit>

08011764 <__cxa_atexit>:
 8011764:	4613      	mov	r3, r2
 8011766:	460a      	mov	r2, r1
 8011768:	4601      	mov	r1, r0
 801176a:	2002      	movs	r0, #2
 801176c:	f003 b8ee 	b.w	801494c <__register_exitproc>

08011770 <__errno>:
 8011770:	4b01      	ldr	r3, [pc, #4]	; (8011778 <__errno+0x8>)
 8011772:	6818      	ldr	r0, [r3, #0]
 8011774:	4770      	bx	lr
 8011776:	bf00      	nop
 8011778:	20000014 	.word	0x20000014

0801177c <_fputc_r>:
 801177c:	b570      	push	{r4, r5, r6, lr}
 801177e:	460e      	mov	r6, r1
 8011780:	4614      	mov	r4, r2
 8011782:	4605      	mov	r5, r0
 8011784:	b118      	cbz	r0, 801178e <_fputc_r+0x12>
 8011786:	6983      	ldr	r3, [r0, #24]
 8011788:	b90b      	cbnz	r3, 801178e <_fputc_r+0x12>
 801178a:	f004 f8d5 	bl	8015938 <__sinit>
 801178e:	4b14      	ldr	r3, [pc, #80]	; (80117e0 <_fputc_r+0x64>)
 8011790:	429c      	cmp	r4, r3
 8011792:	d11a      	bne.n	80117ca <_fputc_r+0x4e>
 8011794:	686c      	ldr	r4, [r5, #4]
 8011796:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011798:	07d8      	lsls	r0, r3, #31
 801179a:	d405      	bmi.n	80117a8 <_fputc_r+0x2c>
 801179c:	89a3      	ldrh	r3, [r4, #12]
 801179e:	0599      	lsls	r1, r3, #22
 80117a0:	d402      	bmi.n	80117a8 <_fputc_r+0x2c>
 80117a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80117a4:	f000 fa60 	bl	8011c68 <__retarget_lock_acquire_recursive>
 80117a8:	4622      	mov	r2, r4
 80117aa:	4628      	mov	r0, r5
 80117ac:	4631      	mov	r1, r6
 80117ae:	f000 fcdd 	bl	801216c <_putc_r>
 80117b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80117b4:	07da      	lsls	r2, r3, #31
 80117b6:	4605      	mov	r5, r0
 80117b8:	d405      	bmi.n	80117c6 <_fputc_r+0x4a>
 80117ba:	89a3      	ldrh	r3, [r4, #12]
 80117bc:	059b      	lsls	r3, r3, #22
 80117be:	d402      	bmi.n	80117c6 <_fputc_r+0x4a>
 80117c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80117c2:	f000 fa53 	bl	8011c6c <__retarget_lock_release_recursive>
 80117c6:	4628      	mov	r0, r5
 80117c8:	bd70      	pop	{r4, r5, r6, pc}
 80117ca:	4b06      	ldr	r3, [pc, #24]	; (80117e4 <_fputc_r+0x68>)
 80117cc:	429c      	cmp	r4, r3
 80117ce:	d101      	bne.n	80117d4 <_fputc_r+0x58>
 80117d0:	68ac      	ldr	r4, [r5, #8]
 80117d2:	e7e0      	b.n	8011796 <_fputc_r+0x1a>
 80117d4:	4b04      	ldr	r3, [pc, #16]	; (80117e8 <_fputc_r+0x6c>)
 80117d6:	429c      	cmp	r4, r3
 80117d8:	bf08      	it	eq
 80117da:	68ec      	ldreq	r4, [r5, #12]
 80117dc:	e7db      	b.n	8011796 <_fputc_r+0x1a>
 80117de:	bf00      	nop
 80117e0:	08018384 	.word	0x08018384
 80117e4:	080183a4 	.word	0x080183a4
 80117e8:	08018364 	.word	0x08018364

080117ec <fputc>:
 80117ec:	4b02      	ldr	r3, [pc, #8]	; (80117f8 <fputc+0xc>)
 80117ee:	460a      	mov	r2, r1
 80117f0:	4601      	mov	r1, r0
 80117f2:	6818      	ldr	r0, [r3, #0]
 80117f4:	f7ff bfc2 	b.w	801177c <_fputc_r>
 80117f8:	20000014 	.word	0x20000014

080117fc <_fputs_r>:
 80117fc:	b530      	push	{r4, r5, lr}
 80117fe:	b087      	sub	sp, #28
 8011800:	4605      	mov	r5, r0
 8011802:	4608      	mov	r0, r1
 8011804:	4614      	mov	r4, r2
 8011806:	9101      	str	r1, [sp, #4]
 8011808:	f7f5 f894 	bl	8006934 <strlen>
 801180c:	ab01      	add	r3, sp, #4
 801180e:	9303      	str	r3, [sp, #12]
 8011810:	2301      	movs	r3, #1
 8011812:	9005      	str	r0, [sp, #20]
 8011814:	9002      	str	r0, [sp, #8]
 8011816:	9304      	str	r3, [sp, #16]
 8011818:	b125      	cbz	r5, 8011824 <_fputs_r+0x28>
 801181a:	69ab      	ldr	r3, [r5, #24]
 801181c:	b913      	cbnz	r3, 8011824 <_fputs_r+0x28>
 801181e:	4628      	mov	r0, r5
 8011820:	f004 f88a 	bl	8015938 <__sinit>
 8011824:	4b19      	ldr	r3, [pc, #100]	; (801188c <_fputs_r+0x90>)
 8011826:	429c      	cmp	r4, r3
 8011828:	d126      	bne.n	8011878 <_fputs_r+0x7c>
 801182a:	686c      	ldr	r4, [r5, #4]
 801182c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801182e:	07db      	lsls	r3, r3, #31
 8011830:	d405      	bmi.n	801183e <_fputs_r+0x42>
 8011832:	89a3      	ldrh	r3, [r4, #12]
 8011834:	0598      	lsls	r0, r3, #22
 8011836:	d402      	bmi.n	801183e <_fputs_r+0x42>
 8011838:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801183a:	f000 fa15 	bl	8011c68 <__retarget_lock_acquire_recursive>
 801183e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011842:	0499      	lsls	r1, r3, #18
 8011844:	d406      	bmi.n	8011854 <_fputs_r+0x58>
 8011846:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801184a:	81a3      	strh	r3, [r4, #12]
 801184c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801184e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011852:	6663      	str	r3, [r4, #100]	; 0x64
 8011854:	aa03      	add	r2, sp, #12
 8011856:	4628      	mov	r0, r5
 8011858:	4621      	mov	r1, r4
 801185a:	f000 f825 	bl	80118a8 <__sfvwrite_r>
 801185e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011860:	07da      	lsls	r2, r3, #31
 8011862:	4605      	mov	r5, r0
 8011864:	d405      	bmi.n	8011872 <_fputs_r+0x76>
 8011866:	89a3      	ldrh	r3, [r4, #12]
 8011868:	059b      	lsls	r3, r3, #22
 801186a:	d402      	bmi.n	8011872 <_fputs_r+0x76>
 801186c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801186e:	f000 f9fd 	bl	8011c6c <__retarget_lock_release_recursive>
 8011872:	4628      	mov	r0, r5
 8011874:	b007      	add	sp, #28
 8011876:	bd30      	pop	{r4, r5, pc}
 8011878:	4b05      	ldr	r3, [pc, #20]	; (8011890 <_fputs_r+0x94>)
 801187a:	429c      	cmp	r4, r3
 801187c:	d101      	bne.n	8011882 <_fputs_r+0x86>
 801187e:	68ac      	ldr	r4, [r5, #8]
 8011880:	e7d4      	b.n	801182c <_fputs_r+0x30>
 8011882:	4b04      	ldr	r3, [pc, #16]	; (8011894 <_fputs_r+0x98>)
 8011884:	429c      	cmp	r4, r3
 8011886:	bf08      	it	eq
 8011888:	68ec      	ldreq	r4, [r5, #12]
 801188a:	e7cf      	b.n	801182c <_fputs_r+0x30>
 801188c:	08018384 	.word	0x08018384
 8011890:	080183a4 	.word	0x080183a4
 8011894:	08018364 	.word	0x08018364

08011898 <fputs>:
 8011898:	4b02      	ldr	r3, [pc, #8]	; (80118a4 <fputs+0xc>)
 801189a:	460a      	mov	r2, r1
 801189c:	4601      	mov	r1, r0
 801189e:	6818      	ldr	r0, [r3, #0]
 80118a0:	f7ff bfac 	b.w	80117fc <_fputs_r>
 80118a4:	20000014 	.word	0x20000014

080118a8 <__sfvwrite_r>:
 80118a8:	6893      	ldr	r3, [r2, #8]
 80118aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118ae:	4607      	mov	r7, r0
 80118b0:	460c      	mov	r4, r1
 80118b2:	4690      	mov	r8, r2
 80118b4:	b91b      	cbnz	r3, 80118be <__sfvwrite_r+0x16>
 80118b6:	2000      	movs	r0, #0
 80118b8:	b003      	add	sp, #12
 80118ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118be:	898b      	ldrh	r3, [r1, #12]
 80118c0:	0718      	lsls	r0, r3, #28
 80118c2:	d526      	bpl.n	8011912 <__sfvwrite_r+0x6a>
 80118c4:	690b      	ldr	r3, [r1, #16]
 80118c6:	b323      	cbz	r3, 8011912 <__sfvwrite_r+0x6a>
 80118c8:	89a3      	ldrh	r3, [r4, #12]
 80118ca:	f8d8 6000 	ldr.w	r6, [r8]
 80118ce:	f013 0902 	ands.w	r9, r3, #2
 80118d2:	d02d      	beq.n	8011930 <__sfvwrite_r+0x88>
 80118d4:	f04f 0a00 	mov.w	sl, #0
 80118d8:	f8df b264 	ldr.w	fp, [pc, #612]	; 8011b40 <__sfvwrite_r+0x298>
 80118dc:	46d1      	mov	r9, sl
 80118de:	f1b9 0f00 	cmp.w	r9, #0
 80118e2:	d01f      	beq.n	8011924 <__sfvwrite_r+0x7c>
 80118e4:	45d9      	cmp	r9, fp
 80118e6:	464b      	mov	r3, r9
 80118e8:	4652      	mov	r2, sl
 80118ea:	bf28      	it	cs
 80118ec:	465b      	movcs	r3, fp
 80118ee:	6a21      	ldr	r1, [r4, #32]
 80118f0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80118f2:	4638      	mov	r0, r7
 80118f4:	47a8      	blx	r5
 80118f6:	2800      	cmp	r0, #0
 80118f8:	f340 8089 	ble.w	8011a0e <__sfvwrite_r+0x166>
 80118fc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011900:	4482      	add	sl, r0
 8011902:	eba9 0900 	sub.w	r9, r9, r0
 8011906:	1a18      	subs	r0, r3, r0
 8011908:	f8c8 0008 	str.w	r0, [r8, #8]
 801190c:	2800      	cmp	r0, #0
 801190e:	d1e6      	bne.n	80118de <__sfvwrite_r+0x36>
 8011910:	e7d1      	b.n	80118b6 <__sfvwrite_r+0xe>
 8011912:	4621      	mov	r1, r4
 8011914:	4638      	mov	r0, r7
 8011916:	f002 ffab 	bl	8014870 <__swsetup_r>
 801191a:	2800      	cmp	r0, #0
 801191c:	d0d4      	beq.n	80118c8 <__sfvwrite_r+0x20>
 801191e:	f04f 30ff 	mov.w	r0, #4294967295
 8011922:	e7c9      	b.n	80118b8 <__sfvwrite_r+0x10>
 8011924:	f8d6 a000 	ldr.w	sl, [r6]
 8011928:	f8d6 9004 	ldr.w	r9, [r6, #4]
 801192c:	3608      	adds	r6, #8
 801192e:	e7d6      	b.n	80118de <__sfvwrite_r+0x36>
 8011930:	f013 0301 	ands.w	r3, r3, #1
 8011934:	d043      	beq.n	80119be <__sfvwrite_r+0x116>
 8011936:	4648      	mov	r0, r9
 8011938:	46ca      	mov	sl, r9
 801193a:	46cb      	mov	fp, r9
 801193c:	f1bb 0f00 	cmp.w	fp, #0
 8011940:	f000 80d9 	beq.w	8011af6 <__sfvwrite_r+0x24e>
 8011944:	b950      	cbnz	r0, 801195c <__sfvwrite_r+0xb4>
 8011946:	465a      	mov	r2, fp
 8011948:	210a      	movs	r1, #10
 801194a:	4650      	mov	r0, sl
 801194c:	f7f4 ff98 	bl	8006880 <memchr>
 8011950:	2800      	cmp	r0, #0
 8011952:	f000 80d5 	beq.w	8011b00 <__sfvwrite_r+0x258>
 8011956:	3001      	adds	r0, #1
 8011958:	eba0 090a 	sub.w	r9, r0, sl
 801195c:	6820      	ldr	r0, [r4, #0]
 801195e:	6921      	ldr	r1, [r4, #16]
 8011960:	6962      	ldr	r2, [r4, #20]
 8011962:	45d9      	cmp	r9, fp
 8011964:	464b      	mov	r3, r9
 8011966:	bf28      	it	cs
 8011968:	465b      	movcs	r3, fp
 801196a:	4288      	cmp	r0, r1
 801196c:	f240 80cb 	bls.w	8011b06 <__sfvwrite_r+0x25e>
 8011970:	68a5      	ldr	r5, [r4, #8]
 8011972:	4415      	add	r5, r2
 8011974:	42ab      	cmp	r3, r5
 8011976:	f340 80c6 	ble.w	8011b06 <__sfvwrite_r+0x25e>
 801197a:	4651      	mov	r1, sl
 801197c:	462a      	mov	r2, r5
 801197e:	f000 fbaf 	bl	80120e0 <memmove>
 8011982:	6823      	ldr	r3, [r4, #0]
 8011984:	442b      	add	r3, r5
 8011986:	6023      	str	r3, [r4, #0]
 8011988:	4621      	mov	r1, r4
 801198a:	4638      	mov	r0, r7
 801198c:	f003 ff40 	bl	8015810 <_fflush_r>
 8011990:	2800      	cmp	r0, #0
 8011992:	d13c      	bne.n	8011a0e <__sfvwrite_r+0x166>
 8011994:	ebb9 0905 	subs.w	r9, r9, r5
 8011998:	f040 80cf 	bne.w	8011b3a <__sfvwrite_r+0x292>
 801199c:	4621      	mov	r1, r4
 801199e:	4638      	mov	r0, r7
 80119a0:	f003 ff36 	bl	8015810 <_fflush_r>
 80119a4:	2800      	cmp	r0, #0
 80119a6:	d132      	bne.n	8011a0e <__sfvwrite_r+0x166>
 80119a8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80119ac:	44aa      	add	sl, r5
 80119ae:	ebab 0b05 	sub.w	fp, fp, r5
 80119b2:	1b5d      	subs	r5, r3, r5
 80119b4:	f8c8 5008 	str.w	r5, [r8, #8]
 80119b8:	2d00      	cmp	r5, #0
 80119ba:	d1bf      	bne.n	801193c <__sfvwrite_r+0x94>
 80119bc:	e77b      	b.n	80118b6 <__sfvwrite_r+0xe>
 80119be:	4699      	mov	r9, r3
 80119c0:	469a      	mov	sl, r3
 80119c2:	f1ba 0f00 	cmp.w	sl, #0
 80119c6:	d027      	beq.n	8011a18 <__sfvwrite_r+0x170>
 80119c8:	89a2      	ldrh	r2, [r4, #12]
 80119ca:	68a5      	ldr	r5, [r4, #8]
 80119cc:	0591      	lsls	r1, r2, #22
 80119ce:	d565      	bpl.n	8011a9c <__sfvwrite_r+0x1f4>
 80119d0:	45aa      	cmp	sl, r5
 80119d2:	d33b      	bcc.n	8011a4c <__sfvwrite_r+0x1a4>
 80119d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80119d8:	d036      	beq.n	8011a48 <__sfvwrite_r+0x1a0>
 80119da:	6921      	ldr	r1, [r4, #16]
 80119dc:	6823      	ldr	r3, [r4, #0]
 80119de:	1a5b      	subs	r3, r3, r1
 80119e0:	9301      	str	r3, [sp, #4]
 80119e2:	6963      	ldr	r3, [r4, #20]
 80119e4:	2002      	movs	r0, #2
 80119e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80119ea:	fb93 fbf0 	sdiv	fp, r3, r0
 80119ee:	9b01      	ldr	r3, [sp, #4]
 80119f0:	1c58      	adds	r0, r3, #1
 80119f2:	4450      	add	r0, sl
 80119f4:	4583      	cmp	fp, r0
 80119f6:	bf38      	it	cc
 80119f8:	4683      	movcc	fp, r0
 80119fa:	0553      	lsls	r3, r2, #21
 80119fc:	d53e      	bpl.n	8011a7c <__sfvwrite_r+0x1d4>
 80119fe:	4659      	mov	r1, fp
 8011a00:	4638      	mov	r0, r7
 8011a02:	f000 f945 	bl	8011c90 <_malloc_r>
 8011a06:	4605      	mov	r5, r0
 8011a08:	b950      	cbnz	r0, 8011a20 <__sfvwrite_r+0x178>
 8011a0a:	230c      	movs	r3, #12
 8011a0c:	603b      	str	r3, [r7, #0]
 8011a0e:	89a3      	ldrh	r3, [r4, #12]
 8011a10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a14:	81a3      	strh	r3, [r4, #12]
 8011a16:	e782      	b.n	801191e <__sfvwrite_r+0x76>
 8011a18:	e896 0600 	ldmia.w	r6, {r9, sl}
 8011a1c:	3608      	adds	r6, #8
 8011a1e:	e7d0      	b.n	80119c2 <__sfvwrite_r+0x11a>
 8011a20:	9a01      	ldr	r2, [sp, #4]
 8011a22:	6921      	ldr	r1, [r4, #16]
 8011a24:	f000 fb51 	bl	80120ca <memcpy>
 8011a28:	89a2      	ldrh	r2, [r4, #12]
 8011a2a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8011a2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8011a32:	81a2      	strh	r2, [r4, #12]
 8011a34:	9b01      	ldr	r3, [sp, #4]
 8011a36:	6125      	str	r5, [r4, #16]
 8011a38:	441d      	add	r5, r3
 8011a3a:	ebab 0303 	sub.w	r3, fp, r3
 8011a3e:	6025      	str	r5, [r4, #0]
 8011a40:	f8c4 b014 	str.w	fp, [r4, #20]
 8011a44:	4655      	mov	r5, sl
 8011a46:	60a3      	str	r3, [r4, #8]
 8011a48:	45aa      	cmp	sl, r5
 8011a4a:	d200      	bcs.n	8011a4e <__sfvwrite_r+0x1a6>
 8011a4c:	4655      	mov	r5, sl
 8011a4e:	462a      	mov	r2, r5
 8011a50:	4649      	mov	r1, r9
 8011a52:	6820      	ldr	r0, [r4, #0]
 8011a54:	f000 fb44 	bl	80120e0 <memmove>
 8011a58:	68a3      	ldr	r3, [r4, #8]
 8011a5a:	1b5b      	subs	r3, r3, r5
 8011a5c:	60a3      	str	r3, [r4, #8]
 8011a5e:	6823      	ldr	r3, [r4, #0]
 8011a60:	441d      	add	r5, r3
 8011a62:	6025      	str	r5, [r4, #0]
 8011a64:	4655      	mov	r5, sl
 8011a66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011a6a:	44a9      	add	r9, r5
 8011a6c:	ebaa 0a05 	sub.w	sl, sl, r5
 8011a70:	1b5d      	subs	r5, r3, r5
 8011a72:	f8c8 5008 	str.w	r5, [r8, #8]
 8011a76:	2d00      	cmp	r5, #0
 8011a78:	d1a3      	bne.n	80119c2 <__sfvwrite_r+0x11a>
 8011a7a:	e71c      	b.n	80118b6 <__sfvwrite_r+0xe>
 8011a7c:	465a      	mov	r2, fp
 8011a7e:	4638      	mov	r0, r7
 8011a80:	f000 fc2c 	bl	80122dc <_realloc_r>
 8011a84:	4605      	mov	r5, r0
 8011a86:	2800      	cmp	r0, #0
 8011a88:	d1d4      	bne.n	8011a34 <__sfvwrite_r+0x18c>
 8011a8a:	6921      	ldr	r1, [r4, #16]
 8011a8c:	4638      	mov	r0, r7
 8011a8e:	f004 f829 	bl	8015ae4 <_free_r>
 8011a92:	89a3      	ldrh	r3, [r4, #12]
 8011a94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011a98:	81a3      	strh	r3, [r4, #12]
 8011a9a:	e7b6      	b.n	8011a0a <__sfvwrite_r+0x162>
 8011a9c:	6820      	ldr	r0, [r4, #0]
 8011a9e:	6923      	ldr	r3, [r4, #16]
 8011aa0:	4298      	cmp	r0, r3
 8011aa2:	d802      	bhi.n	8011aaa <__sfvwrite_r+0x202>
 8011aa4:	6962      	ldr	r2, [r4, #20]
 8011aa6:	4592      	cmp	sl, r2
 8011aa8:	d215      	bcs.n	8011ad6 <__sfvwrite_r+0x22e>
 8011aaa:	4555      	cmp	r5, sl
 8011aac:	bf28      	it	cs
 8011aae:	4655      	movcs	r5, sl
 8011ab0:	462a      	mov	r2, r5
 8011ab2:	4649      	mov	r1, r9
 8011ab4:	f000 fb14 	bl	80120e0 <memmove>
 8011ab8:	68a3      	ldr	r3, [r4, #8]
 8011aba:	6822      	ldr	r2, [r4, #0]
 8011abc:	1b5b      	subs	r3, r3, r5
 8011abe:	442a      	add	r2, r5
 8011ac0:	60a3      	str	r3, [r4, #8]
 8011ac2:	6022      	str	r2, [r4, #0]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d1ce      	bne.n	8011a66 <__sfvwrite_r+0x1be>
 8011ac8:	4621      	mov	r1, r4
 8011aca:	4638      	mov	r0, r7
 8011acc:	f003 fea0 	bl	8015810 <_fflush_r>
 8011ad0:	2800      	cmp	r0, #0
 8011ad2:	d0c8      	beq.n	8011a66 <__sfvwrite_r+0x1be>
 8011ad4:	e79b      	b.n	8011a0e <__sfvwrite_r+0x166>
 8011ad6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011ada:	4553      	cmp	r3, sl
 8011adc:	bf28      	it	cs
 8011ade:	4653      	movcs	r3, sl
 8011ae0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8011ae2:	fb93 f3f2 	sdiv	r3, r3, r2
 8011ae6:	6a21      	ldr	r1, [r4, #32]
 8011ae8:	4353      	muls	r3, r2
 8011aea:	4638      	mov	r0, r7
 8011aec:	464a      	mov	r2, r9
 8011aee:	47a8      	blx	r5
 8011af0:	1e05      	subs	r5, r0, #0
 8011af2:	dcb8      	bgt.n	8011a66 <__sfvwrite_r+0x1be>
 8011af4:	e78b      	b.n	8011a0e <__sfvwrite_r+0x166>
 8011af6:	e896 0c00 	ldmia.w	r6, {sl, fp}
 8011afa:	2000      	movs	r0, #0
 8011afc:	3608      	adds	r6, #8
 8011afe:	e71d      	b.n	801193c <__sfvwrite_r+0x94>
 8011b00:	f10b 0901 	add.w	r9, fp, #1
 8011b04:	e72a      	b.n	801195c <__sfvwrite_r+0xb4>
 8011b06:	4293      	cmp	r3, r2
 8011b08:	db09      	blt.n	8011b1e <__sfvwrite_r+0x276>
 8011b0a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8011b0c:	6a21      	ldr	r1, [r4, #32]
 8011b0e:	4613      	mov	r3, r2
 8011b10:	4638      	mov	r0, r7
 8011b12:	4652      	mov	r2, sl
 8011b14:	47a8      	blx	r5
 8011b16:	1e05      	subs	r5, r0, #0
 8011b18:	f73f af3c 	bgt.w	8011994 <__sfvwrite_r+0xec>
 8011b1c:	e777      	b.n	8011a0e <__sfvwrite_r+0x166>
 8011b1e:	461a      	mov	r2, r3
 8011b20:	4651      	mov	r1, sl
 8011b22:	9301      	str	r3, [sp, #4]
 8011b24:	f000 fadc 	bl	80120e0 <memmove>
 8011b28:	9b01      	ldr	r3, [sp, #4]
 8011b2a:	68a2      	ldr	r2, [r4, #8]
 8011b2c:	1ad2      	subs	r2, r2, r3
 8011b2e:	60a2      	str	r2, [r4, #8]
 8011b30:	6822      	ldr	r2, [r4, #0]
 8011b32:	441a      	add	r2, r3
 8011b34:	6022      	str	r2, [r4, #0]
 8011b36:	461d      	mov	r5, r3
 8011b38:	e72c      	b.n	8011994 <__sfvwrite_r+0xec>
 8011b3a:	2001      	movs	r0, #1
 8011b3c:	e734      	b.n	80119a8 <__sfvwrite_r+0x100>
 8011b3e:	bf00      	nop
 8011b40:	7ffffc00 	.word	0x7ffffc00

08011b44 <_fwrite_r>:
 8011b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b48:	b086      	sub	sp, #24
 8011b4a:	fb02 f503 	mul.w	r5, r2, r3
 8011b4e:	461f      	mov	r7, r3
 8011b50:	ab01      	add	r3, sp, #4
 8011b52:	9303      	str	r3, [sp, #12]
 8011b54:	2301      	movs	r3, #1
 8011b56:	4690      	mov	r8, r2
 8011b58:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8011b5a:	9101      	str	r1, [sp, #4]
 8011b5c:	9502      	str	r5, [sp, #8]
 8011b5e:	9505      	str	r5, [sp, #20]
 8011b60:	9304      	str	r3, [sp, #16]
 8011b62:	4606      	mov	r6, r0
 8011b64:	b118      	cbz	r0, 8011b6e <_fwrite_r+0x2a>
 8011b66:	6983      	ldr	r3, [r0, #24]
 8011b68:	b90b      	cbnz	r3, 8011b6e <_fwrite_r+0x2a>
 8011b6a:	f003 fee5 	bl	8015938 <__sinit>
 8011b6e:	4b21      	ldr	r3, [pc, #132]	; (8011bf4 <_fwrite_r+0xb0>)
 8011b70:	429c      	cmp	r4, r3
 8011b72:	d127      	bne.n	8011bc4 <_fwrite_r+0x80>
 8011b74:	6874      	ldr	r4, [r6, #4]
 8011b76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011b78:	07d8      	lsls	r0, r3, #31
 8011b7a:	d405      	bmi.n	8011b88 <_fwrite_r+0x44>
 8011b7c:	89a3      	ldrh	r3, [r4, #12]
 8011b7e:	0599      	lsls	r1, r3, #22
 8011b80:	d402      	bmi.n	8011b88 <_fwrite_r+0x44>
 8011b82:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b84:	f000 f870 	bl	8011c68 <__retarget_lock_acquire_recursive>
 8011b88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b8c:	049a      	lsls	r2, r3, #18
 8011b8e:	d406      	bmi.n	8011b9e <_fwrite_r+0x5a>
 8011b90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011b94:	81a3      	strh	r3, [r4, #12]
 8011b96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011b98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011b9c:	6663      	str	r3, [r4, #100]	; 0x64
 8011b9e:	aa03      	add	r2, sp, #12
 8011ba0:	4621      	mov	r1, r4
 8011ba2:	4630      	mov	r0, r6
 8011ba4:	f7ff fe80 	bl	80118a8 <__sfvwrite_r>
 8011ba8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011baa:	b9a8      	cbnz	r0, 8011bd8 <_fwrite_r+0x94>
 8011bac:	07d8      	lsls	r0, r3, #31
 8011bae:	d405      	bmi.n	8011bbc <_fwrite_r+0x78>
 8011bb0:	89a3      	ldrh	r3, [r4, #12]
 8011bb2:	0599      	lsls	r1, r3, #22
 8011bb4:	d402      	bmi.n	8011bbc <_fwrite_r+0x78>
 8011bb6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011bb8:	f000 f858 	bl	8011c6c <__retarget_lock_release_recursive>
 8011bbc:	4638      	mov	r0, r7
 8011bbe:	b006      	add	sp, #24
 8011bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bc4:	4b0c      	ldr	r3, [pc, #48]	; (8011bf8 <_fwrite_r+0xb4>)
 8011bc6:	429c      	cmp	r4, r3
 8011bc8:	d101      	bne.n	8011bce <_fwrite_r+0x8a>
 8011bca:	68b4      	ldr	r4, [r6, #8]
 8011bcc:	e7d3      	b.n	8011b76 <_fwrite_r+0x32>
 8011bce:	4b0b      	ldr	r3, [pc, #44]	; (8011bfc <_fwrite_r+0xb8>)
 8011bd0:	429c      	cmp	r4, r3
 8011bd2:	bf08      	it	eq
 8011bd4:	68f4      	ldreq	r4, [r6, #12]
 8011bd6:	e7ce      	b.n	8011b76 <_fwrite_r+0x32>
 8011bd8:	07da      	lsls	r2, r3, #31
 8011bda:	d405      	bmi.n	8011be8 <_fwrite_r+0xa4>
 8011bdc:	89a3      	ldrh	r3, [r4, #12]
 8011bde:	059b      	lsls	r3, r3, #22
 8011be0:	d402      	bmi.n	8011be8 <_fwrite_r+0xa4>
 8011be2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011be4:	f000 f842 	bl	8011c6c <__retarget_lock_release_recursive>
 8011be8:	9b05      	ldr	r3, [sp, #20]
 8011bea:	1aed      	subs	r5, r5, r3
 8011bec:	fbb5 f7f8 	udiv	r7, r5, r8
 8011bf0:	e7e4      	b.n	8011bbc <_fwrite_r+0x78>
 8011bf2:	bf00      	nop
 8011bf4:	08018384 	.word	0x08018384
 8011bf8:	080183a4 	.word	0x080183a4
 8011bfc:	08018364 	.word	0x08018364

08011c00 <fwrite>:
 8011c00:	b507      	push	{r0, r1, r2, lr}
 8011c02:	9300      	str	r3, [sp, #0]
 8011c04:	4613      	mov	r3, r2
 8011c06:	460a      	mov	r2, r1
 8011c08:	4601      	mov	r1, r0
 8011c0a:	4803      	ldr	r0, [pc, #12]	; (8011c18 <fwrite+0x18>)
 8011c0c:	6800      	ldr	r0, [r0, #0]
 8011c0e:	f7ff ff99 	bl	8011b44 <_fwrite_r>
 8011c12:	b003      	add	sp, #12
 8011c14:	f85d fb04 	ldr.w	pc, [sp], #4
 8011c18:	20000014 	.word	0x20000014

08011c1c <__libc_init_array>:
 8011c1c:	b570      	push	{r4, r5, r6, lr}
 8011c1e:	4e0d      	ldr	r6, [pc, #52]	; (8011c54 <__libc_init_array+0x38>)
 8011c20:	4c0d      	ldr	r4, [pc, #52]	; (8011c58 <__libc_init_array+0x3c>)
 8011c22:	1ba4      	subs	r4, r4, r6
 8011c24:	10a4      	asrs	r4, r4, #2
 8011c26:	2500      	movs	r5, #0
 8011c28:	42a5      	cmp	r5, r4
 8011c2a:	d109      	bne.n	8011c40 <__libc_init_array+0x24>
 8011c2c:	4e0b      	ldr	r6, [pc, #44]	; (8011c5c <__libc_init_array+0x40>)
 8011c2e:	4c0c      	ldr	r4, [pc, #48]	; (8011c60 <__libc_init_array+0x44>)
 8011c30:	f004 fe1c 	bl	801686c <_init>
 8011c34:	1ba4      	subs	r4, r4, r6
 8011c36:	10a4      	asrs	r4, r4, #2
 8011c38:	2500      	movs	r5, #0
 8011c3a:	42a5      	cmp	r5, r4
 8011c3c:	d105      	bne.n	8011c4a <__libc_init_array+0x2e>
 8011c3e:	bd70      	pop	{r4, r5, r6, pc}
 8011c40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011c44:	4798      	blx	r3
 8011c46:	3501      	adds	r5, #1
 8011c48:	e7ee      	b.n	8011c28 <__libc_init_array+0xc>
 8011c4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011c4e:	4798      	blx	r3
 8011c50:	3501      	adds	r5, #1
 8011c52:	e7f2      	b.n	8011c3a <__libc_init_array+0x1e>
 8011c54:	08018b54 	.word	0x08018b54
 8011c58:	08018b54 	.word	0x08018b54
 8011c5c:	08018b54 	.word	0x08018b54
 8011c60:	08018b68 	.word	0x08018b68

08011c64 <__retarget_lock_init_recursive>:
 8011c64:	4770      	bx	lr

08011c66 <__retarget_lock_close_recursive>:
 8011c66:	4770      	bx	lr

08011c68 <__retarget_lock_acquire_recursive>:
 8011c68:	4770      	bx	lr

08011c6a <__retarget_lock_release>:
 8011c6a:	4770      	bx	lr

08011c6c <__retarget_lock_release_recursive>:
 8011c6c:	4770      	bx	lr
	...

08011c70 <malloc>:
 8011c70:	4b02      	ldr	r3, [pc, #8]	; (8011c7c <malloc+0xc>)
 8011c72:	4601      	mov	r1, r0
 8011c74:	6818      	ldr	r0, [r3, #0]
 8011c76:	f000 b80b 	b.w	8011c90 <_malloc_r>
 8011c7a:	bf00      	nop
 8011c7c:	20000014 	.word	0x20000014

08011c80 <free>:
 8011c80:	4b02      	ldr	r3, [pc, #8]	; (8011c8c <free+0xc>)
 8011c82:	4601      	mov	r1, r0
 8011c84:	6818      	ldr	r0, [r3, #0]
 8011c86:	f003 bf2d 	b.w	8015ae4 <_free_r>
 8011c8a:	bf00      	nop
 8011c8c:	20000014 	.word	0x20000014

08011c90 <_malloc_r>:
 8011c90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c94:	f101 040b 	add.w	r4, r1, #11
 8011c98:	2c16      	cmp	r4, #22
 8011c9a:	4681      	mov	r9, r0
 8011c9c:	d907      	bls.n	8011cae <_malloc_r+0x1e>
 8011c9e:	f034 0407 	bics.w	r4, r4, #7
 8011ca2:	d505      	bpl.n	8011cb0 <_malloc_r+0x20>
 8011ca4:	230c      	movs	r3, #12
 8011ca6:	f8c9 3000 	str.w	r3, [r9]
 8011caa:	2600      	movs	r6, #0
 8011cac:	e131      	b.n	8011f12 <_malloc_r+0x282>
 8011cae:	2410      	movs	r4, #16
 8011cb0:	428c      	cmp	r4, r1
 8011cb2:	d3f7      	bcc.n	8011ca4 <_malloc_r+0x14>
 8011cb4:	4648      	mov	r0, r9
 8011cb6:	f000 fa35 	bl	8012124 <__malloc_lock>
 8011cba:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8011cbe:	4d9c      	ldr	r5, [pc, #624]	; (8011f30 <_malloc_r+0x2a0>)
 8011cc0:	d236      	bcs.n	8011d30 <_malloc_r+0xa0>
 8011cc2:	f104 0208 	add.w	r2, r4, #8
 8011cc6:	442a      	add	r2, r5
 8011cc8:	f1a2 0108 	sub.w	r1, r2, #8
 8011ccc:	6856      	ldr	r6, [r2, #4]
 8011cce:	428e      	cmp	r6, r1
 8011cd0:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8011cd4:	d102      	bne.n	8011cdc <_malloc_r+0x4c>
 8011cd6:	68d6      	ldr	r6, [r2, #12]
 8011cd8:	42b2      	cmp	r2, r6
 8011cda:	d010      	beq.n	8011cfe <_malloc_r+0x6e>
 8011cdc:	6873      	ldr	r3, [r6, #4]
 8011cde:	68f2      	ldr	r2, [r6, #12]
 8011ce0:	68b1      	ldr	r1, [r6, #8]
 8011ce2:	f023 0303 	bic.w	r3, r3, #3
 8011ce6:	60ca      	str	r2, [r1, #12]
 8011ce8:	4433      	add	r3, r6
 8011cea:	6091      	str	r1, [r2, #8]
 8011cec:	685a      	ldr	r2, [r3, #4]
 8011cee:	f042 0201 	orr.w	r2, r2, #1
 8011cf2:	605a      	str	r2, [r3, #4]
 8011cf4:	4648      	mov	r0, r9
 8011cf6:	f000 fa1b 	bl	8012130 <__malloc_unlock>
 8011cfa:	3608      	adds	r6, #8
 8011cfc:	e109      	b.n	8011f12 <_malloc_r+0x282>
 8011cfe:	3302      	adds	r3, #2
 8011d00:	4a8c      	ldr	r2, [pc, #560]	; (8011f34 <_malloc_r+0x2a4>)
 8011d02:	692e      	ldr	r6, [r5, #16]
 8011d04:	4296      	cmp	r6, r2
 8011d06:	4611      	mov	r1, r2
 8011d08:	d06d      	beq.n	8011de6 <_malloc_r+0x156>
 8011d0a:	6870      	ldr	r0, [r6, #4]
 8011d0c:	f020 0003 	bic.w	r0, r0, #3
 8011d10:	1b07      	subs	r7, r0, r4
 8011d12:	2f0f      	cmp	r7, #15
 8011d14:	dd47      	ble.n	8011da6 <_malloc_r+0x116>
 8011d16:	1933      	adds	r3, r6, r4
 8011d18:	f044 0401 	orr.w	r4, r4, #1
 8011d1c:	6074      	str	r4, [r6, #4]
 8011d1e:	616b      	str	r3, [r5, #20]
 8011d20:	612b      	str	r3, [r5, #16]
 8011d22:	60da      	str	r2, [r3, #12]
 8011d24:	609a      	str	r2, [r3, #8]
 8011d26:	f047 0201 	orr.w	r2, r7, #1
 8011d2a:	605a      	str	r2, [r3, #4]
 8011d2c:	5037      	str	r7, [r6, r0]
 8011d2e:	e7e1      	b.n	8011cf4 <_malloc_r+0x64>
 8011d30:	0a63      	lsrs	r3, r4, #9
 8011d32:	d02a      	beq.n	8011d8a <_malloc_r+0xfa>
 8011d34:	2b04      	cmp	r3, #4
 8011d36:	d812      	bhi.n	8011d5e <_malloc_r+0xce>
 8011d38:	09a3      	lsrs	r3, r4, #6
 8011d3a:	3338      	adds	r3, #56	; 0x38
 8011d3c:	1c5a      	adds	r2, r3, #1
 8011d3e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8011d42:	f1a2 0008 	sub.w	r0, r2, #8
 8011d46:	6856      	ldr	r6, [r2, #4]
 8011d48:	4286      	cmp	r6, r0
 8011d4a:	d006      	beq.n	8011d5a <_malloc_r+0xca>
 8011d4c:	6872      	ldr	r2, [r6, #4]
 8011d4e:	f022 0203 	bic.w	r2, r2, #3
 8011d52:	1b11      	subs	r1, r2, r4
 8011d54:	290f      	cmp	r1, #15
 8011d56:	dd1c      	ble.n	8011d92 <_malloc_r+0x102>
 8011d58:	3b01      	subs	r3, #1
 8011d5a:	3301      	adds	r3, #1
 8011d5c:	e7d0      	b.n	8011d00 <_malloc_r+0x70>
 8011d5e:	2b14      	cmp	r3, #20
 8011d60:	d801      	bhi.n	8011d66 <_malloc_r+0xd6>
 8011d62:	335b      	adds	r3, #91	; 0x5b
 8011d64:	e7ea      	b.n	8011d3c <_malloc_r+0xac>
 8011d66:	2b54      	cmp	r3, #84	; 0x54
 8011d68:	d802      	bhi.n	8011d70 <_malloc_r+0xe0>
 8011d6a:	0b23      	lsrs	r3, r4, #12
 8011d6c:	336e      	adds	r3, #110	; 0x6e
 8011d6e:	e7e5      	b.n	8011d3c <_malloc_r+0xac>
 8011d70:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8011d74:	d802      	bhi.n	8011d7c <_malloc_r+0xec>
 8011d76:	0be3      	lsrs	r3, r4, #15
 8011d78:	3377      	adds	r3, #119	; 0x77
 8011d7a:	e7df      	b.n	8011d3c <_malloc_r+0xac>
 8011d7c:	f240 5254 	movw	r2, #1364	; 0x554
 8011d80:	4293      	cmp	r3, r2
 8011d82:	d804      	bhi.n	8011d8e <_malloc_r+0xfe>
 8011d84:	0ca3      	lsrs	r3, r4, #18
 8011d86:	337c      	adds	r3, #124	; 0x7c
 8011d88:	e7d8      	b.n	8011d3c <_malloc_r+0xac>
 8011d8a:	233f      	movs	r3, #63	; 0x3f
 8011d8c:	e7d6      	b.n	8011d3c <_malloc_r+0xac>
 8011d8e:	237e      	movs	r3, #126	; 0x7e
 8011d90:	e7d4      	b.n	8011d3c <_malloc_r+0xac>
 8011d92:	2900      	cmp	r1, #0
 8011d94:	68f1      	ldr	r1, [r6, #12]
 8011d96:	db04      	blt.n	8011da2 <_malloc_r+0x112>
 8011d98:	68b3      	ldr	r3, [r6, #8]
 8011d9a:	60d9      	str	r1, [r3, #12]
 8011d9c:	608b      	str	r3, [r1, #8]
 8011d9e:	18b3      	adds	r3, r6, r2
 8011da0:	e7a4      	b.n	8011cec <_malloc_r+0x5c>
 8011da2:	460e      	mov	r6, r1
 8011da4:	e7d0      	b.n	8011d48 <_malloc_r+0xb8>
 8011da6:	2f00      	cmp	r7, #0
 8011da8:	616a      	str	r2, [r5, #20]
 8011daa:	612a      	str	r2, [r5, #16]
 8011dac:	db05      	blt.n	8011dba <_malloc_r+0x12a>
 8011dae:	4430      	add	r0, r6
 8011db0:	6843      	ldr	r3, [r0, #4]
 8011db2:	f043 0301 	orr.w	r3, r3, #1
 8011db6:	6043      	str	r3, [r0, #4]
 8011db8:	e79c      	b.n	8011cf4 <_malloc_r+0x64>
 8011dba:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8011dbe:	d244      	bcs.n	8011e4a <_malloc_r+0x1ba>
 8011dc0:	08c0      	lsrs	r0, r0, #3
 8011dc2:	1087      	asrs	r7, r0, #2
 8011dc4:	2201      	movs	r2, #1
 8011dc6:	fa02 f707 	lsl.w	r7, r2, r7
 8011dca:	686a      	ldr	r2, [r5, #4]
 8011dcc:	3001      	adds	r0, #1
 8011dce:	433a      	orrs	r2, r7
 8011dd0:	606a      	str	r2, [r5, #4]
 8011dd2:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8011dd6:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8011dda:	60b7      	str	r7, [r6, #8]
 8011ddc:	3a08      	subs	r2, #8
 8011dde:	60f2      	str	r2, [r6, #12]
 8011de0:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8011de4:	60fe      	str	r6, [r7, #12]
 8011de6:	2001      	movs	r0, #1
 8011de8:	109a      	asrs	r2, r3, #2
 8011dea:	fa00 f202 	lsl.w	r2, r0, r2
 8011dee:	6868      	ldr	r0, [r5, #4]
 8011df0:	4282      	cmp	r2, r0
 8011df2:	f200 80a1 	bhi.w	8011f38 <_malloc_r+0x2a8>
 8011df6:	4202      	tst	r2, r0
 8011df8:	d106      	bne.n	8011e08 <_malloc_r+0x178>
 8011dfa:	f023 0303 	bic.w	r3, r3, #3
 8011dfe:	0052      	lsls	r2, r2, #1
 8011e00:	4202      	tst	r2, r0
 8011e02:	f103 0304 	add.w	r3, r3, #4
 8011e06:	d0fa      	beq.n	8011dfe <_malloc_r+0x16e>
 8011e08:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8011e0c:	46e0      	mov	r8, ip
 8011e0e:	469e      	mov	lr, r3
 8011e10:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8011e14:	4546      	cmp	r6, r8
 8011e16:	d153      	bne.n	8011ec0 <_malloc_r+0x230>
 8011e18:	f10e 0e01 	add.w	lr, lr, #1
 8011e1c:	f01e 0f03 	tst.w	lr, #3
 8011e20:	f108 0808 	add.w	r8, r8, #8
 8011e24:	d1f4      	bne.n	8011e10 <_malloc_r+0x180>
 8011e26:	0798      	lsls	r0, r3, #30
 8011e28:	d179      	bne.n	8011f1e <_malloc_r+0x28e>
 8011e2a:	686b      	ldr	r3, [r5, #4]
 8011e2c:	ea23 0302 	bic.w	r3, r3, r2
 8011e30:	606b      	str	r3, [r5, #4]
 8011e32:	6868      	ldr	r0, [r5, #4]
 8011e34:	0052      	lsls	r2, r2, #1
 8011e36:	4282      	cmp	r2, r0
 8011e38:	d87e      	bhi.n	8011f38 <_malloc_r+0x2a8>
 8011e3a:	2a00      	cmp	r2, #0
 8011e3c:	d07c      	beq.n	8011f38 <_malloc_r+0x2a8>
 8011e3e:	4673      	mov	r3, lr
 8011e40:	4202      	tst	r2, r0
 8011e42:	d1e1      	bne.n	8011e08 <_malloc_r+0x178>
 8011e44:	3304      	adds	r3, #4
 8011e46:	0052      	lsls	r2, r2, #1
 8011e48:	e7fa      	b.n	8011e40 <_malloc_r+0x1b0>
 8011e4a:	0a42      	lsrs	r2, r0, #9
 8011e4c:	2a04      	cmp	r2, #4
 8011e4e:	d815      	bhi.n	8011e7c <_malloc_r+0x1ec>
 8011e50:	0982      	lsrs	r2, r0, #6
 8011e52:	3238      	adds	r2, #56	; 0x38
 8011e54:	1c57      	adds	r7, r2, #1
 8011e56:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8011e5a:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8011e5e:	45be      	cmp	lr, r7
 8011e60:	d126      	bne.n	8011eb0 <_malloc_r+0x220>
 8011e62:	2001      	movs	r0, #1
 8011e64:	1092      	asrs	r2, r2, #2
 8011e66:	fa00 f202 	lsl.w	r2, r0, r2
 8011e6a:	6868      	ldr	r0, [r5, #4]
 8011e6c:	4310      	orrs	r0, r2
 8011e6e:	6068      	str	r0, [r5, #4]
 8011e70:	f8c6 e00c 	str.w	lr, [r6, #12]
 8011e74:	60b7      	str	r7, [r6, #8]
 8011e76:	f8ce 6008 	str.w	r6, [lr, #8]
 8011e7a:	e7b3      	b.n	8011de4 <_malloc_r+0x154>
 8011e7c:	2a14      	cmp	r2, #20
 8011e7e:	d801      	bhi.n	8011e84 <_malloc_r+0x1f4>
 8011e80:	325b      	adds	r2, #91	; 0x5b
 8011e82:	e7e7      	b.n	8011e54 <_malloc_r+0x1c4>
 8011e84:	2a54      	cmp	r2, #84	; 0x54
 8011e86:	d802      	bhi.n	8011e8e <_malloc_r+0x1fe>
 8011e88:	0b02      	lsrs	r2, r0, #12
 8011e8a:	326e      	adds	r2, #110	; 0x6e
 8011e8c:	e7e2      	b.n	8011e54 <_malloc_r+0x1c4>
 8011e8e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8011e92:	d802      	bhi.n	8011e9a <_malloc_r+0x20a>
 8011e94:	0bc2      	lsrs	r2, r0, #15
 8011e96:	3277      	adds	r2, #119	; 0x77
 8011e98:	e7dc      	b.n	8011e54 <_malloc_r+0x1c4>
 8011e9a:	f240 5754 	movw	r7, #1364	; 0x554
 8011e9e:	42ba      	cmp	r2, r7
 8011ea0:	bf9a      	itte	ls
 8011ea2:	0c82      	lsrls	r2, r0, #18
 8011ea4:	327c      	addls	r2, #124	; 0x7c
 8011ea6:	227e      	movhi	r2, #126	; 0x7e
 8011ea8:	e7d4      	b.n	8011e54 <_malloc_r+0x1c4>
 8011eaa:	68bf      	ldr	r7, [r7, #8]
 8011eac:	45be      	cmp	lr, r7
 8011eae:	d004      	beq.n	8011eba <_malloc_r+0x22a>
 8011eb0:	687a      	ldr	r2, [r7, #4]
 8011eb2:	f022 0203 	bic.w	r2, r2, #3
 8011eb6:	4290      	cmp	r0, r2
 8011eb8:	d3f7      	bcc.n	8011eaa <_malloc_r+0x21a>
 8011eba:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8011ebe:	e7d7      	b.n	8011e70 <_malloc_r+0x1e0>
 8011ec0:	6870      	ldr	r0, [r6, #4]
 8011ec2:	68f7      	ldr	r7, [r6, #12]
 8011ec4:	f020 0003 	bic.w	r0, r0, #3
 8011ec8:	eba0 0a04 	sub.w	sl, r0, r4
 8011ecc:	f1ba 0f0f 	cmp.w	sl, #15
 8011ed0:	dd10      	ble.n	8011ef4 <_malloc_r+0x264>
 8011ed2:	68b2      	ldr	r2, [r6, #8]
 8011ed4:	1933      	adds	r3, r6, r4
 8011ed6:	f044 0401 	orr.w	r4, r4, #1
 8011eda:	6074      	str	r4, [r6, #4]
 8011edc:	60d7      	str	r7, [r2, #12]
 8011ede:	60ba      	str	r2, [r7, #8]
 8011ee0:	f04a 0201 	orr.w	r2, sl, #1
 8011ee4:	616b      	str	r3, [r5, #20]
 8011ee6:	612b      	str	r3, [r5, #16]
 8011ee8:	60d9      	str	r1, [r3, #12]
 8011eea:	6099      	str	r1, [r3, #8]
 8011eec:	605a      	str	r2, [r3, #4]
 8011eee:	f846 a000 	str.w	sl, [r6, r0]
 8011ef2:	e6ff      	b.n	8011cf4 <_malloc_r+0x64>
 8011ef4:	f1ba 0f00 	cmp.w	sl, #0
 8011ef8:	db0f      	blt.n	8011f1a <_malloc_r+0x28a>
 8011efa:	4430      	add	r0, r6
 8011efc:	6843      	ldr	r3, [r0, #4]
 8011efe:	f043 0301 	orr.w	r3, r3, #1
 8011f02:	6043      	str	r3, [r0, #4]
 8011f04:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8011f08:	4648      	mov	r0, r9
 8011f0a:	60df      	str	r7, [r3, #12]
 8011f0c:	60bb      	str	r3, [r7, #8]
 8011f0e:	f000 f90f 	bl	8012130 <__malloc_unlock>
 8011f12:	4630      	mov	r0, r6
 8011f14:	b003      	add	sp, #12
 8011f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f1a:	463e      	mov	r6, r7
 8011f1c:	e77a      	b.n	8011e14 <_malloc_r+0x184>
 8011f1e:	f85c 0908 	ldr.w	r0, [ip], #-8
 8011f22:	4584      	cmp	ip, r0
 8011f24:	f103 33ff 	add.w	r3, r3, #4294967295
 8011f28:	f43f af7d 	beq.w	8011e26 <_malloc_r+0x196>
 8011f2c:	e781      	b.n	8011e32 <_malloc_r+0x1a2>
 8011f2e:	bf00      	nop
 8011f30:	20000108 	.word	0x20000108
 8011f34:	20000110 	.word	0x20000110
 8011f38:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8011f3c:	f8db 6004 	ldr.w	r6, [fp, #4]
 8011f40:	f026 0603 	bic.w	r6, r6, #3
 8011f44:	42b4      	cmp	r4, r6
 8011f46:	d803      	bhi.n	8011f50 <_malloc_r+0x2c0>
 8011f48:	1b33      	subs	r3, r6, r4
 8011f4a:	2b0f      	cmp	r3, #15
 8011f4c:	f300 8096 	bgt.w	801207c <_malloc_r+0x3ec>
 8011f50:	4a4f      	ldr	r2, [pc, #316]	; (8012090 <_malloc_r+0x400>)
 8011f52:	6817      	ldr	r7, [r2, #0]
 8011f54:	4a4f      	ldr	r2, [pc, #316]	; (8012094 <_malloc_r+0x404>)
 8011f56:	6811      	ldr	r1, [r2, #0]
 8011f58:	3710      	adds	r7, #16
 8011f5a:	3101      	adds	r1, #1
 8011f5c:	eb0b 0306 	add.w	r3, fp, r6
 8011f60:	4427      	add	r7, r4
 8011f62:	d005      	beq.n	8011f70 <_malloc_r+0x2e0>
 8011f64:	494c      	ldr	r1, [pc, #304]	; (8012098 <_malloc_r+0x408>)
 8011f66:	3901      	subs	r1, #1
 8011f68:	440f      	add	r7, r1
 8011f6a:	3101      	adds	r1, #1
 8011f6c:	4249      	negs	r1, r1
 8011f6e:	400f      	ands	r7, r1
 8011f70:	4639      	mov	r1, r7
 8011f72:	4648      	mov	r0, r9
 8011f74:	9201      	str	r2, [sp, #4]
 8011f76:	9300      	str	r3, [sp, #0]
 8011f78:	f000 fb30 	bl	80125dc <_sbrk_r>
 8011f7c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011f80:	4680      	mov	r8, r0
 8011f82:	d056      	beq.n	8012032 <_malloc_r+0x3a2>
 8011f84:	9b00      	ldr	r3, [sp, #0]
 8011f86:	9a01      	ldr	r2, [sp, #4]
 8011f88:	4283      	cmp	r3, r0
 8011f8a:	d901      	bls.n	8011f90 <_malloc_r+0x300>
 8011f8c:	45ab      	cmp	fp, r5
 8011f8e:	d150      	bne.n	8012032 <_malloc_r+0x3a2>
 8011f90:	4842      	ldr	r0, [pc, #264]	; (801209c <_malloc_r+0x40c>)
 8011f92:	6801      	ldr	r1, [r0, #0]
 8011f94:	4543      	cmp	r3, r8
 8011f96:	eb07 0e01 	add.w	lr, r7, r1
 8011f9a:	f8c0 e000 	str.w	lr, [r0]
 8011f9e:	4940      	ldr	r1, [pc, #256]	; (80120a0 <_malloc_r+0x410>)
 8011fa0:	4682      	mov	sl, r0
 8011fa2:	d113      	bne.n	8011fcc <_malloc_r+0x33c>
 8011fa4:	420b      	tst	r3, r1
 8011fa6:	d111      	bne.n	8011fcc <_malloc_r+0x33c>
 8011fa8:	68ab      	ldr	r3, [r5, #8]
 8011faa:	443e      	add	r6, r7
 8011fac:	f046 0601 	orr.w	r6, r6, #1
 8011fb0:	605e      	str	r6, [r3, #4]
 8011fb2:	4a3c      	ldr	r2, [pc, #240]	; (80120a4 <_malloc_r+0x414>)
 8011fb4:	f8da 3000 	ldr.w	r3, [sl]
 8011fb8:	6811      	ldr	r1, [r2, #0]
 8011fba:	428b      	cmp	r3, r1
 8011fbc:	bf88      	it	hi
 8011fbe:	6013      	strhi	r3, [r2, #0]
 8011fc0:	4a39      	ldr	r2, [pc, #228]	; (80120a8 <_malloc_r+0x418>)
 8011fc2:	6811      	ldr	r1, [r2, #0]
 8011fc4:	428b      	cmp	r3, r1
 8011fc6:	bf88      	it	hi
 8011fc8:	6013      	strhi	r3, [r2, #0]
 8011fca:	e032      	b.n	8012032 <_malloc_r+0x3a2>
 8011fcc:	6810      	ldr	r0, [r2, #0]
 8011fce:	3001      	adds	r0, #1
 8011fd0:	bf1b      	ittet	ne
 8011fd2:	eba8 0303 	subne.w	r3, r8, r3
 8011fd6:	4473      	addne	r3, lr
 8011fd8:	f8c2 8000 	streq.w	r8, [r2]
 8011fdc:	f8ca 3000 	strne.w	r3, [sl]
 8011fe0:	f018 0007 	ands.w	r0, r8, #7
 8011fe4:	bf1c      	itt	ne
 8011fe6:	f1c0 0008 	rsbne	r0, r0, #8
 8011fea:	4480      	addne	r8, r0
 8011fec:	4b2a      	ldr	r3, [pc, #168]	; (8012098 <_malloc_r+0x408>)
 8011fee:	4447      	add	r7, r8
 8011ff0:	4418      	add	r0, r3
 8011ff2:	400f      	ands	r7, r1
 8011ff4:	1bc7      	subs	r7, r0, r7
 8011ff6:	4639      	mov	r1, r7
 8011ff8:	4648      	mov	r0, r9
 8011ffa:	f000 faef 	bl	80125dc <_sbrk_r>
 8011ffe:	1c43      	adds	r3, r0, #1
 8012000:	bf08      	it	eq
 8012002:	4640      	moveq	r0, r8
 8012004:	f8da 3000 	ldr.w	r3, [sl]
 8012008:	f8c5 8008 	str.w	r8, [r5, #8]
 801200c:	bf08      	it	eq
 801200e:	2700      	moveq	r7, #0
 8012010:	eba0 0008 	sub.w	r0, r0, r8
 8012014:	443b      	add	r3, r7
 8012016:	4407      	add	r7, r0
 8012018:	f047 0701 	orr.w	r7, r7, #1
 801201c:	45ab      	cmp	fp, r5
 801201e:	f8ca 3000 	str.w	r3, [sl]
 8012022:	f8c8 7004 	str.w	r7, [r8, #4]
 8012026:	d0c4      	beq.n	8011fb2 <_malloc_r+0x322>
 8012028:	2e0f      	cmp	r6, #15
 801202a:	d810      	bhi.n	801204e <_malloc_r+0x3be>
 801202c:	2301      	movs	r3, #1
 801202e:	f8c8 3004 	str.w	r3, [r8, #4]
 8012032:	68ab      	ldr	r3, [r5, #8]
 8012034:	685a      	ldr	r2, [r3, #4]
 8012036:	f022 0203 	bic.w	r2, r2, #3
 801203a:	4294      	cmp	r4, r2
 801203c:	eba2 0304 	sub.w	r3, r2, r4
 8012040:	d801      	bhi.n	8012046 <_malloc_r+0x3b6>
 8012042:	2b0f      	cmp	r3, #15
 8012044:	dc1a      	bgt.n	801207c <_malloc_r+0x3ec>
 8012046:	4648      	mov	r0, r9
 8012048:	f000 f872 	bl	8012130 <__malloc_unlock>
 801204c:	e62d      	b.n	8011caa <_malloc_r+0x1a>
 801204e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8012052:	3e0c      	subs	r6, #12
 8012054:	f026 0607 	bic.w	r6, r6, #7
 8012058:	f003 0301 	and.w	r3, r3, #1
 801205c:	4333      	orrs	r3, r6
 801205e:	f8cb 3004 	str.w	r3, [fp, #4]
 8012062:	eb0b 0306 	add.w	r3, fp, r6
 8012066:	2205      	movs	r2, #5
 8012068:	2e0f      	cmp	r6, #15
 801206a:	605a      	str	r2, [r3, #4]
 801206c:	609a      	str	r2, [r3, #8]
 801206e:	d9a0      	bls.n	8011fb2 <_malloc_r+0x322>
 8012070:	f10b 0108 	add.w	r1, fp, #8
 8012074:	4648      	mov	r0, r9
 8012076:	f003 fd35 	bl	8015ae4 <_free_r>
 801207a:	e79a      	b.n	8011fb2 <_malloc_r+0x322>
 801207c:	68ae      	ldr	r6, [r5, #8]
 801207e:	f044 0201 	orr.w	r2, r4, #1
 8012082:	4434      	add	r4, r6
 8012084:	f043 0301 	orr.w	r3, r3, #1
 8012088:	6072      	str	r2, [r6, #4]
 801208a:	60ac      	str	r4, [r5, #8]
 801208c:	6063      	str	r3, [r4, #4]
 801208e:	e631      	b.n	8011cf4 <_malloc_r+0x64>
 8012090:	20000844 	.word	0x20000844
 8012094:	20000510 	.word	0x20000510
 8012098:	00001000 	.word	0x00001000
 801209c:	20000814 	.word	0x20000814
 80120a0:	00000fff 	.word	0x00000fff
 80120a4:	2000083c 	.word	0x2000083c
 80120a8:	20000840 	.word	0x20000840

080120ac <memcmp>:
 80120ac:	b510      	push	{r4, lr}
 80120ae:	3901      	subs	r1, #1
 80120b0:	4402      	add	r2, r0
 80120b2:	4290      	cmp	r0, r2
 80120b4:	d101      	bne.n	80120ba <memcmp+0xe>
 80120b6:	2000      	movs	r0, #0
 80120b8:	bd10      	pop	{r4, pc}
 80120ba:	f810 3b01 	ldrb.w	r3, [r0], #1
 80120be:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80120c2:	42a3      	cmp	r3, r4
 80120c4:	d0f5      	beq.n	80120b2 <memcmp+0x6>
 80120c6:	1b18      	subs	r0, r3, r4
 80120c8:	bd10      	pop	{r4, pc}

080120ca <memcpy>:
 80120ca:	b510      	push	{r4, lr}
 80120cc:	1e43      	subs	r3, r0, #1
 80120ce:	440a      	add	r2, r1
 80120d0:	4291      	cmp	r1, r2
 80120d2:	d100      	bne.n	80120d6 <memcpy+0xc>
 80120d4:	bd10      	pop	{r4, pc}
 80120d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80120da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80120de:	e7f7      	b.n	80120d0 <memcpy+0x6>

080120e0 <memmove>:
 80120e0:	4288      	cmp	r0, r1
 80120e2:	b510      	push	{r4, lr}
 80120e4:	eb01 0302 	add.w	r3, r1, r2
 80120e8:	d803      	bhi.n	80120f2 <memmove+0x12>
 80120ea:	1e42      	subs	r2, r0, #1
 80120ec:	4299      	cmp	r1, r3
 80120ee:	d10c      	bne.n	801210a <memmove+0x2a>
 80120f0:	bd10      	pop	{r4, pc}
 80120f2:	4298      	cmp	r0, r3
 80120f4:	d2f9      	bcs.n	80120ea <memmove+0xa>
 80120f6:	1881      	adds	r1, r0, r2
 80120f8:	1ad2      	subs	r2, r2, r3
 80120fa:	42d3      	cmn	r3, r2
 80120fc:	d100      	bne.n	8012100 <memmove+0x20>
 80120fe:	bd10      	pop	{r4, pc}
 8012100:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012104:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8012108:	e7f7      	b.n	80120fa <memmove+0x1a>
 801210a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801210e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8012112:	e7eb      	b.n	80120ec <memmove+0xc>

08012114 <memset>:
 8012114:	4402      	add	r2, r0
 8012116:	4603      	mov	r3, r0
 8012118:	4293      	cmp	r3, r2
 801211a:	d100      	bne.n	801211e <memset+0xa>
 801211c:	4770      	bx	lr
 801211e:	f803 1b01 	strb.w	r1, [r3], #1
 8012122:	e7f9      	b.n	8012118 <memset+0x4>

08012124 <__malloc_lock>:
 8012124:	4801      	ldr	r0, [pc, #4]	; (801212c <__malloc_lock+0x8>)
 8012126:	f7ff bd9f 	b.w	8011c68 <__retarget_lock_acquire_recursive>
 801212a:	bf00      	nop
 801212c:	20000b44 	.word	0x20000b44

08012130 <__malloc_unlock>:
 8012130:	4801      	ldr	r0, [pc, #4]	; (8012138 <__malloc_unlock+0x8>)
 8012132:	f7ff bd9b 	b.w	8011c6c <__retarget_lock_release_recursive>
 8012136:	bf00      	nop
 8012138:	20000b44 	.word	0x20000b44

0801213c <printf>:
 801213c:	b40f      	push	{r0, r1, r2, r3}
 801213e:	4b0a      	ldr	r3, [pc, #40]	; (8012168 <printf+0x2c>)
 8012140:	b513      	push	{r0, r1, r4, lr}
 8012142:	681c      	ldr	r4, [r3, #0]
 8012144:	b124      	cbz	r4, 8012150 <printf+0x14>
 8012146:	69a3      	ldr	r3, [r4, #24]
 8012148:	b913      	cbnz	r3, 8012150 <printf+0x14>
 801214a:	4620      	mov	r0, r4
 801214c:	f003 fbf4 	bl	8015938 <__sinit>
 8012150:	ab05      	add	r3, sp, #20
 8012152:	9a04      	ldr	r2, [sp, #16]
 8012154:	68a1      	ldr	r1, [r4, #8]
 8012156:	9301      	str	r3, [sp, #4]
 8012158:	4620      	mov	r0, r4
 801215a:	f001 fa9d 	bl	8013698 <_vfprintf_r>
 801215e:	b002      	add	sp, #8
 8012160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012164:	b004      	add	sp, #16
 8012166:	4770      	bx	lr
 8012168:	20000014 	.word	0x20000014

0801216c <_putc_r>:
 801216c:	b570      	push	{r4, r5, r6, lr}
 801216e:	460d      	mov	r5, r1
 8012170:	4614      	mov	r4, r2
 8012172:	4606      	mov	r6, r0
 8012174:	b118      	cbz	r0, 801217e <_putc_r+0x12>
 8012176:	6983      	ldr	r3, [r0, #24]
 8012178:	b90b      	cbnz	r3, 801217e <_putc_r+0x12>
 801217a:	f003 fbdd 	bl	8015938 <__sinit>
 801217e:	4b1c      	ldr	r3, [pc, #112]	; (80121f0 <_putc_r+0x84>)
 8012180:	429c      	cmp	r4, r3
 8012182:	d124      	bne.n	80121ce <_putc_r+0x62>
 8012184:	6874      	ldr	r4, [r6, #4]
 8012186:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012188:	07d8      	lsls	r0, r3, #31
 801218a:	d405      	bmi.n	8012198 <_putc_r+0x2c>
 801218c:	89a3      	ldrh	r3, [r4, #12]
 801218e:	0599      	lsls	r1, r3, #22
 8012190:	d402      	bmi.n	8012198 <_putc_r+0x2c>
 8012192:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012194:	f7ff fd68 	bl	8011c68 <__retarget_lock_acquire_recursive>
 8012198:	68a3      	ldr	r3, [r4, #8]
 801219a:	3b01      	subs	r3, #1
 801219c:	2b00      	cmp	r3, #0
 801219e:	60a3      	str	r3, [r4, #8]
 80121a0:	da05      	bge.n	80121ae <_putc_r+0x42>
 80121a2:	69a2      	ldr	r2, [r4, #24]
 80121a4:	4293      	cmp	r3, r2
 80121a6:	db1c      	blt.n	80121e2 <_putc_r+0x76>
 80121a8:	b2eb      	uxtb	r3, r5
 80121aa:	2b0a      	cmp	r3, #10
 80121ac:	d019      	beq.n	80121e2 <_putc_r+0x76>
 80121ae:	6823      	ldr	r3, [r4, #0]
 80121b0:	1c5a      	adds	r2, r3, #1
 80121b2:	6022      	str	r2, [r4, #0]
 80121b4:	701d      	strb	r5, [r3, #0]
 80121b6:	b2ed      	uxtb	r5, r5
 80121b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80121ba:	07da      	lsls	r2, r3, #31
 80121bc:	d405      	bmi.n	80121ca <_putc_r+0x5e>
 80121be:	89a3      	ldrh	r3, [r4, #12]
 80121c0:	059b      	lsls	r3, r3, #22
 80121c2:	d402      	bmi.n	80121ca <_putc_r+0x5e>
 80121c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80121c6:	f7ff fd51 	bl	8011c6c <__retarget_lock_release_recursive>
 80121ca:	4628      	mov	r0, r5
 80121cc:	bd70      	pop	{r4, r5, r6, pc}
 80121ce:	4b09      	ldr	r3, [pc, #36]	; (80121f4 <_putc_r+0x88>)
 80121d0:	429c      	cmp	r4, r3
 80121d2:	d101      	bne.n	80121d8 <_putc_r+0x6c>
 80121d4:	68b4      	ldr	r4, [r6, #8]
 80121d6:	e7d6      	b.n	8012186 <_putc_r+0x1a>
 80121d8:	4b07      	ldr	r3, [pc, #28]	; (80121f8 <_putc_r+0x8c>)
 80121da:	429c      	cmp	r4, r3
 80121dc:	bf08      	it	eq
 80121de:	68f4      	ldreq	r4, [r6, #12]
 80121e0:	e7d1      	b.n	8012186 <_putc_r+0x1a>
 80121e2:	4629      	mov	r1, r5
 80121e4:	4622      	mov	r2, r4
 80121e6:	4630      	mov	r0, r6
 80121e8:	f002 fad2 	bl	8014790 <__swbuf_r>
 80121ec:	4605      	mov	r5, r0
 80121ee:	e7e3      	b.n	80121b8 <_putc_r+0x4c>
 80121f0:	08018384 	.word	0x08018384
 80121f4:	080183a4 	.word	0x080183a4
 80121f8:	08018364 	.word	0x08018364

080121fc <_puts_r>:
 80121fc:	b530      	push	{r4, r5, lr}
 80121fe:	4605      	mov	r5, r0
 8012200:	b089      	sub	sp, #36	; 0x24
 8012202:	4608      	mov	r0, r1
 8012204:	460c      	mov	r4, r1
 8012206:	f7f4 fb95 	bl	8006934 <strlen>
 801220a:	4b28      	ldr	r3, [pc, #160]	; (80122ac <_puts_r+0xb0>)
 801220c:	9306      	str	r3, [sp, #24]
 801220e:	2301      	movs	r3, #1
 8012210:	9005      	str	r0, [sp, #20]
 8012212:	9307      	str	r3, [sp, #28]
 8012214:	4418      	add	r0, r3
 8012216:	ab04      	add	r3, sp, #16
 8012218:	9301      	str	r3, [sp, #4]
 801221a:	2302      	movs	r3, #2
 801221c:	9404      	str	r4, [sp, #16]
 801221e:	9003      	str	r0, [sp, #12]
 8012220:	9302      	str	r3, [sp, #8]
 8012222:	b125      	cbz	r5, 801222e <_puts_r+0x32>
 8012224:	69ab      	ldr	r3, [r5, #24]
 8012226:	b913      	cbnz	r3, 801222e <_puts_r+0x32>
 8012228:	4628      	mov	r0, r5
 801222a:	f003 fb85 	bl	8015938 <__sinit>
 801222e:	69ab      	ldr	r3, [r5, #24]
 8012230:	68ac      	ldr	r4, [r5, #8]
 8012232:	b913      	cbnz	r3, 801223a <_puts_r+0x3e>
 8012234:	4628      	mov	r0, r5
 8012236:	f003 fb7f 	bl	8015938 <__sinit>
 801223a:	4b1d      	ldr	r3, [pc, #116]	; (80122b0 <_puts_r+0xb4>)
 801223c:	429c      	cmp	r4, r3
 801223e:	d12a      	bne.n	8012296 <_puts_r+0x9a>
 8012240:	686c      	ldr	r4, [r5, #4]
 8012242:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012244:	07db      	lsls	r3, r3, #31
 8012246:	d405      	bmi.n	8012254 <_puts_r+0x58>
 8012248:	89a3      	ldrh	r3, [r4, #12]
 801224a:	0598      	lsls	r0, r3, #22
 801224c:	d402      	bmi.n	8012254 <_puts_r+0x58>
 801224e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012250:	f7ff fd0a 	bl	8011c68 <__retarget_lock_acquire_recursive>
 8012254:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012258:	0499      	lsls	r1, r3, #18
 801225a:	d406      	bmi.n	801226a <_puts_r+0x6e>
 801225c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012260:	81a3      	strh	r3, [r4, #12]
 8012262:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012264:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012268:	6663      	str	r3, [r4, #100]	; 0x64
 801226a:	4628      	mov	r0, r5
 801226c:	aa01      	add	r2, sp, #4
 801226e:	4621      	mov	r1, r4
 8012270:	f7ff fb1a 	bl	80118a8 <__sfvwrite_r>
 8012274:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012276:	2800      	cmp	r0, #0
 8012278:	bf14      	ite	ne
 801227a:	f04f 35ff 	movne.w	r5, #4294967295
 801227e:	250a      	moveq	r5, #10
 8012280:	07da      	lsls	r2, r3, #31
 8012282:	d405      	bmi.n	8012290 <_puts_r+0x94>
 8012284:	89a3      	ldrh	r3, [r4, #12]
 8012286:	059b      	lsls	r3, r3, #22
 8012288:	d402      	bmi.n	8012290 <_puts_r+0x94>
 801228a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801228c:	f7ff fcee 	bl	8011c6c <__retarget_lock_release_recursive>
 8012290:	4628      	mov	r0, r5
 8012292:	b009      	add	sp, #36	; 0x24
 8012294:	bd30      	pop	{r4, r5, pc}
 8012296:	4b07      	ldr	r3, [pc, #28]	; (80122b4 <_puts_r+0xb8>)
 8012298:	429c      	cmp	r4, r3
 801229a:	d101      	bne.n	80122a0 <_puts_r+0xa4>
 801229c:	68ac      	ldr	r4, [r5, #8]
 801229e:	e7d0      	b.n	8012242 <_puts_r+0x46>
 80122a0:	4b05      	ldr	r3, [pc, #20]	; (80122b8 <_puts_r+0xbc>)
 80122a2:	429c      	cmp	r4, r3
 80122a4:	bf08      	it	eq
 80122a6:	68ec      	ldreq	r4, [r5, #12]
 80122a8:	e7cb      	b.n	8012242 <_puts_r+0x46>
 80122aa:	bf00      	nop
 80122ac:	080182e0 	.word	0x080182e0
 80122b0:	08018384 	.word	0x08018384
 80122b4:	080183a4 	.word	0x080183a4
 80122b8:	08018364 	.word	0x08018364

080122bc <puts>:
 80122bc:	4b02      	ldr	r3, [pc, #8]	; (80122c8 <puts+0xc>)
 80122be:	4601      	mov	r1, r0
 80122c0:	6818      	ldr	r0, [r3, #0]
 80122c2:	f7ff bf9b 	b.w	80121fc <_puts_r>
 80122c6:	bf00      	nop
 80122c8:	20000014 	.word	0x20000014

080122cc <realloc>:
 80122cc:	4b02      	ldr	r3, [pc, #8]	; (80122d8 <realloc+0xc>)
 80122ce:	460a      	mov	r2, r1
 80122d0:	4601      	mov	r1, r0
 80122d2:	6818      	ldr	r0, [r3, #0]
 80122d4:	f000 b802 	b.w	80122dc <_realloc_r>
 80122d8:	20000014 	.word	0x20000014

080122dc <_realloc_r>:
 80122dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122e0:	4682      	mov	sl, r0
 80122e2:	460c      	mov	r4, r1
 80122e4:	b929      	cbnz	r1, 80122f2 <_realloc_r+0x16>
 80122e6:	4611      	mov	r1, r2
 80122e8:	b003      	add	sp, #12
 80122ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122ee:	f7ff bccf 	b.w	8011c90 <_malloc_r>
 80122f2:	9201      	str	r2, [sp, #4]
 80122f4:	f7ff ff16 	bl	8012124 <__malloc_lock>
 80122f8:	9a01      	ldr	r2, [sp, #4]
 80122fa:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80122fe:	f102 080b 	add.w	r8, r2, #11
 8012302:	f1b8 0f16 	cmp.w	r8, #22
 8012306:	f1a4 0908 	sub.w	r9, r4, #8
 801230a:	f025 0603 	bic.w	r6, r5, #3
 801230e:	d90a      	bls.n	8012326 <_realloc_r+0x4a>
 8012310:	f038 0807 	bics.w	r8, r8, #7
 8012314:	d509      	bpl.n	801232a <_realloc_r+0x4e>
 8012316:	230c      	movs	r3, #12
 8012318:	f8ca 3000 	str.w	r3, [sl]
 801231c:	2700      	movs	r7, #0
 801231e:	4638      	mov	r0, r7
 8012320:	b003      	add	sp, #12
 8012322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012326:	f04f 0810 	mov.w	r8, #16
 801232a:	4590      	cmp	r8, r2
 801232c:	d3f3      	bcc.n	8012316 <_realloc_r+0x3a>
 801232e:	45b0      	cmp	r8, r6
 8012330:	f340 8145 	ble.w	80125be <_realloc_r+0x2e2>
 8012334:	4ba8      	ldr	r3, [pc, #672]	; (80125d8 <_realloc_r+0x2fc>)
 8012336:	f8d3 e008 	ldr.w	lr, [r3, #8]
 801233a:	eb09 0106 	add.w	r1, r9, r6
 801233e:	4571      	cmp	r1, lr
 8012340:	469b      	mov	fp, r3
 8012342:	684b      	ldr	r3, [r1, #4]
 8012344:	d005      	beq.n	8012352 <_realloc_r+0x76>
 8012346:	f023 0001 	bic.w	r0, r3, #1
 801234a:	4408      	add	r0, r1
 801234c:	6840      	ldr	r0, [r0, #4]
 801234e:	07c7      	lsls	r7, r0, #31
 8012350:	d447      	bmi.n	80123e2 <_realloc_r+0x106>
 8012352:	f023 0303 	bic.w	r3, r3, #3
 8012356:	4571      	cmp	r1, lr
 8012358:	eb06 0703 	add.w	r7, r6, r3
 801235c:	d119      	bne.n	8012392 <_realloc_r+0xb6>
 801235e:	f108 0010 	add.w	r0, r8, #16
 8012362:	4287      	cmp	r7, r0
 8012364:	db3f      	blt.n	80123e6 <_realloc_r+0x10a>
 8012366:	eb09 0308 	add.w	r3, r9, r8
 801236a:	eba7 0708 	sub.w	r7, r7, r8
 801236e:	f047 0701 	orr.w	r7, r7, #1
 8012372:	f8cb 3008 	str.w	r3, [fp, #8]
 8012376:	605f      	str	r7, [r3, #4]
 8012378:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801237c:	f003 0301 	and.w	r3, r3, #1
 8012380:	ea43 0308 	orr.w	r3, r3, r8
 8012384:	f844 3c04 	str.w	r3, [r4, #-4]
 8012388:	4650      	mov	r0, sl
 801238a:	f7ff fed1 	bl	8012130 <__malloc_unlock>
 801238e:	4627      	mov	r7, r4
 8012390:	e7c5      	b.n	801231e <_realloc_r+0x42>
 8012392:	45b8      	cmp	r8, r7
 8012394:	dc27      	bgt.n	80123e6 <_realloc_r+0x10a>
 8012396:	68cb      	ldr	r3, [r1, #12]
 8012398:	688a      	ldr	r2, [r1, #8]
 801239a:	60d3      	str	r3, [r2, #12]
 801239c:	609a      	str	r2, [r3, #8]
 801239e:	eba7 0008 	sub.w	r0, r7, r8
 80123a2:	280f      	cmp	r0, #15
 80123a4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80123a8:	eb09 0207 	add.w	r2, r9, r7
 80123ac:	f240 8109 	bls.w	80125c2 <_realloc_r+0x2e6>
 80123b0:	eb09 0108 	add.w	r1, r9, r8
 80123b4:	f003 0301 	and.w	r3, r3, #1
 80123b8:	ea43 0308 	orr.w	r3, r3, r8
 80123bc:	f040 0001 	orr.w	r0, r0, #1
 80123c0:	f8c9 3004 	str.w	r3, [r9, #4]
 80123c4:	6048      	str	r0, [r1, #4]
 80123c6:	6853      	ldr	r3, [r2, #4]
 80123c8:	f043 0301 	orr.w	r3, r3, #1
 80123cc:	6053      	str	r3, [r2, #4]
 80123ce:	3108      	adds	r1, #8
 80123d0:	4650      	mov	r0, sl
 80123d2:	f003 fb87 	bl	8015ae4 <_free_r>
 80123d6:	4650      	mov	r0, sl
 80123d8:	f7ff feaa 	bl	8012130 <__malloc_unlock>
 80123dc:	f109 0708 	add.w	r7, r9, #8
 80123e0:	e79d      	b.n	801231e <_realloc_r+0x42>
 80123e2:	2300      	movs	r3, #0
 80123e4:	4619      	mov	r1, r3
 80123e6:	07e8      	lsls	r0, r5, #31
 80123e8:	f100 8084 	bmi.w	80124f4 <_realloc_r+0x218>
 80123ec:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80123f0:	eba9 0505 	sub.w	r5, r9, r5
 80123f4:	6868      	ldr	r0, [r5, #4]
 80123f6:	f020 0003 	bic.w	r0, r0, #3
 80123fa:	4430      	add	r0, r6
 80123fc:	2900      	cmp	r1, #0
 80123fe:	d076      	beq.n	80124ee <_realloc_r+0x212>
 8012400:	4571      	cmp	r1, lr
 8012402:	d150      	bne.n	80124a6 <_realloc_r+0x1ca>
 8012404:	4403      	add	r3, r0
 8012406:	f108 0110 	add.w	r1, r8, #16
 801240a:	428b      	cmp	r3, r1
 801240c:	db6f      	blt.n	80124ee <_realloc_r+0x212>
 801240e:	462f      	mov	r7, r5
 8012410:	68ea      	ldr	r2, [r5, #12]
 8012412:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8012416:	60ca      	str	r2, [r1, #12]
 8012418:	6091      	str	r1, [r2, #8]
 801241a:	1f32      	subs	r2, r6, #4
 801241c:	2a24      	cmp	r2, #36	; 0x24
 801241e:	d83b      	bhi.n	8012498 <_realloc_r+0x1bc>
 8012420:	2a13      	cmp	r2, #19
 8012422:	d936      	bls.n	8012492 <_realloc_r+0x1b6>
 8012424:	6821      	ldr	r1, [r4, #0]
 8012426:	60a9      	str	r1, [r5, #8]
 8012428:	6861      	ldr	r1, [r4, #4]
 801242a:	60e9      	str	r1, [r5, #12]
 801242c:	2a1b      	cmp	r2, #27
 801242e:	d81c      	bhi.n	801246a <_realloc_r+0x18e>
 8012430:	f105 0210 	add.w	r2, r5, #16
 8012434:	f104 0108 	add.w	r1, r4, #8
 8012438:	6808      	ldr	r0, [r1, #0]
 801243a:	6010      	str	r0, [r2, #0]
 801243c:	6848      	ldr	r0, [r1, #4]
 801243e:	6050      	str	r0, [r2, #4]
 8012440:	6889      	ldr	r1, [r1, #8]
 8012442:	6091      	str	r1, [r2, #8]
 8012444:	eb05 0208 	add.w	r2, r5, r8
 8012448:	eba3 0308 	sub.w	r3, r3, r8
 801244c:	f043 0301 	orr.w	r3, r3, #1
 8012450:	f8cb 2008 	str.w	r2, [fp, #8]
 8012454:	6053      	str	r3, [r2, #4]
 8012456:	686b      	ldr	r3, [r5, #4]
 8012458:	f003 0301 	and.w	r3, r3, #1
 801245c:	ea43 0308 	orr.w	r3, r3, r8
 8012460:	606b      	str	r3, [r5, #4]
 8012462:	4650      	mov	r0, sl
 8012464:	f7ff fe64 	bl	8012130 <__malloc_unlock>
 8012468:	e759      	b.n	801231e <_realloc_r+0x42>
 801246a:	68a1      	ldr	r1, [r4, #8]
 801246c:	6129      	str	r1, [r5, #16]
 801246e:	68e1      	ldr	r1, [r4, #12]
 8012470:	6169      	str	r1, [r5, #20]
 8012472:	2a24      	cmp	r2, #36	; 0x24
 8012474:	bf01      	itttt	eq
 8012476:	6922      	ldreq	r2, [r4, #16]
 8012478:	61aa      	streq	r2, [r5, #24]
 801247a:	6960      	ldreq	r0, [r4, #20]
 801247c:	61e8      	streq	r0, [r5, #28]
 801247e:	bf19      	ittee	ne
 8012480:	f105 0218 	addne.w	r2, r5, #24
 8012484:	f104 0110 	addne.w	r1, r4, #16
 8012488:	f105 0220 	addeq.w	r2, r5, #32
 801248c:	f104 0118 	addeq.w	r1, r4, #24
 8012490:	e7d2      	b.n	8012438 <_realloc_r+0x15c>
 8012492:	463a      	mov	r2, r7
 8012494:	4621      	mov	r1, r4
 8012496:	e7cf      	b.n	8012438 <_realloc_r+0x15c>
 8012498:	4621      	mov	r1, r4
 801249a:	4638      	mov	r0, r7
 801249c:	9301      	str	r3, [sp, #4]
 801249e:	f7ff fe1f 	bl	80120e0 <memmove>
 80124a2:	9b01      	ldr	r3, [sp, #4]
 80124a4:	e7ce      	b.n	8012444 <_realloc_r+0x168>
 80124a6:	18c7      	adds	r7, r0, r3
 80124a8:	45b8      	cmp	r8, r7
 80124aa:	dc20      	bgt.n	80124ee <_realloc_r+0x212>
 80124ac:	68cb      	ldr	r3, [r1, #12]
 80124ae:	688a      	ldr	r2, [r1, #8]
 80124b0:	60d3      	str	r3, [r2, #12]
 80124b2:	609a      	str	r2, [r3, #8]
 80124b4:	4628      	mov	r0, r5
 80124b6:	68eb      	ldr	r3, [r5, #12]
 80124b8:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80124bc:	60d3      	str	r3, [r2, #12]
 80124be:	609a      	str	r2, [r3, #8]
 80124c0:	1f32      	subs	r2, r6, #4
 80124c2:	2a24      	cmp	r2, #36	; 0x24
 80124c4:	d842      	bhi.n	801254c <_realloc_r+0x270>
 80124c6:	2a13      	cmp	r2, #19
 80124c8:	d93e      	bls.n	8012548 <_realloc_r+0x26c>
 80124ca:	6823      	ldr	r3, [r4, #0]
 80124cc:	60ab      	str	r3, [r5, #8]
 80124ce:	6863      	ldr	r3, [r4, #4]
 80124d0:	60eb      	str	r3, [r5, #12]
 80124d2:	2a1b      	cmp	r2, #27
 80124d4:	d824      	bhi.n	8012520 <_realloc_r+0x244>
 80124d6:	f105 0010 	add.w	r0, r5, #16
 80124da:	f104 0308 	add.w	r3, r4, #8
 80124de:	681a      	ldr	r2, [r3, #0]
 80124e0:	6002      	str	r2, [r0, #0]
 80124e2:	685a      	ldr	r2, [r3, #4]
 80124e4:	6042      	str	r2, [r0, #4]
 80124e6:	689b      	ldr	r3, [r3, #8]
 80124e8:	6083      	str	r3, [r0, #8]
 80124ea:	46a9      	mov	r9, r5
 80124ec:	e757      	b.n	801239e <_realloc_r+0xc2>
 80124ee:	4580      	cmp	r8, r0
 80124f0:	4607      	mov	r7, r0
 80124f2:	dddf      	ble.n	80124b4 <_realloc_r+0x1d8>
 80124f4:	4611      	mov	r1, r2
 80124f6:	4650      	mov	r0, sl
 80124f8:	f7ff fbca 	bl	8011c90 <_malloc_r>
 80124fc:	4607      	mov	r7, r0
 80124fe:	2800      	cmp	r0, #0
 8012500:	d0af      	beq.n	8012462 <_realloc_r+0x186>
 8012502:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8012506:	f023 0301 	bic.w	r3, r3, #1
 801250a:	f1a0 0208 	sub.w	r2, r0, #8
 801250e:	444b      	add	r3, r9
 8012510:	429a      	cmp	r2, r3
 8012512:	d11f      	bne.n	8012554 <_realloc_r+0x278>
 8012514:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8012518:	f027 0703 	bic.w	r7, r7, #3
 801251c:	4437      	add	r7, r6
 801251e:	e73e      	b.n	801239e <_realloc_r+0xc2>
 8012520:	68a3      	ldr	r3, [r4, #8]
 8012522:	612b      	str	r3, [r5, #16]
 8012524:	68e3      	ldr	r3, [r4, #12]
 8012526:	616b      	str	r3, [r5, #20]
 8012528:	2a24      	cmp	r2, #36	; 0x24
 801252a:	bf01      	itttt	eq
 801252c:	6923      	ldreq	r3, [r4, #16]
 801252e:	61ab      	streq	r3, [r5, #24]
 8012530:	6962      	ldreq	r2, [r4, #20]
 8012532:	61ea      	streq	r2, [r5, #28]
 8012534:	bf19      	ittee	ne
 8012536:	f105 0018 	addne.w	r0, r5, #24
 801253a:	f104 0310 	addne.w	r3, r4, #16
 801253e:	f105 0020 	addeq.w	r0, r5, #32
 8012542:	f104 0318 	addeq.w	r3, r4, #24
 8012546:	e7ca      	b.n	80124de <_realloc_r+0x202>
 8012548:	4623      	mov	r3, r4
 801254a:	e7c8      	b.n	80124de <_realloc_r+0x202>
 801254c:	4621      	mov	r1, r4
 801254e:	f7ff fdc7 	bl	80120e0 <memmove>
 8012552:	e7ca      	b.n	80124ea <_realloc_r+0x20e>
 8012554:	1f32      	subs	r2, r6, #4
 8012556:	2a24      	cmp	r2, #36	; 0x24
 8012558:	d82d      	bhi.n	80125b6 <_realloc_r+0x2da>
 801255a:	2a13      	cmp	r2, #19
 801255c:	d928      	bls.n	80125b0 <_realloc_r+0x2d4>
 801255e:	6823      	ldr	r3, [r4, #0]
 8012560:	6003      	str	r3, [r0, #0]
 8012562:	6863      	ldr	r3, [r4, #4]
 8012564:	6043      	str	r3, [r0, #4]
 8012566:	2a1b      	cmp	r2, #27
 8012568:	d80e      	bhi.n	8012588 <_realloc_r+0x2ac>
 801256a:	f100 0308 	add.w	r3, r0, #8
 801256e:	f104 0208 	add.w	r2, r4, #8
 8012572:	6811      	ldr	r1, [r2, #0]
 8012574:	6019      	str	r1, [r3, #0]
 8012576:	6851      	ldr	r1, [r2, #4]
 8012578:	6059      	str	r1, [r3, #4]
 801257a:	6892      	ldr	r2, [r2, #8]
 801257c:	609a      	str	r2, [r3, #8]
 801257e:	4621      	mov	r1, r4
 8012580:	4650      	mov	r0, sl
 8012582:	f003 faaf 	bl	8015ae4 <_free_r>
 8012586:	e76c      	b.n	8012462 <_realloc_r+0x186>
 8012588:	68a3      	ldr	r3, [r4, #8]
 801258a:	6083      	str	r3, [r0, #8]
 801258c:	68e3      	ldr	r3, [r4, #12]
 801258e:	60c3      	str	r3, [r0, #12]
 8012590:	2a24      	cmp	r2, #36	; 0x24
 8012592:	bf01      	itttt	eq
 8012594:	6923      	ldreq	r3, [r4, #16]
 8012596:	6103      	streq	r3, [r0, #16]
 8012598:	6961      	ldreq	r1, [r4, #20]
 801259a:	6141      	streq	r1, [r0, #20]
 801259c:	bf19      	ittee	ne
 801259e:	f100 0310 	addne.w	r3, r0, #16
 80125a2:	f104 0210 	addne.w	r2, r4, #16
 80125a6:	f100 0318 	addeq.w	r3, r0, #24
 80125aa:	f104 0218 	addeq.w	r2, r4, #24
 80125ae:	e7e0      	b.n	8012572 <_realloc_r+0x296>
 80125b0:	4603      	mov	r3, r0
 80125b2:	4622      	mov	r2, r4
 80125b4:	e7dd      	b.n	8012572 <_realloc_r+0x296>
 80125b6:	4621      	mov	r1, r4
 80125b8:	f7ff fd92 	bl	80120e0 <memmove>
 80125bc:	e7df      	b.n	801257e <_realloc_r+0x2a2>
 80125be:	4637      	mov	r7, r6
 80125c0:	e6ed      	b.n	801239e <_realloc_r+0xc2>
 80125c2:	f003 0301 	and.w	r3, r3, #1
 80125c6:	431f      	orrs	r7, r3
 80125c8:	f8c9 7004 	str.w	r7, [r9, #4]
 80125cc:	6853      	ldr	r3, [r2, #4]
 80125ce:	f043 0301 	orr.w	r3, r3, #1
 80125d2:	6053      	str	r3, [r2, #4]
 80125d4:	e6ff      	b.n	80123d6 <_realloc_r+0xfa>
 80125d6:	bf00      	nop
 80125d8:	20000108 	.word	0x20000108

080125dc <_sbrk_r>:
 80125dc:	b538      	push	{r3, r4, r5, lr}
 80125de:	4c06      	ldr	r4, [pc, #24]	; (80125f8 <_sbrk_r+0x1c>)
 80125e0:	2300      	movs	r3, #0
 80125e2:	4605      	mov	r5, r0
 80125e4:	4608      	mov	r0, r1
 80125e6:	6023      	str	r3, [r4, #0]
 80125e8:	f7fc fe58 	bl	800f29c <_sbrk>
 80125ec:	1c43      	adds	r3, r0, #1
 80125ee:	d102      	bne.n	80125f6 <_sbrk_r+0x1a>
 80125f0:	6823      	ldr	r3, [r4, #0]
 80125f2:	b103      	cbz	r3, 80125f6 <_sbrk_r+0x1a>
 80125f4:	602b      	str	r3, [r5, #0]
 80125f6:	bd38      	pop	{r3, r4, r5, pc}
 80125f8:	20000b4c 	.word	0x20000b4c

080125fc <_raise_r>:
 80125fc:	291f      	cmp	r1, #31
 80125fe:	b538      	push	{r3, r4, r5, lr}
 8012600:	4604      	mov	r4, r0
 8012602:	460d      	mov	r5, r1
 8012604:	d904      	bls.n	8012610 <_raise_r+0x14>
 8012606:	2316      	movs	r3, #22
 8012608:	6003      	str	r3, [r0, #0]
 801260a:	f04f 30ff 	mov.w	r0, #4294967295
 801260e:	bd38      	pop	{r3, r4, r5, pc}
 8012610:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012612:	b112      	cbz	r2, 801261a <_raise_r+0x1e>
 8012614:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012618:	b94b      	cbnz	r3, 801262e <_raise_r+0x32>
 801261a:	4620      	mov	r0, r4
 801261c:	f000 f830 	bl	8012680 <_getpid_r>
 8012620:	462a      	mov	r2, r5
 8012622:	4601      	mov	r1, r0
 8012624:	4620      	mov	r0, r4
 8012626:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801262a:	f000 b817 	b.w	801265c <_kill_r>
 801262e:	2b01      	cmp	r3, #1
 8012630:	d00a      	beq.n	8012648 <_raise_r+0x4c>
 8012632:	1c59      	adds	r1, r3, #1
 8012634:	d103      	bne.n	801263e <_raise_r+0x42>
 8012636:	2316      	movs	r3, #22
 8012638:	6003      	str	r3, [r0, #0]
 801263a:	2001      	movs	r0, #1
 801263c:	bd38      	pop	{r3, r4, r5, pc}
 801263e:	2400      	movs	r4, #0
 8012640:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012644:	4628      	mov	r0, r5
 8012646:	4798      	blx	r3
 8012648:	2000      	movs	r0, #0
 801264a:	bd38      	pop	{r3, r4, r5, pc}

0801264c <raise>:
 801264c:	4b02      	ldr	r3, [pc, #8]	; (8012658 <raise+0xc>)
 801264e:	4601      	mov	r1, r0
 8012650:	6818      	ldr	r0, [r3, #0]
 8012652:	f7ff bfd3 	b.w	80125fc <_raise_r>
 8012656:	bf00      	nop
 8012658:	20000014 	.word	0x20000014

0801265c <_kill_r>:
 801265c:	b538      	push	{r3, r4, r5, lr}
 801265e:	4c07      	ldr	r4, [pc, #28]	; (801267c <_kill_r+0x20>)
 8012660:	2300      	movs	r3, #0
 8012662:	4605      	mov	r5, r0
 8012664:	4608      	mov	r0, r1
 8012666:	4611      	mov	r1, r2
 8012668:	6023      	str	r3, [r4, #0]
 801266a:	f7fc fde1 	bl	800f230 <_kill>
 801266e:	1c43      	adds	r3, r0, #1
 8012670:	d102      	bne.n	8012678 <_kill_r+0x1c>
 8012672:	6823      	ldr	r3, [r4, #0]
 8012674:	b103      	cbz	r3, 8012678 <_kill_r+0x1c>
 8012676:	602b      	str	r3, [r5, #0]
 8012678:	bd38      	pop	{r3, r4, r5, pc}
 801267a:	bf00      	nop
 801267c:	20000b4c 	.word	0x20000b4c

08012680 <_getpid_r>:
 8012680:	f7fc bdd4 	b.w	800f22c <_getpid>

08012684 <sprintf>:
 8012684:	b40e      	push	{r1, r2, r3}
 8012686:	b500      	push	{lr}
 8012688:	b09c      	sub	sp, #112	; 0x70
 801268a:	f44f 7102 	mov.w	r1, #520	; 0x208
 801268e:	ab1d      	add	r3, sp, #116	; 0x74
 8012690:	f8ad 1014 	strh.w	r1, [sp, #20]
 8012694:	9002      	str	r0, [sp, #8]
 8012696:	9006      	str	r0, [sp, #24]
 8012698:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801269c:	480a      	ldr	r0, [pc, #40]	; (80126c8 <sprintf+0x44>)
 801269e:	9104      	str	r1, [sp, #16]
 80126a0:	9107      	str	r1, [sp, #28]
 80126a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80126a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80126aa:	f8ad 1016 	strh.w	r1, [sp, #22]
 80126ae:	6800      	ldr	r0, [r0, #0]
 80126b0:	9301      	str	r3, [sp, #4]
 80126b2:	a902      	add	r1, sp, #8
 80126b4:	f000 f81c 	bl	80126f0 <_svfprintf_r>
 80126b8:	9b02      	ldr	r3, [sp, #8]
 80126ba:	2200      	movs	r2, #0
 80126bc:	701a      	strb	r2, [r3, #0]
 80126be:	b01c      	add	sp, #112	; 0x70
 80126c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80126c4:	b003      	add	sp, #12
 80126c6:	4770      	bx	lr
 80126c8:	20000014 	.word	0x20000014

080126cc <strncmp>:
 80126cc:	b510      	push	{r4, lr}
 80126ce:	b16a      	cbz	r2, 80126ec <strncmp+0x20>
 80126d0:	3901      	subs	r1, #1
 80126d2:	1884      	adds	r4, r0, r2
 80126d4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80126d8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80126dc:	4293      	cmp	r3, r2
 80126de:	d103      	bne.n	80126e8 <strncmp+0x1c>
 80126e0:	42a0      	cmp	r0, r4
 80126e2:	d001      	beq.n	80126e8 <strncmp+0x1c>
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d1f5      	bne.n	80126d4 <strncmp+0x8>
 80126e8:	1a98      	subs	r0, r3, r2
 80126ea:	bd10      	pop	{r4, pc}
 80126ec:	4610      	mov	r0, r2
 80126ee:	bd10      	pop	{r4, pc}

080126f0 <_svfprintf_r>:
 80126f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126f4:	b0bd      	sub	sp, #244	; 0xf4
 80126f6:	468a      	mov	sl, r1
 80126f8:	4615      	mov	r5, r2
 80126fa:	461f      	mov	r7, r3
 80126fc:	4683      	mov	fp, r0
 80126fe:	f003 fad9 	bl	8015cb4 <_localeconv_r>
 8012702:	6803      	ldr	r3, [r0, #0]
 8012704:	930d      	str	r3, [sp, #52]	; 0x34
 8012706:	4618      	mov	r0, r3
 8012708:	f7f4 f914 	bl	8006934 <strlen>
 801270c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8012710:	9008      	str	r0, [sp, #32]
 8012712:	061b      	lsls	r3, r3, #24
 8012714:	d518      	bpl.n	8012748 <_svfprintf_r+0x58>
 8012716:	f8da 3010 	ldr.w	r3, [sl, #16]
 801271a:	b9ab      	cbnz	r3, 8012748 <_svfprintf_r+0x58>
 801271c:	2140      	movs	r1, #64	; 0x40
 801271e:	4658      	mov	r0, fp
 8012720:	f7ff fab6 	bl	8011c90 <_malloc_r>
 8012724:	f8ca 0000 	str.w	r0, [sl]
 8012728:	f8ca 0010 	str.w	r0, [sl, #16]
 801272c:	b948      	cbnz	r0, 8012742 <_svfprintf_r+0x52>
 801272e:	230c      	movs	r3, #12
 8012730:	f8cb 3000 	str.w	r3, [fp]
 8012734:	f04f 33ff 	mov.w	r3, #4294967295
 8012738:	9309      	str	r3, [sp, #36]	; 0x24
 801273a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801273c:	b03d      	add	sp, #244	; 0xf4
 801273e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012742:	2340      	movs	r3, #64	; 0x40
 8012744:	f8ca 3014 	str.w	r3, [sl, #20]
 8012748:	ed9f 7b99 	vldr	d7, [pc, #612]	; 80129b0 <_svfprintf_r+0x2c0>
 801274c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012750:	2300      	movs	r3, #0
 8012752:	ac2c      	add	r4, sp, #176	; 0xb0
 8012754:	941f      	str	r4, [sp, #124]	; 0x7c
 8012756:	9321      	str	r3, [sp, #132]	; 0x84
 8012758:	9320      	str	r3, [sp, #128]	; 0x80
 801275a:	9505      	str	r5, [sp, #20]
 801275c:	9303      	str	r3, [sp, #12]
 801275e:	9311      	str	r3, [sp, #68]	; 0x44
 8012760:	9310      	str	r3, [sp, #64]	; 0x40
 8012762:	9309      	str	r3, [sp, #36]	; 0x24
 8012764:	9d05      	ldr	r5, [sp, #20]
 8012766:	462b      	mov	r3, r5
 8012768:	f813 2b01 	ldrb.w	r2, [r3], #1
 801276c:	b112      	cbz	r2, 8012774 <_svfprintf_r+0x84>
 801276e:	2a25      	cmp	r2, #37	; 0x25
 8012770:	f040 8083 	bne.w	801287a <_svfprintf_r+0x18a>
 8012774:	9b05      	ldr	r3, [sp, #20]
 8012776:	1aee      	subs	r6, r5, r3
 8012778:	d00d      	beq.n	8012796 <_svfprintf_r+0xa6>
 801277a:	e884 0048 	stmia.w	r4, {r3, r6}
 801277e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012780:	4433      	add	r3, r6
 8012782:	9321      	str	r3, [sp, #132]	; 0x84
 8012784:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012786:	3301      	adds	r3, #1
 8012788:	2b07      	cmp	r3, #7
 801278a:	9320      	str	r3, [sp, #128]	; 0x80
 801278c:	dc77      	bgt.n	801287e <_svfprintf_r+0x18e>
 801278e:	3408      	adds	r4, #8
 8012790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012792:	4433      	add	r3, r6
 8012794:	9309      	str	r3, [sp, #36]	; 0x24
 8012796:	782b      	ldrb	r3, [r5, #0]
 8012798:	2b00      	cmp	r3, #0
 801279a:	f000 8729 	beq.w	80135f0 <_svfprintf_r+0xf00>
 801279e:	2300      	movs	r3, #0
 80127a0:	1c69      	adds	r1, r5, #1
 80127a2:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80127a6:	461a      	mov	r2, r3
 80127a8:	f04f 39ff 	mov.w	r9, #4294967295
 80127ac:	930a      	str	r3, [sp, #40]	; 0x28
 80127ae:	461d      	mov	r5, r3
 80127b0:	200a      	movs	r0, #10
 80127b2:	1c4e      	adds	r6, r1, #1
 80127b4:	7809      	ldrb	r1, [r1, #0]
 80127b6:	9605      	str	r6, [sp, #20]
 80127b8:	9102      	str	r1, [sp, #8]
 80127ba:	9902      	ldr	r1, [sp, #8]
 80127bc:	3920      	subs	r1, #32
 80127be:	2958      	cmp	r1, #88	; 0x58
 80127c0:	f200 8418 	bhi.w	8012ff4 <_svfprintf_r+0x904>
 80127c4:	e8df f011 	tbh	[pc, r1, lsl #1]
 80127c8:	041600a6 	.word	0x041600a6
 80127cc:	00ab0416 	.word	0x00ab0416
 80127d0:	04160416 	.word	0x04160416
 80127d4:	04160416 	.word	0x04160416
 80127d8:	04160416 	.word	0x04160416
 80127dc:	006500ae 	.word	0x006500ae
 80127e0:	00b70416 	.word	0x00b70416
 80127e4:	041600ba 	.word	0x041600ba
 80127e8:	00da00d7 	.word	0x00da00d7
 80127ec:	00da00da 	.word	0x00da00da
 80127f0:	00da00da 	.word	0x00da00da
 80127f4:	00da00da 	.word	0x00da00da
 80127f8:	00da00da 	.word	0x00da00da
 80127fc:	04160416 	.word	0x04160416
 8012800:	04160416 	.word	0x04160416
 8012804:	04160416 	.word	0x04160416
 8012808:	04160416 	.word	0x04160416
 801280c:	04160416 	.word	0x04160416
 8012810:	012b0115 	.word	0x012b0115
 8012814:	012b0416 	.word	0x012b0416
 8012818:	04160416 	.word	0x04160416
 801281c:	04160416 	.word	0x04160416
 8012820:	041600ed 	.word	0x041600ed
 8012824:	03400416 	.word	0x03400416
 8012828:	04160416 	.word	0x04160416
 801282c:	04160416 	.word	0x04160416
 8012830:	03a80416 	.word	0x03a80416
 8012834:	04160416 	.word	0x04160416
 8012838:	04160086 	.word	0x04160086
 801283c:	04160416 	.word	0x04160416
 8012840:	04160416 	.word	0x04160416
 8012844:	04160416 	.word	0x04160416
 8012848:	04160416 	.word	0x04160416
 801284c:	01070416 	.word	0x01070416
 8012850:	012b006b 	.word	0x012b006b
 8012854:	012b012b 	.word	0x012b012b
 8012858:	006b00f0 	.word	0x006b00f0
 801285c:	04160416 	.word	0x04160416
 8012860:	041600fa 	.word	0x041600fa
 8012864:	03420322 	.word	0x03420322
 8012868:	01010376 	.word	0x01010376
 801286c:	03870416 	.word	0x03870416
 8012870:	03aa0416 	.word	0x03aa0416
 8012874:	04160416 	.word	0x04160416
 8012878:	03c2      	.short	0x03c2
 801287a:	461d      	mov	r5, r3
 801287c:	e773      	b.n	8012766 <_svfprintf_r+0x76>
 801287e:	aa1f      	add	r2, sp, #124	; 0x7c
 8012880:	4651      	mov	r1, sl
 8012882:	4658      	mov	r0, fp
 8012884:	f003 fdb5 	bl	80163f2 <__ssprint_r>
 8012888:	2800      	cmp	r0, #0
 801288a:	f040 8692 	bne.w	80135b2 <_svfprintf_r+0xec2>
 801288e:	ac2c      	add	r4, sp, #176	; 0xb0
 8012890:	e77e      	b.n	8012790 <_svfprintf_r+0xa0>
 8012892:	2301      	movs	r3, #1
 8012894:	222b      	movs	r2, #43	; 0x2b
 8012896:	9905      	ldr	r1, [sp, #20]
 8012898:	e78b      	b.n	80127b2 <_svfprintf_r+0xc2>
 801289a:	460f      	mov	r7, r1
 801289c:	e7fb      	b.n	8012896 <_svfprintf_r+0x1a6>
 801289e:	b10b      	cbz	r3, 80128a4 <_svfprintf_r+0x1b4>
 80128a0:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80128a4:	06ae      	lsls	r6, r5, #26
 80128a6:	f140 80aa 	bpl.w	80129fe <_svfprintf_r+0x30e>
 80128aa:	3707      	adds	r7, #7
 80128ac:	f027 0707 	bic.w	r7, r7, #7
 80128b0:	f107 0308 	add.w	r3, r7, #8
 80128b4:	e9d7 6700 	ldrd	r6, r7, [r7]
 80128b8:	9304      	str	r3, [sp, #16]
 80128ba:	2e00      	cmp	r6, #0
 80128bc:	f177 0300 	sbcs.w	r3, r7, #0
 80128c0:	da06      	bge.n	80128d0 <_svfprintf_r+0x1e0>
 80128c2:	4276      	negs	r6, r6
 80128c4:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80128c8:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80128cc:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80128d0:	2301      	movs	r3, #1
 80128d2:	e2ca      	b.n	8012e6a <_svfprintf_r+0x77a>
 80128d4:	b10b      	cbz	r3, 80128da <_svfprintf_r+0x1ea>
 80128d6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80128da:	4b37      	ldr	r3, [pc, #220]	; (80129b8 <_svfprintf_r+0x2c8>)
 80128dc:	9311      	str	r3, [sp, #68]	; 0x44
 80128de:	06ab      	lsls	r3, r5, #26
 80128e0:	f140 8339 	bpl.w	8012f56 <_svfprintf_r+0x866>
 80128e4:	3707      	adds	r7, #7
 80128e6:	f027 0707 	bic.w	r7, r7, #7
 80128ea:	f107 0308 	add.w	r3, r7, #8
 80128ee:	e9d7 6700 	ldrd	r6, r7, [r7]
 80128f2:	9304      	str	r3, [sp, #16]
 80128f4:	07e8      	lsls	r0, r5, #31
 80128f6:	d50b      	bpl.n	8012910 <_svfprintf_r+0x220>
 80128f8:	ea56 0307 	orrs.w	r3, r6, r7
 80128fc:	d008      	beq.n	8012910 <_svfprintf_r+0x220>
 80128fe:	2330      	movs	r3, #48	; 0x30
 8012900:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8012904:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8012908:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 801290c:	f045 0502 	orr.w	r5, r5, #2
 8012910:	2302      	movs	r3, #2
 8012912:	e2a7      	b.n	8012e64 <_svfprintf_r+0x774>
 8012914:	2a00      	cmp	r2, #0
 8012916:	d1be      	bne.n	8012896 <_svfprintf_r+0x1a6>
 8012918:	2301      	movs	r3, #1
 801291a:	2220      	movs	r2, #32
 801291c:	e7bb      	b.n	8012896 <_svfprintf_r+0x1a6>
 801291e:	f045 0501 	orr.w	r5, r5, #1
 8012922:	e7b8      	b.n	8012896 <_svfprintf_r+0x1a6>
 8012924:	683e      	ldr	r6, [r7, #0]
 8012926:	960a      	str	r6, [sp, #40]	; 0x28
 8012928:	2e00      	cmp	r6, #0
 801292a:	f107 0104 	add.w	r1, r7, #4
 801292e:	dab4      	bge.n	801289a <_svfprintf_r+0x1aa>
 8012930:	4276      	negs	r6, r6
 8012932:	960a      	str	r6, [sp, #40]	; 0x28
 8012934:	460f      	mov	r7, r1
 8012936:	f045 0504 	orr.w	r5, r5, #4
 801293a:	e7ac      	b.n	8012896 <_svfprintf_r+0x1a6>
 801293c:	9905      	ldr	r1, [sp, #20]
 801293e:	1c4e      	adds	r6, r1, #1
 8012940:	7809      	ldrb	r1, [r1, #0]
 8012942:	9102      	str	r1, [sp, #8]
 8012944:	292a      	cmp	r1, #42	; 0x2a
 8012946:	d010      	beq.n	801296a <_svfprintf_r+0x27a>
 8012948:	f04f 0900 	mov.w	r9, #0
 801294c:	9605      	str	r6, [sp, #20]
 801294e:	9902      	ldr	r1, [sp, #8]
 8012950:	3930      	subs	r1, #48	; 0x30
 8012952:	2909      	cmp	r1, #9
 8012954:	f63f af31 	bhi.w	80127ba <_svfprintf_r+0xca>
 8012958:	fb00 1909 	mla	r9, r0, r9, r1
 801295c:	9905      	ldr	r1, [sp, #20]
 801295e:	460e      	mov	r6, r1
 8012960:	f816 1b01 	ldrb.w	r1, [r6], #1
 8012964:	9102      	str	r1, [sp, #8]
 8012966:	9605      	str	r6, [sp, #20]
 8012968:	e7f1      	b.n	801294e <_svfprintf_r+0x25e>
 801296a:	6839      	ldr	r1, [r7, #0]
 801296c:	9605      	str	r6, [sp, #20]
 801296e:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 8012972:	3704      	adds	r7, #4
 8012974:	e78f      	b.n	8012896 <_svfprintf_r+0x1a6>
 8012976:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 801297a:	e78c      	b.n	8012896 <_svfprintf_r+0x1a6>
 801297c:	2100      	movs	r1, #0
 801297e:	910a      	str	r1, [sp, #40]	; 0x28
 8012980:	9902      	ldr	r1, [sp, #8]
 8012982:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8012984:	3930      	subs	r1, #48	; 0x30
 8012986:	fb00 1106 	mla	r1, r0, r6, r1
 801298a:	910a      	str	r1, [sp, #40]	; 0x28
 801298c:	9905      	ldr	r1, [sp, #20]
 801298e:	460e      	mov	r6, r1
 8012990:	f816 1b01 	ldrb.w	r1, [r6], #1
 8012994:	9102      	str	r1, [sp, #8]
 8012996:	9902      	ldr	r1, [sp, #8]
 8012998:	9605      	str	r6, [sp, #20]
 801299a:	3930      	subs	r1, #48	; 0x30
 801299c:	2909      	cmp	r1, #9
 801299e:	d9ef      	bls.n	8012980 <_svfprintf_r+0x290>
 80129a0:	e70b      	b.n	80127ba <_svfprintf_r+0xca>
 80129a2:	f045 0508 	orr.w	r5, r5, #8
 80129a6:	e776      	b.n	8012896 <_svfprintf_r+0x1a6>
 80129a8:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 80129ac:	e773      	b.n	8012896 <_svfprintf_r+0x1a6>
 80129ae:	bf00      	nop
	...
 80129b8:	080182f2 	.word	0x080182f2
 80129bc:	9905      	ldr	r1, [sp, #20]
 80129be:	7809      	ldrb	r1, [r1, #0]
 80129c0:	296c      	cmp	r1, #108	; 0x6c
 80129c2:	d105      	bne.n	80129d0 <_svfprintf_r+0x2e0>
 80129c4:	9905      	ldr	r1, [sp, #20]
 80129c6:	3101      	adds	r1, #1
 80129c8:	9105      	str	r1, [sp, #20]
 80129ca:	f045 0520 	orr.w	r5, r5, #32
 80129ce:	e762      	b.n	8012896 <_svfprintf_r+0x1a6>
 80129d0:	f045 0510 	orr.w	r5, r5, #16
 80129d4:	e75f      	b.n	8012896 <_svfprintf_r+0x1a6>
 80129d6:	1d3b      	adds	r3, r7, #4
 80129d8:	9304      	str	r3, [sp, #16]
 80129da:	2600      	movs	r6, #0
 80129dc:	683b      	ldr	r3, [r7, #0]
 80129de:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 80129e2:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80129e6:	f04f 0901 	mov.w	r9, #1
 80129ea:	4637      	mov	r7, r6
 80129ec:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 80129f0:	e11b      	b.n	8012c2a <_svfprintf_r+0x53a>
 80129f2:	b10b      	cbz	r3, 80129f8 <_svfprintf_r+0x308>
 80129f4:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80129f8:	f045 0510 	orr.w	r5, r5, #16
 80129fc:	e752      	b.n	80128a4 <_svfprintf_r+0x1b4>
 80129fe:	f015 0f10 	tst.w	r5, #16
 8012a02:	f107 0304 	add.w	r3, r7, #4
 8012a06:	d003      	beq.n	8012a10 <_svfprintf_r+0x320>
 8012a08:	683e      	ldr	r6, [r7, #0]
 8012a0a:	9304      	str	r3, [sp, #16]
 8012a0c:	17f7      	asrs	r7, r6, #31
 8012a0e:	e754      	b.n	80128ba <_svfprintf_r+0x1ca>
 8012a10:	683e      	ldr	r6, [r7, #0]
 8012a12:	9304      	str	r3, [sp, #16]
 8012a14:	f015 0f40 	tst.w	r5, #64	; 0x40
 8012a18:	bf18      	it	ne
 8012a1a:	b236      	sxthne	r6, r6
 8012a1c:	e7f6      	b.n	8012a0c <_svfprintf_r+0x31c>
 8012a1e:	b10b      	cbz	r3, 8012a24 <_svfprintf_r+0x334>
 8012a20:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8012a24:	3707      	adds	r7, #7
 8012a26:	f027 0707 	bic.w	r7, r7, #7
 8012a2a:	f107 0308 	add.w	r3, r7, #8
 8012a2e:	9304      	str	r3, [sp, #16]
 8012a30:	ed97 7b00 	vldr	d7, [r7]
 8012a34:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012a38:	9b06      	ldr	r3, [sp, #24]
 8012a3a:	9312      	str	r3, [sp, #72]	; 0x48
 8012a3c:	9b07      	ldr	r3, [sp, #28]
 8012a3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012a42:	9313      	str	r3, [sp, #76]	; 0x4c
 8012a44:	f04f 32ff 	mov.w	r2, #4294967295
 8012a48:	4b4a      	ldr	r3, [pc, #296]	; (8012b74 <_svfprintf_r+0x484>)
 8012a4a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8012a4e:	f7f4 fbcb 	bl	80071e8 <__aeabi_dcmpun>
 8012a52:	2800      	cmp	r0, #0
 8012a54:	f040 85d5 	bne.w	8013602 <_svfprintf_r+0xf12>
 8012a58:	f04f 32ff 	mov.w	r2, #4294967295
 8012a5c:	4b45      	ldr	r3, [pc, #276]	; (8012b74 <_svfprintf_r+0x484>)
 8012a5e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8012a62:	f7f4 fba3 	bl	80071ac <__aeabi_dcmple>
 8012a66:	2800      	cmp	r0, #0
 8012a68:	f040 85cb 	bne.w	8013602 <_svfprintf_r+0xf12>
 8012a6c:	2200      	movs	r2, #0
 8012a6e:	2300      	movs	r3, #0
 8012a70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012a74:	f7f4 fb90 	bl	8007198 <__aeabi_dcmplt>
 8012a78:	b110      	cbz	r0, 8012a80 <_svfprintf_r+0x390>
 8012a7a:	232d      	movs	r3, #45	; 0x2d
 8012a7c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8012a80:	4b3d      	ldr	r3, [pc, #244]	; (8012b78 <_svfprintf_r+0x488>)
 8012a82:	4a3e      	ldr	r2, [pc, #248]	; (8012b7c <_svfprintf_r+0x48c>)
 8012a84:	9902      	ldr	r1, [sp, #8]
 8012a86:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8012a8a:	2947      	cmp	r1, #71	; 0x47
 8012a8c:	bfcc      	ite	gt
 8012a8e:	4690      	movgt	r8, r2
 8012a90:	4698      	movle	r8, r3
 8012a92:	f04f 0903 	mov.w	r9, #3
 8012a96:	2600      	movs	r6, #0
 8012a98:	4637      	mov	r7, r6
 8012a9a:	e0c6      	b.n	8012c2a <_svfprintf_r+0x53a>
 8012a9c:	f1b9 3fff 	cmp.w	r9, #4294967295
 8012aa0:	d022      	beq.n	8012ae8 <_svfprintf_r+0x3f8>
 8012aa2:	9b02      	ldr	r3, [sp, #8]
 8012aa4:	f023 0320 	bic.w	r3, r3, #32
 8012aa8:	2b47      	cmp	r3, #71	; 0x47
 8012aaa:	d104      	bne.n	8012ab6 <_svfprintf_r+0x3c6>
 8012aac:	f1b9 0f00 	cmp.w	r9, #0
 8012ab0:	bf08      	it	eq
 8012ab2:	f04f 0901 	moveq.w	r9, #1
 8012ab6:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8012aba:	930c      	str	r3, [sp, #48]	; 0x30
 8012abc:	9b07      	ldr	r3, [sp, #28]
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	da15      	bge.n	8012aee <_svfprintf_r+0x3fe>
 8012ac2:	9b06      	ldr	r3, [sp, #24]
 8012ac4:	930e      	str	r3, [sp, #56]	; 0x38
 8012ac6:	9b07      	ldr	r3, [sp, #28]
 8012ac8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012acc:	930f      	str	r3, [sp, #60]	; 0x3c
 8012ace:	232d      	movs	r3, #45	; 0x2d
 8012ad0:	930b      	str	r3, [sp, #44]	; 0x2c
 8012ad2:	9b02      	ldr	r3, [sp, #8]
 8012ad4:	f023 0720 	bic.w	r7, r3, #32
 8012ad8:	2f46      	cmp	r7, #70	; 0x46
 8012ada:	d00e      	beq.n	8012afa <_svfprintf_r+0x40a>
 8012adc:	2f45      	cmp	r7, #69	; 0x45
 8012ade:	d146      	bne.n	8012b6e <_svfprintf_r+0x47e>
 8012ae0:	f109 0601 	add.w	r6, r9, #1
 8012ae4:	2102      	movs	r1, #2
 8012ae6:	e00a      	b.n	8012afe <_svfprintf_r+0x40e>
 8012ae8:	f04f 0906 	mov.w	r9, #6
 8012aec:	e7e3      	b.n	8012ab6 <_svfprintf_r+0x3c6>
 8012aee:	ed9d 7b06 	vldr	d7, [sp, #24]
 8012af2:	2300      	movs	r3, #0
 8012af4:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8012af8:	e7ea      	b.n	8012ad0 <_svfprintf_r+0x3e0>
 8012afa:	464e      	mov	r6, r9
 8012afc:	2103      	movs	r1, #3
 8012afe:	ab1d      	add	r3, sp, #116	; 0x74
 8012b00:	9301      	str	r3, [sp, #4]
 8012b02:	ab1a      	add	r3, sp, #104	; 0x68
 8012b04:	9300      	str	r3, [sp, #0]
 8012b06:	4632      	mov	r2, r6
 8012b08:	ab19      	add	r3, sp, #100	; 0x64
 8012b0a:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8012b0e:	4658      	mov	r0, fp
 8012b10:	f002 f81e 	bl	8014b50 <_dtoa_r>
 8012b14:	2f47      	cmp	r7, #71	; 0x47
 8012b16:	4680      	mov	r8, r0
 8012b18:	d102      	bne.n	8012b20 <_svfprintf_r+0x430>
 8012b1a:	07e8      	lsls	r0, r5, #31
 8012b1c:	f140 857e 	bpl.w	801361c <_svfprintf_r+0xf2c>
 8012b20:	eb08 0306 	add.w	r3, r8, r6
 8012b24:	2f46      	cmp	r7, #70	; 0x46
 8012b26:	9303      	str	r3, [sp, #12]
 8012b28:	d111      	bne.n	8012b4e <_svfprintf_r+0x45e>
 8012b2a:	f898 3000 	ldrb.w	r3, [r8]
 8012b2e:	2b30      	cmp	r3, #48	; 0x30
 8012b30:	d109      	bne.n	8012b46 <_svfprintf_r+0x456>
 8012b32:	2200      	movs	r2, #0
 8012b34:	2300      	movs	r3, #0
 8012b36:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8012b3a:	f7f4 fb23 	bl	8007184 <__aeabi_dcmpeq>
 8012b3e:	b910      	cbnz	r0, 8012b46 <_svfprintf_r+0x456>
 8012b40:	f1c6 0601 	rsb	r6, r6, #1
 8012b44:	9619      	str	r6, [sp, #100]	; 0x64
 8012b46:	9a03      	ldr	r2, [sp, #12]
 8012b48:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012b4a:	441a      	add	r2, r3
 8012b4c:	9203      	str	r2, [sp, #12]
 8012b4e:	2200      	movs	r2, #0
 8012b50:	2300      	movs	r3, #0
 8012b52:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8012b56:	f7f4 fb15 	bl	8007184 <__aeabi_dcmpeq>
 8012b5a:	b988      	cbnz	r0, 8012b80 <_svfprintf_r+0x490>
 8012b5c:	2230      	movs	r2, #48	; 0x30
 8012b5e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012b60:	9903      	ldr	r1, [sp, #12]
 8012b62:	4299      	cmp	r1, r3
 8012b64:	d90e      	bls.n	8012b84 <_svfprintf_r+0x494>
 8012b66:	1c59      	adds	r1, r3, #1
 8012b68:	911d      	str	r1, [sp, #116]	; 0x74
 8012b6a:	701a      	strb	r2, [r3, #0]
 8012b6c:	e7f7      	b.n	8012b5e <_svfprintf_r+0x46e>
 8012b6e:	464e      	mov	r6, r9
 8012b70:	e7b8      	b.n	8012ae4 <_svfprintf_r+0x3f4>
 8012b72:	bf00      	nop
 8012b74:	7fefffff 	.word	0x7fefffff
 8012b78:	080182e2 	.word	0x080182e2
 8012b7c:	080182e6 	.word	0x080182e6
 8012b80:	9b03      	ldr	r3, [sp, #12]
 8012b82:	931d      	str	r3, [sp, #116]	; 0x74
 8012b84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012b86:	2f47      	cmp	r7, #71	; 0x47
 8012b88:	eba3 0308 	sub.w	r3, r3, r8
 8012b8c:	9303      	str	r3, [sp, #12]
 8012b8e:	f040 80fa 	bne.w	8012d86 <_svfprintf_r+0x696>
 8012b92:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012b94:	1cd9      	adds	r1, r3, #3
 8012b96:	db02      	blt.n	8012b9e <_svfprintf_r+0x4ae>
 8012b98:	4599      	cmp	r9, r3
 8012b9a:	f280 8120 	bge.w	8012dde <_svfprintf_r+0x6ee>
 8012b9e:	9b02      	ldr	r3, [sp, #8]
 8012ba0:	3b02      	subs	r3, #2
 8012ba2:	9302      	str	r3, [sp, #8]
 8012ba4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8012ba6:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8012baa:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 8012bae:	1e53      	subs	r3, r2, #1
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	9319      	str	r3, [sp, #100]	; 0x64
 8012bb4:	bfb6      	itet	lt
 8012bb6:	f1c2 0301 	rsblt	r3, r2, #1
 8012bba:	222b      	movge	r2, #43	; 0x2b
 8012bbc:	222d      	movlt	r2, #45	; 0x2d
 8012bbe:	2b09      	cmp	r3, #9
 8012bc0:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8012bc4:	f340 80fb 	ble.w	8012dbe <_svfprintf_r+0x6ce>
 8012bc8:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8012bcc:	260a      	movs	r6, #10
 8012bce:	fb93 f0f6 	sdiv	r0, r3, r6
 8012bd2:	fb06 3310 	mls	r3, r6, r0, r3
 8012bd6:	3330      	adds	r3, #48	; 0x30
 8012bd8:	2809      	cmp	r0, #9
 8012bda:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012bde:	f102 31ff 	add.w	r1, r2, #4294967295
 8012be2:	4603      	mov	r3, r0
 8012be4:	f300 80e4 	bgt.w	8012db0 <_svfprintf_r+0x6c0>
 8012be8:	3330      	adds	r3, #48	; 0x30
 8012bea:	f801 3c01 	strb.w	r3, [r1, #-1]
 8012bee:	3a02      	subs	r2, #2
 8012bf0:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8012bf4:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8012bf8:	4282      	cmp	r2, r0
 8012bfa:	4619      	mov	r1, r3
 8012bfc:	f0c0 80da 	bcc.w	8012db4 <_svfprintf_r+0x6c4>
 8012c00:	9a03      	ldr	r2, [sp, #12]
 8012c02:	ab1b      	add	r3, sp, #108	; 0x6c
 8012c04:	1acb      	subs	r3, r1, r3
 8012c06:	2a01      	cmp	r2, #1
 8012c08:	9310      	str	r3, [sp, #64]	; 0x40
 8012c0a:	eb03 0902 	add.w	r9, r3, r2
 8012c0e:	dc02      	bgt.n	8012c16 <_svfprintf_r+0x526>
 8012c10:	f015 0701 	ands.w	r7, r5, #1
 8012c14:	d002      	beq.n	8012c1c <_svfprintf_r+0x52c>
 8012c16:	9b08      	ldr	r3, [sp, #32]
 8012c18:	2700      	movs	r7, #0
 8012c1a:	4499      	add	r9, r3
 8012c1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012c1e:	b113      	cbz	r3, 8012c26 <_svfprintf_r+0x536>
 8012c20:	232d      	movs	r3, #45	; 0x2d
 8012c22:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8012c26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012c28:	2600      	movs	r6, #0
 8012c2a:	454e      	cmp	r6, r9
 8012c2c:	4633      	mov	r3, r6
 8012c2e:	bfb8      	it	lt
 8012c30:	464b      	movlt	r3, r9
 8012c32:	930b      	str	r3, [sp, #44]	; 0x2c
 8012c34:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8012c38:	b113      	cbz	r3, 8012c40 <_svfprintf_r+0x550>
 8012c3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012c3c:	3301      	adds	r3, #1
 8012c3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012c40:	f015 0302 	ands.w	r3, r5, #2
 8012c44:	9314      	str	r3, [sp, #80]	; 0x50
 8012c46:	bf1e      	ittt	ne
 8012c48:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 8012c4a:	3302      	addne	r3, #2
 8012c4c:	930b      	strne	r3, [sp, #44]	; 0x2c
 8012c4e:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8012c52:	9315      	str	r3, [sp, #84]	; 0x54
 8012c54:	d118      	bne.n	8012c88 <_svfprintf_r+0x598>
 8012c56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012c5a:	1a9b      	subs	r3, r3, r2
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	930c      	str	r3, [sp, #48]	; 0x30
 8012c60:	dd12      	ble.n	8012c88 <_svfprintf_r+0x598>
 8012c62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012c64:	2b10      	cmp	r3, #16
 8012c66:	4ba9      	ldr	r3, [pc, #676]	; (8012f0c <_svfprintf_r+0x81c>)
 8012c68:	6023      	str	r3, [r4, #0]
 8012c6a:	f300 81d5 	bgt.w	8013018 <_svfprintf_r+0x928>
 8012c6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012c70:	6063      	str	r3, [r4, #4]
 8012c72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012c74:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012c76:	4413      	add	r3, r2
 8012c78:	9321      	str	r3, [sp, #132]	; 0x84
 8012c7a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012c7c:	3301      	adds	r3, #1
 8012c7e:	2b07      	cmp	r3, #7
 8012c80:	9320      	str	r3, [sp, #128]	; 0x80
 8012c82:	f300 81e2 	bgt.w	801304a <_svfprintf_r+0x95a>
 8012c86:	3408      	adds	r4, #8
 8012c88:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8012c8c:	b173      	cbz	r3, 8012cac <_svfprintf_r+0x5bc>
 8012c8e:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8012c92:	6023      	str	r3, [r4, #0]
 8012c94:	2301      	movs	r3, #1
 8012c96:	6063      	str	r3, [r4, #4]
 8012c98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012c9a:	3301      	adds	r3, #1
 8012c9c:	9321      	str	r3, [sp, #132]	; 0x84
 8012c9e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012ca0:	3301      	adds	r3, #1
 8012ca2:	2b07      	cmp	r3, #7
 8012ca4:	9320      	str	r3, [sp, #128]	; 0x80
 8012ca6:	f300 81da 	bgt.w	801305e <_svfprintf_r+0x96e>
 8012caa:	3408      	adds	r4, #8
 8012cac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012cae:	b16b      	cbz	r3, 8012ccc <_svfprintf_r+0x5dc>
 8012cb0:	ab18      	add	r3, sp, #96	; 0x60
 8012cb2:	6023      	str	r3, [r4, #0]
 8012cb4:	2302      	movs	r3, #2
 8012cb6:	6063      	str	r3, [r4, #4]
 8012cb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012cba:	3302      	adds	r3, #2
 8012cbc:	9321      	str	r3, [sp, #132]	; 0x84
 8012cbe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012cc0:	3301      	adds	r3, #1
 8012cc2:	2b07      	cmp	r3, #7
 8012cc4:	9320      	str	r3, [sp, #128]	; 0x80
 8012cc6:	f300 81d4 	bgt.w	8013072 <_svfprintf_r+0x982>
 8012cca:	3408      	adds	r4, #8
 8012ccc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012cce:	2b80      	cmp	r3, #128	; 0x80
 8012cd0:	d114      	bne.n	8012cfc <_svfprintf_r+0x60c>
 8012cd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012cd4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012cd6:	1a9b      	subs	r3, r3, r2
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	dd0f      	ble.n	8012cfc <_svfprintf_r+0x60c>
 8012cdc:	4a8c      	ldr	r2, [pc, #560]	; (8012f10 <_svfprintf_r+0x820>)
 8012cde:	6022      	str	r2, [r4, #0]
 8012ce0:	2b10      	cmp	r3, #16
 8012ce2:	f300 81d0 	bgt.w	8013086 <_svfprintf_r+0x996>
 8012ce6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012ce8:	6063      	str	r3, [r4, #4]
 8012cea:	4413      	add	r3, r2
 8012cec:	9321      	str	r3, [sp, #132]	; 0x84
 8012cee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012cf0:	3301      	adds	r3, #1
 8012cf2:	2b07      	cmp	r3, #7
 8012cf4:	9320      	str	r3, [sp, #128]	; 0x80
 8012cf6:	f300 81df 	bgt.w	80130b8 <_svfprintf_r+0x9c8>
 8012cfa:	3408      	adds	r4, #8
 8012cfc:	eba6 0609 	sub.w	r6, r6, r9
 8012d00:	2e00      	cmp	r6, #0
 8012d02:	dd0f      	ble.n	8012d24 <_svfprintf_r+0x634>
 8012d04:	4b82      	ldr	r3, [pc, #520]	; (8012f10 <_svfprintf_r+0x820>)
 8012d06:	6023      	str	r3, [r4, #0]
 8012d08:	2e10      	cmp	r6, #16
 8012d0a:	f300 81df 	bgt.w	80130cc <_svfprintf_r+0x9dc>
 8012d0e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012d10:	9821      	ldr	r0, [sp, #132]	; 0x84
 8012d12:	6066      	str	r6, [r4, #4]
 8012d14:	3301      	adds	r3, #1
 8012d16:	4406      	add	r6, r0
 8012d18:	2b07      	cmp	r3, #7
 8012d1a:	9621      	str	r6, [sp, #132]	; 0x84
 8012d1c:	9320      	str	r3, [sp, #128]	; 0x80
 8012d1e:	f300 81ec 	bgt.w	80130fa <_svfprintf_r+0xa0a>
 8012d22:	3408      	adds	r4, #8
 8012d24:	05eb      	lsls	r3, r5, #23
 8012d26:	f100 81f2 	bmi.w	801310e <_svfprintf_r+0xa1e>
 8012d2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012d2c:	e884 0300 	stmia.w	r4, {r8, r9}
 8012d30:	444b      	add	r3, r9
 8012d32:	9321      	str	r3, [sp, #132]	; 0x84
 8012d34:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012d36:	3301      	adds	r3, #1
 8012d38:	2b07      	cmp	r3, #7
 8012d3a:	9320      	str	r3, [sp, #128]	; 0x80
 8012d3c:	f340 8419 	ble.w	8013572 <_svfprintf_r+0xe82>
 8012d40:	aa1f      	add	r2, sp, #124	; 0x7c
 8012d42:	4651      	mov	r1, sl
 8012d44:	4658      	mov	r0, fp
 8012d46:	f003 fb54 	bl	80163f2 <__ssprint_r>
 8012d4a:	2800      	cmp	r0, #0
 8012d4c:	f040 8431 	bne.w	80135b2 <_svfprintf_r+0xec2>
 8012d50:	ac2c      	add	r4, sp, #176	; 0xb0
 8012d52:	076b      	lsls	r3, r5, #29
 8012d54:	f100 8410 	bmi.w	8013578 <_svfprintf_r+0xe88>
 8012d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012d5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012d5e:	428a      	cmp	r2, r1
 8012d60:	bfac      	ite	ge
 8012d62:	189b      	addge	r3, r3, r2
 8012d64:	185b      	addlt	r3, r3, r1
 8012d66:	9309      	str	r3, [sp, #36]	; 0x24
 8012d68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012d6a:	b13b      	cbz	r3, 8012d7c <_svfprintf_r+0x68c>
 8012d6c:	aa1f      	add	r2, sp, #124	; 0x7c
 8012d6e:	4651      	mov	r1, sl
 8012d70:	4658      	mov	r0, fp
 8012d72:	f003 fb3e 	bl	80163f2 <__ssprint_r>
 8012d76:	2800      	cmp	r0, #0
 8012d78:	f040 841b 	bne.w	80135b2 <_svfprintf_r+0xec2>
 8012d7c:	2300      	movs	r3, #0
 8012d7e:	9320      	str	r3, [sp, #128]	; 0x80
 8012d80:	9f04      	ldr	r7, [sp, #16]
 8012d82:	ac2c      	add	r4, sp, #176	; 0xb0
 8012d84:	e4ee      	b.n	8012764 <_svfprintf_r+0x74>
 8012d86:	9b02      	ldr	r3, [sp, #8]
 8012d88:	2b65      	cmp	r3, #101	; 0x65
 8012d8a:	f77f af0b 	ble.w	8012ba4 <_svfprintf_r+0x4b4>
 8012d8e:	9b02      	ldr	r3, [sp, #8]
 8012d90:	2b66      	cmp	r3, #102	; 0x66
 8012d92:	d124      	bne.n	8012dde <_svfprintf_r+0x6ee>
 8012d94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	dd19      	ble.n	8012dce <_svfprintf_r+0x6de>
 8012d9a:	f1b9 0f00 	cmp.w	r9, #0
 8012d9e:	d101      	bne.n	8012da4 <_svfprintf_r+0x6b4>
 8012da0:	07ea      	lsls	r2, r5, #31
 8012da2:	d502      	bpl.n	8012daa <_svfprintf_r+0x6ba>
 8012da4:	9a08      	ldr	r2, [sp, #32]
 8012da6:	4413      	add	r3, r2
 8012da8:	444b      	add	r3, r9
 8012daa:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8012dac:	4699      	mov	r9, r3
 8012dae:	e735      	b.n	8012c1c <_svfprintf_r+0x52c>
 8012db0:	460a      	mov	r2, r1
 8012db2:	e70c      	b.n	8012bce <_svfprintf_r+0x4de>
 8012db4:	f812 1b01 	ldrb.w	r1, [r2], #1
 8012db8:	f803 1b01 	strb.w	r1, [r3], #1
 8012dbc:	e71c      	b.n	8012bf8 <_svfprintf_r+0x508>
 8012dbe:	2230      	movs	r2, #48	; 0x30
 8012dc0:	4413      	add	r3, r2
 8012dc2:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8012dc6:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8012dca:	a91c      	add	r1, sp, #112	; 0x70
 8012dcc:	e718      	b.n	8012c00 <_svfprintf_r+0x510>
 8012dce:	f1b9 0f00 	cmp.w	r9, #0
 8012dd2:	d101      	bne.n	8012dd8 <_svfprintf_r+0x6e8>
 8012dd4:	07eb      	lsls	r3, r5, #31
 8012dd6:	d515      	bpl.n	8012e04 <_svfprintf_r+0x714>
 8012dd8:	9b08      	ldr	r3, [sp, #32]
 8012dda:	3301      	adds	r3, #1
 8012ddc:	e7e4      	b.n	8012da8 <_svfprintf_r+0x6b8>
 8012dde:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8012de0:	9b03      	ldr	r3, [sp, #12]
 8012de2:	429a      	cmp	r2, r3
 8012de4:	db06      	blt.n	8012df4 <_svfprintf_r+0x704>
 8012de6:	07ef      	lsls	r7, r5, #31
 8012de8:	d50e      	bpl.n	8012e08 <_svfprintf_r+0x718>
 8012dea:	9b08      	ldr	r3, [sp, #32]
 8012dec:	4413      	add	r3, r2
 8012dee:	2267      	movs	r2, #103	; 0x67
 8012df0:	9202      	str	r2, [sp, #8]
 8012df2:	e7da      	b.n	8012daa <_svfprintf_r+0x6ba>
 8012df4:	9b03      	ldr	r3, [sp, #12]
 8012df6:	9908      	ldr	r1, [sp, #32]
 8012df8:	2a00      	cmp	r2, #0
 8012dfa:	440b      	add	r3, r1
 8012dfc:	dcf7      	bgt.n	8012dee <_svfprintf_r+0x6fe>
 8012dfe:	f1c2 0201 	rsb	r2, r2, #1
 8012e02:	e7f3      	b.n	8012dec <_svfprintf_r+0x6fc>
 8012e04:	2301      	movs	r3, #1
 8012e06:	e7d0      	b.n	8012daa <_svfprintf_r+0x6ba>
 8012e08:	4613      	mov	r3, r2
 8012e0a:	e7f0      	b.n	8012dee <_svfprintf_r+0x6fe>
 8012e0c:	b10b      	cbz	r3, 8012e12 <_svfprintf_r+0x722>
 8012e0e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8012e12:	f015 0f20 	tst.w	r5, #32
 8012e16:	f107 0304 	add.w	r3, r7, #4
 8012e1a:	d008      	beq.n	8012e2e <_svfprintf_r+0x73e>
 8012e1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012e1e:	683a      	ldr	r2, [r7, #0]
 8012e20:	17ce      	asrs	r6, r1, #31
 8012e22:	4608      	mov	r0, r1
 8012e24:	4631      	mov	r1, r6
 8012e26:	e9c2 0100 	strd	r0, r1, [r2]
 8012e2a:	461f      	mov	r7, r3
 8012e2c:	e49a      	b.n	8012764 <_svfprintf_r+0x74>
 8012e2e:	06ee      	lsls	r6, r5, #27
 8012e30:	d503      	bpl.n	8012e3a <_svfprintf_r+0x74a>
 8012e32:	683a      	ldr	r2, [r7, #0]
 8012e34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012e36:	6011      	str	r1, [r2, #0]
 8012e38:	e7f7      	b.n	8012e2a <_svfprintf_r+0x73a>
 8012e3a:	0668      	lsls	r0, r5, #25
 8012e3c:	d5f9      	bpl.n	8012e32 <_svfprintf_r+0x742>
 8012e3e:	683a      	ldr	r2, [r7, #0]
 8012e40:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8012e44:	8011      	strh	r1, [r2, #0]
 8012e46:	e7f0      	b.n	8012e2a <_svfprintf_r+0x73a>
 8012e48:	f045 0510 	orr.w	r5, r5, #16
 8012e4c:	f015 0320 	ands.w	r3, r5, #32
 8012e50:	d022      	beq.n	8012e98 <_svfprintf_r+0x7a8>
 8012e52:	3707      	adds	r7, #7
 8012e54:	f027 0707 	bic.w	r7, r7, #7
 8012e58:	f107 0308 	add.w	r3, r7, #8
 8012e5c:	e9d7 6700 	ldrd	r6, r7, [r7]
 8012e60:	9304      	str	r3, [sp, #16]
 8012e62:	2300      	movs	r3, #0
 8012e64:	2200      	movs	r2, #0
 8012e66:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8012e6a:	f1b9 3fff 	cmp.w	r9, #4294967295
 8012e6e:	f000 83db 	beq.w	8013628 <_svfprintf_r+0xf38>
 8012e72:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 8012e76:	920b      	str	r2, [sp, #44]	; 0x2c
 8012e78:	ea56 0207 	orrs.w	r2, r6, r7
 8012e7c:	f040 83d9 	bne.w	8013632 <_svfprintf_r+0xf42>
 8012e80:	f1b9 0f00 	cmp.w	r9, #0
 8012e84:	f000 80aa 	beq.w	8012fdc <_svfprintf_r+0x8ec>
 8012e88:	2b01      	cmp	r3, #1
 8012e8a:	d076      	beq.n	8012f7a <_svfprintf_r+0x88a>
 8012e8c:	2b02      	cmp	r3, #2
 8012e8e:	f000 8091 	beq.w	8012fb4 <_svfprintf_r+0x8c4>
 8012e92:	2600      	movs	r6, #0
 8012e94:	2700      	movs	r7, #0
 8012e96:	e3d2      	b.n	801363e <_svfprintf_r+0xf4e>
 8012e98:	1d3a      	adds	r2, r7, #4
 8012e9a:	f015 0110 	ands.w	r1, r5, #16
 8012e9e:	9204      	str	r2, [sp, #16]
 8012ea0:	d002      	beq.n	8012ea8 <_svfprintf_r+0x7b8>
 8012ea2:	683e      	ldr	r6, [r7, #0]
 8012ea4:	2700      	movs	r7, #0
 8012ea6:	e7dd      	b.n	8012e64 <_svfprintf_r+0x774>
 8012ea8:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8012eac:	d0f9      	beq.n	8012ea2 <_svfprintf_r+0x7b2>
 8012eae:	883e      	ldrh	r6, [r7, #0]
 8012eb0:	2700      	movs	r7, #0
 8012eb2:	e7d6      	b.n	8012e62 <_svfprintf_r+0x772>
 8012eb4:	1d3b      	adds	r3, r7, #4
 8012eb6:	9304      	str	r3, [sp, #16]
 8012eb8:	2330      	movs	r3, #48	; 0x30
 8012eba:	2278      	movs	r2, #120	; 0x78
 8012ebc:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8012ec0:	4b14      	ldr	r3, [pc, #80]	; (8012f14 <_svfprintf_r+0x824>)
 8012ec2:	683e      	ldr	r6, [r7, #0]
 8012ec4:	9311      	str	r3, [sp, #68]	; 0x44
 8012ec6:	2700      	movs	r7, #0
 8012ec8:	f045 0502 	orr.w	r5, r5, #2
 8012ecc:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8012ed0:	2302      	movs	r3, #2
 8012ed2:	9202      	str	r2, [sp, #8]
 8012ed4:	e7c6      	b.n	8012e64 <_svfprintf_r+0x774>
 8012ed6:	1d3b      	adds	r3, r7, #4
 8012ed8:	2600      	movs	r6, #0
 8012eda:	f1b9 3fff 	cmp.w	r9, #4294967295
 8012ede:	9304      	str	r3, [sp, #16]
 8012ee0:	f8d7 8000 	ldr.w	r8, [r7]
 8012ee4:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8012ee8:	d00a      	beq.n	8012f00 <_svfprintf_r+0x810>
 8012eea:	464a      	mov	r2, r9
 8012eec:	4631      	mov	r1, r6
 8012eee:	4640      	mov	r0, r8
 8012ef0:	f7f3 fcc6 	bl	8006880 <memchr>
 8012ef4:	2800      	cmp	r0, #0
 8012ef6:	f000 808d 	beq.w	8013014 <_svfprintf_r+0x924>
 8012efa:	eba0 0908 	sub.w	r9, r0, r8
 8012efe:	e5cb      	b.n	8012a98 <_svfprintf_r+0x3a8>
 8012f00:	4640      	mov	r0, r8
 8012f02:	f7f3 fd17 	bl	8006934 <strlen>
 8012f06:	4681      	mov	r9, r0
 8012f08:	e5c6      	b.n	8012a98 <_svfprintf_r+0x3a8>
 8012f0a:	bf00      	nop
 8012f0c:	08018316 	.word	0x08018316
 8012f10:	08018326 	.word	0x08018326
 8012f14:	08018303 	.word	0x08018303
 8012f18:	f045 0510 	orr.w	r5, r5, #16
 8012f1c:	06a9      	lsls	r1, r5, #26
 8012f1e:	d509      	bpl.n	8012f34 <_svfprintf_r+0x844>
 8012f20:	3707      	adds	r7, #7
 8012f22:	f027 0707 	bic.w	r7, r7, #7
 8012f26:	f107 0308 	add.w	r3, r7, #8
 8012f2a:	e9d7 6700 	ldrd	r6, r7, [r7]
 8012f2e:	9304      	str	r3, [sp, #16]
 8012f30:	2301      	movs	r3, #1
 8012f32:	e797      	b.n	8012e64 <_svfprintf_r+0x774>
 8012f34:	1d3b      	adds	r3, r7, #4
 8012f36:	f015 0f10 	tst.w	r5, #16
 8012f3a:	9304      	str	r3, [sp, #16]
 8012f3c:	d001      	beq.n	8012f42 <_svfprintf_r+0x852>
 8012f3e:	683e      	ldr	r6, [r7, #0]
 8012f40:	e002      	b.n	8012f48 <_svfprintf_r+0x858>
 8012f42:	066a      	lsls	r2, r5, #25
 8012f44:	d5fb      	bpl.n	8012f3e <_svfprintf_r+0x84e>
 8012f46:	883e      	ldrh	r6, [r7, #0]
 8012f48:	2700      	movs	r7, #0
 8012f4a:	e7f1      	b.n	8012f30 <_svfprintf_r+0x840>
 8012f4c:	b10b      	cbz	r3, 8012f52 <_svfprintf_r+0x862>
 8012f4e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8012f52:	4ba3      	ldr	r3, [pc, #652]	; (80131e0 <_svfprintf_r+0xaf0>)
 8012f54:	e4c2      	b.n	80128dc <_svfprintf_r+0x1ec>
 8012f56:	1d3b      	adds	r3, r7, #4
 8012f58:	f015 0f10 	tst.w	r5, #16
 8012f5c:	9304      	str	r3, [sp, #16]
 8012f5e:	d001      	beq.n	8012f64 <_svfprintf_r+0x874>
 8012f60:	683e      	ldr	r6, [r7, #0]
 8012f62:	e002      	b.n	8012f6a <_svfprintf_r+0x87a>
 8012f64:	066e      	lsls	r6, r5, #25
 8012f66:	d5fb      	bpl.n	8012f60 <_svfprintf_r+0x870>
 8012f68:	883e      	ldrh	r6, [r7, #0]
 8012f6a:	2700      	movs	r7, #0
 8012f6c:	e4c2      	b.n	80128f4 <_svfprintf_r+0x204>
 8012f6e:	4643      	mov	r3, r8
 8012f70:	e366      	b.n	8013640 <_svfprintf_r+0xf50>
 8012f72:	2f00      	cmp	r7, #0
 8012f74:	bf08      	it	eq
 8012f76:	2e0a      	cmpeq	r6, #10
 8012f78:	d205      	bcs.n	8012f86 <_svfprintf_r+0x896>
 8012f7a:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8012f7e:	3630      	adds	r6, #48	; 0x30
 8012f80:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8012f84:	e377      	b.n	8013676 <_svfprintf_r+0xf86>
 8012f86:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8012f8a:	4630      	mov	r0, r6
 8012f8c:	4639      	mov	r1, r7
 8012f8e:	220a      	movs	r2, #10
 8012f90:	2300      	movs	r3, #0
 8012f92:	f7f4 f9b7 	bl	8007304 <__aeabi_uldivmod>
 8012f96:	3230      	adds	r2, #48	; 0x30
 8012f98:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8012f9c:	2300      	movs	r3, #0
 8012f9e:	4630      	mov	r0, r6
 8012fa0:	4639      	mov	r1, r7
 8012fa2:	220a      	movs	r2, #10
 8012fa4:	f7f4 f9ae 	bl	8007304 <__aeabi_uldivmod>
 8012fa8:	4606      	mov	r6, r0
 8012faa:	460f      	mov	r7, r1
 8012fac:	ea56 0307 	orrs.w	r3, r6, r7
 8012fb0:	d1eb      	bne.n	8012f8a <_svfprintf_r+0x89a>
 8012fb2:	e360      	b.n	8013676 <_svfprintf_r+0xf86>
 8012fb4:	2600      	movs	r6, #0
 8012fb6:	2700      	movs	r7, #0
 8012fb8:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8012fbc:	f006 030f 	and.w	r3, r6, #15
 8012fc0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012fc2:	5cd3      	ldrb	r3, [r2, r3]
 8012fc4:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8012fc8:	0933      	lsrs	r3, r6, #4
 8012fca:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8012fce:	093a      	lsrs	r2, r7, #4
 8012fd0:	461e      	mov	r6, r3
 8012fd2:	4617      	mov	r7, r2
 8012fd4:	ea56 0307 	orrs.w	r3, r6, r7
 8012fd8:	d1f0      	bne.n	8012fbc <_svfprintf_r+0x8cc>
 8012fda:	e34c      	b.n	8013676 <_svfprintf_r+0xf86>
 8012fdc:	b93b      	cbnz	r3, 8012fee <_svfprintf_r+0x8fe>
 8012fde:	07ea      	lsls	r2, r5, #31
 8012fe0:	d505      	bpl.n	8012fee <_svfprintf_r+0x8fe>
 8012fe2:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8012fe6:	2330      	movs	r3, #48	; 0x30
 8012fe8:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8012fec:	e343      	b.n	8013676 <_svfprintf_r+0xf86>
 8012fee:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8012ff2:	e340      	b.n	8013676 <_svfprintf_r+0xf86>
 8012ff4:	b10b      	cbz	r3, 8012ffa <_svfprintf_r+0x90a>
 8012ff6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8012ffa:	9b02      	ldr	r3, [sp, #8]
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	f000 82f7 	beq.w	80135f0 <_svfprintf_r+0xf00>
 8013002:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8013006:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 801300a:	2600      	movs	r6, #0
 801300c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8013010:	9704      	str	r7, [sp, #16]
 8013012:	e4e8      	b.n	80129e6 <_svfprintf_r+0x2f6>
 8013014:	4606      	mov	r6, r0
 8013016:	e53f      	b.n	8012a98 <_svfprintf_r+0x3a8>
 8013018:	2310      	movs	r3, #16
 801301a:	6063      	str	r3, [r4, #4]
 801301c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801301e:	3310      	adds	r3, #16
 8013020:	9321      	str	r3, [sp, #132]	; 0x84
 8013022:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013024:	3301      	adds	r3, #1
 8013026:	2b07      	cmp	r3, #7
 8013028:	9320      	str	r3, [sp, #128]	; 0x80
 801302a:	dc04      	bgt.n	8013036 <_svfprintf_r+0x946>
 801302c:	3408      	adds	r4, #8
 801302e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013030:	3b10      	subs	r3, #16
 8013032:	930c      	str	r3, [sp, #48]	; 0x30
 8013034:	e615      	b.n	8012c62 <_svfprintf_r+0x572>
 8013036:	aa1f      	add	r2, sp, #124	; 0x7c
 8013038:	4651      	mov	r1, sl
 801303a:	4658      	mov	r0, fp
 801303c:	f003 f9d9 	bl	80163f2 <__ssprint_r>
 8013040:	2800      	cmp	r0, #0
 8013042:	f040 82b6 	bne.w	80135b2 <_svfprintf_r+0xec2>
 8013046:	ac2c      	add	r4, sp, #176	; 0xb0
 8013048:	e7f1      	b.n	801302e <_svfprintf_r+0x93e>
 801304a:	aa1f      	add	r2, sp, #124	; 0x7c
 801304c:	4651      	mov	r1, sl
 801304e:	4658      	mov	r0, fp
 8013050:	f003 f9cf 	bl	80163f2 <__ssprint_r>
 8013054:	2800      	cmp	r0, #0
 8013056:	f040 82ac 	bne.w	80135b2 <_svfprintf_r+0xec2>
 801305a:	ac2c      	add	r4, sp, #176	; 0xb0
 801305c:	e614      	b.n	8012c88 <_svfprintf_r+0x598>
 801305e:	aa1f      	add	r2, sp, #124	; 0x7c
 8013060:	4651      	mov	r1, sl
 8013062:	4658      	mov	r0, fp
 8013064:	f003 f9c5 	bl	80163f2 <__ssprint_r>
 8013068:	2800      	cmp	r0, #0
 801306a:	f040 82a2 	bne.w	80135b2 <_svfprintf_r+0xec2>
 801306e:	ac2c      	add	r4, sp, #176	; 0xb0
 8013070:	e61c      	b.n	8012cac <_svfprintf_r+0x5bc>
 8013072:	aa1f      	add	r2, sp, #124	; 0x7c
 8013074:	4651      	mov	r1, sl
 8013076:	4658      	mov	r0, fp
 8013078:	f003 f9bb 	bl	80163f2 <__ssprint_r>
 801307c:	2800      	cmp	r0, #0
 801307e:	f040 8298 	bne.w	80135b2 <_svfprintf_r+0xec2>
 8013082:	ac2c      	add	r4, sp, #176	; 0xb0
 8013084:	e622      	b.n	8012ccc <_svfprintf_r+0x5dc>
 8013086:	2210      	movs	r2, #16
 8013088:	6062      	str	r2, [r4, #4]
 801308a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801308c:	3210      	adds	r2, #16
 801308e:	9221      	str	r2, [sp, #132]	; 0x84
 8013090:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013092:	3201      	adds	r2, #1
 8013094:	2a07      	cmp	r2, #7
 8013096:	9220      	str	r2, [sp, #128]	; 0x80
 8013098:	dc02      	bgt.n	80130a0 <_svfprintf_r+0x9b0>
 801309a:	3408      	adds	r4, #8
 801309c:	3b10      	subs	r3, #16
 801309e:	e61d      	b.n	8012cdc <_svfprintf_r+0x5ec>
 80130a0:	aa1f      	add	r2, sp, #124	; 0x7c
 80130a2:	4651      	mov	r1, sl
 80130a4:	4658      	mov	r0, fp
 80130a6:	930c      	str	r3, [sp, #48]	; 0x30
 80130a8:	f003 f9a3 	bl	80163f2 <__ssprint_r>
 80130ac:	2800      	cmp	r0, #0
 80130ae:	f040 8280 	bne.w	80135b2 <_svfprintf_r+0xec2>
 80130b2:	ac2c      	add	r4, sp, #176	; 0xb0
 80130b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80130b6:	e7f1      	b.n	801309c <_svfprintf_r+0x9ac>
 80130b8:	aa1f      	add	r2, sp, #124	; 0x7c
 80130ba:	4651      	mov	r1, sl
 80130bc:	4658      	mov	r0, fp
 80130be:	f003 f998 	bl	80163f2 <__ssprint_r>
 80130c2:	2800      	cmp	r0, #0
 80130c4:	f040 8275 	bne.w	80135b2 <_svfprintf_r+0xec2>
 80130c8:	ac2c      	add	r4, sp, #176	; 0xb0
 80130ca:	e617      	b.n	8012cfc <_svfprintf_r+0x60c>
 80130cc:	2310      	movs	r3, #16
 80130ce:	6063      	str	r3, [r4, #4]
 80130d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80130d2:	3310      	adds	r3, #16
 80130d4:	9321      	str	r3, [sp, #132]	; 0x84
 80130d6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80130d8:	3301      	adds	r3, #1
 80130da:	2b07      	cmp	r3, #7
 80130dc:	9320      	str	r3, [sp, #128]	; 0x80
 80130de:	dc02      	bgt.n	80130e6 <_svfprintf_r+0x9f6>
 80130e0:	3408      	adds	r4, #8
 80130e2:	3e10      	subs	r6, #16
 80130e4:	e60e      	b.n	8012d04 <_svfprintf_r+0x614>
 80130e6:	aa1f      	add	r2, sp, #124	; 0x7c
 80130e8:	4651      	mov	r1, sl
 80130ea:	4658      	mov	r0, fp
 80130ec:	f003 f981 	bl	80163f2 <__ssprint_r>
 80130f0:	2800      	cmp	r0, #0
 80130f2:	f040 825e 	bne.w	80135b2 <_svfprintf_r+0xec2>
 80130f6:	ac2c      	add	r4, sp, #176	; 0xb0
 80130f8:	e7f3      	b.n	80130e2 <_svfprintf_r+0x9f2>
 80130fa:	aa1f      	add	r2, sp, #124	; 0x7c
 80130fc:	4651      	mov	r1, sl
 80130fe:	4658      	mov	r0, fp
 8013100:	f003 f977 	bl	80163f2 <__ssprint_r>
 8013104:	2800      	cmp	r0, #0
 8013106:	f040 8254 	bne.w	80135b2 <_svfprintf_r+0xec2>
 801310a:	ac2c      	add	r4, sp, #176	; 0xb0
 801310c:	e60a      	b.n	8012d24 <_svfprintf_r+0x634>
 801310e:	9b02      	ldr	r3, [sp, #8]
 8013110:	2b65      	cmp	r3, #101	; 0x65
 8013112:	f340 81a9 	ble.w	8013468 <_svfprintf_r+0xd78>
 8013116:	2200      	movs	r2, #0
 8013118:	2300      	movs	r3, #0
 801311a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801311e:	f7f4 f831 	bl	8007184 <__aeabi_dcmpeq>
 8013122:	2800      	cmp	r0, #0
 8013124:	d062      	beq.n	80131ec <_svfprintf_r+0xafc>
 8013126:	4b2f      	ldr	r3, [pc, #188]	; (80131e4 <_svfprintf_r+0xaf4>)
 8013128:	6023      	str	r3, [r4, #0]
 801312a:	2301      	movs	r3, #1
 801312c:	6063      	str	r3, [r4, #4]
 801312e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013130:	3301      	adds	r3, #1
 8013132:	9321      	str	r3, [sp, #132]	; 0x84
 8013134:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013136:	3301      	adds	r3, #1
 8013138:	2b07      	cmp	r3, #7
 801313a:	9320      	str	r3, [sp, #128]	; 0x80
 801313c:	dc25      	bgt.n	801318a <_svfprintf_r+0xa9a>
 801313e:	3408      	adds	r4, #8
 8013140:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013142:	9a03      	ldr	r2, [sp, #12]
 8013144:	4293      	cmp	r3, r2
 8013146:	db02      	blt.n	801314e <_svfprintf_r+0xa5e>
 8013148:	07ee      	lsls	r6, r5, #31
 801314a:	f57f ae02 	bpl.w	8012d52 <_svfprintf_r+0x662>
 801314e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013150:	6023      	str	r3, [r4, #0]
 8013152:	9b08      	ldr	r3, [sp, #32]
 8013154:	6063      	str	r3, [r4, #4]
 8013156:	9a08      	ldr	r2, [sp, #32]
 8013158:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801315a:	4413      	add	r3, r2
 801315c:	9321      	str	r3, [sp, #132]	; 0x84
 801315e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013160:	3301      	adds	r3, #1
 8013162:	2b07      	cmp	r3, #7
 8013164:	9320      	str	r3, [sp, #128]	; 0x80
 8013166:	dc1a      	bgt.n	801319e <_svfprintf_r+0xaae>
 8013168:	3408      	adds	r4, #8
 801316a:	9b03      	ldr	r3, [sp, #12]
 801316c:	1e5e      	subs	r6, r3, #1
 801316e:	2e00      	cmp	r6, #0
 8013170:	f77f adef 	ble.w	8012d52 <_svfprintf_r+0x662>
 8013174:	4f1c      	ldr	r7, [pc, #112]	; (80131e8 <_svfprintf_r+0xaf8>)
 8013176:	f04f 0810 	mov.w	r8, #16
 801317a:	2e10      	cmp	r6, #16
 801317c:	6027      	str	r7, [r4, #0]
 801317e:	dc18      	bgt.n	80131b2 <_svfprintf_r+0xac2>
 8013180:	6066      	str	r6, [r4, #4]
 8013182:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013184:	441e      	add	r6, r3
 8013186:	9621      	str	r6, [sp, #132]	; 0x84
 8013188:	e5d4      	b.n	8012d34 <_svfprintf_r+0x644>
 801318a:	aa1f      	add	r2, sp, #124	; 0x7c
 801318c:	4651      	mov	r1, sl
 801318e:	4658      	mov	r0, fp
 8013190:	f003 f92f 	bl	80163f2 <__ssprint_r>
 8013194:	2800      	cmp	r0, #0
 8013196:	f040 820c 	bne.w	80135b2 <_svfprintf_r+0xec2>
 801319a:	ac2c      	add	r4, sp, #176	; 0xb0
 801319c:	e7d0      	b.n	8013140 <_svfprintf_r+0xa50>
 801319e:	aa1f      	add	r2, sp, #124	; 0x7c
 80131a0:	4651      	mov	r1, sl
 80131a2:	4658      	mov	r0, fp
 80131a4:	f003 f925 	bl	80163f2 <__ssprint_r>
 80131a8:	2800      	cmp	r0, #0
 80131aa:	f040 8202 	bne.w	80135b2 <_svfprintf_r+0xec2>
 80131ae:	ac2c      	add	r4, sp, #176	; 0xb0
 80131b0:	e7db      	b.n	801316a <_svfprintf_r+0xa7a>
 80131b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80131b4:	f8c4 8004 	str.w	r8, [r4, #4]
 80131b8:	3310      	adds	r3, #16
 80131ba:	9321      	str	r3, [sp, #132]	; 0x84
 80131bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80131be:	3301      	adds	r3, #1
 80131c0:	2b07      	cmp	r3, #7
 80131c2:	9320      	str	r3, [sp, #128]	; 0x80
 80131c4:	dc02      	bgt.n	80131cc <_svfprintf_r+0xadc>
 80131c6:	3408      	adds	r4, #8
 80131c8:	3e10      	subs	r6, #16
 80131ca:	e7d6      	b.n	801317a <_svfprintf_r+0xa8a>
 80131cc:	aa1f      	add	r2, sp, #124	; 0x7c
 80131ce:	4651      	mov	r1, sl
 80131d0:	4658      	mov	r0, fp
 80131d2:	f003 f90e 	bl	80163f2 <__ssprint_r>
 80131d6:	2800      	cmp	r0, #0
 80131d8:	f040 81eb 	bne.w	80135b2 <_svfprintf_r+0xec2>
 80131dc:	ac2c      	add	r4, sp, #176	; 0xb0
 80131de:	e7f3      	b.n	80131c8 <_svfprintf_r+0xad8>
 80131e0:	08018303 	.word	0x08018303
 80131e4:	08018314 	.word	0x08018314
 80131e8:	08018326 	.word	0x08018326
 80131ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	dc7a      	bgt.n	80132e8 <_svfprintf_r+0xbf8>
 80131f2:	4b9b      	ldr	r3, [pc, #620]	; (8013460 <_svfprintf_r+0xd70>)
 80131f4:	6023      	str	r3, [r4, #0]
 80131f6:	2301      	movs	r3, #1
 80131f8:	6063      	str	r3, [r4, #4]
 80131fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80131fc:	3301      	adds	r3, #1
 80131fe:	9321      	str	r3, [sp, #132]	; 0x84
 8013200:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013202:	3301      	adds	r3, #1
 8013204:	2b07      	cmp	r3, #7
 8013206:	9320      	str	r3, [sp, #128]	; 0x80
 8013208:	dc44      	bgt.n	8013294 <_svfprintf_r+0xba4>
 801320a:	3408      	adds	r4, #8
 801320c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801320e:	b923      	cbnz	r3, 801321a <_svfprintf_r+0xb2a>
 8013210:	9b03      	ldr	r3, [sp, #12]
 8013212:	b913      	cbnz	r3, 801321a <_svfprintf_r+0xb2a>
 8013214:	07e8      	lsls	r0, r5, #31
 8013216:	f57f ad9c 	bpl.w	8012d52 <_svfprintf_r+0x662>
 801321a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801321c:	6023      	str	r3, [r4, #0]
 801321e:	9b08      	ldr	r3, [sp, #32]
 8013220:	6063      	str	r3, [r4, #4]
 8013222:	9a08      	ldr	r2, [sp, #32]
 8013224:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013226:	4413      	add	r3, r2
 8013228:	9321      	str	r3, [sp, #132]	; 0x84
 801322a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801322c:	3301      	adds	r3, #1
 801322e:	2b07      	cmp	r3, #7
 8013230:	9320      	str	r3, [sp, #128]	; 0x80
 8013232:	dc39      	bgt.n	80132a8 <_svfprintf_r+0xbb8>
 8013234:	f104 0308 	add.w	r3, r4, #8
 8013238:	9e19      	ldr	r6, [sp, #100]	; 0x64
 801323a:	2e00      	cmp	r6, #0
 801323c:	da19      	bge.n	8013272 <_svfprintf_r+0xb82>
 801323e:	4f89      	ldr	r7, [pc, #548]	; (8013464 <_svfprintf_r+0xd74>)
 8013240:	4276      	negs	r6, r6
 8013242:	2410      	movs	r4, #16
 8013244:	2e10      	cmp	r6, #16
 8013246:	601f      	str	r7, [r3, #0]
 8013248:	dc38      	bgt.n	80132bc <_svfprintf_r+0xbcc>
 801324a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801324c:	605e      	str	r6, [r3, #4]
 801324e:	4416      	add	r6, r2
 8013250:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013252:	9621      	str	r6, [sp, #132]	; 0x84
 8013254:	3201      	adds	r2, #1
 8013256:	2a07      	cmp	r2, #7
 8013258:	f103 0308 	add.w	r3, r3, #8
 801325c:	9220      	str	r2, [sp, #128]	; 0x80
 801325e:	dd08      	ble.n	8013272 <_svfprintf_r+0xb82>
 8013260:	aa1f      	add	r2, sp, #124	; 0x7c
 8013262:	4651      	mov	r1, sl
 8013264:	4658      	mov	r0, fp
 8013266:	f003 f8c4 	bl	80163f2 <__ssprint_r>
 801326a:	2800      	cmp	r0, #0
 801326c:	f040 81a1 	bne.w	80135b2 <_svfprintf_r+0xec2>
 8013270:	ab2c      	add	r3, sp, #176	; 0xb0
 8013272:	9a03      	ldr	r2, [sp, #12]
 8013274:	605a      	str	r2, [r3, #4]
 8013276:	9903      	ldr	r1, [sp, #12]
 8013278:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801327a:	f8c3 8000 	str.w	r8, [r3]
 801327e:	440a      	add	r2, r1
 8013280:	9221      	str	r2, [sp, #132]	; 0x84
 8013282:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013284:	3201      	adds	r2, #1
 8013286:	2a07      	cmp	r2, #7
 8013288:	9220      	str	r2, [sp, #128]	; 0x80
 801328a:	f73f ad59 	bgt.w	8012d40 <_svfprintf_r+0x650>
 801328e:	f103 0408 	add.w	r4, r3, #8
 8013292:	e55e      	b.n	8012d52 <_svfprintf_r+0x662>
 8013294:	aa1f      	add	r2, sp, #124	; 0x7c
 8013296:	4651      	mov	r1, sl
 8013298:	4658      	mov	r0, fp
 801329a:	f003 f8aa 	bl	80163f2 <__ssprint_r>
 801329e:	2800      	cmp	r0, #0
 80132a0:	f040 8187 	bne.w	80135b2 <_svfprintf_r+0xec2>
 80132a4:	ac2c      	add	r4, sp, #176	; 0xb0
 80132a6:	e7b1      	b.n	801320c <_svfprintf_r+0xb1c>
 80132a8:	aa1f      	add	r2, sp, #124	; 0x7c
 80132aa:	4651      	mov	r1, sl
 80132ac:	4658      	mov	r0, fp
 80132ae:	f003 f8a0 	bl	80163f2 <__ssprint_r>
 80132b2:	2800      	cmp	r0, #0
 80132b4:	f040 817d 	bne.w	80135b2 <_svfprintf_r+0xec2>
 80132b8:	ab2c      	add	r3, sp, #176	; 0xb0
 80132ba:	e7bd      	b.n	8013238 <_svfprintf_r+0xb48>
 80132bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80132be:	605c      	str	r4, [r3, #4]
 80132c0:	3210      	adds	r2, #16
 80132c2:	9221      	str	r2, [sp, #132]	; 0x84
 80132c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80132c6:	3201      	adds	r2, #1
 80132c8:	2a07      	cmp	r2, #7
 80132ca:	9220      	str	r2, [sp, #128]	; 0x80
 80132cc:	dc02      	bgt.n	80132d4 <_svfprintf_r+0xbe4>
 80132ce:	3308      	adds	r3, #8
 80132d0:	3e10      	subs	r6, #16
 80132d2:	e7b7      	b.n	8013244 <_svfprintf_r+0xb54>
 80132d4:	aa1f      	add	r2, sp, #124	; 0x7c
 80132d6:	4651      	mov	r1, sl
 80132d8:	4658      	mov	r0, fp
 80132da:	f003 f88a 	bl	80163f2 <__ssprint_r>
 80132de:	2800      	cmp	r0, #0
 80132e0:	f040 8167 	bne.w	80135b2 <_svfprintf_r+0xec2>
 80132e4:	ab2c      	add	r3, sp, #176	; 0xb0
 80132e6:	e7f3      	b.n	80132d0 <_svfprintf_r+0xbe0>
 80132e8:	9b03      	ldr	r3, [sp, #12]
 80132ea:	42bb      	cmp	r3, r7
 80132ec:	bfa8      	it	ge
 80132ee:	463b      	movge	r3, r7
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	461e      	mov	r6, r3
 80132f4:	dd0b      	ble.n	801330e <_svfprintf_r+0xc1e>
 80132f6:	6063      	str	r3, [r4, #4]
 80132f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80132fa:	f8c4 8000 	str.w	r8, [r4]
 80132fe:	4433      	add	r3, r6
 8013300:	9321      	str	r3, [sp, #132]	; 0x84
 8013302:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013304:	3301      	adds	r3, #1
 8013306:	2b07      	cmp	r3, #7
 8013308:	9320      	str	r3, [sp, #128]	; 0x80
 801330a:	dc5f      	bgt.n	80133cc <_svfprintf_r+0xcdc>
 801330c:	3408      	adds	r4, #8
 801330e:	2e00      	cmp	r6, #0
 8013310:	bfac      	ite	ge
 8013312:	1bbe      	subge	r6, r7, r6
 8013314:	463e      	movlt	r6, r7
 8013316:	2e00      	cmp	r6, #0
 8013318:	dd0f      	ble.n	801333a <_svfprintf_r+0xc4a>
 801331a:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8013464 <_svfprintf_r+0xd74>
 801331e:	f8c4 9000 	str.w	r9, [r4]
 8013322:	2e10      	cmp	r6, #16
 8013324:	dc5c      	bgt.n	80133e0 <_svfprintf_r+0xcf0>
 8013326:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013328:	6066      	str	r6, [r4, #4]
 801332a:	441e      	add	r6, r3
 801332c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801332e:	9621      	str	r6, [sp, #132]	; 0x84
 8013330:	3301      	adds	r3, #1
 8013332:	2b07      	cmp	r3, #7
 8013334:	9320      	str	r3, [sp, #128]	; 0x80
 8013336:	dc6a      	bgt.n	801340e <_svfprintf_r+0xd1e>
 8013338:	3408      	adds	r4, #8
 801333a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801333c:	9a03      	ldr	r2, [sp, #12]
 801333e:	4293      	cmp	r3, r2
 8013340:	db01      	blt.n	8013346 <_svfprintf_r+0xc56>
 8013342:	07e9      	lsls	r1, r5, #31
 8013344:	d50d      	bpl.n	8013362 <_svfprintf_r+0xc72>
 8013346:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013348:	6023      	str	r3, [r4, #0]
 801334a:	9b08      	ldr	r3, [sp, #32]
 801334c:	6063      	str	r3, [r4, #4]
 801334e:	9a08      	ldr	r2, [sp, #32]
 8013350:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013352:	4413      	add	r3, r2
 8013354:	9321      	str	r3, [sp, #132]	; 0x84
 8013356:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013358:	3301      	adds	r3, #1
 801335a:	2b07      	cmp	r3, #7
 801335c:	9320      	str	r3, [sp, #128]	; 0x80
 801335e:	dc60      	bgt.n	8013422 <_svfprintf_r+0xd32>
 8013360:	3408      	adds	r4, #8
 8013362:	9b03      	ldr	r3, [sp, #12]
 8013364:	9a03      	ldr	r2, [sp, #12]
 8013366:	1bde      	subs	r6, r3, r7
 8013368:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801336a:	1ad3      	subs	r3, r2, r3
 801336c:	429e      	cmp	r6, r3
 801336e:	bfa8      	it	ge
 8013370:	461e      	movge	r6, r3
 8013372:	2e00      	cmp	r6, #0
 8013374:	dd0b      	ble.n	801338e <_svfprintf_r+0xc9e>
 8013376:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013378:	6066      	str	r6, [r4, #4]
 801337a:	4433      	add	r3, r6
 801337c:	9321      	str	r3, [sp, #132]	; 0x84
 801337e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013380:	3301      	adds	r3, #1
 8013382:	4447      	add	r7, r8
 8013384:	2b07      	cmp	r3, #7
 8013386:	6027      	str	r7, [r4, #0]
 8013388:	9320      	str	r3, [sp, #128]	; 0x80
 801338a:	dc54      	bgt.n	8013436 <_svfprintf_r+0xd46>
 801338c:	3408      	adds	r4, #8
 801338e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013390:	9a03      	ldr	r2, [sp, #12]
 8013392:	2e00      	cmp	r6, #0
 8013394:	eba2 0303 	sub.w	r3, r2, r3
 8013398:	bfac      	ite	ge
 801339a:	1b9e      	subge	r6, r3, r6
 801339c:	461e      	movlt	r6, r3
 801339e:	2e00      	cmp	r6, #0
 80133a0:	f77f acd7 	ble.w	8012d52 <_svfprintf_r+0x662>
 80133a4:	4f2f      	ldr	r7, [pc, #188]	; (8013464 <_svfprintf_r+0xd74>)
 80133a6:	f04f 0810 	mov.w	r8, #16
 80133aa:	2e10      	cmp	r6, #16
 80133ac:	6027      	str	r7, [r4, #0]
 80133ae:	f77f aee7 	ble.w	8013180 <_svfprintf_r+0xa90>
 80133b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80133b4:	f8c4 8004 	str.w	r8, [r4, #4]
 80133b8:	3310      	adds	r3, #16
 80133ba:	9321      	str	r3, [sp, #132]	; 0x84
 80133bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80133be:	3301      	adds	r3, #1
 80133c0:	2b07      	cmp	r3, #7
 80133c2:	9320      	str	r3, [sp, #128]	; 0x80
 80133c4:	dc41      	bgt.n	801344a <_svfprintf_r+0xd5a>
 80133c6:	3408      	adds	r4, #8
 80133c8:	3e10      	subs	r6, #16
 80133ca:	e7ee      	b.n	80133aa <_svfprintf_r+0xcba>
 80133cc:	aa1f      	add	r2, sp, #124	; 0x7c
 80133ce:	4651      	mov	r1, sl
 80133d0:	4658      	mov	r0, fp
 80133d2:	f003 f80e 	bl	80163f2 <__ssprint_r>
 80133d6:	2800      	cmp	r0, #0
 80133d8:	f040 80eb 	bne.w	80135b2 <_svfprintf_r+0xec2>
 80133dc:	ac2c      	add	r4, sp, #176	; 0xb0
 80133de:	e796      	b.n	801330e <_svfprintf_r+0xc1e>
 80133e0:	2310      	movs	r3, #16
 80133e2:	6063      	str	r3, [r4, #4]
 80133e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80133e6:	3310      	adds	r3, #16
 80133e8:	9321      	str	r3, [sp, #132]	; 0x84
 80133ea:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80133ec:	3301      	adds	r3, #1
 80133ee:	2b07      	cmp	r3, #7
 80133f0:	9320      	str	r3, [sp, #128]	; 0x80
 80133f2:	dc02      	bgt.n	80133fa <_svfprintf_r+0xd0a>
 80133f4:	3408      	adds	r4, #8
 80133f6:	3e10      	subs	r6, #16
 80133f8:	e791      	b.n	801331e <_svfprintf_r+0xc2e>
 80133fa:	aa1f      	add	r2, sp, #124	; 0x7c
 80133fc:	4651      	mov	r1, sl
 80133fe:	4658      	mov	r0, fp
 8013400:	f002 fff7 	bl	80163f2 <__ssprint_r>
 8013404:	2800      	cmp	r0, #0
 8013406:	f040 80d4 	bne.w	80135b2 <_svfprintf_r+0xec2>
 801340a:	ac2c      	add	r4, sp, #176	; 0xb0
 801340c:	e7f3      	b.n	80133f6 <_svfprintf_r+0xd06>
 801340e:	aa1f      	add	r2, sp, #124	; 0x7c
 8013410:	4651      	mov	r1, sl
 8013412:	4658      	mov	r0, fp
 8013414:	f002 ffed 	bl	80163f2 <__ssprint_r>
 8013418:	2800      	cmp	r0, #0
 801341a:	f040 80ca 	bne.w	80135b2 <_svfprintf_r+0xec2>
 801341e:	ac2c      	add	r4, sp, #176	; 0xb0
 8013420:	e78b      	b.n	801333a <_svfprintf_r+0xc4a>
 8013422:	aa1f      	add	r2, sp, #124	; 0x7c
 8013424:	4651      	mov	r1, sl
 8013426:	4658      	mov	r0, fp
 8013428:	f002 ffe3 	bl	80163f2 <__ssprint_r>
 801342c:	2800      	cmp	r0, #0
 801342e:	f040 80c0 	bne.w	80135b2 <_svfprintf_r+0xec2>
 8013432:	ac2c      	add	r4, sp, #176	; 0xb0
 8013434:	e795      	b.n	8013362 <_svfprintf_r+0xc72>
 8013436:	aa1f      	add	r2, sp, #124	; 0x7c
 8013438:	4651      	mov	r1, sl
 801343a:	4658      	mov	r0, fp
 801343c:	f002 ffd9 	bl	80163f2 <__ssprint_r>
 8013440:	2800      	cmp	r0, #0
 8013442:	f040 80b6 	bne.w	80135b2 <_svfprintf_r+0xec2>
 8013446:	ac2c      	add	r4, sp, #176	; 0xb0
 8013448:	e7a1      	b.n	801338e <_svfprintf_r+0xc9e>
 801344a:	aa1f      	add	r2, sp, #124	; 0x7c
 801344c:	4651      	mov	r1, sl
 801344e:	4658      	mov	r0, fp
 8013450:	f002 ffcf 	bl	80163f2 <__ssprint_r>
 8013454:	2800      	cmp	r0, #0
 8013456:	f040 80ac 	bne.w	80135b2 <_svfprintf_r+0xec2>
 801345a:	ac2c      	add	r4, sp, #176	; 0xb0
 801345c:	e7b4      	b.n	80133c8 <_svfprintf_r+0xcd8>
 801345e:	bf00      	nop
 8013460:	08018314 	.word	0x08018314
 8013464:	08018326 	.word	0x08018326
 8013468:	9b03      	ldr	r3, [sp, #12]
 801346a:	2b01      	cmp	r3, #1
 801346c:	dc01      	bgt.n	8013472 <_svfprintf_r+0xd82>
 801346e:	07ea      	lsls	r2, r5, #31
 8013470:	d576      	bpl.n	8013560 <_svfprintf_r+0xe70>
 8013472:	2301      	movs	r3, #1
 8013474:	6063      	str	r3, [r4, #4]
 8013476:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013478:	f8c4 8000 	str.w	r8, [r4]
 801347c:	3301      	adds	r3, #1
 801347e:	9321      	str	r3, [sp, #132]	; 0x84
 8013480:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013482:	3301      	adds	r3, #1
 8013484:	2b07      	cmp	r3, #7
 8013486:	9320      	str	r3, [sp, #128]	; 0x80
 8013488:	dc36      	bgt.n	80134f8 <_svfprintf_r+0xe08>
 801348a:	3408      	adds	r4, #8
 801348c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801348e:	6023      	str	r3, [r4, #0]
 8013490:	9b08      	ldr	r3, [sp, #32]
 8013492:	6063      	str	r3, [r4, #4]
 8013494:	9a08      	ldr	r2, [sp, #32]
 8013496:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013498:	4413      	add	r3, r2
 801349a:	9321      	str	r3, [sp, #132]	; 0x84
 801349c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801349e:	3301      	adds	r3, #1
 80134a0:	2b07      	cmp	r3, #7
 80134a2:	9320      	str	r3, [sp, #128]	; 0x80
 80134a4:	dc31      	bgt.n	801350a <_svfprintf_r+0xe1a>
 80134a6:	3408      	adds	r4, #8
 80134a8:	2300      	movs	r3, #0
 80134aa:	2200      	movs	r2, #0
 80134ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80134b0:	f7f3 fe68 	bl	8007184 <__aeabi_dcmpeq>
 80134b4:	9b03      	ldr	r3, [sp, #12]
 80134b6:	1e5e      	subs	r6, r3, #1
 80134b8:	2800      	cmp	r0, #0
 80134ba:	d12f      	bne.n	801351c <_svfprintf_r+0xe2c>
 80134bc:	f108 0301 	add.w	r3, r8, #1
 80134c0:	e884 0048 	stmia.w	r4, {r3, r6}
 80134c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80134c6:	9a03      	ldr	r2, [sp, #12]
 80134c8:	3b01      	subs	r3, #1
 80134ca:	4413      	add	r3, r2
 80134cc:	9321      	str	r3, [sp, #132]	; 0x84
 80134ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80134d0:	3301      	adds	r3, #1
 80134d2:	2b07      	cmp	r3, #7
 80134d4:	9320      	str	r3, [sp, #128]	; 0x80
 80134d6:	dd4a      	ble.n	801356e <_svfprintf_r+0xe7e>
 80134d8:	aa1f      	add	r2, sp, #124	; 0x7c
 80134da:	4651      	mov	r1, sl
 80134dc:	4658      	mov	r0, fp
 80134de:	f002 ff88 	bl	80163f2 <__ssprint_r>
 80134e2:	2800      	cmp	r0, #0
 80134e4:	d165      	bne.n	80135b2 <_svfprintf_r+0xec2>
 80134e6:	ac2c      	add	r4, sp, #176	; 0xb0
 80134e8:	ab1b      	add	r3, sp, #108	; 0x6c
 80134ea:	6023      	str	r3, [r4, #0]
 80134ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80134ee:	6063      	str	r3, [r4, #4]
 80134f0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80134f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80134f4:	4413      	add	r3, r2
 80134f6:	e41c      	b.n	8012d32 <_svfprintf_r+0x642>
 80134f8:	aa1f      	add	r2, sp, #124	; 0x7c
 80134fa:	4651      	mov	r1, sl
 80134fc:	4658      	mov	r0, fp
 80134fe:	f002 ff78 	bl	80163f2 <__ssprint_r>
 8013502:	2800      	cmp	r0, #0
 8013504:	d155      	bne.n	80135b2 <_svfprintf_r+0xec2>
 8013506:	ac2c      	add	r4, sp, #176	; 0xb0
 8013508:	e7c0      	b.n	801348c <_svfprintf_r+0xd9c>
 801350a:	aa1f      	add	r2, sp, #124	; 0x7c
 801350c:	4651      	mov	r1, sl
 801350e:	4658      	mov	r0, fp
 8013510:	f002 ff6f 	bl	80163f2 <__ssprint_r>
 8013514:	2800      	cmp	r0, #0
 8013516:	d14c      	bne.n	80135b2 <_svfprintf_r+0xec2>
 8013518:	ac2c      	add	r4, sp, #176	; 0xb0
 801351a:	e7c5      	b.n	80134a8 <_svfprintf_r+0xdb8>
 801351c:	2e00      	cmp	r6, #0
 801351e:	dde3      	ble.n	80134e8 <_svfprintf_r+0xdf8>
 8013520:	4f59      	ldr	r7, [pc, #356]	; (8013688 <_svfprintf_r+0xf98>)
 8013522:	f04f 0810 	mov.w	r8, #16
 8013526:	2e10      	cmp	r6, #16
 8013528:	6027      	str	r7, [r4, #0]
 801352a:	dc04      	bgt.n	8013536 <_svfprintf_r+0xe46>
 801352c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801352e:	6066      	str	r6, [r4, #4]
 8013530:	441e      	add	r6, r3
 8013532:	9621      	str	r6, [sp, #132]	; 0x84
 8013534:	e7cb      	b.n	80134ce <_svfprintf_r+0xdde>
 8013536:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013538:	f8c4 8004 	str.w	r8, [r4, #4]
 801353c:	3310      	adds	r3, #16
 801353e:	9321      	str	r3, [sp, #132]	; 0x84
 8013540:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013542:	3301      	adds	r3, #1
 8013544:	2b07      	cmp	r3, #7
 8013546:	9320      	str	r3, [sp, #128]	; 0x80
 8013548:	dc02      	bgt.n	8013550 <_svfprintf_r+0xe60>
 801354a:	3408      	adds	r4, #8
 801354c:	3e10      	subs	r6, #16
 801354e:	e7ea      	b.n	8013526 <_svfprintf_r+0xe36>
 8013550:	aa1f      	add	r2, sp, #124	; 0x7c
 8013552:	4651      	mov	r1, sl
 8013554:	4658      	mov	r0, fp
 8013556:	f002 ff4c 	bl	80163f2 <__ssprint_r>
 801355a:	bb50      	cbnz	r0, 80135b2 <_svfprintf_r+0xec2>
 801355c:	ac2c      	add	r4, sp, #176	; 0xb0
 801355e:	e7f5      	b.n	801354c <_svfprintf_r+0xe5c>
 8013560:	2301      	movs	r3, #1
 8013562:	6063      	str	r3, [r4, #4]
 8013564:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013566:	f8c4 8000 	str.w	r8, [r4]
 801356a:	3301      	adds	r3, #1
 801356c:	e7ae      	b.n	80134cc <_svfprintf_r+0xddc>
 801356e:	3408      	adds	r4, #8
 8013570:	e7ba      	b.n	80134e8 <_svfprintf_r+0xdf8>
 8013572:	3408      	adds	r4, #8
 8013574:	f7ff bbed 	b.w	8012d52 <_svfprintf_r+0x662>
 8013578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801357a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801357c:	1a9d      	subs	r5, r3, r2
 801357e:	2d00      	cmp	r5, #0
 8013580:	f77f abea 	ble.w	8012d58 <_svfprintf_r+0x668>
 8013584:	2610      	movs	r6, #16
 8013586:	4b41      	ldr	r3, [pc, #260]	; (801368c <_svfprintf_r+0xf9c>)
 8013588:	6023      	str	r3, [r4, #0]
 801358a:	2d10      	cmp	r5, #16
 801358c:	dc1b      	bgt.n	80135c6 <_svfprintf_r+0xed6>
 801358e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013590:	6065      	str	r5, [r4, #4]
 8013592:	441d      	add	r5, r3
 8013594:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013596:	9521      	str	r5, [sp, #132]	; 0x84
 8013598:	3301      	adds	r3, #1
 801359a:	2b07      	cmp	r3, #7
 801359c:	9320      	str	r3, [sp, #128]	; 0x80
 801359e:	f77f abdb 	ble.w	8012d58 <_svfprintf_r+0x668>
 80135a2:	aa1f      	add	r2, sp, #124	; 0x7c
 80135a4:	4651      	mov	r1, sl
 80135a6:	4658      	mov	r0, fp
 80135a8:	f002 ff23 	bl	80163f2 <__ssprint_r>
 80135ac:	2800      	cmp	r0, #0
 80135ae:	f43f abd3 	beq.w	8012d58 <_svfprintf_r+0x668>
 80135b2:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80135b6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80135ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80135bc:	bf18      	it	ne
 80135be:	f04f 33ff 	movne.w	r3, #4294967295
 80135c2:	f7ff b8b9 	b.w	8012738 <_svfprintf_r+0x48>
 80135c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80135c8:	6066      	str	r6, [r4, #4]
 80135ca:	3310      	adds	r3, #16
 80135cc:	9321      	str	r3, [sp, #132]	; 0x84
 80135ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80135d0:	3301      	adds	r3, #1
 80135d2:	2b07      	cmp	r3, #7
 80135d4:	9320      	str	r3, [sp, #128]	; 0x80
 80135d6:	dc02      	bgt.n	80135de <_svfprintf_r+0xeee>
 80135d8:	3408      	adds	r4, #8
 80135da:	3d10      	subs	r5, #16
 80135dc:	e7d3      	b.n	8013586 <_svfprintf_r+0xe96>
 80135de:	aa1f      	add	r2, sp, #124	; 0x7c
 80135e0:	4651      	mov	r1, sl
 80135e2:	4658      	mov	r0, fp
 80135e4:	f002 ff05 	bl	80163f2 <__ssprint_r>
 80135e8:	2800      	cmp	r0, #0
 80135ea:	d1e2      	bne.n	80135b2 <_svfprintf_r+0xec2>
 80135ec:	ac2c      	add	r4, sp, #176	; 0xb0
 80135ee:	e7f4      	b.n	80135da <_svfprintf_r+0xeea>
 80135f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d0dd      	beq.n	80135b2 <_svfprintf_r+0xec2>
 80135f6:	aa1f      	add	r2, sp, #124	; 0x7c
 80135f8:	4651      	mov	r1, sl
 80135fa:	4658      	mov	r0, fp
 80135fc:	f002 fef9 	bl	80163f2 <__ssprint_r>
 8013600:	e7d7      	b.n	80135b2 <_svfprintf_r+0xec2>
 8013602:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013606:	4610      	mov	r0, r2
 8013608:	4619      	mov	r1, r3
 801360a:	f7f3 fded 	bl	80071e8 <__aeabi_dcmpun>
 801360e:	2800      	cmp	r0, #0
 8013610:	f43f aa44 	beq.w	8012a9c <_svfprintf_r+0x3ac>
 8013614:	4b1e      	ldr	r3, [pc, #120]	; (8013690 <_svfprintf_r+0xfa0>)
 8013616:	4a1f      	ldr	r2, [pc, #124]	; (8013694 <_svfprintf_r+0xfa4>)
 8013618:	f7ff ba34 	b.w	8012a84 <_svfprintf_r+0x394>
 801361c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801361e:	eba3 0308 	sub.w	r3, r3, r8
 8013622:	9303      	str	r3, [sp, #12]
 8013624:	f7ff bab5 	b.w	8012b92 <_svfprintf_r+0x4a2>
 8013628:	ea56 0207 	orrs.w	r2, r6, r7
 801362c:	950b      	str	r5, [sp, #44]	; 0x2c
 801362e:	f43f ac2b 	beq.w	8012e88 <_svfprintf_r+0x798>
 8013632:	2b01      	cmp	r3, #1
 8013634:	f43f ac9d 	beq.w	8012f72 <_svfprintf_r+0x882>
 8013638:	2b02      	cmp	r3, #2
 801363a:	f43f acbd 	beq.w	8012fb8 <_svfprintf_r+0x8c8>
 801363e:	ab2c      	add	r3, sp, #176	; 0xb0
 8013640:	08f1      	lsrs	r1, r6, #3
 8013642:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8013646:	08f8      	lsrs	r0, r7, #3
 8013648:	f006 0207 	and.w	r2, r6, #7
 801364c:	4607      	mov	r7, r0
 801364e:	460e      	mov	r6, r1
 8013650:	3230      	adds	r2, #48	; 0x30
 8013652:	ea56 0107 	orrs.w	r1, r6, r7
 8013656:	f103 38ff 	add.w	r8, r3, #4294967295
 801365a:	f803 2c01 	strb.w	r2, [r3, #-1]
 801365e:	f47f ac86 	bne.w	8012f6e <_svfprintf_r+0x87e>
 8013662:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013664:	07c9      	lsls	r1, r1, #31
 8013666:	d506      	bpl.n	8013676 <_svfprintf_r+0xf86>
 8013668:	2a30      	cmp	r2, #48	; 0x30
 801366a:	d004      	beq.n	8013676 <_svfprintf_r+0xf86>
 801366c:	2230      	movs	r2, #48	; 0x30
 801366e:	f808 2c01 	strb.w	r2, [r8, #-1]
 8013672:	f1a3 0802 	sub.w	r8, r3, #2
 8013676:	464e      	mov	r6, r9
 8013678:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 801367c:	eba9 0908 	sub.w	r9, r9, r8
 8013680:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8013682:	2700      	movs	r7, #0
 8013684:	f7ff bad1 	b.w	8012c2a <_svfprintf_r+0x53a>
 8013688:	08018326 	.word	0x08018326
 801368c:	08018316 	.word	0x08018316
 8013690:	080182ea 	.word	0x080182ea
 8013694:	080182ee 	.word	0x080182ee

08013698 <_vfprintf_r>:
 8013698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801369c:	b0bd      	sub	sp, #244	; 0xf4
 801369e:	4688      	mov	r8, r1
 80136a0:	4615      	mov	r5, r2
 80136a2:	461c      	mov	r4, r3
 80136a4:	461f      	mov	r7, r3
 80136a6:	4683      	mov	fp, r0
 80136a8:	f002 fb04 	bl	8015cb4 <_localeconv_r>
 80136ac:	6803      	ldr	r3, [r0, #0]
 80136ae:	930d      	str	r3, [sp, #52]	; 0x34
 80136b0:	4618      	mov	r0, r3
 80136b2:	f7f3 f93f 	bl	8006934 <strlen>
 80136b6:	9009      	str	r0, [sp, #36]	; 0x24
 80136b8:	f1bb 0f00 	cmp.w	fp, #0
 80136bc:	d005      	beq.n	80136ca <_vfprintf_r+0x32>
 80136be:	f8db 3018 	ldr.w	r3, [fp, #24]
 80136c2:	b913      	cbnz	r3, 80136ca <_vfprintf_r+0x32>
 80136c4:	4658      	mov	r0, fp
 80136c6:	f002 f937 	bl	8015938 <__sinit>
 80136ca:	4b99      	ldr	r3, [pc, #612]	; (8013930 <_vfprintf_r+0x298>)
 80136cc:	4598      	cmp	r8, r3
 80136ce:	d137      	bne.n	8013740 <_vfprintf_r+0xa8>
 80136d0:	f8db 8004 	ldr.w	r8, [fp, #4]
 80136d4:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 80136d8:	07d8      	lsls	r0, r3, #31
 80136da:	d407      	bmi.n	80136ec <_vfprintf_r+0x54>
 80136dc:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80136e0:	0599      	lsls	r1, r3, #22
 80136e2:	d403      	bmi.n	80136ec <_vfprintf_r+0x54>
 80136e4:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 80136e8:	f7fe fabe 	bl	8011c68 <__retarget_lock_acquire_recursive>
 80136ec:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
 80136f0:	049a      	lsls	r2, r3, #18
 80136f2:	d409      	bmi.n	8013708 <_vfprintf_r+0x70>
 80136f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80136f8:	f8a8 300c 	strh.w	r3, [r8, #12]
 80136fc:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 8013700:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013704:	f8c8 3064 	str.w	r3, [r8, #100]	; 0x64
 8013708:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 801370c:	071e      	lsls	r6, r3, #28
 801370e:	d502      	bpl.n	8013716 <_vfprintf_r+0x7e>
 8013710:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013714:	bb03      	cbnz	r3, 8013758 <_vfprintf_r+0xc0>
 8013716:	4641      	mov	r1, r8
 8013718:	4658      	mov	r0, fp
 801371a:	f001 f8a9 	bl	8014870 <__swsetup_r>
 801371e:	b1d8      	cbz	r0, 8013758 <_vfprintf_r+0xc0>
 8013720:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 8013724:	07dd      	lsls	r5, r3, #31
 8013726:	d407      	bmi.n	8013738 <_vfprintf_r+0xa0>
 8013728:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 801372c:	059c      	lsls	r4, r3, #22
 801372e:	d403      	bmi.n	8013738 <_vfprintf_r+0xa0>
 8013730:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 8013734:	f7fe fa9a 	bl	8011c6c <__retarget_lock_release_recursive>
 8013738:	f04f 33ff 	mov.w	r3, #4294967295
 801373c:	930a      	str	r3, [sp, #40]	; 0x28
 801373e:	e026      	b.n	801378e <_vfprintf_r+0xf6>
 8013740:	4b7c      	ldr	r3, [pc, #496]	; (8013934 <_vfprintf_r+0x29c>)
 8013742:	4598      	cmp	r8, r3
 8013744:	d102      	bne.n	801374c <_vfprintf_r+0xb4>
 8013746:	f8db 8008 	ldr.w	r8, [fp, #8]
 801374a:	e7c3      	b.n	80136d4 <_vfprintf_r+0x3c>
 801374c:	4b7a      	ldr	r3, [pc, #488]	; (8013938 <_vfprintf_r+0x2a0>)
 801374e:	4598      	cmp	r8, r3
 8013750:	bf08      	it	eq
 8013752:	f8db 800c 	ldreq.w	r8, [fp, #12]
 8013756:	e7bd      	b.n	80136d4 <_vfprintf_r+0x3c>
 8013758:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 801375c:	f003 021a 	and.w	r2, r3, #26
 8013760:	2a0a      	cmp	r2, #10
 8013762:	d118      	bne.n	8013796 <_vfprintf_r+0xfe>
 8013764:	f9b8 200e 	ldrsh.w	r2, [r8, #14]
 8013768:	2a00      	cmp	r2, #0
 801376a:	db14      	blt.n	8013796 <_vfprintf_r+0xfe>
 801376c:	f8d8 2064 	ldr.w	r2, [r8, #100]	; 0x64
 8013770:	07d0      	lsls	r0, r2, #31
 8013772:	d405      	bmi.n	8013780 <_vfprintf_r+0xe8>
 8013774:	0599      	lsls	r1, r3, #22
 8013776:	d403      	bmi.n	8013780 <_vfprintf_r+0xe8>
 8013778:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 801377c:	f7fe fa76 	bl	8011c6c <__retarget_lock_release_recursive>
 8013780:	4623      	mov	r3, r4
 8013782:	462a      	mov	r2, r5
 8013784:	4641      	mov	r1, r8
 8013786:	4658      	mov	r0, fp
 8013788:	f000 ffc2 	bl	8014710 <__sbprintf>
 801378c:	900a      	str	r0, [sp, #40]	; 0x28
 801378e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013790:	b03d      	add	sp, #244	; 0xf4
 8013792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013796:	ed9f 7b64 	vldr	d7, [pc, #400]	; 8013928 <_vfprintf_r+0x290>
 801379a:	ed8d 7b06 	vstr	d7, [sp, #24]
 801379e:	2300      	movs	r3, #0
 80137a0:	ac2c      	add	r4, sp, #176	; 0xb0
 80137a2:	941f      	str	r4, [sp, #124]	; 0x7c
 80137a4:	9321      	str	r3, [sp, #132]	; 0x84
 80137a6:	9320      	str	r3, [sp, #128]	; 0x80
 80137a8:	9505      	str	r5, [sp, #20]
 80137aa:	9303      	str	r3, [sp, #12]
 80137ac:	9311      	str	r3, [sp, #68]	; 0x44
 80137ae:	9310      	str	r3, [sp, #64]	; 0x40
 80137b0:	930a      	str	r3, [sp, #40]	; 0x28
 80137b2:	9d05      	ldr	r5, [sp, #20]
 80137b4:	462b      	mov	r3, r5
 80137b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80137ba:	b112      	cbz	r2, 80137c2 <_vfprintf_r+0x12a>
 80137bc:	2a25      	cmp	r2, #37	; 0x25
 80137be:	f040 8083 	bne.w	80138c8 <_vfprintf_r+0x230>
 80137c2:	9b05      	ldr	r3, [sp, #20]
 80137c4:	1aee      	subs	r6, r5, r3
 80137c6:	d00d      	beq.n	80137e4 <_vfprintf_r+0x14c>
 80137c8:	e884 0048 	stmia.w	r4, {r3, r6}
 80137cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80137ce:	4433      	add	r3, r6
 80137d0:	9321      	str	r3, [sp, #132]	; 0x84
 80137d2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80137d4:	3301      	adds	r3, #1
 80137d6:	2b07      	cmp	r3, #7
 80137d8:	9320      	str	r3, [sp, #128]	; 0x80
 80137da:	dc77      	bgt.n	80138cc <_vfprintf_r+0x234>
 80137dc:	3408      	adds	r4, #8
 80137de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80137e0:	4433      	add	r3, r6
 80137e2:	930a      	str	r3, [sp, #40]	; 0x28
 80137e4:	782b      	ldrb	r3, [r5, #0]
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	f000 8739 	beq.w	801465e <_vfprintf_r+0xfc6>
 80137ec:	2300      	movs	r3, #0
 80137ee:	1c69      	adds	r1, r5, #1
 80137f0:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80137f4:	461a      	mov	r2, r3
 80137f6:	f04f 3aff 	mov.w	sl, #4294967295
 80137fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80137fc:	461d      	mov	r5, r3
 80137fe:	200a      	movs	r0, #10
 8013800:	1c4e      	adds	r6, r1, #1
 8013802:	7809      	ldrb	r1, [r1, #0]
 8013804:	9605      	str	r6, [sp, #20]
 8013806:	9102      	str	r1, [sp, #8]
 8013808:	9902      	ldr	r1, [sp, #8]
 801380a:	3920      	subs	r1, #32
 801380c:	2958      	cmp	r1, #88	; 0x58
 801380e:	f200 841d 	bhi.w	801404c <_vfprintf_r+0x9b4>
 8013812:	e8df f011 	tbh	[pc, r1, lsl #1]
 8013816:	00b3      	.short	0x00b3
 8013818:	041b041b 	.word	0x041b041b
 801381c:	041b00b8 	.word	0x041b00b8
 8013820:	041b041b 	.word	0x041b041b
 8013824:	041b041b 	.word	0x041b041b
 8013828:	00bb041b 	.word	0x00bb041b
 801382c:	041b0065 	.word	0x041b0065
 8013830:	00c700c4 	.word	0x00c700c4
 8013834:	00e4041b 	.word	0x00e4041b
 8013838:	00e700e7 	.word	0x00e700e7
 801383c:	00e700e7 	.word	0x00e700e7
 8013840:	00e700e7 	.word	0x00e700e7
 8013844:	00e700e7 	.word	0x00e700e7
 8013848:	041b00e7 	.word	0x041b00e7
 801384c:	041b041b 	.word	0x041b041b
 8013850:	041b041b 	.word	0x041b041b
 8013854:	041b041b 	.word	0x041b041b
 8013858:	041b041b 	.word	0x041b041b
 801385c:	011b041b 	.word	0x011b041b
 8013860:	041b0131 	.word	0x041b0131
 8013864:	041b0131 	.word	0x041b0131
 8013868:	041b041b 	.word	0x041b041b
 801386c:	00fa041b 	.word	0x00fa041b
 8013870:	041b041b 	.word	0x041b041b
 8013874:	041b0346 	.word	0x041b0346
 8013878:	041b041b 	.word	0x041b041b
 801387c:	041b041b 	.word	0x041b041b
 8013880:	041b03ad 	.word	0x041b03ad
 8013884:	0093041b 	.word	0x0093041b
 8013888:	041b041b 	.word	0x041b041b
 801388c:	041b041b 	.word	0x041b041b
 8013890:	041b041b 	.word	0x041b041b
 8013894:	041b041b 	.word	0x041b041b
 8013898:	041b041b 	.word	0x041b041b
 801389c:	006b010d 	.word	0x006b010d
 80138a0:	01310131 	.word	0x01310131
 80138a4:	00fd0131 	.word	0x00fd0131
 80138a8:	041b006b 	.word	0x041b006b
 80138ac:	0100041b 	.word	0x0100041b
 80138b0:	0328041b 	.word	0x0328041b
 80138b4:	037c0348 	.word	0x037c0348
 80138b8:	041b0107 	.word	0x041b0107
 80138bc:	041b038d 	.word	0x041b038d
 80138c0:	041b03af 	.word	0x041b03af
 80138c4:	03c7041b 	.word	0x03c7041b
 80138c8:	461d      	mov	r5, r3
 80138ca:	e773      	b.n	80137b4 <_vfprintf_r+0x11c>
 80138cc:	aa1f      	add	r2, sp, #124	; 0x7c
 80138ce:	4641      	mov	r1, r8
 80138d0:	4658      	mov	r0, fp
 80138d2:	f002 fe08 	bl	80164e6 <__sprint_r>
 80138d6:	2800      	cmp	r0, #0
 80138d8:	f040 8699 	bne.w	801460e <_vfprintf_r+0xf76>
 80138dc:	ac2c      	add	r4, sp, #176	; 0xb0
 80138de:	e77e      	b.n	80137de <_vfprintf_r+0x146>
 80138e0:	2301      	movs	r3, #1
 80138e2:	222b      	movs	r2, #43	; 0x2b
 80138e4:	9905      	ldr	r1, [sp, #20]
 80138e6:	e78b      	b.n	8013800 <_vfprintf_r+0x168>
 80138e8:	460f      	mov	r7, r1
 80138ea:	e7fb      	b.n	80138e4 <_vfprintf_r+0x24c>
 80138ec:	b10b      	cbz	r3, 80138f2 <_vfprintf_r+0x25a>
 80138ee:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80138f2:	06aa      	lsls	r2, r5, #26
 80138f4:	f140 80b0 	bpl.w	8013a58 <_vfprintf_r+0x3c0>
 80138f8:	3707      	adds	r7, #7
 80138fa:	f027 0707 	bic.w	r7, r7, #7
 80138fe:	f107 0308 	add.w	r3, r7, #8
 8013902:	e9d7 6700 	ldrd	r6, r7, [r7]
 8013906:	9304      	str	r3, [sp, #16]
 8013908:	2e00      	cmp	r6, #0
 801390a:	f177 0300 	sbcs.w	r3, r7, #0
 801390e:	da06      	bge.n	801391e <_vfprintf_r+0x286>
 8013910:	4276      	negs	r6, r6
 8013912:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8013916:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 801391a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 801391e:	2301      	movs	r3, #1
 8013920:	e2d0      	b.n	8013ec4 <_vfprintf_r+0x82c>
 8013922:	bf00      	nop
 8013924:	f3af 8000 	nop.w
	...
 8013930:	08018384 	.word	0x08018384
 8013934:	080183a4 	.word	0x080183a4
 8013938:	08018364 	.word	0x08018364
 801393c:	b10b      	cbz	r3, 8013942 <_vfprintf_r+0x2aa>
 801393e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8013942:	4ba2      	ldr	r3, [pc, #648]	; (8013bcc <_vfprintf_r+0x534>)
 8013944:	9311      	str	r3, [sp, #68]	; 0x44
 8013946:	06a9      	lsls	r1, r5, #26
 8013948:	f140 8331 	bpl.w	8013fae <_vfprintf_r+0x916>
 801394c:	3707      	adds	r7, #7
 801394e:	f027 0707 	bic.w	r7, r7, #7
 8013952:	f107 0308 	add.w	r3, r7, #8
 8013956:	e9d7 6700 	ldrd	r6, r7, [r7]
 801395a:	9304      	str	r3, [sp, #16]
 801395c:	07eb      	lsls	r3, r5, #31
 801395e:	d50b      	bpl.n	8013978 <_vfprintf_r+0x2e0>
 8013960:	ea56 0307 	orrs.w	r3, r6, r7
 8013964:	d008      	beq.n	8013978 <_vfprintf_r+0x2e0>
 8013966:	2330      	movs	r3, #48	; 0x30
 8013968:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 801396c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8013970:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8013974:	f045 0502 	orr.w	r5, r5, #2
 8013978:	2302      	movs	r3, #2
 801397a:	e2a0      	b.n	8013ebe <_vfprintf_r+0x826>
 801397c:	2a00      	cmp	r2, #0
 801397e:	d1b1      	bne.n	80138e4 <_vfprintf_r+0x24c>
 8013980:	2301      	movs	r3, #1
 8013982:	2220      	movs	r2, #32
 8013984:	e7ae      	b.n	80138e4 <_vfprintf_r+0x24c>
 8013986:	f045 0501 	orr.w	r5, r5, #1
 801398a:	e7ab      	b.n	80138e4 <_vfprintf_r+0x24c>
 801398c:	683e      	ldr	r6, [r7, #0]
 801398e:	960b      	str	r6, [sp, #44]	; 0x2c
 8013990:	2e00      	cmp	r6, #0
 8013992:	f107 0104 	add.w	r1, r7, #4
 8013996:	daa7      	bge.n	80138e8 <_vfprintf_r+0x250>
 8013998:	4276      	negs	r6, r6
 801399a:	960b      	str	r6, [sp, #44]	; 0x2c
 801399c:	460f      	mov	r7, r1
 801399e:	f045 0504 	orr.w	r5, r5, #4
 80139a2:	e79f      	b.n	80138e4 <_vfprintf_r+0x24c>
 80139a4:	9905      	ldr	r1, [sp, #20]
 80139a6:	1c4e      	adds	r6, r1, #1
 80139a8:	7809      	ldrb	r1, [r1, #0]
 80139aa:	9102      	str	r1, [sp, #8]
 80139ac:	292a      	cmp	r1, #42	; 0x2a
 80139ae:	d010      	beq.n	80139d2 <_vfprintf_r+0x33a>
 80139b0:	f04f 0a00 	mov.w	sl, #0
 80139b4:	9605      	str	r6, [sp, #20]
 80139b6:	9902      	ldr	r1, [sp, #8]
 80139b8:	3930      	subs	r1, #48	; 0x30
 80139ba:	2909      	cmp	r1, #9
 80139bc:	f63f af24 	bhi.w	8013808 <_vfprintf_r+0x170>
 80139c0:	fb00 1a0a 	mla	sl, r0, sl, r1
 80139c4:	9905      	ldr	r1, [sp, #20]
 80139c6:	460e      	mov	r6, r1
 80139c8:	f816 1b01 	ldrb.w	r1, [r6], #1
 80139cc:	9102      	str	r1, [sp, #8]
 80139ce:	9605      	str	r6, [sp, #20]
 80139d0:	e7f1      	b.n	80139b6 <_vfprintf_r+0x31e>
 80139d2:	6839      	ldr	r1, [r7, #0]
 80139d4:	9605      	str	r6, [sp, #20]
 80139d6:	ea41 7ae1 	orr.w	sl, r1, r1, asr #31
 80139da:	3704      	adds	r7, #4
 80139dc:	e782      	b.n	80138e4 <_vfprintf_r+0x24c>
 80139de:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80139e2:	e77f      	b.n	80138e4 <_vfprintf_r+0x24c>
 80139e4:	2100      	movs	r1, #0
 80139e6:	910b      	str	r1, [sp, #44]	; 0x2c
 80139e8:	9902      	ldr	r1, [sp, #8]
 80139ea:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80139ec:	3930      	subs	r1, #48	; 0x30
 80139ee:	fb00 1106 	mla	r1, r0, r6, r1
 80139f2:	910b      	str	r1, [sp, #44]	; 0x2c
 80139f4:	9905      	ldr	r1, [sp, #20]
 80139f6:	460e      	mov	r6, r1
 80139f8:	f816 1b01 	ldrb.w	r1, [r6], #1
 80139fc:	9102      	str	r1, [sp, #8]
 80139fe:	9902      	ldr	r1, [sp, #8]
 8013a00:	9605      	str	r6, [sp, #20]
 8013a02:	3930      	subs	r1, #48	; 0x30
 8013a04:	2909      	cmp	r1, #9
 8013a06:	d9ef      	bls.n	80139e8 <_vfprintf_r+0x350>
 8013a08:	e6fe      	b.n	8013808 <_vfprintf_r+0x170>
 8013a0a:	f045 0508 	orr.w	r5, r5, #8
 8013a0e:	e769      	b.n	80138e4 <_vfprintf_r+0x24c>
 8013a10:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8013a14:	e766      	b.n	80138e4 <_vfprintf_r+0x24c>
 8013a16:	9905      	ldr	r1, [sp, #20]
 8013a18:	7809      	ldrb	r1, [r1, #0]
 8013a1a:	296c      	cmp	r1, #108	; 0x6c
 8013a1c:	d105      	bne.n	8013a2a <_vfprintf_r+0x392>
 8013a1e:	9905      	ldr	r1, [sp, #20]
 8013a20:	3101      	adds	r1, #1
 8013a22:	9105      	str	r1, [sp, #20]
 8013a24:	f045 0520 	orr.w	r5, r5, #32
 8013a28:	e75c      	b.n	80138e4 <_vfprintf_r+0x24c>
 8013a2a:	f045 0510 	orr.w	r5, r5, #16
 8013a2e:	e759      	b.n	80138e4 <_vfprintf_r+0x24c>
 8013a30:	1d3b      	adds	r3, r7, #4
 8013a32:	9304      	str	r3, [sp, #16]
 8013a34:	2600      	movs	r6, #0
 8013a36:	683b      	ldr	r3, [r7, #0]
 8013a38:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8013a3c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8013a40:	f04f 0a01 	mov.w	sl, #1
 8013a44:	9608      	str	r6, [sp, #32]
 8013a46:	f10d 0988 	add.w	r9, sp, #136	; 0x88
 8013a4a:	e11e      	b.n	8013c8a <_vfprintf_r+0x5f2>
 8013a4c:	b10b      	cbz	r3, 8013a52 <_vfprintf_r+0x3ba>
 8013a4e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8013a52:	f045 0510 	orr.w	r5, r5, #16
 8013a56:	e74c      	b.n	80138f2 <_vfprintf_r+0x25a>
 8013a58:	f015 0f10 	tst.w	r5, #16
 8013a5c:	f107 0304 	add.w	r3, r7, #4
 8013a60:	d003      	beq.n	8013a6a <_vfprintf_r+0x3d2>
 8013a62:	683e      	ldr	r6, [r7, #0]
 8013a64:	9304      	str	r3, [sp, #16]
 8013a66:	17f7      	asrs	r7, r6, #31
 8013a68:	e74e      	b.n	8013908 <_vfprintf_r+0x270>
 8013a6a:	683e      	ldr	r6, [r7, #0]
 8013a6c:	9304      	str	r3, [sp, #16]
 8013a6e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8013a72:	bf18      	it	ne
 8013a74:	b236      	sxthne	r6, r6
 8013a76:	e7f6      	b.n	8013a66 <_vfprintf_r+0x3ce>
 8013a78:	b10b      	cbz	r3, 8013a7e <_vfprintf_r+0x3e6>
 8013a7a:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8013a7e:	3707      	adds	r7, #7
 8013a80:	f027 0707 	bic.w	r7, r7, #7
 8013a84:	f107 0308 	add.w	r3, r7, #8
 8013a88:	9304      	str	r3, [sp, #16]
 8013a8a:	ed97 7b00 	vldr	d7, [r7]
 8013a8e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013a92:	9b06      	ldr	r3, [sp, #24]
 8013a94:	9312      	str	r3, [sp, #72]	; 0x48
 8013a96:	9b07      	ldr	r3, [sp, #28]
 8013a98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013a9c:	9313      	str	r3, [sp, #76]	; 0x4c
 8013a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8013aa2:	4b4b      	ldr	r3, [pc, #300]	; (8013bd0 <_vfprintf_r+0x538>)
 8013aa4:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8013aa8:	f7f3 fb9e 	bl	80071e8 <__aeabi_dcmpun>
 8013aac:	2800      	cmp	r0, #0
 8013aae:	f040 85e3 	bne.w	8014678 <_vfprintf_r+0xfe0>
 8013ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8013ab6:	4b46      	ldr	r3, [pc, #280]	; (8013bd0 <_vfprintf_r+0x538>)
 8013ab8:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8013abc:	f7f3 fb76 	bl	80071ac <__aeabi_dcmple>
 8013ac0:	2800      	cmp	r0, #0
 8013ac2:	f040 85d9 	bne.w	8014678 <_vfprintf_r+0xfe0>
 8013ac6:	2200      	movs	r2, #0
 8013ac8:	2300      	movs	r3, #0
 8013aca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013ace:	f7f3 fb63 	bl	8007198 <__aeabi_dcmplt>
 8013ad2:	b110      	cbz	r0, 8013ada <_vfprintf_r+0x442>
 8013ad4:	232d      	movs	r3, #45	; 0x2d
 8013ad6:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8013ada:	4b3e      	ldr	r3, [pc, #248]	; (8013bd4 <_vfprintf_r+0x53c>)
 8013adc:	4a3e      	ldr	r2, [pc, #248]	; (8013bd8 <_vfprintf_r+0x540>)
 8013ade:	9902      	ldr	r1, [sp, #8]
 8013ae0:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8013ae4:	2947      	cmp	r1, #71	; 0x47
 8013ae6:	bfcc      	ite	gt
 8013ae8:	4691      	movgt	r9, r2
 8013aea:	4699      	movle	r9, r3
 8013aec:	f04f 0a03 	mov.w	sl, #3
 8013af0:	2600      	movs	r6, #0
 8013af2:	9608      	str	r6, [sp, #32]
 8013af4:	e0c9      	b.n	8013c8a <_vfprintf_r+0x5f2>
 8013af6:	f1ba 3fff 	cmp.w	sl, #4294967295
 8013afa:	d022      	beq.n	8013b42 <_vfprintf_r+0x4aa>
 8013afc:	9b02      	ldr	r3, [sp, #8]
 8013afe:	f023 0320 	bic.w	r3, r3, #32
 8013b02:	2b47      	cmp	r3, #71	; 0x47
 8013b04:	d104      	bne.n	8013b10 <_vfprintf_r+0x478>
 8013b06:	f1ba 0f00 	cmp.w	sl, #0
 8013b0a:	bf08      	it	eq
 8013b0c:	f04f 0a01 	moveq.w	sl, #1
 8013b10:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8013b14:	9314      	str	r3, [sp, #80]	; 0x50
 8013b16:	9b07      	ldr	r3, [sp, #28]
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	da15      	bge.n	8013b48 <_vfprintf_r+0x4b0>
 8013b1c:	9b06      	ldr	r3, [sp, #24]
 8013b1e:	930e      	str	r3, [sp, #56]	; 0x38
 8013b20:	9b07      	ldr	r3, [sp, #28]
 8013b22:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013b26:	930f      	str	r3, [sp, #60]	; 0x3c
 8013b28:	232d      	movs	r3, #45	; 0x2d
 8013b2a:	930c      	str	r3, [sp, #48]	; 0x30
 8013b2c:	9b02      	ldr	r3, [sp, #8]
 8013b2e:	f023 0720 	bic.w	r7, r3, #32
 8013b32:	2f46      	cmp	r7, #70	; 0x46
 8013b34:	d00e      	beq.n	8013b54 <_vfprintf_r+0x4bc>
 8013b36:	2f45      	cmp	r7, #69	; 0x45
 8013b38:	d146      	bne.n	8013bc8 <_vfprintf_r+0x530>
 8013b3a:	f10a 0601 	add.w	r6, sl, #1
 8013b3e:	2102      	movs	r1, #2
 8013b40:	e00a      	b.n	8013b58 <_vfprintf_r+0x4c0>
 8013b42:	f04f 0a06 	mov.w	sl, #6
 8013b46:	e7e3      	b.n	8013b10 <_vfprintf_r+0x478>
 8013b48:	ed9d 7b06 	vldr	d7, [sp, #24]
 8013b4c:	2300      	movs	r3, #0
 8013b4e:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8013b52:	e7ea      	b.n	8013b2a <_vfprintf_r+0x492>
 8013b54:	4656      	mov	r6, sl
 8013b56:	2103      	movs	r1, #3
 8013b58:	ab1d      	add	r3, sp, #116	; 0x74
 8013b5a:	9301      	str	r3, [sp, #4]
 8013b5c:	ab1a      	add	r3, sp, #104	; 0x68
 8013b5e:	9300      	str	r3, [sp, #0]
 8013b60:	4632      	mov	r2, r6
 8013b62:	ab19      	add	r3, sp, #100	; 0x64
 8013b64:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8013b68:	4658      	mov	r0, fp
 8013b6a:	f000 fff1 	bl	8014b50 <_dtoa_r>
 8013b6e:	2f47      	cmp	r7, #71	; 0x47
 8013b70:	4681      	mov	r9, r0
 8013b72:	d102      	bne.n	8013b7a <_vfprintf_r+0x4e2>
 8013b74:	07eb      	lsls	r3, r5, #31
 8013b76:	f140 858c 	bpl.w	8014692 <_vfprintf_r+0xffa>
 8013b7a:	eb09 0306 	add.w	r3, r9, r6
 8013b7e:	2f46      	cmp	r7, #70	; 0x46
 8013b80:	9303      	str	r3, [sp, #12]
 8013b82:	d111      	bne.n	8013ba8 <_vfprintf_r+0x510>
 8013b84:	f899 3000 	ldrb.w	r3, [r9]
 8013b88:	2b30      	cmp	r3, #48	; 0x30
 8013b8a:	d109      	bne.n	8013ba0 <_vfprintf_r+0x508>
 8013b8c:	2200      	movs	r2, #0
 8013b8e:	2300      	movs	r3, #0
 8013b90:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8013b94:	f7f3 faf6 	bl	8007184 <__aeabi_dcmpeq>
 8013b98:	b910      	cbnz	r0, 8013ba0 <_vfprintf_r+0x508>
 8013b9a:	f1c6 0601 	rsb	r6, r6, #1
 8013b9e:	9619      	str	r6, [sp, #100]	; 0x64
 8013ba0:	9a03      	ldr	r2, [sp, #12]
 8013ba2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013ba4:	441a      	add	r2, r3
 8013ba6:	9203      	str	r2, [sp, #12]
 8013ba8:	2200      	movs	r2, #0
 8013baa:	2300      	movs	r3, #0
 8013bac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8013bb0:	f7f3 fae8 	bl	8007184 <__aeabi_dcmpeq>
 8013bb4:	b990      	cbnz	r0, 8013bdc <_vfprintf_r+0x544>
 8013bb6:	2230      	movs	r2, #48	; 0x30
 8013bb8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013bba:	9903      	ldr	r1, [sp, #12]
 8013bbc:	4299      	cmp	r1, r3
 8013bbe:	d90f      	bls.n	8013be0 <_vfprintf_r+0x548>
 8013bc0:	1c59      	adds	r1, r3, #1
 8013bc2:	911d      	str	r1, [sp, #116]	; 0x74
 8013bc4:	701a      	strb	r2, [r3, #0]
 8013bc6:	e7f7      	b.n	8013bb8 <_vfprintf_r+0x520>
 8013bc8:	4656      	mov	r6, sl
 8013bca:	e7b8      	b.n	8013b3e <_vfprintf_r+0x4a6>
 8013bcc:	080182f2 	.word	0x080182f2
 8013bd0:	7fefffff 	.word	0x7fefffff
 8013bd4:	080182e2 	.word	0x080182e2
 8013bd8:	080182e6 	.word	0x080182e6
 8013bdc:	9b03      	ldr	r3, [sp, #12]
 8013bde:	931d      	str	r3, [sp, #116]	; 0x74
 8013be0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013be2:	2f47      	cmp	r7, #71	; 0x47
 8013be4:	eba3 0309 	sub.w	r3, r3, r9
 8013be8:	9303      	str	r3, [sp, #12]
 8013bea:	f040 80f8 	bne.w	8013dde <_vfprintf_r+0x746>
 8013bee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013bf0:	1cdf      	adds	r7, r3, #3
 8013bf2:	db02      	blt.n	8013bfa <_vfprintf_r+0x562>
 8013bf4:	459a      	cmp	sl, r3
 8013bf6:	f280 811f 	bge.w	8013e38 <_vfprintf_r+0x7a0>
 8013bfa:	9b02      	ldr	r3, [sp, #8]
 8013bfc:	3b02      	subs	r3, #2
 8013bfe:	9302      	str	r3, [sp, #8]
 8013c00:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8013c02:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8013c06:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 8013c0a:	1e53      	subs	r3, r2, #1
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	9319      	str	r3, [sp, #100]	; 0x64
 8013c10:	bfb6      	itet	lt
 8013c12:	f1c2 0301 	rsblt	r3, r2, #1
 8013c16:	222b      	movge	r2, #43	; 0x2b
 8013c18:	222d      	movlt	r2, #45	; 0x2d
 8013c1a:	2b09      	cmp	r3, #9
 8013c1c:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8013c20:	f340 80fa 	ble.w	8013e18 <_vfprintf_r+0x780>
 8013c24:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8013c28:	260a      	movs	r6, #10
 8013c2a:	fb93 f0f6 	sdiv	r0, r3, r6
 8013c2e:	fb06 3310 	mls	r3, r6, r0, r3
 8013c32:	3330      	adds	r3, #48	; 0x30
 8013c34:	2809      	cmp	r0, #9
 8013c36:	f802 3c01 	strb.w	r3, [r2, #-1]
 8013c3a:	f102 31ff 	add.w	r1, r2, #4294967295
 8013c3e:	4603      	mov	r3, r0
 8013c40:	f300 80e3 	bgt.w	8013e0a <_vfprintf_r+0x772>
 8013c44:	3330      	adds	r3, #48	; 0x30
 8013c46:	f801 3c01 	strb.w	r3, [r1, #-1]
 8013c4a:	3a02      	subs	r2, #2
 8013c4c:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8013c50:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8013c54:	4282      	cmp	r2, r0
 8013c56:	4619      	mov	r1, r3
 8013c58:	f0c0 80d9 	bcc.w	8013e0e <_vfprintf_r+0x776>
 8013c5c:	9a03      	ldr	r2, [sp, #12]
 8013c5e:	ab1b      	add	r3, sp, #108	; 0x6c
 8013c60:	1acb      	subs	r3, r1, r3
 8013c62:	2a01      	cmp	r2, #1
 8013c64:	9310      	str	r3, [sp, #64]	; 0x40
 8013c66:	eb03 0a02 	add.w	sl, r3, r2
 8013c6a:	dc03      	bgt.n	8013c74 <_vfprintf_r+0x5dc>
 8013c6c:	f015 0301 	ands.w	r3, r5, #1
 8013c70:	9308      	str	r3, [sp, #32]
 8013c72:	d003      	beq.n	8013c7c <_vfprintf_r+0x5e4>
 8013c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c76:	449a      	add	sl, r3
 8013c78:	2300      	movs	r3, #0
 8013c7a:	9308      	str	r3, [sp, #32]
 8013c7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c7e:	b113      	cbz	r3, 8013c86 <_vfprintf_r+0x5ee>
 8013c80:	232d      	movs	r3, #45	; 0x2d
 8013c82:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8013c86:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8013c88:	2600      	movs	r6, #0
 8013c8a:	4556      	cmp	r6, sl
 8013c8c:	4633      	mov	r3, r6
 8013c8e:	bfb8      	it	lt
 8013c90:	4653      	movlt	r3, sl
 8013c92:	930c      	str	r3, [sp, #48]	; 0x30
 8013c94:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8013c98:	b113      	cbz	r3, 8013ca0 <_vfprintf_r+0x608>
 8013c9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c9c:	3301      	adds	r3, #1
 8013c9e:	930c      	str	r3, [sp, #48]	; 0x30
 8013ca0:	f015 0302 	ands.w	r3, r5, #2
 8013ca4:	9314      	str	r3, [sp, #80]	; 0x50
 8013ca6:	bf1e      	ittt	ne
 8013ca8:	9b0c      	ldrne	r3, [sp, #48]	; 0x30
 8013caa:	3302      	addne	r3, #2
 8013cac:	930c      	strne	r3, [sp, #48]	; 0x30
 8013cae:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8013cb2:	9315      	str	r3, [sp, #84]	; 0x54
 8013cb4:	d114      	bne.n	8013ce0 <_vfprintf_r+0x648>
 8013cb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013cb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013cba:	1a9f      	subs	r7, r3, r2
 8013cbc:	2f00      	cmp	r7, #0
 8013cbe:	dd0f      	ble.n	8013ce0 <_vfprintf_r+0x648>
 8013cc0:	4ba8      	ldr	r3, [pc, #672]	; (8013f64 <_vfprintf_r+0x8cc>)
 8013cc2:	6023      	str	r3, [r4, #0]
 8013cc4:	2f10      	cmp	r7, #16
 8013cc6:	f300 81d3 	bgt.w	8014070 <_vfprintf_r+0x9d8>
 8013cca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013ccc:	6067      	str	r7, [r4, #4]
 8013cce:	441f      	add	r7, r3
 8013cd0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013cd2:	9721      	str	r7, [sp, #132]	; 0x84
 8013cd4:	3301      	adds	r3, #1
 8013cd6:	2b07      	cmp	r3, #7
 8013cd8:	9320      	str	r3, [sp, #128]	; 0x80
 8013cda:	f300 81e0 	bgt.w	801409e <_vfprintf_r+0xa06>
 8013cde:	3408      	adds	r4, #8
 8013ce0:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8013ce4:	b173      	cbz	r3, 8013d04 <_vfprintf_r+0x66c>
 8013ce6:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8013cea:	6023      	str	r3, [r4, #0]
 8013cec:	2301      	movs	r3, #1
 8013cee:	6063      	str	r3, [r4, #4]
 8013cf0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013cf2:	3301      	adds	r3, #1
 8013cf4:	9321      	str	r3, [sp, #132]	; 0x84
 8013cf6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013cf8:	3301      	adds	r3, #1
 8013cfa:	2b07      	cmp	r3, #7
 8013cfc:	9320      	str	r3, [sp, #128]	; 0x80
 8013cfe:	f300 81d8 	bgt.w	80140b2 <_vfprintf_r+0xa1a>
 8013d02:	3408      	adds	r4, #8
 8013d04:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013d06:	b16b      	cbz	r3, 8013d24 <_vfprintf_r+0x68c>
 8013d08:	ab18      	add	r3, sp, #96	; 0x60
 8013d0a:	6023      	str	r3, [r4, #0]
 8013d0c:	2302      	movs	r3, #2
 8013d0e:	6063      	str	r3, [r4, #4]
 8013d10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013d12:	3302      	adds	r3, #2
 8013d14:	9321      	str	r3, [sp, #132]	; 0x84
 8013d16:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013d18:	3301      	adds	r3, #1
 8013d1a:	2b07      	cmp	r3, #7
 8013d1c:	9320      	str	r3, [sp, #128]	; 0x80
 8013d1e:	f300 81d2 	bgt.w	80140c6 <_vfprintf_r+0xa2e>
 8013d22:	3408      	adds	r4, #8
 8013d24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013d26:	2b80      	cmp	r3, #128	; 0x80
 8013d28:	d114      	bne.n	8013d54 <_vfprintf_r+0x6bc>
 8013d2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013d2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013d2e:	1a9f      	subs	r7, r3, r2
 8013d30:	2f00      	cmp	r7, #0
 8013d32:	dd0f      	ble.n	8013d54 <_vfprintf_r+0x6bc>
 8013d34:	4b8c      	ldr	r3, [pc, #560]	; (8013f68 <_vfprintf_r+0x8d0>)
 8013d36:	6023      	str	r3, [r4, #0]
 8013d38:	2f10      	cmp	r7, #16
 8013d3a:	f300 81ce 	bgt.w	80140da <_vfprintf_r+0xa42>
 8013d3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013d40:	6067      	str	r7, [r4, #4]
 8013d42:	441f      	add	r7, r3
 8013d44:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013d46:	9721      	str	r7, [sp, #132]	; 0x84
 8013d48:	3301      	adds	r3, #1
 8013d4a:	2b07      	cmp	r3, #7
 8013d4c:	9320      	str	r3, [sp, #128]	; 0x80
 8013d4e:	f300 81dd 	bgt.w	801410c <_vfprintf_r+0xa74>
 8013d52:	3408      	adds	r4, #8
 8013d54:	eba6 060a 	sub.w	r6, r6, sl
 8013d58:	2e00      	cmp	r6, #0
 8013d5a:	dd0f      	ble.n	8013d7c <_vfprintf_r+0x6e4>
 8013d5c:	4f82      	ldr	r7, [pc, #520]	; (8013f68 <_vfprintf_r+0x8d0>)
 8013d5e:	6027      	str	r7, [r4, #0]
 8013d60:	2e10      	cmp	r6, #16
 8013d62:	f300 81dd 	bgt.w	8014120 <_vfprintf_r+0xa88>
 8013d66:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013d68:	9821      	ldr	r0, [sp, #132]	; 0x84
 8013d6a:	6066      	str	r6, [r4, #4]
 8013d6c:	3301      	adds	r3, #1
 8013d6e:	4406      	add	r6, r0
 8013d70:	2b07      	cmp	r3, #7
 8013d72:	9621      	str	r6, [sp, #132]	; 0x84
 8013d74:	9320      	str	r3, [sp, #128]	; 0x80
 8013d76:	f300 81ea 	bgt.w	801414e <_vfprintf_r+0xab6>
 8013d7a:	3408      	adds	r4, #8
 8013d7c:	05e9      	lsls	r1, r5, #23
 8013d7e:	f100 81f0 	bmi.w	8014162 <_vfprintf_r+0xaca>
 8013d82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013d84:	e884 0600 	stmia.w	r4, {r9, sl}
 8013d88:	4453      	add	r3, sl
 8013d8a:	9321      	str	r3, [sp, #132]	; 0x84
 8013d8c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013d8e:	3301      	adds	r3, #1
 8013d90:	2b07      	cmp	r3, #7
 8013d92:	9320      	str	r3, [sp, #128]	; 0x80
 8013d94:	f340 841b 	ble.w	80145ce <_vfprintf_r+0xf36>
 8013d98:	aa1f      	add	r2, sp, #124	; 0x7c
 8013d9a:	4641      	mov	r1, r8
 8013d9c:	4658      	mov	r0, fp
 8013d9e:	f002 fba2 	bl	80164e6 <__sprint_r>
 8013da2:	2800      	cmp	r0, #0
 8013da4:	f040 8433 	bne.w	801460e <_vfprintf_r+0xf76>
 8013da8:	ac2c      	add	r4, sp, #176	; 0xb0
 8013daa:	0768      	lsls	r0, r5, #29
 8013dac:	f100 8412 	bmi.w	80145d4 <_vfprintf_r+0xf3c>
 8013db0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013db2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013db4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013db6:	428a      	cmp	r2, r1
 8013db8:	bfac      	ite	ge
 8013dba:	189b      	addge	r3, r3, r2
 8013dbc:	185b      	addlt	r3, r3, r1
 8013dbe:	930a      	str	r3, [sp, #40]	; 0x28
 8013dc0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013dc2:	b13b      	cbz	r3, 8013dd4 <_vfprintf_r+0x73c>
 8013dc4:	aa1f      	add	r2, sp, #124	; 0x7c
 8013dc6:	4641      	mov	r1, r8
 8013dc8:	4658      	mov	r0, fp
 8013dca:	f002 fb8c 	bl	80164e6 <__sprint_r>
 8013dce:	2800      	cmp	r0, #0
 8013dd0:	f040 841d 	bne.w	801460e <_vfprintf_r+0xf76>
 8013dd4:	2300      	movs	r3, #0
 8013dd6:	9320      	str	r3, [sp, #128]	; 0x80
 8013dd8:	9f04      	ldr	r7, [sp, #16]
 8013dda:	ac2c      	add	r4, sp, #176	; 0xb0
 8013ddc:	e4e9      	b.n	80137b2 <_vfprintf_r+0x11a>
 8013dde:	9b02      	ldr	r3, [sp, #8]
 8013de0:	2b65      	cmp	r3, #101	; 0x65
 8013de2:	f77f af0d 	ble.w	8013c00 <_vfprintf_r+0x568>
 8013de6:	9b02      	ldr	r3, [sp, #8]
 8013de8:	2b66      	cmp	r3, #102	; 0x66
 8013dea:	d125      	bne.n	8013e38 <_vfprintf_r+0x7a0>
 8013dec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	dd1a      	ble.n	8013e28 <_vfprintf_r+0x790>
 8013df2:	f1ba 0f00 	cmp.w	sl, #0
 8013df6:	d101      	bne.n	8013dfc <_vfprintf_r+0x764>
 8013df8:	07ee      	lsls	r6, r5, #31
 8013dfa:	d502      	bpl.n	8013e02 <_vfprintf_r+0x76a>
 8013dfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013dfe:	4413      	add	r3, r2
 8013e00:	4453      	add	r3, sl
 8013e02:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8013e04:	9208      	str	r2, [sp, #32]
 8013e06:	469a      	mov	sl, r3
 8013e08:	e738      	b.n	8013c7c <_vfprintf_r+0x5e4>
 8013e0a:	460a      	mov	r2, r1
 8013e0c:	e70d      	b.n	8013c2a <_vfprintf_r+0x592>
 8013e0e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8013e12:	f803 1b01 	strb.w	r1, [r3], #1
 8013e16:	e71d      	b.n	8013c54 <_vfprintf_r+0x5bc>
 8013e18:	2230      	movs	r2, #48	; 0x30
 8013e1a:	4413      	add	r3, r2
 8013e1c:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8013e20:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8013e24:	a91c      	add	r1, sp, #112	; 0x70
 8013e26:	e719      	b.n	8013c5c <_vfprintf_r+0x5c4>
 8013e28:	f1ba 0f00 	cmp.w	sl, #0
 8013e2c:	d101      	bne.n	8013e32 <_vfprintf_r+0x79a>
 8013e2e:	07ed      	lsls	r5, r5, #31
 8013e30:	d515      	bpl.n	8013e5e <_vfprintf_r+0x7c6>
 8013e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e34:	3301      	adds	r3, #1
 8013e36:	e7e3      	b.n	8013e00 <_vfprintf_r+0x768>
 8013e38:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8013e3a:	9b03      	ldr	r3, [sp, #12]
 8013e3c:	429a      	cmp	r2, r3
 8013e3e:	db06      	blt.n	8013e4e <_vfprintf_r+0x7b6>
 8013e40:	07e8      	lsls	r0, r5, #31
 8013e42:	d50e      	bpl.n	8013e62 <_vfprintf_r+0x7ca>
 8013e44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e46:	4413      	add	r3, r2
 8013e48:	2267      	movs	r2, #103	; 0x67
 8013e4a:	9202      	str	r2, [sp, #8]
 8013e4c:	e7d9      	b.n	8013e02 <_vfprintf_r+0x76a>
 8013e4e:	9b03      	ldr	r3, [sp, #12]
 8013e50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013e52:	2a00      	cmp	r2, #0
 8013e54:	440b      	add	r3, r1
 8013e56:	dcf7      	bgt.n	8013e48 <_vfprintf_r+0x7b0>
 8013e58:	f1c2 0201 	rsb	r2, r2, #1
 8013e5c:	e7f3      	b.n	8013e46 <_vfprintf_r+0x7ae>
 8013e5e:	2301      	movs	r3, #1
 8013e60:	e7cf      	b.n	8013e02 <_vfprintf_r+0x76a>
 8013e62:	4613      	mov	r3, r2
 8013e64:	e7f0      	b.n	8013e48 <_vfprintf_r+0x7b0>
 8013e66:	b10b      	cbz	r3, 8013e6c <_vfprintf_r+0x7d4>
 8013e68:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8013e6c:	f015 0f20 	tst.w	r5, #32
 8013e70:	f107 0304 	add.w	r3, r7, #4
 8013e74:	d008      	beq.n	8013e88 <_vfprintf_r+0x7f0>
 8013e76:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013e78:	683a      	ldr	r2, [r7, #0]
 8013e7a:	17ce      	asrs	r6, r1, #31
 8013e7c:	4608      	mov	r0, r1
 8013e7e:	4631      	mov	r1, r6
 8013e80:	e9c2 0100 	strd	r0, r1, [r2]
 8013e84:	461f      	mov	r7, r3
 8013e86:	e494      	b.n	80137b2 <_vfprintf_r+0x11a>
 8013e88:	06e9      	lsls	r1, r5, #27
 8013e8a:	d503      	bpl.n	8013e94 <_vfprintf_r+0x7fc>
 8013e8c:	683a      	ldr	r2, [r7, #0]
 8013e8e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013e90:	6011      	str	r1, [r2, #0]
 8013e92:	e7f7      	b.n	8013e84 <_vfprintf_r+0x7ec>
 8013e94:	066a      	lsls	r2, r5, #25
 8013e96:	d5f9      	bpl.n	8013e8c <_vfprintf_r+0x7f4>
 8013e98:	683a      	ldr	r2, [r7, #0]
 8013e9a:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8013e9e:	8011      	strh	r1, [r2, #0]
 8013ea0:	e7f0      	b.n	8013e84 <_vfprintf_r+0x7ec>
 8013ea2:	f045 0510 	orr.w	r5, r5, #16
 8013ea6:	f015 0320 	ands.w	r3, r5, #32
 8013eaa:	d022      	beq.n	8013ef2 <_vfprintf_r+0x85a>
 8013eac:	3707      	adds	r7, #7
 8013eae:	f027 0707 	bic.w	r7, r7, #7
 8013eb2:	f107 0308 	add.w	r3, r7, #8
 8013eb6:	e9d7 6700 	ldrd	r6, r7, [r7]
 8013eba:	9304      	str	r3, [sp, #16]
 8013ebc:	2300      	movs	r3, #0
 8013ebe:	2200      	movs	r2, #0
 8013ec0:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8013ec4:	f1ba 3fff 	cmp.w	sl, #4294967295
 8013ec8:	f000 83e8 	beq.w	801469c <_vfprintf_r+0x1004>
 8013ecc:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 8013ed0:	9208      	str	r2, [sp, #32]
 8013ed2:	ea56 0207 	orrs.w	r2, r6, r7
 8013ed6:	f040 83e6 	bne.w	80146a6 <_vfprintf_r+0x100e>
 8013eda:	f1ba 0f00 	cmp.w	sl, #0
 8013ede:	f000 80a9 	beq.w	8014034 <_vfprintf_r+0x99c>
 8013ee2:	2b01      	cmp	r3, #1
 8013ee4:	d075      	beq.n	8013fd2 <_vfprintf_r+0x93a>
 8013ee6:	2b02      	cmp	r3, #2
 8013ee8:	f000 8090 	beq.w	801400c <_vfprintf_r+0x974>
 8013eec:	2600      	movs	r6, #0
 8013eee:	2700      	movs	r7, #0
 8013ef0:	e3df      	b.n	80146b2 <_vfprintf_r+0x101a>
 8013ef2:	1d3a      	adds	r2, r7, #4
 8013ef4:	f015 0110 	ands.w	r1, r5, #16
 8013ef8:	9204      	str	r2, [sp, #16]
 8013efa:	d002      	beq.n	8013f02 <_vfprintf_r+0x86a>
 8013efc:	683e      	ldr	r6, [r7, #0]
 8013efe:	2700      	movs	r7, #0
 8013f00:	e7dd      	b.n	8013ebe <_vfprintf_r+0x826>
 8013f02:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8013f06:	d0f9      	beq.n	8013efc <_vfprintf_r+0x864>
 8013f08:	883e      	ldrh	r6, [r7, #0]
 8013f0a:	2700      	movs	r7, #0
 8013f0c:	e7d6      	b.n	8013ebc <_vfprintf_r+0x824>
 8013f0e:	1d3b      	adds	r3, r7, #4
 8013f10:	9304      	str	r3, [sp, #16]
 8013f12:	2330      	movs	r3, #48	; 0x30
 8013f14:	2278      	movs	r2, #120	; 0x78
 8013f16:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8013f1a:	4b14      	ldr	r3, [pc, #80]	; (8013f6c <_vfprintf_r+0x8d4>)
 8013f1c:	683e      	ldr	r6, [r7, #0]
 8013f1e:	9311      	str	r3, [sp, #68]	; 0x44
 8013f20:	2700      	movs	r7, #0
 8013f22:	f045 0502 	orr.w	r5, r5, #2
 8013f26:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8013f2a:	2302      	movs	r3, #2
 8013f2c:	9202      	str	r2, [sp, #8]
 8013f2e:	e7c6      	b.n	8013ebe <_vfprintf_r+0x826>
 8013f30:	1d3b      	adds	r3, r7, #4
 8013f32:	2600      	movs	r6, #0
 8013f34:	f1ba 3fff 	cmp.w	sl, #4294967295
 8013f38:	9304      	str	r3, [sp, #16]
 8013f3a:	f8d7 9000 	ldr.w	r9, [r7]
 8013f3e:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8013f42:	d00a      	beq.n	8013f5a <_vfprintf_r+0x8c2>
 8013f44:	4652      	mov	r2, sl
 8013f46:	4631      	mov	r1, r6
 8013f48:	4648      	mov	r0, r9
 8013f4a:	f7f2 fc99 	bl	8006880 <memchr>
 8013f4e:	2800      	cmp	r0, #0
 8013f50:	f000 808c 	beq.w	801406c <_vfprintf_r+0x9d4>
 8013f54:	eba0 0a09 	sub.w	sl, r0, r9
 8013f58:	e5cb      	b.n	8013af2 <_vfprintf_r+0x45a>
 8013f5a:	4648      	mov	r0, r9
 8013f5c:	f7f2 fcea 	bl	8006934 <strlen>
 8013f60:	4682      	mov	sl, r0
 8013f62:	e5c6      	b.n	8013af2 <_vfprintf_r+0x45a>
 8013f64:	08018336 	.word	0x08018336
 8013f68:	08018346 	.word	0x08018346
 8013f6c:	08018303 	.word	0x08018303
 8013f70:	f045 0510 	orr.w	r5, r5, #16
 8013f74:	06ae      	lsls	r6, r5, #26
 8013f76:	d509      	bpl.n	8013f8c <_vfprintf_r+0x8f4>
 8013f78:	3707      	adds	r7, #7
 8013f7a:	f027 0707 	bic.w	r7, r7, #7
 8013f7e:	f107 0308 	add.w	r3, r7, #8
 8013f82:	e9d7 6700 	ldrd	r6, r7, [r7]
 8013f86:	9304      	str	r3, [sp, #16]
 8013f88:	2301      	movs	r3, #1
 8013f8a:	e798      	b.n	8013ebe <_vfprintf_r+0x826>
 8013f8c:	1d3b      	adds	r3, r7, #4
 8013f8e:	f015 0f10 	tst.w	r5, #16
 8013f92:	9304      	str	r3, [sp, #16]
 8013f94:	d001      	beq.n	8013f9a <_vfprintf_r+0x902>
 8013f96:	683e      	ldr	r6, [r7, #0]
 8013f98:	e002      	b.n	8013fa0 <_vfprintf_r+0x908>
 8013f9a:	0668      	lsls	r0, r5, #25
 8013f9c:	d5fb      	bpl.n	8013f96 <_vfprintf_r+0x8fe>
 8013f9e:	883e      	ldrh	r6, [r7, #0]
 8013fa0:	2700      	movs	r7, #0
 8013fa2:	e7f1      	b.n	8013f88 <_vfprintf_r+0x8f0>
 8013fa4:	b10b      	cbz	r3, 8013faa <_vfprintf_r+0x912>
 8013fa6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8013faa:	4ba2      	ldr	r3, [pc, #648]	; (8014234 <_vfprintf_r+0xb9c>)
 8013fac:	e4ca      	b.n	8013944 <_vfprintf_r+0x2ac>
 8013fae:	1d3b      	adds	r3, r7, #4
 8013fb0:	f015 0f10 	tst.w	r5, #16
 8013fb4:	9304      	str	r3, [sp, #16]
 8013fb6:	d001      	beq.n	8013fbc <_vfprintf_r+0x924>
 8013fb8:	683e      	ldr	r6, [r7, #0]
 8013fba:	e002      	b.n	8013fc2 <_vfprintf_r+0x92a>
 8013fbc:	066a      	lsls	r2, r5, #25
 8013fbe:	d5fb      	bpl.n	8013fb8 <_vfprintf_r+0x920>
 8013fc0:	883e      	ldrh	r6, [r7, #0]
 8013fc2:	2700      	movs	r7, #0
 8013fc4:	e4ca      	b.n	801395c <_vfprintf_r+0x2c4>
 8013fc6:	464b      	mov	r3, r9
 8013fc8:	e374      	b.n	80146b4 <_vfprintf_r+0x101c>
 8013fca:	2f00      	cmp	r7, #0
 8013fcc:	bf08      	it	eq
 8013fce:	2e0a      	cmpeq	r6, #10
 8013fd0:	d205      	bcs.n	8013fde <_vfprintf_r+0x946>
 8013fd2:	f10d 09f0 	add.w	r9, sp, #240	; 0xf0
 8013fd6:	3630      	adds	r6, #48	; 0x30
 8013fd8:	f809 6d41 	strb.w	r6, [r9, #-65]!
 8013fdc:	e385      	b.n	80146ea <_vfprintf_r+0x1052>
 8013fde:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8013fe2:	4630      	mov	r0, r6
 8013fe4:	4639      	mov	r1, r7
 8013fe6:	220a      	movs	r2, #10
 8013fe8:	2300      	movs	r3, #0
 8013fea:	f7f3 f98b 	bl	8007304 <__aeabi_uldivmod>
 8013fee:	3230      	adds	r2, #48	; 0x30
 8013ff0:	f809 2d01 	strb.w	r2, [r9, #-1]!
 8013ff4:	2300      	movs	r3, #0
 8013ff6:	4630      	mov	r0, r6
 8013ff8:	4639      	mov	r1, r7
 8013ffa:	220a      	movs	r2, #10
 8013ffc:	f7f3 f982 	bl	8007304 <__aeabi_uldivmod>
 8014000:	4606      	mov	r6, r0
 8014002:	460f      	mov	r7, r1
 8014004:	ea56 0307 	orrs.w	r3, r6, r7
 8014008:	d1eb      	bne.n	8013fe2 <_vfprintf_r+0x94a>
 801400a:	e36e      	b.n	80146ea <_vfprintf_r+0x1052>
 801400c:	2600      	movs	r6, #0
 801400e:	2700      	movs	r7, #0
 8014010:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8014014:	f006 030f 	and.w	r3, r6, #15
 8014018:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801401a:	5cd3      	ldrb	r3, [r2, r3]
 801401c:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8014020:	0933      	lsrs	r3, r6, #4
 8014022:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8014026:	093a      	lsrs	r2, r7, #4
 8014028:	461e      	mov	r6, r3
 801402a:	4617      	mov	r7, r2
 801402c:	ea56 0307 	orrs.w	r3, r6, r7
 8014030:	d1f0      	bne.n	8014014 <_vfprintf_r+0x97c>
 8014032:	e35a      	b.n	80146ea <_vfprintf_r+0x1052>
 8014034:	b93b      	cbnz	r3, 8014046 <_vfprintf_r+0x9ae>
 8014036:	07e8      	lsls	r0, r5, #31
 8014038:	d505      	bpl.n	8014046 <_vfprintf_r+0x9ae>
 801403a:	f10d 09f0 	add.w	r9, sp, #240	; 0xf0
 801403e:	2330      	movs	r3, #48	; 0x30
 8014040:	f809 3d41 	strb.w	r3, [r9, #-65]!
 8014044:	e351      	b.n	80146ea <_vfprintf_r+0x1052>
 8014046:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 801404a:	e34e      	b.n	80146ea <_vfprintf_r+0x1052>
 801404c:	b10b      	cbz	r3, 8014052 <_vfprintf_r+0x9ba>
 801404e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8014052:	9b02      	ldr	r3, [sp, #8]
 8014054:	2b00      	cmp	r3, #0
 8014056:	f000 8302 	beq.w	801465e <_vfprintf_r+0xfc6>
 801405a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801405e:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8014062:	2600      	movs	r6, #0
 8014064:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8014068:	9704      	str	r7, [sp, #16]
 801406a:	e4e9      	b.n	8013a40 <_vfprintf_r+0x3a8>
 801406c:	4606      	mov	r6, r0
 801406e:	e540      	b.n	8013af2 <_vfprintf_r+0x45a>
 8014070:	2310      	movs	r3, #16
 8014072:	6063      	str	r3, [r4, #4]
 8014074:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014076:	3310      	adds	r3, #16
 8014078:	9321      	str	r3, [sp, #132]	; 0x84
 801407a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801407c:	3301      	adds	r3, #1
 801407e:	2b07      	cmp	r3, #7
 8014080:	9320      	str	r3, [sp, #128]	; 0x80
 8014082:	dc02      	bgt.n	801408a <_vfprintf_r+0x9f2>
 8014084:	3408      	adds	r4, #8
 8014086:	3f10      	subs	r7, #16
 8014088:	e61a      	b.n	8013cc0 <_vfprintf_r+0x628>
 801408a:	aa1f      	add	r2, sp, #124	; 0x7c
 801408c:	4641      	mov	r1, r8
 801408e:	4658      	mov	r0, fp
 8014090:	f002 fa29 	bl	80164e6 <__sprint_r>
 8014094:	2800      	cmp	r0, #0
 8014096:	f040 82ba 	bne.w	801460e <_vfprintf_r+0xf76>
 801409a:	ac2c      	add	r4, sp, #176	; 0xb0
 801409c:	e7f3      	b.n	8014086 <_vfprintf_r+0x9ee>
 801409e:	aa1f      	add	r2, sp, #124	; 0x7c
 80140a0:	4641      	mov	r1, r8
 80140a2:	4658      	mov	r0, fp
 80140a4:	f002 fa1f 	bl	80164e6 <__sprint_r>
 80140a8:	2800      	cmp	r0, #0
 80140aa:	f040 82b0 	bne.w	801460e <_vfprintf_r+0xf76>
 80140ae:	ac2c      	add	r4, sp, #176	; 0xb0
 80140b0:	e616      	b.n	8013ce0 <_vfprintf_r+0x648>
 80140b2:	aa1f      	add	r2, sp, #124	; 0x7c
 80140b4:	4641      	mov	r1, r8
 80140b6:	4658      	mov	r0, fp
 80140b8:	f002 fa15 	bl	80164e6 <__sprint_r>
 80140bc:	2800      	cmp	r0, #0
 80140be:	f040 82a6 	bne.w	801460e <_vfprintf_r+0xf76>
 80140c2:	ac2c      	add	r4, sp, #176	; 0xb0
 80140c4:	e61e      	b.n	8013d04 <_vfprintf_r+0x66c>
 80140c6:	aa1f      	add	r2, sp, #124	; 0x7c
 80140c8:	4641      	mov	r1, r8
 80140ca:	4658      	mov	r0, fp
 80140cc:	f002 fa0b 	bl	80164e6 <__sprint_r>
 80140d0:	2800      	cmp	r0, #0
 80140d2:	f040 829c 	bne.w	801460e <_vfprintf_r+0xf76>
 80140d6:	ac2c      	add	r4, sp, #176	; 0xb0
 80140d8:	e624      	b.n	8013d24 <_vfprintf_r+0x68c>
 80140da:	2210      	movs	r2, #16
 80140dc:	6062      	str	r2, [r4, #4]
 80140de:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80140e0:	3210      	adds	r2, #16
 80140e2:	9221      	str	r2, [sp, #132]	; 0x84
 80140e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80140e6:	3201      	adds	r2, #1
 80140e8:	2a07      	cmp	r2, #7
 80140ea:	9220      	str	r2, [sp, #128]	; 0x80
 80140ec:	dc02      	bgt.n	80140f4 <_vfprintf_r+0xa5c>
 80140ee:	3408      	adds	r4, #8
 80140f0:	3f10      	subs	r7, #16
 80140f2:	e620      	b.n	8013d36 <_vfprintf_r+0x69e>
 80140f4:	aa1f      	add	r2, sp, #124	; 0x7c
 80140f6:	4641      	mov	r1, r8
 80140f8:	4658      	mov	r0, fp
 80140fa:	9314      	str	r3, [sp, #80]	; 0x50
 80140fc:	f002 f9f3 	bl	80164e6 <__sprint_r>
 8014100:	2800      	cmp	r0, #0
 8014102:	f040 8284 	bne.w	801460e <_vfprintf_r+0xf76>
 8014106:	ac2c      	add	r4, sp, #176	; 0xb0
 8014108:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801410a:	e7f1      	b.n	80140f0 <_vfprintf_r+0xa58>
 801410c:	aa1f      	add	r2, sp, #124	; 0x7c
 801410e:	4641      	mov	r1, r8
 8014110:	4658      	mov	r0, fp
 8014112:	f002 f9e8 	bl	80164e6 <__sprint_r>
 8014116:	2800      	cmp	r0, #0
 8014118:	f040 8279 	bne.w	801460e <_vfprintf_r+0xf76>
 801411c:	ac2c      	add	r4, sp, #176	; 0xb0
 801411e:	e619      	b.n	8013d54 <_vfprintf_r+0x6bc>
 8014120:	2310      	movs	r3, #16
 8014122:	6063      	str	r3, [r4, #4]
 8014124:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014126:	3310      	adds	r3, #16
 8014128:	9321      	str	r3, [sp, #132]	; 0x84
 801412a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801412c:	3301      	adds	r3, #1
 801412e:	2b07      	cmp	r3, #7
 8014130:	9320      	str	r3, [sp, #128]	; 0x80
 8014132:	dc02      	bgt.n	801413a <_vfprintf_r+0xaa2>
 8014134:	3408      	adds	r4, #8
 8014136:	3e10      	subs	r6, #16
 8014138:	e611      	b.n	8013d5e <_vfprintf_r+0x6c6>
 801413a:	aa1f      	add	r2, sp, #124	; 0x7c
 801413c:	4641      	mov	r1, r8
 801413e:	4658      	mov	r0, fp
 8014140:	f002 f9d1 	bl	80164e6 <__sprint_r>
 8014144:	2800      	cmp	r0, #0
 8014146:	f040 8262 	bne.w	801460e <_vfprintf_r+0xf76>
 801414a:	ac2c      	add	r4, sp, #176	; 0xb0
 801414c:	e7f3      	b.n	8014136 <_vfprintf_r+0xa9e>
 801414e:	aa1f      	add	r2, sp, #124	; 0x7c
 8014150:	4641      	mov	r1, r8
 8014152:	4658      	mov	r0, fp
 8014154:	f002 f9c7 	bl	80164e6 <__sprint_r>
 8014158:	2800      	cmp	r0, #0
 801415a:	f040 8258 	bne.w	801460e <_vfprintf_r+0xf76>
 801415e:	ac2c      	add	r4, sp, #176	; 0xb0
 8014160:	e60c      	b.n	8013d7c <_vfprintf_r+0x6e4>
 8014162:	9b02      	ldr	r3, [sp, #8]
 8014164:	2b65      	cmp	r3, #101	; 0x65
 8014166:	f340 81ad 	ble.w	80144c4 <_vfprintf_r+0xe2c>
 801416a:	2200      	movs	r2, #0
 801416c:	2300      	movs	r3, #0
 801416e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014172:	f7f3 f807 	bl	8007184 <__aeabi_dcmpeq>
 8014176:	2800      	cmp	r0, #0
 8014178:	d062      	beq.n	8014240 <_vfprintf_r+0xba8>
 801417a:	4b2f      	ldr	r3, [pc, #188]	; (8014238 <_vfprintf_r+0xba0>)
 801417c:	6023      	str	r3, [r4, #0]
 801417e:	2301      	movs	r3, #1
 8014180:	6063      	str	r3, [r4, #4]
 8014182:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014184:	3301      	adds	r3, #1
 8014186:	9321      	str	r3, [sp, #132]	; 0x84
 8014188:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801418a:	3301      	adds	r3, #1
 801418c:	2b07      	cmp	r3, #7
 801418e:	9320      	str	r3, [sp, #128]	; 0x80
 8014190:	dc25      	bgt.n	80141de <_vfprintf_r+0xb46>
 8014192:	3408      	adds	r4, #8
 8014194:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014196:	9a03      	ldr	r2, [sp, #12]
 8014198:	4293      	cmp	r3, r2
 801419a:	db02      	blt.n	80141a2 <_vfprintf_r+0xb0a>
 801419c:	07ea      	lsls	r2, r5, #31
 801419e:	f57f ae04 	bpl.w	8013daa <_vfprintf_r+0x712>
 80141a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80141a4:	6023      	str	r3, [r4, #0]
 80141a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141a8:	6063      	str	r3, [r4, #4]
 80141aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80141ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80141ae:	4413      	add	r3, r2
 80141b0:	9321      	str	r3, [sp, #132]	; 0x84
 80141b2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80141b4:	3301      	adds	r3, #1
 80141b6:	2b07      	cmp	r3, #7
 80141b8:	9320      	str	r3, [sp, #128]	; 0x80
 80141ba:	dc1a      	bgt.n	80141f2 <_vfprintf_r+0xb5a>
 80141bc:	3408      	adds	r4, #8
 80141be:	9b03      	ldr	r3, [sp, #12]
 80141c0:	1e5e      	subs	r6, r3, #1
 80141c2:	2e00      	cmp	r6, #0
 80141c4:	f77f adf1 	ble.w	8013daa <_vfprintf_r+0x712>
 80141c8:	4f1c      	ldr	r7, [pc, #112]	; (801423c <_vfprintf_r+0xba4>)
 80141ca:	f04f 0910 	mov.w	r9, #16
 80141ce:	2e10      	cmp	r6, #16
 80141d0:	6027      	str	r7, [r4, #0]
 80141d2:	dc18      	bgt.n	8014206 <_vfprintf_r+0xb6e>
 80141d4:	6066      	str	r6, [r4, #4]
 80141d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80141d8:	441e      	add	r6, r3
 80141da:	9621      	str	r6, [sp, #132]	; 0x84
 80141dc:	e5d6      	b.n	8013d8c <_vfprintf_r+0x6f4>
 80141de:	aa1f      	add	r2, sp, #124	; 0x7c
 80141e0:	4641      	mov	r1, r8
 80141e2:	4658      	mov	r0, fp
 80141e4:	f002 f97f 	bl	80164e6 <__sprint_r>
 80141e8:	2800      	cmp	r0, #0
 80141ea:	f040 8210 	bne.w	801460e <_vfprintf_r+0xf76>
 80141ee:	ac2c      	add	r4, sp, #176	; 0xb0
 80141f0:	e7d0      	b.n	8014194 <_vfprintf_r+0xafc>
 80141f2:	aa1f      	add	r2, sp, #124	; 0x7c
 80141f4:	4641      	mov	r1, r8
 80141f6:	4658      	mov	r0, fp
 80141f8:	f002 f975 	bl	80164e6 <__sprint_r>
 80141fc:	2800      	cmp	r0, #0
 80141fe:	f040 8206 	bne.w	801460e <_vfprintf_r+0xf76>
 8014202:	ac2c      	add	r4, sp, #176	; 0xb0
 8014204:	e7db      	b.n	80141be <_vfprintf_r+0xb26>
 8014206:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014208:	f8c4 9004 	str.w	r9, [r4, #4]
 801420c:	3310      	adds	r3, #16
 801420e:	9321      	str	r3, [sp, #132]	; 0x84
 8014210:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014212:	3301      	adds	r3, #1
 8014214:	2b07      	cmp	r3, #7
 8014216:	9320      	str	r3, [sp, #128]	; 0x80
 8014218:	dc02      	bgt.n	8014220 <_vfprintf_r+0xb88>
 801421a:	3408      	adds	r4, #8
 801421c:	3e10      	subs	r6, #16
 801421e:	e7d6      	b.n	80141ce <_vfprintf_r+0xb36>
 8014220:	aa1f      	add	r2, sp, #124	; 0x7c
 8014222:	4641      	mov	r1, r8
 8014224:	4658      	mov	r0, fp
 8014226:	f002 f95e 	bl	80164e6 <__sprint_r>
 801422a:	2800      	cmp	r0, #0
 801422c:	f040 81ef 	bne.w	801460e <_vfprintf_r+0xf76>
 8014230:	ac2c      	add	r4, sp, #176	; 0xb0
 8014232:	e7f3      	b.n	801421c <_vfprintf_r+0xb84>
 8014234:	08018303 	.word	0x08018303
 8014238:	08018314 	.word	0x08018314
 801423c:	08018346 	.word	0x08018346
 8014240:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014242:	2b00      	cmp	r3, #0
 8014244:	dc7a      	bgt.n	801433c <_vfprintf_r+0xca4>
 8014246:	4b9d      	ldr	r3, [pc, #628]	; (80144bc <_vfprintf_r+0xe24>)
 8014248:	6023      	str	r3, [r4, #0]
 801424a:	2301      	movs	r3, #1
 801424c:	6063      	str	r3, [r4, #4]
 801424e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014250:	3301      	adds	r3, #1
 8014252:	9321      	str	r3, [sp, #132]	; 0x84
 8014254:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014256:	3301      	adds	r3, #1
 8014258:	2b07      	cmp	r3, #7
 801425a:	9320      	str	r3, [sp, #128]	; 0x80
 801425c:	dc44      	bgt.n	80142e8 <_vfprintf_r+0xc50>
 801425e:	3408      	adds	r4, #8
 8014260:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014262:	b923      	cbnz	r3, 801426e <_vfprintf_r+0xbd6>
 8014264:	9b03      	ldr	r3, [sp, #12]
 8014266:	b913      	cbnz	r3, 801426e <_vfprintf_r+0xbd6>
 8014268:	07eb      	lsls	r3, r5, #31
 801426a:	f57f ad9e 	bpl.w	8013daa <_vfprintf_r+0x712>
 801426e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014270:	6023      	str	r3, [r4, #0]
 8014272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014274:	6063      	str	r3, [r4, #4]
 8014276:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014278:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801427a:	4413      	add	r3, r2
 801427c:	9321      	str	r3, [sp, #132]	; 0x84
 801427e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014280:	3301      	adds	r3, #1
 8014282:	2b07      	cmp	r3, #7
 8014284:	9320      	str	r3, [sp, #128]	; 0x80
 8014286:	dc39      	bgt.n	80142fc <_vfprintf_r+0xc64>
 8014288:	f104 0308 	add.w	r3, r4, #8
 801428c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 801428e:	2e00      	cmp	r6, #0
 8014290:	da19      	bge.n	80142c6 <_vfprintf_r+0xc2e>
 8014292:	4f8b      	ldr	r7, [pc, #556]	; (80144c0 <_vfprintf_r+0xe28>)
 8014294:	4276      	negs	r6, r6
 8014296:	2410      	movs	r4, #16
 8014298:	2e10      	cmp	r6, #16
 801429a:	601f      	str	r7, [r3, #0]
 801429c:	dc38      	bgt.n	8014310 <_vfprintf_r+0xc78>
 801429e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80142a0:	605e      	str	r6, [r3, #4]
 80142a2:	4416      	add	r6, r2
 80142a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80142a6:	9621      	str	r6, [sp, #132]	; 0x84
 80142a8:	3201      	adds	r2, #1
 80142aa:	2a07      	cmp	r2, #7
 80142ac:	f103 0308 	add.w	r3, r3, #8
 80142b0:	9220      	str	r2, [sp, #128]	; 0x80
 80142b2:	dd08      	ble.n	80142c6 <_vfprintf_r+0xc2e>
 80142b4:	aa1f      	add	r2, sp, #124	; 0x7c
 80142b6:	4641      	mov	r1, r8
 80142b8:	4658      	mov	r0, fp
 80142ba:	f002 f914 	bl	80164e6 <__sprint_r>
 80142be:	2800      	cmp	r0, #0
 80142c0:	f040 81a5 	bne.w	801460e <_vfprintf_r+0xf76>
 80142c4:	ab2c      	add	r3, sp, #176	; 0xb0
 80142c6:	9a03      	ldr	r2, [sp, #12]
 80142c8:	605a      	str	r2, [r3, #4]
 80142ca:	9903      	ldr	r1, [sp, #12]
 80142cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80142ce:	f8c3 9000 	str.w	r9, [r3]
 80142d2:	440a      	add	r2, r1
 80142d4:	9221      	str	r2, [sp, #132]	; 0x84
 80142d6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80142d8:	3201      	adds	r2, #1
 80142da:	2a07      	cmp	r2, #7
 80142dc:	9220      	str	r2, [sp, #128]	; 0x80
 80142de:	f73f ad5b 	bgt.w	8013d98 <_vfprintf_r+0x700>
 80142e2:	f103 0408 	add.w	r4, r3, #8
 80142e6:	e560      	b.n	8013daa <_vfprintf_r+0x712>
 80142e8:	aa1f      	add	r2, sp, #124	; 0x7c
 80142ea:	4641      	mov	r1, r8
 80142ec:	4658      	mov	r0, fp
 80142ee:	f002 f8fa 	bl	80164e6 <__sprint_r>
 80142f2:	2800      	cmp	r0, #0
 80142f4:	f040 818b 	bne.w	801460e <_vfprintf_r+0xf76>
 80142f8:	ac2c      	add	r4, sp, #176	; 0xb0
 80142fa:	e7b1      	b.n	8014260 <_vfprintf_r+0xbc8>
 80142fc:	aa1f      	add	r2, sp, #124	; 0x7c
 80142fe:	4641      	mov	r1, r8
 8014300:	4658      	mov	r0, fp
 8014302:	f002 f8f0 	bl	80164e6 <__sprint_r>
 8014306:	2800      	cmp	r0, #0
 8014308:	f040 8181 	bne.w	801460e <_vfprintf_r+0xf76>
 801430c:	ab2c      	add	r3, sp, #176	; 0xb0
 801430e:	e7bd      	b.n	801428c <_vfprintf_r+0xbf4>
 8014310:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014312:	605c      	str	r4, [r3, #4]
 8014314:	3210      	adds	r2, #16
 8014316:	9221      	str	r2, [sp, #132]	; 0x84
 8014318:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801431a:	3201      	adds	r2, #1
 801431c:	2a07      	cmp	r2, #7
 801431e:	9220      	str	r2, [sp, #128]	; 0x80
 8014320:	dc02      	bgt.n	8014328 <_vfprintf_r+0xc90>
 8014322:	3308      	adds	r3, #8
 8014324:	3e10      	subs	r6, #16
 8014326:	e7b7      	b.n	8014298 <_vfprintf_r+0xc00>
 8014328:	aa1f      	add	r2, sp, #124	; 0x7c
 801432a:	4641      	mov	r1, r8
 801432c:	4658      	mov	r0, fp
 801432e:	f002 f8da 	bl	80164e6 <__sprint_r>
 8014332:	2800      	cmp	r0, #0
 8014334:	f040 816b 	bne.w	801460e <_vfprintf_r+0xf76>
 8014338:	ab2c      	add	r3, sp, #176	; 0xb0
 801433a:	e7f3      	b.n	8014324 <_vfprintf_r+0xc8c>
 801433c:	9b08      	ldr	r3, [sp, #32]
 801433e:	9a03      	ldr	r2, [sp, #12]
 8014340:	4293      	cmp	r3, r2
 8014342:	bfa8      	it	ge
 8014344:	4613      	movge	r3, r2
 8014346:	2b00      	cmp	r3, #0
 8014348:	461e      	mov	r6, r3
 801434a:	dd0b      	ble.n	8014364 <_vfprintf_r+0xccc>
 801434c:	6063      	str	r3, [r4, #4]
 801434e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014350:	f8c4 9000 	str.w	r9, [r4]
 8014354:	4433      	add	r3, r6
 8014356:	9321      	str	r3, [sp, #132]	; 0x84
 8014358:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801435a:	3301      	adds	r3, #1
 801435c:	2b07      	cmp	r3, #7
 801435e:	9320      	str	r3, [sp, #128]	; 0x80
 8014360:	dc62      	bgt.n	8014428 <_vfprintf_r+0xd90>
 8014362:	3408      	adds	r4, #8
 8014364:	9b08      	ldr	r3, [sp, #32]
 8014366:	2e00      	cmp	r6, #0
 8014368:	bfa8      	it	ge
 801436a:	1b9b      	subge	r3, r3, r6
 801436c:	2b00      	cmp	r3, #0
 801436e:	461e      	mov	r6, r3
 8014370:	dd0f      	ble.n	8014392 <_vfprintf_r+0xcfa>
 8014372:	4f53      	ldr	r7, [pc, #332]	; (80144c0 <_vfprintf_r+0xe28>)
 8014374:	f04f 0a10 	mov.w	sl, #16
 8014378:	2e10      	cmp	r6, #16
 801437a:	6027      	str	r7, [r4, #0]
 801437c:	dc5e      	bgt.n	801443c <_vfprintf_r+0xda4>
 801437e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014380:	6066      	str	r6, [r4, #4]
 8014382:	441e      	add	r6, r3
 8014384:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014386:	9621      	str	r6, [sp, #132]	; 0x84
 8014388:	3301      	adds	r3, #1
 801438a:	2b07      	cmp	r3, #7
 801438c:	9320      	str	r3, [sp, #128]	; 0x80
 801438e:	dc6c      	bgt.n	801446a <_vfprintf_r+0xdd2>
 8014390:	3408      	adds	r4, #8
 8014392:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014394:	9a03      	ldr	r2, [sp, #12]
 8014396:	4293      	cmp	r3, r2
 8014398:	db01      	blt.n	801439e <_vfprintf_r+0xd06>
 801439a:	07ef      	lsls	r7, r5, #31
 801439c:	d50d      	bpl.n	80143ba <_vfprintf_r+0xd22>
 801439e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80143a0:	6023      	str	r3, [r4, #0]
 80143a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80143a4:	6063      	str	r3, [r4, #4]
 80143a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80143a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80143aa:	4413      	add	r3, r2
 80143ac:	9321      	str	r3, [sp, #132]	; 0x84
 80143ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80143b0:	3301      	adds	r3, #1
 80143b2:	2b07      	cmp	r3, #7
 80143b4:	9320      	str	r3, [sp, #128]	; 0x80
 80143b6:	dc62      	bgt.n	801447e <_vfprintf_r+0xde6>
 80143b8:	3408      	adds	r4, #8
 80143ba:	9b03      	ldr	r3, [sp, #12]
 80143bc:	9a08      	ldr	r2, [sp, #32]
 80143be:	1a9e      	subs	r6, r3, r2
 80143c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80143c2:	9a03      	ldr	r2, [sp, #12]
 80143c4:	1ad3      	subs	r3, r2, r3
 80143c6:	429e      	cmp	r6, r3
 80143c8:	bfa8      	it	ge
 80143ca:	461e      	movge	r6, r3
 80143cc:	2e00      	cmp	r6, #0
 80143ce:	dd0c      	ble.n	80143ea <_vfprintf_r+0xd52>
 80143d0:	9b08      	ldr	r3, [sp, #32]
 80143d2:	444b      	add	r3, r9
 80143d4:	e884 0048 	stmia.w	r4, {r3, r6}
 80143d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80143da:	4433      	add	r3, r6
 80143dc:	9321      	str	r3, [sp, #132]	; 0x84
 80143de:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80143e0:	3301      	adds	r3, #1
 80143e2:	2b07      	cmp	r3, #7
 80143e4:	9320      	str	r3, [sp, #128]	; 0x80
 80143e6:	dc54      	bgt.n	8014492 <_vfprintf_r+0xdfa>
 80143e8:	3408      	adds	r4, #8
 80143ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80143ec:	9a03      	ldr	r2, [sp, #12]
 80143ee:	2e00      	cmp	r6, #0
 80143f0:	eba2 0303 	sub.w	r3, r2, r3
 80143f4:	bfac      	ite	ge
 80143f6:	1b9e      	subge	r6, r3, r6
 80143f8:	461e      	movlt	r6, r3
 80143fa:	2e00      	cmp	r6, #0
 80143fc:	f77f acd5 	ble.w	8013daa <_vfprintf_r+0x712>
 8014400:	4f2f      	ldr	r7, [pc, #188]	; (80144c0 <_vfprintf_r+0xe28>)
 8014402:	f04f 0910 	mov.w	r9, #16
 8014406:	2e10      	cmp	r6, #16
 8014408:	6027      	str	r7, [r4, #0]
 801440a:	f77f aee3 	ble.w	80141d4 <_vfprintf_r+0xb3c>
 801440e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014410:	f8c4 9004 	str.w	r9, [r4, #4]
 8014414:	3310      	adds	r3, #16
 8014416:	9321      	str	r3, [sp, #132]	; 0x84
 8014418:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801441a:	3301      	adds	r3, #1
 801441c:	2b07      	cmp	r3, #7
 801441e:	9320      	str	r3, [sp, #128]	; 0x80
 8014420:	dc41      	bgt.n	80144a6 <_vfprintf_r+0xe0e>
 8014422:	3408      	adds	r4, #8
 8014424:	3e10      	subs	r6, #16
 8014426:	e7ee      	b.n	8014406 <_vfprintf_r+0xd6e>
 8014428:	aa1f      	add	r2, sp, #124	; 0x7c
 801442a:	4641      	mov	r1, r8
 801442c:	4658      	mov	r0, fp
 801442e:	f002 f85a 	bl	80164e6 <__sprint_r>
 8014432:	2800      	cmp	r0, #0
 8014434:	f040 80eb 	bne.w	801460e <_vfprintf_r+0xf76>
 8014438:	ac2c      	add	r4, sp, #176	; 0xb0
 801443a:	e793      	b.n	8014364 <_vfprintf_r+0xccc>
 801443c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801443e:	f8c4 a004 	str.w	sl, [r4, #4]
 8014442:	3310      	adds	r3, #16
 8014444:	9321      	str	r3, [sp, #132]	; 0x84
 8014446:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014448:	3301      	adds	r3, #1
 801444a:	2b07      	cmp	r3, #7
 801444c:	9320      	str	r3, [sp, #128]	; 0x80
 801444e:	dc02      	bgt.n	8014456 <_vfprintf_r+0xdbe>
 8014450:	3408      	adds	r4, #8
 8014452:	3e10      	subs	r6, #16
 8014454:	e790      	b.n	8014378 <_vfprintf_r+0xce0>
 8014456:	aa1f      	add	r2, sp, #124	; 0x7c
 8014458:	4641      	mov	r1, r8
 801445a:	4658      	mov	r0, fp
 801445c:	f002 f843 	bl	80164e6 <__sprint_r>
 8014460:	2800      	cmp	r0, #0
 8014462:	f040 80d4 	bne.w	801460e <_vfprintf_r+0xf76>
 8014466:	ac2c      	add	r4, sp, #176	; 0xb0
 8014468:	e7f3      	b.n	8014452 <_vfprintf_r+0xdba>
 801446a:	aa1f      	add	r2, sp, #124	; 0x7c
 801446c:	4641      	mov	r1, r8
 801446e:	4658      	mov	r0, fp
 8014470:	f002 f839 	bl	80164e6 <__sprint_r>
 8014474:	2800      	cmp	r0, #0
 8014476:	f040 80ca 	bne.w	801460e <_vfprintf_r+0xf76>
 801447a:	ac2c      	add	r4, sp, #176	; 0xb0
 801447c:	e789      	b.n	8014392 <_vfprintf_r+0xcfa>
 801447e:	aa1f      	add	r2, sp, #124	; 0x7c
 8014480:	4641      	mov	r1, r8
 8014482:	4658      	mov	r0, fp
 8014484:	f002 f82f 	bl	80164e6 <__sprint_r>
 8014488:	2800      	cmp	r0, #0
 801448a:	f040 80c0 	bne.w	801460e <_vfprintf_r+0xf76>
 801448e:	ac2c      	add	r4, sp, #176	; 0xb0
 8014490:	e793      	b.n	80143ba <_vfprintf_r+0xd22>
 8014492:	aa1f      	add	r2, sp, #124	; 0x7c
 8014494:	4641      	mov	r1, r8
 8014496:	4658      	mov	r0, fp
 8014498:	f002 f825 	bl	80164e6 <__sprint_r>
 801449c:	2800      	cmp	r0, #0
 801449e:	f040 80b6 	bne.w	801460e <_vfprintf_r+0xf76>
 80144a2:	ac2c      	add	r4, sp, #176	; 0xb0
 80144a4:	e7a1      	b.n	80143ea <_vfprintf_r+0xd52>
 80144a6:	aa1f      	add	r2, sp, #124	; 0x7c
 80144a8:	4641      	mov	r1, r8
 80144aa:	4658      	mov	r0, fp
 80144ac:	f002 f81b 	bl	80164e6 <__sprint_r>
 80144b0:	2800      	cmp	r0, #0
 80144b2:	f040 80ac 	bne.w	801460e <_vfprintf_r+0xf76>
 80144b6:	ac2c      	add	r4, sp, #176	; 0xb0
 80144b8:	e7b4      	b.n	8014424 <_vfprintf_r+0xd8c>
 80144ba:	bf00      	nop
 80144bc:	08018314 	.word	0x08018314
 80144c0:	08018346 	.word	0x08018346
 80144c4:	9b03      	ldr	r3, [sp, #12]
 80144c6:	2b01      	cmp	r3, #1
 80144c8:	dc01      	bgt.n	80144ce <_vfprintf_r+0xe36>
 80144ca:	07ee      	lsls	r6, r5, #31
 80144cc:	d576      	bpl.n	80145bc <_vfprintf_r+0xf24>
 80144ce:	2301      	movs	r3, #1
 80144d0:	6063      	str	r3, [r4, #4]
 80144d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80144d4:	f8c4 9000 	str.w	r9, [r4]
 80144d8:	3301      	adds	r3, #1
 80144da:	9321      	str	r3, [sp, #132]	; 0x84
 80144dc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80144de:	3301      	adds	r3, #1
 80144e0:	2b07      	cmp	r3, #7
 80144e2:	9320      	str	r3, [sp, #128]	; 0x80
 80144e4:	dc36      	bgt.n	8014554 <_vfprintf_r+0xebc>
 80144e6:	3408      	adds	r4, #8
 80144e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80144ea:	6023      	str	r3, [r4, #0]
 80144ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144ee:	6063      	str	r3, [r4, #4]
 80144f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80144f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80144f4:	4413      	add	r3, r2
 80144f6:	9321      	str	r3, [sp, #132]	; 0x84
 80144f8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80144fa:	3301      	adds	r3, #1
 80144fc:	2b07      	cmp	r3, #7
 80144fe:	9320      	str	r3, [sp, #128]	; 0x80
 8014500:	dc31      	bgt.n	8014566 <_vfprintf_r+0xece>
 8014502:	3408      	adds	r4, #8
 8014504:	2300      	movs	r3, #0
 8014506:	2200      	movs	r2, #0
 8014508:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801450c:	f7f2 fe3a 	bl	8007184 <__aeabi_dcmpeq>
 8014510:	9b03      	ldr	r3, [sp, #12]
 8014512:	1e5e      	subs	r6, r3, #1
 8014514:	2800      	cmp	r0, #0
 8014516:	d12f      	bne.n	8014578 <_vfprintf_r+0xee0>
 8014518:	f109 0301 	add.w	r3, r9, #1
 801451c:	e884 0048 	stmia.w	r4, {r3, r6}
 8014520:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014522:	9a03      	ldr	r2, [sp, #12]
 8014524:	3b01      	subs	r3, #1
 8014526:	4413      	add	r3, r2
 8014528:	9321      	str	r3, [sp, #132]	; 0x84
 801452a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801452c:	3301      	adds	r3, #1
 801452e:	2b07      	cmp	r3, #7
 8014530:	9320      	str	r3, [sp, #128]	; 0x80
 8014532:	dd4a      	ble.n	80145ca <_vfprintf_r+0xf32>
 8014534:	aa1f      	add	r2, sp, #124	; 0x7c
 8014536:	4641      	mov	r1, r8
 8014538:	4658      	mov	r0, fp
 801453a:	f001 ffd4 	bl	80164e6 <__sprint_r>
 801453e:	2800      	cmp	r0, #0
 8014540:	d165      	bne.n	801460e <_vfprintf_r+0xf76>
 8014542:	ac2c      	add	r4, sp, #176	; 0xb0
 8014544:	ab1b      	add	r3, sp, #108	; 0x6c
 8014546:	6023      	str	r3, [r4, #0]
 8014548:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801454a:	6063      	str	r3, [r4, #4]
 801454c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801454e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014550:	4413      	add	r3, r2
 8014552:	e41a      	b.n	8013d8a <_vfprintf_r+0x6f2>
 8014554:	aa1f      	add	r2, sp, #124	; 0x7c
 8014556:	4641      	mov	r1, r8
 8014558:	4658      	mov	r0, fp
 801455a:	f001 ffc4 	bl	80164e6 <__sprint_r>
 801455e:	2800      	cmp	r0, #0
 8014560:	d155      	bne.n	801460e <_vfprintf_r+0xf76>
 8014562:	ac2c      	add	r4, sp, #176	; 0xb0
 8014564:	e7c0      	b.n	80144e8 <_vfprintf_r+0xe50>
 8014566:	aa1f      	add	r2, sp, #124	; 0x7c
 8014568:	4641      	mov	r1, r8
 801456a:	4658      	mov	r0, fp
 801456c:	f001 ffbb 	bl	80164e6 <__sprint_r>
 8014570:	2800      	cmp	r0, #0
 8014572:	d14c      	bne.n	801460e <_vfprintf_r+0xf76>
 8014574:	ac2c      	add	r4, sp, #176	; 0xb0
 8014576:	e7c5      	b.n	8014504 <_vfprintf_r+0xe6c>
 8014578:	2e00      	cmp	r6, #0
 801457a:	dde3      	ble.n	8014544 <_vfprintf_r+0xeac>
 801457c:	4f60      	ldr	r7, [pc, #384]	; (8014700 <_vfprintf_r+0x1068>)
 801457e:	f04f 0910 	mov.w	r9, #16
 8014582:	2e10      	cmp	r6, #16
 8014584:	6027      	str	r7, [r4, #0]
 8014586:	dc04      	bgt.n	8014592 <_vfprintf_r+0xefa>
 8014588:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801458a:	6066      	str	r6, [r4, #4]
 801458c:	441e      	add	r6, r3
 801458e:	9621      	str	r6, [sp, #132]	; 0x84
 8014590:	e7cb      	b.n	801452a <_vfprintf_r+0xe92>
 8014592:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014594:	f8c4 9004 	str.w	r9, [r4, #4]
 8014598:	3310      	adds	r3, #16
 801459a:	9321      	str	r3, [sp, #132]	; 0x84
 801459c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801459e:	3301      	adds	r3, #1
 80145a0:	2b07      	cmp	r3, #7
 80145a2:	9320      	str	r3, [sp, #128]	; 0x80
 80145a4:	dc02      	bgt.n	80145ac <_vfprintf_r+0xf14>
 80145a6:	3408      	adds	r4, #8
 80145a8:	3e10      	subs	r6, #16
 80145aa:	e7ea      	b.n	8014582 <_vfprintf_r+0xeea>
 80145ac:	aa1f      	add	r2, sp, #124	; 0x7c
 80145ae:	4641      	mov	r1, r8
 80145b0:	4658      	mov	r0, fp
 80145b2:	f001 ff98 	bl	80164e6 <__sprint_r>
 80145b6:	bb50      	cbnz	r0, 801460e <_vfprintf_r+0xf76>
 80145b8:	ac2c      	add	r4, sp, #176	; 0xb0
 80145ba:	e7f5      	b.n	80145a8 <_vfprintf_r+0xf10>
 80145bc:	2301      	movs	r3, #1
 80145be:	6063      	str	r3, [r4, #4]
 80145c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80145c2:	f8c4 9000 	str.w	r9, [r4]
 80145c6:	3301      	adds	r3, #1
 80145c8:	e7ae      	b.n	8014528 <_vfprintf_r+0xe90>
 80145ca:	3408      	adds	r4, #8
 80145cc:	e7ba      	b.n	8014544 <_vfprintf_r+0xeac>
 80145ce:	3408      	adds	r4, #8
 80145d0:	f7ff bbeb 	b.w	8013daa <_vfprintf_r+0x712>
 80145d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80145d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80145d8:	1a9d      	subs	r5, r3, r2
 80145da:	2d00      	cmp	r5, #0
 80145dc:	f77f abe8 	ble.w	8013db0 <_vfprintf_r+0x718>
 80145e0:	2610      	movs	r6, #16
 80145e2:	4b48      	ldr	r3, [pc, #288]	; (8014704 <_vfprintf_r+0x106c>)
 80145e4:	6023      	str	r3, [r4, #0]
 80145e6:	2d10      	cmp	r5, #16
 80145e8:	dc24      	bgt.n	8014634 <_vfprintf_r+0xf9c>
 80145ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80145ec:	6065      	str	r5, [r4, #4]
 80145ee:	441d      	add	r5, r3
 80145f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80145f2:	9521      	str	r5, [sp, #132]	; 0x84
 80145f4:	3301      	adds	r3, #1
 80145f6:	2b07      	cmp	r3, #7
 80145f8:	9320      	str	r3, [sp, #128]	; 0x80
 80145fa:	f77f abd9 	ble.w	8013db0 <_vfprintf_r+0x718>
 80145fe:	aa1f      	add	r2, sp, #124	; 0x7c
 8014600:	4641      	mov	r1, r8
 8014602:	4658      	mov	r0, fp
 8014604:	f001 ff6f 	bl	80164e6 <__sprint_r>
 8014608:	2800      	cmp	r0, #0
 801460a:	f43f abd1 	beq.w	8013db0 <_vfprintf_r+0x718>
 801460e:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 8014612:	07d9      	lsls	r1, r3, #31
 8014614:	d407      	bmi.n	8014626 <_vfprintf_r+0xf8e>
 8014616:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 801461a:	059a      	lsls	r2, r3, #22
 801461c:	d403      	bmi.n	8014626 <_vfprintf_r+0xf8e>
 801461e:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 8014622:	f7fd fb23 	bl	8011c6c <__retarget_lock_release_recursive>
 8014626:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 801462a:	065b      	lsls	r3, r3, #25
 801462c:	f57f a8af 	bpl.w	801378e <_vfprintf_r+0xf6>
 8014630:	f7ff b882 	b.w	8013738 <_vfprintf_r+0xa0>
 8014634:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014636:	6066      	str	r6, [r4, #4]
 8014638:	3310      	adds	r3, #16
 801463a:	9321      	str	r3, [sp, #132]	; 0x84
 801463c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801463e:	3301      	adds	r3, #1
 8014640:	2b07      	cmp	r3, #7
 8014642:	9320      	str	r3, [sp, #128]	; 0x80
 8014644:	dc02      	bgt.n	801464c <_vfprintf_r+0xfb4>
 8014646:	3408      	adds	r4, #8
 8014648:	3d10      	subs	r5, #16
 801464a:	e7ca      	b.n	80145e2 <_vfprintf_r+0xf4a>
 801464c:	aa1f      	add	r2, sp, #124	; 0x7c
 801464e:	4641      	mov	r1, r8
 8014650:	4658      	mov	r0, fp
 8014652:	f001 ff48 	bl	80164e6 <__sprint_r>
 8014656:	2800      	cmp	r0, #0
 8014658:	d1d9      	bne.n	801460e <_vfprintf_r+0xf76>
 801465a:	ac2c      	add	r4, sp, #176	; 0xb0
 801465c:	e7f4      	b.n	8014648 <_vfprintf_r+0xfb0>
 801465e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014660:	b913      	cbnz	r3, 8014668 <_vfprintf_r+0xfd0>
 8014662:	2300      	movs	r3, #0
 8014664:	9320      	str	r3, [sp, #128]	; 0x80
 8014666:	e7d2      	b.n	801460e <_vfprintf_r+0xf76>
 8014668:	aa1f      	add	r2, sp, #124	; 0x7c
 801466a:	4641      	mov	r1, r8
 801466c:	4658      	mov	r0, fp
 801466e:	f001 ff3a 	bl	80164e6 <__sprint_r>
 8014672:	2800      	cmp	r0, #0
 8014674:	d0f5      	beq.n	8014662 <_vfprintf_r+0xfca>
 8014676:	e7ca      	b.n	801460e <_vfprintf_r+0xf76>
 8014678:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801467c:	4610      	mov	r0, r2
 801467e:	4619      	mov	r1, r3
 8014680:	f7f2 fdb2 	bl	80071e8 <__aeabi_dcmpun>
 8014684:	2800      	cmp	r0, #0
 8014686:	f43f aa36 	beq.w	8013af6 <_vfprintf_r+0x45e>
 801468a:	4b1f      	ldr	r3, [pc, #124]	; (8014708 <_vfprintf_r+0x1070>)
 801468c:	4a1f      	ldr	r2, [pc, #124]	; (801470c <_vfprintf_r+0x1074>)
 801468e:	f7ff ba26 	b.w	8013ade <_vfprintf_r+0x446>
 8014692:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014694:	1a1b      	subs	r3, r3, r0
 8014696:	9303      	str	r3, [sp, #12]
 8014698:	f7ff baa9 	b.w	8013bee <_vfprintf_r+0x556>
 801469c:	ea56 0207 	orrs.w	r2, r6, r7
 80146a0:	9508      	str	r5, [sp, #32]
 80146a2:	f43f ac1e 	beq.w	8013ee2 <_vfprintf_r+0x84a>
 80146a6:	2b01      	cmp	r3, #1
 80146a8:	f43f ac8f 	beq.w	8013fca <_vfprintf_r+0x932>
 80146ac:	2b02      	cmp	r3, #2
 80146ae:	f43f acaf 	beq.w	8014010 <_vfprintf_r+0x978>
 80146b2:	ab2c      	add	r3, sp, #176	; 0xb0
 80146b4:	08f1      	lsrs	r1, r6, #3
 80146b6:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 80146ba:	08f8      	lsrs	r0, r7, #3
 80146bc:	f006 0207 	and.w	r2, r6, #7
 80146c0:	4607      	mov	r7, r0
 80146c2:	460e      	mov	r6, r1
 80146c4:	3230      	adds	r2, #48	; 0x30
 80146c6:	ea56 0107 	orrs.w	r1, r6, r7
 80146ca:	f103 39ff 	add.w	r9, r3, #4294967295
 80146ce:	f803 2c01 	strb.w	r2, [r3, #-1]
 80146d2:	f47f ac78 	bne.w	8013fc6 <_vfprintf_r+0x92e>
 80146d6:	9908      	ldr	r1, [sp, #32]
 80146d8:	07cd      	lsls	r5, r1, #31
 80146da:	d506      	bpl.n	80146ea <_vfprintf_r+0x1052>
 80146dc:	2a30      	cmp	r2, #48	; 0x30
 80146de:	d004      	beq.n	80146ea <_vfprintf_r+0x1052>
 80146e0:	2230      	movs	r2, #48	; 0x30
 80146e2:	f809 2c01 	strb.w	r2, [r9, #-1]
 80146e6:	f1a3 0902 	sub.w	r9, r3, #2
 80146ea:	4656      	mov	r6, sl
 80146ec:	2300      	movs	r3, #0
 80146ee:	f10d 0ab0 	add.w	sl, sp, #176	; 0xb0
 80146f2:	9d08      	ldr	r5, [sp, #32]
 80146f4:	9308      	str	r3, [sp, #32]
 80146f6:	ebaa 0a09 	sub.w	sl, sl, r9
 80146fa:	f7ff bac6 	b.w	8013c8a <_vfprintf_r+0x5f2>
 80146fe:	bf00      	nop
 8014700:	08018346 	.word	0x08018346
 8014704:	08018336 	.word	0x08018336
 8014708:	080182ea 	.word	0x080182ea
 801470c:	080182ee 	.word	0x080182ee

08014710 <__sbprintf>:
 8014710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014712:	460c      	mov	r4, r1
 8014714:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8014718:	461f      	mov	r7, r3
 801471a:	8989      	ldrh	r1, [r1, #12]
 801471c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801471e:	9319      	str	r3, [sp, #100]	; 0x64
 8014720:	89e3      	ldrh	r3, [r4, #14]
 8014722:	f8ad 300e 	strh.w	r3, [sp, #14]
 8014726:	f021 0102 	bic.w	r1, r1, #2
 801472a:	6a23      	ldr	r3, [r4, #32]
 801472c:	f8ad 100c 	strh.w	r1, [sp, #12]
 8014730:	9308      	str	r3, [sp, #32]
 8014732:	a91a      	add	r1, sp, #104	; 0x68
 8014734:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014736:	930a      	str	r3, [sp, #40]	; 0x28
 8014738:	4615      	mov	r5, r2
 801473a:	2300      	movs	r3, #0
 801473c:	4606      	mov	r6, r0
 801473e:	9100      	str	r1, [sp, #0]
 8014740:	9104      	str	r1, [sp, #16]
 8014742:	a816      	add	r0, sp, #88	; 0x58
 8014744:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014748:	9102      	str	r1, [sp, #8]
 801474a:	9105      	str	r1, [sp, #20]
 801474c:	9306      	str	r3, [sp, #24]
 801474e:	f7fd fa89 	bl	8011c64 <__retarget_lock_init_recursive>
 8014752:	462a      	mov	r2, r5
 8014754:	463b      	mov	r3, r7
 8014756:	4669      	mov	r1, sp
 8014758:	4630      	mov	r0, r6
 801475a:	f7fe ff9d 	bl	8013698 <_vfprintf_r>
 801475e:	1e05      	subs	r5, r0, #0
 8014760:	db07      	blt.n	8014772 <__sbprintf+0x62>
 8014762:	4669      	mov	r1, sp
 8014764:	4630      	mov	r0, r6
 8014766:	f001 f853 	bl	8015810 <_fflush_r>
 801476a:	2800      	cmp	r0, #0
 801476c:	bf18      	it	ne
 801476e:	f04f 35ff 	movne.w	r5, #4294967295
 8014772:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8014776:	9816      	ldr	r0, [sp, #88]	; 0x58
 8014778:	065b      	lsls	r3, r3, #25
 801477a:	bf42      	ittt	mi
 801477c:	89a3      	ldrhmi	r3, [r4, #12]
 801477e:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8014782:	81a3      	strhmi	r3, [r4, #12]
 8014784:	f7fd fa6f 	bl	8011c66 <__retarget_lock_close_recursive>
 8014788:	4628      	mov	r0, r5
 801478a:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 801478e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014790 <__swbuf_r>:
 8014790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014792:	460e      	mov	r6, r1
 8014794:	4614      	mov	r4, r2
 8014796:	4605      	mov	r5, r0
 8014798:	b118      	cbz	r0, 80147a2 <__swbuf_r+0x12>
 801479a:	6983      	ldr	r3, [r0, #24]
 801479c:	b90b      	cbnz	r3, 80147a2 <__swbuf_r+0x12>
 801479e:	f001 f8cb 	bl	8015938 <__sinit>
 80147a2:	4b27      	ldr	r3, [pc, #156]	; (8014840 <__swbuf_r+0xb0>)
 80147a4:	429c      	cmp	r4, r3
 80147a6:	d12f      	bne.n	8014808 <__swbuf_r+0x78>
 80147a8:	686c      	ldr	r4, [r5, #4]
 80147aa:	69a3      	ldr	r3, [r4, #24]
 80147ac:	60a3      	str	r3, [r4, #8]
 80147ae:	89a3      	ldrh	r3, [r4, #12]
 80147b0:	0719      	lsls	r1, r3, #28
 80147b2:	d533      	bpl.n	801481c <__swbuf_r+0x8c>
 80147b4:	6923      	ldr	r3, [r4, #16]
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d030      	beq.n	801481c <__swbuf_r+0x8c>
 80147ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80147be:	b2f6      	uxtb	r6, r6
 80147c0:	049a      	lsls	r2, r3, #18
 80147c2:	4637      	mov	r7, r6
 80147c4:	d534      	bpl.n	8014830 <__swbuf_r+0xa0>
 80147c6:	6923      	ldr	r3, [r4, #16]
 80147c8:	6820      	ldr	r0, [r4, #0]
 80147ca:	1ac0      	subs	r0, r0, r3
 80147cc:	6963      	ldr	r3, [r4, #20]
 80147ce:	4298      	cmp	r0, r3
 80147d0:	db04      	blt.n	80147dc <__swbuf_r+0x4c>
 80147d2:	4621      	mov	r1, r4
 80147d4:	4628      	mov	r0, r5
 80147d6:	f001 f81b 	bl	8015810 <_fflush_r>
 80147da:	bb28      	cbnz	r0, 8014828 <__swbuf_r+0x98>
 80147dc:	68a3      	ldr	r3, [r4, #8]
 80147de:	3b01      	subs	r3, #1
 80147e0:	60a3      	str	r3, [r4, #8]
 80147e2:	6823      	ldr	r3, [r4, #0]
 80147e4:	1c5a      	adds	r2, r3, #1
 80147e6:	6022      	str	r2, [r4, #0]
 80147e8:	701e      	strb	r6, [r3, #0]
 80147ea:	6963      	ldr	r3, [r4, #20]
 80147ec:	3001      	adds	r0, #1
 80147ee:	4298      	cmp	r0, r3
 80147f0:	d004      	beq.n	80147fc <__swbuf_r+0x6c>
 80147f2:	89a3      	ldrh	r3, [r4, #12]
 80147f4:	07db      	lsls	r3, r3, #31
 80147f6:	d519      	bpl.n	801482c <__swbuf_r+0x9c>
 80147f8:	2e0a      	cmp	r6, #10
 80147fa:	d117      	bne.n	801482c <__swbuf_r+0x9c>
 80147fc:	4621      	mov	r1, r4
 80147fe:	4628      	mov	r0, r5
 8014800:	f001 f806 	bl	8015810 <_fflush_r>
 8014804:	b190      	cbz	r0, 801482c <__swbuf_r+0x9c>
 8014806:	e00f      	b.n	8014828 <__swbuf_r+0x98>
 8014808:	4b0e      	ldr	r3, [pc, #56]	; (8014844 <__swbuf_r+0xb4>)
 801480a:	429c      	cmp	r4, r3
 801480c:	d101      	bne.n	8014812 <__swbuf_r+0x82>
 801480e:	68ac      	ldr	r4, [r5, #8]
 8014810:	e7cb      	b.n	80147aa <__swbuf_r+0x1a>
 8014812:	4b0d      	ldr	r3, [pc, #52]	; (8014848 <__swbuf_r+0xb8>)
 8014814:	429c      	cmp	r4, r3
 8014816:	bf08      	it	eq
 8014818:	68ec      	ldreq	r4, [r5, #12]
 801481a:	e7c6      	b.n	80147aa <__swbuf_r+0x1a>
 801481c:	4621      	mov	r1, r4
 801481e:	4628      	mov	r0, r5
 8014820:	f000 f826 	bl	8014870 <__swsetup_r>
 8014824:	2800      	cmp	r0, #0
 8014826:	d0c8      	beq.n	80147ba <__swbuf_r+0x2a>
 8014828:	f04f 37ff 	mov.w	r7, #4294967295
 801482c:	4638      	mov	r0, r7
 801482e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014830:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014834:	81a3      	strh	r3, [r4, #12]
 8014836:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014838:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801483c:	6663      	str	r3, [r4, #100]	; 0x64
 801483e:	e7c2      	b.n	80147c6 <__swbuf_r+0x36>
 8014840:	08018384 	.word	0x08018384
 8014844:	080183a4 	.word	0x080183a4
 8014848:	08018364 	.word	0x08018364

0801484c <_write_r>:
 801484c:	b538      	push	{r3, r4, r5, lr}
 801484e:	4c07      	ldr	r4, [pc, #28]	; (801486c <_write_r+0x20>)
 8014850:	4605      	mov	r5, r0
 8014852:	4608      	mov	r0, r1
 8014854:	4611      	mov	r1, r2
 8014856:	2200      	movs	r2, #0
 8014858:	6022      	str	r2, [r4, #0]
 801485a:	461a      	mov	r2, r3
 801485c:	f7fa fd04 	bl	800f268 <_write>
 8014860:	1c43      	adds	r3, r0, #1
 8014862:	d102      	bne.n	801486a <_write_r+0x1e>
 8014864:	6823      	ldr	r3, [r4, #0]
 8014866:	b103      	cbz	r3, 801486a <_write_r+0x1e>
 8014868:	602b      	str	r3, [r5, #0]
 801486a:	bd38      	pop	{r3, r4, r5, pc}
 801486c:	20000b4c 	.word	0x20000b4c

08014870 <__swsetup_r>:
 8014870:	4b32      	ldr	r3, [pc, #200]	; (801493c <__swsetup_r+0xcc>)
 8014872:	b570      	push	{r4, r5, r6, lr}
 8014874:	681d      	ldr	r5, [r3, #0]
 8014876:	4606      	mov	r6, r0
 8014878:	460c      	mov	r4, r1
 801487a:	b125      	cbz	r5, 8014886 <__swsetup_r+0x16>
 801487c:	69ab      	ldr	r3, [r5, #24]
 801487e:	b913      	cbnz	r3, 8014886 <__swsetup_r+0x16>
 8014880:	4628      	mov	r0, r5
 8014882:	f001 f859 	bl	8015938 <__sinit>
 8014886:	4b2e      	ldr	r3, [pc, #184]	; (8014940 <__swsetup_r+0xd0>)
 8014888:	429c      	cmp	r4, r3
 801488a:	d10f      	bne.n	80148ac <__swsetup_r+0x3c>
 801488c:	686c      	ldr	r4, [r5, #4]
 801488e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014892:	b29a      	uxth	r2, r3
 8014894:	0715      	lsls	r5, r2, #28
 8014896:	d42c      	bmi.n	80148f2 <__swsetup_r+0x82>
 8014898:	06d0      	lsls	r0, r2, #27
 801489a:	d411      	bmi.n	80148c0 <__swsetup_r+0x50>
 801489c:	2209      	movs	r2, #9
 801489e:	6032      	str	r2, [r6, #0]
 80148a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80148a4:	81a3      	strh	r3, [r4, #12]
 80148a6:	f04f 30ff 	mov.w	r0, #4294967295
 80148aa:	bd70      	pop	{r4, r5, r6, pc}
 80148ac:	4b25      	ldr	r3, [pc, #148]	; (8014944 <__swsetup_r+0xd4>)
 80148ae:	429c      	cmp	r4, r3
 80148b0:	d101      	bne.n	80148b6 <__swsetup_r+0x46>
 80148b2:	68ac      	ldr	r4, [r5, #8]
 80148b4:	e7eb      	b.n	801488e <__swsetup_r+0x1e>
 80148b6:	4b24      	ldr	r3, [pc, #144]	; (8014948 <__swsetup_r+0xd8>)
 80148b8:	429c      	cmp	r4, r3
 80148ba:	bf08      	it	eq
 80148bc:	68ec      	ldreq	r4, [r5, #12]
 80148be:	e7e6      	b.n	801488e <__swsetup_r+0x1e>
 80148c0:	0751      	lsls	r1, r2, #29
 80148c2:	d512      	bpl.n	80148ea <__swsetup_r+0x7a>
 80148c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80148c6:	b141      	cbz	r1, 80148da <__swsetup_r+0x6a>
 80148c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80148cc:	4299      	cmp	r1, r3
 80148ce:	d002      	beq.n	80148d6 <__swsetup_r+0x66>
 80148d0:	4630      	mov	r0, r6
 80148d2:	f001 f907 	bl	8015ae4 <_free_r>
 80148d6:	2300      	movs	r3, #0
 80148d8:	6363      	str	r3, [r4, #52]	; 0x34
 80148da:	89a3      	ldrh	r3, [r4, #12]
 80148dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80148e0:	81a3      	strh	r3, [r4, #12]
 80148e2:	2300      	movs	r3, #0
 80148e4:	6063      	str	r3, [r4, #4]
 80148e6:	6923      	ldr	r3, [r4, #16]
 80148e8:	6023      	str	r3, [r4, #0]
 80148ea:	89a3      	ldrh	r3, [r4, #12]
 80148ec:	f043 0308 	orr.w	r3, r3, #8
 80148f0:	81a3      	strh	r3, [r4, #12]
 80148f2:	6923      	ldr	r3, [r4, #16]
 80148f4:	b94b      	cbnz	r3, 801490a <__swsetup_r+0x9a>
 80148f6:	89a3      	ldrh	r3, [r4, #12]
 80148f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80148fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014900:	d003      	beq.n	801490a <__swsetup_r+0x9a>
 8014902:	4621      	mov	r1, r4
 8014904:	4630      	mov	r0, r6
 8014906:	f001 fa0f 	bl	8015d28 <__smakebuf_r>
 801490a:	89a2      	ldrh	r2, [r4, #12]
 801490c:	f012 0301 	ands.w	r3, r2, #1
 8014910:	d00c      	beq.n	801492c <__swsetup_r+0xbc>
 8014912:	2300      	movs	r3, #0
 8014914:	60a3      	str	r3, [r4, #8]
 8014916:	6963      	ldr	r3, [r4, #20]
 8014918:	425b      	negs	r3, r3
 801491a:	61a3      	str	r3, [r4, #24]
 801491c:	6923      	ldr	r3, [r4, #16]
 801491e:	b953      	cbnz	r3, 8014936 <__swsetup_r+0xc6>
 8014920:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014924:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8014928:	d1ba      	bne.n	80148a0 <__swsetup_r+0x30>
 801492a:	bd70      	pop	{r4, r5, r6, pc}
 801492c:	0792      	lsls	r2, r2, #30
 801492e:	bf58      	it	pl
 8014930:	6963      	ldrpl	r3, [r4, #20]
 8014932:	60a3      	str	r3, [r4, #8]
 8014934:	e7f2      	b.n	801491c <__swsetup_r+0xac>
 8014936:	2000      	movs	r0, #0
 8014938:	e7f7      	b.n	801492a <__swsetup_r+0xba>
 801493a:	bf00      	nop
 801493c:	20000014 	.word	0x20000014
 8014940:	08018384 	.word	0x08018384
 8014944:	080183a4 	.word	0x080183a4
 8014948:	08018364 	.word	0x08018364

0801494c <__register_exitproc>:
 801494c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014950:	4d35      	ldr	r5, [pc, #212]	; (8014a28 <__register_exitproc+0xdc>)
 8014952:	4680      	mov	r8, r0
 8014954:	6828      	ldr	r0, [r5, #0]
 8014956:	4699      	mov	r9, r3
 8014958:	460f      	mov	r7, r1
 801495a:	4692      	mov	sl, r2
 801495c:	f7fd f984 	bl	8011c68 <__retarget_lock_acquire_recursive>
 8014960:	4b32      	ldr	r3, [pc, #200]	; (8014a2c <__register_exitproc+0xe0>)
 8014962:	681e      	ldr	r6, [r3, #0]
 8014964:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8014966:	b93c      	cbnz	r4, 8014978 <__register_exitproc+0x2c>
 8014968:	4b31      	ldr	r3, [pc, #196]	; (8014a30 <__register_exitproc+0xe4>)
 801496a:	f106 044c 	add.w	r4, r6, #76	; 0x4c
 801496e:	64b4      	str	r4, [r6, #72]	; 0x48
 8014970:	b113      	cbz	r3, 8014978 <__register_exitproc+0x2c>
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	f8c6 30d4 	str.w	r3, [r6, #212]	; 0xd4
 8014978:	6863      	ldr	r3, [r4, #4]
 801497a:	2b1f      	cmp	r3, #31
 801497c:	dd46      	ble.n	8014a0c <__register_exitproc+0xc0>
 801497e:	4b2d      	ldr	r3, [pc, #180]	; (8014a34 <__register_exitproc+0xe8>)
 8014980:	b933      	cbnz	r3, 8014990 <__register_exitproc+0x44>
 8014982:	6828      	ldr	r0, [r5, #0]
 8014984:	f7fd f972 	bl	8011c6c <__retarget_lock_release_recursive>
 8014988:	f04f 30ff 	mov.w	r0, #4294967295
 801498c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014990:	208c      	movs	r0, #140	; 0x8c
 8014992:	f7fd f96d 	bl	8011c70 <malloc>
 8014996:	4604      	mov	r4, r0
 8014998:	2800      	cmp	r0, #0
 801499a:	d0f2      	beq.n	8014982 <__register_exitproc+0x36>
 801499c:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 801499e:	6003      	str	r3, [r0, #0]
 80149a0:	2200      	movs	r2, #0
 80149a2:	6042      	str	r2, [r0, #4]
 80149a4:	64b0      	str	r0, [r6, #72]	; 0x48
 80149a6:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 80149aa:	f1b8 0f00 	cmp.w	r8, #0
 80149ae:	d021      	beq.n	80149f4 <__register_exitproc+0xa8>
 80149b0:	f44f 7084 	mov.w	r0, #264	; 0x108
 80149b4:	f7fd f95c 	bl	8011c70 <malloc>
 80149b8:	b390      	cbz	r0, 8014a20 <__register_exitproc+0xd4>
 80149ba:	2300      	movs	r3, #0
 80149bc:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80149c0:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 80149c4:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80149c8:	6862      	ldr	r2, [r4, #4]
 80149ca:	f840 a022 	str.w	sl, [r0, r2, lsl #2]
 80149ce:	2301      	movs	r3, #1
 80149d0:	4093      	lsls	r3, r2
 80149d2:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80149d6:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 80149da:	431a      	orrs	r2, r3
 80149dc:	f1b8 0f02 	cmp.w	r8, #2
 80149e0:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 80149e4:	f8c1 9080 	str.w	r9, [r1, #128]	; 0x80
 80149e8:	bf02      	ittt	eq
 80149ea:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 80149ee:	4313      	orreq	r3, r2
 80149f0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80149f4:	6863      	ldr	r3, [r4, #4]
 80149f6:	6828      	ldr	r0, [r5, #0]
 80149f8:	1c5a      	adds	r2, r3, #1
 80149fa:	3302      	adds	r3, #2
 80149fc:	6062      	str	r2, [r4, #4]
 80149fe:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
 8014a02:	f7fd f933 	bl	8011c6c <__retarget_lock_release_recursive>
 8014a06:	2000      	movs	r0, #0
 8014a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a0c:	f1b8 0f00 	cmp.w	r8, #0
 8014a10:	d0f0      	beq.n	80149f4 <__register_exitproc+0xa8>
 8014a12:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8014a16:	2800      	cmp	r0, #0
 8014a18:	d1d6      	bne.n	80149c8 <__register_exitproc+0x7c>
 8014a1a:	4b06      	ldr	r3, [pc, #24]	; (8014a34 <__register_exitproc+0xe8>)
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d1c7      	bne.n	80149b0 <__register_exitproc+0x64>
 8014a20:	6828      	ldr	r0, [r5, #0]
 8014a22:	f7fd f922 	bl	8011c6a <__retarget_lock_release>
 8014a26:	e7af      	b.n	8014988 <__register_exitproc+0x3c>
 8014a28:	20000518 	.word	0x20000518
 8014a2c:	080182d8 	.word	0x080182d8
 8014a30:	080182dc 	.word	0x080182dc
 8014a34:	08011c71 	.word	0x08011c71

08014a38 <quorem>:
 8014a38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a3c:	6903      	ldr	r3, [r0, #16]
 8014a3e:	690c      	ldr	r4, [r1, #16]
 8014a40:	429c      	cmp	r4, r3
 8014a42:	4680      	mov	r8, r0
 8014a44:	f300 8082 	bgt.w	8014b4c <quorem+0x114>
 8014a48:	3c01      	subs	r4, #1
 8014a4a:	f101 0714 	add.w	r7, r1, #20
 8014a4e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8014a52:	f100 0614 	add.w	r6, r0, #20
 8014a56:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8014a5a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8014a5e:	eb06 030e 	add.w	r3, r6, lr
 8014a62:	3501      	adds	r5, #1
 8014a64:	eb07 090e 	add.w	r9, r7, lr
 8014a68:	9301      	str	r3, [sp, #4]
 8014a6a:	fbb0 f5f5 	udiv	r5, r0, r5
 8014a6e:	b395      	cbz	r5, 8014ad6 <quorem+0x9e>
 8014a70:	f04f 0a00 	mov.w	sl, #0
 8014a74:	4638      	mov	r0, r7
 8014a76:	46b4      	mov	ip, r6
 8014a78:	46d3      	mov	fp, sl
 8014a7a:	f850 2b04 	ldr.w	r2, [r0], #4
 8014a7e:	b293      	uxth	r3, r2
 8014a80:	fb05 a303 	mla	r3, r5, r3, sl
 8014a84:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014a88:	b29b      	uxth	r3, r3
 8014a8a:	ebab 0303 	sub.w	r3, fp, r3
 8014a8e:	0c12      	lsrs	r2, r2, #16
 8014a90:	f8bc b000 	ldrh.w	fp, [ip]
 8014a94:	fb05 a202 	mla	r2, r5, r2, sl
 8014a98:	fa13 f38b 	uxtah	r3, r3, fp
 8014a9c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8014aa0:	fa1f fb82 	uxth.w	fp, r2
 8014aa4:	f8dc 2000 	ldr.w	r2, [ip]
 8014aa8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8014aac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014ab0:	b29b      	uxth	r3, r3
 8014ab2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014ab6:	4581      	cmp	r9, r0
 8014ab8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8014abc:	f84c 3b04 	str.w	r3, [ip], #4
 8014ac0:	d2db      	bcs.n	8014a7a <quorem+0x42>
 8014ac2:	f856 300e 	ldr.w	r3, [r6, lr]
 8014ac6:	b933      	cbnz	r3, 8014ad6 <quorem+0x9e>
 8014ac8:	9b01      	ldr	r3, [sp, #4]
 8014aca:	3b04      	subs	r3, #4
 8014acc:	429e      	cmp	r6, r3
 8014ace:	461a      	mov	r2, r3
 8014ad0:	d330      	bcc.n	8014b34 <quorem+0xfc>
 8014ad2:	f8c8 4010 	str.w	r4, [r8, #16]
 8014ad6:	4640      	mov	r0, r8
 8014ad8:	f001 fb81 	bl	80161de <__mcmp>
 8014adc:	2800      	cmp	r0, #0
 8014ade:	db25      	blt.n	8014b2c <quorem+0xf4>
 8014ae0:	3501      	adds	r5, #1
 8014ae2:	4630      	mov	r0, r6
 8014ae4:	f04f 0e00 	mov.w	lr, #0
 8014ae8:	f857 2b04 	ldr.w	r2, [r7], #4
 8014aec:	f8d0 c000 	ldr.w	ip, [r0]
 8014af0:	b293      	uxth	r3, r2
 8014af2:	ebae 0303 	sub.w	r3, lr, r3
 8014af6:	0c12      	lsrs	r2, r2, #16
 8014af8:	fa13 f38c 	uxtah	r3, r3, ip
 8014afc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8014b00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014b04:	b29b      	uxth	r3, r3
 8014b06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014b0a:	45b9      	cmp	r9, r7
 8014b0c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8014b10:	f840 3b04 	str.w	r3, [r0], #4
 8014b14:	d2e8      	bcs.n	8014ae8 <quorem+0xb0>
 8014b16:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8014b1a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8014b1e:	b92a      	cbnz	r2, 8014b2c <quorem+0xf4>
 8014b20:	3b04      	subs	r3, #4
 8014b22:	429e      	cmp	r6, r3
 8014b24:	461a      	mov	r2, r3
 8014b26:	d30b      	bcc.n	8014b40 <quorem+0x108>
 8014b28:	f8c8 4010 	str.w	r4, [r8, #16]
 8014b2c:	4628      	mov	r0, r5
 8014b2e:	b003      	add	sp, #12
 8014b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b34:	6812      	ldr	r2, [r2, #0]
 8014b36:	3b04      	subs	r3, #4
 8014b38:	2a00      	cmp	r2, #0
 8014b3a:	d1ca      	bne.n	8014ad2 <quorem+0x9a>
 8014b3c:	3c01      	subs	r4, #1
 8014b3e:	e7c5      	b.n	8014acc <quorem+0x94>
 8014b40:	6812      	ldr	r2, [r2, #0]
 8014b42:	3b04      	subs	r3, #4
 8014b44:	2a00      	cmp	r2, #0
 8014b46:	d1ef      	bne.n	8014b28 <quorem+0xf0>
 8014b48:	3c01      	subs	r4, #1
 8014b4a:	e7ea      	b.n	8014b22 <quorem+0xea>
 8014b4c:	2000      	movs	r0, #0
 8014b4e:	e7ee      	b.n	8014b2e <quorem+0xf6>

08014b50 <_dtoa_r>:
 8014b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b54:	ec57 6b10 	vmov	r6, r7, d0
 8014b58:	b097      	sub	sp, #92	; 0x5c
 8014b5a:	e9cd 6700 	strd	r6, r7, [sp]
 8014b5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014b60:	9107      	str	r1, [sp, #28]
 8014b62:	4604      	mov	r4, r0
 8014b64:	920a      	str	r2, [sp, #40]	; 0x28
 8014b66:	930f      	str	r3, [sp, #60]	; 0x3c
 8014b68:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8014b6a:	b93e      	cbnz	r6, 8014b7c <_dtoa_r+0x2c>
 8014b6c:	2010      	movs	r0, #16
 8014b6e:	f7fd f87f 	bl	8011c70 <malloc>
 8014b72:	6260      	str	r0, [r4, #36]	; 0x24
 8014b74:	6046      	str	r6, [r0, #4]
 8014b76:	6086      	str	r6, [r0, #8]
 8014b78:	6006      	str	r6, [r0, #0]
 8014b7a:	60c6      	str	r6, [r0, #12]
 8014b7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014b7e:	6819      	ldr	r1, [r3, #0]
 8014b80:	b151      	cbz	r1, 8014b98 <_dtoa_r+0x48>
 8014b82:	685a      	ldr	r2, [r3, #4]
 8014b84:	604a      	str	r2, [r1, #4]
 8014b86:	2301      	movs	r3, #1
 8014b88:	4093      	lsls	r3, r2
 8014b8a:	608b      	str	r3, [r1, #8]
 8014b8c:	4620      	mov	r0, r4
 8014b8e:	f001 f951 	bl	8015e34 <_Bfree>
 8014b92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014b94:	2200      	movs	r2, #0
 8014b96:	601a      	str	r2, [r3, #0]
 8014b98:	9b01      	ldr	r3, [sp, #4]
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	bfbf      	itttt	lt
 8014b9e:	2301      	movlt	r3, #1
 8014ba0:	602b      	strlt	r3, [r5, #0]
 8014ba2:	9b01      	ldrlt	r3, [sp, #4]
 8014ba4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014ba8:	bfb2      	itee	lt
 8014baa:	9301      	strlt	r3, [sp, #4]
 8014bac:	2300      	movge	r3, #0
 8014bae:	602b      	strge	r3, [r5, #0]
 8014bb0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014bb4:	4ba8      	ldr	r3, [pc, #672]	; (8014e58 <_dtoa_r+0x308>)
 8014bb6:	ea33 0308 	bics.w	r3, r3, r8
 8014bba:	d11b      	bne.n	8014bf4 <_dtoa_r+0xa4>
 8014bbc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014bbe:	f242 730f 	movw	r3, #9999	; 0x270f
 8014bc2:	6013      	str	r3, [r2, #0]
 8014bc4:	9b00      	ldr	r3, [sp, #0]
 8014bc6:	b923      	cbnz	r3, 8014bd2 <_dtoa_r+0x82>
 8014bc8:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8014bcc:	2800      	cmp	r0, #0
 8014bce:	f000 8578 	beq.w	80156c2 <_dtoa_r+0xb72>
 8014bd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014bd4:	b953      	cbnz	r3, 8014bec <_dtoa_r+0x9c>
 8014bd6:	4ba1      	ldr	r3, [pc, #644]	; (8014e5c <_dtoa_r+0x30c>)
 8014bd8:	e021      	b.n	8014c1e <_dtoa_r+0xce>
 8014bda:	4ba1      	ldr	r3, [pc, #644]	; (8014e60 <_dtoa_r+0x310>)
 8014bdc:	9302      	str	r3, [sp, #8]
 8014bde:	3308      	adds	r3, #8
 8014be0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014be2:	6013      	str	r3, [r2, #0]
 8014be4:	9802      	ldr	r0, [sp, #8]
 8014be6:	b017      	add	sp, #92	; 0x5c
 8014be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bec:	4b9b      	ldr	r3, [pc, #620]	; (8014e5c <_dtoa_r+0x30c>)
 8014bee:	9302      	str	r3, [sp, #8]
 8014bf0:	3303      	adds	r3, #3
 8014bf2:	e7f5      	b.n	8014be0 <_dtoa_r+0x90>
 8014bf4:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014bf8:	2200      	movs	r2, #0
 8014bfa:	2300      	movs	r3, #0
 8014bfc:	4630      	mov	r0, r6
 8014bfe:	4639      	mov	r1, r7
 8014c00:	f7f2 fac0 	bl	8007184 <__aeabi_dcmpeq>
 8014c04:	4681      	mov	r9, r0
 8014c06:	b160      	cbz	r0, 8014c22 <_dtoa_r+0xd2>
 8014c08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014c0a:	2301      	movs	r3, #1
 8014c0c:	6013      	str	r3, [r2, #0]
 8014c0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	f000 8553 	beq.w	80156bc <_dtoa_r+0xb6c>
 8014c16:	4b93      	ldr	r3, [pc, #588]	; (8014e64 <_dtoa_r+0x314>)
 8014c18:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014c1a:	6013      	str	r3, [r2, #0]
 8014c1c:	3b01      	subs	r3, #1
 8014c1e:	9302      	str	r3, [sp, #8]
 8014c20:	e7e0      	b.n	8014be4 <_dtoa_r+0x94>
 8014c22:	aa14      	add	r2, sp, #80	; 0x50
 8014c24:	a915      	add	r1, sp, #84	; 0x54
 8014c26:	ec47 6b10 	vmov	d0, r6, r7
 8014c2a:	4620      	mov	r0, r4
 8014c2c:	f001 fb4f 	bl	80162ce <__d2b>
 8014c30:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8014c34:	4682      	mov	sl, r0
 8014c36:	2d00      	cmp	r5, #0
 8014c38:	d07e      	beq.n	8014d38 <_dtoa_r+0x1e8>
 8014c3a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014c3e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8014c42:	4630      	mov	r0, r6
 8014c44:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8014c48:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014c4c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8014c50:	2200      	movs	r2, #0
 8014c52:	4b85      	ldr	r3, [pc, #532]	; (8014e68 <_dtoa_r+0x318>)
 8014c54:	f7f1 fe7a 	bl	800694c <__aeabi_dsub>
 8014c58:	a379      	add	r3, pc, #484	; (adr r3, 8014e40 <_dtoa_r+0x2f0>)
 8014c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c5e:	f7f2 f829 	bl	8006cb4 <__aeabi_dmul>
 8014c62:	a379      	add	r3, pc, #484	; (adr r3, 8014e48 <_dtoa_r+0x2f8>)
 8014c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c68:	f7f1 fe72 	bl	8006950 <__adddf3>
 8014c6c:	4606      	mov	r6, r0
 8014c6e:	4628      	mov	r0, r5
 8014c70:	460f      	mov	r7, r1
 8014c72:	f7f1 ffb9 	bl	8006be8 <__aeabi_i2d>
 8014c76:	a376      	add	r3, pc, #472	; (adr r3, 8014e50 <_dtoa_r+0x300>)
 8014c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c7c:	f7f2 f81a 	bl	8006cb4 <__aeabi_dmul>
 8014c80:	4602      	mov	r2, r0
 8014c82:	460b      	mov	r3, r1
 8014c84:	4630      	mov	r0, r6
 8014c86:	4639      	mov	r1, r7
 8014c88:	f7f1 fe62 	bl	8006950 <__adddf3>
 8014c8c:	4606      	mov	r6, r0
 8014c8e:	460f      	mov	r7, r1
 8014c90:	f7f2 fac0 	bl	8007214 <__aeabi_d2iz>
 8014c94:	2200      	movs	r2, #0
 8014c96:	4683      	mov	fp, r0
 8014c98:	2300      	movs	r3, #0
 8014c9a:	4630      	mov	r0, r6
 8014c9c:	4639      	mov	r1, r7
 8014c9e:	f7f2 fa7b 	bl	8007198 <__aeabi_dcmplt>
 8014ca2:	b158      	cbz	r0, 8014cbc <_dtoa_r+0x16c>
 8014ca4:	4658      	mov	r0, fp
 8014ca6:	f7f1 ff9f 	bl	8006be8 <__aeabi_i2d>
 8014caa:	4602      	mov	r2, r0
 8014cac:	460b      	mov	r3, r1
 8014cae:	4630      	mov	r0, r6
 8014cb0:	4639      	mov	r1, r7
 8014cb2:	f7f2 fa67 	bl	8007184 <__aeabi_dcmpeq>
 8014cb6:	b908      	cbnz	r0, 8014cbc <_dtoa_r+0x16c>
 8014cb8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014cbc:	f1bb 0f16 	cmp.w	fp, #22
 8014cc0:	d859      	bhi.n	8014d76 <_dtoa_r+0x226>
 8014cc2:	496a      	ldr	r1, [pc, #424]	; (8014e6c <_dtoa_r+0x31c>)
 8014cc4:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8014cc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014ccc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014cd0:	f7f2 fa80 	bl	80071d4 <__aeabi_dcmpgt>
 8014cd4:	2800      	cmp	r0, #0
 8014cd6:	d050      	beq.n	8014d7a <_dtoa_r+0x22a>
 8014cd8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014cdc:	2300      	movs	r3, #0
 8014cde:	930e      	str	r3, [sp, #56]	; 0x38
 8014ce0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014ce2:	1b5d      	subs	r5, r3, r5
 8014ce4:	1e6b      	subs	r3, r5, #1
 8014ce6:	9306      	str	r3, [sp, #24]
 8014ce8:	bf45      	ittet	mi
 8014cea:	f1c5 0301 	rsbmi	r3, r5, #1
 8014cee:	9305      	strmi	r3, [sp, #20]
 8014cf0:	2300      	movpl	r3, #0
 8014cf2:	2300      	movmi	r3, #0
 8014cf4:	bf4c      	ite	mi
 8014cf6:	9306      	strmi	r3, [sp, #24]
 8014cf8:	9305      	strpl	r3, [sp, #20]
 8014cfa:	f1bb 0f00 	cmp.w	fp, #0
 8014cfe:	db3e      	blt.n	8014d7e <_dtoa_r+0x22e>
 8014d00:	9b06      	ldr	r3, [sp, #24]
 8014d02:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8014d06:	445b      	add	r3, fp
 8014d08:	9306      	str	r3, [sp, #24]
 8014d0a:	2300      	movs	r3, #0
 8014d0c:	9308      	str	r3, [sp, #32]
 8014d0e:	9b07      	ldr	r3, [sp, #28]
 8014d10:	2b09      	cmp	r3, #9
 8014d12:	f200 80af 	bhi.w	8014e74 <_dtoa_r+0x324>
 8014d16:	2b05      	cmp	r3, #5
 8014d18:	bfc4      	itt	gt
 8014d1a:	3b04      	subgt	r3, #4
 8014d1c:	9307      	strgt	r3, [sp, #28]
 8014d1e:	9b07      	ldr	r3, [sp, #28]
 8014d20:	f1a3 0302 	sub.w	r3, r3, #2
 8014d24:	bfcc      	ite	gt
 8014d26:	2600      	movgt	r6, #0
 8014d28:	2601      	movle	r6, #1
 8014d2a:	2b03      	cmp	r3, #3
 8014d2c:	f200 80ae 	bhi.w	8014e8c <_dtoa_r+0x33c>
 8014d30:	e8df f003 	tbb	[pc, r3]
 8014d34:	772f8482 	.word	0x772f8482
 8014d38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014d3a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8014d3c:	441d      	add	r5, r3
 8014d3e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8014d42:	2b20      	cmp	r3, #32
 8014d44:	dd11      	ble.n	8014d6a <_dtoa_r+0x21a>
 8014d46:	9a00      	ldr	r2, [sp, #0]
 8014d48:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8014d4c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8014d50:	fa22 f000 	lsr.w	r0, r2, r0
 8014d54:	fa08 f303 	lsl.w	r3, r8, r3
 8014d58:	4318      	orrs	r0, r3
 8014d5a:	f7f1 ff35 	bl	8006bc8 <__aeabi_ui2d>
 8014d5e:	2301      	movs	r3, #1
 8014d60:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8014d64:	3d01      	subs	r5, #1
 8014d66:	9312      	str	r3, [sp, #72]	; 0x48
 8014d68:	e772      	b.n	8014c50 <_dtoa_r+0x100>
 8014d6a:	f1c3 0020 	rsb	r0, r3, #32
 8014d6e:	9b00      	ldr	r3, [sp, #0]
 8014d70:	fa03 f000 	lsl.w	r0, r3, r0
 8014d74:	e7f1      	b.n	8014d5a <_dtoa_r+0x20a>
 8014d76:	2301      	movs	r3, #1
 8014d78:	e7b1      	b.n	8014cde <_dtoa_r+0x18e>
 8014d7a:	900e      	str	r0, [sp, #56]	; 0x38
 8014d7c:	e7b0      	b.n	8014ce0 <_dtoa_r+0x190>
 8014d7e:	9b05      	ldr	r3, [sp, #20]
 8014d80:	eba3 030b 	sub.w	r3, r3, fp
 8014d84:	9305      	str	r3, [sp, #20]
 8014d86:	f1cb 0300 	rsb	r3, fp, #0
 8014d8a:	9308      	str	r3, [sp, #32]
 8014d8c:	2300      	movs	r3, #0
 8014d8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014d90:	e7bd      	b.n	8014d0e <_dtoa_r+0x1be>
 8014d92:	2301      	movs	r3, #1
 8014d94:	9309      	str	r3, [sp, #36]	; 0x24
 8014d96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	dd7a      	ble.n	8014e92 <_dtoa_r+0x342>
 8014d9c:	9304      	str	r3, [sp, #16]
 8014d9e:	9303      	str	r3, [sp, #12]
 8014da0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8014da2:	2200      	movs	r2, #0
 8014da4:	606a      	str	r2, [r5, #4]
 8014da6:	2104      	movs	r1, #4
 8014da8:	f101 0214 	add.w	r2, r1, #20
 8014dac:	429a      	cmp	r2, r3
 8014dae:	d975      	bls.n	8014e9c <_dtoa_r+0x34c>
 8014db0:	6869      	ldr	r1, [r5, #4]
 8014db2:	4620      	mov	r0, r4
 8014db4:	f001 f80a 	bl	8015dcc <_Balloc>
 8014db8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014dba:	6028      	str	r0, [r5, #0]
 8014dbc:	681b      	ldr	r3, [r3, #0]
 8014dbe:	9302      	str	r3, [sp, #8]
 8014dc0:	9b03      	ldr	r3, [sp, #12]
 8014dc2:	2b0e      	cmp	r3, #14
 8014dc4:	f200 80e5 	bhi.w	8014f92 <_dtoa_r+0x442>
 8014dc8:	2e00      	cmp	r6, #0
 8014dca:	f000 80e2 	beq.w	8014f92 <_dtoa_r+0x442>
 8014dce:	ed9d 7b00 	vldr	d7, [sp]
 8014dd2:	f1bb 0f00 	cmp.w	fp, #0
 8014dd6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8014dda:	dd74      	ble.n	8014ec6 <_dtoa_r+0x376>
 8014ddc:	4a23      	ldr	r2, [pc, #140]	; (8014e6c <_dtoa_r+0x31c>)
 8014dde:	f00b 030f 	and.w	r3, fp, #15
 8014de2:	ea4f 162b 	mov.w	r6, fp, asr #4
 8014de6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014dea:	06f0      	lsls	r0, r6, #27
 8014dec:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014df0:	d559      	bpl.n	8014ea6 <_dtoa_r+0x356>
 8014df2:	4b1f      	ldr	r3, [pc, #124]	; (8014e70 <_dtoa_r+0x320>)
 8014df4:	ec51 0b17 	vmov	r0, r1, d7
 8014df8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014dfc:	f7f2 f884 	bl	8006f08 <__aeabi_ddiv>
 8014e00:	e9cd 0100 	strd	r0, r1, [sp]
 8014e04:	f006 060f 	and.w	r6, r6, #15
 8014e08:	2503      	movs	r5, #3
 8014e0a:	4f19      	ldr	r7, [pc, #100]	; (8014e70 <_dtoa_r+0x320>)
 8014e0c:	2e00      	cmp	r6, #0
 8014e0e:	d14c      	bne.n	8014eaa <_dtoa_r+0x35a>
 8014e10:	4642      	mov	r2, r8
 8014e12:	464b      	mov	r3, r9
 8014e14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014e18:	f7f2 f876 	bl	8006f08 <__aeabi_ddiv>
 8014e1c:	e9cd 0100 	strd	r0, r1, [sp]
 8014e20:	e06a      	b.n	8014ef8 <_dtoa_r+0x3a8>
 8014e22:	2301      	movs	r3, #1
 8014e24:	9309      	str	r3, [sp, #36]	; 0x24
 8014e26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e28:	445b      	add	r3, fp
 8014e2a:	9304      	str	r3, [sp, #16]
 8014e2c:	3301      	adds	r3, #1
 8014e2e:	2b01      	cmp	r3, #1
 8014e30:	9303      	str	r3, [sp, #12]
 8014e32:	bfb8      	it	lt
 8014e34:	2301      	movlt	r3, #1
 8014e36:	e7b3      	b.n	8014da0 <_dtoa_r+0x250>
 8014e38:	2300      	movs	r3, #0
 8014e3a:	e7ab      	b.n	8014d94 <_dtoa_r+0x244>
 8014e3c:	2300      	movs	r3, #0
 8014e3e:	e7f1      	b.n	8014e24 <_dtoa_r+0x2d4>
 8014e40:	636f4361 	.word	0x636f4361
 8014e44:	3fd287a7 	.word	0x3fd287a7
 8014e48:	8b60c8b3 	.word	0x8b60c8b3
 8014e4c:	3fc68a28 	.word	0x3fc68a28
 8014e50:	509f79fb 	.word	0x509f79fb
 8014e54:	3fd34413 	.word	0x3fd34413
 8014e58:	7ff00000 	.word	0x7ff00000
 8014e5c:	0801835f 	.word	0x0801835f
 8014e60:	08018356 	.word	0x08018356
 8014e64:	08018315 	.word	0x08018315
 8014e68:	3ff80000 	.word	0x3ff80000
 8014e6c:	080183f8 	.word	0x080183f8
 8014e70:	080183d0 	.word	0x080183d0
 8014e74:	2601      	movs	r6, #1
 8014e76:	2300      	movs	r3, #0
 8014e78:	9307      	str	r3, [sp, #28]
 8014e7a:	9609      	str	r6, [sp, #36]	; 0x24
 8014e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8014e80:	9304      	str	r3, [sp, #16]
 8014e82:	9303      	str	r3, [sp, #12]
 8014e84:	2200      	movs	r2, #0
 8014e86:	2312      	movs	r3, #18
 8014e88:	920a      	str	r2, [sp, #40]	; 0x28
 8014e8a:	e789      	b.n	8014da0 <_dtoa_r+0x250>
 8014e8c:	2301      	movs	r3, #1
 8014e8e:	9309      	str	r3, [sp, #36]	; 0x24
 8014e90:	e7f4      	b.n	8014e7c <_dtoa_r+0x32c>
 8014e92:	2301      	movs	r3, #1
 8014e94:	9304      	str	r3, [sp, #16]
 8014e96:	9303      	str	r3, [sp, #12]
 8014e98:	461a      	mov	r2, r3
 8014e9a:	e7f5      	b.n	8014e88 <_dtoa_r+0x338>
 8014e9c:	686a      	ldr	r2, [r5, #4]
 8014e9e:	3201      	adds	r2, #1
 8014ea0:	606a      	str	r2, [r5, #4]
 8014ea2:	0049      	lsls	r1, r1, #1
 8014ea4:	e780      	b.n	8014da8 <_dtoa_r+0x258>
 8014ea6:	2502      	movs	r5, #2
 8014ea8:	e7af      	b.n	8014e0a <_dtoa_r+0x2ba>
 8014eaa:	07f1      	lsls	r1, r6, #31
 8014eac:	d508      	bpl.n	8014ec0 <_dtoa_r+0x370>
 8014eae:	4640      	mov	r0, r8
 8014eb0:	4649      	mov	r1, r9
 8014eb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014eb6:	f7f1 fefd 	bl	8006cb4 <__aeabi_dmul>
 8014eba:	3501      	adds	r5, #1
 8014ebc:	4680      	mov	r8, r0
 8014ebe:	4689      	mov	r9, r1
 8014ec0:	1076      	asrs	r6, r6, #1
 8014ec2:	3708      	adds	r7, #8
 8014ec4:	e7a2      	b.n	8014e0c <_dtoa_r+0x2bc>
 8014ec6:	f000 809d 	beq.w	8015004 <_dtoa_r+0x4b4>
 8014eca:	f1cb 0600 	rsb	r6, fp, #0
 8014ece:	4b9f      	ldr	r3, [pc, #636]	; (801514c <_dtoa_r+0x5fc>)
 8014ed0:	4f9f      	ldr	r7, [pc, #636]	; (8015150 <_dtoa_r+0x600>)
 8014ed2:	f006 020f 	and.w	r2, r6, #15
 8014ed6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ede:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014ee2:	f7f1 fee7 	bl	8006cb4 <__aeabi_dmul>
 8014ee6:	e9cd 0100 	strd	r0, r1, [sp]
 8014eea:	1136      	asrs	r6, r6, #4
 8014eec:	2300      	movs	r3, #0
 8014eee:	2502      	movs	r5, #2
 8014ef0:	2e00      	cmp	r6, #0
 8014ef2:	d17c      	bne.n	8014fee <_dtoa_r+0x49e>
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d191      	bne.n	8014e1c <_dtoa_r+0x2cc>
 8014ef8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	f000 8084 	beq.w	8015008 <_dtoa_r+0x4b8>
 8014f00:	e9dd 8900 	ldrd	r8, r9, [sp]
 8014f04:	2200      	movs	r2, #0
 8014f06:	4b93      	ldr	r3, [pc, #588]	; (8015154 <_dtoa_r+0x604>)
 8014f08:	4640      	mov	r0, r8
 8014f0a:	4649      	mov	r1, r9
 8014f0c:	f7f2 f944 	bl	8007198 <__aeabi_dcmplt>
 8014f10:	2800      	cmp	r0, #0
 8014f12:	d079      	beq.n	8015008 <_dtoa_r+0x4b8>
 8014f14:	9b03      	ldr	r3, [sp, #12]
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	d076      	beq.n	8015008 <_dtoa_r+0x4b8>
 8014f1a:	9b04      	ldr	r3, [sp, #16]
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	dd34      	ble.n	8014f8a <_dtoa_r+0x43a>
 8014f20:	2200      	movs	r2, #0
 8014f22:	4b8d      	ldr	r3, [pc, #564]	; (8015158 <_dtoa_r+0x608>)
 8014f24:	4640      	mov	r0, r8
 8014f26:	4649      	mov	r1, r9
 8014f28:	f7f1 fec4 	bl	8006cb4 <__aeabi_dmul>
 8014f2c:	e9cd 0100 	strd	r0, r1, [sp]
 8014f30:	9e04      	ldr	r6, [sp, #16]
 8014f32:	f10b 37ff 	add.w	r7, fp, #4294967295
 8014f36:	3501      	adds	r5, #1
 8014f38:	4628      	mov	r0, r5
 8014f3a:	f7f1 fe55 	bl	8006be8 <__aeabi_i2d>
 8014f3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014f42:	f7f1 feb7 	bl	8006cb4 <__aeabi_dmul>
 8014f46:	2200      	movs	r2, #0
 8014f48:	4b84      	ldr	r3, [pc, #528]	; (801515c <_dtoa_r+0x60c>)
 8014f4a:	f7f1 fd01 	bl	8006950 <__adddf3>
 8014f4e:	4680      	mov	r8, r0
 8014f50:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8014f54:	2e00      	cmp	r6, #0
 8014f56:	d15a      	bne.n	801500e <_dtoa_r+0x4be>
 8014f58:	2200      	movs	r2, #0
 8014f5a:	4b81      	ldr	r3, [pc, #516]	; (8015160 <_dtoa_r+0x610>)
 8014f5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014f60:	f7f1 fcf4 	bl	800694c <__aeabi_dsub>
 8014f64:	4642      	mov	r2, r8
 8014f66:	464b      	mov	r3, r9
 8014f68:	e9cd 0100 	strd	r0, r1, [sp]
 8014f6c:	f7f2 f932 	bl	80071d4 <__aeabi_dcmpgt>
 8014f70:	2800      	cmp	r0, #0
 8014f72:	f040 829b 	bne.w	80154ac <_dtoa_r+0x95c>
 8014f76:	4642      	mov	r2, r8
 8014f78:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014f7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014f80:	f7f2 f90a 	bl	8007198 <__aeabi_dcmplt>
 8014f84:	2800      	cmp	r0, #0
 8014f86:	f040 828f 	bne.w	80154a8 <_dtoa_r+0x958>
 8014f8a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014f8e:	e9cd 2300 	strd	r2, r3, [sp]
 8014f92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014f94:	2b00      	cmp	r3, #0
 8014f96:	f2c0 8150 	blt.w	801523a <_dtoa_r+0x6ea>
 8014f9a:	f1bb 0f0e 	cmp.w	fp, #14
 8014f9e:	f300 814c 	bgt.w	801523a <_dtoa_r+0x6ea>
 8014fa2:	4b6a      	ldr	r3, [pc, #424]	; (801514c <_dtoa_r+0x5fc>)
 8014fa4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8014fa8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014fac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	f280 80da 	bge.w	8015168 <_dtoa_r+0x618>
 8014fb4:	9b03      	ldr	r3, [sp, #12]
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	f300 80d6 	bgt.w	8015168 <_dtoa_r+0x618>
 8014fbc:	f040 8273 	bne.w	80154a6 <_dtoa_r+0x956>
 8014fc0:	2200      	movs	r2, #0
 8014fc2:	4b67      	ldr	r3, [pc, #412]	; (8015160 <_dtoa_r+0x610>)
 8014fc4:	4640      	mov	r0, r8
 8014fc6:	4649      	mov	r1, r9
 8014fc8:	f7f1 fe74 	bl	8006cb4 <__aeabi_dmul>
 8014fcc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014fd0:	f7f2 f8f6 	bl	80071c0 <__aeabi_dcmpge>
 8014fd4:	9e03      	ldr	r6, [sp, #12]
 8014fd6:	4637      	mov	r7, r6
 8014fd8:	2800      	cmp	r0, #0
 8014fda:	f040 824a 	bne.w	8015472 <_dtoa_r+0x922>
 8014fde:	9b02      	ldr	r3, [sp, #8]
 8014fe0:	9a02      	ldr	r2, [sp, #8]
 8014fe2:	1c5d      	adds	r5, r3, #1
 8014fe4:	2331      	movs	r3, #49	; 0x31
 8014fe6:	7013      	strb	r3, [r2, #0]
 8014fe8:	f10b 0b01 	add.w	fp, fp, #1
 8014fec:	e245      	b.n	801547a <_dtoa_r+0x92a>
 8014fee:	07f2      	lsls	r2, r6, #31
 8014ff0:	d505      	bpl.n	8014ffe <_dtoa_r+0x4ae>
 8014ff2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014ff6:	f7f1 fe5d 	bl	8006cb4 <__aeabi_dmul>
 8014ffa:	3501      	adds	r5, #1
 8014ffc:	2301      	movs	r3, #1
 8014ffe:	1076      	asrs	r6, r6, #1
 8015000:	3708      	adds	r7, #8
 8015002:	e775      	b.n	8014ef0 <_dtoa_r+0x3a0>
 8015004:	2502      	movs	r5, #2
 8015006:	e777      	b.n	8014ef8 <_dtoa_r+0x3a8>
 8015008:	465f      	mov	r7, fp
 801500a:	9e03      	ldr	r6, [sp, #12]
 801500c:	e794      	b.n	8014f38 <_dtoa_r+0x3e8>
 801500e:	9a02      	ldr	r2, [sp, #8]
 8015010:	4b4e      	ldr	r3, [pc, #312]	; (801514c <_dtoa_r+0x5fc>)
 8015012:	4432      	add	r2, r6
 8015014:	9213      	str	r2, [sp, #76]	; 0x4c
 8015016:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015018:	1e71      	subs	r1, r6, #1
 801501a:	2a00      	cmp	r2, #0
 801501c:	d048      	beq.n	80150b0 <_dtoa_r+0x560>
 801501e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8015022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015026:	2000      	movs	r0, #0
 8015028:	494e      	ldr	r1, [pc, #312]	; (8015164 <_dtoa_r+0x614>)
 801502a:	f7f1 ff6d 	bl	8006f08 <__aeabi_ddiv>
 801502e:	4642      	mov	r2, r8
 8015030:	464b      	mov	r3, r9
 8015032:	f7f1 fc8b 	bl	800694c <__aeabi_dsub>
 8015036:	9d02      	ldr	r5, [sp, #8]
 8015038:	4680      	mov	r8, r0
 801503a:	4689      	mov	r9, r1
 801503c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015040:	f7f2 f8e8 	bl	8007214 <__aeabi_d2iz>
 8015044:	4606      	mov	r6, r0
 8015046:	f7f1 fdcf 	bl	8006be8 <__aeabi_i2d>
 801504a:	4602      	mov	r2, r0
 801504c:	460b      	mov	r3, r1
 801504e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015052:	f7f1 fc7b 	bl	800694c <__aeabi_dsub>
 8015056:	3630      	adds	r6, #48	; 0x30
 8015058:	f805 6b01 	strb.w	r6, [r5], #1
 801505c:	4642      	mov	r2, r8
 801505e:	464b      	mov	r3, r9
 8015060:	e9cd 0100 	strd	r0, r1, [sp]
 8015064:	f7f2 f898 	bl	8007198 <__aeabi_dcmplt>
 8015068:	2800      	cmp	r0, #0
 801506a:	d165      	bne.n	8015138 <_dtoa_r+0x5e8>
 801506c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015070:	2000      	movs	r0, #0
 8015072:	4938      	ldr	r1, [pc, #224]	; (8015154 <_dtoa_r+0x604>)
 8015074:	f7f1 fc6a 	bl	800694c <__aeabi_dsub>
 8015078:	4642      	mov	r2, r8
 801507a:	464b      	mov	r3, r9
 801507c:	f7f2 f88c 	bl	8007198 <__aeabi_dcmplt>
 8015080:	2800      	cmp	r0, #0
 8015082:	f040 80ba 	bne.w	80151fa <_dtoa_r+0x6aa>
 8015086:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015088:	429d      	cmp	r5, r3
 801508a:	f43f af7e 	beq.w	8014f8a <_dtoa_r+0x43a>
 801508e:	2200      	movs	r2, #0
 8015090:	4b31      	ldr	r3, [pc, #196]	; (8015158 <_dtoa_r+0x608>)
 8015092:	4640      	mov	r0, r8
 8015094:	4649      	mov	r1, r9
 8015096:	f7f1 fe0d 	bl	8006cb4 <__aeabi_dmul>
 801509a:	2200      	movs	r2, #0
 801509c:	4680      	mov	r8, r0
 801509e:	4689      	mov	r9, r1
 80150a0:	4b2d      	ldr	r3, [pc, #180]	; (8015158 <_dtoa_r+0x608>)
 80150a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80150a6:	f7f1 fe05 	bl	8006cb4 <__aeabi_dmul>
 80150aa:	e9cd 0100 	strd	r0, r1, [sp]
 80150ae:	e7c5      	b.n	801503c <_dtoa_r+0x4ec>
 80150b0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80150b4:	4642      	mov	r2, r8
 80150b6:	464b      	mov	r3, r9
 80150b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80150bc:	f7f1 fdfa 	bl	8006cb4 <__aeabi_dmul>
 80150c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80150c4:	9d02      	ldr	r5, [sp, #8]
 80150c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80150ca:	f7f2 f8a3 	bl	8007214 <__aeabi_d2iz>
 80150ce:	4606      	mov	r6, r0
 80150d0:	f7f1 fd8a 	bl	8006be8 <__aeabi_i2d>
 80150d4:	3630      	adds	r6, #48	; 0x30
 80150d6:	4602      	mov	r2, r0
 80150d8:	460b      	mov	r3, r1
 80150da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80150de:	f7f1 fc35 	bl	800694c <__aeabi_dsub>
 80150e2:	f805 6b01 	strb.w	r6, [r5], #1
 80150e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80150e8:	42ab      	cmp	r3, r5
 80150ea:	4680      	mov	r8, r0
 80150ec:	4689      	mov	r9, r1
 80150ee:	f04f 0200 	mov.w	r2, #0
 80150f2:	d125      	bne.n	8015140 <_dtoa_r+0x5f0>
 80150f4:	4b1b      	ldr	r3, [pc, #108]	; (8015164 <_dtoa_r+0x614>)
 80150f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80150fa:	f7f1 fc29 	bl	8006950 <__adddf3>
 80150fe:	4602      	mov	r2, r0
 8015100:	460b      	mov	r3, r1
 8015102:	4640      	mov	r0, r8
 8015104:	4649      	mov	r1, r9
 8015106:	f7f2 f865 	bl	80071d4 <__aeabi_dcmpgt>
 801510a:	2800      	cmp	r0, #0
 801510c:	d175      	bne.n	80151fa <_dtoa_r+0x6aa>
 801510e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015112:	2000      	movs	r0, #0
 8015114:	4913      	ldr	r1, [pc, #76]	; (8015164 <_dtoa_r+0x614>)
 8015116:	f7f1 fc19 	bl	800694c <__aeabi_dsub>
 801511a:	4602      	mov	r2, r0
 801511c:	460b      	mov	r3, r1
 801511e:	4640      	mov	r0, r8
 8015120:	4649      	mov	r1, r9
 8015122:	f7f2 f839 	bl	8007198 <__aeabi_dcmplt>
 8015126:	2800      	cmp	r0, #0
 8015128:	f43f af2f 	beq.w	8014f8a <_dtoa_r+0x43a>
 801512c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015130:	2b30      	cmp	r3, #48	; 0x30
 8015132:	f105 32ff 	add.w	r2, r5, #4294967295
 8015136:	d001      	beq.n	801513c <_dtoa_r+0x5ec>
 8015138:	46bb      	mov	fp, r7
 801513a:	e04d      	b.n	80151d8 <_dtoa_r+0x688>
 801513c:	4615      	mov	r5, r2
 801513e:	e7f5      	b.n	801512c <_dtoa_r+0x5dc>
 8015140:	4b05      	ldr	r3, [pc, #20]	; (8015158 <_dtoa_r+0x608>)
 8015142:	f7f1 fdb7 	bl	8006cb4 <__aeabi_dmul>
 8015146:	e9cd 0100 	strd	r0, r1, [sp]
 801514a:	e7bc      	b.n	80150c6 <_dtoa_r+0x576>
 801514c:	080183f8 	.word	0x080183f8
 8015150:	080183d0 	.word	0x080183d0
 8015154:	3ff00000 	.word	0x3ff00000
 8015158:	40240000 	.word	0x40240000
 801515c:	401c0000 	.word	0x401c0000
 8015160:	40140000 	.word	0x40140000
 8015164:	3fe00000 	.word	0x3fe00000
 8015168:	e9dd 6700 	ldrd	r6, r7, [sp]
 801516c:	9d02      	ldr	r5, [sp, #8]
 801516e:	4642      	mov	r2, r8
 8015170:	464b      	mov	r3, r9
 8015172:	4630      	mov	r0, r6
 8015174:	4639      	mov	r1, r7
 8015176:	f7f1 fec7 	bl	8006f08 <__aeabi_ddiv>
 801517a:	f7f2 f84b 	bl	8007214 <__aeabi_d2iz>
 801517e:	9000      	str	r0, [sp, #0]
 8015180:	f7f1 fd32 	bl	8006be8 <__aeabi_i2d>
 8015184:	4642      	mov	r2, r8
 8015186:	464b      	mov	r3, r9
 8015188:	f7f1 fd94 	bl	8006cb4 <__aeabi_dmul>
 801518c:	4602      	mov	r2, r0
 801518e:	460b      	mov	r3, r1
 8015190:	4630      	mov	r0, r6
 8015192:	4639      	mov	r1, r7
 8015194:	f7f1 fbda 	bl	800694c <__aeabi_dsub>
 8015198:	9e00      	ldr	r6, [sp, #0]
 801519a:	9f03      	ldr	r7, [sp, #12]
 801519c:	3630      	adds	r6, #48	; 0x30
 801519e:	f805 6b01 	strb.w	r6, [r5], #1
 80151a2:	9e02      	ldr	r6, [sp, #8]
 80151a4:	1bae      	subs	r6, r5, r6
 80151a6:	42b7      	cmp	r7, r6
 80151a8:	4602      	mov	r2, r0
 80151aa:	460b      	mov	r3, r1
 80151ac:	d138      	bne.n	8015220 <_dtoa_r+0x6d0>
 80151ae:	f7f1 fbcf 	bl	8006950 <__adddf3>
 80151b2:	4606      	mov	r6, r0
 80151b4:	460f      	mov	r7, r1
 80151b6:	4602      	mov	r2, r0
 80151b8:	460b      	mov	r3, r1
 80151ba:	4640      	mov	r0, r8
 80151bc:	4649      	mov	r1, r9
 80151be:	f7f1 ffeb 	bl	8007198 <__aeabi_dcmplt>
 80151c2:	b9c8      	cbnz	r0, 80151f8 <_dtoa_r+0x6a8>
 80151c4:	4632      	mov	r2, r6
 80151c6:	463b      	mov	r3, r7
 80151c8:	4640      	mov	r0, r8
 80151ca:	4649      	mov	r1, r9
 80151cc:	f7f1 ffda 	bl	8007184 <__aeabi_dcmpeq>
 80151d0:	b110      	cbz	r0, 80151d8 <_dtoa_r+0x688>
 80151d2:	9b00      	ldr	r3, [sp, #0]
 80151d4:	07db      	lsls	r3, r3, #31
 80151d6:	d40f      	bmi.n	80151f8 <_dtoa_r+0x6a8>
 80151d8:	4651      	mov	r1, sl
 80151da:	4620      	mov	r0, r4
 80151dc:	f000 fe2a 	bl	8015e34 <_Bfree>
 80151e0:	2300      	movs	r3, #0
 80151e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80151e4:	702b      	strb	r3, [r5, #0]
 80151e6:	f10b 0301 	add.w	r3, fp, #1
 80151ea:	6013      	str	r3, [r2, #0]
 80151ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	f43f acf8 	beq.w	8014be4 <_dtoa_r+0x94>
 80151f4:	601d      	str	r5, [r3, #0]
 80151f6:	e4f5      	b.n	8014be4 <_dtoa_r+0x94>
 80151f8:	465f      	mov	r7, fp
 80151fa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80151fe:	2a39      	cmp	r2, #57	; 0x39
 8015200:	f105 33ff 	add.w	r3, r5, #4294967295
 8015204:	d106      	bne.n	8015214 <_dtoa_r+0x6c4>
 8015206:	9a02      	ldr	r2, [sp, #8]
 8015208:	429a      	cmp	r2, r3
 801520a:	d107      	bne.n	801521c <_dtoa_r+0x6cc>
 801520c:	2330      	movs	r3, #48	; 0x30
 801520e:	7013      	strb	r3, [r2, #0]
 8015210:	3701      	adds	r7, #1
 8015212:	4613      	mov	r3, r2
 8015214:	781a      	ldrb	r2, [r3, #0]
 8015216:	3201      	adds	r2, #1
 8015218:	701a      	strb	r2, [r3, #0]
 801521a:	e78d      	b.n	8015138 <_dtoa_r+0x5e8>
 801521c:	461d      	mov	r5, r3
 801521e:	e7ec      	b.n	80151fa <_dtoa_r+0x6aa>
 8015220:	2200      	movs	r2, #0
 8015222:	4ba4      	ldr	r3, [pc, #656]	; (80154b4 <_dtoa_r+0x964>)
 8015224:	f7f1 fd46 	bl	8006cb4 <__aeabi_dmul>
 8015228:	2200      	movs	r2, #0
 801522a:	2300      	movs	r3, #0
 801522c:	4606      	mov	r6, r0
 801522e:	460f      	mov	r7, r1
 8015230:	f7f1 ffa8 	bl	8007184 <__aeabi_dcmpeq>
 8015234:	2800      	cmp	r0, #0
 8015236:	d09a      	beq.n	801516e <_dtoa_r+0x61e>
 8015238:	e7ce      	b.n	80151d8 <_dtoa_r+0x688>
 801523a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801523c:	2a00      	cmp	r2, #0
 801523e:	f000 80cd 	beq.w	80153dc <_dtoa_r+0x88c>
 8015242:	9a07      	ldr	r2, [sp, #28]
 8015244:	2a01      	cmp	r2, #1
 8015246:	f300 80af 	bgt.w	80153a8 <_dtoa_r+0x858>
 801524a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801524c:	2a00      	cmp	r2, #0
 801524e:	f000 80a7 	beq.w	80153a0 <_dtoa_r+0x850>
 8015252:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015256:	9e08      	ldr	r6, [sp, #32]
 8015258:	9d05      	ldr	r5, [sp, #20]
 801525a:	9a05      	ldr	r2, [sp, #20]
 801525c:	441a      	add	r2, r3
 801525e:	9205      	str	r2, [sp, #20]
 8015260:	9a06      	ldr	r2, [sp, #24]
 8015262:	2101      	movs	r1, #1
 8015264:	441a      	add	r2, r3
 8015266:	4620      	mov	r0, r4
 8015268:	9206      	str	r2, [sp, #24]
 801526a:	f000 fe83 	bl	8015f74 <__i2b>
 801526e:	4607      	mov	r7, r0
 8015270:	2d00      	cmp	r5, #0
 8015272:	dd0c      	ble.n	801528e <_dtoa_r+0x73e>
 8015274:	9b06      	ldr	r3, [sp, #24]
 8015276:	2b00      	cmp	r3, #0
 8015278:	dd09      	ble.n	801528e <_dtoa_r+0x73e>
 801527a:	42ab      	cmp	r3, r5
 801527c:	9a05      	ldr	r2, [sp, #20]
 801527e:	bfa8      	it	ge
 8015280:	462b      	movge	r3, r5
 8015282:	1ad2      	subs	r2, r2, r3
 8015284:	9205      	str	r2, [sp, #20]
 8015286:	9a06      	ldr	r2, [sp, #24]
 8015288:	1aed      	subs	r5, r5, r3
 801528a:	1ad3      	subs	r3, r2, r3
 801528c:	9306      	str	r3, [sp, #24]
 801528e:	9b08      	ldr	r3, [sp, #32]
 8015290:	b1f3      	cbz	r3, 80152d0 <_dtoa_r+0x780>
 8015292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015294:	2b00      	cmp	r3, #0
 8015296:	f000 80a5 	beq.w	80153e4 <_dtoa_r+0x894>
 801529a:	2e00      	cmp	r6, #0
 801529c:	dd10      	ble.n	80152c0 <_dtoa_r+0x770>
 801529e:	4639      	mov	r1, r7
 80152a0:	4632      	mov	r2, r6
 80152a2:	4620      	mov	r0, r4
 80152a4:	f000 fefc 	bl	80160a0 <__pow5mult>
 80152a8:	4652      	mov	r2, sl
 80152aa:	4601      	mov	r1, r0
 80152ac:	4607      	mov	r7, r0
 80152ae:	4620      	mov	r0, r4
 80152b0:	f000 fe69 	bl	8015f86 <__multiply>
 80152b4:	4651      	mov	r1, sl
 80152b6:	4680      	mov	r8, r0
 80152b8:	4620      	mov	r0, r4
 80152ba:	f000 fdbb 	bl	8015e34 <_Bfree>
 80152be:	46c2      	mov	sl, r8
 80152c0:	9b08      	ldr	r3, [sp, #32]
 80152c2:	1b9a      	subs	r2, r3, r6
 80152c4:	d004      	beq.n	80152d0 <_dtoa_r+0x780>
 80152c6:	4651      	mov	r1, sl
 80152c8:	4620      	mov	r0, r4
 80152ca:	f000 fee9 	bl	80160a0 <__pow5mult>
 80152ce:	4682      	mov	sl, r0
 80152d0:	2101      	movs	r1, #1
 80152d2:	4620      	mov	r0, r4
 80152d4:	f000 fe4e 	bl	8015f74 <__i2b>
 80152d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80152da:	2b00      	cmp	r3, #0
 80152dc:	4606      	mov	r6, r0
 80152de:	f340 8083 	ble.w	80153e8 <_dtoa_r+0x898>
 80152e2:	461a      	mov	r2, r3
 80152e4:	4601      	mov	r1, r0
 80152e6:	4620      	mov	r0, r4
 80152e8:	f000 feda 	bl	80160a0 <__pow5mult>
 80152ec:	9b07      	ldr	r3, [sp, #28]
 80152ee:	2b01      	cmp	r3, #1
 80152f0:	4606      	mov	r6, r0
 80152f2:	dd7c      	ble.n	80153ee <_dtoa_r+0x89e>
 80152f4:	f04f 0800 	mov.w	r8, #0
 80152f8:	6933      	ldr	r3, [r6, #16]
 80152fa:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80152fe:	6918      	ldr	r0, [r3, #16]
 8015300:	f000 fdea 	bl	8015ed8 <__hi0bits>
 8015304:	f1c0 0020 	rsb	r0, r0, #32
 8015308:	9b06      	ldr	r3, [sp, #24]
 801530a:	4418      	add	r0, r3
 801530c:	f010 001f 	ands.w	r0, r0, #31
 8015310:	f000 8096 	beq.w	8015440 <_dtoa_r+0x8f0>
 8015314:	f1c0 0320 	rsb	r3, r0, #32
 8015318:	2b04      	cmp	r3, #4
 801531a:	f340 8087 	ble.w	801542c <_dtoa_r+0x8dc>
 801531e:	9b05      	ldr	r3, [sp, #20]
 8015320:	f1c0 001c 	rsb	r0, r0, #28
 8015324:	4403      	add	r3, r0
 8015326:	9305      	str	r3, [sp, #20]
 8015328:	9b06      	ldr	r3, [sp, #24]
 801532a:	4405      	add	r5, r0
 801532c:	4403      	add	r3, r0
 801532e:	9306      	str	r3, [sp, #24]
 8015330:	9b05      	ldr	r3, [sp, #20]
 8015332:	2b00      	cmp	r3, #0
 8015334:	dd05      	ble.n	8015342 <_dtoa_r+0x7f2>
 8015336:	4651      	mov	r1, sl
 8015338:	461a      	mov	r2, r3
 801533a:	4620      	mov	r0, r4
 801533c:	f000 fefe 	bl	801613c <__lshift>
 8015340:	4682      	mov	sl, r0
 8015342:	9b06      	ldr	r3, [sp, #24]
 8015344:	2b00      	cmp	r3, #0
 8015346:	dd05      	ble.n	8015354 <_dtoa_r+0x804>
 8015348:	4631      	mov	r1, r6
 801534a:	461a      	mov	r2, r3
 801534c:	4620      	mov	r0, r4
 801534e:	f000 fef5 	bl	801613c <__lshift>
 8015352:	4606      	mov	r6, r0
 8015354:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015356:	2b00      	cmp	r3, #0
 8015358:	d074      	beq.n	8015444 <_dtoa_r+0x8f4>
 801535a:	4631      	mov	r1, r6
 801535c:	4650      	mov	r0, sl
 801535e:	f000 ff3e 	bl	80161de <__mcmp>
 8015362:	2800      	cmp	r0, #0
 8015364:	da6e      	bge.n	8015444 <_dtoa_r+0x8f4>
 8015366:	2300      	movs	r3, #0
 8015368:	4651      	mov	r1, sl
 801536a:	220a      	movs	r2, #10
 801536c:	4620      	mov	r0, r4
 801536e:	f000 fd78 	bl	8015e62 <__multadd>
 8015372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015374:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015378:	4682      	mov	sl, r0
 801537a:	2b00      	cmp	r3, #0
 801537c:	f000 81a8 	beq.w	80156d0 <_dtoa_r+0xb80>
 8015380:	2300      	movs	r3, #0
 8015382:	4639      	mov	r1, r7
 8015384:	220a      	movs	r2, #10
 8015386:	4620      	mov	r0, r4
 8015388:	f000 fd6b 	bl	8015e62 <__multadd>
 801538c:	9b04      	ldr	r3, [sp, #16]
 801538e:	2b00      	cmp	r3, #0
 8015390:	4607      	mov	r7, r0
 8015392:	f300 80c8 	bgt.w	8015526 <_dtoa_r+0x9d6>
 8015396:	9b07      	ldr	r3, [sp, #28]
 8015398:	2b02      	cmp	r3, #2
 801539a:	f340 80c4 	ble.w	8015526 <_dtoa_r+0x9d6>
 801539e:	e059      	b.n	8015454 <_dtoa_r+0x904>
 80153a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80153a2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80153a6:	e756      	b.n	8015256 <_dtoa_r+0x706>
 80153a8:	9b03      	ldr	r3, [sp, #12]
 80153aa:	1e5e      	subs	r6, r3, #1
 80153ac:	9b08      	ldr	r3, [sp, #32]
 80153ae:	42b3      	cmp	r3, r6
 80153b0:	bfbf      	itttt	lt
 80153b2:	9b08      	ldrlt	r3, [sp, #32]
 80153b4:	9608      	strlt	r6, [sp, #32]
 80153b6:	1af2      	sublt	r2, r6, r3
 80153b8:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80153ba:	bfb6      	itet	lt
 80153bc:	189b      	addlt	r3, r3, r2
 80153be:	1b9e      	subge	r6, r3, r6
 80153c0:	930b      	strlt	r3, [sp, #44]	; 0x2c
 80153c2:	9b03      	ldr	r3, [sp, #12]
 80153c4:	bfb8      	it	lt
 80153c6:	2600      	movlt	r6, #0
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	bfb9      	ittee	lt
 80153cc:	9b05      	ldrlt	r3, [sp, #20]
 80153ce:	9a03      	ldrlt	r2, [sp, #12]
 80153d0:	9d05      	ldrge	r5, [sp, #20]
 80153d2:	9b03      	ldrge	r3, [sp, #12]
 80153d4:	bfbc      	itt	lt
 80153d6:	1a9d      	sublt	r5, r3, r2
 80153d8:	2300      	movlt	r3, #0
 80153da:	e73e      	b.n	801525a <_dtoa_r+0x70a>
 80153dc:	9e08      	ldr	r6, [sp, #32]
 80153de:	9d05      	ldr	r5, [sp, #20]
 80153e0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80153e2:	e745      	b.n	8015270 <_dtoa_r+0x720>
 80153e4:	9a08      	ldr	r2, [sp, #32]
 80153e6:	e76e      	b.n	80152c6 <_dtoa_r+0x776>
 80153e8:	9b07      	ldr	r3, [sp, #28]
 80153ea:	2b01      	cmp	r3, #1
 80153ec:	dc19      	bgt.n	8015422 <_dtoa_r+0x8d2>
 80153ee:	9b00      	ldr	r3, [sp, #0]
 80153f0:	b9bb      	cbnz	r3, 8015422 <_dtoa_r+0x8d2>
 80153f2:	9b01      	ldr	r3, [sp, #4]
 80153f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80153f8:	b99b      	cbnz	r3, 8015422 <_dtoa_r+0x8d2>
 80153fa:	9b01      	ldr	r3, [sp, #4]
 80153fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015400:	0d1b      	lsrs	r3, r3, #20
 8015402:	051b      	lsls	r3, r3, #20
 8015404:	b183      	cbz	r3, 8015428 <_dtoa_r+0x8d8>
 8015406:	9b05      	ldr	r3, [sp, #20]
 8015408:	3301      	adds	r3, #1
 801540a:	9305      	str	r3, [sp, #20]
 801540c:	9b06      	ldr	r3, [sp, #24]
 801540e:	3301      	adds	r3, #1
 8015410:	9306      	str	r3, [sp, #24]
 8015412:	f04f 0801 	mov.w	r8, #1
 8015416:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015418:	2b00      	cmp	r3, #0
 801541a:	f47f af6d 	bne.w	80152f8 <_dtoa_r+0x7a8>
 801541e:	2001      	movs	r0, #1
 8015420:	e772      	b.n	8015308 <_dtoa_r+0x7b8>
 8015422:	f04f 0800 	mov.w	r8, #0
 8015426:	e7f6      	b.n	8015416 <_dtoa_r+0x8c6>
 8015428:	4698      	mov	r8, r3
 801542a:	e7f4      	b.n	8015416 <_dtoa_r+0x8c6>
 801542c:	d080      	beq.n	8015330 <_dtoa_r+0x7e0>
 801542e:	9a05      	ldr	r2, [sp, #20]
 8015430:	331c      	adds	r3, #28
 8015432:	441a      	add	r2, r3
 8015434:	9205      	str	r2, [sp, #20]
 8015436:	9a06      	ldr	r2, [sp, #24]
 8015438:	441a      	add	r2, r3
 801543a:	441d      	add	r5, r3
 801543c:	4613      	mov	r3, r2
 801543e:	e776      	b.n	801532e <_dtoa_r+0x7de>
 8015440:	4603      	mov	r3, r0
 8015442:	e7f4      	b.n	801542e <_dtoa_r+0x8de>
 8015444:	9b03      	ldr	r3, [sp, #12]
 8015446:	2b00      	cmp	r3, #0
 8015448:	dc36      	bgt.n	80154b8 <_dtoa_r+0x968>
 801544a:	9b07      	ldr	r3, [sp, #28]
 801544c:	2b02      	cmp	r3, #2
 801544e:	dd33      	ble.n	80154b8 <_dtoa_r+0x968>
 8015450:	9b03      	ldr	r3, [sp, #12]
 8015452:	9304      	str	r3, [sp, #16]
 8015454:	9b04      	ldr	r3, [sp, #16]
 8015456:	b963      	cbnz	r3, 8015472 <_dtoa_r+0x922>
 8015458:	4631      	mov	r1, r6
 801545a:	2205      	movs	r2, #5
 801545c:	4620      	mov	r0, r4
 801545e:	f000 fd00 	bl	8015e62 <__multadd>
 8015462:	4601      	mov	r1, r0
 8015464:	4606      	mov	r6, r0
 8015466:	4650      	mov	r0, sl
 8015468:	f000 feb9 	bl	80161de <__mcmp>
 801546c:	2800      	cmp	r0, #0
 801546e:	f73f adb6 	bgt.w	8014fde <_dtoa_r+0x48e>
 8015472:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015474:	9d02      	ldr	r5, [sp, #8]
 8015476:	ea6f 0b03 	mvn.w	fp, r3
 801547a:	2300      	movs	r3, #0
 801547c:	9303      	str	r3, [sp, #12]
 801547e:	4631      	mov	r1, r6
 8015480:	4620      	mov	r0, r4
 8015482:	f000 fcd7 	bl	8015e34 <_Bfree>
 8015486:	2f00      	cmp	r7, #0
 8015488:	f43f aea6 	beq.w	80151d8 <_dtoa_r+0x688>
 801548c:	9b03      	ldr	r3, [sp, #12]
 801548e:	b12b      	cbz	r3, 801549c <_dtoa_r+0x94c>
 8015490:	42bb      	cmp	r3, r7
 8015492:	d003      	beq.n	801549c <_dtoa_r+0x94c>
 8015494:	4619      	mov	r1, r3
 8015496:	4620      	mov	r0, r4
 8015498:	f000 fccc 	bl	8015e34 <_Bfree>
 801549c:	4639      	mov	r1, r7
 801549e:	4620      	mov	r0, r4
 80154a0:	f000 fcc8 	bl	8015e34 <_Bfree>
 80154a4:	e698      	b.n	80151d8 <_dtoa_r+0x688>
 80154a6:	2600      	movs	r6, #0
 80154a8:	4637      	mov	r7, r6
 80154aa:	e7e2      	b.n	8015472 <_dtoa_r+0x922>
 80154ac:	46bb      	mov	fp, r7
 80154ae:	4637      	mov	r7, r6
 80154b0:	e595      	b.n	8014fde <_dtoa_r+0x48e>
 80154b2:	bf00      	nop
 80154b4:	40240000 	.word	0x40240000
 80154b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80154ba:	bb93      	cbnz	r3, 8015522 <_dtoa_r+0x9d2>
 80154bc:	9b03      	ldr	r3, [sp, #12]
 80154be:	9304      	str	r3, [sp, #16]
 80154c0:	9d02      	ldr	r5, [sp, #8]
 80154c2:	4631      	mov	r1, r6
 80154c4:	4650      	mov	r0, sl
 80154c6:	f7ff fab7 	bl	8014a38 <quorem>
 80154ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80154ce:	f805 9b01 	strb.w	r9, [r5], #1
 80154d2:	9b02      	ldr	r3, [sp, #8]
 80154d4:	9a04      	ldr	r2, [sp, #16]
 80154d6:	1aeb      	subs	r3, r5, r3
 80154d8:	429a      	cmp	r2, r3
 80154da:	f300 80dc 	bgt.w	8015696 <_dtoa_r+0xb46>
 80154de:	9b02      	ldr	r3, [sp, #8]
 80154e0:	2a01      	cmp	r2, #1
 80154e2:	bfac      	ite	ge
 80154e4:	189b      	addge	r3, r3, r2
 80154e6:	3301      	addlt	r3, #1
 80154e8:	4698      	mov	r8, r3
 80154ea:	2300      	movs	r3, #0
 80154ec:	9303      	str	r3, [sp, #12]
 80154ee:	4651      	mov	r1, sl
 80154f0:	2201      	movs	r2, #1
 80154f2:	4620      	mov	r0, r4
 80154f4:	f000 fe22 	bl	801613c <__lshift>
 80154f8:	4631      	mov	r1, r6
 80154fa:	4682      	mov	sl, r0
 80154fc:	f000 fe6f 	bl	80161de <__mcmp>
 8015500:	2800      	cmp	r0, #0
 8015502:	f300 808d 	bgt.w	8015620 <_dtoa_r+0xad0>
 8015506:	d103      	bne.n	8015510 <_dtoa_r+0x9c0>
 8015508:	f019 0f01 	tst.w	r9, #1
 801550c:	f040 8088 	bne.w	8015620 <_dtoa_r+0xad0>
 8015510:	4645      	mov	r5, r8
 8015512:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015516:	2b30      	cmp	r3, #48	; 0x30
 8015518:	f105 32ff 	add.w	r2, r5, #4294967295
 801551c:	d1af      	bne.n	801547e <_dtoa_r+0x92e>
 801551e:	4615      	mov	r5, r2
 8015520:	e7f7      	b.n	8015512 <_dtoa_r+0x9c2>
 8015522:	9b03      	ldr	r3, [sp, #12]
 8015524:	9304      	str	r3, [sp, #16]
 8015526:	2d00      	cmp	r5, #0
 8015528:	dd05      	ble.n	8015536 <_dtoa_r+0x9e6>
 801552a:	4639      	mov	r1, r7
 801552c:	462a      	mov	r2, r5
 801552e:	4620      	mov	r0, r4
 8015530:	f000 fe04 	bl	801613c <__lshift>
 8015534:	4607      	mov	r7, r0
 8015536:	f1b8 0f00 	cmp.w	r8, #0
 801553a:	d04c      	beq.n	80155d6 <_dtoa_r+0xa86>
 801553c:	6879      	ldr	r1, [r7, #4]
 801553e:	4620      	mov	r0, r4
 8015540:	f000 fc44 	bl	8015dcc <_Balloc>
 8015544:	693a      	ldr	r2, [r7, #16]
 8015546:	3202      	adds	r2, #2
 8015548:	4605      	mov	r5, r0
 801554a:	0092      	lsls	r2, r2, #2
 801554c:	f107 010c 	add.w	r1, r7, #12
 8015550:	300c      	adds	r0, #12
 8015552:	f7fc fdba 	bl	80120ca <memcpy>
 8015556:	2201      	movs	r2, #1
 8015558:	4629      	mov	r1, r5
 801555a:	4620      	mov	r0, r4
 801555c:	f000 fdee 	bl	801613c <__lshift>
 8015560:	9b00      	ldr	r3, [sp, #0]
 8015562:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8015566:	9703      	str	r7, [sp, #12]
 8015568:	f003 0301 	and.w	r3, r3, #1
 801556c:	4607      	mov	r7, r0
 801556e:	9305      	str	r3, [sp, #20]
 8015570:	4631      	mov	r1, r6
 8015572:	4650      	mov	r0, sl
 8015574:	f7ff fa60 	bl	8014a38 <quorem>
 8015578:	9903      	ldr	r1, [sp, #12]
 801557a:	4605      	mov	r5, r0
 801557c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8015580:	4650      	mov	r0, sl
 8015582:	f000 fe2c 	bl	80161de <__mcmp>
 8015586:	463a      	mov	r2, r7
 8015588:	9000      	str	r0, [sp, #0]
 801558a:	4631      	mov	r1, r6
 801558c:	4620      	mov	r0, r4
 801558e:	f000 fe40 	bl	8016212 <__mdiff>
 8015592:	68c3      	ldr	r3, [r0, #12]
 8015594:	4602      	mov	r2, r0
 8015596:	bb03      	cbnz	r3, 80155da <_dtoa_r+0xa8a>
 8015598:	4601      	mov	r1, r0
 801559a:	9006      	str	r0, [sp, #24]
 801559c:	4650      	mov	r0, sl
 801559e:	f000 fe1e 	bl	80161de <__mcmp>
 80155a2:	9a06      	ldr	r2, [sp, #24]
 80155a4:	4603      	mov	r3, r0
 80155a6:	4611      	mov	r1, r2
 80155a8:	4620      	mov	r0, r4
 80155aa:	9306      	str	r3, [sp, #24]
 80155ac:	f000 fc42 	bl	8015e34 <_Bfree>
 80155b0:	9b06      	ldr	r3, [sp, #24]
 80155b2:	b9a3      	cbnz	r3, 80155de <_dtoa_r+0xa8e>
 80155b4:	9a07      	ldr	r2, [sp, #28]
 80155b6:	b992      	cbnz	r2, 80155de <_dtoa_r+0xa8e>
 80155b8:	9a05      	ldr	r2, [sp, #20]
 80155ba:	b982      	cbnz	r2, 80155de <_dtoa_r+0xa8e>
 80155bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80155c0:	d029      	beq.n	8015616 <_dtoa_r+0xac6>
 80155c2:	9b00      	ldr	r3, [sp, #0]
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	dd01      	ble.n	80155cc <_dtoa_r+0xa7c>
 80155c8:	f105 0931 	add.w	r9, r5, #49	; 0x31
 80155cc:	f108 0501 	add.w	r5, r8, #1
 80155d0:	f888 9000 	strb.w	r9, [r8]
 80155d4:	e753      	b.n	801547e <_dtoa_r+0x92e>
 80155d6:	4638      	mov	r0, r7
 80155d8:	e7c2      	b.n	8015560 <_dtoa_r+0xa10>
 80155da:	2301      	movs	r3, #1
 80155dc:	e7e3      	b.n	80155a6 <_dtoa_r+0xa56>
 80155de:	9a00      	ldr	r2, [sp, #0]
 80155e0:	2a00      	cmp	r2, #0
 80155e2:	db04      	blt.n	80155ee <_dtoa_r+0xa9e>
 80155e4:	d125      	bne.n	8015632 <_dtoa_r+0xae2>
 80155e6:	9a07      	ldr	r2, [sp, #28]
 80155e8:	bb1a      	cbnz	r2, 8015632 <_dtoa_r+0xae2>
 80155ea:	9a05      	ldr	r2, [sp, #20]
 80155ec:	bb0a      	cbnz	r2, 8015632 <_dtoa_r+0xae2>
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	ddec      	ble.n	80155cc <_dtoa_r+0xa7c>
 80155f2:	4651      	mov	r1, sl
 80155f4:	2201      	movs	r2, #1
 80155f6:	4620      	mov	r0, r4
 80155f8:	f000 fda0 	bl	801613c <__lshift>
 80155fc:	4631      	mov	r1, r6
 80155fe:	4682      	mov	sl, r0
 8015600:	f000 fded 	bl	80161de <__mcmp>
 8015604:	2800      	cmp	r0, #0
 8015606:	dc03      	bgt.n	8015610 <_dtoa_r+0xac0>
 8015608:	d1e0      	bne.n	80155cc <_dtoa_r+0xa7c>
 801560a:	f019 0f01 	tst.w	r9, #1
 801560e:	d0dd      	beq.n	80155cc <_dtoa_r+0xa7c>
 8015610:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8015614:	d1d8      	bne.n	80155c8 <_dtoa_r+0xa78>
 8015616:	2339      	movs	r3, #57	; 0x39
 8015618:	f888 3000 	strb.w	r3, [r8]
 801561c:	f108 0801 	add.w	r8, r8, #1
 8015620:	4645      	mov	r5, r8
 8015622:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015626:	2b39      	cmp	r3, #57	; 0x39
 8015628:	f105 32ff 	add.w	r2, r5, #4294967295
 801562c:	d03b      	beq.n	80156a6 <_dtoa_r+0xb56>
 801562e:	3301      	adds	r3, #1
 8015630:	e040      	b.n	80156b4 <_dtoa_r+0xb64>
 8015632:	2b00      	cmp	r3, #0
 8015634:	f108 0501 	add.w	r5, r8, #1
 8015638:	dd05      	ble.n	8015646 <_dtoa_r+0xaf6>
 801563a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801563e:	d0ea      	beq.n	8015616 <_dtoa_r+0xac6>
 8015640:	f109 0901 	add.w	r9, r9, #1
 8015644:	e7c4      	b.n	80155d0 <_dtoa_r+0xa80>
 8015646:	9b02      	ldr	r3, [sp, #8]
 8015648:	9a04      	ldr	r2, [sp, #16]
 801564a:	f805 9c01 	strb.w	r9, [r5, #-1]
 801564e:	1aeb      	subs	r3, r5, r3
 8015650:	4293      	cmp	r3, r2
 8015652:	46a8      	mov	r8, r5
 8015654:	f43f af4b 	beq.w	80154ee <_dtoa_r+0x99e>
 8015658:	4651      	mov	r1, sl
 801565a:	2300      	movs	r3, #0
 801565c:	220a      	movs	r2, #10
 801565e:	4620      	mov	r0, r4
 8015660:	f000 fbff 	bl	8015e62 <__multadd>
 8015664:	9b03      	ldr	r3, [sp, #12]
 8015666:	9903      	ldr	r1, [sp, #12]
 8015668:	42bb      	cmp	r3, r7
 801566a:	4682      	mov	sl, r0
 801566c:	f04f 0300 	mov.w	r3, #0
 8015670:	f04f 020a 	mov.w	r2, #10
 8015674:	4620      	mov	r0, r4
 8015676:	d104      	bne.n	8015682 <_dtoa_r+0xb32>
 8015678:	f000 fbf3 	bl	8015e62 <__multadd>
 801567c:	9003      	str	r0, [sp, #12]
 801567e:	4607      	mov	r7, r0
 8015680:	e776      	b.n	8015570 <_dtoa_r+0xa20>
 8015682:	f000 fbee 	bl	8015e62 <__multadd>
 8015686:	2300      	movs	r3, #0
 8015688:	9003      	str	r0, [sp, #12]
 801568a:	220a      	movs	r2, #10
 801568c:	4639      	mov	r1, r7
 801568e:	4620      	mov	r0, r4
 8015690:	f000 fbe7 	bl	8015e62 <__multadd>
 8015694:	e7f3      	b.n	801567e <_dtoa_r+0xb2e>
 8015696:	4651      	mov	r1, sl
 8015698:	2300      	movs	r3, #0
 801569a:	220a      	movs	r2, #10
 801569c:	4620      	mov	r0, r4
 801569e:	f000 fbe0 	bl	8015e62 <__multadd>
 80156a2:	4682      	mov	sl, r0
 80156a4:	e70d      	b.n	80154c2 <_dtoa_r+0x972>
 80156a6:	9b02      	ldr	r3, [sp, #8]
 80156a8:	4293      	cmp	r3, r2
 80156aa:	d105      	bne.n	80156b8 <_dtoa_r+0xb68>
 80156ac:	9a02      	ldr	r2, [sp, #8]
 80156ae:	f10b 0b01 	add.w	fp, fp, #1
 80156b2:	2331      	movs	r3, #49	; 0x31
 80156b4:	7013      	strb	r3, [r2, #0]
 80156b6:	e6e2      	b.n	801547e <_dtoa_r+0x92e>
 80156b8:	4615      	mov	r5, r2
 80156ba:	e7b2      	b.n	8015622 <_dtoa_r+0xad2>
 80156bc:	4b09      	ldr	r3, [pc, #36]	; (80156e4 <_dtoa_r+0xb94>)
 80156be:	f7ff baae 	b.w	8014c1e <_dtoa_r+0xce>
 80156c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	f47f aa88 	bne.w	8014bda <_dtoa_r+0x8a>
 80156ca:	4b07      	ldr	r3, [pc, #28]	; (80156e8 <_dtoa_r+0xb98>)
 80156cc:	f7ff baa7 	b.w	8014c1e <_dtoa_r+0xce>
 80156d0:	9b04      	ldr	r3, [sp, #16]
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	f73f aef4 	bgt.w	80154c0 <_dtoa_r+0x970>
 80156d8:	9b07      	ldr	r3, [sp, #28]
 80156da:	2b02      	cmp	r3, #2
 80156dc:	f77f aef0 	ble.w	80154c0 <_dtoa_r+0x970>
 80156e0:	e6b8      	b.n	8015454 <_dtoa_r+0x904>
 80156e2:	bf00      	nop
 80156e4:	08018314 	.word	0x08018314
 80156e8:	08018356 	.word	0x08018356

080156ec <__sflush_r>:
 80156ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80156f0:	b293      	uxth	r3, r2
 80156f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156f6:	4605      	mov	r5, r0
 80156f8:	0718      	lsls	r0, r3, #28
 80156fa:	460c      	mov	r4, r1
 80156fc:	d461      	bmi.n	80157c2 <__sflush_r+0xd6>
 80156fe:	684b      	ldr	r3, [r1, #4]
 8015700:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8015704:	2b00      	cmp	r3, #0
 8015706:	818a      	strh	r2, [r1, #12]
 8015708:	dc05      	bgt.n	8015716 <__sflush_r+0x2a>
 801570a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801570c:	2b00      	cmp	r3, #0
 801570e:	dc02      	bgt.n	8015716 <__sflush_r+0x2a>
 8015710:	2000      	movs	r0, #0
 8015712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015716:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015718:	2e00      	cmp	r6, #0
 801571a:	d0f9      	beq.n	8015710 <__sflush_r+0x24>
 801571c:	2300      	movs	r3, #0
 801571e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015722:	682f      	ldr	r7, [r5, #0]
 8015724:	602b      	str	r3, [r5, #0]
 8015726:	d037      	beq.n	8015798 <__sflush_r+0xac>
 8015728:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801572a:	89a3      	ldrh	r3, [r4, #12]
 801572c:	075a      	lsls	r2, r3, #29
 801572e:	d505      	bpl.n	801573c <__sflush_r+0x50>
 8015730:	6863      	ldr	r3, [r4, #4]
 8015732:	1ac0      	subs	r0, r0, r3
 8015734:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015736:	b10b      	cbz	r3, 801573c <__sflush_r+0x50>
 8015738:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801573a:	1ac0      	subs	r0, r0, r3
 801573c:	2300      	movs	r3, #0
 801573e:	4602      	mov	r2, r0
 8015740:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015742:	6a21      	ldr	r1, [r4, #32]
 8015744:	4628      	mov	r0, r5
 8015746:	47b0      	blx	r6
 8015748:	1c43      	adds	r3, r0, #1
 801574a:	89a3      	ldrh	r3, [r4, #12]
 801574c:	d106      	bne.n	801575c <__sflush_r+0x70>
 801574e:	6829      	ldr	r1, [r5, #0]
 8015750:	291d      	cmp	r1, #29
 8015752:	d84f      	bhi.n	80157f4 <__sflush_r+0x108>
 8015754:	4a2d      	ldr	r2, [pc, #180]	; (801580c <__sflush_r+0x120>)
 8015756:	40ca      	lsrs	r2, r1
 8015758:	07d6      	lsls	r6, r2, #31
 801575a:	d54b      	bpl.n	80157f4 <__sflush_r+0x108>
 801575c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015760:	b21b      	sxth	r3, r3
 8015762:	2200      	movs	r2, #0
 8015764:	6062      	str	r2, [r4, #4]
 8015766:	04d9      	lsls	r1, r3, #19
 8015768:	6922      	ldr	r2, [r4, #16]
 801576a:	81a3      	strh	r3, [r4, #12]
 801576c:	6022      	str	r2, [r4, #0]
 801576e:	d504      	bpl.n	801577a <__sflush_r+0x8e>
 8015770:	1c42      	adds	r2, r0, #1
 8015772:	d101      	bne.n	8015778 <__sflush_r+0x8c>
 8015774:	682b      	ldr	r3, [r5, #0]
 8015776:	b903      	cbnz	r3, 801577a <__sflush_r+0x8e>
 8015778:	6560      	str	r0, [r4, #84]	; 0x54
 801577a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801577c:	602f      	str	r7, [r5, #0]
 801577e:	2900      	cmp	r1, #0
 8015780:	d0c6      	beq.n	8015710 <__sflush_r+0x24>
 8015782:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015786:	4299      	cmp	r1, r3
 8015788:	d002      	beq.n	8015790 <__sflush_r+0xa4>
 801578a:	4628      	mov	r0, r5
 801578c:	f000 f9aa 	bl	8015ae4 <_free_r>
 8015790:	2000      	movs	r0, #0
 8015792:	6360      	str	r0, [r4, #52]	; 0x34
 8015794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015798:	6a21      	ldr	r1, [r4, #32]
 801579a:	2301      	movs	r3, #1
 801579c:	4628      	mov	r0, r5
 801579e:	47b0      	blx	r6
 80157a0:	1c41      	adds	r1, r0, #1
 80157a2:	d1c2      	bne.n	801572a <__sflush_r+0x3e>
 80157a4:	682b      	ldr	r3, [r5, #0]
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d0bf      	beq.n	801572a <__sflush_r+0x3e>
 80157aa:	2b1d      	cmp	r3, #29
 80157ac:	d001      	beq.n	80157b2 <__sflush_r+0xc6>
 80157ae:	2b16      	cmp	r3, #22
 80157b0:	d101      	bne.n	80157b6 <__sflush_r+0xca>
 80157b2:	602f      	str	r7, [r5, #0]
 80157b4:	e7ac      	b.n	8015710 <__sflush_r+0x24>
 80157b6:	89a3      	ldrh	r3, [r4, #12]
 80157b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80157bc:	81a3      	strh	r3, [r4, #12]
 80157be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157c2:	690f      	ldr	r7, [r1, #16]
 80157c4:	2f00      	cmp	r7, #0
 80157c6:	d0a3      	beq.n	8015710 <__sflush_r+0x24>
 80157c8:	079b      	lsls	r3, r3, #30
 80157ca:	680e      	ldr	r6, [r1, #0]
 80157cc:	bf08      	it	eq
 80157ce:	694b      	ldreq	r3, [r1, #20]
 80157d0:	600f      	str	r7, [r1, #0]
 80157d2:	bf18      	it	ne
 80157d4:	2300      	movne	r3, #0
 80157d6:	eba6 0807 	sub.w	r8, r6, r7
 80157da:	608b      	str	r3, [r1, #8]
 80157dc:	f1b8 0f00 	cmp.w	r8, #0
 80157e0:	dd96      	ble.n	8015710 <__sflush_r+0x24>
 80157e2:	4643      	mov	r3, r8
 80157e4:	463a      	mov	r2, r7
 80157e6:	6a21      	ldr	r1, [r4, #32]
 80157e8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80157ea:	4628      	mov	r0, r5
 80157ec:	47b0      	blx	r6
 80157ee:	2800      	cmp	r0, #0
 80157f0:	dc07      	bgt.n	8015802 <__sflush_r+0x116>
 80157f2:	89a3      	ldrh	r3, [r4, #12]
 80157f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80157f8:	81a3      	strh	r3, [r4, #12]
 80157fa:	f04f 30ff 	mov.w	r0, #4294967295
 80157fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015802:	4407      	add	r7, r0
 8015804:	eba8 0800 	sub.w	r8, r8, r0
 8015808:	e7e8      	b.n	80157dc <__sflush_r+0xf0>
 801580a:	bf00      	nop
 801580c:	20400001 	.word	0x20400001

08015810 <_fflush_r>:
 8015810:	b538      	push	{r3, r4, r5, lr}
 8015812:	690b      	ldr	r3, [r1, #16]
 8015814:	4605      	mov	r5, r0
 8015816:	460c      	mov	r4, r1
 8015818:	b913      	cbnz	r3, 8015820 <_fflush_r+0x10>
 801581a:	2500      	movs	r5, #0
 801581c:	4628      	mov	r0, r5
 801581e:	bd38      	pop	{r3, r4, r5, pc}
 8015820:	b118      	cbz	r0, 801582a <_fflush_r+0x1a>
 8015822:	6983      	ldr	r3, [r0, #24]
 8015824:	b90b      	cbnz	r3, 801582a <_fflush_r+0x1a>
 8015826:	f000 f887 	bl	8015938 <__sinit>
 801582a:	4b14      	ldr	r3, [pc, #80]	; (801587c <_fflush_r+0x6c>)
 801582c:	429c      	cmp	r4, r3
 801582e:	d11b      	bne.n	8015868 <_fflush_r+0x58>
 8015830:	686c      	ldr	r4, [r5, #4]
 8015832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015836:	2b00      	cmp	r3, #0
 8015838:	d0ef      	beq.n	801581a <_fflush_r+0xa>
 801583a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801583c:	07d0      	lsls	r0, r2, #31
 801583e:	d404      	bmi.n	801584a <_fflush_r+0x3a>
 8015840:	0599      	lsls	r1, r3, #22
 8015842:	d402      	bmi.n	801584a <_fflush_r+0x3a>
 8015844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015846:	f7fc fa0f 	bl	8011c68 <__retarget_lock_acquire_recursive>
 801584a:	4628      	mov	r0, r5
 801584c:	4621      	mov	r1, r4
 801584e:	f7ff ff4d 	bl	80156ec <__sflush_r>
 8015852:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015854:	07da      	lsls	r2, r3, #31
 8015856:	4605      	mov	r5, r0
 8015858:	d4e0      	bmi.n	801581c <_fflush_r+0xc>
 801585a:	89a3      	ldrh	r3, [r4, #12]
 801585c:	059b      	lsls	r3, r3, #22
 801585e:	d4dd      	bmi.n	801581c <_fflush_r+0xc>
 8015860:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015862:	f7fc fa03 	bl	8011c6c <__retarget_lock_release_recursive>
 8015866:	e7d9      	b.n	801581c <_fflush_r+0xc>
 8015868:	4b05      	ldr	r3, [pc, #20]	; (8015880 <_fflush_r+0x70>)
 801586a:	429c      	cmp	r4, r3
 801586c:	d101      	bne.n	8015872 <_fflush_r+0x62>
 801586e:	68ac      	ldr	r4, [r5, #8]
 8015870:	e7df      	b.n	8015832 <_fflush_r+0x22>
 8015872:	4b04      	ldr	r3, [pc, #16]	; (8015884 <_fflush_r+0x74>)
 8015874:	429c      	cmp	r4, r3
 8015876:	bf08      	it	eq
 8015878:	68ec      	ldreq	r4, [r5, #12]
 801587a:	e7da      	b.n	8015832 <_fflush_r+0x22>
 801587c:	08018384 	.word	0x08018384
 8015880:	080183a4 	.word	0x080183a4
 8015884:	08018364 	.word	0x08018364

08015888 <_cleanup_r>:
 8015888:	4901      	ldr	r1, [pc, #4]	; (8015890 <_cleanup_r+0x8>)
 801588a:	f000 b9e7 	b.w	8015c5c <_fwalk_reent>
 801588e:	bf00      	nop
 8015890:	080165e5 	.word	0x080165e5

08015894 <std.isra.0>:
 8015894:	2300      	movs	r3, #0
 8015896:	b510      	push	{r4, lr}
 8015898:	4604      	mov	r4, r0
 801589a:	6003      	str	r3, [r0, #0]
 801589c:	6043      	str	r3, [r0, #4]
 801589e:	6083      	str	r3, [r0, #8]
 80158a0:	8181      	strh	r1, [r0, #12]
 80158a2:	6643      	str	r3, [r0, #100]	; 0x64
 80158a4:	81c2      	strh	r2, [r0, #14]
 80158a6:	6103      	str	r3, [r0, #16]
 80158a8:	6143      	str	r3, [r0, #20]
 80158aa:	6183      	str	r3, [r0, #24]
 80158ac:	4619      	mov	r1, r3
 80158ae:	2208      	movs	r2, #8
 80158b0:	305c      	adds	r0, #92	; 0x5c
 80158b2:	f7fc fc2f 	bl	8012114 <memset>
 80158b6:	4b05      	ldr	r3, [pc, #20]	; (80158cc <std.isra.0+0x38>)
 80158b8:	6263      	str	r3, [r4, #36]	; 0x24
 80158ba:	4b05      	ldr	r3, [pc, #20]	; (80158d0 <std.isra.0+0x3c>)
 80158bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80158be:	4b05      	ldr	r3, [pc, #20]	; (80158d4 <std.isra.0+0x40>)
 80158c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80158c2:	4b05      	ldr	r3, [pc, #20]	; (80158d8 <std.isra.0+0x44>)
 80158c4:	6224      	str	r4, [r4, #32]
 80158c6:	6323      	str	r3, [r4, #48]	; 0x30
 80158c8:	bd10      	pop	{r4, pc}
 80158ca:	bf00      	nop
 80158cc:	0801636d 	.word	0x0801636d
 80158d0:	0801638f 	.word	0x0801638f
 80158d4:	080163c7 	.word	0x080163c7
 80158d8:	080163eb 	.word	0x080163eb

080158dc <__sfmoreglue>:
 80158dc:	b570      	push	{r4, r5, r6, lr}
 80158de:	1e4a      	subs	r2, r1, #1
 80158e0:	2568      	movs	r5, #104	; 0x68
 80158e2:	4355      	muls	r5, r2
 80158e4:	460e      	mov	r6, r1
 80158e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80158ea:	f7fc f9d1 	bl	8011c90 <_malloc_r>
 80158ee:	4604      	mov	r4, r0
 80158f0:	b140      	cbz	r0, 8015904 <__sfmoreglue+0x28>
 80158f2:	2100      	movs	r1, #0
 80158f4:	e880 0042 	stmia.w	r0, {r1, r6}
 80158f8:	300c      	adds	r0, #12
 80158fa:	60a0      	str	r0, [r4, #8]
 80158fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015900:	f7fc fc08 	bl	8012114 <memset>
 8015904:	4620      	mov	r0, r4
 8015906:	bd70      	pop	{r4, r5, r6, pc}

08015908 <__sfp_lock_acquire>:
 8015908:	4801      	ldr	r0, [pc, #4]	; (8015910 <__sfp_lock_acquire+0x8>)
 801590a:	f7fc b9ad 	b.w	8011c68 <__retarget_lock_acquire_recursive>
 801590e:	bf00      	nop
 8015910:	20000b48 	.word	0x20000b48

08015914 <__sfp_lock_release>:
 8015914:	4801      	ldr	r0, [pc, #4]	; (801591c <__sfp_lock_release+0x8>)
 8015916:	f7fc b9a9 	b.w	8011c6c <__retarget_lock_release_recursive>
 801591a:	bf00      	nop
 801591c:	20000b48 	.word	0x20000b48

08015920 <__sinit_lock_acquire>:
 8015920:	4801      	ldr	r0, [pc, #4]	; (8015928 <__sinit_lock_acquire+0x8>)
 8015922:	f7fc b9a1 	b.w	8011c68 <__retarget_lock_acquire_recursive>
 8015926:	bf00      	nop
 8015928:	20000b43 	.word	0x20000b43

0801592c <__sinit_lock_release>:
 801592c:	4801      	ldr	r0, [pc, #4]	; (8015934 <__sinit_lock_release+0x8>)
 801592e:	f7fc b99d 	b.w	8011c6c <__retarget_lock_release_recursive>
 8015932:	bf00      	nop
 8015934:	20000b43 	.word	0x20000b43

08015938 <__sinit>:
 8015938:	b510      	push	{r4, lr}
 801593a:	4604      	mov	r4, r0
 801593c:	f7ff fff0 	bl	8015920 <__sinit_lock_acquire>
 8015940:	69a3      	ldr	r3, [r4, #24]
 8015942:	b11b      	cbz	r3, 801594c <__sinit+0x14>
 8015944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015948:	f7ff bff0 	b.w	801592c <__sinit_lock_release>
 801594c:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8015950:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
 8015954:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8015958:	4b12      	ldr	r3, [pc, #72]	; (80159a4 <__sinit+0x6c>)
 801595a:	4a13      	ldr	r2, [pc, #76]	; (80159a8 <__sinit+0x70>)
 801595c:	681b      	ldr	r3, [r3, #0]
 801595e:	62a2      	str	r2, [r4, #40]	; 0x28
 8015960:	429c      	cmp	r4, r3
 8015962:	bf04      	itt	eq
 8015964:	2301      	moveq	r3, #1
 8015966:	61a3      	streq	r3, [r4, #24]
 8015968:	4620      	mov	r0, r4
 801596a:	f000 f81f 	bl	80159ac <__sfp>
 801596e:	6060      	str	r0, [r4, #4]
 8015970:	4620      	mov	r0, r4
 8015972:	f000 f81b 	bl	80159ac <__sfp>
 8015976:	60a0      	str	r0, [r4, #8]
 8015978:	4620      	mov	r0, r4
 801597a:	f000 f817 	bl	80159ac <__sfp>
 801597e:	2200      	movs	r2, #0
 8015980:	60e0      	str	r0, [r4, #12]
 8015982:	2104      	movs	r1, #4
 8015984:	6860      	ldr	r0, [r4, #4]
 8015986:	f7ff ff85 	bl	8015894 <std.isra.0>
 801598a:	2201      	movs	r2, #1
 801598c:	2109      	movs	r1, #9
 801598e:	68a0      	ldr	r0, [r4, #8]
 8015990:	f7ff ff80 	bl	8015894 <std.isra.0>
 8015994:	2202      	movs	r2, #2
 8015996:	2112      	movs	r1, #18
 8015998:	68e0      	ldr	r0, [r4, #12]
 801599a:	f7ff ff7b 	bl	8015894 <std.isra.0>
 801599e:	2301      	movs	r3, #1
 80159a0:	61a3      	str	r3, [r4, #24]
 80159a2:	e7cf      	b.n	8015944 <__sinit+0xc>
 80159a4:	080182d8 	.word	0x080182d8
 80159a8:	08015889 	.word	0x08015889

080159ac <__sfp>:
 80159ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159ae:	4607      	mov	r7, r0
 80159b0:	f7ff ffaa 	bl	8015908 <__sfp_lock_acquire>
 80159b4:	4b1f      	ldr	r3, [pc, #124]	; (8015a34 <__sfp+0x88>)
 80159b6:	681e      	ldr	r6, [r3, #0]
 80159b8:	69b3      	ldr	r3, [r6, #24]
 80159ba:	b913      	cbnz	r3, 80159c2 <__sfp+0x16>
 80159bc:	4630      	mov	r0, r6
 80159be:	f7ff ffbb 	bl	8015938 <__sinit>
 80159c2:	36d8      	adds	r6, #216	; 0xd8
 80159c4:	68b4      	ldr	r4, [r6, #8]
 80159c6:	6873      	ldr	r3, [r6, #4]
 80159c8:	3b01      	subs	r3, #1
 80159ca:	d503      	bpl.n	80159d4 <__sfp+0x28>
 80159cc:	6833      	ldr	r3, [r6, #0]
 80159ce:	b133      	cbz	r3, 80159de <__sfp+0x32>
 80159d0:	6836      	ldr	r6, [r6, #0]
 80159d2:	e7f7      	b.n	80159c4 <__sfp+0x18>
 80159d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80159d8:	b17d      	cbz	r5, 80159fa <__sfp+0x4e>
 80159da:	3468      	adds	r4, #104	; 0x68
 80159dc:	e7f4      	b.n	80159c8 <__sfp+0x1c>
 80159de:	2104      	movs	r1, #4
 80159e0:	4638      	mov	r0, r7
 80159e2:	f7ff ff7b 	bl	80158dc <__sfmoreglue>
 80159e6:	4604      	mov	r4, r0
 80159e8:	6030      	str	r0, [r6, #0]
 80159ea:	2800      	cmp	r0, #0
 80159ec:	d1f0      	bne.n	80159d0 <__sfp+0x24>
 80159ee:	f7ff ff91 	bl	8015914 <__sfp_lock_release>
 80159f2:	230c      	movs	r3, #12
 80159f4:	603b      	str	r3, [r7, #0]
 80159f6:	4620      	mov	r0, r4
 80159f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80159fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80159fe:	81e3      	strh	r3, [r4, #14]
 8015a00:	2301      	movs	r3, #1
 8015a02:	81a3      	strh	r3, [r4, #12]
 8015a04:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015a08:	6665      	str	r5, [r4, #100]	; 0x64
 8015a0a:	f7fc f92b 	bl	8011c64 <__retarget_lock_init_recursive>
 8015a0e:	f7ff ff81 	bl	8015914 <__sfp_lock_release>
 8015a12:	6025      	str	r5, [r4, #0]
 8015a14:	60a5      	str	r5, [r4, #8]
 8015a16:	6065      	str	r5, [r4, #4]
 8015a18:	6125      	str	r5, [r4, #16]
 8015a1a:	6165      	str	r5, [r4, #20]
 8015a1c:	61a5      	str	r5, [r4, #24]
 8015a1e:	2208      	movs	r2, #8
 8015a20:	4629      	mov	r1, r5
 8015a22:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015a26:	f7fc fb75 	bl	8012114 <memset>
 8015a2a:	6365      	str	r5, [r4, #52]	; 0x34
 8015a2c:	63a5      	str	r5, [r4, #56]	; 0x38
 8015a2e:	64a5      	str	r5, [r4, #72]	; 0x48
 8015a30:	64e5      	str	r5, [r4, #76]	; 0x4c
 8015a32:	e7e0      	b.n	80159f6 <__sfp+0x4a>
 8015a34:	080182d8 	.word	0x080182d8

08015a38 <_malloc_trim_r>:
 8015a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015a3c:	4f25      	ldr	r7, [pc, #148]	; (8015ad4 <_malloc_trim_r+0x9c>)
 8015a3e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8015ae0 <_malloc_trim_r+0xa8>
 8015a42:	4689      	mov	r9, r1
 8015a44:	4606      	mov	r6, r0
 8015a46:	f7fc fb6d 	bl	8012124 <__malloc_lock>
 8015a4a:	68bb      	ldr	r3, [r7, #8]
 8015a4c:	685d      	ldr	r5, [r3, #4]
 8015a4e:	f1a8 0411 	sub.w	r4, r8, #17
 8015a52:	f025 0503 	bic.w	r5, r5, #3
 8015a56:	eba4 0409 	sub.w	r4, r4, r9
 8015a5a:	442c      	add	r4, r5
 8015a5c:	fbb4 f4f8 	udiv	r4, r4, r8
 8015a60:	3c01      	subs	r4, #1
 8015a62:	fb08 f404 	mul.w	r4, r8, r4
 8015a66:	4544      	cmp	r4, r8
 8015a68:	da05      	bge.n	8015a76 <_malloc_trim_r+0x3e>
 8015a6a:	4630      	mov	r0, r6
 8015a6c:	f7fc fb60 	bl	8012130 <__malloc_unlock>
 8015a70:	2000      	movs	r0, #0
 8015a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a76:	2100      	movs	r1, #0
 8015a78:	4630      	mov	r0, r6
 8015a7a:	f7fc fdaf 	bl	80125dc <_sbrk_r>
 8015a7e:	68bb      	ldr	r3, [r7, #8]
 8015a80:	442b      	add	r3, r5
 8015a82:	4298      	cmp	r0, r3
 8015a84:	d1f1      	bne.n	8015a6a <_malloc_trim_r+0x32>
 8015a86:	4261      	negs	r1, r4
 8015a88:	4630      	mov	r0, r6
 8015a8a:	f7fc fda7 	bl	80125dc <_sbrk_r>
 8015a8e:	3001      	adds	r0, #1
 8015a90:	d110      	bne.n	8015ab4 <_malloc_trim_r+0x7c>
 8015a92:	2100      	movs	r1, #0
 8015a94:	4630      	mov	r0, r6
 8015a96:	f7fc fda1 	bl	80125dc <_sbrk_r>
 8015a9a:	68ba      	ldr	r2, [r7, #8]
 8015a9c:	1a83      	subs	r3, r0, r2
 8015a9e:	2b0f      	cmp	r3, #15
 8015aa0:	dde3      	ble.n	8015a6a <_malloc_trim_r+0x32>
 8015aa2:	490d      	ldr	r1, [pc, #52]	; (8015ad8 <_malloc_trim_r+0xa0>)
 8015aa4:	6809      	ldr	r1, [r1, #0]
 8015aa6:	1a40      	subs	r0, r0, r1
 8015aa8:	490c      	ldr	r1, [pc, #48]	; (8015adc <_malloc_trim_r+0xa4>)
 8015aaa:	f043 0301 	orr.w	r3, r3, #1
 8015aae:	6008      	str	r0, [r1, #0]
 8015ab0:	6053      	str	r3, [r2, #4]
 8015ab2:	e7da      	b.n	8015a6a <_malloc_trim_r+0x32>
 8015ab4:	68bb      	ldr	r3, [r7, #8]
 8015ab6:	4a09      	ldr	r2, [pc, #36]	; (8015adc <_malloc_trim_r+0xa4>)
 8015ab8:	1b2d      	subs	r5, r5, r4
 8015aba:	f045 0501 	orr.w	r5, r5, #1
 8015abe:	605d      	str	r5, [r3, #4]
 8015ac0:	6813      	ldr	r3, [r2, #0]
 8015ac2:	4630      	mov	r0, r6
 8015ac4:	1b1c      	subs	r4, r3, r4
 8015ac6:	6014      	str	r4, [r2, #0]
 8015ac8:	f7fc fb32 	bl	8012130 <__malloc_unlock>
 8015acc:	2001      	movs	r0, #1
 8015ace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015ad2:	bf00      	nop
 8015ad4:	20000108 	.word	0x20000108
 8015ad8:	20000510 	.word	0x20000510
 8015adc:	20000814 	.word	0x20000814
 8015ae0:	00001000 	.word	0x00001000

08015ae4 <_free_r>:
 8015ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ae8:	4604      	mov	r4, r0
 8015aea:	4688      	mov	r8, r1
 8015aec:	2900      	cmp	r1, #0
 8015aee:	f000 80ab 	beq.w	8015c48 <_free_r+0x164>
 8015af2:	f7fc fb17 	bl	8012124 <__malloc_lock>
 8015af6:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8015afa:	4d54      	ldr	r5, [pc, #336]	; (8015c4c <_free_r+0x168>)
 8015afc:	f022 0001 	bic.w	r0, r2, #1
 8015b00:	f1a8 0308 	sub.w	r3, r8, #8
 8015b04:	181f      	adds	r7, r3, r0
 8015b06:	68a9      	ldr	r1, [r5, #8]
 8015b08:	687e      	ldr	r6, [r7, #4]
 8015b0a:	428f      	cmp	r7, r1
 8015b0c:	f026 0603 	bic.w	r6, r6, #3
 8015b10:	f002 0201 	and.w	r2, r2, #1
 8015b14:	d11b      	bne.n	8015b4e <_free_r+0x6a>
 8015b16:	4430      	add	r0, r6
 8015b18:	b93a      	cbnz	r2, 8015b2a <_free_r+0x46>
 8015b1a:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8015b1e:	1a9b      	subs	r3, r3, r2
 8015b20:	4410      	add	r0, r2
 8015b22:	6899      	ldr	r1, [r3, #8]
 8015b24:	68da      	ldr	r2, [r3, #12]
 8015b26:	60ca      	str	r2, [r1, #12]
 8015b28:	6091      	str	r1, [r2, #8]
 8015b2a:	f040 0201 	orr.w	r2, r0, #1
 8015b2e:	605a      	str	r2, [r3, #4]
 8015b30:	60ab      	str	r3, [r5, #8]
 8015b32:	4b47      	ldr	r3, [pc, #284]	; (8015c50 <_free_r+0x16c>)
 8015b34:	681b      	ldr	r3, [r3, #0]
 8015b36:	4298      	cmp	r0, r3
 8015b38:	d304      	bcc.n	8015b44 <_free_r+0x60>
 8015b3a:	4b46      	ldr	r3, [pc, #280]	; (8015c54 <_free_r+0x170>)
 8015b3c:	4620      	mov	r0, r4
 8015b3e:	6819      	ldr	r1, [r3, #0]
 8015b40:	f7ff ff7a 	bl	8015a38 <_malloc_trim_r>
 8015b44:	4620      	mov	r0, r4
 8015b46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015b4a:	f7fc baf1 	b.w	8012130 <__malloc_unlock>
 8015b4e:	607e      	str	r6, [r7, #4]
 8015b50:	2a00      	cmp	r2, #0
 8015b52:	d139      	bne.n	8015bc8 <_free_r+0xe4>
 8015b54:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8015b58:	1a5b      	subs	r3, r3, r1
 8015b5a:	4408      	add	r0, r1
 8015b5c:	6899      	ldr	r1, [r3, #8]
 8015b5e:	f105 0e08 	add.w	lr, r5, #8
 8015b62:	4571      	cmp	r1, lr
 8015b64:	d032      	beq.n	8015bcc <_free_r+0xe8>
 8015b66:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8015b6a:	f8c1 e00c 	str.w	lr, [r1, #12]
 8015b6e:	f8ce 1008 	str.w	r1, [lr, #8]
 8015b72:	19b9      	adds	r1, r7, r6
 8015b74:	6849      	ldr	r1, [r1, #4]
 8015b76:	07c9      	lsls	r1, r1, #31
 8015b78:	d40a      	bmi.n	8015b90 <_free_r+0xac>
 8015b7a:	4430      	add	r0, r6
 8015b7c:	68b9      	ldr	r1, [r7, #8]
 8015b7e:	bb3a      	cbnz	r2, 8015bd0 <_free_r+0xec>
 8015b80:	4e35      	ldr	r6, [pc, #212]	; (8015c58 <_free_r+0x174>)
 8015b82:	42b1      	cmp	r1, r6
 8015b84:	d124      	bne.n	8015bd0 <_free_r+0xec>
 8015b86:	616b      	str	r3, [r5, #20]
 8015b88:	612b      	str	r3, [r5, #16]
 8015b8a:	2201      	movs	r2, #1
 8015b8c:	60d9      	str	r1, [r3, #12]
 8015b8e:	6099      	str	r1, [r3, #8]
 8015b90:	f040 0101 	orr.w	r1, r0, #1
 8015b94:	6059      	str	r1, [r3, #4]
 8015b96:	5018      	str	r0, [r3, r0]
 8015b98:	2a00      	cmp	r2, #0
 8015b9a:	d1d3      	bne.n	8015b44 <_free_r+0x60>
 8015b9c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8015ba0:	d21a      	bcs.n	8015bd8 <_free_r+0xf4>
 8015ba2:	08c0      	lsrs	r0, r0, #3
 8015ba4:	1081      	asrs	r1, r0, #2
 8015ba6:	2201      	movs	r2, #1
 8015ba8:	408a      	lsls	r2, r1
 8015baa:	6869      	ldr	r1, [r5, #4]
 8015bac:	3001      	adds	r0, #1
 8015bae:	430a      	orrs	r2, r1
 8015bb0:	606a      	str	r2, [r5, #4]
 8015bb2:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8015bb6:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8015bba:	6099      	str	r1, [r3, #8]
 8015bbc:	3a08      	subs	r2, #8
 8015bbe:	60da      	str	r2, [r3, #12]
 8015bc0:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8015bc4:	60cb      	str	r3, [r1, #12]
 8015bc6:	e7bd      	b.n	8015b44 <_free_r+0x60>
 8015bc8:	2200      	movs	r2, #0
 8015bca:	e7d2      	b.n	8015b72 <_free_r+0x8e>
 8015bcc:	2201      	movs	r2, #1
 8015bce:	e7d0      	b.n	8015b72 <_free_r+0x8e>
 8015bd0:	68fe      	ldr	r6, [r7, #12]
 8015bd2:	60ce      	str	r6, [r1, #12]
 8015bd4:	60b1      	str	r1, [r6, #8]
 8015bd6:	e7db      	b.n	8015b90 <_free_r+0xac>
 8015bd8:	0a42      	lsrs	r2, r0, #9
 8015bda:	2a04      	cmp	r2, #4
 8015bdc:	d813      	bhi.n	8015c06 <_free_r+0x122>
 8015bde:	0982      	lsrs	r2, r0, #6
 8015be0:	3238      	adds	r2, #56	; 0x38
 8015be2:	1c51      	adds	r1, r2, #1
 8015be4:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8015be8:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8015bec:	428e      	cmp	r6, r1
 8015bee:	d124      	bne.n	8015c3a <_free_r+0x156>
 8015bf0:	2001      	movs	r0, #1
 8015bf2:	1092      	asrs	r2, r2, #2
 8015bf4:	fa00 f202 	lsl.w	r2, r0, r2
 8015bf8:	6868      	ldr	r0, [r5, #4]
 8015bfa:	4302      	orrs	r2, r0
 8015bfc:	606a      	str	r2, [r5, #4]
 8015bfe:	60de      	str	r6, [r3, #12]
 8015c00:	6099      	str	r1, [r3, #8]
 8015c02:	60b3      	str	r3, [r6, #8]
 8015c04:	e7de      	b.n	8015bc4 <_free_r+0xe0>
 8015c06:	2a14      	cmp	r2, #20
 8015c08:	d801      	bhi.n	8015c0e <_free_r+0x12a>
 8015c0a:	325b      	adds	r2, #91	; 0x5b
 8015c0c:	e7e9      	b.n	8015be2 <_free_r+0xfe>
 8015c0e:	2a54      	cmp	r2, #84	; 0x54
 8015c10:	d802      	bhi.n	8015c18 <_free_r+0x134>
 8015c12:	0b02      	lsrs	r2, r0, #12
 8015c14:	326e      	adds	r2, #110	; 0x6e
 8015c16:	e7e4      	b.n	8015be2 <_free_r+0xfe>
 8015c18:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8015c1c:	d802      	bhi.n	8015c24 <_free_r+0x140>
 8015c1e:	0bc2      	lsrs	r2, r0, #15
 8015c20:	3277      	adds	r2, #119	; 0x77
 8015c22:	e7de      	b.n	8015be2 <_free_r+0xfe>
 8015c24:	f240 5154 	movw	r1, #1364	; 0x554
 8015c28:	428a      	cmp	r2, r1
 8015c2a:	bf9a      	itte	ls
 8015c2c:	0c82      	lsrls	r2, r0, #18
 8015c2e:	327c      	addls	r2, #124	; 0x7c
 8015c30:	227e      	movhi	r2, #126	; 0x7e
 8015c32:	e7d6      	b.n	8015be2 <_free_r+0xfe>
 8015c34:	6889      	ldr	r1, [r1, #8]
 8015c36:	428e      	cmp	r6, r1
 8015c38:	d004      	beq.n	8015c44 <_free_r+0x160>
 8015c3a:	684a      	ldr	r2, [r1, #4]
 8015c3c:	f022 0203 	bic.w	r2, r2, #3
 8015c40:	4290      	cmp	r0, r2
 8015c42:	d3f7      	bcc.n	8015c34 <_free_r+0x150>
 8015c44:	68ce      	ldr	r6, [r1, #12]
 8015c46:	e7da      	b.n	8015bfe <_free_r+0x11a>
 8015c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c4c:	20000108 	.word	0x20000108
 8015c50:	20000514 	.word	0x20000514
 8015c54:	20000844 	.word	0x20000844
 8015c58:	20000110 	.word	0x20000110

08015c5c <_fwalk_reent>:
 8015c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015c60:	4680      	mov	r8, r0
 8015c62:	4689      	mov	r9, r1
 8015c64:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 8015c68:	2600      	movs	r6, #0
 8015c6a:	b914      	cbnz	r4, 8015c72 <_fwalk_reent+0x16>
 8015c6c:	4630      	mov	r0, r6
 8015c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015c72:	68a5      	ldr	r5, [r4, #8]
 8015c74:	6867      	ldr	r7, [r4, #4]
 8015c76:	3f01      	subs	r7, #1
 8015c78:	d501      	bpl.n	8015c7e <_fwalk_reent+0x22>
 8015c7a:	6824      	ldr	r4, [r4, #0]
 8015c7c:	e7f5      	b.n	8015c6a <_fwalk_reent+0xe>
 8015c7e:	89ab      	ldrh	r3, [r5, #12]
 8015c80:	2b01      	cmp	r3, #1
 8015c82:	d907      	bls.n	8015c94 <_fwalk_reent+0x38>
 8015c84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015c88:	3301      	adds	r3, #1
 8015c8a:	d003      	beq.n	8015c94 <_fwalk_reent+0x38>
 8015c8c:	4629      	mov	r1, r5
 8015c8e:	4640      	mov	r0, r8
 8015c90:	47c8      	blx	r9
 8015c92:	4306      	orrs	r6, r0
 8015c94:	3568      	adds	r5, #104	; 0x68
 8015c96:	e7ee      	b.n	8015c76 <_fwalk_reent+0x1a>

08015c98 <__locale_mb_cur_max>:
 8015c98:	4b04      	ldr	r3, [pc, #16]	; (8015cac <__locale_mb_cur_max+0x14>)
 8015c9a:	4a05      	ldr	r2, [pc, #20]	; (8015cb0 <__locale_mb_cur_max+0x18>)
 8015c9c:	681b      	ldr	r3, [r3, #0]
 8015c9e:	6a1b      	ldr	r3, [r3, #32]
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	bf08      	it	eq
 8015ca4:	4613      	moveq	r3, r2
 8015ca6:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8015caa:	4770      	bx	lr
 8015cac:	20000014 	.word	0x20000014
 8015cb0:	2000051c 	.word	0x2000051c

08015cb4 <_localeconv_r>:
 8015cb4:	4b04      	ldr	r3, [pc, #16]	; (8015cc8 <_localeconv_r+0x14>)
 8015cb6:	681b      	ldr	r3, [r3, #0]
 8015cb8:	6a18      	ldr	r0, [r3, #32]
 8015cba:	4b04      	ldr	r3, [pc, #16]	; (8015ccc <_localeconv_r+0x18>)
 8015cbc:	2800      	cmp	r0, #0
 8015cbe:	bf08      	it	eq
 8015cc0:	4618      	moveq	r0, r3
 8015cc2:	30f0      	adds	r0, #240	; 0xf0
 8015cc4:	4770      	bx	lr
 8015cc6:	bf00      	nop
 8015cc8:	20000014 	.word	0x20000014
 8015ccc:	2000051c 	.word	0x2000051c

08015cd0 <__swhatbuf_r>:
 8015cd0:	b570      	push	{r4, r5, r6, lr}
 8015cd2:	460e      	mov	r6, r1
 8015cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015cd8:	2900      	cmp	r1, #0
 8015cda:	b090      	sub	sp, #64	; 0x40
 8015cdc:	4614      	mov	r4, r2
 8015cde:	461d      	mov	r5, r3
 8015ce0:	da09      	bge.n	8015cf6 <__swhatbuf_r+0x26>
 8015ce2:	89b3      	ldrh	r3, [r6, #12]
 8015ce4:	2200      	movs	r2, #0
 8015ce6:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8015cea:	602a      	str	r2, [r5, #0]
 8015cec:	d116      	bne.n	8015d1c <__swhatbuf_r+0x4c>
 8015cee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015cf2:	6023      	str	r3, [r4, #0]
 8015cf4:	e015      	b.n	8015d22 <__swhatbuf_r+0x52>
 8015cf6:	aa01      	add	r2, sp, #4
 8015cf8:	f000 fd4a 	bl	8016790 <_fstat_r>
 8015cfc:	2800      	cmp	r0, #0
 8015cfe:	dbf0      	blt.n	8015ce2 <__swhatbuf_r+0x12>
 8015d00:	9a02      	ldr	r2, [sp, #8]
 8015d02:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015d06:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015d0a:	425a      	negs	r2, r3
 8015d0c:	415a      	adcs	r2, r3
 8015d0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015d12:	602a      	str	r2, [r5, #0]
 8015d14:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8015d18:	6023      	str	r3, [r4, #0]
 8015d1a:	e002      	b.n	8015d22 <__swhatbuf_r+0x52>
 8015d1c:	2340      	movs	r3, #64	; 0x40
 8015d1e:	6023      	str	r3, [r4, #0]
 8015d20:	4610      	mov	r0, r2
 8015d22:	b010      	add	sp, #64	; 0x40
 8015d24:	bd70      	pop	{r4, r5, r6, pc}
	...

08015d28 <__smakebuf_r>:
 8015d28:	898b      	ldrh	r3, [r1, #12]
 8015d2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015d2c:	079d      	lsls	r5, r3, #30
 8015d2e:	4606      	mov	r6, r0
 8015d30:	460c      	mov	r4, r1
 8015d32:	d507      	bpl.n	8015d44 <__smakebuf_r+0x1c>
 8015d34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015d38:	6023      	str	r3, [r4, #0]
 8015d3a:	6123      	str	r3, [r4, #16]
 8015d3c:	2301      	movs	r3, #1
 8015d3e:	6163      	str	r3, [r4, #20]
 8015d40:	b002      	add	sp, #8
 8015d42:	bd70      	pop	{r4, r5, r6, pc}
 8015d44:	ab01      	add	r3, sp, #4
 8015d46:	466a      	mov	r2, sp
 8015d48:	f7ff ffc2 	bl	8015cd0 <__swhatbuf_r>
 8015d4c:	9900      	ldr	r1, [sp, #0]
 8015d4e:	4605      	mov	r5, r0
 8015d50:	4630      	mov	r0, r6
 8015d52:	f7fb ff9d 	bl	8011c90 <_malloc_r>
 8015d56:	b948      	cbnz	r0, 8015d6c <__smakebuf_r+0x44>
 8015d58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015d5c:	059a      	lsls	r2, r3, #22
 8015d5e:	d4ef      	bmi.n	8015d40 <__smakebuf_r+0x18>
 8015d60:	f023 0303 	bic.w	r3, r3, #3
 8015d64:	f043 0302 	orr.w	r3, r3, #2
 8015d68:	81a3      	strh	r3, [r4, #12]
 8015d6a:	e7e3      	b.n	8015d34 <__smakebuf_r+0xc>
 8015d6c:	4b0d      	ldr	r3, [pc, #52]	; (8015da4 <__smakebuf_r+0x7c>)
 8015d6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8015d70:	89a3      	ldrh	r3, [r4, #12]
 8015d72:	6020      	str	r0, [r4, #0]
 8015d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015d78:	81a3      	strh	r3, [r4, #12]
 8015d7a:	9b00      	ldr	r3, [sp, #0]
 8015d7c:	6163      	str	r3, [r4, #20]
 8015d7e:	9b01      	ldr	r3, [sp, #4]
 8015d80:	6120      	str	r0, [r4, #16]
 8015d82:	b15b      	cbz	r3, 8015d9c <__smakebuf_r+0x74>
 8015d84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015d88:	4630      	mov	r0, r6
 8015d8a:	f000 fd13 	bl	80167b4 <_isatty_r>
 8015d8e:	b128      	cbz	r0, 8015d9c <__smakebuf_r+0x74>
 8015d90:	89a3      	ldrh	r3, [r4, #12]
 8015d92:	f023 0303 	bic.w	r3, r3, #3
 8015d96:	f043 0301 	orr.w	r3, r3, #1
 8015d9a:	81a3      	strh	r3, [r4, #12]
 8015d9c:	89a3      	ldrh	r3, [r4, #12]
 8015d9e:	431d      	orrs	r5, r3
 8015da0:	81a5      	strh	r5, [r4, #12]
 8015da2:	e7cd      	b.n	8015d40 <__smakebuf_r+0x18>
 8015da4:	08015889 	.word	0x08015889

08015da8 <__ascii_mbtowc>:
 8015da8:	b082      	sub	sp, #8
 8015daa:	b901      	cbnz	r1, 8015dae <__ascii_mbtowc+0x6>
 8015dac:	a901      	add	r1, sp, #4
 8015dae:	b142      	cbz	r2, 8015dc2 <__ascii_mbtowc+0x1a>
 8015db0:	b14b      	cbz	r3, 8015dc6 <__ascii_mbtowc+0x1e>
 8015db2:	7813      	ldrb	r3, [r2, #0]
 8015db4:	600b      	str	r3, [r1, #0]
 8015db6:	7812      	ldrb	r2, [r2, #0]
 8015db8:	1c10      	adds	r0, r2, #0
 8015dba:	bf18      	it	ne
 8015dbc:	2001      	movne	r0, #1
 8015dbe:	b002      	add	sp, #8
 8015dc0:	4770      	bx	lr
 8015dc2:	4610      	mov	r0, r2
 8015dc4:	e7fb      	b.n	8015dbe <__ascii_mbtowc+0x16>
 8015dc6:	f06f 0001 	mvn.w	r0, #1
 8015dca:	e7f8      	b.n	8015dbe <__ascii_mbtowc+0x16>

08015dcc <_Balloc>:
 8015dcc:	b570      	push	{r4, r5, r6, lr}
 8015dce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015dd0:	4604      	mov	r4, r0
 8015dd2:	460e      	mov	r6, r1
 8015dd4:	b93d      	cbnz	r5, 8015de6 <_Balloc+0x1a>
 8015dd6:	2010      	movs	r0, #16
 8015dd8:	f7fb ff4a 	bl	8011c70 <malloc>
 8015ddc:	6260      	str	r0, [r4, #36]	; 0x24
 8015dde:	6045      	str	r5, [r0, #4]
 8015de0:	6085      	str	r5, [r0, #8]
 8015de2:	6005      	str	r5, [r0, #0]
 8015de4:	60c5      	str	r5, [r0, #12]
 8015de6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8015de8:	68eb      	ldr	r3, [r5, #12]
 8015dea:	b183      	cbz	r3, 8015e0e <_Balloc+0x42>
 8015dec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015dee:	68db      	ldr	r3, [r3, #12]
 8015df0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8015df4:	b9b8      	cbnz	r0, 8015e26 <_Balloc+0x5a>
 8015df6:	2101      	movs	r1, #1
 8015df8:	fa01 f506 	lsl.w	r5, r1, r6
 8015dfc:	1d6a      	adds	r2, r5, #5
 8015dfe:	0092      	lsls	r2, r2, #2
 8015e00:	4620      	mov	r0, r4
 8015e02:	f000 fbb2 	bl	801656a <_calloc_r>
 8015e06:	b160      	cbz	r0, 8015e22 <_Balloc+0x56>
 8015e08:	6046      	str	r6, [r0, #4]
 8015e0a:	6085      	str	r5, [r0, #8]
 8015e0c:	e00e      	b.n	8015e2c <_Balloc+0x60>
 8015e0e:	2221      	movs	r2, #33	; 0x21
 8015e10:	2104      	movs	r1, #4
 8015e12:	4620      	mov	r0, r4
 8015e14:	f000 fba9 	bl	801656a <_calloc_r>
 8015e18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015e1a:	60e8      	str	r0, [r5, #12]
 8015e1c:	68db      	ldr	r3, [r3, #12]
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d1e4      	bne.n	8015dec <_Balloc+0x20>
 8015e22:	2000      	movs	r0, #0
 8015e24:	bd70      	pop	{r4, r5, r6, pc}
 8015e26:	6802      	ldr	r2, [r0, #0]
 8015e28:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8015e2c:	2300      	movs	r3, #0
 8015e2e:	6103      	str	r3, [r0, #16]
 8015e30:	60c3      	str	r3, [r0, #12]
 8015e32:	bd70      	pop	{r4, r5, r6, pc}

08015e34 <_Bfree>:
 8015e34:	b570      	push	{r4, r5, r6, lr}
 8015e36:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8015e38:	4606      	mov	r6, r0
 8015e3a:	460d      	mov	r5, r1
 8015e3c:	b93c      	cbnz	r4, 8015e4e <_Bfree+0x1a>
 8015e3e:	2010      	movs	r0, #16
 8015e40:	f7fb ff16 	bl	8011c70 <malloc>
 8015e44:	6270      	str	r0, [r6, #36]	; 0x24
 8015e46:	6044      	str	r4, [r0, #4]
 8015e48:	6084      	str	r4, [r0, #8]
 8015e4a:	6004      	str	r4, [r0, #0]
 8015e4c:	60c4      	str	r4, [r0, #12]
 8015e4e:	b13d      	cbz	r5, 8015e60 <_Bfree+0x2c>
 8015e50:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8015e52:	686a      	ldr	r2, [r5, #4]
 8015e54:	68db      	ldr	r3, [r3, #12]
 8015e56:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015e5a:	6029      	str	r1, [r5, #0]
 8015e5c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8015e60:	bd70      	pop	{r4, r5, r6, pc}

08015e62 <__multadd>:
 8015e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e66:	690d      	ldr	r5, [r1, #16]
 8015e68:	461f      	mov	r7, r3
 8015e6a:	4606      	mov	r6, r0
 8015e6c:	460c      	mov	r4, r1
 8015e6e:	f101 0e14 	add.w	lr, r1, #20
 8015e72:	2300      	movs	r3, #0
 8015e74:	f8de 0000 	ldr.w	r0, [lr]
 8015e78:	b281      	uxth	r1, r0
 8015e7a:	fb02 7101 	mla	r1, r2, r1, r7
 8015e7e:	0c0f      	lsrs	r7, r1, #16
 8015e80:	0c00      	lsrs	r0, r0, #16
 8015e82:	fb02 7000 	mla	r0, r2, r0, r7
 8015e86:	b289      	uxth	r1, r1
 8015e88:	3301      	adds	r3, #1
 8015e8a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8015e8e:	429d      	cmp	r5, r3
 8015e90:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8015e94:	f84e 1b04 	str.w	r1, [lr], #4
 8015e98:	dcec      	bgt.n	8015e74 <__multadd+0x12>
 8015e9a:	b1d7      	cbz	r7, 8015ed2 <__multadd+0x70>
 8015e9c:	68a3      	ldr	r3, [r4, #8]
 8015e9e:	429d      	cmp	r5, r3
 8015ea0:	db12      	blt.n	8015ec8 <__multadd+0x66>
 8015ea2:	6861      	ldr	r1, [r4, #4]
 8015ea4:	4630      	mov	r0, r6
 8015ea6:	3101      	adds	r1, #1
 8015ea8:	f7ff ff90 	bl	8015dcc <_Balloc>
 8015eac:	6922      	ldr	r2, [r4, #16]
 8015eae:	3202      	adds	r2, #2
 8015eb0:	f104 010c 	add.w	r1, r4, #12
 8015eb4:	4680      	mov	r8, r0
 8015eb6:	0092      	lsls	r2, r2, #2
 8015eb8:	300c      	adds	r0, #12
 8015eba:	f7fc f906 	bl	80120ca <memcpy>
 8015ebe:	4621      	mov	r1, r4
 8015ec0:	4630      	mov	r0, r6
 8015ec2:	f7ff ffb7 	bl	8015e34 <_Bfree>
 8015ec6:	4644      	mov	r4, r8
 8015ec8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015ecc:	3501      	adds	r5, #1
 8015ece:	615f      	str	r7, [r3, #20]
 8015ed0:	6125      	str	r5, [r4, #16]
 8015ed2:	4620      	mov	r0, r4
 8015ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015ed8 <__hi0bits>:
 8015ed8:	0c02      	lsrs	r2, r0, #16
 8015eda:	0412      	lsls	r2, r2, #16
 8015edc:	4603      	mov	r3, r0
 8015ede:	b9b2      	cbnz	r2, 8015f0e <__hi0bits+0x36>
 8015ee0:	0403      	lsls	r3, r0, #16
 8015ee2:	2010      	movs	r0, #16
 8015ee4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8015ee8:	bf04      	itt	eq
 8015eea:	021b      	lsleq	r3, r3, #8
 8015eec:	3008      	addeq	r0, #8
 8015eee:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8015ef2:	bf04      	itt	eq
 8015ef4:	011b      	lsleq	r3, r3, #4
 8015ef6:	3004      	addeq	r0, #4
 8015ef8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8015efc:	bf04      	itt	eq
 8015efe:	009b      	lsleq	r3, r3, #2
 8015f00:	3002      	addeq	r0, #2
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	db06      	blt.n	8015f14 <__hi0bits+0x3c>
 8015f06:	005b      	lsls	r3, r3, #1
 8015f08:	d503      	bpl.n	8015f12 <__hi0bits+0x3a>
 8015f0a:	3001      	adds	r0, #1
 8015f0c:	4770      	bx	lr
 8015f0e:	2000      	movs	r0, #0
 8015f10:	e7e8      	b.n	8015ee4 <__hi0bits+0xc>
 8015f12:	2020      	movs	r0, #32
 8015f14:	4770      	bx	lr

08015f16 <__lo0bits>:
 8015f16:	6803      	ldr	r3, [r0, #0]
 8015f18:	f013 0207 	ands.w	r2, r3, #7
 8015f1c:	4601      	mov	r1, r0
 8015f1e:	d00b      	beq.n	8015f38 <__lo0bits+0x22>
 8015f20:	07da      	lsls	r2, r3, #31
 8015f22:	d423      	bmi.n	8015f6c <__lo0bits+0x56>
 8015f24:	0798      	lsls	r0, r3, #30
 8015f26:	bf49      	itett	mi
 8015f28:	085b      	lsrmi	r3, r3, #1
 8015f2a:	089b      	lsrpl	r3, r3, #2
 8015f2c:	2001      	movmi	r0, #1
 8015f2e:	600b      	strmi	r3, [r1, #0]
 8015f30:	bf5c      	itt	pl
 8015f32:	600b      	strpl	r3, [r1, #0]
 8015f34:	2002      	movpl	r0, #2
 8015f36:	4770      	bx	lr
 8015f38:	b298      	uxth	r0, r3
 8015f3a:	b9a8      	cbnz	r0, 8015f68 <__lo0bits+0x52>
 8015f3c:	0c1b      	lsrs	r3, r3, #16
 8015f3e:	2010      	movs	r0, #16
 8015f40:	f013 0fff 	tst.w	r3, #255	; 0xff
 8015f44:	bf04      	itt	eq
 8015f46:	0a1b      	lsreq	r3, r3, #8
 8015f48:	3008      	addeq	r0, #8
 8015f4a:	071a      	lsls	r2, r3, #28
 8015f4c:	bf04      	itt	eq
 8015f4e:	091b      	lsreq	r3, r3, #4
 8015f50:	3004      	addeq	r0, #4
 8015f52:	079a      	lsls	r2, r3, #30
 8015f54:	bf04      	itt	eq
 8015f56:	089b      	lsreq	r3, r3, #2
 8015f58:	3002      	addeq	r0, #2
 8015f5a:	07da      	lsls	r2, r3, #31
 8015f5c:	d402      	bmi.n	8015f64 <__lo0bits+0x4e>
 8015f5e:	085b      	lsrs	r3, r3, #1
 8015f60:	d006      	beq.n	8015f70 <__lo0bits+0x5a>
 8015f62:	3001      	adds	r0, #1
 8015f64:	600b      	str	r3, [r1, #0]
 8015f66:	4770      	bx	lr
 8015f68:	4610      	mov	r0, r2
 8015f6a:	e7e9      	b.n	8015f40 <__lo0bits+0x2a>
 8015f6c:	2000      	movs	r0, #0
 8015f6e:	4770      	bx	lr
 8015f70:	2020      	movs	r0, #32
 8015f72:	4770      	bx	lr

08015f74 <__i2b>:
 8015f74:	b510      	push	{r4, lr}
 8015f76:	460c      	mov	r4, r1
 8015f78:	2101      	movs	r1, #1
 8015f7a:	f7ff ff27 	bl	8015dcc <_Balloc>
 8015f7e:	2201      	movs	r2, #1
 8015f80:	6144      	str	r4, [r0, #20]
 8015f82:	6102      	str	r2, [r0, #16]
 8015f84:	bd10      	pop	{r4, pc}

08015f86 <__multiply>:
 8015f86:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f8a:	4614      	mov	r4, r2
 8015f8c:	690a      	ldr	r2, [r1, #16]
 8015f8e:	6923      	ldr	r3, [r4, #16]
 8015f90:	429a      	cmp	r2, r3
 8015f92:	bfb8      	it	lt
 8015f94:	460b      	movlt	r3, r1
 8015f96:	4689      	mov	r9, r1
 8015f98:	bfbc      	itt	lt
 8015f9a:	46a1      	movlt	r9, r4
 8015f9c:	461c      	movlt	r4, r3
 8015f9e:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8015fa2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8015fa6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8015faa:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8015fae:	eb07 060a 	add.w	r6, r7, sl
 8015fb2:	429e      	cmp	r6, r3
 8015fb4:	bfc8      	it	gt
 8015fb6:	3101      	addgt	r1, #1
 8015fb8:	f7ff ff08 	bl	8015dcc <_Balloc>
 8015fbc:	f100 0514 	add.w	r5, r0, #20
 8015fc0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015fc4:	462b      	mov	r3, r5
 8015fc6:	2200      	movs	r2, #0
 8015fc8:	4543      	cmp	r3, r8
 8015fca:	d316      	bcc.n	8015ffa <__multiply+0x74>
 8015fcc:	f104 0214 	add.w	r2, r4, #20
 8015fd0:	f109 0114 	add.w	r1, r9, #20
 8015fd4:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8015fd8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8015fdc:	9301      	str	r3, [sp, #4]
 8015fde:	9c01      	ldr	r4, [sp, #4]
 8015fe0:	4294      	cmp	r4, r2
 8015fe2:	4613      	mov	r3, r2
 8015fe4:	d80c      	bhi.n	8016000 <__multiply+0x7a>
 8015fe6:	2e00      	cmp	r6, #0
 8015fe8:	dd03      	ble.n	8015ff2 <__multiply+0x6c>
 8015fea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d054      	beq.n	801609c <__multiply+0x116>
 8015ff2:	6106      	str	r6, [r0, #16]
 8015ff4:	b003      	add	sp, #12
 8015ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ffa:	f843 2b04 	str.w	r2, [r3], #4
 8015ffe:	e7e3      	b.n	8015fc8 <__multiply+0x42>
 8016000:	f8b3 a000 	ldrh.w	sl, [r3]
 8016004:	3204      	adds	r2, #4
 8016006:	f1ba 0f00 	cmp.w	sl, #0
 801600a:	d020      	beq.n	801604e <__multiply+0xc8>
 801600c:	46ae      	mov	lr, r5
 801600e:	4689      	mov	r9, r1
 8016010:	f04f 0c00 	mov.w	ip, #0
 8016014:	f859 4b04 	ldr.w	r4, [r9], #4
 8016018:	f8be b000 	ldrh.w	fp, [lr]
 801601c:	b2a3      	uxth	r3, r4
 801601e:	fb0a b303 	mla	r3, sl, r3, fp
 8016022:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8016026:	f8de 4000 	ldr.w	r4, [lr]
 801602a:	4463      	add	r3, ip
 801602c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8016030:	fb0a c40b 	mla	r4, sl, fp, ip
 8016034:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8016038:	b29b      	uxth	r3, r3
 801603a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801603e:	454f      	cmp	r7, r9
 8016040:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8016044:	f84e 3b04 	str.w	r3, [lr], #4
 8016048:	d8e4      	bhi.n	8016014 <__multiply+0x8e>
 801604a:	f8ce c000 	str.w	ip, [lr]
 801604e:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8016052:	f1b9 0f00 	cmp.w	r9, #0
 8016056:	d01f      	beq.n	8016098 <__multiply+0x112>
 8016058:	682b      	ldr	r3, [r5, #0]
 801605a:	46ae      	mov	lr, r5
 801605c:	468c      	mov	ip, r1
 801605e:	f04f 0a00 	mov.w	sl, #0
 8016062:	f8bc 4000 	ldrh.w	r4, [ip]
 8016066:	f8be b002 	ldrh.w	fp, [lr, #2]
 801606a:	fb09 b404 	mla	r4, r9, r4, fp
 801606e:	44a2      	add	sl, r4
 8016070:	b29b      	uxth	r3, r3
 8016072:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8016076:	f84e 3b04 	str.w	r3, [lr], #4
 801607a:	f85c 3b04 	ldr.w	r3, [ip], #4
 801607e:	f8be 4000 	ldrh.w	r4, [lr]
 8016082:	0c1b      	lsrs	r3, r3, #16
 8016084:	fb09 4303 	mla	r3, r9, r3, r4
 8016088:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 801608c:	4567      	cmp	r7, ip
 801608e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016092:	d8e6      	bhi.n	8016062 <__multiply+0xdc>
 8016094:	f8ce 3000 	str.w	r3, [lr]
 8016098:	3504      	adds	r5, #4
 801609a:	e7a0      	b.n	8015fde <__multiply+0x58>
 801609c:	3e01      	subs	r6, #1
 801609e:	e7a2      	b.n	8015fe6 <__multiply+0x60>

080160a0 <__pow5mult>:
 80160a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80160a4:	4615      	mov	r5, r2
 80160a6:	f012 0203 	ands.w	r2, r2, #3
 80160aa:	4606      	mov	r6, r0
 80160ac:	460f      	mov	r7, r1
 80160ae:	d007      	beq.n	80160c0 <__pow5mult+0x20>
 80160b0:	3a01      	subs	r2, #1
 80160b2:	4c21      	ldr	r4, [pc, #132]	; (8016138 <__pow5mult+0x98>)
 80160b4:	2300      	movs	r3, #0
 80160b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80160ba:	f7ff fed2 	bl	8015e62 <__multadd>
 80160be:	4607      	mov	r7, r0
 80160c0:	10ad      	asrs	r5, r5, #2
 80160c2:	d035      	beq.n	8016130 <__pow5mult+0x90>
 80160c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80160c6:	b93c      	cbnz	r4, 80160d8 <__pow5mult+0x38>
 80160c8:	2010      	movs	r0, #16
 80160ca:	f7fb fdd1 	bl	8011c70 <malloc>
 80160ce:	6270      	str	r0, [r6, #36]	; 0x24
 80160d0:	6044      	str	r4, [r0, #4]
 80160d2:	6084      	str	r4, [r0, #8]
 80160d4:	6004      	str	r4, [r0, #0]
 80160d6:	60c4      	str	r4, [r0, #12]
 80160d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80160dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80160e0:	b94c      	cbnz	r4, 80160f6 <__pow5mult+0x56>
 80160e2:	f240 2171 	movw	r1, #625	; 0x271
 80160e6:	4630      	mov	r0, r6
 80160e8:	f7ff ff44 	bl	8015f74 <__i2b>
 80160ec:	2300      	movs	r3, #0
 80160ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80160f2:	4604      	mov	r4, r0
 80160f4:	6003      	str	r3, [r0, #0]
 80160f6:	f04f 0800 	mov.w	r8, #0
 80160fa:	07eb      	lsls	r3, r5, #31
 80160fc:	d50a      	bpl.n	8016114 <__pow5mult+0x74>
 80160fe:	4639      	mov	r1, r7
 8016100:	4622      	mov	r2, r4
 8016102:	4630      	mov	r0, r6
 8016104:	f7ff ff3f 	bl	8015f86 <__multiply>
 8016108:	4639      	mov	r1, r7
 801610a:	4681      	mov	r9, r0
 801610c:	4630      	mov	r0, r6
 801610e:	f7ff fe91 	bl	8015e34 <_Bfree>
 8016112:	464f      	mov	r7, r9
 8016114:	106d      	asrs	r5, r5, #1
 8016116:	d00b      	beq.n	8016130 <__pow5mult+0x90>
 8016118:	6820      	ldr	r0, [r4, #0]
 801611a:	b938      	cbnz	r0, 801612c <__pow5mult+0x8c>
 801611c:	4622      	mov	r2, r4
 801611e:	4621      	mov	r1, r4
 8016120:	4630      	mov	r0, r6
 8016122:	f7ff ff30 	bl	8015f86 <__multiply>
 8016126:	6020      	str	r0, [r4, #0]
 8016128:	f8c0 8000 	str.w	r8, [r0]
 801612c:	4604      	mov	r4, r0
 801612e:	e7e4      	b.n	80160fa <__pow5mult+0x5a>
 8016130:	4638      	mov	r0, r7
 8016132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016136:	bf00      	nop
 8016138:	080184c0 	.word	0x080184c0

0801613c <__lshift>:
 801613c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016140:	460c      	mov	r4, r1
 8016142:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016146:	6923      	ldr	r3, [r4, #16]
 8016148:	6849      	ldr	r1, [r1, #4]
 801614a:	eb0a 0903 	add.w	r9, sl, r3
 801614e:	68a3      	ldr	r3, [r4, #8]
 8016150:	4607      	mov	r7, r0
 8016152:	4616      	mov	r6, r2
 8016154:	f109 0501 	add.w	r5, r9, #1
 8016158:	42ab      	cmp	r3, r5
 801615a:	db31      	blt.n	80161c0 <__lshift+0x84>
 801615c:	4638      	mov	r0, r7
 801615e:	f7ff fe35 	bl	8015dcc <_Balloc>
 8016162:	2200      	movs	r2, #0
 8016164:	4680      	mov	r8, r0
 8016166:	f100 0314 	add.w	r3, r0, #20
 801616a:	4611      	mov	r1, r2
 801616c:	4552      	cmp	r2, sl
 801616e:	db2a      	blt.n	80161c6 <__lshift+0x8a>
 8016170:	6920      	ldr	r0, [r4, #16]
 8016172:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016176:	f104 0114 	add.w	r1, r4, #20
 801617a:	f016 021f 	ands.w	r2, r6, #31
 801617e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8016182:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8016186:	d022      	beq.n	80161ce <__lshift+0x92>
 8016188:	f1c2 0c20 	rsb	ip, r2, #32
 801618c:	2000      	movs	r0, #0
 801618e:	680e      	ldr	r6, [r1, #0]
 8016190:	4096      	lsls	r6, r2
 8016192:	4330      	orrs	r0, r6
 8016194:	f843 0b04 	str.w	r0, [r3], #4
 8016198:	f851 0b04 	ldr.w	r0, [r1], #4
 801619c:	458e      	cmp	lr, r1
 801619e:	fa20 f00c 	lsr.w	r0, r0, ip
 80161a2:	d8f4      	bhi.n	801618e <__lshift+0x52>
 80161a4:	6018      	str	r0, [r3, #0]
 80161a6:	b108      	cbz	r0, 80161ac <__lshift+0x70>
 80161a8:	f109 0502 	add.w	r5, r9, #2
 80161ac:	3d01      	subs	r5, #1
 80161ae:	4638      	mov	r0, r7
 80161b0:	f8c8 5010 	str.w	r5, [r8, #16]
 80161b4:	4621      	mov	r1, r4
 80161b6:	f7ff fe3d 	bl	8015e34 <_Bfree>
 80161ba:	4640      	mov	r0, r8
 80161bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80161c0:	3101      	adds	r1, #1
 80161c2:	005b      	lsls	r3, r3, #1
 80161c4:	e7c8      	b.n	8016158 <__lshift+0x1c>
 80161c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80161ca:	3201      	adds	r2, #1
 80161cc:	e7ce      	b.n	801616c <__lshift+0x30>
 80161ce:	3b04      	subs	r3, #4
 80161d0:	f851 2b04 	ldr.w	r2, [r1], #4
 80161d4:	f843 2f04 	str.w	r2, [r3, #4]!
 80161d8:	458e      	cmp	lr, r1
 80161da:	d8f9      	bhi.n	80161d0 <__lshift+0x94>
 80161dc:	e7e6      	b.n	80161ac <__lshift+0x70>

080161de <__mcmp>:
 80161de:	6903      	ldr	r3, [r0, #16]
 80161e0:	690a      	ldr	r2, [r1, #16]
 80161e2:	1a9b      	subs	r3, r3, r2
 80161e4:	b530      	push	{r4, r5, lr}
 80161e6:	d10c      	bne.n	8016202 <__mcmp+0x24>
 80161e8:	0092      	lsls	r2, r2, #2
 80161ea:	3014      	adds	r0, #20
 80161ec:	3114      	adds	r1, #20
 80161ee:	1884      	adds	r4, r0, r2
 80161f0:	4411      	add	r1, r2
 80161f2:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80161f6:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80161fa:	4295      	cmp	r5, r2
 80161fc:	d003      	beq.n	8016206 <__mcmp+0x28>
 80161fe:	d305      	bcc.n	801620c <__mcmp+0x2e>
 8016200:	2301      	movs	r3, #1
 8016202:	4618      	mov	r0, r3
 8016204:	bd30      	pop	{r4, r5, pc}
 8016206:	42a0      	cmp	r0, r4
 8016208:	d3f3      	bcc.n	80161f2 <__mcmp+0x14>
 801620a:	e7fa      	b.n	8016202 <__mcmp+0x24>
 801620c:	f04f 33ff 	mov.w	r3, #4294967295
 8016210:	e7f7      	b.n	8016202 <__mcmp+0x24>

08016212 <__mdiff>:
 8016212:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016216:	460d      	mov	r5, r1
 8016218:	4607      	mov	r7, r0
 801621a:	4611      	mov	r1, r2
 801621c:	4628      	mov	r0, r5
 801621e:	4614      	mov	r4, r2
 8016220:	f7ff ffdd 	bl	80161de <__mcmp>
 8016224:	1e06      	subs	r6, r0, #0
 8016226:	d108      	bne.n	801623a <__mdiff+0x28>
 8016228:	4631      	mov	r1, r6
 801622a:	4638      	mov	r0, r7
 801622c:	f7ff fdce 	bl	8015dcc <_Balloc>
 8016230:	2301      	movs	r3, #1
 8016232:	6103      	str	r3, [r0, #16]
 8016234:	6146      	str	r6, [r0, #20]
 8016236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801623a:	bfa4      	itt	ge
 801623c:	4623      	movge	r3, r4
 801623e:	462c      	movge	r4, r5
 8016240:	4638      	mov	r0, r7
 8016242:	6861      	ldr	r1, [r4, #4]
 8016244:	bfa6      	itte	ge
 8016246:	461d      	movge	r5, r3
 8016248:	2600      	movge	r6, #0
 801624a:	2601      	movlt	r6, #1
 801624c:	f7ff fdbe 	bl	8015dcc <_Balloc>
 8016250:	692b      	ldr	r3, [r5, #16]
 8016252:	60c6      	str	r6, [r0, #12]
 8016254:	6926      	ldr	r6, [r4, #16]
 8016256:	f105 0914 	add.w	r9, r5, #20
 801625a:	f104 0214 	add.w	r2, r4, #20
 801625e:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8016262:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8016266:	f100 0514 	add.w	r5, r0, #20
 801626a:	f04f 0c00 	mov.w	ip, #0
 801626e:	f852 ab04 	ldr.w	sl, [r2], #4
 8016272:	f859 4b04 	ldr.w	r4, [r9], #4
 8016276:	fa1c f18a 	uxtah	r1, ip, sl
 801627a:	b2a3      	uxth	r3, r4
 801627c:	1ac9      	subs	r1, r1, r3
 801627e:	0c23      	lsrs	r3, r4, #16
 8016280:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8016284:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8016288:	b289      	uxth	r1, r1
 801628a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 801628e:	45c8      	cmp	r8, r9
 8016290:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8016294:	4696      	mov	lr, r2
 8016296:	f845 3b04 	str.w	r3, [r5], #4
 801629a:	d8e8      	bhi.n	801626e <__mdiff+0x5c>
 801629c:	45be      	cmp	lr, r7
 801629e:	d305      	bcc.n	80162ac <__mdiff+0x9a>
 80162a0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80162a4:	b18b      	cbz	r3, 80162ca <__mdiff+0xb8>
 80162a6:	6106      	str	r6, [r0, #16]
 80162a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80162ac:	f85e 1b04 	ldr.w	r1, [lr], #4
 80162b0:	fa1c f381 	uxtah	r3, ip, r1
 80162b4:	141a      	asrs	r2, r3, #16
 80162b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80162ba:	b29b      	uxth	r3, r3
 80162bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80162c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80162c4:	f845 3b04 	str.w	r3, [r5], #4
 80162c8:	e7e8      	b.n	801629c <__mdiff+0x8a>
 80162ca:	3e01      	subs	r6, #1
 80162cc:	e7e8      	b.n	80162a0 <__mdiff+0x8e>

080162ce <__d2b>:
 80162ce:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80162d2:	460e      	mov	r6, r1
 80162d4:	2101      	movs	r1, #1
 80162d6:	ec59 8b10 	vmov	r8, r9, d0
 80162da:	4615      	mov	r5, r2
 80162dc:	f7ff fd76 	bl	8015dcc <_Balloc>
 80162e0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80162e4:	4607      	mov	r7, r0
 80162e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80162ea:	bb34      	cbnz	r4, 801633a <__d2b+0x6c>
 80162ec:	9301      	str	r3, [sp, #4]
 80162ee:	f1b8 0f00 	cmp.w	r8, #0
 80162f2:	d027      	beq.n	8016344 <__d2b+0x76>
 80162f4:	a802      	add	r0, sp, #8
 80162f6:	f840 8d08 	str.w	r8, [r0, #-8]!
 80162fa:	f7ff fe0c 	bl	8015f16 <__lo0bits>
 80162fe:	9900      	ldr	r1, [sp, #0]
 8016300:	b1f0      	cbz	r0, 8016340 <__d2b+0x72>
 8016302:	9a01      	ldr	r2, [sp, #4]
 8016304:	f1c0 0320 	rsb	r3, r0, #32
 8016308:	fa02 f303 	lsl.w	r3, r2, r3
 801630c:	430b      	orrs	r3, r1
 801630e:	40c2      	lsrs	r2, r0
 8016310:	617b      	str	r3, [r7, #20]
 8016312:	9201      	str	r2, [sp, #4]
 8016314:	9b01      	ldr	r3, [sp, #4]
 8016316:	61bb      	str	r3, [r7, #24]
 8016318:	2b00      	cmp	r3, #0
 801631a:	bf14      	ite	ne
 801631c:	2102      	movne	r1, #2
 801631e:	2101      	moveq	r1, #1
 8016320:	6139      	str	r1, [r7, #16]
 8016322:	b1c4      	cbz	r4, 8016356 <__d2b+0x88>
 8016324:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8016328:	4404      	add	r4, r0
 801632a:	6034      	str	r4, [r6, #0]
 801632c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016330:	6028      	str	r0, [r5, #0]
 8016332:	4638      	mov	r0, r7
 8016334:	b003      	add	sp, #12
 8016336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801633a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801633e:	e7d5      	b.n	80162ec <__d2b+0x1e>
 8016340:	6179      	str	r1, [r7, #20]
 8016342:	e7e7      	b.n	8016314 <__d2b+0x46>
 8016344:	a801      	add	r0, sp, #4
 8016346:	f7ff fde6 	bl	8015f16 <__lo0bits>
 801634a:	9b01      	ldr	r3, [sp, #4]
 801634c:	617b      	str	r3, [r7, #20]
 801634e:	2101      	movs	r1, #1
 8016350:	6139      	str	r1, [r7, #16]
 8016352:	3020      	adds	r0, #32
 8016354:	e7e5      	b.n	8016322 <__d2b+0x54>
 8016356:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801635a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801635e:	6030      	str	r0, [r6, #0]
 8016360:	6918      	ldr	r0, [r3, #16]
 8016362:	f7ff fdb9 	bl	8015ed8 <__hi0bits>
 8016366:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801636a:	e7e1      	b.n	8016330 <__d2b+0x62>

0801636c <__sread>:
 801636c:	b510      	push	{r4, lr}
 801636e:	460c      	mov	r4, r1
 8016370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016374:	f000 fa40 	bl	80167f8 <_read_r>
 8016378:	2800      	cmp	r0, #0
 801637a:	bfab      	itete	ge
 801637c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801637e:	89a3      	ldrhlt	r3, [r4, #12]
 8016380:	181b      	addge	r3, r3, r0
 8016382:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016386:	bfac      	ite	ge
 8016388:	6563      	strge	r3, [r4, #84]	; 0x54
 801638a:	81a3      	strhlt	r3, [r4, #12]
 801638c:	bd10      	pop	{r4, pc}

0801638e <__swrite>:
 801638e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016392:	461f      	mov	r7, r3
 8016394:	898b      	ldrh	r3, [r1, #12]
 8016396:	05db      	lsls	r3, r3, #23
 8016398:	4605      	mov	r5, r0
 801639a:	460c      	mov	r4, r1
 801639c:	4616      	mov	r6, r2
 801639e:	d505      	bpl.n	80163ac <__swrite+0x1e>
 80163a0:	2302      	movs	r3, #2
 80163a2:	2200      	movs	r2, #0
 80163a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80163a8:	f000 fa14 	bl	80167d4 <_lseek_r>
 80163ac:	89a3      	ldrh	r3, [r4, #12]
 80163ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80163b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80163b6:	81a3      	strh	r3, [r4, #12]
 80163b8:	4632      	mov	r2, r6
 80163ba:	463b      	mov	r3, r7
 80163bc:	4628      	mov	r0, r5
 80163be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80163c2:	f7fe ba43 	b.w	801484c <_write_r>

080163c6 <__sseek>:
 80163c6:	b510      	push	{r4, lr}
 80163c8:	460c      	mov	r4, r1
 80163ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80163ce:	f000 fa01 	bl	80167d4 <_lseek_r>
 80163d2:	1c43      	adds	r3, r0, #1
 80163d4:	89a3      	ldrh	r3, [r4, #12]
 80163d6:	bf15      	itete	ne
 80163d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80163da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80163de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80163e2:	81a3      	strheq	r3, [r4, #12]
 80163e4:	bf18      	it	ne
 80163e6:	81a3      	strhne	r3, [r4, #12]
 80163e8:	bd10      	pop	{r4, pc}

080163ea <__sclose>:
 80163ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80163ee:	f000 b8e9 	b.w	80165c4 <_close_r>

080163f2 <__ssprint_r>:
 80163f2:	6893      	ldr	r3, [r2, #8]
 80163f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163f8:	4681      	mov	r9, r0
 80163fa:	460c      	mov	r4, r1
 80163fc:	4617      	mov	r7, r2
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d060      	beq.n	80164c4 <__ssprint_r+0xd2>
 8016402:	f04f 0b00 	mov.w	fp, #0
 8016406:	f8d2 a000 	ldr.w	sl, [r2]
 801640a:	465e      	mov	r6, fp
 801640c:	b356      	cbz	r6, 8016464 <__ssprint_r+0x72>
 801640e:	68a3      	ldr	r3, [r4, #8]
 8016410:	429e      	cmp	r6, r3
 8016412:	d344      	bcc.n	801649e <__ssprint_r+0xac>
 8016414:	89a2      	ldrh	r2, [r4, #12]
 8016416:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801641a:	d03e      	beq.n	801649a <__ssprint_r+0xa8>
 801641c:	6825      	ldr	r5, [r4, #0]
 801641e:	6921      	ldr	r1, [r4, #16]
 8016420:	eba5 0801 	sub.w	r8, r5, r1
 8016424:	6965      	ldr	r5, [r4, #20]
 8016426:	2302      	movs	r3, #2
 8016428:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801642c:	fb95 f5f3 	sdiv	r5, r5, r3
 8016430:	f108 0301 	add.w	r3, r8, #1
 8016434:	4433      	add	r3, r6
 8016436:	429d      	cmp	r5, r3
 8016438:	bf38      	it	cc
 801643a:	461d      	movcc	r5, r3
 801643c:	0553      	lsls	r3, r2, #21
 801643e:	d546      	bpl.n	80164ce <__ssprint_r+0xdc>
 8016440:	4629      	mov	r1, r5
 8016442:	4648      	mov	r0, r9
 8016444:	f7fb fc24 	bl	8011c90 <_malloc_r>
 8016448:	b998      	cbnz	r0, 8016472 <__ssprint_r+0x80>
 801644a:	230c      	movs	r3, #12
 801644c:	f8c9 3000 	str.w	r3, [r9]
 8016450:	89a3      	ldrh	r3, [r4, #12]
 8016452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016456:	81a3      	strh	r3, [r4, #12]
 8016458:	2300      	movs	r3, #0
 801645a:	60bb      	str	r3, [r7, #8]
 801645c:	607b      	str	r3, [r7, #4]
 801645e:	f04f 30ff 	mov.w	r0, #4294967295
 8016462:	e031      	b.n	80164c8 <__ssprint_r+0xd6>
 8016464:	f8da b000 	ldr.w	fp, [sl]
 8016468:	f8da 6004 	ldr.w	r6, [sl, #4]
 801646c:	f10a 0a08 	add.w	sl, sl, #8
 8016470:	e7cc      	b.n	801640c <__ssprint_r+0x1a>
 8016472:	4642      	mov	r2, r8
 8016474:	6921      	ldr	r1, [r4, #16]
 8016476:	9001      	str	r0, [sp, #4]
 8016478:	f7fb fe27 	bl	80120ca <memcpy>
 801647c:	89a2      	ldrh	r2, [r4, #12]
 801647e:	9b01      	ldr	r3, [sp, #4]
 8016480:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8016484:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8016488:	81a2      	strh	r2, [r4, #12]
 801648a:	6123      	str	r3, [r4, #16]
 801648c:	6165      	str	r5, [r4, #20]
 801648e:	4443      	add	r3, r8
 8016490:	eba5 0508 	sub.w	r5, r5, r8
 8016494:	6023      	str	r3, [r4, #0]
 8016496:	60a5      	str	r5, [r4, #8]
 8016498:	4633      	mov	r3, r6
 801649a:	429e      	cmp	r6, r3
 801649c:	d200      	bcs.n	80164a0 <__ssprint_r+0xae>
 801649e:	4633      	mov	r3, r6
 80164a0:	461a      	mov	r2, r3
 80164a2:	4659      	mov	r1, fp
 80164a4:	6820      	ldr	r0, [r4, #0]
 80164a6:	9301      	str	r3, [sp, #4]
 80164a8:	f7fb fe1a 	bl	80120e0 <memmove>
 80164ac:	68a2      	ldr	r2, [r4, #8]
 80164ae:	9b01      	ldr	r3, [sp, #4]
 80164b0:	1ad2      	subs	r2, r2, r3
 80164b2:	60a2      	str	r2, [r4, #8]
 80164b4:	6822      	ldr	r2, [r4, #0]
 80164b6:	4413      	add	r3, r2
 80164b8:	6023      	str	r3, [r4, #0]
 80164ba:	68bb      	ldr	r3, [r7, #8]
 80164bc:	1b9e      	subs	r6, r3, r6
 80164be:	60be      	str	r6, [r7, #8]
 80164c0:	2e00      	cmp	r6, #0
 80164c2:	d1cf      	bne.n	8016464 <__ssprint_r+0x72>
 80164c4:	2000      	movs	r0, #0
 80164c6:	6078      	str	r0, [r7, #4]
 80164c8:	b003      	add	sp, #12
 80164ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164ce:	462a      	mov	r2, r5
 80164d0:	4648      	mov	r0, r9
 80164d2:	f7fb ff03 	bl	80122dc <_realloc_r>
 80164d6:	4603      	mov	r3, r0
 80164d8:	2800      	cmp	r0, #0
 80164da:	d1d6      	bne.n	801648a <__ssprint_r+0x98>
 80164dc:	6921      	ldr	r1, [r4, #16]
 80164de:	4648      	mov	r0, r9
 80164e0:	f7ff fb00 	bl	8015ae4 <_free_r>
 80164e4:	e7b1      	b.n	801644a <__ssprint_r+0x58>

080164e6 <__sprint_r>:
 80164e6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164ea:	6893      	ldr	r3, [r2, #8]
 80164ec:	4680      	mov	r8, r0
 80164ee:	460f      	mov	r7, r1
 80164f0:	4614      	mov	r4, r2
 80164f2:	b91b      	cbnz	r3, 80164fc <__sprint_r+0x16>
 80164f4:	6053      	str	r3, [r2, #4]
 80164f6:	4618      	mov	r0, r3
 80164f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164fc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80164fe:	049d      	lsls	r5, r3, #18
 8016500:	d523      	bpl.n	801654a <__sprint_r+0x64>
 8016502:	6815      	ldr	r5, [r2, #0]
 8016504:	68a0      	ldr	r0, [r4, #8]
 8016506:	3508      	adds	r5, #8
 8016508:	b920      	cbnz	r0, 8016514 <__sprint_r+0x2e>
 801650a:	2300      	movs	r3, #0
 801650c:	60a3      	str	r3, [r4, #8]
 801650e:	6063      	str	r3, [r4, #4]
 8016510:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016514:	f855 6c04 	ldr.w	r6, [r5, #-4]
 8016518:	f855 bc08 	ldr.w	fp, [r5, #-8]
 801651c:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 8016520:	f04f 0900 	mov.w	r9, #0
 8016524:	45ca      	cmp	sl, r9
 8016526:	dc05      	bgt.n	8016534 <__sprint_r+0x4e>
 8016528:	68a3      	ldr	r3, [r4, #8]
 801652a:	f026 0603 	bic.w	r6, r6, #3
 801652e:	1b9e      	subs	r6, r3, r6
 8016530:	60a6      	str	r6, [r4, #8]
 8016532:	e7e7      	b.n	8016504 <__sprint_r+0x1e>
 8016534:	463a      	mov	r2, r7
 8016536:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 801653a:	4640      	mov	r0, r8
 801653c:	f000 f8ff 	bl	801673e <_fputwc_r>
 8016540:	1c43      	adds	r3, r0, #1
 8016542:	d0e2      	beq.n	801650a <__sprint_r+0x24>
 8016544:	f109 0901 	add.w	r9, r9, #1
 8016548:	e7ec      	b.n	8016524 <__sprint_r+0x3e>
 801654a:	f7fb f9ad 	bl	80118a8 <__sfvwrite_r>
 801654e:	e7dc      	b.n	801650a <__sprint_r+0x24>

08016550 <__ascii_wctomb>:
 8016550:	b149      	cbz	r1, 8016566 <__ascii_wctomb+0x16>
 8016552:	2aff      	cmp	r2, #255	; 0xff
 8016554:	bf85      	ittet	hi
 8016556:	238a      	movhi	r3, #138	; 0x8a
 8016558:	6003      	strhi	r3, [r0, #0]
 801655a:	700a      	strbls	r2, [r1, #0]
 801655c:	f04f 30ff 	movhi.w	r0, #4294967295
 8016560:	bf98      	it	ls
 8016562:	2001      	movls	r0, #1
 8016564:	4770      	bx	lr
 8016566:	4608      	mov	r0, r1
 8016568:	4770      	bx	lr

0801656a <_calloc_r>:
 801656a:	b510      	push	{r4, lr}
 801656c:	4351      	muls	r1, r2
 801656e:	f7fb fb8f 	bl	8011c90 <_malloc_r>
 8016572:	4604      	mov	r4, r0
 8016574:	b198      	cbz	r0, 801659e <_calloc_r+0x34>
 8016576:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801657a:	f022 0203 	bic.w	r2, r2, #3
 801657e:	3a04      	subs	r2, #4
 8016580:	2a24      	cmp	r2, #36	; 0x24
 8016582:	d81b      	bhi.n	80165bc <_calloc_r+0x52>
 8016584:	2a13      	cmp	r2, #19
 8016586:	d917      	bls.n	80165b8 <_calloc_r+0x4e>
 8016588:	2100      	movs	r1, #0
 801658a:	2a1b      	cmp	r2, #27
 801658c:	6001      	str	r1, [r0, #0]
 801658e:	6041      	str	r1, [r0, #4]
 8016590:	d807      	bhi.n	80165a2 <_calloc_r+0x38>
 8016592:	f100 0308 	add.w	r3, r0, #8
 8016596:	2200      	movs	r2, #0
 8016598:	601a      	str	r2, [r3, #0]
 801659a:	605a      	str	r2, [r3, #4]
 801659c:	609a      	str	r2, [r3, #8]
 801659e:	4620      	mov	r0, r4
 80165a0:	bd10      	pop	{r4, pc}
 80165a2:	2a24      	cmp	r2, #36	; 0x24
 80165a4:	6081      	str	r1, [r0, #8]
 80165a6:	60c1      	str	r1, [r0, #12]
 80165a8:	bf11      	iteee	ne
 80165aa:	f100 0310 	addne.w	r3, r0, #16
 80165ae:	6101      	streq	r1, [r0, #16]
 80165b0:	f100 0318 	addeq.w	r3, r0, #24
 80165b4:	6141      	streq	r1, [r0, #20]
 80165b6:	e7ee      	b.n	8016596 <_calloc_r+0x2c>
 80165b8:	4603      	mov	r3, r0
 80165ba:	e7ec      	b.n	8016596 <_calloc_r+0x2c>
 80165bc:	2100      	movs	r1, #0
 80165be:	f7fb fda9 	bl	8012114 <memset>
 80165c2:	e7ec      	b.n	801659e <_calloc_r+0x34>

080165c4 <_close_r>:
 80165c4:	b538      	push	{r3, r4, r5, lr}
 80165c6:	4c06      	ldr	r4, [pc, #24]	; (80165e0 <_close_r+0x1c>)
 80165c8:	2300      	movs	r3, #0
 80165ca:	4605      	mov	r5, r0
 80165cc:	4608      	mov	r0, r1
 80165ce:	6023      	str	r3, [r4, #0]
 80165d0:	f7f8 fe7e 	bl	800f2d0 <_close>
 80165d4:	1c43      	adds	r3, r0, #1
 80165d6:	d102      	bne.n	80165de <_close_r+0x1a>
 80165d8:	6823      	ldr	r3, [r4, #0]
 80165da:	b103      	cbz	r3, 80165de <_close_r+0x1a>
 80165dc:	602b      	str	r3, [r5, #0]
 80165de:	bd38      	pop	{r3, r4, r5, pc}
 80165e0:	20000b4c 	.word	0x20000b4c

080165e4 <_fclose_r>:
 80165e4:	b570      	push	{r4, r5, r6, lr}
 80165e6:	4605      	mov	r5, r0
 80165e8:	460c      	mov	r4, r1
 80165ea:	b911      	cbnz	r1, 80165f2 <_fclose_r+0xe>
 80165ec:	2600      	movs	r6, #0
 80165ee:	4630      	mov	r0, r6
 80165f0:	bd70      	pop	{r4, r5, r6, pc}
 80165f2:	b118      	cbz	r0, 80165fc <_fclose_r+0x18>
 80165f4:	6983      	ldr	r3, [r0, #24]
 80165f6:	b90b      	cbnz	r3, 80165fc <_fclose_r+0x18>
 80165f8:	f7ff f99e 	bl	8015938 <__sinit>
 80165fc:	4b2c      	ldr	r3, [pc, #176]	; (80166b0 <_fclose_r+0xcc>)
 80165fe:	429c      	cmp	r4, r3
 8016600:	d114      	bne.n	801662c <_fclose_r+0x48>
 8016602:	686c      	ldr	r4, [r5, #4]
 8016604:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016606:	07d8      	lsls	r0, r3, #31
 8016608:	d405      	bmi.n	8016616 <_fclose_r+0x32>
 801660a:	89a3      	ldrh	r3, [r4, #12]
 801660c:	0599      	lsls	r1, r3, #22
 801660e:	d402      	bmi.n	8016616 <_fclose_r+0x32>
 8016610:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016612:	f7fb fb29 	bl	8011c68 <__retarget_lock_acquire_recursive>
 8016616:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801661a:	b98b      	cbnz	r3, 8016640 <_fclose_r+0x5c>
 801661c:	6e66      	ldr	r6, [r4, #100]	; 0x64
 801661e:	f016 0601 	ands.w	r6, r6, #1
 8016622:	d1e3      	bne.n	80165ec <_fclose_r+0x8>
 8016624:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016626:	f7fb fb21 	bl	8011c6c <__retarget_lock_release_recursive>
 801662a:	e7e0      	b.n	80165ee <_fclose_r+0xa>
 801662c:	4b21      	ldr	r3, [pc, #132]	; (80166b4 <_fclose_r+0xd0>)
 801662e:	429c      	cmp	r4, r3
 8016630:	d101      	bne.n	8016636 <_fclose_r+0x52>
 8016632:	68ac      	ldr	r4, [r5, #8]
 8016634:	e7e6      	b.n	8016604 <_fclose_r+0x20>
 8016636:	4b20      	ldr	r3, [pc, #128]	; (80166b8 <_fclose_r+0xd4>)
 8016638:	429c      	cmp	r4, r3
 801663a:	bf08      	it	eq
 801663c:	68ec      	ldreq	r4, [r5, #12]
 801663e:	e7e1      	b.n	8016604 <_fclose_r+0x20>
 8016640:	4621      	mov	r1, r4
 8016642:	4628      	mov	r0, r5
 8016644:	f7ff f852 	bl	80156ec <__sflush_r>
 8016648:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801664a:	4606      	mov	r6, r0
 801664c:	b133      	cbz	r3, 801665c <_fclose_r+0x78>
 801664e:	6a21      	ldr	r1, [r4, #32]
 8016650:	4628      	mov	r0, r5
 8016652:	4798      	blx	r3
 8016654:	2800      	cmp	r0, #0
 8016656:	bfb8      	it	lt
 8016658:	f04f 36ff 	movlt.w	r6, #4294967295
 801665c:	89a3      	ldrh	r3, [r4, #12]
 801665e:	061a      	lsls	r2, r3, #24
 8016660:	d503      	bpl.n	801666a <_fclose_r+0x86>
 8016662:	6921      	ldr	r1, [r4, #16]
 8016664:	4628      	mov	r0, r5
 8016666:	f7ff fa3d 	bl	8015ae4 <_free_r>
 801666a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801666c:	b141      	cbz	r1, 8016680 <_fclose_r+0x9c>
 801666e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016672:	4299      	cmp	r1, r3
 8016674:	d002      	beq.n	801667c <_fclose_r+0x98>
 8016676:	4628      	mov	r0, r5
 8016678:	f7ff fa34 	bl	8015ae4 <_free_r>
 801667c:	2300      	movs	r3, #0
 801667e:	6363      	str	r3, [r4, #52]	; 0x34
 8016680:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8016682:	b121      	cbz	r1, 801668e <_fclose_r+0xaa>
 8016684:	4628      	mov	r0, r5
 8016686:	f7ff fa2d 	bl	8015ae4 <_free_r>
 801668a:	2300      	movs	r3, #0
 801668c:	64a3      	str	r3, [r4, #72]	; 0x48
 801668e:	f7ff f93b 	bl	8015908 <__sfp_lock_acquire>
 8016692:	2300      	movs	r3, #0
 8016694:	81a3      	strh	r3, [r4, #12]
 8016696:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016698:	07db      	lsls	r3, r3, #31
 801669a:	d402      	bmi.n	80166a2 <_fclose_r+0xbe>
 801669c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801669e:	f7fb fae5 	bl	8011c6c <__retarget_lock_release_recursive>
 80166a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80166a4:	f7fb fadf 	bl	8011c66 <__retarget_lock_close_recursive>
 80166a8:	f7ff f934 	bl	8015914 <__sfp_lock_release>
 80166ac:	e79f      	b.n	80165ee <_fclose_r+0xa>
 80166ae:	bf00      	nop
 80166b0:	08018384 	.word	0x08018384
 80166b4:	080183a4 	.word	0x080183a4
 80166b8:	08018364 	.word	0x08018364

080166bc <__fputwc>:
 80166bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80166c0:	4680      	mov	r8, r0
 80166c2:	460e      	mov	r6, r1
 80166c4:	4614      	mov	r4, r2
 80166c6:	f7ff fae7 	bl	8015c98 <__locale_mb_cur_max>
 80166ca:	2801      	cmp	r0, #1
 80166cc:	d11c      	bne.n	8016708 <__fputwc+0x4c>
 80166ce:	1e73      	subs	r3, r6, #1
 80166d0:	2bfe      	cmp	r3, #254	; 0xfe
 80166d2:	d819      	bhi.n	8016708 <__fputwc+0x4c>
 80166d4:	f88d 6004 	strb.w	r6, [sp, #4]
 80166d8:	4605      	mov	r5, r0
 80166da:	2700      	movs	r7, #0
 80166dc:	f10d 0904 	add.w	r9, sp, #4
 80166e0:	42af      	cmp	r7, r5
 80166e2:	d020      	beq.n	8016726 <__fputwc+0x6a>
 80166e4:	68a3      	ldr	r3, [r4, #8]
 80166e6:	f817 1009 	ldrb.w	r1, [r7, r9]
 80166ea:	3b01      	subs	r3, #1
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	60a3      	str	r3, [r4, #8]
 80166f0:	da04      	bge.n	80166fc <__fputwc+0x40>
 80166f2:	69a2      	ldr	r2, [r4, #24]
 80166f4:	4293      	cmp	r3, r2
 80166f6:	db1a      	blt.n	801672e <__fputwc+0x72>
 80166f8:	290a      	cmp	r1, #10
 80166fa:	d018      	beq.n	801672e <__fputwc+0x72>
 80166fc:	6823      	ldr	r3, [r4, #0]
 80166fe:	1c5a      	adds	r2, r3, #1
 8016700:	6022      	str	r2, [r4, #0]
 8016702:	7019      	strb	r1, [r3, #0]
 8016704:	3701      	adds	r7, #1
 8016706:	e7eb      	b.n	80166e0 <__fputwc+0x24>
 8016708:	4632      	mov	r2, r6
 801670a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 801670e:	a901      	add	r1, sp, #4
 8016710:	4640      	mov	r0, r8
 8016712:	f000 f883 	bl	801681c <_wcrtomb_r>
 8016716:	1c42      	adds	r2, r0, #1
 8016718:	4605      	mov	r5, r0
 801671a:	d1de      	bne.n	80166da <__fputwc+0x1e>
 801671c:	89a3      	ldrh	r3, [r4, #12]
 801671e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016722:	81a3      	strh	r3, [r4, #12]
 8016724:	4606      	mov	r6, r0
 8016726:	4630      	mov	r0, r6
 8016728:	b003      	add	sp, #12
 801672a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801672e:	4622      	mov	r2, r4
 8016730:	4640      	mov	r0, r8
 8016732:	f7fe f82d 	bl	8014790 <__swbuf_r>
 8016736:	1c43      	adds	r3, r0, #1
 8016738:	d1e4      	bne.n	8016704 <__fputwc+0x48>
 801673a:	4606      	mov	r6, r0
 801673c:	e7f3      	b.n	8016726 <__fputwc+0x6a>

0801673e <_fputwc_r>:
 801673e:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8016740:	07db      	lsls	r3, r3, #31
 8016742:	b570      	push	{r4, r5, r6, lr}
 8016744:	4605      	mov	r5, r0
 8016746:	460e      	mov	r6, r1
 8016748:	4614      	mov	r4, r2
 801674a:	d405      	bmi.n	8016758 <_fputwc_r+0x1a>
 801674c:	8993      	ldrh	r3, [r2, #12]
 801674e:	0598      	lsls	r0, r3, #22
 8016750:	d402      	bmi.n	8016758 <_fputwc_r+0x1a>
 8016752:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8016754:	f7fb fa88 	bl	8011c68 <__retarget_lock_acquire_recursive>
 8016758:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801675c:	0499      	lsls	r1, r3, #18
 801675e:	d406      	bmi.n	801676e <_fputwc_r+0x30>
 8016760:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016764:	81a3      	strh	r3, [r4, #12]
 8016766:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016768:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801676c:	6663      	str	r3, [r4, #100]	; 0x64
 801676e:	4622      	mov	r2, r4
 8016770:	4628      	mov	r0, r5
 8016772:	4631      	mov	r1, r6
 8016774:	f7ff ffa2 	bl	80166bc <__fputwc>
 8016778:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801677a:	07da      	lsls	r2, r3, #31
 801677c:	4605      	mov	r5, r0
 801677e:	d405      	bmi.n	801678c <_fputwc_r+0x4e>
 8016780:	89a3      	ldrh	r3, [r4, #12]
 8016782:	059b      	lsls	r3, r3, #22
 8016784:	d402      	bmi.n	801678c <_fputwc_r+0x4e>
 8016786:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016788:	f7fb fa70 	bl	8011c6c <__retarget_lock_release_recursive>
 801678c:	4628      	mov	r0, r5
 801678e:	bd70      	pop	{r4, r5, r6, pc}

08016790 <_fstat_r>:
 8016790:	b538      	push	{r3, r4, r5, lr}
 8016792:	4c07      	ldr	r4, [pc, #28]	; (80167b0 <_fstat_r+0x20>)
 8016794:	2300      	movs	r3, #0
 8016796:	4605      	mov	r5, r0
 8016798:	4608      	mov	r0, r1
 801679a:	4611      	mov	r1, r2
 801679c:	6023      	str	r3, [r4, #0]
 801679e:	f7f8 fd9a 	bl	800f2d6 <_fstat>
 80167a2:	1c43      	adds	r3, r0, #1
 80167a4:	d102      	bne.n	80167ac <_fstat_r+0x1c>
 80167a6:	6823      	ldr	r3, [r4, #0]
 80167a8:	b103      	cbz	r3, 80167ac <_fstat_r+0x1c>
 80167aa:	602b      	str	r3, [r5, #0]
 80167ac:	bd38      	pop	{r3, r4, r5, pc}
 80167ae:	bf00      	nop
 80167b0:	20000b4c 	.word	0x20000b4c

080167b4 <_isatty_r>:
 80167b4:	b538      	push	{r3, r4, r5, lr}
 80167b6:	4c06      	ldr	r4, [pc, #24]	; (80167d0 <_isatty_r+0x1c>)
 80167b8:	2300      	movs	r3, #0
 80167ba:	4605      	mov	r5, r0
 80167bc:	4608      	mov	r0, r1
 80167be:	6023      	str	r3, [r4, #0]
 80167c0:	f7f8 fd8e 	bl	800f2e0 <_isatty>
 80167c4:	1c43      	adds	r3, r0, #1
 80167c6:	d102      	bne.n	80167ce <_isatty_r+0x1a>
 80167c8:	6823      	ldr	r3, [r4, #0]
 80167ca:	b103      	cbz	r3, 80167ce <_isatty_r+0x1a>
 80167cc:	602b      	str	r3, [r5, #0]
 80167ce:	bd38      	pop	{r3, r4, r5, pc}
 80167d0:	20000b4c 	.word	0x20000b4c

080167d4 <_lseek_r>:
 80167d4:	b538      	push	{r3, r4, r5, lr}
 80167d6:	4c07      	ldr	r4, [pc, #28]	; (80167f4 <_lseek_r+0x20>)
 80167d8:	4605      	mov	r5, r0
 80167da:	4608      	mov	r0, r1
 80167dc:	4611      	mov	r1, r2
 80167de:	2200      	movs	r2, #0
 80167e0:	6022      	str	r2, [r4, #0]
 80167e2:	461a      	mov	r2, r3
 80167e4:	f7f8 fd7e 	bl	800f2e4 <_lseek>
 80167e8:	1c43      	adds	r3, r0, #1
 80167ea:	d102      	bne.n	80167f2 <_lseek_r+0x1e>
 80167ec:	6823      	ldr	r3, [r4, #0]
 80167ee:	b103      	cbz	r3, 80167f2 <_lseek_r+0x1e>
 80167f0:	602b      	str	r3, [r5, #0]
 80167f2:	bd38      	pop	{r3, r4, r5, pc}
 80167f4:	20000b4c 	.word	0x20000b4c

080167f8 <_read_r>:
 80167f8:	b538      	push	{r3, r4, r5, lr}
 80167fa:	4c07      	ldr	r4, [pc, #28]	; (8016818 <_read_r+0x20>)
 80167fc:	4605      	mov	r5, r0
 80167fe:	4608      	mov	r0, r1
 8016800:	4611      	mov	r1, r2
 8016802:	2200      	movs	r2, #0
 8016804:	6022      	str	r2, [r4, #0]
 8016806:	461a      	mov	r2, r3
 8016808:	f7f8 fd20 	bl	800f24c <_read>
 801680c:	1c43      	adds	r3, r0, #1
 801680e:	d102      	bne.n	8016816 <_read_r+0x1e>
 8016810:	6823      	ldr	r3, [r4, #0]
 8016812:	b103      	cbz	r3, 8016816 <_read_r+0x1e>
 8016814:	602b      	str	r3, [r5, #0]
 8016816:	bd38      	pop	{r3, r4, r5, pc}
 8016818:	20000b4c 	.word	0x20000b4c

0801681c <_wcrtomb_r>:
 801681c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801681e:	4605      	mov	r5, r0
 8016820:	b085      	sub	sp, #20
 8016822:	461e      	mov	r6, r3
 8016824:	460f      	mov	r7, r1
 8016826:	4c0f      	ldr	r4, [pc, #60]	; (8016864 <_wcrtomb_r+0x48>)
 8016828:	b991      	cbnz	r1, 8016850 <_wcrtomb_r+0x34>
 801682a:	6822      	ldr	r2, [r4, #0]
 801682c:	490e      	ldr	r1, [pc, #56]	; (8016868 <_wcrtomb_r+0x4c>)
 801682e:	6a12      	ldr	r2, [r2, #32]
 8016830:	2a00      	cmp	r2, #0
 8016832:	bf08      	it	eq
 8016834:	460a      	moveq	r2, r1
 8016836:	a901      	add	r1, sp, #4
 8016838:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 801683c:	463a      	mov	r2, r7
 801683e:	47a0      	blx	r4
 8016840:	1c43      	adds	r3, r0, #1
 8016842:	bf01      	itttt	eq
 8016844:	2300      	moveq	r3, #0
 8016846:	6033      	streq	r3, [r6, #0]
 8016848:	238a      	moveq	r3, #138	; 0x8a
 801684a:	602b      	streq	r3, [r5, #0]
 801684c:	b005      	add	sp, #20
 801684e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016850:	6824      	ldr	r4, [r4, #0]
 8016852:	4f05      	ldr	r7, [pc, #20]	; (8016868 <_wcrtomb_r+0x4c>)
 8016854:	6a24      	ldr	r4, [r4, #32]
 8016856:	2c00      	cmp	r4, #0
 8016858:	bf08      	it	eq
 801685a:	463c      	moveq	r4, r7
 801685c:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 8016860:	e7ed      	b.n	801683e <_wcrtomb_r+0x22>
 8016862:	bf00      	nop
 8016864:	20000014 	.word	0x20000014
 8016868:	2000051c 	.word	0x2000051c

0801686c <_init>:
 801686c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801686e:	bf00      	nop
 8016870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016872:	bc08      	pop	{r3}
 8016874:	469e      	mov	lr, r3
 8016876:	4770      	bx	lr

08016878 <_fini>:
 8016878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801687a:	bf00      	nop
 801687c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801687e:	bc08      	pop	{r3}
 8016880:	469e      	mov	lr, r3
 8016882:	4770      	bx	lr
