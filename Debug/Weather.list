
Weather.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000480c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  0800499c  0800499c  0001499c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004b90  08004b90  00014b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004b98  08004b98  00014b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004b9c  08004b9c  00014b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000068  20000000  08004ba0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001d0  20000068  08004c08  00020068  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000238  08004c08  00020238  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013b4b  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002d97  00000000  00000000  00033be3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000090f1  00000000  00000000  0003697a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000d38  00000000  00000000  0003fa70  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000e20  00000000  00000000  000407a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000071cc  00000000  00000000  000415c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000049b2  00000000  00000000  00048794  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004d146  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002d1c  00000000  00000000  0004d1c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004984 	.word	0x08004984

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004984 	.word	0x08004984

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f092 0f00 	teq	r2, #0
 800055a:	bf14      	ite	ne
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000568:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800056c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000570:	e720      	b.n	80003b4 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_ul2d>:
 8000574:	ea50 0201 	orrs.w	r2, r0, r1
 8000578:	bf08      	it	eq
 800057a:	4770      	bxeq	lr
 800057c:	b530      	push	{r4, r5, lr}
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	e00a      	b.n	800059a <__aeabi_l2d+0x16>

08000584 <__aeabi_l2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000592:	d502      	bpl.n	800059a <__aeabi_l2d+0x16>
 8000594:	4240      	negs	r0, r0
 8000596:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800059a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005a6:	f43f aedc 	beq.w	8000362 <__adddf3+0xe6>
 80005aa:	f04f 0203 	mov.w	r2, #3
 80005ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b2:	bf18      	it	ne
 80005b4:	3203      	addne	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005c2:	f1c2 0320 	rsb	r3, r2, #32
 80005c6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ca:	fa20 f002 	lsr.w	r0, r0, r2
 80005ce:	fa01 fe03 	lsl.w	lr, r1, r3
 80005d2:	ea40 000e 	orr.w	r0, r0, lr
 80005d6:	fa21 f102 	lsr.w	r1, r1, r2
 80005da:	4414      	add	r4, r2
 80005dc:	e6c1      	b.n	8000362 <__adddf3+0xe6>
 80005de:	bf00      	nop

080005e0 <__aeabi_dmul>:
 80005e0:	b570      	push	{r4, r5, r6, lr}
 80005e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ee:	bf1d      	ittte	ne
 80005f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005f4:	ea94 0f0c 	teqne	r4, ip
 80005f8:	ea95 0f0c 	teqne	r5, ip
 80005fc:	f000 f8de 	bleq	80007bc <__aeabi_dmul+0x1dc>
 8000600:	442c      	add	r4, r5
 8000602:	ea81 0603 	eor.w	r6, r1, r3
 8000606:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800060a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800060e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000612:	bf18      	it	ne
 8000614:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000618:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800061c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000620:	d038      	beq.n	8000694 <__aeabi_dmul+0xb4>
 8000622:	fba0 ce02 	umull	ip, lr, r0, r2
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800062e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000632:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000636:	f04f 0600 	mov.w	r6, #0
 800063a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800063e:	f09c 0f00 	teq	ip, #0
 8000642:	bf18      	it	ne
 8000644:	f04e 0e01 	orrne.w	lr, lr, #1
 8000648:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800064c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000650:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000654:	d204      	bcs.n	8000660 <__aeabi_dmul+0x80>
 8000656:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800065a:	416d      	adcs	r5, r5
 800065c:	eb46 0606 	adc.w	r6, r6, r6
 8000660:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000664:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000668:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800066c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000670:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000674:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000678:	bf88      	it	hi
 800067a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800067e:	d81e      	bhi.n	80006be <__aeabi_dmul+0xde>
 8000680:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000684:	bf08      	it	eq
 8000686:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800068a:	f150 0000 	adcs.w	r0, r0, #0
 800068e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000698:	ea46 0101 	orr.w	r1, r6, r1
 800069c:	ea40 0002 	orr.w	r0, r0, r2
 80006a0:	ea81 0103 	eor.w	r1, r1, r3
 80006a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006a8:	bfc2      	ittt	gt
 80006aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	popgt	{r4, r5, r6, pc}
 80006b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b8:	f04f 0e00 	mov.w	lr, #0
 80006bc:	3c01      	subs	r4, #1
 80006be:	f300 80ab 	bgt.w	8000818 <__aeabi_dmul+0x238>
 80006c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006c6:	bfde      	ittt	le
 80006c8:	2000      	movle	r0, #0
 80006ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ce:	bd70      	pople	{r4, r5, r6, pc}
 80006d0:	f1c4 0400 	rsb	r4, r4, #0
 80006d4:	3c20      	subs	r4, #32
 80006d6:	da35      	bge.n	8000744 <__aeabi_dmul+0x164>
 80006d8:	340c      	adds	r4, #12
 80006da:	dc1b      	bgt.n	8000714 <__aeabi_dmul+0x134>
 80006dc:	f104 0414 	add.w	r4, r4, #20
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f305 	lsl.w	r3, r0, r5
 80006e8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000700:	fa21 f604 	lsr.w	r6, r1, r4
 8000704:	eb42 0106 	adc.w	r1, r2, r6
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 040c 	rsb	r4, r4, #12
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f304 	lsl.w	r3, r0, r4
 8000720:	fa20 f005 	lsr.w	r0, r0, r5
 8000724:	fa01 f204 	lsl.w	r2, r1, r4
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000730:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000734:	f141 0100 	adc.w	r1, r1, #0
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f205 	lsl.w	r2, r0, r5
 800074c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000750:	fa20 f304 	lsr.w	r3, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea43 0302 	orr.w	r3, r3, r2
 800075c:	fa21 f004 	lsr.w	r0, r1, r4
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	fa21 f204 	lsr.w	r2, r1, r4
 8000768:	ea20 0002 	bic.w	r0, r0, r2
 800076c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f094 0f00 	teq	r4, #0
 8000780:	d10f      	bne.n	80007a2 <__aeabi_dmul+0x1c2>
 8000782:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000786:	0040      	lsls	r0, r0, #1
 8000788:	eb41 0101 	adc.w	r1, r1, r1
 800078c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000790:	bf08      	it	eq
 8000792:	3c01      	subeq	r4, #1
 8000794:	d0f7      	beq.n	8000786 <__aeabi_dmul+0x1a6>
 8000796:	ea41 0106 	orr.w	r1, r1, r6
 800079a:	f095 0f00 	teq	r5, #0
 800079e:	bf18      	it	ne
 80007a0:	4770      	bxne	lr
 80007a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007a6:	0052      	lsls	r2, r2, #1
 80007a8:	eb43 0303 	adc.w	r3, r3, r3
 80007ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3d01      	subeq	r5, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1c6>
 80007b6:	ea43 0306 	orr.w	r3, r3, r6
 80007ba:	4770      	bx	lr
 80007bc:	ea94 0f0c 	teq	r4, ip
 80007c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007c4:	bf18      	it	ne
 80007c6:	ea95 0f0c 	teqne	r5, ip
 80007ca:	d00c      	beq.n	80007e6 <__aeabi_dmul+0x206>
 80007cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d0:	bf18      	it	ne
 80007d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d6:	d1d1      	bne.n	800077c <__aeabi_dmul+0x19c>
 80007d8:	ea81 0103 	eor.w	r1, r1, r3
 80007dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e0:	f04f 0000 	mov.w	r0, #0
 80007e4:	bd70      	pop	{r4, r5, r6, pc}
 80007e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ea:	bf06      	itte	eq
 80007ec:	4610      	moveq	r0, r2
 80007ee:	4619      	moveq	r1, r3
 80007f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f4:	d019      	beq.n	800082a <__aeabi_dmul+0x24a>
 80007f6:	ea94 0f0c 	teq	r4, ip
 80007fa:	d102      	bne.n	8000802 <__aeabi_dmul+0x222>
 80007fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000800:	d113      	bne.n	800082a <__aeabi_dmul+0x24a>
 8000802:	ea95 0f0c 	teq	r5, ip
 8000806:	d105      	bne.n	8000814 <__aeabi_dmul+0x234>
 8000808:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800080c:	bf1c      	itt	ne
 800080e:	4610      	movne	r0, r2
 8000810:	4619      	movne	r1, r3
 8000812:	d10a      	bne.n	800082a <__aeabi_dmul+0x24a>
 8000814:	ea81 0103 	eor.w	r1, r1, r3
 8000818:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800081c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000820:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000824:	f04f 0000 	mov.w	r0, #0
 8000828:	bd70      	pop	{r4, r5, r6, pc}
 800082a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000832:	bd70      	pop	{r4, r5, r6, pc}

08000834 <__aeabi_ddiv>:
 8000834:	b570      	push	{r4, r5, r6, lr}
 8000836:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800083a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800083e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000842:	bf1d      	ittte	ne
 8000844:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000848:	ea94 0f0c 	teqne	r4, ip
 800084c:	ea95 0f0c 	teqne	r5, ip
 8000850:	f000 f8a7 	bleq	80009a2 <__aeabi_ddiv+0x16e>
 8000854:	eba4 0405 	sub.w	r4, r4, r5
 8000858:	ea81 0e03 	eor.w	lr, r1, r3
 800085c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000860:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000864:	f000 8088 	beq.w	8000978 <__aeabi_ddiv+0x144>
 8000868:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800086c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000870:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000874:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000878:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800087c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000880:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000884:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000888:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800088c:	429d      	cmp	r5, r3
 800088e:	bf08      	it	eq
 8000890:	4296      	cmpeq	r6, r2
 8000892:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000896:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800089a:	d202      	bcs.n	80008a2 <__aeabi_ddiv+0x6e>
 800089c:	085b      	lsrs	r3, r3, #1
 800089e:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a2:	1ab6      	subs	r6, r6, r2
 80008a4:	eb65 0503 	sbc.w	r5, r5, r3
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008b2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000910:	ea55 0e06 	orrs.w	lr, r5, r6
 8000914:	d018      	beq.n	8000948 <__aeabi_ddiv+0x114>
 8000916:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800091a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800091e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000922:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000926:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800092a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800092e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000932:	d1c0      	bne.n	80008b6 <__aeabi_ddiv+0x82>
 8000934:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000938:	d10b      	bne.n	8000952 <__aeabi_ddiv+0x11e>
 800093a:	ea41 0100 	orr.w	r1, r1, r0
 800093e:	f04f 0000 	mov.w	r0, #0
 8000942:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000946:	e7b6      	b.n	80008b6 <__aeabi_ddiv+0x82>
 8000948:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800094c:	bf04      	itt	eq
 800094e:	4301      	orreq	r1, r0
 8000950:	2000      	moveq	r0, #0
 8000952:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000956:	bf88      	it	hi
 8000958:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800095c:	f63f aeaf 	bhi.w	80006be <__aeabi_dmul+0xde>
 8000960:	ebb5 0c03 	subs.w	ip, r5, r3
 8000964:	bf04      	itt	eq
 8000966:	ebb6 0c02 	subseq.w	ip, r6, r2
 800096a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800096e:	f150 0000 	adcs.w	r0, r0, #0
 8000972:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000976:	bd70      	pop	{r4, r5, r6, pc}
 8000978:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800097c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000980:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000984:	bfc2      	ittt	gt
 8000986:	ebd4 050c 	rsbsgt	r5, r4, ip
 800098a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800098e:	bd70      	popgt	{r4, r5, r6, pc}
 8000990:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000994:	f04f 0e00 	mov.w	lr, #0
 8000998:	3c01      	subs	r4, #1
 800099a:	e690      	b.n	80006be <__aeabi_dmul+0xde>
 800099c:	ea45 0e06 	orr.w	lr, r5, r6
 80009a0:	e68d      	b.n	80006be <__aeabi_dmul+0xde>
 80009a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009a6:	ea94 0f0c 	teq	r4, ip
 80009aa:	bf08      	it	eq
 80009ac:	ea95 0f0c 	teqeq	r5, ip
 80009b0:	f43f af3b 	beq.w	800082a <__aeabi_dmul+0x24a>
 80009b4:	ea94 0f0c 	teq	r4, ip
 80009b8:	d10a      	bne.n	80009d0 <__aeabi_ddiv+0x19c>
 80009ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009be:	f47f af34 	bne.w	800082a <__aeabi_dmul+0x24a>
 80009c2:	ea95 0f0c 	teq	r5, ip
 80009c6:	f47f af25 	bne.w	8000814 <__aeabi_dmul+0x234>
 80009ca:	4610      	mov	r0, r2
 80009cc:	4619      	mov	r1, r3
 80009ce:	e72c      	b.n	800082a <__aeabi_dmul+0x24a>
 80009d0:	ea95 0f0c 	teq	r5, ip
 80009d4:	d106      	bne.n	80009e4 <__aeabi_ddiv+0x1b0>
 80009d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009da:	f43f aefd 	beq.w	80007d8 <__aeabi_dmul+0x1f8>
 80009de:	4610      	mov	r0, r2
 80009e0:	4619      	mov	r1, r3
 80009e2:	e722      	b.n	800082a <__aeabi_dmul+0x24a>
 80009e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ee:	f47f aec5 	bne.w	800077c <__aeabi_dmul+0x19c>
 80009f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009f6:	f47f af0d 	bne.w	8000814 <__aeabi_dmul+0x234>
 80009fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009fe:	f47f aeeb 	bne.w	80007d8 <__aeabi_dmul+0x1f8>
 8000a02:	e712      	b.n	800082a <__aeabi_dmul+0x24a>

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b97a 	b.w	8000d10 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	468c      	mov	ip, r1
 8000a3a:	460d      	mov	r5, r1
 8000a3c:	4604      	mov	r4, r0
 8000a3e:	9e08      	ldr	r6, [sp, #32]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d151      	bne.n	8000ae8 <__udivmoddi4+0xb4>
 8000a44:	428a      	cmp	r2, r1
 8000a46:	4617      	mov	r7, r2
 8000a48:	d96d      	bls.n	8000b26 <__udivmoddi4+0xf2>
 8000a4a:	fab2 fe82 	clz	lr, r2
 8000a4e:	f1be 0f00 	cmp.w	lr, #0
 8000a52:	d00b      	beq.n	8000a6c <__udivmoddi4+0x38>
 8000a54:	f1ce 0c20 	rsb	ip, lr, #32
 8000a58:	fa01 f50e 	lsl.w	r5, r1, lr
 8000a5c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000a60:	fa02 f70e 	lsl.w	r7, r2, lr
 8000a64:	ea4c 0c05 	orr.w	ip, ip, r5
 8000a68:	fa00 f40e 	lsl.w	r4, r0, lr
 8000a6c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000a70:	0c25      	lsrs	r5, r4, #16
 8000a72:	fbbc f8fa 	udiv	r8, ip, sl
 8000a76:	fa1f f987 	uxth.w	r9, r7
 8000a7a:	fb0a cc18 	mls	ip, sl, r8, ip
 8000a7e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000a82:	fb08 f309 	mul.w	r3, r8, r9
 8000a86:	42ab      	cmp	r3, r5
 8000a88:	d90a      	bls.n	8000aa0 <__udivmoddi4+0x6c>
 8000a8a:	19ed      	adds	r5, r5, r7
 8000a8c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000a90:	f080 8123 	bcs.w	8000cda <__udivmoddi4+0x2a6>
 8000a94:	42ab      	cmp	r3, r5
 8000a96:	f240 8120 	bls.w	8000cda <__udivmoddi4+0x2a6>
 8000a9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000a9e:	443d      	add	r5, r7
 8000aa0:	1aed      	subs	r5, r5, r3
 8000aa2:	b2a4      	uxth	r4, r4
 8000aa4:	fbb5 f0fa 	udiv	r0, r5, sl
 8000aa8:	fb0a 5510 	mls	r5, sl, r0, r5
 8000aac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ab0:	fb00 f909 	mul.w	r9, r0, r9
 8000ab4:	45a1      	cmp	r9, r4
 8000ab6:	d909      	bls.n	8000acc <__udivmoddi4+0x98>
 8000ab8:	19e4      	adds	r4, r4, r7
 8000aba:	f100 33ff 	add.w	r3, r0, #4294967295
 8000abe:	f080 810a 	bcs.w	8000cd6 <__udivmoddi4+0x2a2>
 8000ac2:	45a1      	cmp	r9, r4
 8000ac4:	f240 8107 	bls.w	8000cd6 <__udivmoddi4+0x2a2>
 8000ac8:	3802      	subs	r0, #2
 8000aca:	443c      	add	r4, r7
 8000acc:	eba4 0409 	sub.w	r4, r4, r9
 8000ad0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	2e00      	cmp	r6, #0
 8000ad8:	d061      	beq.n	8000b9e <__udivmoddi4+0x16a>
 8000ada:	fa24 f40e 	lsr.w	r4, r4, lr
 8000ade:	2300      	movs	r3, #0
 8000ae0:	6034      	str	r4, [r6, #0]
 8000ae2:	6073      	str	r3, [r6, #4]
 8000ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae8:	428b      	cmp	r3, r1
 8000aea:	d907      	bls.n	8000afc <__udivmoddi4+0xc8>
 8000aec:	2e00      	cmp	r6, #0
 8000aee:	d054      	beq.n	8000b9a <__udivmoddi4+0x166>
 8000af0:	2100      	movs	r1, #0
 8000af2:	e886 0021 	stmia.w	r6, {r0, r5}
 8000af6:	4608      	mov	r0, r1
 8000af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000afc:	fab3 f183 	clz	r1, r3
 8000b00:	2900      	cmp	r1, #0
 8000b02:	f040 808e 	bne.w	8000c22 <__udivmoddi4+0x1ee>
 8000b06:	42ab      	cmp	r3, r5
 8000b08:	d302      	bcc.n	8000b10 <__udivmoddi4+0xdc>
 8000b0a:	4282      	cmp	r2, r0
 8000b0c:	f200 80fa 	bhi.w	8000d04 <__udivmoddi4+0x2d0>
 8000b10:	1a84      	subs	r4, r0, r2
 8000b12:	eb65 0503 	sbc.w	r5, r5, r3
 8000b16:	2001      	movs	r0, #1
 8000b18:	46ac      	mov	ip, r5
 8000b1a:	2e00      	cmp	r6, #0
 8000b1c:	d03f      	beq.n	8000b9e <__udivmoddi4+0x16a>
 8000b1e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b26:	b912      	cbnz	r2, 8000b2e <__udivmoddi4+0xfa>
 8000b28:	2701      	movs	r7, #1
 8000b2a:	fbb7 f7f2 	udiv	r7, r7, r2
 8000b2e:	fab7 fe87 	clz	lr, r7
 8000b32:	f1be 0f00 	cmp.w	lr, #0
 8000b36:	d134      	bne.n	8000ba2 <__udivmoddi4+0x16e>
 8000b38:	1beb      	subs	r3, r5, r7
 8000b3a:	0c3a      	lsrs	r2, r7, #16
 8000b3c:	fa1f fc87 	uxth.w	ip, r7
 8000b40:	2101      	movs	r1, #1
 8000b42:	fbb3 f8f2 	udiv	r8, r3, r2
 8000b46:	0c25      	lsrs	r5, r4, #16
 8000b48:	fb02 3318 	mls	r3, r2, r8, r3
 8000b4c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000b50:	fb0c f308 	mul.w	r3, ip, r8
 8000b54:	42ab      	cmp	r3, r5
 8000b56:	d907      	bls.n	8000b68 <__udivmoddi4+0x134>
 8000b58:	19ed      	adds	r5, r5, r7
 8000b5a:	f108 30ff 	add.w	r0, r8, #4294967295
 8000b5e:	d202      	bcs.n	8000b66 <__udivmoddi4+0x132>
 8000b60:	42ab      	cmp	r3, r5
 8000b62:	f200 80d1 	bhi.w	8000d08 <__udivmoddi4+0x2d4>
 8000b66:	4680      	mov	r8, r0
 8000b68:	1aed      	subs	r5, r5, r3
 8000b6a:	b2a3      	uxth	r3, r4
 8000b6c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000b70:	fb02 5510 	mls	r5, r2, r0, r5
 8000b74:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000b78:	fb0c fc00 	mul.w	ip, ip, r0
 8000b7c:	45a4      	cmp	ip, r4
 8000b7e:	d907      	bls.n	8000b90 <__udivmoddi4+0x15c>
 8000b80:	19e4      	adds	r4, r4, r7
 8000b82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b86:	d202      	bcs.n	8000b8e <__udivmoddi4+0x15a>
 8000b88:	45a4      	cmp	ip, r4
 8000b8a:	f200 80b8 	bhi.w	8000cfe <__udivmoddi4+0x2ca>
 8000b8e:	4618      	mov	r0, r3
 8000b90:	eba4 040c 	sub.w	r4, r4, ip
 8000b94:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b98:	e79d      	b.n	8000ad6 <__udivmoddi4+0xa2>
 8000b9a:	4631      	mov	r1, r6
 8000b9c:	4630      	mov	r0, r6
 8000b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba2:	f1ce 0420 	rsb	r4, lr, #32
 8000ba6:	fa05 f30e 	lsl.w	r3, r5, lr
 8000baa:	fa07 f70e 	lsl.w	r7, r7, lr
 8000bae:	fa20 f804 	lsr.w	r8, r0, r4
 8000bb2:	0c3a      	lsrs	r2, r7, #16
 8000bb4:	fa25 f404 	lsr.w	r4, r5, r4
 8000bb8:	ea48 0803 	orr.w	r8, r8, r3
 8000bbc:	fbb4 f1f2 	udiv	r1, r4, r2
 8000bc0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000bc4:	fb02 4411 	mls	r4, r2, r1, r4
 8000bc8:	fa1f fc87 	uxth.w	ip, r7
 8000bcc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000bd0:	fb01 f30c 	mul.w	r3, r1, ip
 8000bd4:	42ab      	cmp	r3, r5
 8000bd6:	fa00 f40e 	lsl.w	r4, r0, lr
 8000bda:	d909      	bls.n	8000bf0 <__udivmoddi4+0x1bc>
 8000bdc:	19ed      	adds	r5, r5, r7
 8000bde:	f101 30ff 	add.w	r0, r1, #4294967295
 8000be2:	f080 808a 	bcs.w	8000cfa <__udivmoddi4+0x2c6>
 8000be6:	42ab      	cmp	r3, r5
 8000be8:	f240 8087 	bls.w	8000cfa <__udivmoddi4+0x2c6>
 8000bec:	3902      	subs	r1, #2
 8000bee:	443d      	add	r5, r7
 8000bf0:	1aeb      	subs	r3, r5, r3
 8000bf2:	fa1f f588 	uxth.w	r5, r8
 8000bf6:	fbb3 f0f2 	udiv	r0, r3, r2
 8000bfa:	fb02 3310 	mls	r3, r2, r0, r3
 8000bfe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c02:	fb00 f30c 	mul.w	r3, r0, ip
 8000c06:	42ab      	cmp	r3, r5
 8000c08:	d907      	bls.n	8000c1a <__udivmoddi4+0x1e6>
 8000c0a:	19ed      	adds	r5, r5, r7
 8000c0c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c10:	d26f      	bcs.n	8000cf2 <__udivmoddi4+0x2be>
 8000c12:	42ab      	cmp	r3, r5
 8000c14:	d96d      	bls.n	8000cf2 <__udivmoddi4+0x2be>
 8000c16:	3802      	subs	r0, #2
 8000c18:	443d      	add	r5, r7
 8000c1a:	1aeb      	subs	r3, r5, r3
 8000c1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c20:	e78f      	b.n	8000b42 <__udivmoddi4+0x10e>
 8000c22:	f1c1 0720 	rsb	r7, r1, #32
 8000c26:	fa22 f807 	lsr.w	r8, r2, r7
 8000c2a:	408b      	lsls	r3, r1
 8000c2c:	fa05 f401 	lsl.w	r4, r5, r1
 8000c30:	ea48 0303 	orr.w	r3, r8, r3
 8000c34:	fa20 fe07 	lsr.w	lr, r0, r7
 8000c38:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000c3c:	40fd      	lsrs	r5, r7
 8000c3e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000c42:	fbb5 f9fc 	udiv	r9, r5, ip
 8000c46:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000c4a:	fb0c 5519 	mls	r5, ip, r9, r5
 8000c4e:	fa1f f883 	uxth.w	r8, r3
 8000c52:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000c56:	fb09 f408 	mul.w	r4, r9, r8
 8000c5a:	42ac      	cmp	r4, r5
 8000c5c:	fa02 f201 	lsl.w	r2, r2, r1
 8000c60:	fa00 fa01 	lsl.w	sl, r0, r1
 8000c64:	d908      	bls.n	8000c78 <__udivmoddi4+0x244>
 8000c66:	18ed      	adds	r5, r5, r3
 8000c68:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c6c:	d243      	bcs.n	8000cf6 <__udivmoddi4+0x2c2>
 8000c6e:	42ac      	cmp	r4, r5
 8000c70:	d941      	bls.n	8000cf6 <__udivmoddi4+0x2c2>
 8000c72:	f1a9 0902 	sub.w	r9, r9, #2
 8000c76:	441d      	add	r5, r3
 8000c78:	1b2d      	subs	r5, r5, r4
 8000c7a:	fa1f fe8e 	uxth.w	lr, lr
 8000c7e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000c82:	fb0c 5510 	mls	r5, ip, r0, r5
 8000c86:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000c8a:	fb00 f808 	mul.w	r8, r0, r8
 8000c8e:	45a0      	cmp	r8, r4
 8000c90:	d907      	bls.n	8000ca2 <__udivmoddi4+0x26e>
 8000c92:	18e4      	adds	r4, r4, r3
 8000c94:	f100 35ff 	add.w	r5, r0, #4294967295
 8000c98:	d229      	bcs.n	8000cee <__udivmoddi4+0x2ba>
 8000c9a:	45a0      	cmp	r8, r4
 8000c9c:	d927      	bls.n	8000cee <__udivmoddi4+0x2ba>
 8000c9e:	3802      	subs	r0, #2
 8000ca0:	441c      	add	r4, r3
 8000ca2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ca6:	eba4 0408 	sub.w	r4, r4, r8
 8000caa:	fba0 8902 	umull	r8, r9, r0, r2
 8000cae:	454c      	cmp	r4, r9
 8000cb0:	46c6      	mov	lr, r8
 8000cb2:	464d      	mov	r5, r9
 8000cb4:	d315      	bcc.n	8000ce2 <__udivmoddi4+0x2ae>
 8000cb6:	d012      	beq.n	8000cde <__udivmoddi4+0x2aa>
 8000cb8:	b156      	cbz	r6, 8000cd0 <__udivmoddi4+0x29c>
 8000cba:	ebba 030e 	subs.w	r3, sl, lr
 8000cbe:	eb64 0405 	sbc.w	r4, r4, r5
 8000cc2:	fa04 f707 	lsl.w	r7, r4, r7
 8000cc6:	40cb      	lsrs	r3, r1
 8000cc8:	431f      	orrs	r7, r3
 8000cca:	40cc      	lsrs	r4, r1
 8000ccc:	6037      	str	r7, [r6, #0]
 8000cce:	6074      	str	r4, [r6, #4]
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	e6f8      	b.n	8000acc <__udivmoddi4+0x98>
 8000cda:	4690      	mov	r8, r2
 8000cdc:	e6e0      	b.n	8000aa0 <__udivmoddi4+0x6c>
 8000cde:	45c2      	cmp	sl, r8
 8000ce0:	d2ea      	bcs.n	8000cb8 <__udivmoddi4+0x284>
 8000ce2:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ce6:	eb69 0503 	sbc.w	r5, r9, r3
 8000cea:	3801      	subs	r0, #1
 8000cec:	e7e4      	b.n	8000cb8 <__udivmoddi4+0x284>
 8000cee:	4628      	mov	r0, r5
 8000cf0:	e7d7      	b.n	8000ca2 <__udivmoddi4+0x26e>
 8000cf2:	4640      	mov	r0, r8
 8000cf4:	e791      	b.n	8000c1a <__udivmoddi4+0x1e6>
 8000cf6:	4681      	mov	r9, r0
 8000cf8:	e7be      	b.n	8000c78 <__udivmoddi4+0x244>
 8000cfa:	4601      	mov	r1, r0
 8000cfc:	e778      	b.n	8000bf0 <__udivmoddi4+0x1bc>
 8000cfe:	3802      	subs	r0, #2
 8000d00:	443c      	add	r4, r7
 8000d02:	e745      	b.n	8000b90 <__udivmoddi4+0x15c>
 8000d04:	4608      	mov	r0, r1
 8000d06:	e708      	b.n	8000b1a <__udivmoddi4+0xe6>
 8000d08:	f1a8 0802 	sub.w	r8, r8, #2
 8000d0c:	443d      	add	r5, r7
 8000d0e:	e72b      	b.n	8000b68 <__udivmoddi4+0x134>

08000d10 <__aeabi_idiv0>:
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop

08000d14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d14:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000d16:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <HAL_InitTick+0x2c>)
{
 8000d18:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000d1a:	6818      	ldr	r0, [r3, #0]
 8000d1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d20:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d24:	f000 f886 	bl	8000e34 <HAL_SYSTICK_Config>
 8000d28:	4604      	mov	r4, r0
 8000d2a:	b938      	cbnz	r0, 8000d3c <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	4629      	mov	r1, r5
 8000d30:	f04f 30ff 	mov.w	r0, #4294967295
 8000d34:	f000 f84a 	bl	8000dcc <HAL_NVIC_SetPriority>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8000d3c:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000d3e:	bd38      	pop	{r3, r4, r5, pc}
 8000d40:	20000000 	.word	0x20000000

08000d44 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d44:	4a09      	ldr	r2, [pc, #36]	; (8000d6c <HAL_Init+0x28>)
 8000d46:	6813      	ldr	r3, [r2, #0]
 8000d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8000d4c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d4e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d50:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d52:	f000 f829 	bl	8000da8 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d56:	2000      	movs	r0, #0
 8000d58:	f7ff ffdc 	bl	8000d14 <HAL_InitTick>
 8000d5c:	4604      	mov	r4, r0
 8000d5e:	b918      	cbnz	r0, 8000d68 <HAL_Init+0x24>
    HAL_MspInit();
 8000d60:	f002 fd80 	bl	8003864 <HAL_MspInit>
}
 8000d64:	4620      	mov	r0, r4
 8000d66:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000d68:	2401      	movs	r4, #1
 8000d6a:	e7fb      	b.n	8000d64 <HAL_Init+0x20>
 8000d6c:	40022000 	.word	0x40022000

08000d70 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000d70:	4a02      	ldr	r2, [pc, #8]	; (8000d7c <HAL_IncTick+0xc>)
 8000d72:	6813      	ldr	r3, [r2, #0]
 8000d74:	3301      	adds	r3, #1
 8000d76:	6013      	str	r3, [r2, #0]
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	20000090 	.word	0x20000090

08000d80 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d80:	4b01      	ldr	r3, [pc, #4]	; (8000d88 <HAL_GetTick+0x8>)
 8000d82:	6818      	ldr	r0, [r3, #0]
}
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	20000090 	.word	0x20000090

08000d8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d8c:	b538      	push	{r3, r4, r5, lr}
 8000d8e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000d90:	f7ff fff6 	bl	8000d80 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d94:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000d96:	4605      	mov	r5, r0
  {
    wait++;
 8000d98:	bf18      	it	ne
 8000d9a:	3401      	addne	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d9c:	f7ff fff0 	bl	8000d80 <HAL_GetTick>
 8000da0:	1b40      	subs	r0, r0, r5
 8000da2:	4284      	cmp	r4, r0
 8000da4:	d8fa      	bhi.n	8000d9c <HAL_Delay+0x10>
  {
  }
}
 8000da6:	bd38      	pop	{r3, r4, r5, pc}

08000da8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da8:	4a07      	ldr	r2, [pc, #28]	; (8000dc8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000daa:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000db0:	041b      	lsls	r3, r3, #16
 8000db2:	0c1b      	lsrs	r3, r3, #16
 8000db4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000db8:	0200      	lsls	r0, r0, #8
 8000dba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dbe:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000dc2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000dc4:	60d3      	str	r3, [r2, #12]
 8000dc6:	4770      	bx	lr
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dcc:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dce:	b530      	push	{r4, r5, lr}
 8000dd0:	68dc      	ldr	r4, [r3, #12]
 8000dd2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dda:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ddc:	2b04      	cmp	r3, #4
 8000dde:	bf28      	it	cs
 8000de0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de4:	f04f 0501 	mov.w	r5, #1
 8000de8:	fa05 f303 	lsl.w	r3, r5, r3
 8000dec:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df0:	bf8c      	ite	hi
 8000df2:	3c03      	subhi	r4, #3
 8000df4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df6:	4019      	ands	r1, r3
 8000df8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dfa:	fa05 f404 	lsl.w	r4, r5, r4
 8000dfe:	3c01      	subs	r4, #1
 8000e00:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000e02:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e04:	ea42 0201 	orr.w	r2, r2, r1
 8000e08:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0c:	bfaf      	iteee	ge
 8000e0e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e12:	f000 000f 	andlt.w	r0, r0, #15
 8000e16:	4b06      	ldrlt	r3, [pc, #24]	; (8000e30 <HAL_NVIC_SetPriority+0x64>)
 8000e18:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1a:	bfa5      	ittet	ge
 8000e1c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000e20:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e22:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e24:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000e28:	bd30      	pop	{r4, r5, pc}
 8000e2a:	bf00      	nop
 8000e2c:	e000ed00 	.word	0xe000ed00
 8000e30:	e000ed14 	.word	0xe000ed14

08000e34 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e34:	3801      	subs	r0, #1
 8000e36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e3a:	d20a      	bcs.n	8000e52 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3e:	4a07      	ldr	r2, [pc, #28]	; (8000e5c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e40:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e42:	21f0      	movs	r1, #240	; 0xf0
 8000e44:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e48:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e4a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e4c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000e52:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000e010 	.word	0xe000e010
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e64:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e66:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e68:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001014 <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e6c:	4c67      	ldr	r4, [pc, #412]	; (800100c <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e6e:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 8000e70:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e72:	9a01      	ldr	r2, [sp, #4]
 8000e74:	40da      	lsrs	r2, r3
 8000e76:	d102      	bne.n	8000e7e <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8000e78:	b005      	add	sp, #20
 8000e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e7e:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 8000e80:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e82:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 8000e84:	ea12 0e06 	ands.w	lr, r2, r6
 8000e88:	f000 80b1 	beq.w	8000fee <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e8c:	684a      	ldr	r2, [r1, #4]
 8000e8e:	f022 0710 	bic.w	r7, r2, #16
 8000e92:	2f02      	cmp	r7, #2
 8000e94:	d116      	bne.n	8000ec4 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 8000e96:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8000e9a:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e9e:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8000ea2:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ea6:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8000eaa:	f04f 0c0f 	mov.w	ip, #15
 8000eae:	fa0c fc0a 	lsl.w	ip, ip, sl
 8000eb2:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000eb6:	690d      	ldr	r5, [r1, #16]
 8000eb8:	fa05 f50a 	lsl.w	r5, r5, sl
 8000ebc:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8000ec0:	f8c9 5020 	str.w	r5, [r9, #32]
 8000ec4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ec8:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000eca:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ece:	fa05 f50c 	lsl.w	r5, r5, ip
 8000ed2:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ed4:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ed8:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000edc:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ee0:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ee2:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ee6:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000ee8:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eec:	d811      	bhi.n	8000f12 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8000eee:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ef0:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ef4:	68cf      	ldr	r7, [r1, #12]
 8000ef6:	fa07 f70c 	lsl.w	r7, r7, ip
 8000efa:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8000efe:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000f00:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f02:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000f06:	f3c2 1700 	ubfx	r7, r2, #4, #1
 8000f0a:	409f      	lsls	r7, r3
 8000f0c:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8000f10:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f12:	f1ba 0f03 	cmp.w	sl, #3
 8000f16:	d107      	bne.n	8000f28 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8000f18:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f1a:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000f1e:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 8000f22:	409f      	lsls	r7, r3
 8000f24:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 8000f26:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8000f28:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f2a:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f2c:	688e      	ldr	r6, [r1, #8]
 8000f2e:	fa06 f60c 	lsl.w	r6, r6, ip
 8000f32:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8000f34:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f36:	00d5      	lsls	r5, r2, #3
 8000f38:	d559      	bpl.n	8000fee <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3a:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8000f3e:	f045 0501 	orr.w	r5, r5, #1
 8000f42:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 8000f46:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8000f4a:	f023 0603 	bic.w	r6, r3, #3
 8000f4e:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8000f52:	f005 0501 	and.w	r5, r5, #1
 8000f56:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8000f5a:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f5c:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f60:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000f62:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f64:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000f68:	270f      	movs	r7, #15
 8000f6a:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f6e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f72:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f76:	d03c      	beq.n	8000ff2 <HAL_GPIO_Init+0x192>
 8000f78:	4d25      	ldr	r5, [pc, #148]	; (8001010 <HAL_GPIO_Init+0x1b0>)
 8000f7a:	42a8      	cmp	r0, r5
 8000f7c:	d03b      	beq.n	8000ff6 <HAL_GPIO_Init+0x196>
 8000f7e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f82:	42a8      	cmp	r0, r5
 8000f84:	d039      	beq.n	8000ffa <HAL_GPIO_Init+0x19a>
 8000f86:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f8a:	42a8      	cmp	r0, r5
 8000f8c:	d037      	beq.n	8000ffe <HAL_GPIO_Init+0x19e>
 8000f8e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f92:	42a8      	cmp	r0, r5
 8000f94:	d035      	beq.n	8001002 <HAL_GPIO_Init+0x1a2>
 8000f96:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f9a:	42a8      	cmp	r0, r5
 8000f9c:	d033      	beq.n	8001006 <HAL_GPIO_Init+0x1a6>
 8000f9e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fa2:	42a8      	cmp	r0, r5
 8000fa4:	bf14      	ite	ne
 8000fa6:	2507      	movne	r5, #7
 8000fa8:	2506      	moveq	r5, #6
 8000faa:	fa05 f50c 	lsl.w	r5, r5, ip
 8000fae:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fb0:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 8000fb2:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8000fb4:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fb8:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 8000fba:	bf54      	ite	pl
 8000fbc:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000fbe:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 8000fc2:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8000fc4:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fc6:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 8000fc8:	bf54      	ite	pl
 8000fca:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000fcc:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8000fd0:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 8000fd2:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fd4:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 8000fd6:	bf54      	ite	pl
 8000fd8:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000fda:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 8000fde:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8000fe0:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fe2:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 8000fe4:	bf54      	ite	pl
 8000fe6:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000fe8:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 8000fec:	60e5      	str	r5, [r4, #12]
    position++;
 8000fee:	3301      	adds	r3, #1
 8000ff0:	e73f      	b.n	8000e72 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ff2:	2500      	movs	r5, #0
 8000ff4:	e7d9      	b.n	8000faa <HAL_GPIO_Init+0x14a>
 8000ff6:	2501      	movs	r5, #1
 8000ff8:	e7d7      	b.n	8000faa <HAL_GPIO_Init+0x14a>
 8000ffa:	2502      	movs	r5, #2
 8000ffc:	e7d5      	b.n	8000faa <HAL_GPIO_Init+0x14a>
 8000ffe:	2503      	movs	r5, #3
 8001000:	e7d3      	b.n	8000faa <HAL_GPIO_Init+0x14a>
 8001002:	2504      	movs	r5, #4
 8001004:	e7d1      	b.n	8000faa <HAL_GPIO_Init+0x14a>
 8001006:	2505      	movs	r5, #5
 8001008:	e7cf      	b.n	8000faa <HAL_GPIO_Init+0x14a>
 800100a:	bf00      	nop
 800100c:	40010400 	.word	0x40010400
 8001010:	48000400 	.word	0x48000400
 8001014:	40021000 	.word	0x40021000

08001018 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001018:	b10a      	cbz	r2, 800101e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800101a:	6181      	str	r1, [r0, #24]
 800101c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800101e:	6281      	str	r1, [r0, #40]	; 0x28
 8001020:	4770      	bx	lr

08001022 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001022:	6803      	ldr	r3, [r0, #0]
 8001024:	699a      	ldr	r2, [r3, #24]
 8001026:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8001028:	bf44      	itt	mi
 800102a:	2200      	movmi	r2, #0
 800102c:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800102e:	699a      	ldr	r2, [r3, #24]
 8001030:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001032:	bf5e      	ittt	pl
 8001034:	699a      	ldrpl	r2, [r3, #24]
 8001036:	f042 0201 	orrpl.w	r2, r2, #1
 800103a:	619a      	strpl	r2, [r3, #24]
 800103c:	4770      	bx	lr

0800103e <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800103e:	b530      	push	{r4, r5, lr}
 8001040:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001042:	6805      	ldr	r5, [r0, #0]
 8001044:	4323      	orrs	r3, r4
 8001046:	0d64      	lsrs	r4, r4, #21
 8001048:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 800104c:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8001050:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8001054:	6868      	ldr	r0, [r5, #4]
 8001056:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800105a:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 800105e:	4319      	orrs	r1, r3
 8001060:	f044 0403 	orr.w	r4, r4, #3
 8001064:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001068:	ea20 0404 	bic.w	r4, r0, r4
 800106c:	4321      	orrs	r1, r4
 800106e:	6069      	str	r1, [r5, #4]
 8001070:	bd30      	pop	{r4, r5, pc}

08001072 <I2C_WaitOnFlagUntilTimeout>:
{
 8001072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001076:	9f06      	ldr	r7, [sp, #24]
 8001078:	4604      	mov	r4, r0
 800107a:	4688      	mov	r8, r1
 800107c:	4616      	mov	r6, r2
 800107e:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001080:	6822      	ldr	r2, [r4, #0]
 8001082:	6993      	ldr	r3, [r2, #24]
 8001084:	ea38 0303 	bics.w	r3, r8, r3
 8001088:	bf0c      	ite	eq
 800108a:	2301      	moveq	r3, #1
 800108c:	2300      	movne	r3, #0
 800108e:	42b3      	cmp	r3, r6
 8001090:	d002      	beq.n	8001098 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8001092:	2000      	movs	r0, #0
}
 8001094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001098:	1c6b      	adds	r3, r5, #1
 800109a:	d0f2      	beq.n	8001082 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800109c:	f7ff fe70 	bl	8000d80 <HAL_GetTick>
 80010a0:	1bc0      	subs	r0, r0, r7
 80010a2:	4285      	cmp	r5, r0
 80010a4:	d301      	bcc.n	80010aa <I2C_WaitOnFlagUntilTimeout+0x38>
 80010a6:	2d00      	cmp	r5, #0
 80010a8:	d1ea      	bne.n	8001080 <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80010aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80010ac:	f043 0320 	orr.w	r3, r3, #32
 80010b0:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80010b2:	2320      	movs	r3, #32
 80010b4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80010be:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80010c2:	2001      	movs	r0, #1
 80010c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080010c8 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80010c8:	6803      	ldr	r3, [r0, #0]
{
 80010ca:	b570      	push	{r4, r5, r6, lr}
 80010cc:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80010ce:	6998      	ldr	r0, [r3, #24]
 80010d0:	f010 0010 	ands.w	r0, r0, #16
{
 80010d4:	460d      	mov	r5, r1
 80010d6:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80010d8:	d116      	bne.n	8001108 <I2C_IsAcknowledgeFailed+0x40>
 80010da:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 80010dc:	1c69      	adds	r1, r5, #1
 80010de:	d014      	beq.n	800110a <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80010e0:	f7ff fe4e 	bl	8000d80 <HAL_GetTick>
 80010e4:	1b80      	subs	r0, r0, r6
 80010e6:	4285      	cmp	r5, r0
 80010e8:	d300      	bcc.n	80010ec <I2C_IsAcknowledgeFailed+0x24>
 80010ea:	b96d      	cbnz	r5, 8001108 <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80010ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80010ee:	f043 0320 	orr.w	r3, r3, #32
 80010f2:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80010f4:	2320      	movs	r3, #32
 80010f6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80010fa:	2300      	movs	r3, #0
 80010fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001100:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8001104:	2001      	movs	r0, #1
}
 8001106:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001108:	6823      	ldr	r3, [r4, #0]
 800110a:	6999      	ldr	r1, [r3, #24]
 800110c:	068a      	lsls	r2, r1, #26
 800110e:	d5e5      	bpl.n	80010dc <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001110:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001112:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001114:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001116:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001118:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800111a:	f7ff ff82 	bl	8001022 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800111e:	6822      	ldr	r2, [r4, #0]
 8001120:	6853      	ldr	r3, [r2, #4]
 8001122:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001126:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800112a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800112e:	f023 0301 	bic.w	r3, r3, #1
 8001132:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001134:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001136:	f043 0304 	orr.w	r3, r3, #4
 800113a:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800113c:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 8001140:	e7db      	b.n	80010fa <I2C_IsAcknowledgeFailed+0x32>

08001142 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001142:	b570      	push	{r4, r5, r6, lr}
 8001144:	4604      	mov	r4, r0
 8001146:	460d      	mov	r5, r1
 8001148:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800114a:	6823      	ldr	r3, [r4, #0]
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	079b      	lsls	r3, r3, #30
 8001150:	d501      	bpl.n	8001156 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8001152:	2000      	movs	r0, #0
 8001154:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001156:	4632      	mov	r2, r6
 8001158:	4629      	mov	r1, r5
 800115a:	4620      	mov	r0, r4
 800115c:	f7ff ffb4 	bl	80010c8 <I2C_IsAcknowledgeFailed>
 8001160:	b9a0      	cbnz	r0, 800118c <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8001162:	1c6a      	adds	r2, r5, #1
 8001164:	d0f1      	beq.n	800114a <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001166:	f7ff fe0b 	bl	8000d80 <HAL_GetTick>
 800116a:	1b80      	subs	r0, r0, r6
 800116c:	4285      	cmp	r5, r0
 800116e:	d301      	bcc.n	8001174 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8001170:	2d00      	cmp	r5, #0
 8001172:	d1ea      	bne.n	800114a <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001174:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001176:	f043 0320 	orr.w	r3, r3, #32
 800117a:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800117c:	2320      	movs	r3, #32
 800117e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001182:	2300      	movs	r3, #0
 8001184:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001188:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800118c:	2001      	movs	r0, #1
}
 800118e:	bd70      	pop	{r4, r5, r6, pc}

08001190 <I2C_RequestMemoryWrite>:
{
 8001190:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001192:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8001194:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001196:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <I2C_RequestMemoryWrite+0x60>)
 8001198:	9300      	str	r3, [sp, #0]
{
 800119a:	4605      	mov	r5, r0
 800119c:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800119e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011a2:	b2fa      	uxtb	r2, r7
 80011a4:	f7ff ff4b 	bl	800103e <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80011a8:	4632      	mov	r2, r6
 80011aa:	9908      	ldr	r1, [sp, #32]
 80011ac:	4628      	mov	r0, r5
 80011ae:	f7ff ffc8 	bl	8001142 <I2C_WaitOnTXISFlagUntilTimeout>
 80011b2:	b110      	cbz	r0, 80011ba <I2C_RequestMemoryWrite+0x2a>
    return HAL_ERROR;
 80011b4:	2001      	movs	r0, #1
}
 80011b6:	b003      	add	sp, #12
 80011b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80011ba:	2f01      	cmp	r7, #1
 80011bc:	682b      	ldr	r3, [r5, #0]
 80011be:	d10c      	bne.n	80011da <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80011c0:	b2e4      	uxtb	r4, r4
 80011c2:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80011c4:	9b08      	ldr	r3, [sp, #32]
 80011c6:	9600      	str	r6, [sp, #0]
 80011c8:	2200      	movs	r2, #0
 80011ca:	2180      	movs	r1, #128	; 0x80
 80011cc:	4628      	mov	r0, r5
 80011ce:	f7ff ff50 	bl	8001072 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 80011d2:	3000      	adds	r0, #0
 80011d4:	bf18      	it	ne
 80011d6:	2001      	movne	r0, #1
 80011d8:	e7ed      	b.n	80011b6 <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80011da:	0a22      	lsrs	r2, r4, #8
 80011dc:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80011de:	9908      	ldr	r1, [sp, #32]
 80011e0:	4632      	mov	r2, r6
 80011e2:	4628      	mov	r0, r5
 80011e4:	f7ff ffad 	bl	8001142 <I2C_WaitOnTXISFlagUntilTimeout>
 80011e8:	2800      	cmp	r0, #0
 80011ea:	d1e3      	bne.n	80011b4 <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80011ec:	682b      	ldr	r3, [r5, #0]
 80011ee:	e7e7      	b.n	80011c0 <I2C_RequestMemoryWrite+0x30>
 80011f0:	80002000 	.word	0x80002000

080011f4 <I2C_RequestMemoryRead>:
{
 80011f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80011f6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80011f8:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80011fa:	4b16      	ldr	r3, [pc, #88]	; (8001254 <I2C_RequestMemoryRead+0x60>)
 80011fc:	9300      	str	r3, [sp, #0]
{
 80011fe:	4605      	mov	r5, r0
 8001200:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001202:	2300      	movs	r3, #0
 8001204:	b2fa      	uxtb	r2, r7
 8001206:	f7ff ff1a 	bl	800103e <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800120a:	4632      	mov	r2, r6
 800120c:	9908      	ldr	r1, [sp, #32]
 800120e:	4628      	mov	r0, r5
 8001210:	f7ff ff97 	bl	8001142 <I2C_WaitOnTXISFlagUntilTimeout>
 8001214:	b110      	cbz	r0, 800121c <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 8001216:	2001      	movs	r0, #1
}
 8001218:	b003      	add	sp, #12
 800121a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800121c:	2f01      	cmp	r7, #1
 800121e:	682b      	ldr	r3, [r5, #0]
 8001220:	d10c      	bne.n	800123c <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001222:	b2e4      	uxtb	r4, r4
 8001224:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001226:	9b08      	ldr	r3, [sp, #32]
 8001228:	9600      	str	r6, [sp, #0]
 800122a:	2200      	movs	r2, #0
 800122c:	2140      	movs	r1, #64	; 0x40
 800122e:	4628      	mov	r0, r5
 8001230:	f7ff ff1f 	bl	8001072 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8001234:	3000      	adds	r0, #0
 8001236:	bf18      	it	ne
 8001238:	2001      	movne	r0, #1
 800123a:	e7ed      	b.n	8001218 <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800123c:	0a22      	lsrs	r2, r4, #8
 800123e:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001240:	9908      	ldr	r1, [sp, #32]
 8001242:	4632      	mov	r2, r6
 8001244:	4628      	mov	r0, r5
 8001246:	f7ff ff7c 	bl	8001142 <I2C_WaitOnTXISFlagUntilTimeout>
 800124a:	2800      	cmp	r0, #0
 800124c:	d1e3      	bne.n	8001216 <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800124e:	682b      	ldr	r3, [r5, #0]
 8001250:	e7e7      	b.n	8001222 <I2C_RequestMemoryRead+0x2e>
 8001252:	bf00      	nop
 8001254:	80002000 	.word	0x80002000

08001258 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001258:	b570      	push	{r4, r5, r6, lr}
 800125a:	4604      	mov	r4, r0
 800125c:	460d      	mov	r5, r1
 800125e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001260:	6823      	ldr	r3, [r4, #0]
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	069b      	lsls	r3, r3, #26
 8001266:	d501      	bpl.n	800126c <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8001268:	2000      	movs	r0, #0
 800126a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800126c:	4632      	mov	r2, r6
 800126e:	4629      	mov	r1, r5
 8001270:	4620      	mov	r0, r4
 8001272:	f7ff ff29 	bl	80010c8 <I2C_IsAcknowledgeFailed>
 8001276:	b990      	cbnz	r0, 800129e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001278:	f7ff fd82 	bl	8000d80 <HAL_GetTick>
 800127c:	1b80      	subs	r0, r0, r6
 800127e:	4285      	cmp	r5, r0
 8001280:	d301      	bcc.n	8001286 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8001282:	2d00      	cmp	r5, #0
 8001284:	d1ec      	bne.n	8001260 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001286:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001288:	f043 0320 	orr.w	r3, r3, #32
 800128c:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800128e:	2320      	movs	r3, #32
 8001290:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001294:	2300      	movs	r3, #0
 8001296:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800129a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800129e:	2001      	movs	r0, #1
}
 80012a0:	bd70      	pop	{r4, r5, r6, pc}

080012a2 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80012a2:	b570      	push	{r4, r5, r6, lr}
 80012a4:	4604      	mov	r4, r0
 80012a6:	460d      	mov	r5, r1
 80012a8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80012aa:	6823      	ldr	r3, [r4, #0]
 80012ac:	699b      	ldr	r3, [r3, #24]
 80012ae:	075b      	lsls	r3, r3, #29
 80012b0:	d40e      	bmi.n	80012d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80012b2:	4632      	mov	r2, r6
 80012b4:	4629      	mov	r1, r5
 80012b6:	4620      	mov	r0, r4
 80012b8:	f7ff ff06 	bl	80010c8 <I2C_IsAcknowledgeFailed>
 80012bc:	b9f0      	cbnz	r0, 80012fc <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80012be:	6823      	ldr	r3, [r4, #0]
 80012c0:	699a      	ldr	r2, [r3, #24]
 80012c2:	0691      	lsls	r1, r2, #26
 80012c4:	d51c      	bpl.n	8001300 <I2C_WaitOnRXNEFlagUntilTimeout+0x5e>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80012c6:	699a      	ldr	r2, [r3, #24]
 80012c8:	0752      	lsls	r2, r2, #29
 80012ca:	d503      	bpl.n	80012d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
 80012cc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80012ce:	b10a      	cbz	r2, 80012d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        return HAL_OK;
 80012d0:	2000      	movs	r0, #0
 80012d2:	bd70      	pop	{r4, r5, r6, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80012d4:	2120      	movs	r1, #32
 80012d6:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80012de:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80012e2:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80012e6:	f022 0201 	bic.w	r2, r2, #1
 80012ea:	605a      	str	r2, [r3, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80012f0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80012f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80012f8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80012fc:	2001      	movs	r0, #1
}
 80012fe:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001300:	f7ff fd3e 	bl	8000d80 <HAL_GetTick>
 8001304:	1b80      	subs	r0, r0, r6
 8001306:	4285      	cmp	r5, r0
 8001308:	d301      	bcc.n	800130e <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
 800130a:	2d00      	cmp	r5, #0
 800130c:	d1cd      	bne.n	80012aa <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800130e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001310:	f043 0320 	orr.w	r3, r3, #32
 8001314:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001316:	2320      	movs	r3, #32
 8001318:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 800131c:	2300      	movs	r3, #0
 800131e:	e7eb      	b.n	80012f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>

08001320 <HAL_I2C_Init>:
{
 8001320:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8001322:	4604      	mov	r4, r0
 8001324:	2800      	cmp	r0, #0
 8001326:	d04a      	beq.n	80013be <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001328:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800132c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001330:	b91b      	cbnz	r3, 800133a <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8001332:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001336:	f002 f8c1 	bl	80034bc <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800133a:	2324      	movs	r3, #36	; 0x24
 800133c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001340:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001342:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	f022 0201 	bic.w	r2, r2, #1
 800134a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800134c:	6862      	ldr	r2, [r4, #4]
 800134e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001352:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001354:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001356:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001358:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001360:	d124      	bne.n	80013ac <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001362:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001366:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001368:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800136a:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800136c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001370:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001374:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001376:	68da      	ldr	r2, [r3, #12]
 8001378:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800137c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800137e:	6922      	ldr	r2, [r4, #16]
 8001380:	430a      	orrs	r2, r1
 8001382:	69a1      	ldr	r1, [r4, #24]
 8001384:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001388:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800138a:	6a21      	ldr	r1, [r4, #32]
 800138c:	69e2      	ldr	r2, [r4, #28]
 800138e:	430a      	orrs	r2, r1
 8001390:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	f042 0201 	orr.w	r2, r2, #1
 8001398:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800139a:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800139c:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800139e:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80013a0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80013a4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013a6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 80013aa:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80013ac:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013b0:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80013b2:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80013b4:	bf04      	itt	eq
 80013b6:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 80013ba:	605a      	streq	r2, [r3, #4]
 80013bc:	e7d4      	b.n	8001368 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 80013be:	2001      	movs	r0, #1
}
 80013c0:	bd10      	pop	{r4, pc}
	...

080013c4 <HAL_I2C_Master_Transmit>:
{
 80013c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80013c8:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80013ca:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80013ce:	2b20      	cmp	r3, #32
{
 80013d0:	4604      	mov	r4, r0
 80013d2:	460e      	mov	r6, r1
 80013d4:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80013d6:	f040 8084 	bne.w	80014e2 <HAL_I2C_Master_Transmit+0x11e>
    __HAL_LOCK(hi2c);
 80013da:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d07f      	beq.n	80014e2 <HAL_I2C_Master_Transmit+0x11e>
 80013e2:	2701      	movs	r7, #1
 80013e4:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80013e8:	f7ff fcca 	bl	8000d80 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80013ec:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 80013ee:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80013f0:	9000      	str	r0, [sp, #0]
 80013f2:	463a      	mov	r2, r7
 80013f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013f8:	4620      	mov	r0, r4
 80013fa:	f7ff fe3a 	bl	8001072 <I2C_WaitOnFlagUntilTimeout>
 80013fe:	b118      	cbz	r0, 8001408 <HAL_I2C_Master_Transmit+0x44>
      return HAL_ERROR;
 8001400:	2001      	movs	r0, #1
}
 8001402:	b003      	add	sp, #12
 8001404:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001408:	2321      	movs	r3, #33	; 0x21
 800140a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800140e:	2310      	movs	r3, #16
 8001410:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001414:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8001416:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800141a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 800141c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001420:	b29b      	uxth	r3, r3
 8001422:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8001424:	6360      	str	r0, [r4, #52]	; 0x34
 8001426:	4b30      	ldr	r3, [pc, #192]	; (80014e8 <HAL_I2C_Master_Transmit+0x124>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001428:	d926      	bls.n	8001478 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800142a:	22ff      	movs	r2, #255	; 0xff
 800142c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800142e:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001430:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001434:	4631      	mov	r1, r6
 8001436:	4620      	mov	r0, r4
 8001438:	f7ff fe01 	bl	800103e <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800143c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800143e:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 8001440:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001442:	462a      	mov	r2, r5
 8001444:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8001446:	b9fb      	cbnz	r3, 8001488 <HAL_I2C_Master_Transmit+0xc4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001448:	f7ff ff06 	bl	8001258 <I2C_WaitOnSTOPFlagUntilTimeout>
 800144c:	2800      	cmp	r0, #0
 800144e:	d1d7      	bne.n	8001400 <HAL_I2C_Master_Transmit+0x3c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001450:	6823      	ldr	r3, [r4, #0]
 8001452:	2120      	movs	r1, #32
 8001454:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001456:	685a      	ldr	r2, [r3, #4]
 8001458:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800145c:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001460:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001464:	f022 0201 	bic.w	r2, r2, #1
 8001468:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800146a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800146e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001472:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001476:	e7c4      	b.n	8001402 <HAL_I2C_Master_Transmit+0x3e>
      hi2c->XferSize = hi2c->XferCount;
 8001478:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800147a:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800147c:	b292      	uxth	r2, r2
 800147e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001480:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001484:	b2d2      	uxtb	r2, r2
 8001486:	e7d5      	b.n	8001434 <HAL_I2C_Master_Transmit+0x70>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001488:	f7ff fe5b 	bl	8001142 <I2C_WaitOnTXISFlagUntilTimeout>
 800148c:	2800      	cmp	r0, #0
 800148e:	d1b7      	bne.n	8001400 <HAL_I2C_Master_Transmit+0x3c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001490:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001492:	6822      	ldr	r2, [r4, #0]
 8001494:	f813 1b01 	ldrb.w	r1, [r3], #1
 8001498:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800149a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800149c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800149e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80014a0:	3b01      	subs	r3, #1
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80014a6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80014a8:	3a01      	subs	r2, #1
 80014aa:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80014ac:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80014ae:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0c3      	beq.n	800143c <HAL_I2C_Master_Transmit+0x78>
 80014b4:	2a00      	cmp	r2, #0
 80014b6:	d1c1      	bne.n	800143c <HAL_I2C_Master_Transmit+0x78>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80014b8:	9500      	str	r5, [sp, #0]
 80014ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80014bc:	2180      	movs	r1, #128	; 0x80
 80014be:	4620      	mov	r0, r4
 80014c0:	f7ff fdd7 	bl	8001072 <I2C_WaitOnFlagUntilTimeout>
 80014c4:	2800      	cmp	r0, #0
 80014c6:	d19b      	bne.n	8001400 <HAL_I2C_Master_Transmit+0x3c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014c8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	2bff      	cmp	r3, #255	; 0xff
 80014ce:	d903      	bls.n	80014d8 <HAL_I2C_Master_Transmit+0x114>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80014d0:	22ff      	movs	r2, #255	; 0xff
 80014d2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80014d4:	9000      	str	r0, [sp, #0]
 80014d6:	e7ab      	b.n	8001430 <HAL_I2C_Master_Transmit+0x6c>
          hi2c->XferSize = hi2c->XferCount;
 80014d8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80014da:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80014dc:	b292      	uxth	r2, r2
 80014de:	8522      	strh	r2, [r4, #40]	; 0x28
 80014e0:	e7ce      	b.n	8001480 <HAL_I2C_Master_Transmit+0xbc>
    return HAL_BUSY;
 80014e2:	2002      	movs	r0, #2
 80014e4:	e78d      	b.n	8001402 <HAL_I2C_Master_Transmit+0x3e>
 80014e6:	bf00      	nop
 80014e8:	80002000 	.word	0x80002000

080014ec <HAL_I2C_Master_Receive>:
{
 80014ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80014f0:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80014f2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80014f6:	2b20      	cmp	r3, #32
{
 80014f8:	4604      	mov	r4, r0
 80014fa:	460e      	mov	r6, r1
 80014fc:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80014fe:	f040 8086 	bne.w	800160e <HAL_I2C_Master_Receive+0x122>
    __HAL_LOCK(hi2c);
 8001502:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001506:	2b01      	cmp	r3, #1
 8001508:	f000 8081 	beq.w	800160e <HAL_I2C_Master_Receive+0x122>
 800150c:	2701      	movs	r7, #1
 800150e:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001512:	f7ff fc35 	bl	8000d80 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001516:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8001518:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800151a:	9000      	str	r0, [sp, #0]
 800151c:	463a      	mov	r2, r7
 800151e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001522:	4620      	mov	r0, r4
 8001524:	f7ff fda5 	bl	8001072 <I2C_WaitOnFlagUntilTimeout>
 8001528:	b118      	cbz	r0, 8001532 <HAL_I2C_Master_Receive+0x46>
      return HAL_ERROR;
 800152a:	2001      	movs	r0, #1
}
 800152c:	b003      	add	sp, #12
 800152e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001532:	2322      	movs	r3, #34	; 0x22
 8001534:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001538:	2310      	movs	r3, #16
 800153a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800153e:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8001540:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001544:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8001546:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800154a:	b29b      	uxth	r3, r3
 800154c:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 800154e:	6360      	str	r0, [r4, #52]	; 0x34
 8001550:	4b30      	ldr	r3, [pc, #192]	; (8001614 <HAL_I2C_Master_Receive+0x128>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001552:	d926      	bls.n	80015a2 <HAL_I2C_Master_Receive+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001554:	22ff      	movs	r2, #255	; 0xff
 8001556:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001558:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800155a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800155e:	4631      	mov	r1, r6
 8001560:	4620      	mov	r0, r4
 8001562:	f7ff fd6c 	bl	800103e <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001566:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001568:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 800156a:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800156c:	462a      	mov	r2, r5
 800156e:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8001570:	b9fb      	cbnz	r3, 80015b2 <HAL_I2C_Master_Receive+0xc6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001572:	f7ff fe71 	bl	8001258 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001576:	2800      	cmp	r0, #0
 8001578:	d1d7      	bne.n	800152a <HAL_I2C_Master_Receive+0x3e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800157a:	6823      	ldr	r3, [r4, #0]
 800157c:	2120      	movs	r1, #32
 800157e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001580:	685a      	ldr	r2, [r3, #4]
 8001582:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001586:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800158a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800158e:	f022 0201 	bic.w	r2, r2, #1
 8001592:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001594:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001598:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800159c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80015a0:	e7c4      	b.n	800152c <HAL_I2C_Master_Receive+0x40>
      hi2c->XferSize = hi2c->XferCount;
 80015a2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80015a4:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80015a6:	b292      	uxth	r2, r2
 80015a8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80015aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015ae:	b2d2      	uxtb	r2, r2
 80015b0:	e7d5      	b.n	800155e <HAL_I2C_Master_Receive+0x72>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015b2:	f7ff fe76 	bl	80012a2 <I2C_WaitOnRXNEFlagUntilTimeout>
 80015b6:	2800      	cmp	r0, #0
 80015b8:	d1b7      	bne.n	800152a <HAL_I2C_Master_Receive+0x3e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80015ba:	6822      	ldr	r2, [r4, #0]
 80015bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015c0:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80015c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80015c4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80015c6:	3301      	adds	r3, #1
 80015c8:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80015ca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80015cc:	3b01      	subs	r3, #1
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80015d2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80015d4:	3a01      	subs	r2, #1
 80015d6:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80015d8:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80015da:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0c2      	beq.n	8001566 <HAL_I2C_Master_Receive+0x7a>
 80015e0:	2a00      	cmp	r2, #0
 80015e2:	d1c0      	bne.n	8001566 <HAL_I2C_Master_Receive+0x7a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80015e4:	9500      	str	r5, [sp, #0]
 80015e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80015e8:	2180      	movs	r1, #128	; 0x80
 80015ea:	4620      	mov	r0, r4
 80015ec:	f7ff fd41 	bl	8001072 <I2C_WaitOnFlagUntilTimeout>
 80015f0:	2800      	cmp	r0, #0
 80015f2:	d19a      	bne.n	800152a <HAL_I2C_Master_Receive+0x3e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015f4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	2bff      	cmp	r3, #255	; 0xff
 80015fa:	d903      	bls.n	8001604 <HAL_I2C_Master_Receive+0x118>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80015fc:	22ff      	movs	r2, #255	; 0xff
 80015fe:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001600:	9000      	str	r0, [sp, #0]
 8001602:	e7aa      	b.n	800155a <HAL_I2C_Master_Receive+0x6e>
          hi2c->XferSize = hi2c->XferCount;
 8001604:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001606:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8001608:	b292      	uxth	r2, r2
 800160a:	8522      	strh	r2, [r4, #40]	; 0x28
 800160c:	e7cd      	b.n	80015aa <HAL_I2C_Master_Receive+0xbe>
    return HAL_BUSY;
 800160e:	2002      	movs	r0, #2
 8001610:	e78c      	b.n	800152c <HAL_I2C_Master_Receive+0x40>
 8001612:	bf00      	nop
 8001614:	80002400 	.word	0x80002400

08001618 <HAL_I2C_Mem_Write>:
{
 8001618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800161c:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800161e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8001622:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001624:	2b20      	cmp	r3, #32
{
 8001626:	4604      	mov	r4, r0
 8001628:	460f      	mov	r7, r1
 800162a:	9203      	str	r2, [sp, #12]
 800162c:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8001630:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001634:	f040 80a5 	bne.w	8001782 <HAL_I2C_Mem_Write+0x16a>
    if ((pData == NULL) || (Size == 0U))
 8001638:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800163a:	b113      	cbz	r3, 8001642 <HAL_I2C_Mem_Write+0x2a>
 800163c:	f1ba 0f00 	cmp.w	sl, #0
 8001640:	d106      	bne.n	8001650 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001642:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001646:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8001648:	2001      	movs	r0, #1
}
 800164a:	b005      	add	sp, #20
 800164c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8001650:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001654:	2b01      	cmp	r3, #1
 8001656:	f000 8094 	beq.w	8001782 <HAL_I2C_Mem_Write+0x16a>
 800165a:	2501      	movs	r5, #1
 800165c:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001660:	f7ff fb8e 	bl	8000d80 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001664:	2319      	movs	r3, #25
 8001666:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8001668:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800166a:	462a      	mov	r2, r5
 800166c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001670:	4620      	mov	r0, r4
 8001672:	f7ff fcfe 	bl	8001072 <I2C_WaitOnFlagUntilTimeout>
 8001676:	4681      	mov	r9, r0
 8001678:	2800      	cmp	r0, #0
 800167a:	d1e5      	bne.n	8001648 <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800167c:	2321      	movs	r3, #33	; 0x21
 800167e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001682:	2340      	movs	r3, #64	; 0x40
 8001684:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8001688:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800168a:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800168c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 800168e:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8001690:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001694:	9601      	str	r6, [sp, #4]
 8001696:	f8cd 8000 	str.w	r8, [sp]
 800169a:	465b      	mov	r3, fp
 800169c:	9a03      	ldr	r2, [sp, #12]
 800169e:	4639      	mov	r1, r7
 80016a0:	4620      	mov	r0, r4
 80016a2:	f7ff fd75 	bl	8001190 <I2C_RequestMemoryWrite>
 80016a6:	b110      	cbz	r0, 80016ae <HAL_I2C_Mem_Write+0x96>
      __HAL_UNLOCK(hi2c);
 80016a8:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 80016ac:	e7cc      	b.n	8001648 <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	2bff      	cmp	r3, #255	; 0xff
 80016b4:	d955      	bls.n	8001762 <HAL_I2C_Mem_Write+0x14a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016b6:	22ff      	movs	r2, #255	; 0xff
 80016b8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80016ba:	9000      	str	r0, [sp, #0]
 80016bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80016c0:	4639      	mov	r1, r7
 80016c2:	4620      	mov	r0, r4
 80016c4:	f7ff fcbb 	bl	800103e <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016c8:	4632      	mov	r2, r6
 80016ca:	4641      	mov	r1, r8
 80016cc:	4620      	mov	r0, r4
 80016ce:	f7ff fd38 	bl	8001142 <I2C_WaitOnTXISFlagUntilTimeout>
 80016d2:	2800      	cmp	r0, #0
 80016d4:	d1b8      	bne.n	8001648 <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80016d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80016d8:	6822      	ldr	r2, [r4, #0]
 80016da:	f813 1b01 	ldrb.w	r1, [r3], #1
 80016de:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80016e0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80016e2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80016e4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80016e6:	3b01      	subs	r3, #1
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80016ee:	3a01      	subs	r2, #1
 80016f0:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016f2:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80016f4:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016f6:	b1ab      	cbz	r3, 8001724 <HAL_I2C_Mem_Write+0x10c>
 80016f8:	b9a2      	cbnz	r2, 8001724 <HAL_I2C_Mem_Write+0x10c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80016fa:	9600      	str	r6, [sp, #0]
 80016fc:	4643      	mov	r3, r8
 80016fe:	2180      	movs	r1, #128	; 0x80
 8001700:	4620      	mov	r0, r4
 8001702:	f7ff fcb6 	bl	8001072 <I2C_WaitOnFlagUntilTimeout>
 8001706:	2800      	cmp	r0, #0
 8001708:	d19e      	bne.n	8001648 <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800170a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800170c:	b29b      	uxth	r3, r3
 800170e:	2bff      	cmp	r3, #255	; 0xff
 8001710:	d92f      	bls.n	8001772 <HAL_I2C_Mem_Write+0x15a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001712:	22ff      	movs	r2, #255	; 0xff
 8001714:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001716:	9000      	str	r0, [sp, #0]
 8001718:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800171c:	4639      	mov	r1, r7
 800171e:	4620      	mov	r0, r4
 8001720:	f7ff fc8d 	bl	800103e <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8001724:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001726:	b29b      	uxth	r3, r3
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1cd      	bne.n	80016c8 <HAL_I2C_Mem_Write+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800172c:	4632      	mov	r2, r6
 800172e:	4641      	mov	r1, r8
 8001730:	4620      	mov	r0, r4
 8001732:	f7ff fd91 	bl	8001258 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001736:	2800      	cmp	r0, #0
 8001738:	d186      	bne.n	8001648 <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800173a:	6823      	ldr	r3, [r4, #0]
 800173c:	2120      	movs	r1, #32
 800173e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001746:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800174a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800174e:	f022 0201 	bic.w	r2, r2, #1
 8001752:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001754:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001758:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800175c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001760:	e773      	b.n	800164a <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8001762:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001764:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8001766:	b292      	uxth	r2, r2
 8001768:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800176a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	e7a6      	b.n	80016c0 <HAL_I2C_Mem_Write+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 8001772:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001774:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8001776:	b292      	uxth	r2, r2
 8001778:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800177a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	e7cc      	b.n	800171c <HAL_I2C_Mem_Write+0x104>
    return HAL_BUSY;
 8001782:	2002      	movs	r0, #2
 8001784:	e761      	b.n	800164a <HAL_I2C_Mem_Write+0x32>
	...

08001788 <HAL_I2C_Mem_Read>:
{
 8001788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800178c:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800178e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8001792:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001794:	2b20      	cmp	r3, #32
{
 8001796:	4604      	mov	r4, r0
 8001798:	460f      	mov	r7, r1
 800179a:	9203      	str	r2, [sp, #12]
 800179c:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 80017a0:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 80017a4:	f040 80a9 	bne.w	80018fa <HAL_I2C_Mem_Read+0x172>
    if ((pData == NULL) || (Size == 0U))
 80017a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80017aa:	b113      	cbz	r3, 80017b2 <HAL_I2C_Mem_Read+0x2a>
 80017ac:	f1ba 0f00 	cmp.w	sl, #0
 80017b0:	d106      	bne.n	80017c0 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80017b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017b6:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80017b8:	2001      	movs	r0, #1
}
 80017ba:	b005      	add	sp, #20
 80017bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80017c0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	f000 8098 	beq.w	80018fa <HAL_I2C_Mem_Read+0x172>
 80017ca:	2501      	movs	r5, #1
 80017cc:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80017d0:	f7ff fad6 	bl	8000d80 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017d4:	2319      	movs	r3, #25
 80017d6:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80017d8:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017da:	462a      	mov	r2, r5
 80017dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017e0:	4620      	mov	r0, r4
 80017e2:	f7ff fc46 	bl	8001072 <I2C_WaitOnFlagUntilTimeout>
 80017e6:	4681      	mov	r9, r0
 80017e8:	2800      	cmp	r0, #0
 80017ea:	d1e5      	bne.n	80017b8 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80017ec:	2322      	movs	r3, #34	; 0x22
 80017ee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80017f2:	2340      	movs	r3, #64	; 0x40
 80017f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80017f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017fa:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80017fc:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 80017fe:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8001800:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001804:	9601      	str	r6, [sp, #4]
 8001806:	f8cd 8000 	str.w	r8, [sp]
 800180a:	465b      	mov	r3, fp
 800180c:	9a03      	ldr	r2, [sp, #12]
 800180e:	4639      	mov	r1, r7
 8001810:	4620      	mov	r0, r4
 8001812:	f7ff fcef 	bl	80011f4 <I2C_RequestMemoryRead>
 8001816:	b110      	cbz	r0, 800181e <HAL_I2C_Mem_Read+0x96>
      __HAL_UNLOCK(hi2c);
 8001818:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 800181c:	e7cc      	b.n	80017b8 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800181e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001820:	b29b      	uxth	r3, r3
 8001822:	2bff      	cmp	r3, #255	; 0xff
 8001824:	4b36      	ldr	r3, [pc, #216]	; (8001900 <HAL_I2C_Mem_Read+0x178>)
 8001826:	d958      	bls.n	80018da <HAL_I2C_Mem_Read+0x152>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001828:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800182a:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800182c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800182e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001832:	4639      	mov	r1, r7
 8001834:	4620      	mov	r0, r4
 8001836:	f7ff fc02 	bl	800103e <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800183a:	9600      	str	r6, [sp, #0]
 800183c:	4643      	mov	r3, r8
 800183e:	2200      	movs	r2, #0
 8001840:	2104      	movs	r1, #4
 8001842:	4620      	mov	r0, r4
 8001844:	f7ff fc15 	bl	8001072 <I2C_WaitOnFlagUntilTimeout>
 8001848:	2800      	cmp	r0, #0
 800184a:	d1b5      	bne.n	80017b8 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800184c:	6822      	ldr	r2, [r4, #0]
 800184e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001850:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001852:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001854:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001856:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001858:	3301      	adds	r3, #1
 800185a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800185c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800185e:	3b01      	subs	r3, #1
 8001860:	b29b      	uxth	r3, r3
 8001862:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001864:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001866:	3a01      	subs	r2, #1
 8001868:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800186a:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800186c:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800186e:	b1ab      	cbz	r3, 800189c <HAL_I2C_Mem_Read+0x114>
 8001870:	b9a2      	cbnz	r2, 800189c <HAL_I2C_Mem_Read+0x114>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001872:	9600      	str	r6, [sp, #0]
 8001874:	4643      	mov	r3, r8
 8001876:	2180      	movs	r1, #128	; 0x80
 8001878:	4620      	mov	r0, r4
 800187a:	f7ff fbfa 	bl	8001072 <I2C_WaitOnFlagUntilTimeout>
 800187e:	2800      	cmp	r0, #0
 8001880:	d19a      	bne.n	80017b8 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001882:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001884:	b29b      	uxth	r3, r3
 8001886:	2bff      	cmp	r3, #255	; 0xff
 8001888:	d92f      	bls.n	80018ea <HAL_I2C_Mem_Read+0x162>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800188a:	22ff      	movs	r2, #255	; 0xff
 800188c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800188e:	9000      	str	r0, [sp, #0]
 8001890:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001894:	4639      	mov	r1, r7
 8001896:	4620      	mov	r0, r4
 8001898:	f7ff fbd1 	bl	800103e <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 800189c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800189e:	b29b      	uxth	r3, r3
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d1ca      	bne.n	800183a <HAL_I2C_Mem_Read+0xb2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018a4:	4632      	mov	r2, r6
 80018a6:	4641      	mov	r1, r8
 80018a8:	4620      	mov	r0, r4
 80018aa:	f7ff fcd5 	bl	8001258 <I2C_WaitOnSTOPFlagUntilTimeout>
 80018ae:	2800      	cmp	r0, #0
 80018b0:	d182      	bne.n	80017b8 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018b2:	6823      	ldr	r3, [r4, #0]
 80018b4:	2120      	movs	r1, #32
 80018b6:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80018be:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80018c2:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80018c6:	f022 0201 	bic.w	r2, r2, #1
 80018ca:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80018cc:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80018d0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018d4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80018d8:	e76f      	b.n	80017ba <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 80018da:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80018dc:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80018de:	b292      	uxth	r2, r2
 80018e0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80018e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	e7a3      	b.n	8001832 <HAL_I2C_Mem_Read+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 80018ea:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80018ec:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80018ee:	b292      	uxth	r2, r2
 80018f0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80018f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	e7cc      	b.n	8001894 <HAL_I2C_Mem_Read+0x10c>
    return HAL_BUSY;
 80018fa:	2002      	movs	r0, #2
 80018fc:	e75d      	b.n	80017ba <HAL_I2C_Mem_Read+0x32>
 80018fe:	bf00      	nop
 8001900:	80002400 	.word	0x80002400

08001904 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001904:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	2a20      	cmp	r2, #32
{
 800190c:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800190e:	d11d      	bne.n	800194c <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001910:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001914:	2b01      	cmp	r3, #1
 8001916:	d019      	beq.n	800194c <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001918:	2324      	movs	r3, #36	; 0x24
 800191a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800191e:	6803      	ldr	r3, [r0, #0]
 8001920:	681c      	ldr	r4, [r3, #0]
 8001922:	f024 0401 	bic.w	r4, r4, #1
 8001926:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001928:	681c      	ldr	r4, [r3, #0]
 800192a:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800192e:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001930:	681c      	ldr	r4, [r3, #0]
 8001932:	4321      	orrs	r1, r4
 8001934:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001936:	6819      	ldr	r1, [r3, #0]
 8001938:	f041 0101 	orr.w	r1, r1, #1
 800193c:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800193e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001940:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001944:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001948:	4618      	mov	r0, r3
 800194a:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 800194c:	2002      	movs	r0, #2
  }
}
 800194e:	bd10      	pop	{r4, pc}

08001950 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001950:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001952:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8001956:	b2e4      	uxtb	r4, r4
 8001958:	2c20      	cmp	r4, #32
 800195a:	d11c      	bne.n	8001996 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800195c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001960:	2b01      	cmp	r3, #1
 8001962:	d018      	beq.n	8001996 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001964:	2324      	movs	r3, #36	; 0x24
 8001966:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800196a:	6803      	ldr	r3, [r0, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	f022 0201 	bic.w	r2, r2, #1
 8001972:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001974:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001976:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800197a:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800197e:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	f042 0201 	orr.w	r2, r2, #1
 8001986:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001988:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800198a:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800198e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001992:	4618      	mov	r0, r3
 8001994:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001996:	2002      	movs	r0, #2
  }
}
 8001998:	bd10      	pop	{r4, pc}
	...

0800199c <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim: LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 800199c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpcfgr = 0;

  /* Check the LPTIM handle allocation */
  if(hlptim == NULL)
 800199e:	4604      	mov	r4, r0
 80019a0:	2800      	cmp	r0, #0
 80019a2:	d047      	beq.n	8001a34 <HAL_LPTIM_Init+0x98>

#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if(hlptim->State == HAL_LPTIM_STATE_RESET)
 80019a4:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 80019a8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80019ac:	b91b      	cbnz	r3, 80019b6 <HAL_LPTIM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80019ae:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80019b2:	f001 fe29 	bl	8003608 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80019b6:	2302      	movs	r3, #2

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80019b8:	6820      	ldr	r0, [r4, #0]

  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 80019ba:	6865      	ldr	r5, [r4, #4]
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80019bc:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  tmpcfgr = hlptim->Instance->CFGR;
 80019c0:	68c2      	ldr	r2, [r0, #12]
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
  }
  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 80019c2:	6961      	ldr	r1, [r4, #20]
  {
    tmpcfgr &= (uint32_t)(~ (LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80019c4:	4e1c      	ldr	r6, [pc, #112]	; (8001a38 <HAL_LPTIM_Init+0x9c>)
  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 80019c6:	2d01      	cmp	r5, #1
  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 80019c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80019cc:	bf08      	it	eq
 80019ce:	f022 021e 	biceq.w	r2, r2, #30
  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 80019d2:	4299      	cmp	r1, r3
    tmpcfgr &= (uint32_t)(~ (LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80019d4:	bf1c      	itt	ne
 80019d6:	f422 4260 	bicne.w	r2, r2, #57344	; 0xe000
 80019da:	f022 02c0 	bicne.w	r2, r2, #192	; 0xc0
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80019de:	4016      	ands	r6, r2
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE ));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80019e0:	68a2      	ldr	r2, [r4, #8]
 80019e2:	ea45 0302 	orr.w	r3, r5, r2
              hlptim->Init.Clock.Prescaler |
 80019e6:	6a22      	ldr	r2, [r4, #32]
 80019e8:	4313      	orrs	r3, r2
              hlptim->Init.OutputPolarity  |
 80019ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80019ec:	4313      	orrs	r3, r2
              hlptim->Init.UpdateMode      |
 80019ee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
              hlptim->Init.CounterSource);

  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 80019f0:	2d01      	cmp	r5, #1
              hlptim->Init.UpdateMode      |
 80019f2:	ea43 0302 	orr.w	r3, r3, r2
  {
    tmpcfgr |=  (hlptim->Init.UltraLowPowerClock.Polarity |
 80019f6:	bf04      	itt	eq
 80019f8:	6925      	ldreq	r5, [r4, #16]
 80019fa:	68e2      	ldreq	r2, [r4, #12]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80019fc:	ea43 0306 	orr.w	r3, r3, r6
    tmpcfgr |=  (hlptim->Init.UltraLowPowerClock.Polarity |
 8001a00:	bf04      	itt	eq
 8001a02:	432a      	orreq	r2, r5
 8001a04:	4313      	orreq	r3, r2
                hlptim->Init.UltraLowPowerClock.SampleTime);
  }

  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 8001a06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a0a:	4291      	cmp	r1, r2
 8001a0c:	d004      	beq.n	8001a18 <HAL_LPTIM_Init+0x7c>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001a0e:	69a2      	ldr	r2, [r4, #24]
 8001a10:	4311      	orrs	r1, r2
                hlptim->Init.Trigger.ActiveEdge |
 8001a12:	69e2      	ldr	r2, [r4, #28]
 8001a14:	4311      	orrs	r1, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001a16:	430b      	orrs	r3, r1
                hlptim->Init.Trigger.SampleTime);
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8001a18:	60c3      	str	r3, [r0, #12]

  /* Configure LPTIM input sources */
  if(hlptim->Instance == LPTIM1)
 8001a1a:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <HAL_LPTIM_Init+0xa0>)
 8001a1c:	4298      	cmp	r0, r3
    /* Check LPTIM1 Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance,hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance,hlptim->Init.Input2Source));

    /* Configure LPTIM1 Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8001a1e:	bf08      	it	eq
 8001a20:	6b22      	ldreq	r2, [r4, #48]	; 0x30
 8001a22:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a24:	bf08      	it	eq
 8001a26:	4313      	orreq	r3, r2
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance,hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8001a28:	6203      	str	r3, [r0, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8001a30:	2000      	movs	r0, #0
 8001a32:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001a34:	2001      	movs	r0, #1
}
 8001a36:	bd70      	pop	{r4, r5, r6, pc}
 8001a38:	ff19f1fe 	.word	0xff19f1fe
 8001a3c:	40007c00 	.word	0x40007c00

08001a40 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a40:	4b02      	ldr	r3, [pc, #8]	; (8001a4c <HAL_PWREx_GetVoltageRange+0xc>)
 8001a42:	6818      	ldr	r0, [r3, #0]
#endif
}
 8001a44:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	40007000 	.word	0x40007000

08001a50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a50:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a52:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a54:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a58:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a5c:	d11c      	bne.n	8001a98 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a5e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001a62:	d015      	beq.n	8001a90 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8001a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a6e:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a70:	4a10      	ldr	r2, [pc, #64]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8001a72:	6811      	ldr	r1, [r2, #0]
 8001a74:	2232      	movs	r2, #50	; 0x32
 8001a76:	434a      	muls	r2, r1
 8001a78:	490f      	ldr	r1, [pc, #60]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8001a7a:	fbb2 f2f1 	udiv	r2, r2, r1
 8001a7e:	4619      	mov	r1, r3
 8001a80:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a82:	6958      	ldr	r0, [r3, #20]
 8001a84:	0540      	lsls	r0, r0, #21
 8001a86:	d500      	bpl.n	8001a8a <HAL_PWREx_ControlVoltageScaling+0x3a>
 8001a88:	b922      	cbnz	r2, 8001a94 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a8a:	694b      	ldr	r3, [r1, #20]
 8001a8c:	055b      	lsls	r3, r3, #21
 8001a8e:	d40d      	bmi.n	8001aac <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a90:	2000      	movs	r0, #0
 8001a92:	4770      	bx	lr
        wait_loop_index--;
 8001a94:	3a01      	subs	r2, #1
 8001a96:	e7f4      	b.n	8001a82 <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a98:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a9c:	bf1f      	itttt	ne
 8001a9e:	681a      	ldrne	r2, [r3, #0]
 8001aa0:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8001aa4:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8001aa8:	601a      	strne	r2, [r3, #0]
 8001aaa:	e7f1      	b.n	8001a90 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8001aac:	2003      	movs	r0, #3
}
 8001aae:	4770      	bx	lr
 8001ab0:	40007000 	.word	0x40007000
 8001ab4:	20000000 	.word	0x20000000
 8001ab8:	000f4240 	.word	0x000f4240

08001abc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001abc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001abe:	4d1e      	ldr	r5, [pc, #120]	; (8001b38 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001ac0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001ac2:	00da      	lsls	r2, r3, #3
{
 8001ac4:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ac6:	d518      	bpl.n	8001afa <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ac8:	f7ff ffba 	bl	8001a40 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001acc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001ad0:	d123      	bne.n	8001b1a <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ad2:	2c80      	cmp	r4, #128	; 0x80
 8001ad4:	d929      	bls.n	8001b2a <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ad6:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ad8:	bf8c      	ite	hi
 8001ada:	2002      	movhi	r0, #2
 8001adc:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ade:	4a17      	ldr	r2, [pc, #92]	; (8001b3c <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001ae0:	6813      	ldr	r3, [r2, #0]
 8001ae2:	f023 0307 	bic.w	r3, r3, #7
 8001ae6:	4303      	orrs	r3, r0
 8001ae8:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001aea:	6813      	ldr	r3, [r2, #0]
 8001aec:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001af0:	1a18      	subs	r0, r3, r0
 8001af2:	bf18      	it	ne
 8001af4:	2001      	movne	r0, #1
 8001af6:	b003      	add	sp, #12
 8001af8:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8001afa:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b00:	65ab      	str	r3, [r5, #88]	; 0x58
 8001b02:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b08:	9301      	str	r3, [sp, #4]
 8001b0a:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001b0c:	f7ff ff98 	bl	8001a40 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001b10:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001b12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b16:	65ab      	str	r3, [r5, #88]	; 0x58
 8001b18:	e7d8      	b.n	8001acc <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8001b1a:	2c80      	cmp	r4, #128	; 0x80
 8001b1c:	d807      	bhi.n	8001b2e <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8001b1e:	d008      	beq.n	8001b32 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8001b20:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8001b24:	4258      	negs	r0, r3
 8001b26:	4158      	adcs	r0, r3
 8001b28:	e7d9      	b.n	8001ade <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	e7d7      	b.n	8001ade <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8001b2e:	2003      	movs	r0, #3
 8001b30:	e7d5      	b.n	8001ade <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b32:	2002      	movs	r0, #2
 8001b34:	e7d3      	b.n	8001ade <RCC_SetFlashLatencyFromMSIRange+0x22>
 8001b36:	bf00      	nop
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	40022000 	.word	0x40022000

08001b40 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b40:	4b25      	ldr	r3, [pc, #148]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b42:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b44:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b46:	f012 020c 	ands.w	r2, r2, #12
 8001b4a:	d005      	beq.n	8001b58 <HAL_RCC_GetSysClockFreq+0x18>
 8001b4c:	2a0c      	cmp	r2, #12
 8001b4e:	d115      	bne.n	8001b7c <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b50:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b54:	2901      	cmp	r1, #1
 8001b56:	d118      	bne.n	8001b8a <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b58:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8001b5a:	4820      	ldr	r0, [pc, #128]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x9c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b5c:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b5e:	bf55      	itete	pl
 8001b60:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b64:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b66:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b6a:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8001b6e:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b72:	b382      	cbz	r2, 8001bd6 <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b74:	2a0c      	cmp	r2, #12
 8001b76:	d009      	beq.n	8001b8c <HAL_RCC_GetSysClockFreq+0x4c>
 8001b78:	2000      	movs	r0, #0
  return sysclockfreq;
 8001b7a:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b7c:	2a04      	cmp	r2, #4
 8001b7e:	d029      	beq.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x94>
 8001b80:	2a08      	cmp	r2, #8
 8001b82:	4817      	ldr	r0, [pc, #92]	; (8001be0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b84:	bf18      	it	ne
 8001b86:	2000      	movne	r0, #0
 8001b88:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b8a:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b8c:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b8e:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b90:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b94:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (pllsource)
 8001b98:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b9a:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 8001b9e:	d005      	beq.n	8001bac <HAL_RCC_GetSysClockFreq+0x6c>
 8001ba0:	2903      	cmp	r1, #3
 8001ba2:	d012      	beq.n	8001bca <HAL_RCC_GetSysClockFreq+0x8a>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ba4:	68d9      	ldr	r1, [r3, #12]
 8001ba6:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8001baa:	e003      	b.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bac:	68d9      	ldr	r1, [r3, #12]
 8001bae:	480d      	ldr	r0, [pc, #52]	; (8001be4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001bb0:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bb4:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bb6:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bba:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8001bbe:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bc0:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bc2:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8001bc4:	fbb0 f0f3 	udiv	r0, r0, r3
 8001bc8:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bca:	68d9      	ldr	r1, [r3, #12]
 8001bcc:	4804      	ldr	r0, [pc, #16]	; (8001be0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001bce:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8001bd2:	e7ef      	b.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x74>
    sysclockfreq = HSI_VALUE;
 8001bd4:	4803      	ldr	r0, [pc, #12]	; (8001be4 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8001bd6:	4770      	bx	lr
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	08004ac8 	.word	0x08004ac8
 8001be0:	007a1200 	.word	0x007a1200
 8001be4:	00f42400 	.word	0x00f42400

08001be8 <HAL_RCC_OscConfig>:
{
 8001be8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8001bec:	4605      	mov	r5, r0
 8001bee:	b918      	cbnz	r0, 8001bf8 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8001bf0:	2001      	movs	r0, #1
}
 8001bf2:	b003      	add	sp, #12
 8001bf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bf8:	4ca5      	ldr	r4, [pc, #660]	; (8001e90 <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bfa:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bfc:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bfe:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c00:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c02:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c06:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c0a:	d53c      	bpl.n	8001c86 <HAL_RCC_OscConfig+0x9e>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c0c:	b11e      	cbz	r6, 8001c16 <HAL_RCC_OscConfig+0x2e>
 8001c0e:	2e0c      	cmp	r6, #12
 8001c10:	d163      	bne.n	8001cda <HAL_RCC_OscConfig+0xf2>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c12:	2f01      	cmp	r7, #1
 8001c14:	d161      	bne.n	8001cda <HAL_RCC_OscConfig+0xf2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c16:	6823      	ldr	r3, [r4, #0]
 8001c18:	0798      	lsls	r0, r3, #30
 8001c1a:	d502      	bpl.n	8001c22 <HAL_RCC_OscConfig+0x3a>
 8001c1c:	69ab      	ldr	r3, [r5, #24]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0e6      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c22:	6823      	ldr	r3, [r4, #0]
 8001c24:	6a28      	ldr	r0, [r5, #32]
 8001c26:	0719      	lsls	r1, r3, #28
 8001c28:	bf56      	itet	pl
 8001c2a:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8001c2e:	6823      	ldrmi	r3, [r4, #0]
 8001c30:	091b      	lsrpl	r3, r3, #4
 8001c32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c36:	4283      	cmp	r3, r0
 8001c38:	d23a      	bcs.n	8001cb0 <HAL_RCC_OscConfig+0xc8>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c3a:	f7ff ff3f 	bl	8001abc <RCC_SetFlashLatencyFromMSIRange>
 8001c3e:	2800      	cmp	r0, #0
 8001c40:	d1d6      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c42:	6823      	ldr	r3, [r4, #0]
 8001c44:	f043 0308 	orr.w	r3, r3, #8
 8001c48:	6023      	str	r3, [r4, #0]
 8001c4a:	6823      	ldr	r3, [r4, #0]
 8001c4c:	6a2a      	ldr	r2, [r5, #32]
 8001c4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c52:	4313      	orrs	r3, r2
 8001c54:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c56:	6863      	ldr	r3, [r4, #4]
 8001c58:	69ea      	ldr	r2, [r5, #28]
 8001c5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001c5e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001c62:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c64:	f7ff ff6c 	bl	8001b40 <HAL_RCC_GetSysClockFreq>
 8001c68:	68a3      	ldr	r3, [r4, #8]
 8001c6a:	4a8a      	ldr	r2, [pc, #552]	; (8001e94 <HAL_RCC_OscConfig+0x2ac>)
 8001c6c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001c70:	5cd3      	ldrb	r3, [r2, r3]
 8001c72:	f003 031f 	and.w	r3, r3, #31
 8001c76:	40d8      	lsrs	r0, r3
 8001c78:	4b87      	ldr	r3, [pc, #540]	; (8001e98 <HAL_RCC_OscConfig+0x2b0>)
 8001c7a:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	f7ff f849 	bl	8000d14 <HAL_InitTick>
        if(status != HAL_OK)
 8001c82:	2800      	cmp	r0, #0
 8001c84:	d1b5      	bne.n	8001bf2 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c86:	682b      	ldr	r3, [r5, #0]
 8001c88:	07d8      	lsls	r0, r3, #31
 8001c8a:	d45d      	bmi.n	8001d48 <HAL_RCC_OscConfig+0x160>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c8c:	682b      	ldr	r3, [r5, #0]
 8001c8e:	0799      	lsls	r1, r3, #30
 8001c90:	f100 809c 	bmi.w	8001dcc <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c94:	682b      	ldr	r3, [r5, #0]
 8001c96:	0718      	lsls	r0, r3, #28
 8001c98:	f100 80d0 	bmi.w	8001e3c <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c9c:	682b      	ldr	r3, [r5, #0]
 8001c9e:	0759      	lsls	r1, r3, #29
 8001ca0:	f100 80fc 	bmi.w	8001e9c <HAL_RCC_OscConfig+0x2b4>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ca4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f040 8165 	bne.w	8001f76 <HAL_RCC_OscConfig+0x38e>
  return HAL_OK;
 8001cac:	2000      	movs	r0, #0
 8001cae:	e7a0      	b.n	8001bf2 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cb0:	6823      	ldr	r3, [r4, #0]
 8001cb2:	f043 0308 	orr.w	r3, r3, #8
 8001cb6:	6023      	str	r3, [r4, #0]
 8001cb8:	6823      	ldr	r3, [r4, #0]
 8001cba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cbe:	4303      	orrs	r3, r0
 8001cc0:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cc2:	6863      	ldr	r3, [r4, #4]
 8001cc4:	69ea      	ldr	r2, [r5, #28]
 8001cc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001cca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001cce:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cd0:	f7ff fef4 	bl	8001abc <RCC_SetFlashLatencyFromMSIRange>
 8001cd4:	2800      	cmp	r0, #0
 8001cd6:	d0c5      	beq.n	8001c64 <HAL_RCC_OscConfig+0x7c>
 8001cd8:	e78a      	b.n	8001bf0 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001cda:	69ab      	ldr	r3, [r5, #24]
 8001cdc:	b31b      	cbz	r3, 8001d26 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_MSI_ENABLE();
 8001cde:	6823      	ldr	r3, [r4, #0]
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001ce6:	f7ff f84b 	bl	8000d80 <HAL_GetTick>
 8001cea:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cec:	6823      	ldr	r3, [r4, #0]
 8001cee:	079a      	lsls	r2, r3, #30
 8001cf0:	d511      	bpl.n	8001d16 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cf2:	6823      	ldr	r3, [r4, #0]
 8001cf4:	f043 0308 	orr.w	r3, r3, #8
 8001cf8:	6023      	str	r3, [r4, #0]
 8001cfa:	6823      	ldr	r3, [r4, #0]
 8001cfc:	6a2a      	ldr	r2, [r5, #32]
 8001cfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d02:	4313      	orrs	r3, r2
 8001d04:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d06:	6863      	ldr	r3, [r4, #4]
 8001d08:	69ea      	ldr	r2, [r5, #28]
 8001d0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d0e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001d12:	6063      	str	r3, [r4, #4]
 8001d14:	e7b7      	b.n	8001c86 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d16:	f7ff f833 	bl	8000d80 <HAL_GetTick>
 8001d1a:	eba0 0008 	sub.w	r0, r0, r8
 8001d1e:	2802      	cmp	r0, #2
 8001d20:	d9e4      	bls.n	8001cec <HAL_RCC_OscConfig+0x104>
            return HAL_TIMEOUT;
 8001d22:	2003      	movs	r0, #3
 8001d24:	e765      	b.n	8001bf2 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8001d26:	6823      	ldr	r3, [r4, #0]
 8001d28:	f023 0301 	bic.w	r3, r3, #1
 8001d2c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001d2e:	f7ff f827 	bl	8000d80 <HAL_GetTick>
 8001d32:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d34:	6823      	ldr	r3, [r4, #0]
 8001d36:	079b      	lsls	r3, r3, #30
 8001d38:	d5a5      	bpl.n	8001c86 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d3a:	f7ff f821 	bl	8000d80 <HAL_GetTick>
 8001d3e:	eba0 0008 	sub.w	r0, r0, r8
 8001d42:	2802      	cmp	r0, #2
 8001d44:	d9f6      	bls.n	8001d34 <HAL_RCC_OscConfig+0x14c>
 8001d46:	e7ec      	b.n	8001d22 <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d48:	2e08      	cmp	r6, #8
 8001d4a:	d003      	beq.n	8001d54 <HAL_RCC_OscConfig+0x16c>
 8001d4c:	2e0c      	cmp	r6, #12
 8001d4e:	d108      	bne.n	8001d62 <HAL_RCC_OscConfig+0x17a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8001d50:	2f03      	cmp	r7, #3
 8001d52:	d106      	bne.n	8001d62 <HAL_RCC_OscConfig+0x17a>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d54:	6823      	ldr	r3, [r4, #0]
 8001d56:	039a      	lsls	r2, r3, #14
 8001d58:	d598      	bpl.n	8001c8c <HAL_RCC_OscConfig+0xa4>
 8001d5a:	686b      	ldr	r3, [r5, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d195      	bne.n	8001c8c <HAL_RCC_OscConfig+0xa4>
 8001d60:	e746      	b.n	8001bf0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d62:	686b      	ldr	r3, [r5, #4]
 8001d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d68:	d110      	bne.n	8001d8c <HAL_RCC_OscConfig+0x1a4>
 8001d6a:	6823      	ldr	r3, [r4, #0]
 8001d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d70:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001d72:	f7ff f805 	bl	8000d80 <HAL_GetTick>
 8001d76:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d78:	6823      	ldr	r3, [r4, #0]
 8001d7a:	039b      	lsls	r3, r3, #14
 8001d7c:	d486      	bmi.n	8001c8c <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d7e:	f7fe ffff 	bl	8000d80 <HAL_GetTick>
 8001d82:	eba0 0008 	sub.w	r0, r0, r8
 8001d86:	2864      	cmp	r0, #100	; 0x64
 8001d88:	d9f6      	bls.n	8001d78 <HAL_RCC_OscConfig+0x190>
 8001d8a:	e7ca      	b.n	8001d22 <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d90:	d104      	bne.n	8001d9c <HAL_RCC_OscConfig+0x1b4>
 8001d92:	6823      	ldr	r3, [r4, #0]
 8001d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d98:	6023      	str	r3, [r4, #0]
 8001d9a:	e7e6      	b.n	8001d6a <HAL_RCC_OscConfig+0x182>
 8001d9c:	6822      	ldr	r2, [r4, #0]
 8001d9e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001da2:	6022      	str	r2, [r4, #0]
 8001da4:	6822      	ldr	r2, [r4, #0]
 8001da6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001daa:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1e0      	bne.n	8001d72 <HAL_RCC_OscConfig+0x18a>
        tickstart = HAL_GetTick();
 8001db0:	f7fe ffe6 	bl	8000d80 <HAL_GetTick>
 8001db4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001db6:	6823      	ldr	r3, [r4, #0]
 8001db8:	0398      	lsls	r0, r3, #14
 8001dba:	f57f af67 	bpl.w	8001c8c <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dbe:	f7fe ffdf 	bl	8000d80 <HAL_GetTick>
 8001dc2:	eba0 0008 	sub.w	r0, r0, r8
 8001dc6:	2864      	cmp	r0, #100	; 0x64
 8001dc8:	d9f5      	bls.n	8001db6 <HAL_RCC_OscConfig+0x1ce>
 8001dca:	e7aa      	b.n	8001d22 <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001dcc:	2e04      	cmp	r6, #4
 8001dce:	d003      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x1f0>
 8001dd0:	2e0c      	cmp	r6, #12
 8001dd2:	d110      	bne.n	8001df6 <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8001dd4:	2f02      	cmp	r7, #2
 8001dd6:	d10e      	bne.n	8001df6 <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dd8:	6823      	ldr	r3, [r4, #0]
 8001dda:	0559      	lsls	r1, r3, #21
 8001ddc:	d503      	bpl.n	8001de6 <HAL_RCC_OscConfig+0x1fe>
 8001dde:	68eb      	ldr	r3, [r5, #12]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f43f af05 	beq.w	8001bf0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de6:	6863      	ldr	r3, [r4, #4]
 8001de8:	692a      	ldr	r2, [r5, #16]
 8001dea:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001dee:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001df2:	6063      	str	r3, [r4, #4]
 8001df4:	e74e      	b.n	8001c94 <HAL_RCC_OscConfig+0xac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001df6:	68eb      	ldr	r3, [r5, #12]
 8001df8:	b17b      	cbz	r3, 8001e1a <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 8001dfa:	6823      	ldr	r3, [r4, #0]
 8001dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e00:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001e02:	f7fe ffbd 	bl	8000d80 <HAL_GetTick>
 8001e06:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e08:	6823      	ldr	r3, [r4, #0]
 8001e0a:	055a      	lsls	r2, r3, #21
 8001e0c:	d4eb      	bmi.n	8001de6 <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e0e:	f7fe ffb7 	bl	8000d80 <HAL_GetTick>
 8001e12:	1bc0      	subs	r0, r0, r7
 8001e14:	2802      	cmp	r0, #2
 8001e16:	d9f7      	bls.n	8001e08 <HAL_RCC_OscConfig+0x220>
 8001e18:	e783      	b.n	8001d22 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_DISABLE();
 8001e1a:	6823      	ldr	r3, [r4, #0]
 8001e1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e20:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001e22:	f7fe ffad 	bl	8000d80 <HAL_GetTick>
 8001e26:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e28:	6823      	ldr	r3, [r4, #0]
 8001e2a:	055b      	lsls	r3, r3, #21
 8001e2c:	f57f af32 	bpl.w	8001c94 <HAL_RCC_OscConfig+0xac>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e30:	f7fe ffa6 	bl	8000d80 <HAL_GetTick>
 8001e34:	1bc0      	subs	r0, r0, r7
 8001e36:	2802      	cmp	r0, #2
 8001e38:	d9f6      	bls.n	8001e28 <HAL_RCC_OscConfig+0x240>
 8001e3a:	e772      	b.n	8001d22 <HAL_RCC_OscConfig+0x13a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e3c:	696b      	ldr	r3, [r5, #20]
 8001e3e:	b19b      	cbz	r3, 8001e68 <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 8001e40:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001e4c:	f7fe ff98 	bl	8000d80 <HAL_GetTick>
 8001e50:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e52:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001e56:	079a      	lsls	r2, r3, #30
 8001e58:	f53f af20 	bmi.w	8001c9c <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e5c:	f7fe ff90 	bl	8000d80 <HAL_GetTick>
 8001e60:	1bc0      	subs	r0, r0, r7
 8001e62:	2802      	cmp	r0, #2
 8001e64:	d9f5      	bls.n	8001e52 <HAL_RCC_OscConfig+0x26a>
 8001e66:	e75c      	b.n	8001d22 <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_LSI_DISABLE();
 8001e68:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001e6c:	f023 0301 	bic.w	r3, r3, #1
 8001e70:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001e74:	f7fe ff84 	bl	8000d80 <HAL_GetTick>
 8001e78:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e7a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001e7e:	079b      	lsls	r3, r3, #30
 8001e80:	f57f af0c 	bpl.w	8001c9c <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e84:	f7fe ff7c 	bl	8000d80 <HAL_GetTick>
 8001e88:	1bc0      	subs	r0, r0, r7
 8001e8a:	2802      	cmp	r0, #2
 8001e8c:	d9f5      	bls.n	8001e7a <HAL_RCC_OscConfig+0x292>
 8001e8e:	e748      	b.n	8001d22 <HAL_RCC_OscConfig+0x13a>
 8001e90:	40021000 	.word	0x40021000
 8001e94:	08004aad 	.word	0x08004aad
 8001e98:	20000000 	.word	0x20000000
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001e9e:	00d8      	lsls	r0, r3, #3
 8001ea0:	d429      	bmi.n	8001ef6 <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ea2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea8:	65a3      	str	r3, [r4, #88]	; 0x58
 8001eaa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb0:	9301      	str	r3, [sp, #4]
 8001eb2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001eb4:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eb8:	4f5d      	ldr	r7, [pc, #372]	; (8002030 <HAL_RCC_OscConfig+0x448>)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	05d9      	lsls	r1, r3, #23
 8001ebe:	d51d      	bpl.n	8001efc <HAL_RCC_OscConfig+0x314>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ec0:	68ab      	ldr	r3, [r5, #8]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d12b      	bne.n	8001f1e <HAL_RCC_OscConfig+0x336>
 8001ec6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001ed2:	f7fe ff55 	bl	8000d80 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ed6:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001eda:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001edc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001ee0:	079b      	lsls	r3, r3, #30
 8001ee2:	d542      	bpl.n	8001f6a <HAL_RCC_OscConfig+0x382>
    if(pwrclkchanged == SET)
 8001ee4:	f1b8 0f00 	cmp.w	r8, #0
 8001ee8:	f43f aedc 	beq.w	8001ca4 <HAL_RCC_OscConfig+0xbc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001eee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ef2:	65a3      	str	r3, [r4, #88]	; 0x58
 8001ef4:	e6d6      	b.n	8001ca4 <HAL_RCC_OscConfig+0xbc>
    FlagStatus       pwrclkchanged = RESET;
 8001ef6:	f04f 0800 	mov.w	r8, #0
 8001efa:	e7dd      	b.n	8001eb8 <HAL_RCC_OscConfig+0x2d0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f02:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001f04:	f7fe ff3c 	bl	8000d80 <HAL_GetTick>
 8001f08:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	05da      	lsls	r2, r3, #23
 8001f0e:	d4d7      	bmi.n	8001ec0 <HAL_RCC_OscConfig+0x2d8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f10:	f7fe ff36 	bl	8000d80 <HAL_GetTick>
 8001f14:	eba0 0009 	sub.w	r0, r0, r9
 8001f18:	2802      	cmp	r0, #2
 8001f1a:	d9f6      	bls.n	8001f0a <HAL_RCC_OscConfig+0x322>
 8001f1c:	e701      	b.n	8001d22 <HAL_RCC_OscConfig+0x13a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f1e:	2b05      	cmp	r3, #5
 8001f20:	d106      	bne.n	8001f30 <HAL_RCC_OscConfig+0x348>
 8001f22:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001f26:	f043 0304 	orr.w	r3, r3, #4
 8001f2a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8001f2e:	e7ca      	b.n	8001ec6 <HAL_RCC_OscConfig+0x2de>
 8001f30:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001f34:	f022 0201 	bic.w	r2, r2, #1
 8001f38:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8001f3c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001f40:	f022 0204 	bic.w	r2, r2, #4
 8001f44:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1c2      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x2ea>
      tickstart = HAL_GetTick();
 8001f4c:	f7fe ff18 	bl	8000d80 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f50:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001f54:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f56:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001f5a:	0798      	lsls	r0, r3, #30
 8001f5c:	d5c2      	bpl.n	8001ee4 <HAL_RCC_OscConfig+0x2fc>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f5e:	f7fe ff0f 	bl	8000d80 <HAL_GetTick>
 8001f62:	1bc0      	subs	r0, r0, r7
 8001f64:	4548      	cmp	r0, r9
 8001f66:	d9f6      	bls.n	8001f56 <HAL_RCC_OscConfig+0x36e>
 8001f68:	e6db      	b.n	8001d22 <HAL_RCC_OscConfig+0x13a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f6a:	f7fe ff09 	bl	8000d80 <HAL_GetTick>
 8001f6e:	1bc0      	subs	r0, r0, r7
 8001f70:	4548      	cmp	r0, r9
 8001f72:	d9b3      	bls.n	8001edc <HAL_RCC_OscConfig+0x2f4>
 8001f74:	e6d5      	b.n	8001d22 <HAL_RCC_OscConfig+0x13a>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f76:	2e0c      	cmp	r6, #12
 8001f78:	f43f ae3a 	beq.w	8001bf0 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f7c:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8001f7e:	6823      	ldr	r3, [r4, #0]
 8001f80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f84:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f86:	d137      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x410>
        tickstart = HAL_GetTick();
 8001f88:	f7fe fefa 	bl	8000d80 <HAL_GetTick>
 8001f8c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f8e:	6823      	ldr	r3, [r4, #0]
 8001f90:	0199      	lsls	r1, r3, #6
 8001f92:	d42b      	bmi.n	8001fec <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f94:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001f96:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001f98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001f9c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001f9e:	3a01      	subs	r2, #1
 8001fa0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001fa4:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001fa6:	0912      	lsrs	r2, r2, #4
 8001fa8:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8001fac:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001fae:	0852      	lsrs	r2, r2, #1
 8001fb0:	3a01      	subs	r2, #1
 8001fb2:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8001fb6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001fb8:	0852      	lsrs	r2, r2, #1
 8001fba:	3a01      	subs	r2, #1
 8001fbc:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001fc0:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8001fc2:	6823      	ldr	r3, [r4, #0]
 8001fc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fc8:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fca:	68e3      	ldr	r3, [r4, #12]
 8001fcc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fd0:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001fd2:	f7fe fed5 	bl	8000d80 <HAL_GetTick>
 8001fd6:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd8:	6823      	ldr	r3, [r4, #0]
 8001fda:	019a      	lsls	r2, r3, #6
 8001fdc:	f53f ae66 	bmi.w	8001cac <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe0:	f7fe fece 	bl	8000d80 <HAL_GetTick>
 8001fe4:	1b40      	subs	r0, r0, r5
 8001fe6:	2802      	cmp	r0, #2
 8001fe8:	d9f6      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x3f0>
 8001fea:	e69a      	b.n	8001d22 <HAL_RCC_OscConfig+0x13a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fec:	f7fe fec8 	bl	8000d80 <HAL_GetTick>
 8001ff0:	1b80      	subs	r0, r0, r6
 8001ff2:	2802      	cmp	r0, #2
 8001ff4:	d9cb      	bls.n	8001f8e <HAL_RCC_OscConfig+0x3a6>
 8001ff6:	e694      	b.n	8001d22 <HAL_RCC_OscConfig+0x13a>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001ff8:	6823      	ldr	r3, [r4, #0]
 8001ffa:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ffe:	bf02      	ittt	eq
 8002000:	68e3      	ldreq	r3, [r4, #12]
 8002002:	f023 0303 	biceq.w	r3, r3, #3
 8002006:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002008:	68e3      	ldr	r3, [r4, #12]
 800200a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800200e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002012:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8002014:	f7fe feb4 	bl	8000d80 <HAL_GetTick>
 8002018:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800201a:	6823      	ldr	r3, [r4, #0]
 800201c:	019b      	lsls	r3, r3, #6
 800201e:	f57f ae45 	bpl.w	8001cac <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002022:	f7fe fead 	bl	8000d80 <HAL_GetTick>
 8002026:	1b40      	subs	r0, r0, r5
 8002028:	2802      	cmp	r0, #2
 800202a:	d9f6      	bls.n	800201a <HAL_RCC_OscConfig+0x432>
 800202c:	e679      	b.n	8001d22 <HAL_RCC_OscConfig+0x13a>
 800202e:	bf00      	nop
 8002030:	40007000 	.word	0x40007000

08002034 <HAL_RCC_ClockConfig>:
{
 8002034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002038:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 800203a:	4604      	mov	r4, r0
 800203c:	b910      	cbnz	r0, 8002044 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800203e:	2001      	movs	r0, #1
 8002040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002044:	4a40      	ldr	r2, [pc, #256]	; (8002148 <HAL_RCC_ClockConfig+0x114>)
 8002046:	6813      	ldr	r3, [r2, #0]
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	428b      	cmp	r3, r1
 800204e:	d329      	bcc.n	80020a4 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002050:	6823      	ldr	r3, [r4, #0]
 8002052:	07d9      	lsls	r1, r3, #31
 8002054:	d431      	bmi.n	80020ba <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002056:	6821      	ldr	r1, [r4, #0]
 8002058:	078a      	lsls	r2, r1, #30
 800205a:	d45b      	bmi.n	8002114 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800205c:	4a3a      	ldr	r2, [pc, #232]	; (8002148 <HAL_RCC_ClockConfig+0x114>)
 800205e:	6813      	ldr	r3, [r2, #0]
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	429e      	cmp	r6, r3
 8002066:	d35d      	bcc.n	8002124 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002068:	f011 0f04 	tst.w	r1, #4
 800206c:	4d37      	ldr	r5, [pc, #220]	; (800214c <HAL_RCC_ClockConfig+0x118>)
 800206e:	d164      	bne.n	800213a <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002070:	070b      	lsls	r3, r1, #28
 8002072:	d506      	bpl.n	8002082 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002074:	68ab      	ldr	r3, [r5, #8]
 8002076:	6922      	ldr	r2, [r4, #16]
 8002078:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800207c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002080:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002082:	f7ff fd5d 	bl	8001b40 <HAL_RCC_GetSysClockFreq>
 8002086:	68ab      	ldr	r3, [r5, #8]
 8002088:	4a31      	ldr	r2, [pc, #196]	; (8002150 <HAL_RCC_ClockConfig+0x11c>)
 800208a:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 800208e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002092:	5cd3      	ldrb	r3, [r2, r3]
 8002094:	f003 031f 	and.w	r3, r3, #31
 8002098:	40d8      	lsrs	r0, r3
 800209a:	4b2e      	ldr	r3, [pc, #184]	; (8002154 <HAL_RCC_ClockConfig+0x120>)
 800209c:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 800209e:	2000      	movs	r0, #0
 80020a0:	f7fe be38 	b.w	8000d14 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a4:	6813      	ldr	r3, [r2, #0]
 80020a6:	f023 0307 	bic.w	r3, r3, #7
 80020aa:	430b      	orrs	r3, r1
 80020ac:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ae:	6813      	ldr	r3, [r2, #0]
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	4299      	cmp	r1, r3
 80020b6:	d1c2      	bne.n	800203e <HAL_RCC_ClockConfig+0xa>
 80020b8:	e7ca      	b.n	8002050 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ba:	6862      	ldr	r2, [r4, #4]
 80020bc:	4d23      	ldr	r5, [pc, #140]	; (800214c <HAL_RCC_ClockConfig+0x118>)
 80020be:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020c0:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020c2:	d11b      	bne.n	80020fc <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020c4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020c8:	d0b9      	beq.n	800203e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020ca:	68ab      	ldr	r3, [r5, #8]
 80020cc:	f023 0303 	bic.w	r3, r3, #3
 80020d0:	4313      	orrs	r3, r2
 80020d2:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 80020d4:	f7fe fe54 	bl	8000d80 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80020dc:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020de:	68ab      	ldr	r3, [r5, #8]
 80020e0:	6862      	ldr	r2, [r4, #4]
 80020e2:	f003 030c 	and.w	r3, r3, #12
 80020e6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80020ea:	d0b4      	beq.n	8002056 <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ec:	f7fe fe48 	bl	8000d80 <HAL_GetTick>
 80020f0:	1bc0      	subs	r0, r0, r7
 80020f2:	4540      	cmp	r0, r8
 80020f4:	d9f3      	bls.n	80020de <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 80020f6:	2003      	movs	r0, #3
}
 80020f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020fc:	2a02      	cmp	r2, #2
 80020fe:	d102      	bne.n	8002106 <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002100:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002104:	e7e0      	b.n	80020c8 <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002106:	b912      	cbnz	r2, 800210e <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002108:	f013 0f02 	tst.w	r3, #2
 800210c:	e7dc      	b.n	80020c8 <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800210e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002112:	e7d9      	b.n	80020c8 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002114:	4a0d      	ldr	r2, [pc, #52]	; (800214c <HAL_RCC_ClockConfig+0x118>)
 8002116:	68a0      	ldr	r0, [r4, #8]
 8002118:	6893      	ldr	r3, [r2, #8]
 800211a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800211e:	4303      	orrs	r3, r0
 8002120:	6093      	str	r3, [r2, #8]
 8002122:	e79b      	b.n	800205c <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002124:	6813      	ldr	r3, [r2, #0]
 8002126:	f023 0307 	bic.w	r3, r3, #7
 800212a:	4333      	orrs	r3, r6
 800212c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800212e:	6813      	ldr	r3, [r2, #0]
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	429e      	cmp	r6, r3
 8002136:	d182      	bne.n	800203e <HAL_RCC_ClockConfig+0xa>
 8002138:	e796      	b.n	8002068 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800213a:	68ab      	ldr	r3, [r5, #8]
 800213c:	68e2      	ldr	r2, [r4, #12]
 800213e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002142:	4313      	orrs	r3, r2
 8002144:	60ab      	str	r3, [r5, #8]
 8002146:	e793      	b.n	8002070 <HAL_RCC_ClockConfig+0x3c>
 8002148:	40022000 	.word	0x40022000
 800214c:	40021000 	.word	0x40021000
 8002150:	08004aad 	.word	0x08004aad
 8002154:	20000000 	.word	0x20000000

08002158 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002158:	4b05      	ldr	r3, [pc, #20]	; (8002170 <HAL_RCC_GetPCLK1Freq+0x18>)
 800215a:	4a06      	ldr	r2, [pc, #24]	; (8002174 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002162:	5cd3      	ldrb	r3, [r2, r3]
 8002164:	4a04      	ldr	r2, [pc, #16]	; (8002178 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002166:	6810      	ldr	r0, [r2, #0]
 8002168:	f003 031f 	and.w	r3, r3, #31
}
 800216c:	40d8      	lsrs	r0, r3
 800216e:	4770      	bx	lr
 8002170:	40021000 	.word	0x40021000
 8002174:	08004abd 	.word	0x08004abd
 8002178:	20000000 	.word	0x20000000

0800217c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800217c:	4b05      	ldr	r3, [pc, #20]	; (8002194 <HAL_RCC_GetPCLK2Freq+0x18>)
 800217e:	4a06      	ldr	r2, [pc, #24]	; (8002198 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002186:	5cd3      	ldrb	r3, [r2, r3]
 8002188:	4a04      	ldr	r2, [pc, #16]	; (800219c <HAL_RCC_GetPCLK2Freq+0x20>)
 800218a:	6810      	ldr	r0, [r2, #0]
 800218c:	f003 031f 	and.w	r3, r3, #31
}
 8002190:	40d8      	lsrs	r0, r3
 8002192:	4770      	bx	lr
 8002194:	40021000 	.word	0x40021000
 8002198:	08004abd 	.word	0x08004abd
 800219c:	20000000 	.word	0x20000000

080021a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80021a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80021a2:	4b45      	ldr	r3, [pc, #276]	; (80022b8 <RCCEx_PLLSAI1_Config+0x118>)
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	f012 0f03 	tst.w	r2, #3
{
 80021aa:	4605      	mov	r5, r0
 80021ac:	460e      	mov	r6, r1
 80021ae:	461c      	mov	r4, r3
 80021b0:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80021b2:	d02a      	beq.n	800220a <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80021b4:	68da      	ldr	r2, [r3, #12]
 80021b6:	f002 0203 	and.w	r2, r2, #3
 80021ba:	4282      	cmp	r2, r0
 80021bc:	d13c      	bne.n	8002238 <RCCEx_PLLSAI1_Config+0x98>
       ||
 80021be:	2a00      	cmp	r2, #0
 80021c0:	d03a      	beq.n	8002238 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80021c2:	68db      	ldr	r3, [r3, #12]
       ||
 80021c4:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80021c6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80021ca:	3301      	adds	r3, #1
       ||
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d133      	bne.n	8002238 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80021d0:	6823      	ldr	r3, [r4, #0]
 80021d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80021d6:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021d8:	f7fe fdd2 	bl	8000d80 <HAL_GetTick>
 80021dc:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80021de:	6823      	ldr	r3, [r4, #0]
 80021e0:	011a      	lsls	r2, r3, #4
 80021e2:	d432      	bmi.n	800224a <RCCEx_PLLSAI1_Config+0xaa>
 80021e4:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80021e6:	2e00      	cmp	r6, #0
 80021e8:	d036      	beq.n	8002258 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80021ea:	2e01      	cmp	r6, #1
 80021ec:	d150      	bne.n	8002290 <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80021ee:	6922      	ldr	r2, [r4, #16]
 80021f0:	6928      	ldr	r0, [r5, #16]
 80021f2:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80021f6:	0840      	lsrs	r0, r0, #1
 80021f8:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80021fc:	3801      	subs	r0, #1
 80021fe:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8002202:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8002206:	6122      	str	r2, [r4, #16]
 8002208:	e032      	b.n	8002270 <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 800220a:	2802      	cmp	r0, #2
 800220c:	d010      	beq.n	8002230 <RCCEx_PLLSAI1_Config+0x90>
 800220e:	2803      	cmp	r0, #3
 8002210:	d014      	beq.n	800223c <RCCEx_PLLSAI1_Config+0x9c>
 8002212:	2801      	cmp	r0, #1
 8002214:	d110      	bne.n	8002238 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	079f      	lsls	r7, r3, #30
 800221a:	d538      	bpl.n	800228e <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800221c:	68e3      	ldr	r3, [r4, #12]
 800221e:	686a      	ldr	r2, [r5, #4]
 8002220:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8002224:	3a01      	subs	r2, #1
 8002226:	4318      	orrs	r0, r3
 8002228:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800222c:	60e0      	str	r0, [r4, #12]
 800222e:	e7cf      	b.n	80021d0 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002236:	d1f1      	bne.n	800221c <RCCEx_PLLSAI1_Config+0x7c>
 8002238:	2001      	movs	r0, #1
 800223a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	0391      	lsls	r1, r2, #14
 8002240:	d4ec      	bmi.n	800221c <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002248:	e7f5      	b.n	8002236 <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800224a:	f7fe fd99 	bl	8000d80 <HAL_GetTick>
 800224e:	1bc0      	subs	r0, r0, r7
 8002250:	2802      	cmp	r0, #2
 8002252:	d9c4      	bls.n	80021de <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8002254:	2003      	movs	r0, #3
 8002256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002258:	6921      	ldr	r1, [r4, #16]
 800225a:	68eb      	ldr	r3, [r5, #12]
 800225c:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8002260:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8002264:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8002268:	091b      	lsrs	r3, r3, #4
 800226a:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 800226e:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002270:	6823      	ldr	r3, [r4, #0]
 8002272:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002276:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002278:	f7fe fd82 	bl	8000d80 <HAL_GetTick>
 800227c:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800227e:	6823      	ldr	r3, [r4, #0]
 8002280:	011b      	lsls	r3, r3, #4
 8002282:	d513      	bpl.n	80022ac <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002284:	6923      	ldr	r3, [r4, #16]
 8002286:	69aa      	ldr	r2, [r5, #24]
 8002288:	4313      	orrs	r3, r2
 800228a:	6123      	str	r3, [r4, #16]
 800228c:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800228e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002290:	6923      	ldr	r3, [r4, #16]
 8002292:	6968      	ldr	r0, [r5, #20]
 8002294:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002298:	0840      	lsrs	r0, r0, #1
 800229a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800229e:	3801      	subs	r0, #1
 80022a0:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80022a4:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 80022a8:	6123      	str	r3, [r4, #16]
 80022aa:	e7e1      	b.n	8002270 <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80022ac:	f7fe fd68 	bl	8000d80 <HAL_GetTick>
 80022b0:	1b80      	subs	r0, r0, r6
 80022b2:	2802      	cmp	r0, #2
 80022b4:	d9e3      	bls.n	800227e <RCCEx_PLLSAI1_Config+0xde>
 80022b6:	e7cd      	b.n	8002254 <RCCEx_PLLSAI1_Config+0xb4>
 80022b8:	40021000 	.word	0x40021000

080022bc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80022bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80022be:	4b3d      	ldr	r3, [pc, #244]	; (80023b4 <RCCEx_PLLSAI2_Config+0xf8>)
 80022c0:	68da      	ldr	r2, [r3, #12]
 80022c2:	f012 0f03 	tst.w	r2, #3
{
 80022c6:	4605      	mov	r5, r0
 80022c8:	460e      	mov	r6, r1
 80022ca:	461c      	mov	r4, r3
 80022cc:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80022ce:	d028      	beq.n	8002322 <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	f002 0203 	and.w	r2, r2, #3
 80022d6:	4282      	cmp	r2, r0
 80022d8:	d13a      	bne.n	8002350 <RCCEx_PLLSAI2_Config+0x94>
       ||
 80022da:	2a00      	cmp	r2, #0
 80022dc:	d038      	beq.n	8002350 <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80022de:	68db      	ldr	r3, [r3, #12]
       ||
 80022e0:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80022e2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80022e6:	3301      	adds	r3, #1
       ||
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d131      	bne.n	8002350 <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80022ec:	6823      	ldr	r3, [r4, #0]
 80022ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022f2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022f4:	f7fe fd44 	bl	8000d80 <HAL_GetTick>
 80022f8:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80022fa:	6823      	ldr	r3, [r4, #0]
 80022fc:	009a      	lsls	r2, r3, #2
 80022fe:	d430      	bmi.n	8002362 <RCCEx_PLLSAI2_Config+0xa6>
 8002300:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002302:	2e00      	cmp	r6, #0
 8002304:	d034      	beq.n	8002370 <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002306:	6963      	ldr	r3, [r4, #20]
 8002308:	6929      	ldr	r1, [r5, #16]
 800230a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800230e:	0849      	lsrs	r1, r1, #1
 8002310:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002314:	3901      	subs	r1, #1
 8002316:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800231a:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 800231e:	6163      	str	r3, [r4, #20]
 8002320:	e032      	b.n	8002388 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 8002322:	2802      	cmp	r0, #2
 8002324:	d010      	beq.n	8002348 <RCCEx_PLLSAI2_Config+0x8c>
 8002326:	2803      	cmp	r0, #3
 8002328:	d014      	beq.n	8002354 <RCCEx_PLLSAI2_Config+0x98>
 800232a:	2801      	cmp	r0, #1
 800232c:	d110      	bne.n	8002350 <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	079f      	lsls	r7, r3, #30
 8002332:	d538      	bpl.n	80023a6 <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002334:	68e3      	ldr	r3, [r4, #12]
 8002336:	686a      	ldr	r2, [r5, #4]
 8002338:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 800233c:	3a01      	subs	r2, #1
 800233e:	4318      	orrs	r0, r3
 8002340:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8002344:	60e0      	str	r0, [r4, #12]
 8002346:	e7d1      	b.n	80022ec <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800234e:	d1f1      	bne.n	8002334 <RCCEx_PLLSAI2_Config+0x78>
 8002350:	2001      	movs	r0, #1
 8002352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	0391      	lsls	r1, r2, #14
 8002358:	d4ec      	bmi.n	8002334 <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002360:	e7f5      	b.n	800234e <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002362:	f7fe fd0d 	bl	8000d80 <HAL_GetTick>
 8002366:	1bc0      	subs	r0, r0, r7
 8002368:	2802      	cmp	r0, #2
 800236a:	d9c6      	bls.n	80022fa <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 800236c:	2003      	movs	r0, #3
 800236e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002370:	6962      	ldr	r2, [r4, #20]
 8002372:	68eb      	ldr	r3, [r5, #12]
 8002374:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8002378:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800237c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002380:	091b      	lsrs	r3, r3, #4
 8002382:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8002386:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002388:	6823      	ldr	r3, [r4, #0]
 800238a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800238e:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002390:	f7fe fcf6 	bl	8000d80 <HAL_GetTick>
 8002394:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002396:	6823      	ldr	r3, [r4, #0]
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	d505      	bpl.n	80023a8 <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800239c:	6963      	ldr	r3, [r4, #20]
 800239e:	696a      	ldr	r2, [r5, #20]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	6163      	str	r3, [r4, #20]
 80023a4:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 80023a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80023a8:	f7fe fcea 	bl	8000d80 <HAL_GetTick>
 80023ac:	1b80      	subs	r0, r0, r6
 80023ae:	2802      	cmp	r0, #2
 80023b0:	d9f1      	bls.n	8002396 <RCCEx_PLLSAI2_Config+0xda>
 80023b2:	e7db      	b.n	800236c <RCCEx_PLLSAI2_Config+0xb0>
 80023b4:	40021000 	.word	0x40021000

080023b8 <HAL_RCCEx_PeriphCLKConfig>:
{
 80023b8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80023bc:	6806      	ldr	r6, [r0, #0]
 80023be:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 80023c2:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80023c4:	d024      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 80023c6:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80023c8:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80023cc:	d02c      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x70>
 80023ce:	d802      	bhi.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80023d0:	b1c1      	cbz	r1, 8002404 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 80023d2:	2601      	movs	r6, #1
 80023d4:	e01c      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 80023d6:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80023da:	d00d      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80023dc:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80023e0:	d1f7      	bne.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023e2:	4a4d      	ldr	r2, [pc, #308]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023e4:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80023e6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80023ea:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80023ee:	430b      	orrs	r3, r1
 80023f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80023f4:	2600      	movs	r6, #0
 80023f6:	e00b      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023f8:	4a47      	ldr	r2, [pc, #284]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023fa:	68d3      	ldr	r3, [r2, #12]
 80023fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002400:	60d3      	str	r3, [r2, #12]
      break;
 8002402:	e7ee      	b.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002404:	3004      	adds	r0, #4
 8002406:	f7ff fecb 	bl	80021a0 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800240a:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800240c:	2800      	cmp	r0, #0
 800240e:	d0e8      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002410:	6823      	ldr	r3, [r4, #0]
 8002412:	04d8      	lsls	r0, r3, #19
 8002414:	d506      	bpl.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002416:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002418:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 800241c:	d074      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x150>
 800241e:	d808      	bhi.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002420:	b1a9      	cbz	r1, 800244e <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 8002422:	2601      	movs	r6, #1
 8002424:	4635      	mov	r5, r6
 8002426:	e021      	b.n	800246c <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002428:	2100      	movs	r1, #0
 800242a:	3020      	adds	r0, #32
 800242c:	f7ff ff46 	bl	80022bc <RCCEx_PLLSAI2_Config>
 8002430:	e7eb      	b.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002432:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8002436:	d004      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8002438:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 800243c:	d1f1      	bne.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800243e:	4635      	mov	r5, r6
 8002440:	e009      	b.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002442:	4a35      	ldr	r2, [pc, #212]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002444:	68d3      	ldr	r3, [r2, #12]
 8002446:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800244a:	60d3      	str	r3, [r2, #12]
 800244c:	e7f7      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800244e:	1d20      	adds	r0, r4, #4
 8002450:	f7ff fea6 	bl	80021a0 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002454:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002456:	2d00      	cmp	r5, #0
 8002458:	d15c      	bne.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800245a:	4a2f      	ldr	r2, [pc, #188]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800245c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800245e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002462:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002466:	430b      	orrs	r3, r1
 8002468:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800246c:	6823      	ldr	r3, [r4, #0]
 800246e:	0399      	lsls	r1, r3, #14
 8002470:	f140 814f 	bpl.w	8002712 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002474:	4f28      	ldr	r7, [pc, #160]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002476:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002478:	00da      	lsls	r2, r3, #3
 800247a:	f140 8176 	bpl.w	800276a <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 800247e:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002482:	f8df 9098 	ldr.w	r9, [pc, #152]	; 800251c <HAL_RCCEx_PeriphCLKConfig+0x164>
 8002486:	f8d9 3000 	ldr.w	r3, [r9]
 800248a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800248e:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8002492:	f7fe fc75 	bl	8000d80 <HAL_GetTick>
 8002496:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002498:	f8d9 3000 	ldr.w	r3, [r9]
 800249c:	05db      	lsls	r3, r3, #23
 800249e:	d53f      	bpl.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 80024a0:	2d00      	cmp	r5, #0
 80024a2:	d144      	bne.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024a8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80024ac:	d015      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x122>
 80024ae:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d011      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 80024ba:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80024be:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80024c2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024c6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80024d2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80024d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024da:	07d8      	lsls	r0, r3, #31
 80024dc:	d509      	bpl.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 80024de:	f7fe fc4f 	bl	8000d80 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024e2:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80024e6:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024ec:	0799      	lsls	r1, r3, #30
 80024ee:	f140 8109 	bpl.w	8002704 <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024f6:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80024fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024fe:	4313      	orrs	r3, r2
 8002500:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002504:	4635      	mov	r5, r6
 8002506:	e012      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002508:	2100      	movs	r1, #0
 800250a:	f104 0020 	add.w	r0, r4, #32
 800250e:	f7ff fed5 	bl	80022bc <RCCEx_PLLSAI2_Config>
 8002512:	e79f      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8002514:	462e      	mov	r6, r5
 8002516:	e7a9      	b.n	800246c <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8002518:	40021000 	.word	0x40021000
 800251c:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002520:	f7fe fc2e 	bl	8000d80 <HAL_GetTick>
 8002524:	eba0 000a 	sub.w	r0, r0, sl
 8002528:	2802      	cmp	r0, #2
 800252a:	d9b5      	bls.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 800252c:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 800252e:	f1b8 0f00 	cmp.w	r8, #0
 8002532:	d003      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002534:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002536:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800253a:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800253c:	6823      	ldr	r3, [r4, #0]
 800253e:	07da      	lsls	r2, r3, #31
 8002540:	d508      	bpl.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002542:	4990      	ldr	r1, [pc, #576]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002544:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002546:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800254a:	f022 0203 	bic.w	r2, r2, #3
 800254e:	4302      	orrs	r2, r0
 8002550:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002554:	079f      	lsls	r7, r3, #30
 8002556:	d508      	bpl.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002558:	498a      	ldr	r1, [pc, #552]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800255a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800255c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002560:	f022 020c 	bic.w	r2, r2, #12
 8002564:	4302      	orrs	r2, r0
 8002566:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800256a:	075e      	lsls	r6, r3, #29
 800256c:	d508      	bpl.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800256e:	4985      	ldr	r1, [pc, #532]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002570:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002572:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002576:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800257a:	4302      	orrs	r2, r0
 800257c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002580:	0718      	lsls	r0, r3, #28
 8002582:	d508      	bpl.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002584:	497f      	ldr	r1, [pc, #508]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002586:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002588:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800258c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002590:	4302      	orrs	r2, r0
 8002592:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002596:	06d9      	lsls	r1, r3, #27
 8002598:	d508      	bpl.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800259a:	497a      	ldr	r1, [pc, #488]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800259c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800259e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80025a2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80025a6:	4302      	orrs	r2, r0
 80025a8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025ac:	069a      	lsls	r2, r3, #26
 80025ae:	d508      	bpl.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025b0:	4974      	ldr	r1, [pc, #464]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80025b2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80025b4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80025b8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80025bc:	4302      	orrs	r2, r0
 80025be:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025c2:	059f      	lsls	r7, r3, #22
 80025c4:	d508      	bpl.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025c6:	496f      	ldr	r1, [pc, #444]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80025c8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80025ca:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80025ce:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80025d2:	4302      	orrs	r2, r0
 80025d4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025d8:	055e      	lsls	r6, r3, #21
 80025da:	d508      	bpl.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025dc:	4969      	ldr	r1, [pc, #420]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80025de:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80025e0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80025e4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80025e8:	4302      	orrs	r2, r0
 80025ea:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025ee:	0658      	lsls	r0, r3, #25
 80025f0:	d508      	bpl.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025f2:	4964      	ldr	r1, [pc, #400]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80025f4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80025f6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80025fa:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80025fe:	4302      	orrs	r2, r0
 8002600:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002604:	0619      	lsls	r1, r3, #24
 8002606:	d508      	bpl.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002608:	495e      	ldr	r1, [pc, #376]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800260a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800260c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002610:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002614:	4302      	orrs	r2, r0
 8002616:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800261a:	05da      	lsls	r2, r3, #23
 800261c:	d508      	bpl.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800261e:	4959      	ldr	r1, [pc, #356]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002620:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002622:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002626:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800262a:	4302      	orrs	r2, r0
 800262c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002630:	049b      	lsls	r3, r3, #18
 8002632:	d50f      	bpl.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002634:	4a53      	ldr	r2, [pc, #332]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002636:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002638:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800263c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002640:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002642:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002646:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800264a:	d164      	bne.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800264c:	68d3      	ldr	r3, [r2, #12]
 800264e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002652:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002654:	6823      	ldr	r3, [r4, #0]
 8002656:	031f      	lsls	r7, r3, #12
 8002658:	d50f      	bpl.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800265a:	4a4a      	ldr	r2, [pc, #296]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800265c:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800265e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002662:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002666:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002668:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800266c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002670:	d15c      	bne.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002672:	68d3      	ldr	r3, [r2, #12]
 8002674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002678:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800267a:	6823      	ldr	r3, [r4, #0]
 800267c:	035e      	lsls	r6, r3, #13
 800267e:	d50f      	bpl.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002680:	4a40      	ldr	r2, [pc, #256]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002682:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002684:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002688:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800268c:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800268e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002692:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002696:	d154      	bne.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002698:	68d3      	ldr	r3, [r2, #12]
 800269a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800269e:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026a0:	6823      	ldr	r3, [r4, #0]
 80026a2:	0458      	lsls	r0, r3, #17
 80026a4:	d512      	bpl.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026a6:	4937      	ldr	r1, [pc, #220]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80026a8:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80026aa:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80026ae:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80026b2:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80026b4:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80026bc:	d14c      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80026be:	2102      	movs	r1, #2
 80026c0:	1d20      	adds	r0, r4, #4
 80026c2:	f7ff fd6d 	bl	80021a0 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80026c6:	2800      	cmp	r0, #0
 80026c8:	bf18      	it	ne
 80026ca:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80026cc:	6822      	ldr	r2, [r4, #0]
 80026ce:	0411      	lsls	r1, r2, #16
 80026d0:	d508      	bpl.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80026d2:	492c      	ldr	r1, [pc, #176]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80026d4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80026d6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80026da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026de:	4303      	orrs	r3, r0
 80026e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80026e4:	03d3      	lsls	r3, r2, #15
 80026e6:	d509      	bpl.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80026e8:	4a26      	ldr	r2, [pc, #152]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80026ea:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80026ee:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80026f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026f6:	430b      	orrs	r3, r1
 80026f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80026fc:	4628      	mov	r0, r5
 80026fe:	b002      	add	sp, #8
 8002700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002704:	f7fe fb3c 	bl	8000d80 <HAL_GetTick>
 8002708:	1b40      	subs	r0, r0, r5
 800270a:	4548      	cmp	r0, r9
 800270c:	f67f aeec 	bls.w	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8002710:	e70c      	b.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x174>
 8002712:	4635      	mov	r5, r6
 8002714:	e712      	b.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002716:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800271a:	d19b      	bne.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800271c:	2101      	movs	r1, #1
 800271e:	1d20      	adds	r0, r4, #4
 8002720:	f7ff fd3e 	bl	80021a0 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8002724:	2800      	cmp	r0, #0
 8002726:	bf18      	it	ne
 8002728:	4605      	movne	r5, r0
 800272a:	e793      	b.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800272c:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002730:	d1a3      	bne.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002732:	2101      	movs	r1, #1
 8002734:	1d20      	adds	r0, r4, #4
 8002736:	f7ff fd33 	bl	80021a0 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800273a:	2800      	cmp	r0, #0
 800273c:	bf18      	it	ne
 800273e:	4605      	movne	r5, r0
 8002740:	e79b      	b.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002742:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002746:	d1ab      	bne.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002748:	2101      	movs	r1, #1
 800274a:	1d20      	adds	r0, r4, #4
 800274c:	f7ff fd28 	bl	80021a0 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002750:	2800      	cmp	r0, #0
 8002752:	bf18      	it	ne
 8002754:	4605      	movne	r5, r0
 8002756:	e7a3      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002758:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800275c:	d1b6      	bne.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800275e:	2102      	movs	r1, #2
 8002760:	f104 0020 	add.w	r0, r4, #32
 8002764:	f7ff fdaa 	bl	80022bc <RCCEx_PLLSAI2_Config>
 8002768:	e7ad      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800276a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800276c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002770:	65bb      	str	r3, [r7, #88]	; 0x58
 8002772:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002778:	9301      	str	r3, [sp, #4]
 800277a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800277c:	f04f 0801 	mov.w	r8, #1
 8002780:	e67f      	b.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0xca>
 8002782:	bf00      	nop
 8002784:	40021000 	.word	0x40021000

08002788 <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8002788:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800278a:	69c1      	ldr	r1, [r0, #28]
{
 800278c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800278e:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002790:	6883      	ldr	r3, [r0, #8]
 8002792:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002794:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002796:	4303      	orrs	r3, r0
 8002798:	6960      	ldr	r0, [r4, #20]
 800279a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800279c:	48ba      	ldr	r0, [pc, #744]	; (8002a88 <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800279e:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027a0:	4028      	ands	r0, r5
 80027a2:	4303      	orrs	r3, r0
 80027a4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027a6:	6853      	ldr	r3, [r2, #4]
 80027a8:	68e0      	ldr	r0, [r4, #12]
 80027aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027ae:	4303      	orrs	r3, r0
 80027b0:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80027b2:	4bb6      	ldr	r3, [pc, #728]	; (8002a8c <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80027b4:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80027b6:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 80027b8:	bf1c      	itt	ne
 80027ba:	6a23      	ldrne	r3, [r4, #32]
 80027bc:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80027be:	6893      	ldr	r3, [r2, #8]
 80027c0:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80027c4:	4303      	orrs	r3, r0
 80027c6:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027c8:	4bb1      	ldr	r3, [pc, #708]	; (8002a90 <UART_SetConfig+0x308>)
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d119      	bne.n	8002802 <UART_SetConfig+0x7a>
 80027ce:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80027d2:	4ab0      	ldr	r2, [pc, #704]	; (8002a94 <UART_SetConfig+0x30c>)
 80027d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d8:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027dc:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80027e0:	5cd3      	ldrb	r3, [r2, r3]
 80027e2:	f040 8138 	bne.w	8002a56 <UART_SetConfig+0x2ce>
  {
    switch (clocksource)
 80027e6:	2b08      	cmp	r3, #8
 80027e8:	f200 808f 	bhi.w	800290a <UART_SetConfig+0x182>
 80027ec:	e8df f013 	tbh	[pc, r3, lsl #1]
 80027f0:	00ca011a 	.word	0x00ca011a
 80027f4:	008d00f9 	.word	0x008d00f9
 80027f8:	008d0114 	.word	0x008d0114
 80027fc:	008d008d 	.word	0x008d008d
 8002800:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002802:	4ba5      	ldr	r3, [pc, #660]	; (8002a98 <UART_SetConfig+0x310>)
 8002804:	429a      	cmp	r2, r3
 8002806:	d107      	bne.n	8002818 <UART_SetConfig+0x90>
 8002808:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 800280c:	4aa3      	ldr	r2, [pc, #652]	; (8002a9c <UART_SetConfig+0x314>)
 800280e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002812:	f003 030c 	and.w	r3, r3, #12
 8002816:	e7e1      	b.n	80027dc <UART_SetConfig+0x54>
 8002818:	4ba1      	ldr	r3, [pc, #644]	; (8002aa0 <UART_SetConfig+0x318>)
 800281a:	429a      	cmp	r2, r3
 800281c:	d123      	bne.n	8002866 <UART_SetConfig+0xde>
 800281e:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8002822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002826:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800282a:	2b10      	cmp	r3, #16
 800282c:	f000 80f1 	beq.w	8002a12 <UART_SetConfig+0x28a>
 8002830:	d80b      	bhi.n	800284a <UART_SetConfig+0xc2>
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 80f3 	beq.w	8002a1e <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002838:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800283c:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002840:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002844:	f000 80f8 	beq.w	8002a38 <UART_SetConfig+0x2b0>
 8002848:	e0a8      	b.n	800299c <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800284a:	2b20      	cmp	r3, #32
 800284c:	f000 80c6 	beq.w	80029dc <UART_SetConfig+0x254>
 8002850:	2b30      	cmp	r3, #48	; 0x30
 8002852:	d1f1      	bne.n	8002838 <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002854:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002858:	f040 80b8 	bne.w	80029cc <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800285c:	6860      	ldr	r0, [r4, #4]
 800285e:	0843      	lsrs	r3, r0, #1
 8002860:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002864:	e0c3      	b.n	80029ee <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002866:	4b8f      	ldr	r3, [pc, #572]	; (8002aa4 <UART_SetConfig+0x31c>)
 8002868:	429a      	cmp	r2, r3
 800286a:	d11e      	bne.n	80028aa <UART_SetConfig+0x122>
 800286c:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8002870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002874:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002878:	2b40      	cmp	r3, #64	; 0x40
 800287a:	f000 80bb 	beq.w	80029f4 <UART_SetConfig+0x26c>
 800287e:	d80a      	bhi.n	8002896 <UART_SetConfig+0x10e>
 8002880:	b97b      	cbnz	r3, 80028a2 <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002882:	4b82      	ldr	r3, [pc, #520]	; (8002a8c <UART_SetConfig+0x304>)
 8002884:	429a      	cmp	r2, r3
 8002886:	f040 80ca 	bne.w	8002a1e <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800288a:	f7ff fc65 	bl	8002158 <HAL_RCC_GetPCLK1Freq>
        break;
 800288e:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8002890:	bbb0      	cbnz	r0, 8002900 <UART_SetConfig+0x178>
 8002892:	4602      	mov	r2, r0
 8002894:	e03a      	b.n	800290c <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002896:	2b80      	cmp	r3, #128	; 0x80
 8002898:	f000 809d 	beq.w	80029d6 <UART_SetConfig+0x24e>
 800289c:	2bc0      	cmp	r3, #192	; 0xc0
 800289e:	f000 80b0 	beq.w	8002a02 <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 80028a2:	4b7a      	ldr	r3, [pc, #488]	; (8002a8c <UART_SetConfig+0x304>)
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d1c7      	bne.n	8002838 <UART_SetConfig+0xb0>
 80028a8:	e02f      	b.n	800290a <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028aa:	4b7f      	ldr	r3, [pc, #508]	; (8002aa8 <UART_SetConfig+0x320>)
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d111      	bne.n	80028d4 <UART_SetConfig+0x14c>
 80028b0:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 80028b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028c0:	f000 8098 	beq.w	80029f4 <UART_SetConfig+0x26c>
 80028c4:	d9dc      	bls.n	8002880 <UART_SetConfig+0xf8>
 80028c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028ca:	f000 8084 	beq.w	80029d6 <UART_SetConfig+0x24e>
 80028ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028d2:	e7e4      	b.n	800289e <UART_SetConfig+0x116>
 80028d4:	4b6d      	ldr	r3, [pc, #436]	; (8002a8c <UART_SetConfig+0x304>)
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d1ae      	bne.n	8002838 <UART_SetConfig+0xb0>
 80028da:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 80028de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80028e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ea:	f000 8083 	beq.w	80029f4 <UART_SetConfig+0x26c>
 80028ee:	d9c7      	bls.n	8002880 <UART_SetConfig+0xf8>
 80028f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028f4:	d06f      	beq.n	80029d6 <UART_SetConfig+0x24e>
 80028f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80028fa:	e7d0      	b.n	800289e <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80028fc:	486b      	ldr	r0, [pc, #428]	; (8002aac <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 80028fe:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8002900:	6862      	ldr	r2, [r4, #4]
 8002902:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8002906:	4281      	cmp	r1, r0
 8002908:	d905      	bls.n	8002916 <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 800290a:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800290c:	2300      	movs	r3, #0
 800290e:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8002910:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8002912:	4610      	mov	r0, r2
 8002914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8002916:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800291a:	d8f6      	bhi.n	800290a <UART_SetConfig+0x182>
        switch (clocksource)
 800291c:	2b08      	cmp	r3, #8
 800291e:	d82e      	bhi.n	800297e <UART_SetConfig+0x1f6>
 8002920:	e8df f003 	tbb	[pc, r3]
 8002924:	2d1c2d05 	.word	0x2d1c2d05
 8002928:	2d2d2d24 	.word	0x2d2d2d24
 800292c:	27          	.byte	0x27
 800292d:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800292e:	f7ff fc13 	bl	8002158 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002932:	6862      	ldr	r2, [r4, #4]
 8002934:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002938:	0856      	lsrs	r6, r2, #1
 800293a:	2700      	movs	r7, #0
 800293c:	fbe1 6700 	umlal	r6, r7, r1, r0
 8002940:	2300      	movs	r3, #0
 8002942:	4630      	mov	r0, r6
 8002944:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002946:	f7fe f85d 	bl	8000a04 <__aeabi_uldivmod>
            break;
 800294a:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800294c:	4b58      	ldr	r3, [pc, #352]	; (8002ab0 <UART_SetConfig+0x328>)
 800294e:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8002952:	4299      	cmp	r1, r3
 8002954:	d8d9      	bhi.n	800290a <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 8002956:	6823      	ldr	r3, [r4, #0]
 8002958:	60d8      	str	r0, [r3, #12]
 800295a:	e7d7      	b.n	800290c <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800295c:	4855      	ldr	r0, [pc, #340]	; (8002ab4 <UART_SetConfig+0x32c>)
 800295e:	0855      	lsrs	r5, r2, #1
 8002960:	2300      	movs	r3, #0
 8002962:	2100      	movs	r1, #0
 8002964:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002966:	f141 0100 	adc.w	r1, r1, #0
 800296a:	e7ec      	b.n	8002946 <UART_SetConfig+0x1be>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800296c:	f7ff f8e8 	bl	8001b40 <HAL_RCC_GetSysClockFreq>
 8002970:	e7df      	b.n	8002932 <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002972:	0850      	lsrs	r0, r2, #1
 8002974:	2100      	movs	r1, #0
 8002976:	2300      	movs	r3, #0
 8002978:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 800297c:	e7f3      	b.n	8002966 <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 800297e:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002980:	2000      	movs	r0, #0
 8002982:	e7e3      	b.n	800294c <UART_SetConfig+0x1c4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002984:	f7ff fbfa 	bl	800217c <HAL_RCC_GetPCLK2Freq>
 8002988:	e04e      	b.n	8002a28 <UART_SetConfig+0x2a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800298a:	f7ff fbe5 	bl	8002158 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800298e:	6862      	ldr	r2, [r4, #4]
 8002990:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8002994:	fbb3 f3f2 	udiv	r3, r3, r2
 8002998:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800299a:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800299c:	f1a3 0010 	sub.w	r0, r3, #16
 80029a0:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80029a4:	4288      	cmp	r0, r1
 80029a6:	d8b0      	bhi.n	800290a <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 80029a8:	6821      	ldr	r1, [r4, #0]
 80029aa:	60cb      	str	r3, [r1, #12]
 80029ac:	e7ae      	b.n	800290c <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80029ae:	f7ff fbe5 	bl	800217c <HAL_RCC_GetPCLK2Freq>
 80029b2:	e7ec      	b.n	800298e <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80029b4:	6860      	ldr	r0, [r4, #4]
 80029b6:	0843      	lsrs	r3, r0, #1
 80029b8:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80029bc:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80029c0:	fbb3 f3f0 	udiv	r3, r3, r0
 80029c4:	e7e8      	b.n	8002998 <UART_SetConfig+0x210>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80029c6:	f7ff f8bb 	bl	8001b40 <HAL_RCC_GetSysClockFreq>
 80029ca:	e7e0      	b.n	800298e <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80029cc:	6860      	ldr	r0, [r4, #4]
 80029ce:	0843      	lsrs	r3, r0, #1
 80029d0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80029d4:	e7f4      	b.n	80029c0 <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 80029d6:	4b2d      	ldr	r3, [pc, #180]	; (8002a8c <UART_SetConfig+0x304>)
 80029d8:	429a      	cmp	r2, r3
 80029da:	d08f      	beq.n	80028fc <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029dc:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80029e0:	d1e8      	bne.n	80029b4 <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80029e2:	6860      	ldr	r0, [r4, #4]
 80029e4:	0843      	lsrs	r3, r0, #1
 80029e6:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80029ea:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80029ee:	fbb3 f3f0 	udiv	r3, r3, r0
 80029f2:	e01f      	b.n	8002a34 <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 80029f4:	4b25      	ldr	r3, [pc, #148]	; (8002a8c <UART_SetConfig+0x304>)
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d10b      	bne.n	8002a12 <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80029fa:	f7ff f8a1 	bl	8001b40 <HAL_RCC_GetSysClockFreq>
        break;
 80029fe:	2304      	movs	r3, #4
 8002a00:	e746      	b.n	8002890 <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a02:	4b22      	ldr	r3, [pc, #136]	; (8002a8c <UART_SetConfig+0x304>)
 8002a04:	429a      	cmp	r2, r3
 8002a06:	f47f af25 	bne.w	8002854 <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002a0a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a0e:	2308      	movs	r3, #8
 8002a10:	e776      	b.n	8002900 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a12:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002a16:	d1d6      	bne.n	80029c6 <UART_SetConfig+0x23e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002a18:	f7ff f892 	bl	8001b40 <HAL_RCC_GetSysClockFreq>
 8002a1c:	e004      	b.n	8002a28 <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a1e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002a22:	d1b2      	bne.n	800298a <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002a24:	f7ff fb98 	bl	8002158 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002a28:	6861      	ldr	r1, [r4, #4]
 8002a2a:	084a      	lsrs	r2, r1, #1
 8002a2c:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8002a30:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a34:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a36:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a38:	f1a3 0010 	sub.w	r0, r3, #16
 8002a3c:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8002a40:	4288      	cmp	r0, r1
 8002a42:	f63f af62 	bhi.w	800290a <UART_SetConfig+0x182>
      brrtemp = usartdiv & 0xFFF0U;
 8002a46:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8002a4a:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a4c:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8002a50:	430b      	orrs	r3, r1
 8002a52:	60c3      	str	r3, [r0, #12]
 8002a54:	e75a      	b.n	800290c <UART_SetConfig+0x184>
    switch (clocksource)
 8002a56:	2b08      	cmp	r3, #8
 8002a58:	f63f af57 	bhi.w	800290a <UART_SetConfig+0x182>
 8002a5c:	a201      	add	r2, pc, #4	; (adr r2, 8002a64 <UART_SetConfig+0x2dc>)
 8002a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a62:	bf00      	nop
 8002a64:	0800298b 	.word	0x0800298b
 8002a68:	080029af 	.word	0x080029af
 8002a6c:	080029b5 	.word	0x080029b5
 8002a70:	0800290b 	.word	0x0800290b
 8002a74:	080029c7 	.word	0x080029c7
 8002a78:	0800290b 	.word	0x0800290b
 8002a7c:	0800290b 	.word	0x0800290b
 8002a80:	0800290b 	.word	0x0800290b
 8002a84:	080029cd 	.word	0x080029cd
 8002a88:	efff69f3 	.word	0xefff69f3
 8002a8c:	40008000 	.word	0x40008000
 8002a90:	40013800 	.word	0x40013800
 8002a94:	0800499c 	.word	0x0800499c
 8002a98:	40004400 	.word	0x40004400
 8002a9c:	080049a0 	.word	0x080049a0
 8002aa0:	40004800 	.word	0x40004800
 8002aa4:	40004c00 	.word	0x40004c00
 8002aa8:	40005000 	.word	0x40005000
 8002aac:	00f42400 	.word	0x00f42400
 8002ab0:	000ffcff 	.word	0x000ffcff
 8002ab4:	f4240000 	.word	0xf4240000

08002ab8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ab8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002aba:	07da      	lsls	r2, r3, #31
{
 8002abc:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002abe:	d506      	bpl.n	8002ace <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ac0:	6801      	ldr	r1, [r0, #0]
 8002ac2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002ac4:	684a      	ldr	r2, [r1, #4]
 8002ac6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002aca:	4322      	orrs	r2, r4
 8002acc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ace:	079c      	lsls	r4, r3, #30
 8002ad0:	d506      	bpl.n	8002ae0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ad2:	6801      	ldr	r1, [r0, #0]
 8002ad4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002ad6:	684a      	ldr	r2, [r1, #4]
 8002ad8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002adc:	4322      	orrs	r2, r4
 8002ade:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ae0:	0759      	lsls	r1, r3, #29
 8002ae2:	d506      	bpl.n	8002af2 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ae4:	6801      	ldr	r1, [r0, #0]
 8002ae6:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002ae8:	684a      	ldr	r2, [r1, #4]
 8002aea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002aee:	4322      	orrs	r2, r4
 8002af0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002af2:	071a      	lsls	r2, r3, #28
 8002af4:	d506      	bpl.n	8002b04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002af6:	6801      	ldr	r1, [r0, #0]
 8002af8:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002afa:	684a      	ldr	r2, [r1, #4]
 8002afc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b00:	4322      	orrs	r2, r4
 8002b02:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b04:	06dc      	lsls	r4, r3, #27
 8002b06:	d506      	bpl.n	8002b16 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b08:	6801      	ldr	r1, [r0, #0]
 8002b0a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002b0c:	688a      	ldr	r2, [r1, #8]
 8002b0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b12:	4322      	orrs	r2, r4
 8002b14:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b16:	0699      	lsls	r1, r3, #26
 8002b18:	d506      	bpl.n	8002b28 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b1a:	6801      	ldr	r1, [r0, #0]
 8002b1c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002b1e:	688a      	ldr	r2, [r1, #8]
 8002b20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b24:	4322      	orrs	r2, r4
 8002b26:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b28:	065a      	lsls	r2, r3, #25
 8002b2a:	d50f      	bpl.n	8002b4c <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b2c:	6801      	ldr	r1, [r0, #0]
 8002b2e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002b30:	684a      	ldr	r2, [r1, #4]
 8002b32:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002b36:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b38:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b3c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b3e:	d105      	bne.n	8002b4c <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b40:	684a      	ldr	r2, [r1, #4]
 8002b42:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002b44:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002b48:	4322      	orrs	r2, r4
 8002b4a:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b4c:	061b      	lsls	r3, r3, #24
 8002b4e:	d506      	bpl.n	8002b5e <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b50:	6802      	ldr	r2, [r0, #0]
 8002b52:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002b54:	6853      	ldr	r3, [r2, #4]
 8002b56:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002b5a:	430b      	orrs	r3, r1
 8002b5c:	6053      	str	r3, [r2, #4]
 8002b5e:	bd10      	pop	{r4, pc}

08002b60 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b64:	9d06      	ldr	r5, [sp, #24]
 8002b66:	4604      	mov	r4, r0
 8002b68:	460f      	mov	r7, r1
 8002b6a:	4616      	mov	r6, r2
 8002b6c:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b6e:	6821      	ldr	r1, [r4, #0]
 8002b70:	69ca      	ldr	r2, [r1, #28]
 8002b72:	ea37 0302 	bics.w	r3, r7, r2
 8002b76:	bf0c      	ite	eq
 8002b78:	2201      	moveq	r2, #1
 8002b7a:	2200      	movne	r2, #0
 8002b7c:	42b2      	cmp	r2, r6
 8002b7e:	d002      	beq.n	8002b86 <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002b80:	2000      	movs	r0, #0
}
 8002b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002b86:	1c6b      	adds	r3, r5, #1
 8002b88:	d0f2      	beq.n	8002b70 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b8a:	b99d      	cbnz	r5, 8002bb4 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b8c:	6823      	ldr	r3, [r4, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002b94:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	f022 0201 	bic.w	r2, r2, #1
 8002b9c:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002b9e:	2320      	movs	r3, #32
 8002ba0:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8002ba4:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8002ba8:	2300      	movs	r3, #0
 8002baa:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8002bae:	2003      	movs	r0, #3
 8002bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002bb4:	f7fe f8e4 	bl	8000d80 <HAL_GetTick>
 8002bb8:	eba0 0008 	sub.w	r0, r0, r8
 8002bbc:	4285      	cmp	r5, r0
 8002bbe:	d2d6      	bcs.n	8002b6e <UART_WaitOnFlagUntilTimeout+0xe>
 8002bc0:	e7e4      	b.n	8002b8c <UART_WaitOnFlagUntilTimeout+0x2c>

08002bc2 <UART_CheckIdleState>:
{
 8002bc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002bc4:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bc6:	2600      	movs	r6, #0
 8002bc8:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 8002bca:	f7fe f8d9 	bl	8000d80 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002bce:	6823      	ldr	r3, [r4, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8002bd4:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002bd6:	d417      	bmi.n	8002c08 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002bd8:	6823      	ldr	r3, [r4, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	075b      	lsls	r3, r3, #29
 8002bde:	d50a      	bpl.n	8002bf6 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002be0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002be4:	9300      	str	r3, [sp, #0]
 8002be6:	2200      	movs	r2, #0
 8002be8:	462b      	mov	r3, r5
 8002bea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002bee:	4620      	mov	r0, r4
 8002bf0:	f7ff ffb6 	bl	8002b60 <UART_WaitOnFlagUntilTimeout>
 8002bf4:	b9a0      	cbnz	r0, 8002c20 <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 8002bf6:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002bf8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002bfa:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 8002bfe:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8002c02:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 8002c06:	e00c      	b.n	8002c22 <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	4632      	mov	r2, r6
 8002c10:	4603      	mov	r3, r0
 8002c12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002c16:	4620      	mov	r0, r4
 8002c18:	f7ff ffa2 	bl	8002b60 <UART_WaitOnFlagUntilTimeout>
 8002c1c:	2800      	cmp	r0, #0
 8002c1e:	d0db      	beq.n	8002bd8 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002c20:	2003      	movs	r0, #3
}
 8002c22:	b002      	add	sp, #8
 8002c24:	bd70      	pop	{r4, r5, r6, pc}

08002c26 <HAL_UART_Init>:
{
 8002c26:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002c28:	4604      	mov	r4, r0
 8002c2a:	b360      	cbz	r0, 8002c86 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002c2c:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8002c30:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c34:	b91b      	cbnz	r3, 8002c3e <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002c36:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8002c3a:	f000 feb9 	bl	80039b0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002c3e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002c40:	2324      	movs	r3, #36	; 0x24
 8002c42:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8002c46:	6813      	ldr	r3, [r2, #0]
 8002c48:	f023 0301 	bic.w	r3, r3, #1
 8002c4c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c4e:	4620      	mov	r0, r4
 8002c50:	f7ff fd9a 	bl	8002788 <UART_SetConfig>
 8002c54:	2801      	cmp	r0, #1
 8002c56:	d016      	beq.n	8002c86 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c5a:	b113      	cbz	r3, 8002c62 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8002c5c:	4620      	mov	r0, r4
 8002c5e:	f7ff ff2b 	bl	8002ab8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c62:	6823      	ldr	r3, [r4, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c6c:	689a      	ldr	r2, [r3, #8]
 8002c6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c72:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002c7a:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002c7c:	601a      	str	r2, [r3, #0]
}
 8002c7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8002c82:	f7ff bf9e 	b.w	8002bc2 <UART_CheckIdleState>
}
 8002c86:	2001      	movs	r0, #1
 8002c88:	bd10      	pop	{r4, pc}
	...

08002c8c <ES2_writeByte>:

#define ES2_DELAY 100

// Write one byte via TWI
void ES2_writeByte(uint8_t slaveAddress, uint8_t registerAddress, uint8_t data)
{
 8002c8c:	b530      	push	{r4, r5, lr}
 8002c8e:	b087      	sub	sp, #28
 8002c90:	ac06      	add	r4, sp, #24
	HAL_I2C_Mem_Write(&hi2c1, slaveAddress << 1, registerAddress, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8002c92:	2301      	movs	r3, #1
{
 8002c94:	f804 2d01 	strb.w	r2, [r4, #-1]!
	HAL_I2C_Mem_Write(&hi2c1, slaveAddress << 1, registerAddress, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8002c98:	2564      	movs	r5, #100	; 0x64
 8002c9a:	460a      	mov	r2, r1
 8002c9c:	9301      	str	r3, [sp, #4]
 8002c9e:	fa00 f103 	lsl.w	r1, r0, r3
 8002ca2:	9502      	str	r5, [sp, #8]
 8002ca4:	9400      	str	r4, [sp, #0]
 8002ca6:	4804      	ldr	r0, [pc, #16]	; (8002cb8 <ES2_writeByte+0x2c>)
 8002ca8:	f7fe fcb6 	bl	8001618 <HAL_I2C_Mem_Write>

	HAL_Delay(ES2_DELAY);
 8002cac:	4628      	mov	r0, r5
 8002cae:	f7fe f86d 	bl	8000d8c <HAL_Delay>

	return;
}
 8002cb2:	b007      	add	sp, #28
 8002cb4:	bd30      	pop	{r4, r5, pc}
 8002cb6:	bf00      	nop
 8002cb8:	200000e0 	.word	0x200000e0

08002cbc <ES2_readByte>:

// Read one byte via TWI
uint8_t ES2_readByte(uint8_t slaveAddress, uint8_t registerAddress)
{
 8002cbc:	b510      	push	{r4, lr}
 8002cbe:	b086      	sub	sp, #24
	uint8_t data;

	HAL_I2C_Mem_Read(&hi2c1, slaveAddress << 1, registerAddress, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	2464      	movs	r4, #100	; 0x64
 8002cc4:	f10d 0217 	add.w	r2, sp, #23
 8002cc8:	9301      	str	r3, [sp, #4]
 8002cca:	9200      	str	r2, [sp, #0]
 8002ccc:	9402      	str	r4, [sp, #8]
 8002cce:	460a      	mov	r2, r1
 8002cd0:	fa00 f103 	lsl.w	r1, r0, r3
 8002cd4:	4804      	ldr	r0, [pc, #16]	; (8002ce8 <ES2_readByte+0x2c>)
 8002cd6:	f7fe fd57 	bl	8001788 <HAL_I2C_Mem_Read>
	HAL_Delay(ES2_DELAY);
 8002cda:	4620      	mov	r0, r4
 8002cdc:	f7fe f856 	bl	8000d8c <HAL_Delay>

	return data;
}
 8002ce0:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8002ce4:	b006      	add	sp, #24
 8002ce6:	bd10      	pop	{r4, pc}
 8002ce8:	200000e0 	.word	0x200000e0

08002cec <ES2_writeCommand>:

// Write standard command to BQ fuel gauge (TI)
void ES2_writeCommand(uint8_t slaveAddress, uint8_t registerAddress, uint16_t dataWord)
{
 8002cec:	b510      	push	{r4, lr}
 8002cee:	b086      	sub	sp, #24
	uint8_t buf[2];

	buf[0] = dataWord & 0xFF;
	buf[1] = dataWord >> 8;

	HAL_I2C_Mem_Write(&hi2c1, slaveAddress << 1, registerAddress, I2C_MEMADD_SIZE_8BIT, buf, 2, 100);
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	9301      	str	r3, [sp, #4]
 8002cf4:	ab05      	add	r3, sp, #20
	buf[0] = dataWord & 0xFF;
 8002cf6:	f88d 2014 	strb.w	r2, [sp, #20]
	HAL_I2C_Mem_Write(&hi2c1, slaveAddress << 1, registerAddress, I2C_MEMADD_SIZE_8BIT, buf, 2, 100);
 8002cfa:	2464      	movs	r4, #100	; 0x64
 8002cfc:	9300      	str	r3, [sp, #0]
	buf[1] = dataWord >> 8;
 8002cfe:	0a12      	lsrs	r2, r2, #8
	HAL_I2C_Mem_Write(&hi2c1, slaveAddress << 1, registerAddress, I2C_MEMADD_SIZE_8BIT, buf, 2, 100);
 8002d00:	2301      	movs	r3, #1
	buf[1] = dataWord >> 8;
 8002d02:	f88d 2015 	strb.w	r2, [sp, #21]
	HAL_I2C_Mem_Write(&hi2c1, slaveAddress << 1, registerAddress, I2C_MEMADD_SIZE_8BIT, buf, 2, 100);
 8002d06:	9402      	str	r4, [sp, #8]
 8002d08:	460a      	mov	r2, r1
 8002d0a:	fa00 f103 	lsl.w	r1, r0, r3
 8002d0e:	4804      	ldr	r0, [pc, #16]	; (8002d20 <ES2_writeCommand+0x34>)
 8002d10:	f7fe fc82 	bl	8001618 <HAL_I2C_Mem_Write>

	HAL_Delay(ES2_DELAY);
 8002d14:	4620      	mov	r0, r4
 8002d16:	f7fe f839 	bl	8000d8c <HAL_Delay>

	return;
}
 8002d1a:	b006      	add	sp, #24
 8002d1c:	bd10      	pop	{r4, pc}
 8002d1e:	bf00      	nop
 8002d20:	200000e0 	.word	0x200000e0

08002d24 <ES2_readCommand>:

// Read standard command to BQ fuel gauge (TI)
uint16_t ES2_readCommand(uint8_t slaveAddress, uint8_t registerAddress)
{
 8002d24:	b510      	push	{r4, lr}
 8002d26:	b086      	sub	sp, #24
	uint16_t dataWord;
	uint8_t buf[2];

	HAL_I2C_Mem_Read(&hi2c1, slaveAddress << 1, registerAddress, I2C_MEMADD_SIZE_8BIT, buf, 2, 100);
 8002d28:	2302      	movs	r3, #2
 8002d2a:	9301      	str	r3, [sp, #4]
 8002d2c:	ab05      	add	r3, sp, #20
 8002d2e:	2464      	movs	r4, #100	; 0x64
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	2301      	movs	r3, #1
 8002d34:	460a      	mov	r2, r1
 8002d36:	9402      	str	r4, [sp, #8]
 8002d38:	fa00 f103 	lsl.w	r1, r0, r3
 8002d3c:	4806      	ldr	r0, [pc, #24]	; (8002d58 <ES2_readCommand+0x34>)
 8002d3e:	f7fe fd23 	bl	8001788 <HAL_I2C_Mem_Read>

	HAL_Delay(ES2_DELAY);
 8002d42:	4620      	mov	r0, r4
 8002d44:	f7fe f822 	bl	8000d8c <HAL_Delay>

	dataWord = buf[0];
	dataWord |= buf[1] << 8;
 8002d48:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8002d4c:	f89d 3014 	ldrb.w	r3, [sp, #20]

	return dataWord;
}
 8002d50:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8002d54:	b006      	add	sp, #24
 8002d56:	bd10      	pop	{r4, pc}
 8002d58:	200000e0 	.word	0x200000e0

08002d5c <ES2_readSubCommand>:

// Read Control() subcommand to BQ fuel gauge (TI)
uint16_t ES2_readSubCommand(uint8_t slaveAddress, uint16_t controlData)
{
 8002d5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

	buf[0] = 0;
	buf[1] = controlData & 0xFF;
	buf[2] = controlData >> 8;

	HAL_I2C_Master_Transmit(&hi2c1, slaveAddress << 1, buf, 3, 100);
 8002d5e:	2464      	movs	r4, #100	; 0x64
	buf[1] = controlData & 0xFF;
 8002d60:	f88d 100d 	strb.w	r1, [sp, #13]
	buf[2] = controlData >> 8;
 8002d64:	0a09      	lsrs	r1, r1, #8
	HAL_I2C_Master_Transmit(&hi2c1, slaveAddress << 1, buf, 3, 100);
 8002d66:	2303      	movs	r3, #3
 8002d68:	aa03      	add	r2, sp, #12
{
 8002d6a:	4605      	mov	r5, r0
	buf[0] = 0;
 8002d6c:	2600      	movs	r6, #0
	buf[2] = controlData >> 8;
 8002d6e:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit(&hi2c1, slaveAddress << 1, buf, 3, 100);
 8002d72:	9400      	str	r4, [sp, #0]
 8002d74:	0041      	lsls	r1, r0, #1
 8002d76:	4808      	ldr	r0, [pc, #32]	; (8002d98 <ES2_readSubCommand+0x3c>)
	buf[0] = 0;
 8002d78:	f88d 600c 	strb.w	r6, [sp, #12]
	HAL_I2C_Master_Transmit(&hi2c1, slaveAddress << 1, buf, 3, 100);
 8002d7c:	f7fe fb22 	bl	80013c4 <HAL_I2C_Master_Transmit>

	dataWord = ES2_readCommand(slaveAddress, 0x00);
 8002d80:	4631      	mov	r1, r6
 8002d82:	4628      	mov	r0, r5
 8002d84:	f7ff ffce 	bl	8002d24 <ES2_readCommand>
 8002d88:	4605      	mov	r5, r0

	HAL_Delay(ES2_DELAY);
 8002d8a:	4620      	mov	r0, r4
 8002d8c:	f7fd fffe 	bl	8000d8c <HAL_Delay>

	return dataWord;
}
 8002d90:	4628      	mov	r0, r5
 8002d92:	b004      	add	sp, #16
 8002d94:	bd70      	pop	{r4, r5, r6, pc}
 8002d96:	bf00      	nop
 8002d98:	200000e0 	.word	0x200000e0

08002d9c <ES2_checkIfSealed>:

// Check if fuel gauge is in "Sealed" state
int ES2_checkIfSealed(uint8_t slaveAddress)
{
 8002d9c:	b508      	push	{r3, lr}
	uint16_t flags;

	flags = ES2_readSubCommand(slaveAddress, 0x0000);
 8002d9e:	2100      	movs	r1, #0
 8002da0:	f7ff ffdc 	bl	8002d5c <ES2_readSubCommand>

	return (flags & 0x2000);
}
 8002da4:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8002da8:	bd08      	pop	{r3, pc}

08002daa <ES2_setupFuelGauge>:

int ES2_setupFuelGauge(uint8_t slaveAddress, uint16_t newDesignCapacity_mAh,
		uint16_t newTerminationVoltage_mV, uint16_t chargeTerminationCurrent_mA,
		uint8_t alarmSOC)
{
 8002daa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dae:	b08b      	sub	sp, #44	; 0x2c
	uint8_t oldCheckSum, tempCheckSum, newCheckSum, checkSum, i;

	uint16_t oldOpConfig, newOpConfig, oldSOC1Set, oldSOC1Clear;

	newDesignEnergy = ((unsigned long) newDesignCapacity_mAh * 37) / 10;
	newTerminationRate = (uint16_t) (newDesignCapacity_mAh * 10)
 8002db0:	eb01 0581 	add.w	r5, r1, r1, lsl #2
	newDesignEnergy = ((unsigned long) newDesignCapacity_mAh * 37) / 10;
 8002db4:	2625      	movs	r6, #37	; 0x25
	newTerminationRate = (uint16_t) (newDesignCapacity_mAh * 10)
 8002db6:	006d      	lsls	r5, r5, #1
{
 8002db8:	f89d 8050 	ldrb.w	r8, [sp, #80]	; 0x50
 8002dbc:	4692      	mov	sl, r2
	newDesignEnergy = ((unsigned long) newDesignCapacity_mAh * 37) / 10;
 8002dbe:	434e      	muls	r6, r1
 8002dc0:	220a      	movs	r2, #10
	newTerminationRate = (uint16_t) (newDesignCapacity_mAh * 10)
 8002dc2:	b2ad      	uxth	r5, r5
	newDesignEnergy = ((unsigned long) newDesignCapacity_mAh * 37) / 10;
 8002dc4:	fbb6 f6f2 	udiv	r6, r6, r2
	newTerminationRate = (uint16_t) (newDesignCapacity_mAh * 10)
 8002dc8:	fbb5 f5f3 	udiv	r5, r5, r3
{
 8002dcc:	4604      	mov	r4, r0
 8002dce:	4689      	mov	r9, r1
	newDesignEnergy = ((unsigned long) newDesignCapacity_mAh * 37) / 10;
 8002dd0:	fa1f fb86 	uxth.w	fp, r6
	newTerminationRate = (uint16_t) (newDesignCapacity_mAh * 10)
 8002dd4:	2365      	movs	r3, #101	; 0x65
 8002dd6:	3b01      	subs	r3, #1

	i = 0;
	do
	{
		++i;
		if (i > 100)
 8002dd8:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	f000 817f 	beq.w	80030e0 <ES2_setupFuelGauge+0x336>
			return 1; // Failed
		// Unseal
		ES2_writeCommand(slaveAddress, 0x00, 0x8000);
 8002de2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002de6:	2100      	movs	r1, #0
 8002de8:	4620      	mov	r0, r4
 8002dea:	f7ff ff7f 	bl	8002cec <ES2_writeCommand>
		ES2_writeCommand(slaveAddress, 0x00, 0x8000);
 8002dee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002df2:	2100      	movs	r1, #0
 8002df4:	4620      	mov	r0, r4
 8002df6:	f7ff ff79 	bl	8002cec <ES2_writeCommand>
		HAL_Delay(10);
 8002dfa:	200a      	movs	r0, #10
 8002dfc:	f7fd ffc6 	bl	8000d8c <HAL_Delay>
	} while (ES2_checkIfSealed(slaveAddress));
 8002e00:	4620      	mov	r0, r4
 8002e02:	f7ff ffcb 	bl	8002d9c <ES2_checkIfSealed>
 8002e06:	9b00      	ldr	r3, [sp, #0]
 8002e08:	4607      	mov	r7, r0
 8002e0a:	2800      	cmp	r0, #0
 8002e0c:	d1e3      	bne.n	8002dd6 <ES2_setupFuelGauge+0x2c>

	//Change to CONFIG UPDATE mode
	ES2_writeCommand(slaveAddress, 0x00, 0x0013);
 8002e0e:	4601      	mov	r1, r0
 8002e10:	2213      	movs	r2, #19
 8002e12:	4620      	mov	r0, r4
 8002e14:	f7ff ff6a 	bl	8002cec <ES2_writeCommand>
	do
	{
		flags = ES2_readCommand(slaveAddress, 0x06);
 8002e18:	2106      	movs	r1, #6
 8002e1a:	4620      	mov	r0, r4
 8002e1c:	f7ff ff82 	bl	8002d24 <ES2_readCommand>
	} while (!(flags & 0x0010));
 8002e20:	06c3      	lsls	r3, r0, #27
 8002e22:	d5f9      	bpl.n	8002e18 <ES2_setupFuelGauge+0x6e>

	// Setup Block RAM update
	ES2_writeByte(slaveAddress, 0x61, 0x00);
 8002e24:	2200      	movs	r2, #0
 8002e26:	2161      	movs	r1, #97	; 0x61
 8002e28:	4620      	mov	r0, r4
 8002e2a:	f7ff ff2f 	bl	8002c8c <ES2_writeByte>
	ES2_writeByte(slaveAddress, 0x3E, 0x52);
 8002e2e:	2252      	movs	r2, #82	; 0x52
 8002e30:	213e      	movs	r1, #62	; 0x3e
 8002e32:	4620      	mov	r0, r4
 8002e34:	f7ff ff2a 	bl	8002c8c <ES2_writeByte>
	ES2_writeByte(slaveAddress, 0x3F, 0x00);
 8002e38:	2200      	movs	r2, #0
 8002e3a:	213f      	movs	r1, #63	; 0x3f
 8002e3c:	4620      	mov	r0, r4
 8002e3e:	f7ff ff25 	bl	8002c8c <ES2_writeByte>

	oldCheckSum = ES2_readByte(slaveAddress, 0x60);
 8002e42:	2160      	movs	r1, #96	; 0x60
 8002e44:	4620      	mov	r0, r4
 8002e46:	f7ff ff39 	bl	8002cbc <ES2_readByte>
		tempCheckSum -= oldTerminationVoltage & 0xFF;

		tempCheckSum -= oldTaperRate >> 8;
		tempCheckSum -= oldTaperRate & 0xFF;

		ES2_writeByte(slaveAddress, 0x4A, newDesignCapacity_mAh >> 8);
 8002e4a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8002e4e:	9300      	str	r3, [sp, #0]
		ES2_writeByte(slaveAddress, 0x4B, newDesignCapacity_mAh & 0xFF);

		ES2_writeByte(slaveAddress, 0x4C, newDesignEnergy >> 8);
 8002e50:	ea4f 231b 	mov.w	r3, fp, lsr #8
 8002e54:	9301      	str	r3, [sp, #4]
		ES2_writeByte(slaveAddress, 0x4D, newDesignEnergy & 0xFF);
 8002e56:	b2f3      	uxtb	r3, r6
 8002e58:	9302      	str	r3, [sp, #8]

		ES2_writeByte(slaveAddress, 0x50, newTerminationVoltage_mV >> 8);
 8002e5a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8002e5e:	9303      	str	r3, [sp, #12]
		ES2_writeByte(slaveAddress, 0x51, newTerminationVoltage_mV & 0xFF);
 8002e60:	fa5f f38a 	uxtb.w	r3, sl
 8002e64:	9304      	str	r3, [sp, #16]

		ES2_writeByte(slaveAddress, 0x5B, newTerminationRate >> 8);
 8002e66:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8002e6a:	9305      	str	r3, [sp, #20]
		ES2_writeByte(slaveAddress, 0x5C, newTerminationRate & 0xFF);
 8002e6c:	b2eb      	uxtb	r3, r5
 8002e6e:	9306      	str	r3, [sp, #24]
 8002e70:	9a04      	ldr	r2, [sp, #16]
 8002e72:	9b03      	ldr	r3, [sp, #12]
		ES2_writeByte(slaveAddress, 0x4B, newDesignCapacity_mAh & 0xFF);
 8002e74:	fa5f f989 	uxtb.w	r9, r9
 8002e78:	4413      	add	r3, r2
 8002e7a:	9a00      	ldr	r2, [sp, #0]
 8002e7c:	444b      	add	r3, r9
 8002e7e:	4413      	add	r3, r2
 8002e80:	9a06      	ldr	r2, [sp, #24]
 8002e82:	4413      	add	r3, r2
 8002e84:	9a02      	ldr	r2, [sp, #8]
 8002e86:	4413      	add	r3, r2
 8002e88:	9a05      	ldr	r2, [sp, #20]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	9a01      	ldr	r2, [sp, #4]
 8002e8e:	4413      	add	r3, r2
 8002e90:	b2db      	uxtb	r3, r3
		tempCheckSum = 0xFF - oldCheckSum;
 8002e92:	43c0      	mvns	r0, r0
 8002e94:	9307      	str	r3, [sp, #28]
 8002e96:	b2c3      	uxtb	r3, r0
		ES2_writeByte(slaveAddress, 0x5C, newTerminationRate & 0xFF);
 8002e98:	2565      	movs	r5, #101	; 0x65
		tempCheckSum = 0xFF - oldCheckSum;
 8002e9a:	9308      	str	r3, [sp, #32]
 8002e9c:	3d01      	subs	r5, #1
		if (i > 100)
 8002e9e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8002ea2:	d104      	bne.n	8002eae <ES2_setupFuelGauge+0x104>
			return 2; // Failed
 8002ea4:	2702      	movs	r7, #2

	// Seal fuel gauge
	ES2_writeCommand(slaveAddress, 0x00, 0x0020);

	return 0;
}
 8002ea6:	4638      	mov	r0, r7
 8002ea8:	b00b      	add	sp, #44	; 0x2c
 8002eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		oldDesignCapacity = ES2_readCommand(slaveAddress, 0x4A);
 8002eae:	214a      	movs	r1, #74	; 0x4a
 8002eb0:	4620      	mov	r0, r4
 8002eb2:	f7ff ff37 	bl	8002d24 <ES2_readCommand>
		oldDesignEnergy = ES2_readCommand(slaveAddress, 0x4C);
 8002eb6:	214c      	movs	r1, #76	; 0x4c
		oldDesignCapacity = ES2_readCommand(slaveAddress, 0x4A);
 8002eb8:	9009      	str	r0, [sp, #36]	; 0x24
		oldDesignEnergy = ES2_readCommand(slaveAddress, 0x4C);
 8002eba:	4620      	mov	r0, r4
 8002ebc:	f7ff ff32 	bl	8002d24 <ES2_readCommand>
		oldTerminationVoltage = ES2_readCommand(slaveAddress, 0x50);
 8002ec0:	2150      	movs	r1, #80	; 0x50
		oldDesignEnergy = ES2_readCommand(slaveAddress, 0x4C);
 8002ec2:	4683      	mov	fp, r0
		oldTerminationVoltage = ES2_readCommand(slaveAddress, 0x50);
 8002ec4:	4620      	mov	r0, r4
 8002ec6:	f7ff ff2d 	bl	8002d24 <ES2_readCommand>
		oldTaperRate = ES2_readCommand(slaveAddress, 0x5B);
 8002eca:	215b      	movs	r1, #91	; 0x5b
		oldTerminationVoltage = ES2_readCommand(slaveAddress, 0x50);
 8002ecc:	4682      	mov	sl, r0
		oldTaperRate = ES2_readCommand(slaveAddress, 0x5B);
 8002ece:	4620      	mov	r0, r4
 8002ed0:	f7ff ff28 	bl	8002d24 <ES2_readCommand>
		tempCheckSum -= oldDesignCapacity >> 8;
 8002ed4:	9b08      	ldr	r3, [sp, #32]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002eda:	eba2 2213 	sub.w	r2, r2, r3, lsr #8
		tempCheckSum -= oldDesignCapacity & 0xFF;
 8002ede:	1ad3      	subs	r3, r2, r3
		tempCheckSum -= oldDesignEnergy >> 8;
 8002ee0:	eba3 231b 	sub.w	r3, r3, fp, lsr #8
		oldTaperRate = ES2_readCommand(slaveAddress, 0x5B);
 8002ee4:	4606      	mov	r6, r0
		ES2_writeByte(slaveAddress, 0x4A, newDesignCapacity_mAh >> 8);
 8002ee6:	9a00      	ldr	r2, [sp, #0]
 8002ee8:	214a      	movs	r1, #74	; 0x4a
 8002eea:	4620      	mov	r0, r4
		tempCheckSum -= oldDesignEnergy & 0xFF;
 8002eec:	eba3 0b0b 	sub.w	fp, r3, fp
		ES2_writeByte(slaveAddress, 0x4A, newDesignCapacity_mAh >> 8);
 8002ef0:	f7ff fecc 	bl	8002c8c <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x4B, newDesignCapacity_mAh & 0xFF);
 8002ef4:	464a      	mov	r2, r9
 8002ef6:	214b      	movs	r1, #75	; 0x4b
 8002ef8:	4620      	mov	r0, r4
 8002efa:	f7ff fec7 	bl	8002c8c <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x4C, newDesignEnergy >> 8);
 8002efe:	9a01      	ldr	r2, [sp, #4]
 8002f00:	214c      	movs	r1, #76	; 0x4c
 8002f02:	4620      	mov	r0, r4
 8002f04:	f7ff fec2 	bl	8002c8c <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x4D, newDesignEnergy & 0xFF);
 8002f08:	9a02      	ldr	r2, [sp, #8]
 8002f0a:	214d      	movs	r1, #77	; 0x4d
 8002f0c:	4620      	mov	r0, r4
 8002f0e:	f7ff febd 	bl	8002c8c <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x50, newTerminationVoltage_mV >> 8);
 8002f12:	9a03      	ldr	r2, [sp, #12]
 8002f14:	2150      	movs	r1, #80	; 0x50
 8002f16:	4620      	mov	r0, r4
 8002f18:	f7ff feb8 	bl	8002c8c <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x51, newTerminationVoltage_mV & 0xFF);
 8002f1c:	9a04      	ldr	r2, [sp, #16]
 8002f1e:	2151      	movs	r1, #81	; 0x51
 8002f20:	4620      	mov	r0, r4
 8002f22:	f7ff feb3 	bl	8002c8c <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x5B, newTerminationRate >> 8);
 8002f26:	9a05      	ldr	r2, [sp, #20]
 8002f28:	215b      	movs	r1, #91	; 0x5b
 8002f2a:	4620      	mov	r0, r4
 8002f2c:	f7ff feae 	bl	8002c8c <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x5C, newTerminationRate & 0xFF);
 8002f30:	9a06      	ldr	r2, [sp, #24]
 8002f32:	215c      	movs	r1, #92	; 0x5c
 8002f34:	4620      	mov	r0, r4
 8002f36:	f7ff fea9 	bl	8002c8c <ES2_writeByte>
		tempCheckSum += newTerminationRate & 0xFF;
 8002f3a:	9b07      	ldr	r3, [sp, #28]
		tempCheckSum -= oldTerminationVoltage >> 8;
 8002f3c:	ebab 2b1a 	sub.w	fp, fp, sl, lsr #8
		tempCheckSum += newTerminationRate & 0xFF;
 8002f40:	1b9b      	subs	r3, r3, r6
		tempCheckSum -= oldTerminationVoltage & 0xFF;
 8002f42:	ebab 0a0a 	sub.w	sl, fp, sl
		tempCheckSum += newTerminationRate & 0xFF;
 8002f46:	eba3 2616 	sub.w	r6, r3, r6, lsr #8
		tempCheckSum -= oldTerminationVoltage & 0xFF;
 8002f4a:	f00a 0aff 	and.w	sl, sl, #255	; 0xff
		tempCheckSum += newTerminationRate & 0xFF;
 8002f4e:	44b2      	add	sl, r6
		newCheckSum = 0xFF - tempCheckSum;
 8002f50:	ea6f 0a0a 	mvn.w	sl, sl
 8002f54:	fa5f fa8a 	uxtb.w	sl, sl
		ES2_writeByte(slaveAddress, 0x60, newCheckSum);
 8002f58:	4652      	mov	r2, sl
 8002f5a:	2160      	movs	r1, #96	; 0x60
 8002f5c:	4620      	mov	r0, r4
 8002f5e:	f7ff fe95 	bl	8002c8c <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x3E, 0x52);
 8002f62:	2252      	movs	r2, #82	; 0x52
 8002f64:	213e      	movs	r1, #62	; 0x3e
 8002f66:	4620      	mov	r0, r4
 8002f68:	f7ff fe90 	bl	8002c8c <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x3F, 0x00);
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	213f      	movs	r1, #63	; 0x3f
 8002f70:	4620      	mov	r0, r4
 8002f72:	f7ff fe8b 	bl	8002c8c <ES2_writeByte>
		checkSum = ES2_readByte(slaveAddress, 0x60);
 8002f76:	2160      	movs	r1, #96	; 0x60
 8002f78:	4620      	mov	r0, r4
 8002f7a:	f7ff fe9f 	bl	8002cbc <ES2_readByte>
	} while (checkSum != newCheckSum);
 8002f7e:	4582      	cmp	sl, r0
 8002f80:	d18c      	bne.n	8002e9c <ES2_setupFuelGauge+0xf2>
	ES2_writeByte(slaveAddress, 0x61, 0x00); // Enable block access
 8002f82:	2200      	movs	r2, #0
 8002f84:	2161      	movs	r1, #97	; 0x61
 8002f86:	4620      	mov	r0, r4
 8002f88:	f7ff fe80 	bl	8002c8c <ES2_writeByte>
	ES2_writeByte(slaveAddress, 0x3E, 0x40); // Set subclass ID
 8002f8c:	2240      	movs	r2, #64	; 0x40
 8002f8e:	213e      	movs	r1, #62	; 0x3e
 8002f90:	4620      	mov	r0, r4
 8002f92:	f7ff fe7b 	bl	8002c8c <ES2_writeByte>
	ES2_writeByte(slaveAddress, 0x3F, 0x00);  // Set block offset 0 or 32
 8002f96:	2200      	movs	r2, #0
 8002f98:	213f      	movs	r1, #63	; 0x3f
 8002f9a:	4620      	mov	r0, r4
 8002f9c:	f7ff fe76 	bl	8002c8c <ES2_writeByte>
	oldCheckSum = ES2_readByte(slaveAddress, 0x60);
 8002fa0:	2160      	movs	r1, #96	; 0x60
 8002fa2:	4620      	mov	r0, r4
 8002fa4:	f7ff fe8a 	bl	8002cbc <ES2_readByte>
		tempCheckSum = 0xFF - oldCheckSum;
 8002fa8:	43c0      	mvns	r0, r0
	oldCheckSum = ES2_readByte(slaveAddress, 0x60);
 8002faa:	2665      	movs	r6, #101	; 0x65
		tempCheckSum = 0xFF - oldCheckSum;
 8002fac:	fa5f f980 	uxtb.w	r9, r0
 8002fb0:	3e01      	subs	r6, #1
		if (i > 100)
 8002fb2:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8002fb6:	f43f af75 	beq.w	8002ea4 <ES2_setupFuelGauge+0xfa>
		oldOpConfig = ES2_readCommand(slaveAddress, 0x40);
 8002fba:	2140      	movs	r1, #64	; 0x40
 8002fbc:	4620      	mov	r0, r4
 8002fbe:	f7ff feb1 	bl	8002d24 <ES2_readCommand>
		newOpConfig = oldOpConfig | 0x0004; // Enable BATLOWEN Bit
 8002fc2:	f040 0504 	orr.w	r5, r0, #4
 8002fc6:	b2ad      	uxth	r5, r5
		if (newOpConfig == oldOpConfig)
 8002fc8:	42a8      	cmp	r0, r5
		oldOpConfig = ES2_readCommand(slaveAddress, 0x40);
 8002fca:	4682      	mov	sl, r0
		if (newOpConfig == oldOpConfig)
 8002fcc:	d137      	bne.n	800303e <ES2_setupFuelGauge+0x294>
	ES2_writeByte(slaveAddress, 0x3E, 0x31); // Set subclass ID
 8002fce:	2231      	movs	r2, #49	; 0x31
 8002fd0:	213e      	movs	r1, #62	; 0x3e
 8002fd2:	4620      	mov	r0, r4
 8002fd4:	f7ff fe5a 	bl	8002c8c <ES2_writeByte>
	ES2_writeByte(slaveAddress, 0x3F, 0x00);  // Set block offset 0 or 32
 8002fd8:	2200      	movs	r2, #0
 8002fda:	213f      	movs	r1, #63	; 0x3f
 8002fdc:	4620      	mov	r0, r4
 8002fde:	f7ff fe55 	bl	8002c8c <ES2_writeByte>
	oldCheckSum = ES2_readByte(slaveAddress, 0x60);
 8002fe2:	2160      	movs	r1, #96	; 0x60
 8002fe4:	4620      	mov	r0, r4
 8002fe6:	f7ff fe69 	bl	8002cbc <ES2_readByte>
		tempCheckSum = 0xFF - oldCheckSum;
 8002fea:	43c0      	mvns	r0, r0
	oldCheckSum = ES2_readByte(slaveAddress, 0x60);
 8002fec:	f04f 0965 	mov.w	r9, #101	; 0x65
		tempCheckSum = 0xFF - oldCheckSum;
 8002ff0:	fa5f fa80 	uxtb.w	sl, r0
 8002ff4:	f109 39ff 	add.w	r9, r9, #4294967295
		if (i > 100)
 8002ff8:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
 8002ffc:	f43f af52 	beq.w	8002ea4 <ES2_setupFuelGauge+0xfa>
		oldSOC1Set = ES2_readByte(slaveAddress, 0x40);
 8003000:	2140      	movs	r1, #64	; 0x40
 8003002:	4620      	mov	r0, r4
 8003004:	f7ff fe5a 	bl	8002cbc <ES2_readByte>
		oldSOC1Clear = ES2_readByte(slaveAddress, 0x41);
 8003008:	2141      	movs	r1, #65	; 0x41
		oldSOC1Set = ES2_readByte(slaveAddress, 0x40);
 800300a:	4605      	mov	r5, r0
		oldSOC1Clear = ES2_readByte(slaveAddress, 0x41);
 800300c:	4620      	mov	r0, r4
 800300e:	f7ff fe55 	bl	8002cbc <ES2_readByte>
		if (oldSOC1Set == alarmSOC && oldSOC1Clear == alarmSOC)
 8003012:	4545      	cmp	r5, r8
		oldSOC1Clear = ES2_readByte(slaveAddress, 0x41);
 8003014:	4683      	mov	fp, r0
		if (oldSOC1Set == alarmSOC && oldSOC1Clear == alarmSOC)
 8003016:	d139      	bne.n	800308c <ES2_setupFuelGauge+0x2e2>
 8003018:	4540      	cmp	r0, r8
 800301a:	d137      	bne.n	800308c <ES2_setupFuelGauge+0x2e2>
	ES2_writeCommand(slaveAddress, 0x00, 0x0042);
 800301c:	2242      	movs	r2, #66	; 0x42
 800301e:	2100      	movs	r1, #0
 8003020:	4620      	mov	r0, r4
 8003022:	f7ff fe63 	bl	8002cec <ES2_writeCommand>
		flags = ES2_readCommand(slaveAddress, 0x06);
 8003026:	2106      	movs	r1, #6
 8003028:	4620      	mov	r0, r4
 800302a:	f7ff fe7b 	bl	8002d24 <ES2_readCommand>
	} while (flags & 0x0010);
 800302e:	f010 0110 	ands.w	r1, r0, #16
 8003032:	d1f8      	bne.n	8003026 <ES2_setupFuelGauge+0x27c>
	ES2_writeCommand(slaveAddress, 0x00, 0x0020);
 8003034:	2220      	movs	r2, #32
 8003036:	4620      	mov	r0, r4
 8003038:	f7ff fe58 	bl	8002cec <ES2_writeCommand>
	return 0;
 800303c:	e733      	b.n	8002ea6 <ES2_setupFuelGauge+0xfc>
		ES2_writeByte(slaveAddress, 0x40, newOpConfig >> 8);
 800303e:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8003042:	2140      	movs	r1, #64	; 0x40
 8003044:	4620      	mov	r0, r4
		ES2_writeByte(slaveAddress, 0x41, newOpConfig & 0xFF);
 8003046:	b2ed      	uxtb	r5, r5
		ES2_writeByte(slaveAddress, 0x40, newOpConfig >> 8);
 8003048:	f7ff fe20 	bl	8002c8c <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x41, newOpConfig & 0xFF);
 800304c:	462a      	mov	r2, r5
		tempCheckSum += newOpConfig & 0xFF;
 800304e:	eba5 050a 	sub.w	r5, r5, sl
 8003052:	444d      	add	r5, r9
		newCheckSum = 0xFF - tempCheckSum;
 8003054:	43ed      	mvns	r5, r5
		ES2_writeByte(slaveAddress, 0x41, newOpConfig & 0xFF);
 8003056:	2141      	movs	r1, #65	; 0x41
 8003058:	4620      	mov	r0, r4
		newCheckSum = 0xFF - tempCheckSum;
 800305a:	b2ed      	uxtb	r5, r5
		ES2_writeByte(slaveAddress, 0x41, newOpConfig & 0xFF);
 800305c:	f7ff fe16 	bl	8002c8c <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x60, newCheckSum);
 8003060:	462a      	mov	r2, r5
 8003062:	2160      	movs	r1, #96	; 0x60
 8003064:	4620      	mov	r0, r4
 8003066:	f7ff fe11 	bl	8002c8c <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x3E, 0x40);
 800306a:	2240      	movs	r2, #64	; 0x40
 800306c:	213e      	movs	r1, #62	; 0x3e
 800306e:	4620      	mov	r0, r4
 8003070:	f7ff fe0c 	bl	8002c8c <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x3F, 0x00);
 8003074:	2200      	movs	r2, #0
 8003076:	213f      	movs	r1, #63	; 0x3f
 8003078:	4620      	mov	r0, r4
 800307a:	f7ff fe07 	bl	8002c8c <ES2_writeByte>
		checkSum = ES2_readByte(slaveAddress, 0x60);
 800307e:	2160      	movs	r1, #96	; 0x60
 8003080:	4620      	mov	r0, r4
 8003082:	f7ff fe1b 	bl	8002cbc <ES2_readByte>
	} while (checkSum != newCheckSum);
 8003086:	4285      	cmp	r5, r0
 8003088:	d192      	bne.n	8002fb0 <ES2_setupFuelGauge+0x206>
 800308a:	e7a0      	b.n	8002fce <ES2_setupFuelGauge+0x224>
 800308c:	ea4f 0648 	mov.w	r6, r8, lsl #1
 8003090:	b2f6      	uxtb	r6, r6
 8003092:	4456      	add	r6, sl
 8003094:	1b75      	subs	r5, r6, r5
 8003096:	b2ed      	uxtb	r5, r5
		tempCheckSum += alarmSOC;
 8003098:	eba5 050b 	sub.w	r5, r5, fp
		ES2_writeByte(slaveAddress, 0x40, alarmSOC);
 800309c:	4642      	mov	r2, r8
 800309e:	2140      	movs	r1, #64	; 0x40
 80030a0:	4620      	mov	r0, r4
		newCheckSum = 0xFF - tempCheckSum;
 80030a2:	43ed      	mvns	r5, r5
		ES2_writeByte(slaveAddress, 0x40, alarmSOC);
 80030a4:	f7ff fdf2 	bl	8002c8c <ES2_writeByte>
		newCheckSum = 0xFF - tempCheckSum;
 80030a8:	b2ed      	uxtb	r5, r5
		ES2_writeByte(slaveAddress, 0x41, alarmSOC);
 80030aa:	4642      	mov	r2, r8
 80030ac:	2141      	movs	r1, #65	; 0x41
 80030ae:	4620      	mov	r0, r4
 80030b0:	f7ff fdec 	bl	8002c8c <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x60, newCheckSum);
 80030b4:	462a      	mov	r2, r5
 80030b6:	2160      	movs	r1, #96	; 0x60
 80030b8:	4620      	mov	r0, r4
 80030ba:	f7ff fde7 	bl	8002c8c <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x3E, 0x31);
 80030be:	2231      	movs	r2, #49	; 0x31
 80030c0:	213e      	movs	r1, #62	; 0x3e
 80030c2:	4620      	mov	r0, r4
 80030c4:	f7ff fde2 	bl	8002c8c <ES2_writeByte>
		ES2_writeByte(slaveAddress, 0x3F, 0x00);
 80030c8:	2200      	movs	r2, #0
 80030ca:	213f      	movs	r1, #63	; 0x3f
 80030cc:	4620      	mov	r0, r4
 80030ce:	f7ff fddd 	bl	8002c8c <ES2_writeByte>
		checkSum = ES2_readByte(slaveAddress, 0x60);
 80030d2:	2160      	movs	r1, #96	; 0x60
 80030d4:	4620      	mov	r0, r4
 80030d6:	f7ff fdf1 	bl	8002cbc <ES2_readByte>
	} while (checkSum != newCheckSum);
 80030da:	4285      	cmp	r5, r0
 80030dc:	d18a      	bne.n	8002ff4 <ES2_setupFuelGauge+0x24a>
 80030de:	e79d      	b.n	800301c <ES2_setupFuelGauge+0x272>
			return 1; // Failed
 80030e0:	2701      	movs	r7, #1
 80030e2:	e6e0      	b.n	8002ea6 <ES2_setupFuelGauge+0xfc>

080030e4 <decodeBCD>:

// Decode tens place, units place formating (BCD)
uint8_t decodeBCD(uint8_t BCD)
{
	uint8_t _value = ((0x70 & BCD) >> 4) * 10 + (0x0F & BCD);
 80030e4:	f3c0 1302 	ubfx	r3, r0, #4, #3
 80030e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80030ec:	f000 000f 	and.w	r0, r0, #15

	return _value;
}
 80030f0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80030f4:	4770      	bx	lr
	...

080030f8 <ES2_readClock>:
	return;
}

// Read current time and date into a local buffer
void ES2_readClock()
{
 80030f8:	b530      	push	{r4, r5, lr}
	int i = 0;

	// Read time and date
	HAL_Delay(20);
 80030fa:	2014      	movs	r0, #20
{
 80030fc:	b085      	sub	sp, #20
	HAL_Delay(20);
 80030fe:	f7fd fe45 	bl	8000d8c <HAL_Delay>

	// read from register 4 to 0xA from RTC
	HAL_I2C_Mem_Read(&hi2c1, RTC_SLAVE_ADDR << 1, 0x04, I2C_MEMADD_SIZE_8BIT, es_timeDate, 7, 100);
 8003102:	2364      	movs	r3, #100	; 0x64
 8003104:	9302      	str	r3, [sp, #8]
 8003106:	4d0b      	ldr	r5, [pc, #44]	; (8003134 <ES2_readClock+0x3c>)
 8003108:	9500      	str	r5, [sp, #0]
 800310a:	2307      	movs	r3, #7
 800310c:	9301      	str	r3, [sp, #4]
 800310e:	2204      	movs	r2, #4
 8003110:	2301      	movs	r3, #1
 8003112:	21a2      	movs	r1, #162	; 0xa2
 8003114:	4808      	ldr	r0, [pc, #32]	; (8003138 <ES2_readClock+0x40>)
 8003116:	f7fe fb37 	bl	8001788 <HAL_I2C_Mem_Read>

	// Convert seconds, minutes, hours, day-of-the-month, and year from BCD to binary (skipping day-of-the-week)
	for (i = 0; i < 7; i++)
 800311a:	2400      	movs	r4, #0
	{
		if (i != 4)
 800311c:	2c04      	cmp	r4, #4
 800311e:	d003      	beq.n	8003128 <ES2_readClock+0x30>
			es_timeDate[i] = decodeBCD(es_timeDate[i]);
 8003120:	5d28      	ldrb	r0, [r5, r4]
 8003122:	f7ff ffdf 	bl	80030e4 <decodeBCD>
 8003126:	5528      	strb	r0, [r5, r4]
	for (i = 0; i < 7; i++)
 8003128:	3401      	adds	r4, #1
 800312a:	2c07      	cmp	r4, #7
 800312c:	d1f6      	bne.n	800311c <ES2_readClock+0x24>
	}

	return;
}
 800312e:	b005      	add	sp, #20
 8003130:	bd30      	pop	{r4, r5, pc}
 8003132:	bf00      	nop
 8003134:	200001b0 	.word	0x200001b0
 8003138:	200000e0 	.word	0x200000e0

0800313c <ES2_second>:

// Returns current second(0-59)
uint8_t ES2_second()
{
	return es_timeDate[0];
}
 800313c:	4b01      	ldr	r3, [pc, #4]	; (8003144 <ES2_second+0x8>)
 800313e:	7818      	ldrb	r0, [r3, #0]
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	200001b0 	.word	0x200001b0

08003148 <ES2_minute>:

// Returns current minute (0-59)
uint8_t ES2_minute()
{
	return es_timeDate[1];
}
 8003148:	4b01      	ldr	r3, [pc, #4]	; (8003150 <ES2_minute+0x8>)
 800314a:	7858      	ldrb	r0, [r3, #1]
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	200001b0 	.word	0x200001b0

08003154 <ES2_hour>:

// Returns current hour (0-23)
uint8_t ES2_hour()
{
	return es_timeDate[2];
}
 8003154:	4b01      	ldr	r3, [pc, #4]	; (800315c <ES2_hour+0x8>)
 8003156:	7898      	ldrb	r0, [r3, #2]
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	200001b0 	.word	0x200001b0

08003160 <ES2_dayOfMonth>:

// Returns current day of the month (1-31)
uint8_t ES2_dayOfMonth()
{
	return es_timeDate[3];
}
 8003160:	4b01      	ldr	r3, [pc, #4]	; (8003168 <ES2_dayOfMonth+0x8>)
 8003162:	78d8      	ldrb	r0, [r3, #3]
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	200001b0 	.word	0x200001b0

0800316c <ES2_month>:

// Returns current month (1-12)
uint8_t ES2_month()
{
	return es_timeDate[5];
}
 800316c:	4b01      	ldr	r3, [pc, #4]	; (8003174 <ES2_month+0x8>)
 800316e:	7958      	ldrb	r0, [r3, #5]
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	200001b0 	.word	0x200001b0

08003178 <ES2_year>:

// Returns current year (00-99)
uint8_t ES2_year()
{
	return es_timeDate[6];
}
 8003178:	4b01      	ldr	r3, [pc, #4]	; (8003180 <ES2_year+0x8>)
 800317a:	7998      	ldrb	r0, [r3, #6]
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	200001b0 	.word	0x200001b0

08003184 <ES2_clearAlarms>:

// Clears any active RTC alarms
void ES2_clearAlarms()
{
 8003184:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t tmp[5];

	for(int i = 0; i < 5; i++)
		tmp[i] = 0xff;
 8003186:	23ff      	movs	r3, #255	; 0xff

	HAL_Delay(15);
 8003188:	200f      	movs	r0, #15
		tmp[i] = 0xff;
 800318a:	f88d 3010 	strb.w	r3, [sp, #16]
 800318e:	f88d 3011 	strb.w	r3, [sp, #17]
 8003192:	f88d 3012 	strb.w	r3, [sp, #18]
 8003196:	f88d 3013 	strb.w	r3, [sp, #19]
 800319a:	f88d 3014 	strb.w	r3, [sp, #20]
	HAL_Delay(15);
 800319e:	f7fd fdf5 	bl	8000d8c <HAL_Delay>
	HAL_I2C_Mem_Write(&hi2c1, RTC_SLAVE_ADDR << 1, 0x0B, I2C_MEMADD_SIZE_8BIT, tmp, 5, 100);
 80031a2:	2364      	movs	r3, #100	; 0x64
 80031a4:	9302      	str	r3, [sp, #8]
 80031a6:	2305      	movs	r3, #5
 80031a8:	9301      	str	r3, [sp, #4]
 80031aa:	ab04      	add	r3, sp, #16
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	220b      	movs	r2, #11
 80031b0:	2301      	movs	r3, #1
 80031b2:	21a2      	movs	r1, #162	; 0xa2
 80031b4:	4802      	ldr	r0, [pc, #8]	; (80031c0 <ES2_clearAlarms+0x3c>)
 80031b6:	f7fe fa2f 	bl	8001618 <HAL_I2C_Mem_Write>

	return;
}
 80031ba:	b007      	add	sp, #28
 80031bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80031c0:	200000e0 	.word	0x200000e0

080031c4 <ES2_readVMPP>:
	}
}

// Read the current VMPP setting from DAC
int ES2_readVMPP()
{
 80031c4:	b530      	push	{r4, r5, lr}
	uint8_t data[2];
	do
	{
		HAL_I2C_Master_Receive(&hi2c1, DAC_SLAVE_ADDR<<1, data, 2, 100);
 80031c6:	4c10      	ldr	r4, [pc, #64]	; (8003208 <ES2_readVMPP+0x44>)
{
 80031c8:	b085      	sub	sp, #20
		HAL_I2C_Master_Receive(&hi2c1, DAC_SLAVE_ADDR<<1, data, 2, 100);
 80031ca:	2564      	movs	r5, #100	; 0x64
 80031cc:	2302      	movs	r3, #2
 80031ce:	aa03      	add	r2, sp, #12
 80031d0:	9500      	str	r5, [sp, #0]
 80031d2:	21c0      	movs	r1, #192	; 0xc0
 80031d4:	4620      	mov	r0, r4
 80031d6:	f7fe f989 	bl	80014ec <HAL_I2C_Master_Receive>
	} while (!(data[0] & 0b10000000));
 80031da:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80031de:	061a      	lsls	r2, r3, #24
 80031e0:	d5f4      	bpl.n	80031cc <ES2_readVMPP+0x8>

	if (data[0] & 0b00000110)
 80031e2:	f013 0f06 	tst.w	r3, #6
	{
		return -1;
	}
	else
	{
		return ((unsigned long) (357 - (int)(data[1])) << 16) / 984;
 80031e6:	bf01      	itttt	eq
 80031e8:	f89d 000d 	ldrbeq.w	r0, [sp, #13]
 80031ec:	f5c0 70b2 	rsbeq	r0, r0, #356	; 0x164
 80031f0:	3001      	addeq	r0, #1
 80031f2:	0400      	lsleq	r0, r0, #16
 80031f4:	bf0a      	itet	eq
 80031f6:	f44f 7376 	moveq.w	r3, #984	; 0x3d8
		return -1;
 80031fa:	f04f 30ff 	movne.w	r0, #4294967295
		return ((unsigned long) (357 - (int)(data[1])) << 16) / 984;
 80031fe:	fbb0 f0f3 	udiveq	r0, r0, r3
	}
}
 8003202:	b005      	add	sp, #20
 8003204:	bd30      	pop	{r4, r5, pc}
 8003206:	bf00      	nop
 8003208:	200000e0 	.word	0x200000e0

0800320c <ES2_setVMPP>:

// Set regulated MPP voltage of solar panel and writes to EEPROM
void ES2_setVMPP(int MPP_Voltage_mV, uint8_t writeEEPROM)
{
 800320c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t DAC_setting, Control, Hbyte, Lbyte, data[2];
	uint8_t tmp[3];

	do
	{
		HAL_I2C_Master_Receive(&hi2c1, DAC_SLAVE_ADDR<<1, data, 2, 100);
 800320e:	4e1f      	ldr	r6, [pc, #124]	; (800328c <ES2_setVMPP+0x80>)
{
 8003210:	b085      	sub	sp, #20
 8003212:	4604      	mov	r4, r0
 8003214:	460d      	mov	r5, r1
		HAL_I2C_Master_Receive(&hi2c1, DAC_SLAVE_ADDR<<1, data, 2, 100);
 8003216:	2764      	movs	r7, #100	; 0x64
 8003218:	2302      	movs	r3, #2
 800321a:	aa02      	add	r2, sp, #8
 800321c:	9700      	str	r7, [sp, #0]
 800321e:	21c0      	movs	r1, #192	; 0xc0
 8003220:	4630      	mov	r0, r6
 8003222:	f7fe f963 	bl	80014ec <HAL_I2C_Master_Receive>
	} while (!(data[0] & 0b10000000));
 8003226:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800322a:	061a      	lsls	r2, r3, #24
 800322c:	d5f4      	bpl.n	8003218 <ES2_setVMPP+0xc>


	// Check to see if regulation is already disabled
	if ((MPP_Voltage_mV <= 0) && (data[0] & 0b00000110))
 800322e:	2c00      	cmp	r4, #0
 8003230:	dc02      	bgt.n	8003238 <ES2_setVMPP+0x2c>
 8003232:	f013 0f06 	tst.w	r3, #6
 8003236:	d11f      	bne.n	8003278 <ES2_setVMPP+0x6c>
		return;

	// Calculates the required DAC voltage to bias the feedback 
	DAC_setting = 357 - ((unsigned long) 984 * MPP_Voltage_mV >> 16);
 8003238:	f44f 7376 	mov.w	r3, #984	; 0x3d8
 800323c:	4363      	muls	r3, r4
 800323e:	0c1b      	lsrs	r3, r3, #16
 8003240:	f1c3 0365 	rsb	r3, r3, #101	; 0x65

	if (data[1] != DAC_setting)
 8003244:	f89d 2009 	ldrb.w	r2, [sp, #9]
	DAC_setting = 357 - ((unsigned long) 984 * MPP_Voltage_mV >> 16);
 8003248:	b2db      	uxtb	r3, r3
	if (data[1] != DAC_setting)
 800324a:	429a      	cmp	r2, r3
 800324c:	d014      	beq.n	8003278 <ES2_setVMPP+0x6c>
	{
		if (MPP_Voltage_mV > 0)
 800324e:	2c00      	cmp	r4, #0
 8003250:	dd14      	ble.n	800327c <ES2_setVMPP+0x70>
		{
			// Formats data for transmission
			Control = writeEEPROM ? 0x70 : 0x50;
 8003252:	2d00      	cmp	r5, #0
 8003254:	bf14      	ite	ne
 8003256:	2270      	movne	r2, #112	; 0x70
 8003258:	2250      	moveq	r2, #80	; 0x50
			Control = writeEEPROM ? 0x76 : 0x56;
			Hbyte = 0x00;
			Lbyte = 0x00;
		}
		tmp[0] = Control;
		tmp[1] = Hbyte;
 800325a:	f88d 300d 	strb.w	r3, [sp, #13]
		tmp[2] = Lbyte;
 800325e:	2300      	movs	r3, #0
 8003260:	f88d 300e 	strb.w	r3, [sp, #14]

		// Write value to DAC
		HAL_I2C_Master_Transmit(&hi2c1, DAC_SLAVE_ADDR<<1, tmp, 3, 100);
 8003264:	2364      	movs	r3, #100	; 0x64
		tmp[0] = Control;
 8003266:	f88d 200c 	strb.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(&hi2c1, DAC_SLAVE_ADDR<<1, tmp, 3, 100);
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	aa03      	add	r2, sp, #12
 800326e:	2303      	movs	r3, #3
 8003270:	21c0      	movs	r1, #192	; 0xc0
 8003272:	4806      	ldr	r0, [pc, #24]	; (800328c <ES2_setVMPP+0x80>)
 8003274:	f7fe f8a6 	bl	80013c4 <HAL_I2C_Master_Transmit>
	}

	return;
}
 8003278:	b005      	add	sp, #20
 800327a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Hbyte = 0x00;
 800327c:	2d00      	cmp	r5, #0
 800327e:	f04f 0300 	mov.w	r3, #0
 8003282:	bf14      	ite	ne
 8003284:	2276      	movne	r2, #118	; 0x76
 8003286:	2256      	moveq	r2, #86	; 0x56
 8003288:	e7e7      	b.n	800325a <ES2_setVMPP+0x4e>
 800328a:	bf00      	nop
 800328c:	200000e0 	.word	0x200000e0

08003290 <ES2_batteryVoltage>:

// Returns battery voltage from fuel gauge in mV
uint16_t ES2_batteryVoltage()
{
	uint16_t voltage = ES2_readCommand(FG_SLAVE_ADDR, 0x04);
 8003290:	2104      	movs	r1, #4
 8003292:	2055      	movs	r0, #85	; 0x55
 8003294:	f7ff bd46 	b.w	8002d24 <ES2_readCommand>

08003298 <ES2_batteryCurrent>:
	return voltage;
}

// Returns 1 second average of current from fuel gauge in mA
int16_t ES2_batteryCurrent()
{
 8003298:	b508      	push	{r3, lr}
	int16_t current = ES2_readCommand(FG_SLAVE_ADDR, 0x10);
 800329a:	2110      	movs	r1, #16
 800329c:	2055      	movs	r0, #85	; 0x55
 800329e:	f7ff fd41 	bl	8002d24 <ES2_readCommand>
	return current;
}
 80032a2:	b200      	sxth	r0, r0
 80032a4:	bd08      	pop	{r3, pc}

080032a6 <ES2_temperature>:

// Returns temperature from fuel gauge in tenths of a degree Celsius (0.1 C)
int16_t ES2_temperature()
{
 80032a6:	b508      	push	{r3, lr}
	int16_t temp = ES2_readCommand(FG_SLAVE_ADDR, 0x02);
 80032a8:	2102      	movs	r1, #2
 80032aa:	2055      	movs	r0, #85	; 0x55
 80032ac:	f7ff fd3a 	bl	8002d24 <ES2_readCommand>
	temp -= 2732;
 80032b0:	f6a0 20ac 	subw	r0, r0, #2732	; 0xaac
	return temp;
}
 80032b4:	b200      	sxth	r0, r0
 80032b6:	bd08      	pop	{r3, pc}

080032b8 <ES2_SOC>:

// Returns state-of-charge from fuel gauge in percent of full charge (1%)
uint16_t ES2_SOC()
{
	uint16_t SOC = ES2_readCommand(FG_SLAVE_ADDR, 0x1C);
 80032b8:	211c      	movs	r1, #28
 80032ba:	2055      	movs	r0, #85	; 0x55
 80032bc:	f7ff bd32 	b.w	8002d24 <ES2_readCommand>

080032c0 <ES2_fullChargeCapacity>:
}

// Returns full-charge capacity from fuel gauge in mAh
uint16_t ES2_fullChargeCapacity()
{
	uint16_t fullChargeCapacity = ES2_readCommand(FG_SLAVE_ADDR, 0x0E);
 80032c0:	210e      	movs	r1, #14
 80032c2:	2055      	movs	r0, #85	; 0x55
 80032c4:	f7ff bd2e 	b.w	8002d24 <ES2_readCommand>

080032c8 <ES2_remainingCapacity>:
}

// Returns remaining capacity from fuel gauge in mAh
uint16_t ES2_remainingCapacity()
{
	uint16_t remainingCapacity = ES2_readCommand(FG_SLAVE_ADDR, 0x0C);
 80032c8:	210c      	movs	r1, #12
 80032ca:	2055      	movs	r0, #85	; 0x55
 80032cc:	f7ff bd2a 	b.w	8002d24 <ES2_readCommand>

080032d0 <ES2_inputVoltage>:
//		voltage += ES2_analogRead(analogChannel);
//	voltage = voltage >> 2;
//	voltage = (unsigned long) 25000 * voltage / 4095;

	return voltage;
}
 80032d0:	2000      	movs	r0, #0
 80032d2:	4770      	bx	lr

080032d4 <ES2_begin>:

// Set up energyShield 2 for use
int ES2_begin()
{
 80032d4:	b513      	push	{r0, r1, r4, lr}
	int error = 0;

	es_batteryCapacity = BATTERY_CAPACITY;
 80032d6:	4c0d      	ldr	r4, [pc, #52]	; (800330c <ES2_begin+0x38>)
 80032d8:	f44f 63e1 	mov.w	r3, #1800	; 0x708


	// Setup RTC
	ES2_writeByte(RTC_SLAVE_ADDR, 0x00, 0x49); // Normal Mode, Run (Not Stop), No Reset, No Correction, 24-Hour, 12.5pF
 80032dc:	2249      	movs	r2, #73	; 0x49
 80032de:	2100      	movs	r1, #0
 80032e0:	2051      	movs	r0, #81	; 0x51
	es_batteryCapacity = BATTERY_CAPACITY;
 80032e2:	8023      	strh	r3, [r4, #0]
	ES2_writeByte(RTC_SLAVE_ADDR, 0x00, 0x49); // Normal Mode, Run (Not Stop), No Reset, No Correction, 24-Hour, 12.5pF
 80032e4:	f7ff fcd2 	bl	8002c8c <ES2_writeByte>
	ES2_writeByte(RTC_SLAVE_ADDR, 0x01, 0xC7); // Alarm Interrupt Enabled, Leave Alarm Flag Unchanged, Disable MI, HMI, and TF, No CLKOUT
 80032e8:	22c7      	movs	r2, #199	; 0xc7
 80032ea:	2101      	movs	r1, #1
 80032ec:	2051      	movs	r0, #81	; 0x51
 80032ee:	f7ff fccd 	bl	8002c8c <ES2_writeByte>
	ES2_clearAlarms();
 80032f2:	f7ff ff47 	bl	8003184 <ES2_clearAlarms>

	// Setup Fuel Gauge	
	error |= ES2_setupFuelGauge(FG_SLAVE_ADDR, es_batteryCapacity, BATTERY_TERMVOLT_MV, BATTERY_TERMCUR_MA, ALARM_SOC); // Write correct RAM values
 80032f6:	230a      	movs	r3, #10
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	8821      	ldrh	r1, [r4, #0]
 80032fc:	2341      	movs	r3, #65	; 0x41
 80032fe:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003302:	2055      	movs	r0, #85	; 0x55
 8003304:	f7ff fd51 	bl	8002daa <ES2_setupFuelGauge>

	return error;
}
 8003308:	b002      	add	sp, #8
 800330a:	bd10      	pop	{r4, pc}
 800330c:	200001b8 	.word	0x200001b8

08003310 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003310:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003312:	2214      	movs	r2, #20
{
 8003314:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003316:	eb0d 0002 	add.w	r0, sp, r2
 800331a:	2100      	movs	r1, #0
 800331c:	f000 fbce 	bl	8003abc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003320:	4b21      	ldr	r3, [pc, #132]	; (80033a8 <MX_GPIO_Init+0x98>)
 8003322:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003324:	f042 0204 	orr.w	r2, r2, #4
 8003328:	64da      	str	r2, [r3, #76]	; 0x4c
 800332a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800332c:	f002 0204 	and.w	r2, r2, #4
 8003330:	9201      	str	r2, [sp, #4]
 8003332:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003334:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003336:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800333a:	64da      	str	r2, [r3, #76]	; 0x4c
 800333c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800333e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003342:	9202      	str	r2, [sp, #8]
 8003344:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003346:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003348:	f042 0201 	orr.w	r2, r2, #1
 800334c:	64da      	str	r2, [r3, #76]	; 0x4c
 800334e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003350:	f002 0201 	and.w	r2, r2, #1
 8003354:	9203      	str	r2, [sp, #12]
 8003356:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003358:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800335a:	f042 0202 	orr.w	r2, r2, #2
 800335e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003362:	f003 0302 	and.w	r3, r3, #2

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003366:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003368:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800336a:	2120      	movs	r1, #32
 800336c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003370:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003372:	f7fd fe51 	bl	8001018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003376:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337a:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = B1_Pin;
 800337c:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800337e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003380:	4b0a      	ldr	r3, [pc, #40]	; (80033ac <MX_GPIO_Init+0x9c>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003382:	480b      	ldr	r0, [pc, #44]	; (80033b0 <MX_GPIO_Init+0xa0>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003384:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003386:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003388:	f7fd fd6a 	bl	8000e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800338c:	2320      	movs	r3, #32
 800338e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003390:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003392:	2301      	movs	r3, #1
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003394:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003398:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800339c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800339e:	f7fd fd5f 	bl	8000e60 <HAL_GPIO_Init>

}
 80033a2:	b00a      	add	sp, #40	; 0x28
 80033a4:	bd10      	pop	{r4, pc}
 80033a6:	bf00      	nop
 80033a8:	40021000 	.word	0x40021000
 80033ac:	10210000 	.word	0x10210000
 80033b0:	48000800 	.word	0x48000800

080033b4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80033b4:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 80033b6:	4812      	ldr	r0, [pc, #72]	; (8003400 <MX_I2C1_Init+0x4c>)
  hi2c1.Init.Timing = 0x10909CEC;
 80033b8:	4b12      	ldr	r3, [pc, #72]	; (8003404 <MX_I2C1_Init+0x50>)
 80033ba:	4913      	ldr	r1, [pc, #76]	; (8003408 <MX_I2C1_Init+0x54>)
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033bc:	2201      	movs	r2, #1
  hi2c1.Init.Timing = 0x10909CEC;
 80033be:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c1.Init.OwnAddress1 = 0;
 80033c2:	2300      	movs	r3, #0
 80033c4:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033c6:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033c8:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80033ca:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80033cc:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033ce:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033d0:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80033d2:	f7fd ffa5 	bl	8001320 <HAL_I2C_Init>
 80033d6:	b108      	cbz	r0, 80033dc <MX_I2C1_Init+0x28>
  {
    Error_Handler();
 80033d8:	f000 fa42 	bl	8003860 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80033dc:	2100      	movs	r1, #0
 80033de:	4808      	ldr	r0, [pc, #32]	; (8003400 <MX_I2C1_Init+0x4c>)
 80033e0:	f7fe fa90 	bl	8001904 <HAL_I2CEx_ConfigAnalogFilter>
 80033e4:	b108      	cbz	r0, 80033ea <MX_I2C1_Init+0x36>
  {
    Error_Handler();
 80033e6:	f000 fa3b 	bl	8003860 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80033ea:	2100      	movs	r1, #0
 80033ec:	4804      	ldr	r0, [pc, #16]	; (8003400 <MX_I2C1_Init+0x4c>)
 80033ee:	f7fe faaf 	bl	8001950 <HAL_I2CEx_ConfigDigitalFilter>
 80033f2:	b118      	cbz	r0, 80033fc <MX_I2C1_Init+0x48>
  {
    Error_Handler();
  }

}
 80033f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80033f8:	f000 ba32 	b.w	8003860 <Error_Handler>
 80033fc:	bd08      	pop	{r3, pc}
 80033fe:	bf00      	nop
 8003400:	200000e0 	.word	0x200000e0
 8003404:	10909cec 	.word	0x10909cec
 8003408:	40005400 	.word	0x40005400

0800340c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800340c:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 800340e:	4812      	ldr	r0, [pc, #72]	; (8003458 <MX_I2C2_Init+0x4c>)
  hi2c2.Init.Timing = 0x10909CEC;
 8003410:	4b12      	ldr	r3, [pc, #72]	; (800345c <MX_I2C2_Init+0x50>)
 8003412:	4913      	ldr	r1, [pc, #76]	; (8003460 <MX_I2C2_Init+0x54>)
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003414:	2201      	movs	r2, #1
  hi2c2.Init.Timing = 0x10909CEC;
 8003416:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c2.Init.OwnAddress1 = 0;
 800341a:	2300      	movs	r3, #0
 800341c:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800341e:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003420:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003422:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003424:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003426:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003428:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800342a:	f7fd ff79 	bl	8001320 <HAL_I2C_Init>
 800342e:	b108      	cbz	r0, 8003434 <MX_I2C2_Init+0x28>
  {
    Error_Handler();
 8003430:	f000 fa16 	bl	8003860 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003434:	2100      	movs	r1, #0
 8003436:	4808      	ldr	r0, [pc, #32]	; (8003458 <MX_I2C2_Init+0x4c>)
 8003438:	f7fe fa64 	bl	8001904 <HAL_I2CEx_ConfigAnalogFilter>
 800343c:	b108      	cbz	r0, 8003442 <MX_I2C2_Init+0x36>
  {
    Error_Handler();
 800343e:	f000 fa0f 	bl	8003860 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003442:	2100      	movs	r1, #0
 8003444:	4804      	ldr	r0, [pc, #16]	; (8003458 <MX_I2C2_Init+0x4c>)
 8003446:	f7fe fa83 	bl	8001950 <HAL_I2CEx_ConfigDigitalFilter>
 800344a:	b118      	cbz	r0, 8003454 <MX_I2C2_Init+0x48>
  {
    Error_Handler();
  }

}
 800344c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003450:	f000 ba06 	b.w	8003860 <Error_Handler>
 8003454:	bd08      	pop	{r3, pc}
 8003456:	bf00      	nop
 8003458:	2000012c 	.word	0x2000012c
 800345c:	10909cec 	.word	0x10909cec
 8003460:	40005800 	.word	0x40005800

08003464 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8003464:	b508      	push	{r3, lr}

  hi2c3.Instance = I2C3;
 8003466:	4812      	ldr	r0, [pc, #72]	; (80034b0 <MX_I2C3_Init+0x4c>)
  hi2c3.Init.Timing = 0x10909CEC;
 8003468:	4b12      	ldr	r3, [pc, #72]	; (80034b4 <MX_I2C3_Init+0x50>)
 800346a:	4913      	ldr	r1, [pc, #76]	; (80034b8 <MX_I2C3_Init+0x54>)
  hi2c3.Init.OwnAddress1 = 0;
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800346c:	2201      	movs	r2, #1
  hi2c3.Init.Timing = 0x10909CEC;
 800346e:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c3.Init.OwnAddress1 = 0;
 8003472:	2300      	movs	r3, #0
 8003474:	6083      	str	r3, [r0, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003476:	60c2      	str	r2, [r0, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003478:	6103      	str	r3, [r0, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800347a:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800347c:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800347e:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003480:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003482:	f7fd ff4d 	bl	8001320 <HAL_I2C_Init>
 8003486:	b108      	cbz	r0, 800348c <MX_I2C3_Init+0x28>
  {
    Error_Handler();
 8003488:	f000 f9ea 	bl	8003860 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800348c:	2100      	movs	r1, #0
 800348e:	4808      	ldr	r0, [pc, #32]	; (80034b0 <MX_I2C3_Init+0x4c>)
 8003490:	f7fe fa38 	bl	8001904 <HAL_I2CEx_ConfigAnalogFilter>
 8003494:	b108      	cbz	r0, 800349a <MX_I2C3_Init+0x36>
  {
    Error_Handler();
 8003496:	f000 f9e3 	bl	8003860 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800349a:	2100      	movs	r1, #0
 800349c:	4804      	ldr	r0, [pc, #16]	; (80034b0 <MX_I2C3_Init+0x4c>)
 800349e:	f7fe fa57 	bl	8001950 <HAL_I2CEx_ConfigDigitalFilter>
 80034a2:	b118      	cbz	r0, 80034ac <MX_I2C3_Init+0x48>
  {
    Error_Handler();
  }

}
 80034a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80034a8:	f000 b9da 	b.w	8003860 <Error_Handler>
 80034ac:	bd08      	pop	{r3, pc}
 80034ae:	bf00      	nop
 80034b0:	20000094 	.word	0x20000094
 80034b4:	10909cec 	.word	0x10909cec
 80034b8:	40005c00 	.word	0x40005c00

080034bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80034bc:	b510      	push	{r4, lr}
 80034be:	4604      	mov	r4, r0
 80034c0:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c2:	2214      	movs	r2, #20
 80034c4:	2100      	movs	r1, #0
 80034c6:	a807      	add	r0, sp, #28
 80034c8:	f000 faf8 	bl	8003abc <memset>
  if(i2cHandle->Instance==I2C1)
 80034cc:	6823      	ldr	r3, [r4, #0]
 80034ce:	4a38      	ldr	r2, [pc, #224]	; (80035b0 <HAL_I2C_MspInit+0xf4>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d122      	bne.n	800351a <HAL_I2C_MspInit+0x5e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034d4:	4c37      	ldr	r4, [pc, #220]	; (80035b4 <HAL_I2C_MspInit+0xf8>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034d6:	4838      	ldr	r0, [pc, #224]	; (80035b8 <HAL_I2C_MspInit+0xfc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034d8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80034da:	f043 0302 	orr.w	r3, r3, #2
 80034de:	64e3      	str	r3, [r4, #76]	; 0x4c
 80034e0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	9301      	str	r3, [sp, #4]
 80034e8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80034ea:	23c0      	movs	r3, #192	; 0xc0
 80034ec:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034ee:	2312      	movs	r3, #18
 80034f0:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034f2:	2301      	movs	r3, #1
 80034f4:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034f6:	2303      	movs	r3, #3
 80034f8:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034fa:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80034fc:	2304      	movs	r3, #4
 80034fe:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003500:	f7fd fcae 	bl	8000e60 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003504:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003506:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800350a:	65a3      	str	r3, [r4, #88]	; 0x58
 800350c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800350e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003512:	9302      	str	r3, [sp, #8]
 8003514:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8003516:	b00c      	add	sp, #48	; 0x30
 8003518:	bd10      	pop	{r4, pc}
  else if(i2cHandle->Instance==I2C2)
 800351a:	4a28      	ldr	r2, [pc, #160]	; (80035bc <HAL_I2C_MspInit+0x100>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d122      	bne.n	8003566 <HAL_I2C_MspInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003520:	4c24      	ldr	r4, [pc, #144]	; (80035b4 <HAL_I2C_MspInit+0xf8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003522:	4825      	ldr	r0, [pc, #148]	; (80035b8 <HAL_I2C_MspInit+0xfc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003524:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003526:	f043 0302 	orr.w	r3, r3, #2
 800352a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800352c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	9303      	str	r3, [sp, #12]
 8003534:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003536:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800353a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800353c:	2312      	movs	r3, #18
 800353e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003540:	2301      	movs	r3, #1
 8003542:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003544:	2303      	movs	r3, #3
 8003546:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003548:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800354a:	2304      	movs	r3, #4
 800354c:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800354e:	f7fd fc87 	bl	8000e60 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003552:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003554:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003558:	65a3      	str	r3, [r4, #88]	; 0x58
 800355a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800355c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003560:	9304      	str	r3, [sp, #16]
 8003562:	9b04      	ldr	r3, [sp, #16]
 8003564:	e7d7      	b.n	8003516 <HAL_I2C_MspInit+0x5a>
  else if(i2cHandle->Instance==I2C3)
 8003566:	4a16      	ldr	r2, [pc, #88]	; (80035c0 <HAL_I2C_MspInit+0x104>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d1d4      	bne.n	8003516 <HAL_I2C_MspInit+0x5a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800356c:	4c11      	ldr	r4, [pc, #68]	; (80035b4 <HAL_I2C_MspInit+0xf8>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800356e:	4815      	ldr	r0, [pc, #84]	; (80035c4 <HAL_I2C_MspInit+0x108>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003570:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003572:	f043 0304 	orr.w	r3, r3, #4
 8003576:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003578:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800357a:	f003 0304 	and.w	r3, r3, #4
 800357e:	9305      	str	r3, [sp, #20]
 8003580:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003582:	2212      	movs	r2, #18
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003584:	2303      	movs	r3, #3
 8003586:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003588:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800358a:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800358c:	2201      	movs	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800358e:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003590:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003592:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003594:	9209      	str	r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003596:	f7fd fc63 	bl	8000e60 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800359a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800359c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035a0:	65a3      	str	r3, [r4, #88]	; 0x58
 80035a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80035a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035a8:	9306      	str	r3, [sp, #24]
 80035aa:	9b06      	ldr	r3, [sp, #24]
}
 80035ac:	e7b3      	b.n	8003516 <HAL_I2C_MspInit+0x5a>
 80035ae:	bf00      	nop
 80035b0:	40005400 	.word	0x40005400
 80035b4:	40021000 	.word	0x40021000
 80035b8:	48000400 	.word	0x48000400
 80035bc:	40005800 	.word	0x40005800
 80035c0:	40005c00 	.word	0x40005c00
 80035c4:	48000800 	.word	0x48000800

080035c8 <MX_LPTIM1_Init>:

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{

  hlptim1.Instance = LPTIM1;
 80035c8:	480d      	ldr	r0, [pc, #52]	; (8003600 <MX_LPTIM1_Init+0x38>)
{
 80035ca:	b508      	push	{r3, lr}
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_ULPTIM;
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80035cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
  hlptim1.Instance = LPTIM1;
 80035d0:	4b0c      	ldr	r3, [pc, #48]	; (8003604 <MX_LPTIM1_Init+0x3c>)
 80035d2:	6003      	str	r3, [r0, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_ULPTIM;
 80035d4:	2201      	movs	r2, #1
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80035d6:	2300      	movs	r3, #0
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80035d8:	6141      	str	r1, [r0, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 80035da:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_ULPTIM;
 80035de:	6042      	str	r2, [r0, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80035e0:	6083      	str	r3, [r0, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 80035e2:	60c3      	str	r3, [r0, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 80035e4:	6103      	str	r3, [r0, #16]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80035e6:	6203      	str	r3, [r0, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80035e8:	6243      	str	r3, [r0, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 80035ea:	6281      	str	r1, [r0, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_COMP1;
 80035ec:	62c2      	str	r2, [r0, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80035ee:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80035f0:	f7fe f9d4 	bl	800199c <HAL_LPTIM_Init>
 80035f4:	b118      	cbz	r0, 80035fe <MX_LPTIM1_Init+0x36>
  {
    Error_Handler();
  }

}
 80035f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80035fa:	f000 b931 	b.w	8003860 <Error_Handler>
 80035fe:	bd08      	pop	{r3, pc}
 8003600:	20000178 	.word	0x20000178
 8003604:	40007c00 	.word	0x40007c00

08003608 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{

  if(lptimHandle->Instance==LPTIM1)
 8003608:	6802      	ldr	r2, [r0, #0]
 800360a:	4b08      	ldr	r3, [pc, #32]	; (800362c <HAL_LPTIM_MspInit+0x24>)
 800360c:	429a      	cmp	r2, r3
{
 800360e:	b082      	sub	sp, #8
  if(lptimHandle->Instance==LPTIM1)
 8003610:	d10a      	bne.n	8003628 <HAL_LPTIM_MspInit+0x20>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8003612:	f503 33ca 	add.w	r3, r3, #103424	; 0x19400
 8003616:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003618:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800361c:	659a      	str	r2, [r3, #88]	; 0x58
 800361e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003620:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003624:	9301      	str	r3, [sp, #4]
 8003626:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 8003628:	b002      	add	sp, #8
 800362a:	4770      	bx	lr
 800362c:	40007c00 	.word	0x40007c00

08003630 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003630:	b510      	push	{r4, lr}
 8003632:	b0b8      	sub	sp, #224	; 0xe0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8003634:	2244      	movs	r2, #68	; 0x44
 8003636:	2100      	movs	r1, #0
 8003638:	a805      	add	r0, sp, #20
 800363a:	f000 fa3f 	bl	8003abc <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 800363e:	2214      	movs	r2, #20
 8003640:	2100      	movs	r1, #0
 8003642:	4668      	mov	r0, sp
 8003644:	f000 fa3a 	bl	8003abc <memset>
	{ 0 };
	RCC_PeriphCLKInitTypeDef PeriphClkInit =
 8003648:	2100      	movs	r1, #0
 800364a:	2288      	movs	r2, #136	; 0x88
 800364c:	a816      	add	r0, sp, #88	; 0x58
 800364e:	f000 fa35 	bl	8003abc <memset>
	{ 0 };

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003652:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003656:	9208      	str	r2, [sp, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003658:	2210      	movs	r2, #16
 800365a:	9209      	str	r2, [sp, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLM = 1;
 800365c:	2201      	movs	r2, #1
 800365e:	9211      	str	r2, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8003660:	220a      	movs	r2, #10
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003662:	2302      	movs	r3, #2
	RCC_OscInitStruct.PLL.PLLN = 10;
 8003664:	9212      	str	r2, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003666:	a805      	add	r0, sp, #20
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003668:	2207      	movs	r2, #7
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800366a:	2400      	movs	r4, #0
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800366c:	9305      	str	r3, [sp, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800366e:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003670:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003672:	9213      	str	r2, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003674:	9314      	str	r3, [sp, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003676:	9315      	str	r3, [sp, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003678:	f7fe fab6 	bl	8001be8 <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800367c:	220f      	movs	r2, #15
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800367e:	2104      	movs	r1, #4
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003680:	2303      	movs	r3, #3
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003682:	4668      	mov	r0, sp
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003684:	e88d 001c 	stmia.w	sp, {r2, r3, r4}
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003688:	9403      	str	r4, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800368a:	9404      	str	r4, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800368c:	f7fe fcd2 	bl	8002034 <HAL_RCC_ClockConfig>
	{
		Error_Handler();
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2
 8003690:	f240 33c2 	movw	r3, #962	; 0x3c2
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
	PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
	PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
	PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003694:	a816      	add	r0, sp, #88	; 0x58
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2
 8003696:	9316      	str	r3, [sp, #88]	; 0x58
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003698:	9425      	str	r4, [sp, #148]	; 0x94
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800369a:	942a      	str	r4, [sp, #168]	; 0xa8
	PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800369c:	942b      	str	r4, [sp, #172]	; 0xac
	PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800369e:	942c      	str	r4, [sp, #176]	; 0xb0
	PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 80036a0:	942d      	str	r4, [sp, #180]	; 0xb4
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036a2:	f7fe fe89 	bl	80023b8 <HAL_RCCEx_PeriphCLKConfig>
	{
		Error_Handler();
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80036a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80036aa:	f7fe f9d1 	bl	8001a50 <HAL_PWREx_ControlVoltageScaling>
	{
		Error_Handler();
	}
}
 80036ae:	b038      	add	sp, #224	; 0xe0
 80036b0:	bd10      	pop	{r4, pc}
	...

080036b4 <main>:
{
 80036b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036b8:	ed2d 8b04 	vpush	{d8-d9}
 80036bc:	b087      	sub	sp, #28
	HAL_Init();
 80036be:	f7fd fb41 	bl	8000d44 <HAL_Init>
	SystemClock_Config();
 80036c2:	f7ff ffb5 	bl	8003630 <SystemClock_Config>
	MX_GPIO_Init();
 80036c6:	f7ff fe23 	bl	8003310 <MX_GPIO_Init>
	MX_I2C1_Init();
 80036ca:	f7ff fe73 	bl	80033b4 <MX_I2C1_Init>
	MX_I2C2_Init();
 80036ce:	f7ff fe9d 	bl	800340c <MX_I2C2_Init>
	MX_I2C3_Init();
 80036d2:	f7ff fec7 	bl	8003464 <MX_I2C3_Init>
	MX_LPTIM1_Init();
 80036d6:	f7ff ff77 	bl	80035c8 <MX_LPTIM1_Init>
	MX_USART2_UART_Init();
 80036da:	f000 f94b 	bl	8003974 <MX_USART2_UART_Init>
	if (ES2_begin())
 80036de:	f7ff fdf9 	bl	80032d4 <ES2_begin>
 80036e2:	b118      	cbz	r0, 80036ec <main+0x38>
		printf("! ERROR - Initialization Failed !");
 80036e4:	4850      	ldr	r0, [pc, #320]	; (8003828 <main+0x174>)
 80036e6:	f000 f9f1 	bl	8003acc <iprintf>
 80036ea:	e7fe      	b.n	80036ea <main+0x36>
	if (ES2_readVMPP() != -1)
 80036ec:	f7ff fd6a 	bl	80031c4 <ES2_readVMPP>
 80036f0:	3001      	adds	r0, #1
 80036f2:	d004      	beq.n	80036fe <main+0x4a>
		ES2_setVMPP(-1, 1); // Disable VMPP regulation to allow charging from any power supply (7V - 23V) and prevent excessive EEPROM writes
 80036f4:	2101      	movs	r1, #1
 80036f6:	f04f 30ff 	mov.w	r0, #4294967295
 80036fa:	f7ff fd87 	bl	800320c <ES2_setVMPP>
		printf("Temperature        = %f F\n", (temperature * 9.0 / 5.0) + 32.0);
 80036fe:	4f4b      	ldr	r7, [pc, #300]	; (800382c <main+0x178>)
 8003700:	4d4b      	ldr	r5, [pc, #300]	; (8003830 <main+0x17c>)
 8003702:	2600      	movs	r6, #0
 8003704:	2400      	movs	r4, #0
		float batteryVoltage = (float) ES2_batteryVoltage() / 1000.0;
 8003706:	f7ff fdc3 	bl	8003290 <ES2_batteryVoltage>
 800370a:	ee08 0a90 	vmov	s17, r0
		float batteryCurrent = (float) ES2_batteryCurrent() / 1000.0;
 800370e:	f7ff fdc3 	bl	8003298 <ES2_batteryCurrent>
 8003712:	ee09 0a90 	vmov	s19, r0
		uint16_t fullCapacity = ES2_fullChargeCapacity();
 8003716:	f7ff fdd3 	bl	80032c0 <ES2_fullChargeCapacity>
 800371a:	4682      	mov	sl, r0
		uint16_t remainingCapacity = ES2_remainingCapacity();
 800371c:	f7ff fdd4 	bl	80032c8 <ES2_remainingCapacity>
 8003720:	4681      	mov	r9, r0
		uint16_t stateOfCharge = ES2_SOC();
 8003722:	f7ff fdc9 	bl	80032b8 <ES2_SOC>
 8003726:	4680      	mov	r8, r0
		float inputVoltage = (float) ES2_inputVoltage(0) / 1000;
 8003728:	2000      	movs	r0, #0
 800372a:	f7ff fdd1 	bl	80032d0 <ES2_inputVoltage>
 800372e:	ee09 0a10 	vmov	s18, r0
		float temperature = (float) ES2_temperature() / 10;
 8003732:	f7ff fdb8 	bl	80032a6 <ES2_temperature>
		float batteryVoltage = (float) ES2_batteryVoltage() / 1000.0;
 8003736:	eef8 7a68 	vcvt.f32.u32	s15, s17
 800373a:	eddf 8a3e 	vldr	s17, [pc, #248]	; 8003834 <main+0x180>
		printf("Battery Voltage    = %f V\n", batteryVoltage);
 800373e:	ee87 7aa8 	vdiv.f32	s14, s15, s17
		float temperature = (float) ES2_temperature() / 10;
 8003742:	ee08 0a10 	vmov	s16, r0
		printf("Battery Voltage    = %f V\n", batteryVoltage);
 8003746:	ee17 0a10 	vmov	r0, s14
 800374a:	f7fc fef5 	bl	8000538 <__aeabi_f2d>
 800374e:	4602      	mov	r2, r0
 8003750:	460b      	mov	r3, r1
 8003752:	4839      	ldr	r0, [pc, #228]	; (8003838 <main+0x184>)
 8003754:	f000 f9ba 	bl	8003acc <iprintf>
		float batteryCurrent = (float) ES2_batteryCurrent() / 1000.0;
 8003758:	eef8 9ae9 	vcvt.f32.s32	s19, s19
		printf("Battery Current    = %f V\n", batteryCurrent);
 800375c:	eec9 7aa8 	vdiv.f32	s15, s19, s17
 8003760:	ee17 0a90 	vmov	r0, s15
 8003764:	f7fc fee8 	bl	8000538 <__aeabi_f2d>
 8003768:	4602      	mov	r2, r0
 800376a:	460b      	mov	r3, r1
 800376c:	4833      	ldr	r0, [pc, #204]	; (800383c <main+0x188>)
 800376e:	f000 f9ad 	bl	8003acc <iprintf>
		printf("Full Capacity      = %d mAh\n", fullCapacity);
 8003772:	4651      	mov	r1, sl
 8003774:	4832      	ldr	r0, [pc, #200]	; (8003840 <main+0x18c>)
 8003776:	f000 f9a9 	bl	8003acc <iprintf>
		printf("Remaining Capacity = %d mAh\n", remainingCapacity);
 800377a:	4649      	mov	r1, r9
 800377c:	4831      	ldr	r0, [pc, #196]	; (8003844 <main+0x190>)
 800377e:	f000 f9a5 	bl	8003acc <iprintf>
		printf("State of Charge    = %d %% \n", stateOfCharge);
 8003782:	4641      	mov	r1, r8
 8003784:	4830      	ldr	r0, [pc, #192]	; (8003848 <main+0x194>)
 8003786:	f000 f9a1 	bl	8003acc <iprintf>
		float inputVoltage = (float) ES2_inputVoltage(0) / 1000;
 800378a:	eeb8 9a49 	vcvt.f32.u32	s18, s18
		printf("Input Voltage      = %f V\n", inputVoltage);
 800378e:	eec9 7a28 	vdiv.f32	s15, s18, s17
 8003792:	ee17 0a90 	vmov	r0, s15
 8003796:	f7fc fecf 	bl	8000538 <__aeabi_f2d>
 800379a:	4602      	mov	r2, r0
 800379c:	460b      	mov	r3, r1
 800379e:	482b      	ldr	r0, [pc, #172]	; (800384c <main+0x198>)
 80037a0:	f000 f994 	bl	8003acc <iprintf>
		float temperature = (float) ES2_temperature() / 10;
 80037a4:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
		printf("Temperature        = %f F\n", (temperature * 9.0 / 5.0) + 32.0);
 80037a8:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80037ac:	ee88 7a27 	vdiv.f32	s14, s16, s15
 80037b0:	ee17 0a10 	vmov	r0, s14
 80037b4:	f7fc fec0 	bl	8000538 <__aeabi_f2d>
 80037b8:	4632      	mov	r2, r6
 80037ba:	463b      	mov	r3, r7
 80037bc:	f7fc ff10 	bl	80005e0 <__aeabi_dmul>
 80037c0:	4622      	mov	r2, r4
 80037c2:	462b      	mov	r3, r5
 80037c4:	f7fd f836 	bl	8000834 <__aeabi_ddiv>
 80037c8:	2200      	movs	r2, #0
 80037ca:	4b21      	ldr	r3, [pc, #132]	; (8003850 <main+0x19c>)
 80037cc:	f7fc fd56 	bl	800027c <__adddf3>
 80037d0:	4602      	mov	r2, r0
 80037d2:	460b      	mov	r3, r1
 80037d4:	481f      	ldr	r0, [pc, #124]	; (8003854 <main+0x1a0>)
 80037d6:	f000 f979 	bl	8003acc <iprintf>
		ES2_readClock();
 80037da:	f7ff fc8d 	bl	80030f8 <ES2_readClock>
		printf("\n\t %d:%d:%d \t %d-%d-%d\n", ES2_hour(), ES2_minute(), ES2_second(), ES2_month(), ES2_dayOfMonth(), ES2_year());
 80037de:	f7ff fcb9 	bl	8003154 <ES2_hour>
 80037e2:	4680      	mov	r8, r0
 80037e4:	f7ff fcb0 	bl	8003148 <ES2_minute>
 80037e8:	4681      	mov	r9, r0
 80037ea:	f7ff fca7 	bl	800313c <ES2_second>
 80037ee:	4682      	mov	sl, r0
 80037f0:	f7ff fcbc 	bl	800316c <ES2_month>
 80037f4:	4683      	mov	fp, r0
 80037f6:	f7ff fcb3 	bl	8003160 <ES2_dayOfMonth>
 80037fa:	9005      	str	r0, [sp, #20]
 80037fc:	f7ff fcbc 	bl	8003178 <ES2_year>
 8003800:	9b05      	ldr	r3, [sp, #20]
 8003802:	9002      	str	r0, [sp, #8]
 8003804:	9301      	str	r3, [sp, #4]
 8003806:	464a      	mov	r2, r9
 8003808:	4653      	mov	r3, sl
 800380a:	4641      	mov	r1, r8
 800380c:	f8cd b000 	str.w	fp, [sp]
 8003810:	4811      	ldr	r0, [pc, #68]	; (8003858 <main+0x1a4>)
 8003812:	f000 f95b 	bl	8003acc <iprintf>
		printf("\n\n\n");
 8003816:	4811      	ldr	r0, [pc, #68]	; (800385c <main+0x1a8>)
 8003818:	f000 f9cc 	bl	8003bb4 <puts>
		HAL_Delay(2000);
 800381c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003820:	f7fd fab4 	bl	8000d8c <HAL_Delay>
 8003824:	e76f      	b.n	8003706 <main+0x52>
 8003826:	bf00      	nop
 8003828:	080049ad 	.word	0x080049ad
 800382c:	40220000 	.word	0x40220000
 8003830:	40140000 	.word	0x40140000
 8003834:	447a0000 	.word	0x447a0000
 8003838:	080049cf 	.word	0x080049cf
 800383c:	080049ea 	.word	0x080049ea
 8003840:	08004a05 	.word	0x08004a05
 8003844:	08004a22 	.word	0x08004a22
 8003848:	08004a3f 	.word	0x08004a3f
 800384c:	08004a5c 	.word	0x08004a5c
 8003850:	40400000 	.word	0x40400000
 8003854:	08004a77 	.word	0x08004a77
 8003858:	08004a92 	.word	0x08004a92
 800385c:	08004aaa 	.word	0x08004aaa

08003860 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003860:	4770      	bx	lr
	...

08003864 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003864:	4b0a      	ldr	r3, [pc, #40]	; (8003890 <HAL_MspInit+0x2c>)
 8003866:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003868:	f042 0201 	orr.w	r2, r2, #1
 800386c:	661a      	str	r2, [r3, #96]	; 0x60
 800386e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8003870:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003872:	f002 0201 	and.w	r2, r2, #1
 8003876:	9200      	str	r2, [sp, #0]
 8003878:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800387a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800387c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003880:	659a      	str	r2, [r3, #88]	; 0x58
 8003882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003888:	9301      	str	r3, [sp, #4]
 800388a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800388c:	b002      	add	sp, #8
 800388e:	4770      	bx	lr
 8003890:	40021000 	.word	0x40021000

08003894 <NMI_Handler>:
 8003894:	4770      	bx	lr

08003896 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003896:	e7fe      	b.n	8003896 <HardFault_Handler>

08003898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003898:	e7fe      	b.n	8003898 <MemManage_Handler>

0800389a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800389a:	e7fe      	b.n	800389a <BusFault_Handler>

0800389c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800389c:	e7fe      	b.n	800389c <UsageFault_Handler>

0800389e <SVC_Handler>:
 800389e:	4770      	bx	lr

080038a0 <DebugMon_Handler>:
 80038a0:	4770      	bx	lr

080038a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038a2:	4770      	bx	lr

080038a4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038a4:	f7fd ba64 	b.w	8000d70 <HAL_IncTick>

080038a8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80038a8:	b570      	push	{r4, r5, r6, lr}
 80038aa:	460e      	mov	r6, r1
 80038ac:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038ae:	460c      	mov	r4, r1
 80038b0:	1ba3      	subs	r3, r4, r6
 80038b2:	429d      	cmp	r5, r3
 80038b4:	dc01      	bgt.n	80038ba <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80038b6:	4628      	mov	r0, r5
 80038b8:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80038ba:	f3af 8000 	nop.w
 80038be:	f804 0b01 	strb.w	r0, [r4], #1
 80038c2:	e7f5      	b.n	80038b0 <_read+0x8>

080038c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80038c4:	b570      	push	{r4, r5, r6, lr}
 80038c6:	460e      	mov	r6, r1
 80038c8:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038ca:	460c      	mov	r4, r1
 80038cc:	1ba3      	subs	r3, r4, r6
 80038ce:	429d      	cmp	r5, r3
 80038d0:	dc01      	bgt.n	80038d6 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80038d2:	4628      	mov	r0, r5
 80038d4:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80038d6:	f814 0b01 	ldrb.w	r0, [r4], #1
 80038da:	f3af 8000 	nop.w
 80038de:	e7f5      	b.n	80038cc <_write+0x8>

080038e0 <_sbrk>:

caddr_t _sbrk(int incr)
{
 80038e0:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80038e2:	4b0a      	ldr	r3, [pc, #40]	; (800390c <_sbrk+0x2c>)
 80038e4:	6819      	ldr	r1, [r3, #0]
{
 80038e6:	4602      	mov	r2, r0
	if (heap_end == 0)
 80038e8:	b909      	cbnz	r1, 80038ee <_sbrk+0xe>
		heap_end = &end;
 80038ea:	4909      	ldr	r1, [pc, #36]	; (8003910 <_sbrk+0x30>)
 80038ec:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80038ee:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80038f0:	4669      	mov	r1, sp
 80038f2:	4402      	add	r2, r0
 80038f4:	428a      	cmp	r2, r1
 80038f6:	d906      	bls.n	8003906 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80038f8:	f000 f8b6 	bl	8003a68 <__errno>
 80038fc:	230c      	movs	r3, #12
 80038fe:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003900:	f04f 30ff 	mov.w	r0, #4294967295
 8003904:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8003906:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8003908:	bd08      	pop	{r3, pc}
 800390a:	bf00      	nop
 800390c:	20000084 	.word	0x20000084
 8003910:	20000238 	.word	0x20000238

08003914 <_close>:

int _close(int file)
{
	return -1;
}
 8003914:	f04f 30ff 	mov.w	r0, #4294967295
 8003918:	4770      	bx	lr

0800391a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800391a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800391e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8003920:	2000      	movs	r0, #0
 8003922:	4770      	bx	lr

08003924 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8003924:	2001      	movs	r0, #1
 8003926:	4770      	bx	lr

08003928 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003928:	2000      	movs	r0, #0
 800392a:	4770      	bx	lr

0800392c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800392c:	490f      	ldr	r1, [pc, #60]	; (800396c <SystemInit+0x40>)
 800392e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003932:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800393a:	4b0d      	ldr	r3, [pc, #52]	; (8003970 <SystemInit+0x44>)
 800393c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800393e:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8003940:	f042 0201 	orr.w	r2, r2, #1
 8003944:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8003946:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800394e:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8003952:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003954:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003958:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003960:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003962:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003964:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003968:	608b      	str	r3, [r1, #8]
 800396a:	4770      	bx	lr
 800396c:	e000ed00 	.word	0xe000ed00
 8003970:	40021000 	.word	0x40021000

08003974 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003974:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8003976:	480c      	ldr	r0, [pc, #48]	; (80039a8 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 115200;
 8003978:	4b0c      	ldr	r3, [pc, #48]	; (80039ac <MX_USART2_UART_Init+0x38>)
 800397a:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 800397e:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003982:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003984:	2300      	movs	r3, #0
 8003986:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003988:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800398a:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800398c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800398e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003990:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003992:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003994:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003996:	f7ff f946 	bl	8002c26 <HAL_UART_Init>
 800399a:	b118      	cbz	r0, 80039a4 <MX_USART2_UART_Init+0x30>
  {
    Error_Handler();
  }

}
 800399c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80039a0:	f7ff bf5e 	b.w	8003860 <Error_Handler>
 80039a4:	bd08      	pop	{r3, pc}
 80039a6:	bf00      	nop
 80039a8:	200001bc 	.word	0x200001bc
 80039ac:	40004400 	.word	0x40004400

080039b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80039b0:	b510      	push	{r4, lr}
 80039b2:	4604      	mov	r4, r0
 80039b4:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039b6:	2214      	movs	r2, #20
 80039b8:	2100      	movs	r1, #0
 80039ba:	a803      	add	r0, sp, #12
 80039bc:	f000 f87e 	bl	8003abc <memset>
  if(uartHandle->Instance==USART2)
 80039c0:	6822      	ldr	r2, [r4, #0]
 80039c2:	4b13      	ldr	r3, [pc, #76]	; (8003a10 <HAL_UART_MspInit+0x60>)
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d120      	bne.n	8003a0a <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80039c8:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039cc:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 80039ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80039d0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80039d4:	659a      	str	r2, [r3, #88]	; 0x58
 80039d6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80039d8:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80039dc:	9201      	str	r2, [sp, #4]
 80039de:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80039e2:	f042 0201 	orr.w	r2, r2, #1
 80039e6:	64da      	str	r2, [r3, #76]	; 0x4c
 80039e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	9302      	str	r3, [sp, #8]
 80039f0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80039f2:	230c      	movs	r3, #12
 80039f4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f6:	2302      	movs	r3, #2
 80039f8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039fa:	2303      	movs	r3, #3
 80039fc:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a02:	2307      	movs	r3, #7
 8003a04:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a06:	f7fd fa2b 	bl	8000e60 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003a0a:	b008      	add	sp, #32
 8003a0c:	bd10      	pop	{r4, pc}
 8003a0e:	bf00      	nop
 8003a10:	40004400 	.word	0x40004400

08003a14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003a14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a4c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003a18:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003a1a:	e003      	b.n	8003a24 <LoopCopyDataInit>

08003a1c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003a1c:	4b0c      	ldr	r3, [pc, #48]	; (8003a50 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003a1e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003a20:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003a22:	3104      	adds	r1, #4

08003a24 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003a24:	480b      	ldr	r0, [pc, #44]	; (8003a54 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003a26:	4b0c      	ldr	r3, [pc, #48]	; (8003a58 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003a28:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003a2a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003a2c:	d3f6      	bcc.n	8003a1c <CopyDataInit>
	ldr	r2, =_sbss
 8003a2e:	4a0b      	ldr	r2, [pc, #44]	; (8003a5c <LoopForever+0x12>)
	b	LoopFillZerobss
 8003a30:	e002      	b.n	8003a38 <LoopFillZerobss>

08003a32 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003a32:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003a34:	f842 3b04 	str.w	r3, [r2], #4

08003a38 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003a38:	4b09      	ldr	r3, [pc, #36]	; (8003a60 <LoopForever+0x16>)
	cmp	r2, r3
 8003a3a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003a3c:	d3f9      	bcc.n	8003a32 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003a3e:	f7ff ff75 	bl	800392c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a42:	f000 f817 	bl	8003a74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003a46:	f7ff fe35 	bl	80036b4 <main>

08003a4a <LoopForever>:

LoopForever:
    b LoopForever
 8003a4a:	e7fe      	b.n	8003a4a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003a4c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003a50:	08004ba0 	.word	0x08004ba0
	ldr	r0, =_sdata
 8003a54:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003a58:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 8003a5c:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 8003a60:	20000238 	.word	0x20000238

08003a64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003a64:	e7fe      	b.n	8003a64 <ADC1_2_IRQHandler>
	...

08003a68 <__errno>:
 8003a68:	4b01      	ldr	r3, [pc, #4]	; (8003a70 <__errno+0x8>)
 8003a6a:	6818      	ldr	r0, [r3, #0]
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	20000004 	.word	0x20000004

08003a74 <__libc_init_array>:
 8003a74:	b570      	push	{r4, r5, r6, lr}
 8003a76:	4e0d      	ldr	r6, [pc, #52]	; (8003aac <__libc_init_array+0x38>)
 8003a78:	4c0d      	ldr	r4, [pc, #52]	; (8003ab0 <__libc_init_array+0x3c>)
 8003a7a:	1ba4      	subs	r4, r4, r6
 8003a7c:	10a4      	asrs	r4, r4, #2
 8003a7e:	2500      	movs	r5, #0
 8003a80:	42a5      	cmp	r5, r4
 8003a82:	d109      	bne.n	8003a98 <__libc_init_array+0x24>
 8003a84:	4e0b      	ldr	r6, [pc, #44]	; (8003ab4 <__libc_init_array+0x40>)
 8003a86:	4c0c      	ldr	r4, [pc, #48]	; (8003ab8 <__libc_init_array+0x44>)
 8003a88:	f000 ff7c 	bl	8004984 <_init>
 8003a8c:	1ba4      	subs	r4, r4, r6
 8003a8e:	10a4      	asrs	r4, r4, #2
 8003a90:	2500      	movs	r5, #0
 8003a92:	42a5      	cmp	r5, r4
 8003a94:	d105      	bne.n	8003aa2 <__libc_init_array+0x2e>
 8003a96:	bd70      	pop	{r4, r5, r6, pc}
 8003a98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a9c:	4798      	blx	r3
 8003a9e:	3501      	adds	r5, #1
 8003aa0:	e7ee      	b.n	8003a80 <__libc_init_array+0xc>
 8003aa2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003aa6:	4798      	blx	r3
 8003aa8:	3501      	adds	r5, #1
 8003aaa:	e7f2      	b.n	8003a92 <__libc_init_array+0x1e>
 8003aac:	08004b98 	.word	0x08004b98
 8003ab0:	08004b98 	.word	0x08004b98
 8003ab4:	08004b98 	.word	0x08004b98
 8003ab8:	08004b9c 	.word	0x08004b9c

08003abc <memset>:
 8003abc:	4402      	add	r2, r0
 8003abe:	4603      	mov	r3, r0
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d100      	bne.n	8003ac6 <memset+0xa>
 8003ac4:	4770      	bx	lr
 8003ac6:	f803 1b01 	strb.w	r1, [r3], #1
 8003aca:	e7f9      	b.n	8003ac0 <memset+0x4>

08003acc <iprintf>:
 8003acc:	b40f      	push	{r0, r1, r2, r3}
 8003ace:	4b0a      	ldr	r3, [pc, #40]	; (8003af8 <iprintf+0x2c>)
 8003ad0:	b513      	push	{r0, r1, r4, lr}
 8003ad2:	681c      	ldr	r4, [r3, #0]
 8003ad4:	b124      	cbz	r4, 8003ae0 <iprintf+0x14>
 8003ad6:	69a3      	ldr	r3, [r4, #24]
 8003ad8:	b913      	cbnz	r3, 8003ae0 <iprintf+0x14>
 8003ada:	4620      	mov	r0, r4
 8003adc:	f000 fa24 	bl	8003f28 <__sinit>
 8003ae0:	ab05      	add	r3, sp, #20
 8003ae2:	9a04      	ldr	r2, [sp, #16]
 8003ae4:	68a1      	ldr	r1, [r4, #8]
 8003ae6:	9301      	str	r3, [sp, #4]
 8003ae8:	4620      	mov	r0, r4
 8003aea:	f000 fbe1 	bl	80042b0 <_vfiprintf_r>
 8003aee:	b002      	add	sp, #8
 8003af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003af4:	b004      	add	sp, #16
 8003af6:	4770      	bx	lr
 8003af8:	20000004 	.word	0x20000004

08003afc <_puts_r>:
 8003afc:	b570      	push	{r4, r5, r6, lr}
 8003afe:	460e      	mov	r6, r1
 8003b00:	4605      	mov	r5, r0
 8003b02:	b118      	cbz	r0, 8003b0c <_puts_r+0x10>
 8003b04:	6983      	ldr	r3, [r0, #24]
 8003b06:	b90b      	cbnz	r3, 8003b0c <_puts_r+0x10>
 8003b08:	f000 fa0e 	bl	8003f28 <__sinit>
 8003b0c:	69ab      	ldr	r3, [r5, #24]
 8003b0e:	68ac      	ldr	r4, [r5, #8]
 8003b10:	b913      	cbnz	r3, 8003b18 <_puts_r+0x1c>
 8003b12:	4628      	mov	r0, r5
 8003b14:	f000 fa08 	bl	8003f28 <__sinit>
 8003b18:	4b23      	ldr	r3, [pc, #140]	; (8003ba8 <_puts_r+0xac>)
 8003b1a:	429c      	cmp	r4, r3
 8003b1c:	d117      	bne.n	8003b4e <_puts_r+0x52>
 8003b1e:	686c      	ldr	r4, [r5, #4]
 8003b20:	89a3      	ldrh	r3, [r4, #12]
 8003b22:	071b      	lsls	r3, r3, #28
 8003b24:	d51d      	bpl.n	8003b62 <_puts_r+0x66>
 8003b26:	6923      	ldr	r3, [r4, #16]
 8003b28:	b1db      	cbz	r3, 8003b62 <_puts_r+0x66>
 8003b2a:	3e01      	subs	r6, #1
 8003b2c:	68a3      	ldr	r3, [r4, #8]
 8003b2e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003b32:	3b01      	subs	r3, #1
 8003b34:	60a3      	str	r3, [r4, #8]
 8003b36:	b9e9      	cbnz	r1, 8003b74 <_puts_r+0x78>
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	da2e      	bge.n	8003b9a <_puts_r+0x9e>
 8003b3c:	4622      	mov	r2, r4
 8003b3e:	210a      	movs	r1, #10
 8003b40:	4628      	mov	r0, r5
 8003b42:	f000 f83f 	bl	8003bc4 <__swbuf_r>
 8003b46:	3001      	adds	r0, #1
 8003b48:	d011      	beq.n	8003b6e <_puts_r+0x72>
 8003b4a:	200a      	movs	r0, #10
 8003b4c:	bd70      	pop	{r4, r5, r6, pc}
 8003b4e:	4b17      	ldr	r3, [pc, #92]	; (8003bac <_puts_r+0xb0>)
 8003b50:	429c      	cmp	r4, r3
 8003b52:	d101      	bne.n	8003b58 <_puts_r+0x5c>
 8003b54:	68ac      	ldr	r4, [r5, #8]
 8003b56:	e7e3      	b.n	8003b20 <_puts_r+0x24>
 8003b58:	4b15      	ldr	r3, [pc, #84]	; (8003bb0 <_puts_r+0xb4>)
 8003b5a:	429c      	cmp	r4, r3
 8003b5c:	bf08      	it	eq
 8003b5e:	68ec      	ldreq	r4, [r5, #12]
 8003b60:	e7de      	b.n	8003b20 <_puts_r+0x24>
 8003b62:	4621      	mov	r1, r4
 8003b64:	4628      	mov	r0, r5
 8003b66:	f000 f87f 	bl	8003c68 <__swsetup_r>
 8003b6a:	2800      	cmp	r0, #0
 8003b6c:	d0dd      	beq.n	8003b2a <_puts_r+0x2e>
 8003b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8003b72:	bd70      	pop	{r4, r5, r6, pc}
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	da04      	bge.n	8003b82 <_puts_r+0x86>
 8003b78:	69a2      	ldr	r2, [r4, #24]
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	db06      	blt.n	8003b8c <_puts_r+0x90>
 8003b7e:	290a      	cmp	r1, #10
 8003b80:	d004      	beq.n	8003b8c <_puts_r+0x90>
 8003b82:	6823      	ldr	r3, [r4, #0]
 8003b84:	1c5a      	adds	r2, r3, #1
 8003b86:	6022      	str	r2, [r4, #0]
 8003b88:	7019      	strb	r1, [r3, #0]
 8003b8a:	e7cf      	b.n	8003b2c <_puts_r+0x30>
 8003b8c:	4622      	mov	r2, r4
 8003b8e:	4628      	mov	r0, r5
 8003b90:	f000 f818 	bl	8003bc4 <__swbuf_r>
 8003b94:	3001      	adds	r0, #1
 8003b96:	d1c9      	bne.n	8003b2c <_puts_r+0x30>
 8003b98:	e7e9      	b.n	8003b6e <_puts_r+0x72>
 8003b9a:	6823      	ldr	r3, [r4, #0]
 8003b9c:	200a      	movs	r0, #10
 8003b9e:	1c5a      	adds	r2, r3, #1
 8003ba0:	6022      	str	r2, [r4, #0]
 8003ba2:	7018      	strb	r0, [r3, #0]
 8003ba4:	bd70      	pop	{r4, r5, r6, pc}
 8003ba6:	bf00      	nop
 8003ba8:	08004b1c 	.word	0x08004b1c
 8003bac:	08004b3c 	.word	0x08004b3c
 8003bb0:	08004afc 	.word	0x08004afc

08003bb4 <puts>:
 8003bb4:	4b02      	ldr	r3, [pc, #8]	; (8003bc0 <puts+0xc>)
 8003bb6:	4601      	mov	r1, r0
 8003bb8:	6818      	ldr	r0, [r3, #0]
 8003bba:	f7ff bf9f 	b.w	8003afc <_puts_r>
 8003bbe:	bf00      	nop
 8003bc0:	20000004 	.word	0x20000004

08003bc4 <__swbuf_r>:
 8003bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bc6:	460e      	mov	r6, r1
 8003bc8:	4614      	mov	r4, r2
 8003bca:	4605      	mov	r5, r0
 8003bcc:	b118      	cbz	r0, 8003bd6 <__swbuf_r+0x12>
 8003bce:	6983      	ldr	r3, [r0, #24]
 8003bd0:	b90b      	cbnz	r3, 8003bd6 <__swbuf_r+0x12>
 8003bd2:	f000 f9a9 	bl	8003f28 <__sinit>
 8003bd6:	4b21      	ldr	r3, [pc, #132]	; (8003c5c <__swbuf_r+0x98>)
 8003bd8:	429c      	cmp	r4, r3
 8003bda:	d12a      	bne.n	8003c32 <__swbuf_r+0x6e>
 8003bdc:	686c      	ldr	r4, [r5, #4]
 8003bde:	69a3      	ldr	r3, [r4, #24]
 8003be0:	60a3      	str	r3, [r4, #8]
 8003be2:	89a3      	ldrh	r3, [r4, #12]
 8003be4:	071a      	lsls	r2, r3, #28
 8003be6:	d52e      	bpl.n	8003c46 <__swbuf_r+0x82>
 8003be8:	6923      	ldr	r3, [r4, #16]
 8003bea:	b363      	cbz	r3, 8003c46 <__swbuf_r+0x82>
 8003bec:	6923      	ldr	r3, [r4, #16]
 8003bee:	6820      	ldr	r0, [r4, #0]
 8003bf0:	1ac0      	subs	r0, r0, r3
 8003bf2:	6963      	ldr	r3, [r4, #20]
 8003bf4:	b2f6      	uxtb	r6, r6
 8003bf6:	4298      	cmp	r0, r3
 8003bf8:	4637      	mov	r7, r6
 8003bfa:	db04      	blt.n	8003c06 <__swbuf_r+0x42>
 8003bfc:	4621      	mov	r1, r4
 8003bfe:	4628      	mov	r0, r5
 8003c00:	f000 f928 	bl	8003e54 <_fflush_r>
 8003c04:	bb28      	cbnz	r0, 8003c52 <__swbuf_r+0x8e>
 8003c06:	68a3      	ldr	r3, [r4, #8]
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	60a3      	str	r3, [r4, #8]
 8003c0c:	6823      	ldr	r3, [r4, #0]
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	6022      	str	r2, [r4, #0]
 8003c12:	701e      	strb	r6, [r3, #0]
 8003c14:	6963      	ldr	r3, [r4, #20]
 8003c16:	3001      	adds	r0, #1
 8003c18:	4298      	cmp	r0, r3
 8003c1a:	d004      	beq.n	8003c26 <__swbuf_r+0x62>
 8003c1c:	89a3      	ldrh	r3, [r4, #12]
 8003c1e:	07db      	lsls	r3, r3, #31
 8003c20:	d519      	bpl.n	8003c56 <__swbuf_r+0x92>
 8003c22:	2e0a      	cmp	r6, #10
 8003c24:	d117      	bne.n	8003c56 <__swbuf_r+0x92>
 8003c26:	4621      	mov	r1, r4
 8003c28:	4628      	mov	r0, r5
 8003c2a:	f000 f913 	bl	8003e54 <_fflush_r>
 8003c2e:	b190      	cbz	r0, 8003c56 <__swbuf_r+0x92>
 8003c30:	e00f      	b.n	8003c52 <__swbuf_r+0x8e>
 8003c32:	4b0b      	ldr	r3, [pc, #44]	; (8003c60 <__swbuf_r+0x9c>)
 8003c34:	429c      	cmp	r4, r3
 8003c36:	d101      	bne.n	8003c3c <__swbuf_r+0x78>
 8003c38:	68ac      	ldr	r4, [r5, #8]
 8003c3a:	e7d0      	b.n	8003bde <__swbuf_r+0x1a>
 8003c3c:	4b09      	ldr	r3, [pc, #36]	; (8003c64 <__swbuf_r+0xa0>)
 8003c3e:	429c      	cmp	r4, r3
 8003c40:	bf08      	it	eq
 8003c42:	68ec      	ldreq	r4, [r5, #12]
 8003c44:	e7cb      	b.n	8003bde <__swbuf_r+0x1a>
 8003c46:	4621      	mov	r1, r4
 8003c48:	4628      	mov	r0, r5
 8003c4a:	f000 f80d 	bl	8003c68 <__swsetup_r>
 8003c4e:	2800      	cmp	r0, #0
 8003c50:	d0cc      	beq.n	8003bec <__swbuf_r+0x28>
 8003c52:	f04f 37ff 	mov.w	r7, #4294967295
 8003c56:	4638      	mov	r0, r7
 8003c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	08004b1c 	.word	0x08004b1c
 8003c60:	08004b3c 	.word	0x08004b3c
 8003c64:	08004afc 	.word	0x08004afc

08003c68 <__swsetup_r>:
 8003c68:	4b32      	ldr	r3, [pc, #200]	; (8003d34 <__swsetup_r+0xcc>)
 8003c6a:	b570      	push	{r4, r5, r6, lr}
 8003c6c:	681d      	ldr	r5, [r3, #0]
 8003c6e:	4606      	mov	r6, r0
 8003c70:	460c      	mov	r4, r1
 8003c72:	b125      	cbz	r5, 8003c7e <__swsetup_r+0x16>
 8003c74:	69ab      	ldr	r3, [r5, #24]
 8003c76:	b913      	cbnz	r3, 8003c7e <__swsetup_r+0x16>
 8003c78:	4628      	mov	r0, r5
 8003c7a:	f000 f955 	bl	8003f28 <__sinit>
 8003c7e:	4b2e      	ldr	r3, [pc, #184]	; (8003d38 <__swsetup_r+0xd0>)
 8003c80:	429c      	cmp	r4, r3
 8003c82:	d10f      	bne.n	8003ca4 <__swsetup_r+0x3c>
 8003c84:	686c      	ldr	r4, [r5, #4]
 8003c86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	0715      	lsls	r5, r2, #28
 8003c8e:	d42c      	bmi.n	8003cea <__swsetup_r+0x82>
 8003c90:	06d0      	lsls	r0, r2, #27
 8003c92:	d411      	bmi.n	8003cb8 <__swsetup_r+0x50>
 8003c94:	2209      	movs	r2, #9
 8003c96:	6032      	str	r2, [r6, #0]
 8003c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c9c:	81a3      	strh	r3, [r4, #12]
 8003c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca2:	bd70      	pop	{r4, r5, r6, pc}
 8003ca4:	4b25      	ldr	r3, [pc, #148]	; (8003d3c <__swsetup_r+0xd4>)
 8003ca6:	429c      	cmp	r4, r3
 8003ca8:	d101      	bne.n	8003cae <__swsetup_r+0x46>
 8003caa:	68ac      	ldr	r4, [r5, #8]
 8003cac:	e7eb      	b.n	8003c86 <__swsetup_r+0x1e>
 8003cae:	4b24      	ldr	r3, [pc, #144]	; (8003d40 <__swsetup_r+0xd8>)
 8003cb0:	429c      	cmp	r4, r3
 8003cb2:	bf08      	it	eq
 8003cb4:	68ec      	ldreq	r4, [r5, #12]
 8003cb6:	e7e6      	b.n	8003c86 <__swsetup_r+0x1e>
 8003cb8:	0751      	lsls	r1, r2, #29
 8003cba:	d512      	bpl.n	8003ce2 <__swsetup_r+0x7a>
 8003cbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003cbe:	b141      	cbz	r1, 8003cd2 <__swsetup_r+0x6a>
 8003cc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003cc4:	4299      	cmp	r1, r3
 8003cc6:	d002      	beq.n	8003cce <__swsetup_r+0x66>
 8003cc8:	4630      	mov	r0, r6
 8003cca:	f000 fa1b 	bl	8004104 <_free_r>
 8003cce:	2300      	movs	r3, #0
 8003cd0:	6363      	str	r3, [r4, #52]	; 0x34
 8003cd2:	89a3      	ldrh	r3, [r4, #12]
 8003cd4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003cd8:	81a3      	strh	r3, [r4, #12]
 8003cda:	2300      	movs	r3, #0
 8003cdc:	6063      	str	r3, [r4, #4]
 8003cde:	6923      	ldr	r3, [r4, #16]
 8003ce0:	6023      	str	r3, [r4, #0]
 8003ce2:	89a3      	ldrh	r3, [r4, #12]
 8003ce4:	f043 0308 	orr.w	r3, r3, #8
 8003ce8:	81a3      	strh	r3, [r4, #12]
 8003cea:	6923      	ldr	r3, [r4, #16]
 8003cec:	b94b      	cbnz	r3, 8003d02 <__swsetup_r+0x9a>
 8003cee:	89a3      	ldrh	r3, [r4, #12]
 8003cf0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003cf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cf8:	d003      	beq.n	8003d02 <__swsetup_r+0x9a>
 8003cfa:	4621      	mov	r1, r4
 8003cfc:	4630      	mov	r0, r6
 8003cfe:	f000 f9c1 	bl	8004084 <__smakebuf_r>
 8003d02:	89a2      	ldrh	r2, [r4, #12]
 8003d04:	f012 0301 	ands.w	r3, r2, #1
 8003d08:	d00c      	beq.n	8003d24 <__swsetup_r+0xbc>
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60a3      	str	r3, [r4, #8]
 8003d0e:	6963      	ldr	r3, [r4, #20]
 8003d10:	425b      	negs	r3, r3
 8003d12:	61a3      	str	r3, [r4, #24]
 8003d14:	6923      	ldr	r3, [r4, #16]
 8003d16:	b953      	cbnz	r3, 8003d2e <__swsetup_r+0xc6>
 8003d18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d1c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003d20:	d1ba      	bne.n	8003c98 <__swsetup_r+0x30>
 8003d22:	bd70      	pop	{r4, r5, r6, pc}
 8003d24:	0792      	lsls	r2, r2, #30
 8003d26:	bf58      	it	pl
 8003d28:	6963      	ldrpl	r3, [r4, #20]
 8003d2a:	60a3      	str	r3, [r4, #8]
 8003d2c:	e7f2      	b.n	8003d14 <__swsetup_r+0xac>
 8003d2e:	2000      	movs	r0, #0
 8003d30:	e7f7      	b.n	8003d22 <__swsetup_r+0xba>
 8003d32:	bf00      	nop
 8003d34:	20000004 	.word	0x20000004
 8003d38:	08004b1c 	.word	0x08004b1c
 8003d3c:	08004b3c 	.word	0x08004b3c
 8003d40:	08004afc 	.word	0x08004afc

08003d44 <__sflush_r>:
 8003d44:	898a      	ldrh	r2, [r1, #12]
 8003d46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d4a:	4605      	mov	r5, r0
 8003d4c:	0710      	lsls	r0, r2, #28
 8003d4e:	460c      	mov	r4, r1
 8003d50:	d45a      	bmi.n	8003e08 <__sflush_r+0xc4>
 8003d52:	684b      	ldr	r3, [r1, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	dc05      	bgt.n	8003d64 <__sflush_r+0x20>
 8003d58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	dc02      	bgt.n	8003d64 <__sflush_r+0x20>
 8003d5e:	2000      	movs	r0, #0
 8003d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003d66:	2e00      	cmp	r6, #0
 8003d68:	d0f9      	beq.n	8003d5e <__sflush_r+0x1a>
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003d70:	682f      	ldr	r7, [r5, #0]
 8003d72:	602b      	str	r3, [r5, #0]
 8003d74:	d033      	beq.n	8003dde <__sflush_r+0x9a>
 8003d76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003d78:	89a3      	ldrh	r3, [r4, #12]
 8003d7a:	075a      	lsls	r2, r3, #29
 8003d7c:	d505      	bpl.n	8003d8a <__sflush_r+0x46>
 8003d7e:	6863      	ldr	r3, [r4, #4]
 8003d80:	1ac0      	subs	r0, r0, r3
 8003d82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003d84:	b10b      	cbz	r3, 8003d8a <__sflush_r+0x46>
 8003d86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d88:	1ac0      	subs	r0, r0, r3
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003d90:	6a21      	ldr	r1, [r4, #32]
 8003d92:	4628      	mov	r0, r5
 8003d94:	47b0      	blx	r6
 8003d96:	1c43      	adds	r3, r0, #1
 8003d98:	89a3      	ldrh	r3, [r4, #12]
 8003d9a:	d106      	bne.n	8003daa <__sflush_r+0x66>
 8003d9c:	6829      	ldr	r1, [r5, #0]
 8003d9e:	291d      	cmp	r1, #29
 8003da0:	d84b      	bhi.n	8003e3a <__sflush_r+0xf6>
 8003da2:	4a2b      	ldr	r2, [pc, #172]	; (8003e50 <__sflush_r+0x10c>)
 8003da4:	40ca      	lsrs	r2, r1
 8003da6:	07d6      	lsls	r6, r2, #31
 8003da8:	d547      	bpl.n	8003e3a <__sflush_r+0xf6>
 8003daa:	2200      	movs	r2, #0
 8003dac:	6062      	str	r2, [r4, #4]
 8003dae:	04d9      	lsls	r1, r3, #19
 8003db0:	6922      	ldr	r2, [r4, #16]
 8003db2:	6022      	str	r2, [r4, #0]
 8003db4:	d504      	bpl.n	8003dc0 <__sflush_r+0x7c>
 8003db6:	1c42      	adds	r2, r0, #1
 8003db8:	d101      	bne.n	8003dbe <__sflush_r+0x7a>
 8003dba:	682b      	ldr	r3, [r5, #0]
 8003dbc:	b903      	cbnz	r3, 8003dc0 <__sflush_r+0x7c>
 8003dbe:	6560      	str	r0, [r4, #84]	; 0x54
 8003dc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003dc2:	602f      	str	r7, [r5, #0]
 8003dc4:	2900      	cmp	r1, #0
 8003dc6:	d0ca      	beq.n	8003d5e <__sflush_r+0x1a>
 8003dc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003dcc:	4299      	cmp	r1, r3
 8003dce:	d002      	beq.n	8003dd6 <__sflush_r+0x92>
 8003dd0:	4628      	mov	r0, r5
 8003dd2:	f000 f997 	bl	8004104 <_free_r>
 8003dd6:	2000      	movs	r0, #0
 8003dd8:	6360      	str	r0, [r4, #52]	; 0x34
 8003dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003dde:	6a21      	ldr	r1, [r4, #32]
 8003de0:	2301      	movs	r3, #1
 8003de2:	4628      	mov	r0, r5
 8003de4:	47b0      	blx	r6
 8003de6:	1c41      	adds	r1, r0, #1
 8003de8:	d1c6      	bne.n	8003d78 <__sflush_r+0x34>
 8003dea:	682b      	ldr	r3, [r5, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0c3      	beq.n	8003d78 <__sflush_r+0x34>
 8003df0:	2b1d      	cmp	r3, #29
 8003df2:	d001      	beq.n	8003df8 <__sflush_r+0xb4>
 8003df4:	2b16      	cmp	r3, #22
 8003df6:	d101      	bne.n	8003dfc <__sflush_r+0xb8>
 8003df8:	602f      	str	r7, [r5, #0]
 8003dfa:	e7b0      	b.n	8003d5e <__sflush_r+0x1a>
 8003dfc:	89a3      	ldrh	r3, [r4, #12]
 8003dfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e02:	81a3      	strh	r3, [r4, #12]
 8003e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e08:	690f      	ldr	r7, [r1, #16]
 8003e0a:	2f00      	cmp	r7, #0
 8003e0c:	d0a7      	beq.n	8003d5e <__sflush_r+0x1a>
 8003e0e:	0793      	lsls	r3, r2, #30
 8003e10:	680e      	ldr	r6, [r1, #0]
 8003e12:	bf08      	it	eq
 8003e14:	694b      	ldreq	r3, [r1, #20]
 8003e16:	600f      	str	r7, [r1, #0]
 8003e18:	bf18      	it	ne
 8003e1a:	2300      	movne	r3, #0
 8003e1c:	eba6 0807 	sub.w	r8, r6, r7
 8003e20:	608b      	str	r3, [r1, #8]
 8003e22:	f1b8 0f00 	cmp.w	r8, #0
 8003e26:	dd9a      	ble.n	8003d5e <__sflush_r+0x1a>
 8003e28:	4643      	mov	r3, r8
 8003e2a:	463a      	mov	r2, r7
 8003e2c:	6a21      	ldr	r1, [r4, #32]
 8003e2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003e30:	4628      	mov	r0, r5
 8003e32:	47b0      	blx	r6
 8003e34:	2800      	cmp	r0, #0
 8003e36:	dc07      	bgt.n	8003e48 <__sflush_r+0x104>
 8003e38:	89a3      	ldrh	r3, [r4, #12]
 8003e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e3e:	81a3      	strh	r3, [r4, #12]
 8003e40:	f04f 30ff 	mov.w	r0, #4294967295
 8003e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e48:	4407      	add	r7, r0
 8003e4a:	eba8 0800 	sub.w	r8, r8, r0
 8003e4e:	e7e8      	b.n	8003e22 <__sflush_r+0xde>
 8003e50:	20400001 	.word	0x20400001

08003e54 <_fflush_r>:
 8003e54:	b538      	push	{r3, r4, r5, lr}
 8003e56:	690b      	ldr	r3, [r1, #16]
 8003e58:	4605      	mov	r5, r0
 8003e5a:	460c      	mov	r4, r1
 8003e5c:	b1db      	cbz	r3, 8003e96 <_fflush_r+0x42>
 8003e5e:	b118      	cbz	r0, 8003e68 <_fflush_r+0x14>
 8003e60:	6983      	ldr	r3, [r0, #24]
 8003e62:	b90b      	cbnz	r3, 8003e68 <_fflush_r+0x14>
 8003e64:	f000 f860 	bl	8003f28 <__sinit>
 8003e68:	4b0c      	ldr	r3, [pc, #48]	; (8003e9c <_fflush_r+0x48>)
 8003e6a:	429c      	cmp	r4, r3
 8003e6c:	d109      	bne.n	8003e82 <_fflush_r+0x2e>
 8003e6e:	686c      	ldr	r4, [r5, #4]
 8003e70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e74:	b17b      	cbz	r3, 8003e96 <_fflush_r+0x42>
 8003e76:	4621      	mov	r1, r4
 8003e78:	4628      	mov	r0, r5
 8003e7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e7e:	f7ff bf61 	b.w	8003d44 <__sflush_r>
 8003e82:	4b07      	ldr	r3, [pc, #28]	; (8003ea0 <_fflush_r+0x4c>)
 8003e84:	429c      	cmp	r4, r3
 8003e86:	d101      	bne.n	8003e8c <_fflush_r+0x38>
 8003e88:	68ac      	ldr	r4, [r5, #8]
 8003e8a:	e7f1      	b.n	8003e70 <_fflush_r+0x1c>
 8003e8c:	4b05      	ldr	r3, [pc, #20]	; (8003ea4 <_fflush_r+0x50>)
 8003e8e:	429c      	cmp	r4, r3
 8003e90:	bf08      	it	eq
 8003e92:	68ec      	ldreq	r4, [r5, #12]
 8003e94:	e7ec      	b.n	8003e70 <_fflush_r+0x1c>
 8003e96:	2000      	movs	r0, #0
 8003e98:	bd38      	pop	{r3, r4, r5, pc}
 8003e9a:	bf00      	nop
 8003e9c:	08004b1c 	.word	0x08004b1c
 8003ea0:	08004b3c 	.word	0x08004b3c
 8003ea4:	08004afc 	.word	0x08004afc

08003ea8 <_cleanup_r>:
 8003ea8:	4901      	ldr	r1, [pc, #4]	; (8003eb0 <_cleanup_r+0x8>)
 8003eaa:	f000 b8a9 	b.w	8004000 <_fwalk_reent>
 8003eae:	bf00      	nop
 8003eb0:	08003e55 	.word	0x08003e55

08003eb4 <std.isra.0>:
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	b510      	push	{r4, lr}
 8003eb8:	4604      	mov	r4, r0
 8003eba:	6003      	str	r3, [r0, #0]
 8003ebc:	6043      	str	r3, [r0, #4]
 8003ebe:	6083      	str	r3, [r0, #8]
 8003ec0:	8181      	strh	r1, [r0, #12]
 8003ec2:	6643      	str	r3, [r0, #100]	; 0x64
 8003ec4:	81c2      	strh	r2, [r0, #14]
 8003ec6:	6103      	str	r3, [r0, #16]
 8003ec8:	6143      	str	r3, [r0, #20]
 8003eca:	6183      	str	r3, [r0, #24]
 8003ecc:	4619      	mov	r1, r3
 8003ece:	2208      	movs	r2, #8
 8003ed0:	305c      	adds	r0, #92	; 0x5c
 8003ed2:	f7ff fdf3 	bl	8003abc <memset>
 8003ed6:	4b05      	ldr	r3, [pc, #20]	; (8003eec <std.isra.0+0x38>)
 8003ed8:	6263      	str	r3, [r4, #36]	; 0x24
 8003eda:	4b05      	ldr	r3, [pc, #20]	; (8003ef0 <std.isra.0+0x3c>)
 8003edc:	62a3      	str	r3, [r4, #40]	; 0x28
 8003ede:	4b05      	ldr	r3, [pc, #20]	; (8003ef4 <std.isra.0+0x40>)
 8003ee0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003ee2:	4b05      	ldr	r3, [pc, #20]	; (8003ef8 <std.isra.0+0x44>)
 8003ee4:	6224      	str	r4, [r4, #32]
 8003ee6:	6323      	str	r3, [r4, #48]	; 0x30
 8003ee8:	bd10      	pop	{r4, pc}
 8003eea:	bf00      	nop
 8003eec:	08004829 	.word	0x08004829
 8003ef0:	0800484b 	.word	0x0800484b
 8003ef4:	08004883 	.word	0x08004883
 8003ef8:	080048a7 	.word	0x080048a7

08003efc <__sfmoreglue>:
 8003efc:	b570      	push	{r4, r5, r6, lr}
 8003efe:	1e4a      	subs	r2, r1, #1
 8003f00:	2568      	movs	r5, #104	; 0x68
 8003f02:	4355      	muls	r5, r2
 8003f04:	460e      	mov	r6, r1
 8003f06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003f0a:	f000 f949 	bl	80041a0 <_malloc_r>
 8003f0e:	4604      	mov	r4, r0
 8003f10:	b140      	cbz	r0, 8003f24 <__sfmoreglue+0x28>
 8003f12:	2100      	movs	r1, #0
 8003f14:	e880 0042 	stmia.w	r0, {r1, r6}
 8003f18:	300c      	adds	r0, #12
 8003f1a:	60a0      	str	r0, [r4, #8]
 8003f1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003f20:	f7ff fdcc 	bl	8003abc <memset>
 8003f24:	4620      	mov	r0, r4
 8003f26:	bd70      	pop	{r4, r5, r6, pc}

08003f28 <__sinit>:
 8003f28:	6983      	ldr	r3, [r0, #24]
 8003f2a:	b510      	push	{r4, lr}
 8003f2c:	4604      	mov	r4, r0
 8003f2e:	bb33      	cbnz	r3, 8003f7e <__sinit+0x56>
 8003f30:	6483      	str	r3, [r0, #72]	; 0x48
 8003f32:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003f34:	6503      	str	r3, [r0, #80]	; 0x50
 8003f36:	4b12      	ldr	r3, [pc, #72]	; (8003f80 <__sinit+0x58>)
 8003f38:	4a12      	ldr	r2, [pc, #72]	; (8003f84 <__sinit+0x5c>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6282      	str	r2, [r0, #40]	; 0x28
 8003f3e:	4298      	cmp	r0, r3
 8003f40:	bf04      	itt	eq
 8003f42:	2301      	moveq	r3, #1
 8003f44:	6183      	streq	r3, [r0, #24]
 8003f46:	f000 f81f 	bl	8003f88 <__sfp>
 8003f4a:	6060      	str	r0, [r4, #4]
 8003f4c:	4620      	mov	r0, r4
 8003f4e:	f000 f81b 	bl	8003f88 <__sfp>
 8003f52:	60a0      	str	r0, [r4, #8]
 8003f54:	4620      	mov	r0, r4
 8003f56:	f000 f817 	bl	8003f88 <__sfp>
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	60e0      	str	r0, [r4, #12]
 8003f5e:	2104      	movs	r1, #4
 8003f60:	6860      	ldr	r0, [r4, #4]
 8003f62:	f7ff ffa7 	bl	8003eb4 <std.isra.0>
 8003f66:	2201      	movs	r2, #1
 8003f68:	2109      	movs	r1, #9
 8003f6a:	68a0      	ldr	r0, [r4, #8]
 8003f6c:	f7ff ffa2 	bl	8003eb4 <std.isra.0>
 8003f70:	2202      	movs	r2, #2
 8003f72:	2112      	movs	r1, #18
 8003f74:	68e0      	ldr	r0, [r4, #12]
 8003f76:	f7ff ff9d 	bl	8003eb4 <std.isra.0>
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	61a3      	str	r3, [r4, #24]
 8003f7e:	bd10      	pop	{r4, pc}
 8003f80:	08004af8 	.word	0x08004af8
 8003f84:	08003ea9 	.word	0x08003ea9

08003f88 <__sfp>:
 8003f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f8a:	4b1c      	ldr	r3, [pc, #112]	; (8003ffc <__sfp+0x74>)
 8003f8c:	681e      	ldr	r6, [r3, #0]
 8003f8e:	69b3      	ldr	r3, [r6, #24]
 8003f90:	4607      	mov	r7, r0
 8003f92:	b913      	cbnz	r3, 8003f9a <__sfp+0x12>
 8003f94:	4630      	mov	r0, r6
 8003f96:	f7ff ffc7 	bl	8003f28 <__sinit>
 8003f9a:	3648      	adds	r6, #72	; 0x48
 8003f9c:	68b4      	ldr	r4, [r6, #8]
 8003f9e:	6873      	ldr	r3, [r6, #4]
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	d503      	bpl.n	8003fac <__sfp+0x24>
 8003fa4:	6833      	ldr	r3, [r6, #0]
 8003fa6:	b133      	cbz	r3, 8003fb6 <__sfp+0x2e>
 8003fa8:	6836      	ldr	r6, [r6, #0]
 8003faa:	e7f7      	b.n	8003f9c <__sfp+0x14>
 8003fac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003fb0:	b16d      	cbz	r5, 8003fce <__sfp+0x46>
 8003fb2:	3468      	adds	r4, #104	; 0x68
 8003fb4:	e7f4      	b.n	8003fa0 <__sfp+0x18>
 8003fb6:	2104      	movs	r1, #4
 8003fb8:	4638      	mov	r0, r7
 8003fba:	f7ff ff9f 	bl	8003efc <__sfmoreglue>
 8003fbe:	6030      	str	r0, [r6, #0]
 8003fc0:	2800      	cmp	r0, #0
 8003fc2:	d1f1      	bne.n	8003fa8 <__sfp+0x20>
 8003fc4:	230c      	movs	r3, #12
 8003fc6:	603b      	str	r3, [r7, #0]
 8003fc8:	4604      	mov	r4, r0
 8003fca:	4620      	mov	r0, r4
 8003fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003fd2:	81e3      	strh	r3, [r4, #14]
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	81a3      	strh	r3, [r4, #12]
 8003fd8:	6665      	str	r5, [r4, #100]	; 0x64
 8003fda:	6025      	str	r5, [r4, #0]
 8003fdc:	60a5      	str	r5, [r4, #8]
 8003fde:	6065      	str	r5, [r4, #4]
 8003fe0:	6125      	str	r5, [r4, #16]
 8003fe2:	6165      	str	r5, [r4, #20]
 8003fe4:	61a5      	str	r5, [r4, #24]
 8003fe6:	2208      	movs	r2, #8
 8003fe8:	4629      	mov	r1, r5
 8003fea:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003fee:	f7ff fd65 	bl	8003abc <memset>
 8003ff2:	6365      	str	r5, [r4, #52]	; 0x34
 8003ff4:	63a5      	str	r5, [r4, #56]	; 0x38
 8003ff6:	64a5      	str	r5, [r4, #72]	; 0x48
 8003ff8:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003ffa:	e7e6      	b.n	8003fca <__sfp+0x42>
 8003ffc:	08004af8 	.word	0x08004af8

08004000 <_fwalk_reent>:
 8004000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004004:	4680      	mov	r8, r0
 8004006:	4689      	mov	r9, r1
 8004008:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800400c:	2600      	movs	r6, #0
 800400e:	b914      	cbnz	r4, 8004016 <_fwalk_reent+0x16>
 8004010:	4630      	mov	r0, r6
 8004012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004016:	68a5      	ldr	r5, [r4, #8]
 8004018:	6867      	ldr	r7, [r4, #4]
 800401a:	3f01      	subs	r7, #1
 800401c:	d501      	bpl.n	8004022 <_fwalk_reent+0x22>
 800401e:	6824      	ldr	r4, [r4, #0]
 8004020:	e7f5      	b.n	800400e <_fwalk_reent+0xe>
 8004022:	89ab      	ldrh	r3, [r5, #12]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d907      	bls.n	8004038 <_fwalk_reent+0x38>
 8004028:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800402c:	3301      	adds	r3, #1
 800402e:	d003      	beq.n	8004038 <_fwalk_reent+0x38>
 8004030:	4629      	mov	r1, r5
 8004032:	4640      	mov	r0, r8
 8004034:	47c8      	blx	r9
 8004036:	4306      	orrs	r6, r0
 8004038:	3568      	adds	r5, #104	; 0x68
 800403a:	e7ee      	b.n	800401a <_fwalk_reent+0x1a>

0800403c <__swhatbuf_r>:
 800403c:	b570      	push	{r4, r5, r6, lr}
 800403e:	460e      	mov	r6, r1
 8004040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004044:	2900      	cmp	r1, #0
 8004046:	b090      	sub	sp, #64	; 0x40
 8004048:	4614      	mov	r4, r2
 800404a:	461d      	mov	r5, r3
 800404c:	da07      	bge.n	800405e <__swhatbuf_r+0x22>
 800404e:	2300      	movs	r3, #0
 8004050:	602b      	str	r3, [r5, #0]
 8004052:	89b3      	ldrh	r3, [r6, #12]
 8004054:	061a      	lsls	r2, r3, #24
 8004056:	d410      	bmi.n	800407a <__swhatbuf_r+0x3e>
 8004058:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800405c:	e00e      	b.n	800407c <__swhatbuf_r+0x40>
 800405e:	aa01      	add	r2, sp, #4
 8004060:	f000 fc48 	bl	80048f4 <_fstat_r>
 8004064:	2800      	cmp	r0, #0
 8004066:	dbf2      	blt.n	800404e <__swhatbuf_r+0x12>
 8004068:	9a02      	ldr	r2, [sp, #8]
 800406a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800406e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004072:	425a      	negs	r2, r3
 8004074:	415a      	adcs	r2, r3
 8004076:	602a      	str	r2, [r5, #0]
 8004078:	e7ee      	b.n	8004058 <__swhatbuf_r+0x1c>
 800407a:	2340      	movs	r3, #64	; 0x40
 800407c:	2000      	movs	r0, #0
 800407e:	6023      	str	r3, [r4, #0]
 8004080:	b010      	add	sp, #64	; 0x40
 8004082:	bd70      	pop	{r4, r5, r6, pc}

08004084 <__smakebuf_r>:
 8004084:	898b      	ldrh	r3, [r1, #12]
 8004086:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004088:	079d      	lsls	r5, r3, #30
 800408a:	4606      	mov	r6, r0
 800408c:	460c      	mov	r4, r1
 800408e:	d507      	bpl.n	80040a0 <__smakebuf_r+0x1c>
 8004090:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004094:	6023      	str	r3, [r4, #0]
 8004096:	6123      	str	r3, [r4, #16]
 8004098:	2301      	movs	r3, #1
 800409a:	6163      	str	r3, [r4, #20]
 800409c:	b002      	add	sp, #8
 800409e:	bd70      	pop	{r4, r5, r6, pc}
 80040a0:	ab01      	add	r3, sp, #4
 80040a2:	466a      	mov	r2, sp
 80040a4:	f7ff ffca 	bl	800403c <__swhatbuf_r>
 80040a8:	9900      	ldr	r1, [sp, #0]
 80040aa:	4605      	mov	r5, r0
 80040ac:	4630      	mov	r0, r6
 80040ae:	f000 f877 	bl	80041a0 <_malloc_r>
 80040b2:	b948      	cbnz	r0, 80040c8 <__smakebuf_r+0x44>
 80040b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040b8:	059a      	lsls	r2, r3, #22
 80040ba:	d4ef      	bmi.n	800409c <__smakebuf_r+0x18>
 80040bc:	f023 0303 	bic.w	r3, r3, #3
 80040c0:	f043 0302 	orr.w	r3, r3, #2
 80040c4:	81a3      	strh	r3, [r4, #12]
 80040c6:	e7e3      	b.n	8004090 <__smakebuf_r+0xc>
 80040c8:	4b0d      	ldr	r3, [pc, #52]	; (8004100 <__smakebuf_r+0x7c>)
 80040ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80040cc:	89a3      	ldrh	r3, [r4, #12]
 80040ce:	6020      	str	r0, [r4, #0]
 80040d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040d4:	81a3      	strh	r3, [r4, #12]
 80040d6:	9b00      	ldr	r3, [sp, #0]
 80040d8:	6163      	str	r3, [r4, #20]
 80040da:	9b01      	ldr	r3, [sp, #4]
 80040dc:	6120      	str	r0, [r4, #16]
 80040de:	b15b      	cbz	r3, 80040f8 <__smakebuf_r+0x74>
 80040e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040e4:	4630      	mov	r0, r6
 80040e6:	f000 fc17 	bl	8004918 <_isatty_r>
 80040ea:	b128      	cbz	r0, 80040f8 <__smakebuf_r+0x74>
 80040ec:	89a3      	ldrh	r3, [r4, #12]
 80040ee:	f023 0303 	bic.w	r3, r3, #3
 80040f2:	f043 0301 	orr.w	r3, r3, #1
 80040f6:	81a3      	strh	r3, [r4, #12]
 80040f8:	89a3      	ldrh	r3, [r4, #12]
 80040fa:	431d      	orrs	r5, r3
 80040fc:	81a5      	strh	r5, [r4, #12]
 80040fe:	e7cd      	b.n	800409c <__smakebuf_r+0x18>
 8004100:	08003ea9 	.word	0x08003ea9

08004104 <_free_r>:
 8004104:	b538      	push	{r3, r4, r5, lr}
 8004106:	4605      	mov	r5, r0
 8004108:	2900      	cmp	r1, #0
 800410a:	d045      	beq.n	8004198 <_free_r+0x94>
 800410c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004110:	1f0c      	subs	r4, r1, #4
 8004112:	2b00      	cmp	r3, #0
 8004114:	bfb8      	it	lt
 8004116:	18e4      	addlt	r4, r4, r3
 8004118:	f000 fc20 	bl	800495c <__malloc_lock>
 800411c:	4a1f      	ldr	r2, [pc, #124]	; (800419c <_free_r+0x98>)
 800411e:	6813      	ldr	r3, [r2, #0]
 8004120:	4610      	mov	r0, r2
 8004122:	b933      	cbnz	r3, 8004132 <_free_r+0x2e>
 8004124:	6063      	str	r3, [r4, #4]
 8004126:	6014      	str	r4, [r2, #0]
 8004128:	4628      	mov	r0, r5
 800412a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800412e:	f000 bc16 	b.w	800495e <__malloc_unlock>
 8004132:	42a3      	cmp	r3, r4
 8004134:	d90c      	bls.n	8004150 <_free_r+0x4c>
 8004136:	6821      	ldr	r1, [r4, #0]
 8004138:	1862      	adds	r2, r4, r1
 800413a:	4293      	cmp	r3, r2
 800413c:	bf04      	itt	eq
 800413e:	681a      	ldreq	r2, [r3, #0]
 8004140:	685b      	ldreq	r3, [r3, #4]
 8004142:	6063      	str	r3, [r4, #4]
 8004144:	bf04      	itt	eq
 8004146:	1852      	addeq	r2, r2, r1
 8004148:	6022      	streq	r2, [r4, #0]
 800414a:	6004      	str	r4, [r0, #0]
 800414c:	e7ec      	b.n	8004128 <_free_r+0x24>
 800414e:	4613      	mov	r3, r2
 8004150:	685a      	ldr	r2, [r3, #4]
 8004152:	b10a      	cbz	r2, 8004158 <_free_r+0x54>
 8004154:	42a2      	cmp	r2, r4
 8004156:	d9fa      	bls.n	800414e <_free_r+0x4a>
 8004158:	6819      	ldr	r1, [r3, #0]
 800415a:	1858      	adds	r0, r3, r1
 800415c:	42a0      	cmp	r0, r4
 800415e:	d10b      	bne.n	8004178 <_free_r+0x74>
 8004160:	6820      	ldr	r0, [r4, #0]
 8004162:	4401      	add	r1, r0
 8004164:	1858      	adds	r0, r3, r1
 8004166:	4282      	cmp	r2, r0
 8004168:	6019      	str	r1, [r3, #0]
 800416a:	d1dd      	bne.n	8004128 <_free_r+0x24>
 800416c:	6810      	ldr	r0, [r2, #0]
 800416e:	6852      	ldr	r2, [r2, #4]
 8004170:	605a      	str	r2, [r3, #4]
 8004172:	4401      	add	r1, r0
 8004174:	6019      	str	r1, [r3, #0]
 8004176:	e7d7      	b.n	8004128 <_free_r+0x24>
 8004178:	d902      	bls.n	8004180 <_free_r+0x7c>
 800417a:	230c      	movs	r3, #12
 800417c:	602b      	str	r3, [r5, #0]
 800417e:	e7d3      	b.n	8004128 <_free_r+0x24>
 8004180:	6820      	ldr	r0, [r4, #0]
 8004182:	1821      	adds	r1, r4, r0
 8004184:	428a      	cmp	r2, r1
 8004186:	bf04      	itt	eq
 8004188:	6811      	ldreq	r1, [r2, #0]
 800418a:	6852      	ldreq	r2, [r2, #4]
 800418c:	6062      	str	r2, [r4, #4]
 800418e:	bf04      	itt	eq
 8004190:	1809      	addeq	r1, r1, r0
 8004192:	6021      	streq	r1, [r4, #0]
 8004194:	605c      	str	r4, [r3, #4]
 8004196:	e7c7      	b.n	8004128 <_free_r+0x24>
 8004198:	bd38      	pop	{r3, r4, r5, pc}
 800419a:	bf00      	nop
 800419c:	20000088 	.word	0x20000088

080041a0 <_malloc_r>:
 80041a0:	b570      	push	{r4, r5, r6, lr}
 80041a2:	1ccd      	adds	r5, r1, #3
 80041a4:	f025 0503 	bic.w	r5, r5, #3
 80041a8:	3508      	adds	r5, #8
 80041aa:	2d0c      	cmp	r5, #12
 80041ac:	bf38      	it	cc
 80041ae:	250c      	movcc	r5, #12
 80041b0:	2d00      	cmp	r5, #0
 80041b2:	4606      	mov	r6, r0
 80041b4:	db01      	blt.n	80041ba <_malloc_r+0x1a>
 80041b6:	42a9      	cmp	r1, r5
 80041b8:	d903      	bls.n	80041c2 <_malloc_r+0x22>
 80041ba:	230c      	movs	r3, #12
 80041bc:	6033      	str	r3, [r6, #0]
 80041be:	2000      	movs	r0, #0
 80041c0:	bd70      	pop	{r4, r5, r6, pc}
 80041c2:	f000 fbcb 	bl	800495c <__malloc_lock>
 80041c6:	4a23      	ldr	r2, [pc, #140]	; (8004254 <_malloc_r+0xb4>)
 80041c8:	6814      	ldr	r4, [r2, #0]
 80041ca:	4621      	mov	r1, r4
 80041cc:	b991      	cbnz	r1, 80041f4 <_malloc_r+0x54>
 80041ce:	4c22      	ldr	r4, [pc, #136]	; (8004258 <_malloc_r+0xb8>)
 80041d0:	6823      	ldr	r3, [r4, #0]
 80041d2:	b91b      	cbnz	r3, 80041dc <_malloc_r+0x3c>
 80041d4:	4630      	mov	r0, r6
 80041d6:	f000 fb17 	bl	8004808 <_sbrk_r>
 80041da:	6020      	str	r0, [r4, #0]
 80041dc:	4629      	mov	r1, r5
 80041de:	4630      	mov	r0, r6
 80041e0:	f000 fb12 	bl	8004808 <_sbrk_r>
 80041e4:	1c43      	adds	r3, r0, #1
 80041e6:	d126      	bne.n	8004236 <_malloc_r+0x96>
 80041e8:	230c      	movs	r3, #12
 80041ea:	6033      	str	r3, [r6, #0]
 80041ec:	4630      	mov	r0, r6
 80041ee:	f000 fbb6 	bl	800495e <__malloc_unlock>
 80041f2:	e7e4      	b.n	80041be <_malloc_r+0x1e>
 80041f4:	680b      	ldr	r3, [r1, #0]
 80041f6:	1b5b      	subs	r3, r3, r5
 80041f8:	d41a      	bmi.n	8004230 <_malloc_r+0x90>
 80041fa:	2b0b      	cmp	r3, #11
 80041fc:	d90f      	bls.n	800421e <_malloc_r+0x7e>
 80041fe:	600b      	str	r3, [r1, #0]
 8004200:	50cd      	str	r5, [r1, r3]
 8004202:	18cc      	adds	r4, r1, r3
 8004204:	4630      	mov	r0, r6
 8004206:	f000 fbaa 	bl	800495e <__malloc_unlock>
 800420a:	f104 000b 	add.w	r0, r4, #11
 800420e:	1d23      	adds	r3, r4, #4
 8004210:	f020 0007 	bic.w	r0, r0, #7
 8004214:	1ac3      	subs	r3, r0, r3
 8004216:	d01b      	beq.n	8004250 <_malloc_r+0xb0>
 8004218:	425a      	negs	r2, r3
 800421a:	50e2      	str	r2, [r4, r3]
 800421c:	bd70      	pop	{r4, r5, r6, pc}
 800421e:	428c      	cmp	r4, r1
 8004220:	bf0d      	iteet	eq
 8004222:	6863      	ldreq	r3, [r4, #4]
 8004224:	684b      	ldrne	r3, [r1, #4]
 8004226:	6063      	strne	r3, [r4, #4]
 8004228:	6013      	streq	r3, [r2, #0]
 800422a:	bf18      	it	ne
 800422c:	460c      	movne	r4, r1
 800422e:	e7e9      	b.n	8004204 <_malloc_r+0x64>
 8004230:	460c      	mov	r4, r1
 8004232:	6849      	ldr	r1, [r1, #4]
 8004234:	e7ca      	b.n	80041cc <_malloc_r+0x2c>
 8004236:	1cc4      	adds	r4, r0, #3
 8004238:	f024 0403 	bic.w	r4, r4, #3
 800423c:	42a0      	cmp	r0, r4
 800423e:	d005      	beq.n	800424c <_malloc_r+0xac>
 8004240:	1a21      	subs	r1, r4, r0
 8004242:	4630      	mov	r0, r6
 8004244:	f000 fae0 	bl	8004808 <_sbrk_r>
 8004248:	3001      	adds	r0, #1
 800424a:	d0cd      	beq.n	80041e8 <_malloc_r+0x48>
 800424c:	6025      	str	r5, [r4, #0]
 800424e:	e7d9      	b.n	8004204 <_malloc_r+0x64>
 8004250:	bd70      	pop	{r4, r5, r6, pc}
 8004252:	bf00      	nop
 8004254:	20000088 	.word	0x20000088
 8004258:	2000008c 	.word	0x2000008c

0800425c <__sfputc_r>:
 800425c:	6893      	ldr	r3, [r2, #8]
 800425e:	3b01      	subs	r3, #1
 8004260:	2b00      	cmp	r3, #0
 8004262:	b410      	push	{r4}
 8004264:	6093      	str	r3, [r2, #8]
 8004266:	da09      	bge.n	800427c <__sfputc_r+0x20>
 8004268:	6994      	ldr	r4, [r2, #24]
 800426a:	42a3      	cmp	r3, r4
 800426c:	db02      	blt.n	8004274 <__sfputc_r+0x18>
 800426e:	b2cb      	uxtb	r3, r1
 8004270:	2b0a      	cmp	r3, #10
 8004272:	d103      	bne.n	800427c <__sfputc_r+0x20>
 8004274:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004278:	f7ff bca4 	b.w	8003bc4 <__swbuf_r>
 800427c:	6813      	ldr	r3, [r2, #0]
 800427e:	1c58      	adds	r0, r3, #1
 8004280:	6010      	str	r0, [r2, #0]
 8004282:	7019      	strb	r1, [r3, #0]
 8004284:	b2c8      	uxtb	r0, r1
 8004286:	f85d 4b04 	ldr.w	r4, [sp], #4
 800428a:	4770      	bx	lr

0800428c <__sfputs_r>:
 800428c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800428e:	4606      	mov	r6, r0
 8004290:	460f      	mov	r7, r1
 8004292:	4614      	mov	r4, r2
 8004294:	18d5      	adds	r5, r2, r3
 8004296:	42ac      	cmp	r4, r5
 8004298:	d101      	bne.n	800429e <__sfputs_r+0x12>
 800429a:	2000      	movs	r0, #0
 800429c:	e007      	b.n	80042ae <__sfputs_r+0x22>
 800429e:	463a      	mov	r2, r7
 80042a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042a4:	4630      	mov	r0, r6
 80042a6:	f7ff ffd9 	bl	800425c <__sfputc_r>
 80042aa:	1c43      	adds	r3, r0, #1
 80042ac:	d1f3      	bne.n	8004296 <__sfputs_r+0xa>
 80042ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080042b0 <_vfiprintf_r>:
 80042b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042b4:	b09d      	sub	sp, #116	; 0x74
 80042b6:	460c      	mov	r4, r1
 80042b8:	4617      	mov	r7, r2
 80042ba:	9303      	str	r3, [sp, #12]
 80042bc:	4606      	mov	r6, r0
 80042be:	b118      	cbz	r0, 80042c8 <_vfiprintf_r+0x18>
 80042c0:	6983      	ldr	r3, [r0, #24]
 80042c2:	b90b      	cbnz	r3, 80042c8 <_vfiprintf_r+0x18>
 80042c4:	f7ff fe30 	bl	8003f28 <__sinit>
 80042c8:	4b7c      	ldr	r3, [pc, #496]	; (80044bc <_vfiprintf_r+0x20c>)
 80042ca:	429c      	cmp	r4, r3
 80042cc:	d157      	bne.n	800437e <_vfiprintf_r+0xce>
 80042ce:	6874      	ldr	r4, [r6, #4]
 80042d0:	89a3      	ldrh	r3, [r4, #12]
 80042d2:	0718      	lsls	r0, r3, #28
 80042d4:	d55d      	bpl.n	8004392 <_vfiprintf_r+0xe2>
 80042d6:	6923      	ldr	r3, [r4, #16]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d05a      	beq.n	8004392 <_vfiprintf_r+0xe2>
 80042dc:	2300      	movs	r3, #0
 80042de:	9309      	str	r3, [sp, #36]	; 0x24
 80042e0:	2320      	movs	r3, #32
 80042e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80042e6:	2330      	movs	r3, #48	; 0x30
 80042e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80042ec:	f04f 0b01 	mov.w	fp, #1
 80042f0:	46b8      	mov	r8, r7
 80042f2:	4645      	mov	r5, r8
 80042f4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d155      	bne.n	80043a8 <_vfiprintf_r+0xf8>
 80042fc:	ebb8 0a07 	subs.w	sl, r8, r7
 8004300:	d00b      	beq.n	800431a <_vfiprintf_r+0x6a>
 8004302:	4653      	mov	r3, sl
 8004304:	463a      	mov	r2, r7
 8004306:	4621      	mov	r1, r4
 8004308:	4630      	mov	r0, r6
 800430a:	f7ff ffbf 	bl	800428c <__sfputs_r>
 800430e:	3001      	adds	r0, #1
 8004310:	f000 80c4 	beq.w	800449c <_vfiprintf_r+0x1ec>
 8004314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004316:	4453      	add	r3, sl
 8004318:	9309      	str	r3, [sp, #36]	; 0x24
 800431a:	f898 3000 	ldrb.w	r3, [r8]
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 80bc 	beq.w	800449c <_vfiprintf_r+0x1ec>
 8004324:	2300      	movs	r3, #0
 8004326:	f04f 32ff 	mov.w	r2, #4294967295
 800432a:	9304      	str	r3, [sp, #16]
 800432c:	9307      	str	r3, [sp, #28]
 800432e:	9205      	str	r2, [sp, #20]
 8004330:	9306      	str	r3, [sp, #24]
 8004332:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004336:	931a      	str	r3, [sp, #104]	; 0x68
 8004338:	2205      	movs	r2, #5
 800433a:	7829      	ldrb	r1, [r5, #0]
 800433c:	4860      	ldr	r0, [pc, #384]	; (80044c0 <_vfiprintf_r+0x210>)
 800433e:	f7fb ff47 	bl	80001d0 <memchr>
 8004342:	f105 0801 	add.w	r8, r5, #1
 8004346:	9b04      	ldr	r3, [sp, #16]
 8004348:	2800      	cmp	r0, #0
 800434a:	d131      	bne.n	80043b0 <_vfiprintf_r+0x100>
 800434c:	06d9      	lsls	r1, r3, #27
 800434e:	bf44      	itt	mi
 8004350:	2220      	movmi	r2, #32
 8004352:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004356:	071a      	lsls	r2, r3, #28
 8004358:	bf44      	itt	mi
 800435a:	222b      	movmi	r2, #43	; 0x2b
 800435c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004360:	782a      	ldrb	r2, [r5, #0]
 8004362:	2a2a      	cmp	r2, #42	; 0x2a
 8004364:	d02c      	beq.n	80043c0 <_vfiprintf_r+0x110>
 8004366:	9a07      	ldr	r2, [sp, #28]
 8004368:	2100      	movs	r1, #0
 800436a:	200a      	movs	r0, #10
 800436c:	46a8      	mov	r8, r5
 800436e:	3501      	adds	r5, #1
 8004370:	f898 3000 	ldrb.w	r3, [r8]
 8004374:	3b30      	subs	r3, #48	; 0x30
 8004376:	2b09      	cmp	r3, #9
 8004378:	d96d      	bls.n	8004456 <_vfiprintf_r+0x1a6>
 800437a:	b371      	cbz	r1, 80043da <_vfiprintf_r+0x12a>
 800437c:	e026      	b.n	80043cc <_vfiprintf_r+0x11c>
 800437e:	4b51      	ldr	r3, [pc, #324]	; (80044c4 <_vfiprintf_r+0x214>)
 8004380:	429c      	cmp	r4, r3
 8004382:	d101      	bne.n	8004388 <_vfiprintf_r+0xd8>
 8004384:	68b4      	ldr	r4, [r6, #8]
 8004386:	e7a3      	b.n	80042d0 <_vfiprintf_r+0x20>
 8004388:	4b4f      	ldr	r3, [pc, #316]	; (80044c8 <_vfiprintf_r+0x218>)
 800438a:	429c      	cmp	r4, r3
 800438c:	bf08      	it	eq
 800438e:	68f4      	ldreq	r4, [r6, #12]
 8004390:	e79e      	b.n	80042d0 <_vfiprintf_r+0x20>
 8004392:	4621      	mov	r1, r4
 8004394:	4630      	mov	r0, r6
 8004396:	f7ff fc67 	bl	8003c68 <__swsetup_r>
 800439a:	2800      	cmp	r0, #0
 800439c:	d09e      	beq.n	80042dc <_vfiprintf_r+0x2c>
 800439e:	f04f 30ff 	mov.w	r0, #4294967295
 80043a2:	b01d      	add	sp, #116	; 0x74
 80043a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043a8:	2b25      	cmp	r3, #37	; 0x25
 80043aa:	d0a7      	beq.n	80042fc <_vfiprintf_r+0x4c>
 80043ac:	46a8      	mov	r8, r5
 80043ae:	e7a0      	b.n	80042f2 <_vfiprintf_r+0x42>
 80043b0:	4a43      	ldr	r2, [pc, #268]	; (80044c0 <_vfiprintf_r+0x210>)
 80043b2:	1a80      	subs	r0, r0, r2
 80043b4:	fa0b f000 	lsl.w	r0, fp, r0
 80043b8:	4318      	orrs	r0, r3
 80043ba:	9004      	str	r0, [sp, #16]
 80043bc:	4645      	mov	r5, r8
 80043be:	e7bb      	b.n	8004338 <_vfiprintf_r+0x88>
 80043c0:	9a03      	ldr	r2, [sp, #12]
 80043c2:	1d11      	adds	r1, r2, #4
 80043c4:	6812      	ldr	r2, [r2, #0]
 80043c6:	9103      	str	r1, [sp, #12]
 80043c8:	2a00      	cmp	r2, #0
 80043ca:	db01      	blt.n	80043d0 <_vfiprintf_r+0x120>
 80043cc:	9207      	str	r2, [sp, #28]
 80043ce:	e004      	b.n	80043da <_vfiprintf_r+0x12a>
 80043d0:	4252      	negs	r2, r2
 80043d2:	f043 0302 	orr.w	r3, r3, #2
 80043d6:	9207      	str	r2, [sp, #28]
 80043d8:	9304      	str	r3, [sp, #16]
 80043da:	f898 3000 	ldrb.w	r3, [r8]
 80043de:	2b2e      	cmp	r3, #46	; 0x2e
 80043e0:	d110      	bne.n	8004404 <_vfiprintf_r+0x154>
 80043e2:	f898 3001 	ldrb.w	r3, [r8, #1]
 80043e6:	2b2a      	cmp	r3, #42	; 0x2a
 80043e8:	f108 0101 	add.w	r1, r8, #1
 80043ec:	d137      	bne.n	800445e <_vfiprintf_r+0x1ae>
 80043ee:	9b03      	ldr	r3, [sp, #12]
 80043f0:	1d1a      	adds	r2, r3, #4
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	9203      	str	r2, [sp, #12]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	bfb8      	it	lt
 80043fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80043fe:	f108 0802 	add.w	r8, r8, #2
 8004402:	9305      	str	r3, [sp, #20]
 8004404:	4d31      	ldr	r5, [pc, #196]	; (80044cc <_vfiprintf_r+0x21c>)
 8004406:	f898 1000 	ldrb.w	r1, [r8]
 800440a:	2203      	movs	r2, #3
 800440c:	4628      	mov	r0, r5
 800440e:	f7fb fedf 	bl	80001d0 <memchr>
 8004412:	b140      	cbz	r0, 8004426 <_vfiprintf_r+0x176>
 8004414:	2340      	movs	r3, #64	; 0x40
 8004416:	1b40      	subs	r0, r0, r5
 8004418:	fa03 f000 	lsl.w	r0, r3, r0
 800441c:	9b04      	ldr	r3, [sp, #16]
 800441e:	4303      	orrs	r3, r0
 8004420:	9304      	str	r3, [sp, #16]
 8004422:	f108 0801 	add.w	r8, r8, #1
 8004426:	f898 1000 	ldrb.w	r1, [r8]
 800442a:	4829      	ldr	r0, [pc, #164]	; (80044d0 <_vfiprintf_r+0x220>)
 800442c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004430:	2206      	movs	r2, #6
 8004432:	f108 0701 	add.w	r7, r8, #1
 8004436:	f7fb fecb 	bl	80001d0 <memchr>
 800443a:	2800      	cmp	r0, #0
 800443c:	d034      	beq.n	80044a8 <_vfiprintf_r+0x1f8>
 800443e:	4b25      	ldr	r3, [pc, #148]	; (80044d4 <_vfiprintf_r+0x224>)
 8004440:	bb03      	cbnz	r3, 8004484 <_vfiprintf_r+0x1d4>
 8004442:	9b03      	ldr	r3, [sp, #12]
 8004444:	3307      	adds	r3, #7
 8004446:	f023 0307 	bic.w	r3, r3, #7
 800444a:	3308      	adds	r3, #8
 800444c:	9303      	str	r3, [sp, #12]
 800444e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004450:	444b      	add	r3, r9
 8004452:	9309      	str	r3, [sp, #36]	; 0x24
 8004454:	e74c      	b.n	80042f0 <_vfiprintf_r+0x40>
 8004456:	fb00 3202 	mla	r2, r0, r2, r3
 800445a:	2101      	movs	r1, #1
 800445c:	e786      	b.n	800436c <_vfiprintf_r+0xbc>
 800445e:	2300      	movs	r3, #0
 8004460:	9305      	str	r3, [sp, #20]
 8004462:	4618      	mov	r0, r3
 8004464:	250a      	movs	r5, #10
 8004466:	4688      	mov	r8, r1
 8004468:	3101      	adds	r1, #1
 800446a:	f898 2000 	ldrb.w	r2, [r8]
 800446e:	3a30      	subs	r2, #48	; 0x30
 8004470:	2a09      	cmp	r2, #9
 8004472:	d903      	bls.n	800447c <_vfiprintf_r+0x1cc>
 8004474:	2b00      	cmp	r3, #0
 8004476:	d0c5      	beq.n	8004404 <_vfiprintf_r+0x154>
 8004478:	9005      	str	r0, [sp, #20]
 800447a:	e7c3      	b.n	8004404 <_vfiprintf_r+0x154>
 800447c:	fb05 2000 	mla	r0, r5, r0, r2
 8004480:	2301      	movs	r3, #1
 8004482:	e7f0      	b.n	8004466 <_vfiprintf_r+0x1b6>
 8004484:	ab03      	add	r3, sp, #12
 8004486:	9300      	str	r3, [sp, #0]
 8004488:	4622      	mov	r2, r4
 800448a:	4b13      	ldr	r3, [pc, #76]	; (80044d8 <_vfiprintf_r+0x228>)
 800448c:	a904      	add	r1, sp, #16
 800448e:	4630      	mov	r0, r6
 8004490:	f3af 8000 	nop.w
 8004494:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004498:	4681      	mov	r9, r0
 800449a:	d1d8      	bne.n	800444e <_vfiprintf_r+0x19e>
 800449c:	89a3      	ldrh	r3, [r4, #12]
 800449e:	065b      	lsls	r3, r3, #25
 80044a0:	f53f af7d 	bmi.w	800439e <_vfiprintf_r+0xee>
 80044a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044a6:	e77c      	b.n	80043a2 <_vfiprintf_r+0xf2>
 80044a8:	ab03      	add	r3, sp, #12
 80044aa:	9300      	str	r3, [sp, #0]
 80044ac:	4622      	mov	r2, r4
 80044ae:	4b0a      	ldr	r3, [pc, #40]	; (80044d8 <_vfiprintf_r+0x228>)
 80044b0:	a904      	add	r1, sp, #16
 80044b2:	4630      	mov	r0, r6
 80044b4:	f000 f888 	bl	80045c8 <_printf_i>
 80044b8:	e7ec      	b.n	8004494 <_vfiprintf_r+0x1e4>
 80044ba:	bf00      	nop
 80044bc:	08004b1c 	.word	0x08004b1c
 80044c0:	08004b5c 	.word	0x08004b5c
 80044c4:	08004b3c 	.word	0x08004b3c
 80044c8:	08004afc 	.word	0x08004afc
 80044cc:	08004b62 	.word	0x08004b62
 80044d0:	08004b66 	.word	0x08004b66
 80044d4:	00000000 	.word	0x00000000
 80044d8:	0800428d 	.word	0x0800428d

080044dc <_printf_common>:
 80044dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044e0:	4691      	mov	r9, r2
 80044e2:	461f      	mov	r7, r3
 80044e4:	688a      	ldr	r2, [r1, #8]
 80044e6:	690b      	ldr	r3, [r1, #16]
 80044e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044ec:	4293      	cmp	r3, r2
 80044ee:	bfb8      	it	lt
 80044f0:	4613      	movlt	r3, r2
 80044f2:	f8c9 3000 	str.w	r3, [r9]
 80044f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044fa:	4606      	mov	r6, r0
 80044fc:	460c      	mov	r4, r1
 80044fe:	b112      	cbz	r2, 8004506 <_printf_common+0x2a>
 8004500:	3301      	adds	r3, #1
 8004502:	f8c9 3000 	str.w	r3, [r9]
 8004506:	6823      	ldr	r3, [r4, #0]
 8004508:	0699      	lsls	r1, r3, #26
 800450a:	bf42      	ittt	mi
 800450c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004510:	3302      	addmi	r3, #2
 8004512:	f8c9 3000 	strmi.w	r3, [r9]
 8004516:	6825      	ldr	r5, [r4, #0]
 8004518:	f015 0506 	ands.w	r5, r5, #6
 800451c:	d107      	bne.n	800452e <_printf_common+0x52>
 800451e:	f104 0a19 	add.w	sl, r4, #25
 8004522:	68e3      	ldr	r3, [r4, #12]
 8004524:	f8d9 2000 	ldr.w	r2, [r9]
 8004528:	1a9b      	subs	r3, r3, r2
 800452a:	429d      	cmp	r5, r3
 800452c:	db29      	blt.n	8004582 <_printf_common+0xa6>
 800452e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004532:	6822      	ldr	r2, [r4, #0]
 8004534:	3300      	adds	r3, #0
 8004536:	bf18      	it	ne
 8004538:	2301      	movne	r3, #1
 800453a:	0692      	lsls	r2, r2, #26
 800453c:	d42e      	bmi.n	800459c <_printf_common+0xc0>
 800453e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004542:	4639      	mov	r1, r7
 8004544:	4630      	mov	r0, r6
 8004546:	47c0      	blx	r8
 8004548:	3001      	adds	r0, #1
 800454a:	d021      	beq.n	8004590 <_printf_common+0xb4>
 800454c:	6823      	ldr	r3, [r4, #0]
 800454e:	68e5      	ldr	r5, [r4, #12]
 8004550:	f8d9 2000 	ldr.w	r2, [r9]
 8004554:	f003 0306 	and.w	r3, r3, #6
 8004558:	2b04      	cmp	r3, #4
 800455a:	bf08      	it	eq
 800455c:	1aad      	subeq	r5, r5, r2
 800455e:	68a3      	ldr	r3, [r4, #8]
 8004560:	6922      	ldr	r2, [r4, #16]
 8004562:	bf0c      	ite	eq
 8004564:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004568:	2500      	movne	r5, #0
 800456a:	4293      	cmp	r3, r2
 800456c:	bfc4      	itt	gt
 800456e:	1a9b      	subgt	r3, r3, r2
 8004570:	18ed      	addgt	r5, r5, r3
 8004572:	f04f 0900 	mov.w	r9, #0
 8004576:	341a      	adds	r4, #26
 8004578:	454d      	cmp	r5, r9
 800457a:	d11b      	bne.n	80045b4 <_printf_common+0xd8>
 800457c:	2000      	movs	r0, #0
 800457e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004582:	2301      	movs	r3, #1
 8004584:	4652      	mov	r2, sl
 8004586:	4639      	mov	r1, r7
 8004588:	4630      	mov	r0, r6
 800458a:	47c0      	blx	r8
 800458c:	3001      	adds	r0, #1
 800458e:	d103      	bne.n	8004598 <_printf_common+0xbc>
 8004590:	f04f 30ff 	mov.w	r0, #4294967295
 8004594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004598:	3501      	adds	r5, #1
 800459a:	e7c2      	b.n	8004522 <_printf_common+0x46>
 800459c:	18e1      	adds	r1, r4, r3
 800459e:	1c5a      	adds	r2, r3, #1
 80045a0:	2030      	movs	r0, #48	; 0x30
 80045a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045a6:	4422      	add	r2, r4
 80045a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045b0:	3302      	adds	r3, #2
 80045b2:	e7c4      	b.n	800453e <_printf_common+0x62>
 80045b4:	2301      	movs	r3, #1
 80045b6:	4622      	mov	r2, r4
 80045b8:	4639      	mov	r1, r7
 80045ba:	4630      	mov	r0, r6
 80045bc:	47c0      	blx	r8
 80045be:	3001      	adds	r0, #1
 80045c0:	d0e6      	beq.n	8004590 <_printf_common+0xb4>
 80045c2:	f109 0901 	add.w	r9, r9, #1
 80045c6:	e7d7      	b.n	8004578 <_printf_common+0x9c>

080045c8 <_printf_i>:
 80045c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80045cc:	4617      	mov	r7, r2
 80045ce:	7e0a      	ldrb	r2, [r1, #24]
 80045d0:	b085      	sub	sp, #20
 80045d2:	2a6e      	cmp	r2, #110	; 0x6e
 80045d4:	4698      	mov	r8, r3
 80045d6:	4606      	mov	r6, r0
 80045d8:	460c      	mov	r4, r1
 80045da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80045dc:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80045e0:	f000 80bc 	beq.w	800475c <_printf_i+0x194>
 80045e4:	d81a      	bhi.n	800461c <_printf_i+0x54>
 80045e6:	2a63      	cmp	r2, #99	; 0x63
 80045e8:	d02e      	beq.n	8004648 <_printf_i+0x80>
 80045ea:	d80a      	bhi.n	8004602 <_printf_i+0x3a>
 80045ec:	2a00      	cmp	r2, #0
 80045ee:	f000 80c8 	beq.w	8004782 <_printf_i+0x1ba>
 80045f2:	2a58      	cmp	r2, #88	; 0x58
 80045f4:	f000 808a 	beq.w	800470c <_printf_i+0x144>
 80045f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045fc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004600:	e02a      	b.n	8004658 <_printf_i+0x90>
 8004602:	2a64      	cmp	r2, #100	; 0x64
 8004604:	d001      	beq.n	800460a <_printf_i+0x42>
 8004606:	2a69      	cmp	r2, #105	; 0x69
 8004608:	d1f6      	bne.n	80045f8 <_printf_i+0x30>
 800460a:	6821      	ldr	r1, [r4, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004612:	d023      	beq.n	800465c <_printf_i+0x94>
 8004614:	1d11      	adds	r1, r2, #4
 8004616:	6019      	str	r1, [r3, #0]
 8004618:	6813      	ldr	r3, [r2, #0]
 800461a:	e027      	b.n	800466c <_printf_i+0xa4>
 800461c:	2a73      	cmp	r2, #115	; 0x73
 800461e:	f000 80b4 	beq.w	800478a <_printf_i+0x1c2>
 8004622:	d808      	bhi.n	8004636 <_printf_i+0x6e>
 8004624:	2a6f      	cmp	r2, #111	; 0x6f
 8004626:	d02a      	beq.n	800467e <_printf_i+0xb6>
 8004628:	2a70      	cmp	r2, #112	; 0x70
 800462a:	d1e5      	bne.n	80045f8 <_printf_i+0x30>
 800462c:	680a      	ldr	r2, [r1, #0]
 800462e:	f042 0220 	orr.w	r2, r2, #32
 8004632:	600a      	str	r2, [r1, #0]
 8004634:	e003      	b.n	800463e <_printf_i+0x76>
 8004636:	2a75      	cmp	r2, #117	; 0x75
 8004638:	d021      	beq.n	800467e <_printf_i+0xb6>
 800463a:	2a78      	cmp	r2, #120	; 0x78
 800463c:	d1dc      	bne.n	80045f8 <_printf_i+0x30>
 800463e:	2278      	movs	r2, #120	; 0x78
 8004640:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004644:	496e      	ldr	r1, [pc, #440]	; (8004800 <_printf_i+0x238>)
 8004646:	e064      	b.n	8004712 <_printf_i+0x14a>
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800464e:	1d11      	adds	r1, r2, #4
 8004650:	6019      	str	r1, [r3, #0]
 8004652:	6813      	ldr	r3, [r2, #0]
 8004654:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004658:	2301      	movs	r3, #1
 800465a:	e0a3      	b.n	80047a4 <_printf_i+0x1dc>
 800465c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004660:	f102 0104 	add.w	r1, r2, #4
 8004664:	6019      	str	r1, [r3, #0]
 8004666:	d0d7      	beq.n	8004618 <_printf_i+0x50>
 8004668:	f9b2 3000 	ldrsh.w	r3, [r2]
 800466c:	2b00      	cmp	r3, #0
 800466e:	da03      	bge.n	8004678 <_printf_i+0xb0>
 8004670:	222d      	movs	r2, #45	; 0x2d
 8004672:	425b      	negs	r3, r3
 8004674:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004678:	4962      	ldr	r1, [pc, #392]	; (8004804 <_printf_i+0x23c>)
 800467a:	220a      	movs	r2, #10
 800467c:	e017      	b.n	80046ae <_printf_i+0xe6>
 800467e:	6820      	ldr	r0, [r4, #0]
 8004680:	6819      	ldr	r1, [r3, #0]
 8004682:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004686:	d003      	beq.n	8004690 <_printf_i+0xc8>
 8004688:	1d08      	adds	r0, r1, #4
 800468a:	6018      	str	r0, [r3, #0]
 800468c:	680b      	ldr	r3, [r1, #0]
 800468e:	e006      	b.n	800469e <_printf_i+0xd6>
 8004690:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004694:	f101 0004 	add.w	r0, r1, #4
 8004698:	6018      	str	r0, [r3, #0]
 800469a:	d0f7      	beq.n	800468c <_printf_i+0xc4>
 800469c:	880b      	ldrh	r3, [r1, #0]
 800469e:	4959      	ldr	r1, [pc, #356]	; (8004804 <_printf_i+0x23c>)
 80046a0:	2a6f      	cmp	r2, #111	; 0x6f
 80046a2:	bf14      	ite	ne
 80046a4:	220a      	movne	r2, #10
 80046a6:	2208      	moveq	r2, #8
 80046a8:	2000      	movs	r0, #0
 80046aa:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80046ae:	6865      	ldr	r5, [r4, #4]
 80046b0:	60a5      	str	r5, [r4, #8]
 80046b2:	2d00      	cmp	r5, #0
 80046b4:	f2c0 809c 	blt.w	80047f0 <_printf_i+0x228>
 80046b8:	6820      	ldr	r0, [r4, #0]
 80046ba:	f020 0004 	bic.w	r0, r0, #4
 80046be:	6020      	str	r0, [r4, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d13f      	bne.n	8004744 <_printf_i+0x17c>
 80046c4:	2d00      	cmp	r5, #0
 80046c6:	f040 8095 	bne.w	80047f4 <_printf_i+0x22c>
 80046ca:	4675      	mov	r5, lr
 80046cc:	2a08      	cmp	r2, #8
 80046ce:	d10b      	bne.n	80046e8 <_printf_i+0x120>
 80046d0:	6823      	ldr	r3, [r4, #0]
 80046d2:	07da      	lsls	r2, r3, #31
 80046d4:	d508      	bpl.n	80046e8 <_printf_i+0x120>
 80046d6:	6923      	ldr	r3, [r4, #16]
 80046d8:	6862      	ldr	r2, [r4, #4]
 80046da:	429a      	cmp	r2, r3
 80046dc:	bfde      	ittt	le
 80046de:	2330      	movle	r3, #48	; 0x30
 80046e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80046e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80046e8:	ebae 0305 	sub.w	r3, lr, r5
 80046ec:	6123      	str	r3, [r4, #16]
 80046ee:	f8cd 8000 	str.w	r8, [sp]
 80046f2:	463b      	mov	r3, r7
 80046f4:	aa03      	add	r2, sp, #12
 80046f6:	4621      	mov	r1, r4
 80046f8:	4630      	mov	r0, r6
 80046fa:	f7ff feef 	bl	80044dc <_printf_common>
 80046fe:	3001      	adds	r0, #1
 8004700:	d155      	bne.n	80047ae <_printf_i+0x1e6>
 8004702:	f04f 30ff 	mov.w	r0, #4294967295
 8004706:	b005      	add	sp, #20
 8004708:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800470c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004710:	493c      	ldr	r1, [pc, #240]	; (8004804 <_printf_i+0x23c>)
 8004712:	6822      	ldr	r2, [r4, #0]
 8004714:	6818      	ldr	r0, [r3, #0]
 8004716:	f012 0f80 	tst.w	r2, #128	; 0x80
 800471a:	f100 0504 	add.w	r5, r0, #4
 800471e:	601d      	str	r5, [r3, #0]
 8004720:	d001      	beq.n	8004726 <_printf_i+0x15e>
 8004722:	6803      	ldr	r3, [r0, #0]
 8004724:	e002      	b.n	800472c <_printf_i+0x164>
 8004726:	0655      	lsls	r5, r2, #25
 8004728:	d5fb      	bpl.n	8004722 <_printf_i+0x15a>
 800472a:	8803      	ldrh	r3, [r0, #0]
 800472c:	07d0      	lsls	r0, r2, #31
 800472e:	bf44      	itt	mi
 8004730:	f042 0220 	orrmi.w	r2, r2, #32
 8004734:	6022      	strmi	r2, [r4, #0]
 8004736:	b91b      	cbnz	r3, 8004740 <_printf_i+0x178>
 8004738:	6822      	ldr	r2, [r4, #0]
 800473a:	f022 0220 	bic.w	r2, r2, #32
 800473e:	6022      	str	r2, [r4, #0]
 8004740:	2210      	movs	r2, #16
 8004742:	e7b1      	b.n	80046a8 <_printf_i+0xe0>
 8004744:	4675      	mov	r5, lr
 8004746:	fbb3 f0f2 	udiv	r0, r3, r2
 800474a:	fb02 3310 	mls	r3, r2, r0, r3
 800474e:	5ccb      	ldrb	r3, [r1, r3]
 8004750:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004754:	4603      	mov	r3, r0
 8004756:	2800      	cmp	r0, #0
 8004758:	d1f5      	bne.n	8004746 <_printf_i+0x17e>
 800475a:	e7b7      	b.n	80046cc <_printf_i+0x104>
 800475c:	6808      	ldr	r0, [r1, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	6949      	ldr	r1, [r1, #20]
 8004762:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004766:	d004      	beq.n	8004772 <_printf_i+0x1aa>
 8004768:	1d10      	adds	r0, r2, #4
 800476a:	6018      	str	r0, [r3, #0]
 800476c:	6813      	ldr	r3, [r2, #0]
 800476e:	6019      	str	r1, [r3, #0]
 8004770:	e007      	b.n	8004782 <_printf_i+0x1ba>
 8004772:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004776:	f102 0004 	add.w	r0, r2, #4
 800477a:	6018      	str	r0, [r3, #0]
 800477c:	6813      	ldr	r3, [r2, #0]
 800477e:	d0f6      	beq.n	800476e <_printf_i+0x1a6>
 8004780:	8019      	strh	r1, [r3, #0]
 8004782:	2300      	movs	r3, #0
 8004784:	6123      	str	r3, [r4, #16]
 8004786:	4675      	mov	r5, lr
 8004788:	e7b1      	b.n	80046ee <_printf_i+0x126>
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	1d11      	adds	r1, r2, #4
 800478e:	6019      	str	r1, [r3, #0]
 8004790:	6815      	ldr	r5, [r2, #0]
 8004792:	6862      	ldr	r2, [r4, #4]
 8004794:	2100      	movs	r1, #0
 8004796:	4628      	mov	r0, r5
 8004798:	f7fb fd1a 	bl	80001d0 <memchr>
 800479c:	b108      	cbz	r0, 80047a2 <_printf_i+0x1da>
 800479e:	1b40      	subs	r0, r0, r5
 80047a0:	6060      	str	r0, [r4, #4]
 80047a2:	6863      	ldr	r3, [r4, #4]
 80047a4:	6123      	str	r3, [r4, #16]
 80047a6:	2300      	movs	r3, #0
 80047a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047ac:	e79f      	b.n	80046ee <_printf_i+0x126>
 80047ae:	6923      	ldr	r3, [r4, #16]
 80047b0:	462a      	mov	r2, r5
 80047b2:	4639      	mov	r1, r7
 80047b4:	4630      	mov	r0, r6
 80047b6:	47c0      	blx	r8
 80047b8:	3001      	adds	r0, #1
 80047ba:	d0a2      	beq.n	8004702 <_printf_i+0x13a>
 80047bc:	6823      	ldr	r3, [r4, #0]
 80047be:	079b      	lsls	r3, r3, #30
 80047c0:	d507      	bpl.n	80047d2 <_printf_i+0x20a>
 80047c2:	2500      	movs	r5, #0
 80047c4:	f104 0919 	add.w	r9, r4, #25
 80047c8:	68e3      	ldr	r3, [r4, #12]
 80047ca:	9a03      	ldr	r2, [sp, #12]
 80047cc:	1a9b      	subs	r3, r3, r2
 80047ce:	429d      	cmp	r5, r3
 80047d0:	db05      	blt.n	80047de <_printf_i+0x216>
 80047d2:	68e0      	ldr	r0, [r4, #12]
 80047d4:	9b03      	ldr	r3, [sp, #12]
 80047d6:	4298      	cmp	r0, r3
 80047d8:	bfb8      	it	lt
 80047da:	4618      	movlt	r0, r3
 80047dc:	e793      	b.n	8004706 <_printf_i+0x13e>
 80047de:	2301      	movs	r3, #1
 80047e0:	464a      	mov	r2, r9
 80047e2:	4639      	mov	r1, r7
 80047e4:	4630      	mov	r0, r6
 80047e6:	47c0      	blx	r8
 80047e8:	3001      	adds	r0, #1
 80047ea:	d08a      	beq.n	8004702 <_printf_i+0x13a>
 80047ec:	3501      	adds	r5, #1
 80047ee:	e7eb      	b.n	80047c8 <_printf_i+0x200>
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d1a7      	bne.n	8004744 <_printf_i+0x17c>
 80047f4:	780b      	ldrb	r3, [r1, #0]
 80047f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047fe:	e765      	b.n	80046cc <_printf_i+0x104>
 8004800:	08004b7e 	.word	0x08004b7e
 8004804:	08004b6d 	.word	0x08004b6d

08004808 <_sbrk_r>:
 8004808:	b538      	push	{r3, r4, r5, lr}
 800480a:	4c06      	ldr	r4, [pc, #24]	; (8004824 <_sbrk_r+0x1c>)
 800480c:	2300      	movs	r3, #0
 800480e:	4605      	mov	r5, r0
 8004810:	4608      	mov	r0, r1
 8004812:	6023      	str	r3, [r4, #0]
 8004814:	f7ff f864 	bl	80038e0 <_sbrk>
 8004818:	1c43      	adds	r3, r0, #1
 800481a:	d102      	bne.n	8004822 <_sbrk_r+0x1a>
 800481c:	6823      	ldr	r3, [r4, #0]
 800481e:	b103      	cbz	r3, 8004822 <_sbrk_r+0x1a>
 8004820:	602b      	str	r3, [r5, #0]
 8004822:	bd38      	pop	{r3, r4, r5, pc}
 8004824:	20000234 	.word	0x20000234

08004828 <__sread>:
 8004828:	b510      	push	{r4, lr}
 800482a:	460c      	mov	r4, r1
 800482c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004830:	f000 f896 	bl	8004960 <_read_r>
 8004834:	2800      	cmp	r0, #0
 8004836:	bfab      	itete	ge
 8004838:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800483a:	89a3      	ldrhlt	r3, [r4, #12]
 800483c:	181b      	addge	r3, r3, r0
 800483e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004842:	bfac      	ite	ge
 8004844:	6563      	strge	r3, [r4, #84]	; 0x54
 8004846:	81a3      	strhlt	r3, [r4, #12]
 8004848:	bd10      	pop	{r4, pc}

0800484a <__swrite>:
 800484a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800484e:	461f      	mov	r7, r3
 8004850:	898b      	ldrh	r3, [r1, #12]
 8004852:	05db      	lsls	r3, r3, #23
 8004854:	4605      	mov	r5, r0
 8004856:	460c      	mov	r4, r1
 8004858:	4616      	mov	r6, r2
 800485a:	d505      	bpl.n	8004868 <__swrite+0x1e>
 800485c:	2302      	movs	r3, #2
 800485e:	2200      	movs	r2, #0
 8004860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004864:	f000 f868 	bl	8004938 <_lseek_r>
 8004868:	89a3      	ldrh	r3, [r4, #12]
 800486a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800486e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004872:	81a3      	strh	r3, [r4, #12]
 8004874:	4632      	mov	r2, r6
 8004876:	463b      	mov	r3, r7
 8004878:	4628      	mov	r0, r5
 800487a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800487e:	f000 b817 	b.w	80048b0 <_write_r>

08004882 <__sseek>:
 8004882:	b510      	push	{r4, lr}
 8004884:	460c      	mov	r4, r1
 8004886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800488a:	f000 f855 	bl	8004938 <_lseek_r>
 800488e:	1c43      	adds	r3, r0, #1
 8004890:	89a3      	ldrh	r3, [r4, #12]
 8004892:	bf15      	itete	ne
 8004894:	6560      	strne	r0, [r4, #84]	; 0x54
 8004896:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800489a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800489e:	81a3      	strheq	r3, [r4, #12]
 80048a0:	bf18      	it	ne
 80048a2:	81a3      	strhne	r3, [r4, #12]
 80048a4:	bd10      	pop	{r4, pc}

080048a6 <__sclose>:
 80048a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048aa:	f000 b813 	b.w	80048d4 <_close_r>
	...

080048b0 <_write_r>:
 80048b0:	b538      	push	{r3, r4, r5, lr}
 80048b2:	4c07      	ldr	r4, [pc, #28]	; (80048d0 <_write_r+0x20>)
 80048b4:	4605      	mov	r5, r0
 80048b6:	4608      	mov	r0, r1
 80048b8:	4611      	mov	r1, r2
 80048ba:	2200      	movs	r2, #0
 80048bc:	6022      	str	r2, [r4, #0]
 80048be:	461a      	mov	r2, r3
 80048c0:	f7ff f800 	bl	80038c4 <_write>
 80048c4:	1c43      	adds	r3, r0, #1
 80048c6:	d102      	bne.n	80048ce <_write_r+0x1e>
 80048c8:	6823      	ldr	r3, [r4, #0]
 80048ca:	b103      	cbz	r3, 80048ce <_write_r+0x1e>
 80048cc:	602b      	str	r3, [r5, #0]
 80048ce:	bd38      	pop	{r3, r4, r5, pc}
 80048d0:	20000234 	.word	0x20000234

080048d4 <_close_r>:
 80048d4:	b538      	push	{r3, r4, r5, lr}
 80048d6:	4c06      	ldr	r4, [pc, #24]	; (80048f0 <_close_r+0x1c>)
 80048d8:	2300      	movs	r3, #0
 80048da:	4605      	mov	r5, r0
 80048dc:	4608      	mov	r0, r1
 80048de:	6023      	str	r3, [r4, #0]
 80048e0:	f7ff f818 	bl	8003914 <_close>
 80048e4:	1c43      	adds	r3, r0, #1
 80048e6:	d102      	bne.n	80048ee <_close_r+0x1a>
 80048e8:	6823      	ldr	r3, [r4, #0]
 80048ea:	b103      	cbz	r3, 80048ee <_close_r+0x1a>
 80048ec:	602b      	str	r3, [r5, #0]
 80048ee:	bd38      	pop	{r3, r4, r5, pc}
 80048f0:	20000234 	.word	0x20000234

080048f4 <_fstat_r>:
 80048f4:	b538      	push	{r3, r4, r5, lr}
 80048f6:	4c07      	ldr	r4, [pc, #28]	; (8004914 <_fstat_r+0x20>)
 80048f8:	2300      	movs	r3, #0
 80048fa:	4605      	mov	r5, r0
 80048fc:	4608      	mov	r0, r1
 80048fe:	4611      	mov	r1, r2
 8004900:	6023      	str	r3, [r4, #0]
 8004902:	f7ff f80a 	bl	800391a <_fstat>
 8004906:	1c43      	adds	r3, r0, #1
 8004908:	d102      	bne.n	8004910 <_fstat_r+0x1c>
 800490a:	6823      	ldr	r3, [r4, #0]
 800490c:	b103      	cbz	r3, 8004910 <_fstat_r+0x1c>
 800490e:	602b      	str	r3, [r5, #0]
 8004910:	bd38      	pop	{r3, r4, r5, pc}
 8004912:	bf00      	nop
 8004914:	20000234 	.word	0x20000234

08004918 <_isatty_r>:
 8004918:	b538      	push	{r3, r4, r5, lr}
 800491a:	4c06      	ldr	r4, [pc, #24]	; (8004934 <_isatty_r+0x1c>)
 800491c:	2300      	movs	r3, #0
 800491e:	4605      	mov	r5, r0
 8004920:	4608      	mov	r0, r1
 8004922:	6023      	str	r3, [r4, #0]
 8004924:	f7fe fffe 	bl	8003924 <_isatty>
 8004928:	1c43      	adds	r3, r0, #1
 800492a:	d102      	bne.n	8004932 <_isatty_r+0x1a>
 800492c:	6823      	ldr	r3, [r4, #0]
 800492e:	b103      	cbz	r3, 8004932 <_isatty_r+0x1a>
 8004930:	602b      	str	r3, [r5, #0]
 8004932:	bd38      	pop	{r3, r4, r5, pc}
 8004934:	20000234 	.word	0x20000234

08004938 <_lseek_r>:
 8004938:	b538      	push	{r3, r4, r5, lr}
 800493a:	4c07      	ldr	r4, [pc, #28]	; (8004958 <_lseek_r+0x20>)
 800493c:	4605      	mov	r5, r0
 800493e:	4608      	mov	r0, r1
 8004940:	4611      	mov	r1, r2
 8004942:	2200      	movs	r2, #0
 8004944:	6022      	str	r2, [r4, #0]
 8004946:	461a      	mov	r2, r3
 8004948:	f7fe ffee 	bl	8003928 <_lseek>
 800494c:	1c43      	adds	r3, r0, #1
 800494e:	d102      	bne.n	8004956 <_lseek_r+0x1e>
 8004950:	6823      	ldr	r3, [r4, #0]
 8004952:	b103      	cbz	r3, 8004956 <_lseek_r+0x1e>
 8004954:	602b      	str	r3, [r5, #0]
 8004956:	bd38      	pop	{r3, r4, r5, pc}
 8004958:	20000234 	.word	0x20000234

0800495c <__malloc_lock>:
 800495c:	4770      	bx	lr

0800495e <__malloc_unlock>:
 800495e:	4770      	bx	lr

08004960 <_read_r>:
 8004960:	b538      	push	{r3, r4, r5, lr}
 8004962:	4c07      	ldr	r4, [pc, #28]	; (8004980 <_read_r+0x20>)
 8004964:	4605      	mov	r5, r0
 8004966:	4608      	mov	r0, r1
 8004968:	4611      	mov	r1, r2
 800496a:	2200      	movs	r2, #0
 800496c:	6022      	str	r2, [r4, #0]
 800496e:	461a      	mov	r2, r3
 8004970:	f7fe ff9a 	bl	80038a8 <_read>
 8004974:	1c43      	adds	r3, r0, #1
 8004976:	d102      	bne.n	800497e <_read_r+0x1e>
 8004978:	6823      	ldr	r3, [r4, #0]
 800497a:	b103      	cbz	r3, 800497e <_read_r+0x1e>
 800497c:	602b      	str	r3, [r5, #0]
 800497e:	bd38      	pop	{r3, r4, r5, pc}
 8004980:	20000234 	.word	0x20000234

08004984 <_init>:
 8004984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004986:	bf00      	nop
 8004988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800498a:	bc08      	pop	{r3}
 800498c:	469e      	mov	lr, r3
 800498e:	4770      	bx	lr

08004990 <_fini>:
 8004990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004992:	bf00      	nop
 8004994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004996:	bc08      	pop	{r3}
 8004998:	469e      	mov	lr, r3
 800499a:	4770      	bx	lr
