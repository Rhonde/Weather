# Copyright (c) 2017-2018, Niklas Hauser
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

#!/usr/bin/env python3

from os.path import join, abspath

Import("env")
profile = ARGUMENTS.get("profile", "release")
env["BUILDPATH"] = join(env["CONFIG_BUILD_BASE"], profile)

env.Append(toolpath=[abspath("scons/site_tools"), abspath("ext/dlr/scons-build-tools/site_tools")])
env.Tool("black_magic_probe")
env.Tool("build_target")
env.Tool("cmake_wrapper")
env.Tool("compiler_arm_none_eabi_gcc")
env.Tool("find_files")
env.Tool("gdb")
env.Tool("program_openocd")
env.Tool("qtcreator")
env.Tool("settings_buildpath")
env.Tool("template")
env.Tool("utils_buildformat")
env.Tool("utils_buildsize")
env["BASEPATH"] = abspath(".")

# Toolchain configuration
if profile == "debug":
    env.Append(CPPDEFINES = [
        "MODM_DEBUG_BUILD",
    ])

env["CCFLAGS"] = [
    "-fdata-sections",
    "-ffunction-sections",
    "-finline-limit=10000",
    "-fshort-wchar",
    "-fsingle-precision-constant",
    "-funsigned-bitfields",
    "-funsigned-char",
    "-fwrapv",
    "-g3",
    "-gdwarf",
    "-W",
    "-Wall",
    "-Wdouble-promotion",
    "-Wduplicated-cond",
    "-Werror=format",
    "-Werror=maybe-uninitialized",
    "-Werror=overflow",
    "-Werror=sign-compare",
    "-Wextra",
    "-Wlogical-op",
    "-Wpointer-arith",
    "-Wundef",
]
if profile == "release":
    env.Append(CCFLAGS = [
        "-Os",
    ])
if profile == "debug":
    env.Append(CCFLAGS = [
        "-fno-move-loop-invariants",
        "-fno-split-wide-types",
        "-fno-tree-loop-optimize",
        "-Og",
    ])

env["CFLAGS"] = [
    "-std=gnu11",
    "-Wbad-function-cast",
    "-Wimplicit",
    "-Wnested-externs",
    "-Wredundant-decls",
    "-Wstrict-prototypes",
]

env["CXXFLAGS"] = [
    "-fno-exceptions",
    "-fno-rtti",
    "-fno-threadsafe-statics",
    "-fno-unwind-tables",
    "-fstrict-enums",
    "-fuse-cxa-atexit",
    "-std=c++17",
    "-Woverloaded-virtual",
]

env["ASFLAGS"] = [
    "-g3",
    "-gdwarf",
]

env["LINKFLAGS"] = [
    "--specs=nano.specs",
    "--specs=nosys.specs",
    "-L{linkdir}".format(linkdir=abspath("link")),
    "-nostartfiles",
    "-Tlinkerscript.ld",
    "-Wl,--fatal-warnings",
    "-Wl,--gc-sections",
    "-Wl,--no-wchar-size-warning",
    "-Wl,--relax",
    "-Wl,-Map,{target_base}.map,--cref".format(target_base="${TARGET.base}"),
    "-Wl,-wrap,_calloc_r",
    "-Wl,-wrap,_free_r",
    "-Wl,-wrap,_malloc_r",
    "-Wl,-wrap,_realloc_r",
]

env["ARCHFLAGS"] = [
    "-mcpu=cortex-m4",
    "-mfloat-abi=hard",
    "-mfpu=fpv4-sp-d16",
    "-mthumb",
]


# ARCHFLAGS must be known for compiling *and* linking
env.Append(CCFLAGS="$ARCHFLAGS")
env.Append(ASFLAGS="$ARCHFLAGS")
env.Append(LINKFLAGS="$ARCHFLAGS")

env["_LIBFLAGS"] = "-Wl,--start-group " + env["_LIBFLAGS"] + " -Wl,--end-group"
# We need to link libmodm.a with --whole-archive, so that all weak symbols are visible to the linker.
# Functions placed in a linker section list (like modm_section(".hardware_init")) are typically not
# referenced externally, so the linker will discard them when searching.
# From https://sourceware.org/binutils/docs/ld/Options.html#Options:
#     For each archive mentioned on the command line after the --whole-archive option, include every object
#     file in the archive in the link, rather than searching the archive for the required object files.
env["_LIBFLAGS"] = "-Wl,--whole-archive " + env["_LIBFLAGS"] + " -Wl,--no-whole-archive"
# alternative workarounds
# env["LINKCOM"] = env["LINKCOM"].replace("$_LIBFLAGS", "-Wl,--whole-archive $_LIBFLAGS -Wl,--no-whole-archive")
# workaround for one individual library
# whole_archive = env.Command(join(env.Dir("#").path, "-Wl,--whole-archive"), [], "")
# no_whole_archive = env.Command(join(env.Dir("#").path, "-Wl,--no-whole-archive"), [], "")
# library = whole_archive + library + no_whole_archive
# Device configuration
env["CONFIG_DEVICE_NAME"] = "stm32l476rgt"
env["CONFIG_DEVICE_MEMORY"] = [
    {'name': 'flash', 'access': 'rx', 'start': 134217728, 'size': 1048576},
    {'name': 'sram1', 'access': 'rwx', 'start': 536870912, 'size': 98304},
    {'name': 'sram2', 'access': 'rwx', 'start': 536969216, 'size': 32768},
]
# Programming configuration
env.Append(MODM_OPENOCD_CONFIGFILES=["$BASEPATH/openocd.cfg"])
env.SetDefault(MODM_GDBINIT=["$BASEPATH/gdbinit"])
# XPCC generator tool path
env["XPCC_SYSTEM_DESIGN"] = join(abspath("."), "tools", "xpcc_generator")
env.AppendUnique(CPPPATH=[
    abspath("ext"),
    abspath("ext\cmsis\core"),
    abspath("ext\cmsis\device"),
    abspath("src"),
])

files = [
    env.File("src\modm\architecture\driver\atomic\flag.cpp"),
    env.File("src\modm\board\board.cpp"),
    env.File("src\modm\debug\error_report.cpp"),
    env.File("src\modm\io\iodevice.cpp"),
    env.File("src\modm\io\iostream.cpp"),
    env.File("src\modm\io\iostream_float.cpp"),
    env.File("src\modm\io\iostream_printf.cpp"),
    env.File("src\modm\math\utils\bit_operation.cpp"),
    env.File("src\modm\math\utils\pc\operator.cpp"),
    env.File("src\modm\platform\clock\rcc.cpp"),
    env.File("src\modm\platform\clock\systick_timer.cpp"),
    env.File("src\modm\platform\core\assert.cpp"),
    env.File("src\modm\platform\core\clock.cpp"),
    env.File("src\modm\platform\core\cxxabi.cpp"),
    env.File("src\modm\platform\core\default_handler.sx"),
    env.File("src\modm\platform\core\delay.cpp"),
    env.File("src\modm\platform\core\heap_newlib.c"),
    env.File("src\modm\platform\core\heap_table.c"),
    env.File("src\modm\platform\core\startup.c"),
    env.File("src\modm\platform\core\startup_platform.c"),
    env.File("src\modm\platform\core\vectors.c"),
    env.File("src\modm\platform\gpio\enable.cpp"),
    env.File("src\modm\platform\uart\uart_2.cpp"),
    env.File("src\modm\utils\dummy.cpp"),
    env.File("src\unittest\controller.cpp"),
    env.File("src\unittest\harness.cpp"),
    env.File("src\unittest\reporter.cpp"),
    env.File("src\unittest\testsuite.cpp"),
    env.File("src\unittest\type\count_type.cpp"),
]
library = env.StaticLibrary(target="modm", source=files)

env.AppendUnique(LIBS=[
    library,
])
env.AppendUnique(LIBPATH=[
    abspath(str(library[0].get_dir())),
])
Return("library")